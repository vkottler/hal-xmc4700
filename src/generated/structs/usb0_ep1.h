/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include "../enums/USB0_EP1_DIEPCTL_INTBULK_DPID.h"
#include "../enums/USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum.h"
#include "../enums/USB0_EP1_DIEPCTL_ISOCONT_EPType.h"
#include "../enums/USB0_EP1_DIEPCTL_ISOCONT_NAKSts.h"
#include "../enums/USB0_EP1_DOEPTSIZ_ISO_RxDPID.h"
#include "../enums/USB0_EP1_DTXFSTS_INEPTxFSpcAvail.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Universal Serial Bus
 */
struct [[gnu::packed]] usb0_ep1
{
    /* Constant attributes. */
    static constexpr std::size_t size = 544; /*!< usb0_ep1's size in bytes. */

    /* Fields. */
    union {
        uint32_t DIEPCTL_ISOCONT; /* (read-write) Device Endpoint Control
                                     Register [ISOCONT] */
        uint32_t DIEPCTL_INTBULK; /* (read-write) Device Endpoint Control
                                     Register [INTBULK] */
    };
    union {
        uint32_t DOEPCTL_ISOCONT; /* (read-write) Device Endpoint Control
                                     Register [ISOCONT] */
        uint32_t DOEPCTL_INTBULK; /* (read-write) Device Endpoint Control
                                     Register [INTBULK] */
    };
    union {
        uint32_t DOEPTSIZ_ISO; /* (read-write) Device Endpoint Transfer Size
                                  Register [ISO] */
        uint32_t DOEPTSIZ_CONTROL; /* (read-write) Device Endpoint Transfer
                                      Size Register [CONT] */
    };
    const uint32_t reserved_padding0 = {};
    uint32_t DIEPINT; /*!< (read-write) Device Endpoint Interrupt Register */
    const uint32_t reserved_padding1 = {};
    uint32_t
        DIEPTSIZ; /*!< (read-write) Device Endpoint Transfer Size Register */
    uint32_t DIEPDMA; /*!< (read-write) Device Endpoint DMA Address Register */
    const uint32_t DTXFSTS = {}; /*!< (read-only) Device IN Endpoint Transmit
                                    FIFO Status Register */
    const uint32_t DIEPDMAB =
        {}; /*!< (read-only) Device Endpoint DMA Buffer Address Register */
    static constexpr std::size_t reserved_padding2_length = 120;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    const uint32_t reserved_padding3 = {};
    uint32_t DOEPINT; /*!< (read-write) Device Endpoint Interrupt Register */
    const uint32_t reserved_padding4 = {};
    uint32_t DOEPDMA; /*!< (read-write) Device Endpoint DMA Address Register */
    const uint32_t reserved_padding5 = {};
    const uint32_t DOEPDMAB =
        {}; /*!< (read-only) Device Endpoint DMA Buffer Address Register */

    /* Methods. */

    /**
     * Get DIEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline bool get_DIEPCTL_ISOCONT_EPEna() volatile
    {
        return DIEPCTL_ISOCONT & (1u << 31u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void set_DIEPCTL_ISOCONT_EPEna() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 31u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void clear_DIEPCTL_ISOCONT_EPEna() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 31u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void toggle_DIEPCTL_ISOCONT_EPEna() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 31u;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline bool get_DIEPCTL_ISOCONT_EPDis() volatile
    {
        return DIEPCTL_ISOCONT & (1u << 30u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void set_DIEPCTL_ISOCONT_EPDis() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 30u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void clear_DIEPCTL_ISOCONT_EPDis() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 30u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void toggle_DIEPCTL_ISOCONT_EPDis() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 30u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SetOddFr bit.
     *
     * Set Odd frame
     */
    inline void set_DIEPCTL_ISOCONT_SetOddFr() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 29u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SetOddFr bit.
     *
     * Set Odd frame
     */
    inline void clear_DIEPCTL_ISOCONT_SetOddFr() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 29u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SetOddFr bit.
     *
     * Set Odd frame
     */
    inline void toggle_DIEPCTL_ISOCONT_SetOddFr() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 29u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SetEvenFr bit.
     *
     * In non-Scatter/Gather DMA mode: Set Even frame
     */
    inline void set_DIEPCTL_ISOCONT_SetEvenFr() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 28u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SetEvenFr bit.
     *
     * In non-Scatter/Gather DMA mode: Set Even frame
     */
    inline void clear_DIEPCTL_ISOCONT_SetEvenFr() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 28u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SetEvenFr bit.
     *
     * In non-Scatter/Gather DMA mode: Set Even frame
     */
    inline void toggle_DIEPCTL_ISOCONT_SetEvenFr() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 28u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void set_DIEPCTL_ISOCONT_SNAK() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 27u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void clear_DIEPCTL_ISOCONT_SNAK() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 27u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void toggle_DIEPCTL_ISOCONT_SNAK() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 27u;
    }

    /**
     * Set DIEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void set_DIEPCTL_ISOCONT_CNAK() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 26u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void clear_DIEPCTL_ISOCONT_CNAK() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 26u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void toggle_DIEPCTL_ISOCONT_CNAK() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 26u;
    }

    /**
     * Get DIEPCTL_ISOCONT's TxFNum field.
     *
     * TxFIFO Number
     */
    inline uint8_t get_DIEPCTL_ISOCONT_TxFNum() volatile
    {
        return (DIEPCTL_ISOCONT >> 22u) & 0b1111u;
    }

    /**
     * Set DIEPCTL_ISOCONT's TxFNum field.
     *
     * TxFIFO Number
     */
    inline void set_DIEPCTL_ISOCONT_TxFNum(uint8_t value) volatile
    {
        uint32_t curr = DIEPCTL_ISOCONT;

        curr &= ~(0b1111u << 22u);
        curr |= (value & 0b1111u) << 22u;

        DIEPCTL_ISOCONT = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline bool get_DIEPCTL_ISOCONT_Stall() volatile
    {
        return DIEPCTL_ISOCONT & (1u << 21u);
    }

    /**
     * Set DIEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void set_DIEPCTL_ISOCONT_Stall() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 21u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void clear_DIEPCTL_ISOCONT_Stall() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 21u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void toggle_DIEPCTL_ISOCONT_Stall() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 21u;
    }

    /**
     * Get DIEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline bool get_DIEPCTL_ISOCONT_Snp() volatile
    {
        return DIEPCTL_ISOCONT & (1u << 20u);
    }

    /**
     * Set DIEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void set_DIEPCTL_ISOCONT_Snp() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 20u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void clear_DIEPCTL_ISOCONT_Snp() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 20u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void toggle_DIEPCTL_ISOCONT_Snp() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 20u;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPType field.
     *
     * Endpoint Type
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_EPType
    get_DIEPCTL_ISOCONT_EPType() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_EPType((DIEPCTL_ISOCONT >> 18u) &
                                               0b11u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPType field.
     *
     * Endpoint Type
     */
    inline void set_DIEPCTL_ISOCONT_EPType(
        USB0_EP1_DIEPCTL_ISOCONT_EPType value) volatile
    {
        uint32_t curr = DIEPCTL_ISOCONT;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        DIEPCTL_ISOCONT = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's NAKSts bit.
     *
     * NAK Status
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_NAKSts
    get_DIEPCTL_ISOCONT_NAKSts() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_NAKSts(DIEPCTL_ISOCONT & (1u << 17u));
    }

    /**
     * Get DIEPCTL_ISOCONT's EO_FrNum bit.
     *
     * Even/Odd Frame
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum
    get_DIEPCTL_ISOCONT_EO_FrNum() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum(DIEPCTL_ISOCONT &
                                                 (1u << 16u));
    }

    /**
     * Get DIEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline bool get_DIEPCTL_ISOCONT_USBActEP() volatile
    {
        return DIEPCTL_ISOCONT & (1u << 15u);
    }

    /**
     * Set DIEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void set_DIEPCTL_ISOCONT_USBActEP() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 15u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void clear_DIEPCTL_ISOCONT_USBActEP() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 15u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void toggle_DIEPCTL_ISOCONT_USBActEP() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 15u;
    }

    /**
     * Get DIEPCTL_ISOCONT's MPS field.
     *
     * Maximum Packet Size
     */
    inline uint16_t get_DIEPCTL_ISOCONT_MPS() volatile
    {
        return (DIEPCTL_ISOCONT >> 0u) & 0b11111111111u;
    }

    /**
     * Set DIEPCTL_ISOCONT's MPS field.
     *
     * Maximum Packet Size
     */
    inline void set_DIEPCTL_ISOCONT_MPS(uint16_t value) volatile
    {
        uint32_t curr = DIEPCTL_ISOCONT;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        DIEPCTL_ISOCONT = curr;
    }

    /**
     * Get all of DIEPCTL_ISOCONT's bit fields.
     *
     * (read-write) Device Endpoint Control Register [ISOCONT]
     */
    inline void get_DIEPCTL_ISOCONT(
        bool &EPEna, bool &EPDis, uint8_t &TxFNum, bool &Stall, bool &Snp,
        USB0_EP1_DIEPCTL_ISOCONT_EPType &EPType,
        USB0_EP1_DIEPCTL_ISOCONT_NAKSts &NAKSts,
        USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum &EO_FrNum, bool &USBActEP,
        uint16_t &MPS) volatile
    {
        uint32_t curr = DIEPCTL_ISOCONT;

        EPEna = curr & (1u << 31u);
        EPDis = curr & (1u << 30u);
        TxFNum = (curr >> 22u) & 0b1111u;
        Stall = curr & (1u << 21u);
        Snp = curr & (1u << 20u);
        EPType = USB0_EP1_DIEPCTL_ISOCONT_EPType((curr >> 18u) & 0b11u);
        NAKSts = USB0_EP1_DIEPCTL_ISOCONT_NAKSts(curr & (1u << 17u));
        EO_FrNum = USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum(curr & (1u << 16u));
        USBActEP = curr & (1u << 15u);
        MPS = (curr >> 0u) & 0b11111111111u;
    }

    /**
     * Set all of DIEPCTL_ISOCONT's bit fields.
     *
     * (read-write) Device Endpoint Control Register [ISOCONT]
     */
    inline void set_DIEPCTL_ISOCONT(bool EPEna, bool EPDis, bool SetOddFr,
                                    bool SetEvenFr, bool SNAK, bool CNAK,
                                    uint8_t TxFNum, bool Stall, bool Snp,
                                    USB0_EP1_DIEPCTL_ISOCONT_EPType EPType,
                                    bool USBActEP, uint16_t MPS) volatile
    {
        uint32_t curr = DIEPCTL_ISOCONT;

        curr &= ~(0b1u << 31u);
        curr |= (EPEna & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (EPDis & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (SetOddFr & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (SetEvenFr & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (SNAK & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (CNAK & 0b1u) << 26u;
        curr &= ~(0b1111u << 22u);
        curr |= (TxFNum & 0b1111u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (Stall & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (Snp & 0b1u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EPType) & 0b11u) << 18u;
        curr &= ~(0b1u << 15u);
        curr |= (USBActEP & 0b1u) << 15u;
        curr &= ~(0b11111111111u << 0u);
        curr |= (MPS & 0b11111111111u) << 0u;

        DIEPCTL_ISOCONT = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline bool get_DIEPCTL_INTBULK_EPEna() volatile
    {
        return DIEPCTL_INTBULK & (1u << 31u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void set_DIEPCTL_INTBULK_EPEna() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 31u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void clear_DIEPCTL_INTBULK_EPEna() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 31u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void toggle_DIEPCTL_INTBULK_EPEna() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 31u;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline bool get_DIEPCTL_INTBULK_EPDis() volatile
    {
        return DIEPCTL_INTBULK & (1u << 30u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void set_DIEPCTL_INTBULK_EPDis() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 30u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void clear_DIEPCTL_INTBULK_EPDis() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 30u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void toggle_DIEPCTL_INTBULK_EPDis() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 30u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SetD1PID bit.
     *
     * 29 Set DATA1 PID
     */
    inline void set_DIEPCTL_INTBULK_SetD1PID() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 29u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SetD1PID bit.
     *
     * 29 Set DATA1 PID
     */
    inline void clear_DIEPCTL_INTBULK_SetD1PID() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 29u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SetD1PID bit.
     *
     * 29 Set DATA1 PID
     */
    inline void toggle_DIEPCTL_INTBULK_SetD1PID() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 29u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SetD0PID bit.
     *
     * Set DATA0 PID
     */
    inline void set_DIEPCTL_INTBULK_SetD0PID() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 28u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SetD0PID bit.
     *
     * Set DATA0 PID
     */
    inline void clear_DIEPCTL_INTBULK_SetD0PID() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 28u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SetD0PID bit.
     *
     * Set DATA0 PID
     */
    inline void toggle_DIEPCTL_INTBULK_SetD0PID() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 28u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void set_DIEPCTL_INTBULK_SNAK() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 27u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void clear_DIEPCTL_INTBULK_SNAK() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 27u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void toggle_DIEPCTL_INTBULK_SNAK() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 27u;
    }

    /**
     * Set DIEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void set_DIEPCTL_INTBULK_CNAK() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 26u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void clear_DIEPCTL_INTBULK_CNAK() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 26u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void toggle_DIEPCTL_INTBULK_CNAK() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 26u;
    }

    /**
     * Get DIEPCTL_ISOCONT's TxFNum field.
     *
     * TxFIFO Number
     */
    inline uint8_t get_DIEPCTL_INTBULK_TxFNum() volatile
    {
        return (DIEPCTL_INTBULK >> 22u) & 0b1111u;
    }

    /**
     * Set DIEPCTL_ISOCONT's TxFNum field.
     *
     * TxFIFO Number
     */
    inline void set_DIEPCTL_INTBULK_TxFNum(uint8_t value) volatile
    {
        uint32_t curr = DIEPCTL_INTBULK;

        curr &= ~(0b1111u << 22u);
        curr |= (value & 0b1111u) << 22u;

        DIEPCTL_INTBULK = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline bool get_DIEPCTL_INTBULK_Stall() volatile
    {
        return DIEPCTL_INTBULK & (1u << 21u);
    }

    /**
     * Set DIEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void set_DIEPCTL_INTBULK_Stall() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 21u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void clear_DIEPCTL_INTBULK_Stall() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 21u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void toggle_DIEPCTL_INTBULK_Stall() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 21u;
    }

    /**
     * Get DIEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline bool get_DIEPCTL_INTBULK_Snp() volatile
    {
        return DIEPCTL_INTBULK & (1u << 20u);
    }

    /**
     * Set DIEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void set_DIEPCTL_INTBULK_Snp() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 20u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void clear_DIEPCTL_INTBULK_Snp() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 20u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void toggle_DIEPCTL_INTBULK_Snp() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 20u;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPType field.
     *
     * Endpoint Type
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_EPType
    get_DIEPCTL_INTBULK_EPType() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_EPType((DIEPCTL_INTBULK >> 18u) &
                                               0b11u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPType field.
     *
     * Endpoint Type
     */
    inline void set_DIEPCTL_INTBULK_EPType(
        USB0_EP1_DIEPCTL_ISOCONT_EPType value) volatile
    {
        uint32_t curr = DIEPCTL_INTBULK;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        DIEPCTL_INTBULK = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's NAKSts bit.
     *
     * NAK Status
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_NAKSts
    get_DIEPCTL_INTBULK_NAKSts() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_NAKSts(DIEPCTL_INTBULK & (1u << 17u));
    }

    /**
     * Get DIEPCTL_ISOCONT's DPID bit.
     *
     * Endpoint Data PID
     */
    inline USB0_EP1_DIEPCTL_INTBULK_DPID get_DIEPCTL_INTBULK_DPID() volatile
    {
        return USB0_EP1_DIEPCTL_INTBULK_DPID(DIEPCTL_INTBULK & (1u << 16u));
    }

    /**
     * Get DIEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline bool get_DIEPCTL_INTBULK_USBActEP() volatile
    {
        return DIEPCTL_INTBULK & (1u << 15u);
    }

    /**
     * Set DIEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void set_DIEPCTL_INTBULK_USBActEP() volatile
    {
        DIEPCTL_ISOCONT |= 1u << 15u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void clear_DIEPCTL_INTBULK_USBActEP() volatile
    {
        DIEPCTL_ISOCONT &= ~(1u << 15u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void toggle_DIEPCTL_INTBULK_USBActEP() volatile
    {
        DIEPCTL_ISOCONT ^= 1u << 15u;
    }

    /**
     * Get DIEPCTL_ISOCONT's MPS field.
     *
     * Maximum Packet Size
     */
    inline uint16_t get_DIEPCTL_INTBULK_MPS() volatile
    {
        return (DIEPCTL_INTBULK >> 0u) & 0b11111111111u;
    }

    /**
     * Set DIEPCTL_ISOCONT's MPS field.
     *
     * Maximum Packet Size
     */
    inline void set_DIEPCTL_INTBULK_MPS(uint16_t value) volatile
    {
        uint32_t curr = DIEPCTL_INTBULK;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        DIEPCTL_INTBULK = curr;
    }

    /**
     * Get all of DIEPCTL_INTBULK's bit fields.
     *
     * (read-write) Device Endpoint Control Register [ISOCONT]
     */
    inline void get_DIEPCTL_INTBULK(bool &EPEna, bool &EPDis, uint8_t &TxFNum,
                                    bool &Stall, bool &Snp,
                                    USB0_EP1_DIEPCTL_ISOCONT_EPType &EPType,
                                    USB0_EP1_DIEPCTL_ISOCONT_NAKSts &NAKSts,
                                    USB0_EP1_DIEPCTL_INTBULK_DPID &DPID,
                                    bool &USBActEP, uint16_t &MPS) volatile
    {
        uint32_t curr = DIEPCTL_INTBULK;

        EPEna = curr & (1u << 31u);
        EPDis = curr & (1u << 30u);
        TxFNum = (curr >> 22u) & 0b1111u;
        Stall = curr & (1u << 21u);
        Snp = curr & (1u << 20u);
        EPType = USB0_EP1_DIEPCTL_ISOCONT_EPType((curr >> 18u) & 0b11u);
        NAKSts = USB0_EP1_DIEPCTL_ISOCONT_NAKSts(curr & (1u << 17u));
        DPID = USB0_EP1_DIEPCTL_INTBULK_DPID(curr & (1u << 16u));
        USBActEP = curr & (1u << 15u);
        MPS = (curr >> 0u) & 0b11111111111u;
    }

    /**
     * Set all of DIEPCTL_INTBULK's bit fields.
     *
     * (read-write) Device Endpoint Control Register [ISOCONT]
     */
    inline void set_DIEPCTL_INTBULK(bool EPEna, bool EPDis, bool SetD1PID,
                                    bool SetD0PID, bool SNAK, bool CNAK,
                                    uint8_t TxFNum, bool Stall, bool Snp,
                                    USB0_EP1_DIEPCTL_ISOCONT_EPType EPType,
                                    bool USBActEP, uint16_t MPS) volatile
    {
        uint32_t curr = DIEPCTL_INTBULK;

        curr &= ~(0b1u << 31u);
        curr |= (EPEna & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (EPDis & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (SetD1PID & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (SetD0PID & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (SNAK & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (CNAK & 0b1u) << 26u;
        curr &= ~(0b1111u << 22u);
        curr |= (TxFNum & 0b1111u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (Stall & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (Snp & 0b1u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EPType) & 0b11u) << 18u;
        curr &= ~(0b1u << 15u);
        curr |= (USBActEP & 0b1u) << 15u;
        curr &= ~(0b11111111111u << 0u);
        curr |= (MPS & 0b11111111111u) << 0u;

        DIEPCTL_INTBULK = curr;
    }

    /**
     * Get DIEPINT's BNAIntr bit.
     *
     * BNA (Buffer Not Available) Interrupt
     */
    inline bool get_DIEPINT_BNAIntr() volatile
    {
        return DIEPINT & (1u << 9u);
    }

    /**
     * Set DIEPINT's BNAIntr bit.
     *
     * BNA (Buffer Not Available) Interrupt
     */
    inline void set_DIEPINT_BNAIntr() volatile
    {
        DIEPINT |= 1u << 9u;
    }

    /**
     * Clear DIEPINT's BNAIntr bit.
     *
     * BNA (Buffer Not Available) Interrupt
     */
    inline void clear_DIEPINT_BNAIntr() volatile
    {
        DIEPINT &= ~(1u << 9u);
    }

    /**
     * Toggle DIEPINT's BNAIntr bit.
     *
     * BNA (Buffer Not Available) Interrupt
     */
    inline void toggle_DIEPINT_BNAIntr() volatile
    {
        DIEPINT ^= 1u << 9u;
    }

    /**
     * Get DIEPINT's TxFEmp bit.
     *
     * Transmit FIFO Empty
     */
    inline bool get_DIEPINT_TxFEmp() volatile
    {
        return DIEPINT & (1u << 7u);
    }

    /**
     * Get DIEPINT's INEPNakEff bit.
     *
     * IN Endpoint NAK Effective
     */
    inline bool get_DIEPINT_INEPNakEff() volatile
    {
        return DIEPINT & (1u << 6u);
    }

    /**
     * Set DIEPINT's INEPNakEff bit.
     *
     * IN Endpoint NAK Effective
     */
    inline void set_DIEPINT_INEPNakEff() volatile
    {
        DIEPINT |= 1u << 6u;
    }

    /**
     * Clear DIEPINT's INEPNakEff bit.
     *
     * IN Endpoint NAK Effective
     */
    inline void clear_DIEPINT_INEPNakEff() volatile
    {
        DIEPINT &= ~(1u << 6u);
    }

    /**
     * Toggle DIEPINT's INEPNakEff bit.
     *
     * IN Endpoint NAK Effective
     */
    inline void toggle_DIEPINT_INEPNakEff() volatile
    {
        DIEPINT ^= 1u << 6u;
    }

    /**
     * Get DIEPINT's INTknTXFEmp bit.
     *
     * IN Token Received When TxFIFO is Empty
     */
    inline bool get_DIEPINT_INTknTXFEmp() volatile
    {
        return DIEPINT & (1u << 4u);
    }

    /**
     * Set DIEPINT's INTknTXFEmp bit.
     *
     * IN Token Received When TxFIFO is Empty
     */
    inline void set_DIEPINT_INTknTXFEmp() volatile
    {
        DIEPINT |= 1u << 4u;
    }

    /**
     * Clear DIEPINT's INTknTXFEmp bit.
     *
     * IN Token Received When TxFIFO is Empty
     */
    inline void clear_DIEPINT_INTknTXFEmp() volatile
    {
        DIEPINT &= ~(1u << 4u);
    }

    /**
     * Toggle DIEPINT's INTknTXFEmp bit.
     *
     * IN Token Received When TxFIFO is Empty
     */
    inline void toggle_DIEPINT_INTknTXFEmp() volatile
    {
        DIEPINT ^= 1u << 4u;
    }

    /**
     * Get DIEPINT's TimeOUT bit.
     *
     * Timeout Condition
     */
    inline bool get_DIEPINT_TimeOUT() volatile
    {
        return DIEPINT & (1u << 3u);
    }

    /**
     * Set DIEPINT's TimeOUT bit.
     *
     * Timeout Condition
     */
    inline void set_DIEPINT_TimeOUT() volatile
    {
        DIEPINT |= 1u << 3u;
    }

    /**
     * Clear DIEPINT's TimeOUT bit.
     *
     * Timeout Condition
     */
    inline void clear_DIEPINT_TimeOUT() volatile
    {
        DIEPINT &= ~(1u << 3u);
    }

    /**
     * Toggle DIEPINT's TimeOUT bit.
     *
     * Timeout Condition
     */
    inline void toggle_DIEPINT_TimeOUT() volatile
    {
        DIEPINT ^= 1u << 3u;
    }

    /**
     * Get DIEPINT's AHBErr bit.
     *
     * AHB Error
     */
    inline bool get_DIEPINT_AHBErr() volatile
    {
        return DIEPINT & (1u << 2u);
    }

    /**
     * Set DIEPINT's AHBErr bit.
     *
     * AHB Error
     */
    inline void set_DIEPINT_AHBErr() volatile
    {
        DIEPINT |= 1u << 2u;
    }

    /**
     * Clear DIEPINT's AHBErr bit.
     *
     * AHB Error
     */
    inline void clear_DIEPINT_AHBErr() volatile
    {
        DIEPINT &= ~(1u << 2u);
    }

    /**
     * Toggle DIEPINT's AHBErr bit.
     *
     * AHB Error
     */
    inline void toggle_DIEPINT_AHBErr() volatile
    {
        DIEPINT ^= 1u << 2u;
    }

    /**
     * Get DIEPINT's EPDisbld bit.
     *
     * Endpoint Disabled Interrupt
     */
    inline bool get_DIEPINT_EPDisbld() volatile
    {
        return DIEPINT & (1u << 1u);
    }

    /**
     * Set DIEPINT's EPDisbld bit.
     *
     * Endpoint Disabled Interrupt
     */
    inline void set_DIEPINT_EPDisbld() volatile
    {
        DIEPINT |= 1u << 1u;
    }

    /**
     * Clear DIEPINT's EPDisbld bit.
     *
     * Endpoint Disabled Interrupt
     */
    inline void clear_DIEPINT_EPDisbld() volatile
    {
        DIEPINT &= ~(1u << 1u);
    }

    /**
     * Toggle DIEPINT's EPDisbld bit.
     *
     * Endpoint Disabled Interrupt
     */
    inline void toggle_DIEPINT_EPDisbld() volatile
    {
        DIEPINT ^= 1u << 1u;
    }

    /**
     * Get DIEPINT's XferCompl bit.
     *
     * Transfer Completed Interrupt
     */
    inline bool get_DIEPINT_XferCompl() volatile
    {
        return DIEPINT & (1u << 0u);
    }

    /**
     * Set DIEPINT's XferCompl bit.
     *
     * Transfer Completed Interrupt
     */
    inline void set_DIEPINT_XferCompl() volatile
    {
        DIEPINT |= 1u << 0u;
    }

    /**
     * Clear DIEPINT's XferCompl bit.
     *
     * Transfer Completed Interrupt
     */
    inline void clear_DIEPINT_XferCompl() volatile
    {
        DIEPINT &= ~(1u << 0u);
    }

    /**
     * Toggle DIEPINT's XferCompl bit.
     *
     * Transfer Completed Interrupt
     */
    inline void toggle_DIEPINT_XferCompl() volatile
    {
        DIEPINT ^= 1u << 0u;
    }

    /**
     * Get all of DIEPINT's bit fields.
     *
     * (read-write) Device Endpoint Interrupt Register
     */
    inline void get_DIEPINT(bool &BNAIntr, bool &TxFEmp, bool &INEPNakEff,
                            bool &INTknTXFEmp, bool &TimeOUT, bool &AHBErr,
                            bool &EPDisbld, bool &XferCompl) volatile
    {
        uint32_t curr = DIEPINT;

        BNAIntr = curr & (1u << 9u);
        TxFEmp = curr & (1u << 7u);
        INEPNakEff = curr & (1u << 6u);
        INTknTXFEmp = curr & (1u << 4u);
        TimeOUT = curr & (1u << 3u);
        AHBErr = curr & (1u << 2u);
        EPDisbld = curr & (1u << 1u);
        XferCompl = curr & (1u << 0u);
    }

    /**
     * Set all of DIEPINT's bit fields.
     *
     * (read-write) Device Endpoint Interrupt Register
     */
    inline void set_DIEPINT(bool BNAIntr, bool INEPNakEff, bool INTknTXFEmp,
                            bool TimeOUT, bool AHBErr, bool EPDisbld,
                            bool XferCompl) volatile
    {
        uint32_t curr = DIEPINT;

        curr &= ~(0b1u << 9u);
        curr |= (BNAIntr & 0b1u) << 9u;
        curr &= ~(0b1u << 6u);
        curr |= (INEPNakEff & 0b1u) << 6u;
        curr &= ~(0b1u << 4u);
        curr |= (INTknTXFEmp & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TimeOUT & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (AHBErr & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (EPDisbld & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (XferCompl & 0b1u) << 0u;

        DIEPINT = curr;
    }

    /**
     * Get DIEPTSIZ's PktCnt field.
     *
     * Packet Count
     */
    inline uint16_t get_DIEPTSIZ_PktCnt() volatile
    {
        return (DIEPTSIZ >> 19u) & 0b1111111111u;
    }

    /**
     * Set DIEPTSIZ's PktCnt field.
     *
     * Packet Count
     */
    inline void set_DIEPTSIZ_PktCnt(uint16_t value) volatile
    {
        uint32_t curr = DIEPTSIZ;

        curr &= ~(0b1111111111u << 19u);
        curr |= (value & 0b1111111111u) << 19u;

        DIEPTSIZ = curr;
    }

    /**
     * Get DIEPTSIZ's XferSize field.
     *
     * Transfer Size
     */
    inline uint32_t get_DIEPTSIZ_XferSize() volatile
    {
        return (DIEPTSIZ >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set DIEPTSIZ's XferSize field.
     *
     * Transfer Size
     */
    inline void set_DIEPTSIZ_XferSize(uint32_t value) volatile
    {
        uint32_t curr = DIEPTSIZ;

        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111u) << 0u;

        DIEPTSIZ = curr;
    }

    /**
     * Get all of DIEPTSIZ's bit fields.
     *
     * (read-write) Device Endpoint Transfer Size Register
     */
    inline void get_DIEPTSIZ(uint16_t &PktCnt, uint32_t &XferSize) volatile
    {
        uint32_t curr = DIEPTSIZ;

        PktCnt = (curr >> 19u) & 0b1111111111u;
        XferSize = (curr >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set all of DIEPTSIZ's bit fields.
     *
     * (read-write) Device Endpoint Transfer Size Register
     */
    inline void set_DIEPTSIZ(uint16_t PktCnt, uint32_t XferSize) volatile
    {
        uint32_t curr = DIEPTSIZ;

        curr &= ~(0b1111111111u << 19u);
        curr |= (PktCnt & 0b1111111111u) << 19u;
        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (XferSize & 0b1111111111111111111u) << 0u;

        DIEPTSIZ = curr;
    }

    /**
     * Get DIEPDMA's DMAAddr field.
     *
     * DMA Address
     */
    inline uint32_t get_DIEPDMA_DMAAddr() volatile
    {
        return (DIEPDMA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DIEPDMA's DMAAddr field.
     *
     * DMA Address
     */
    inline void set_DIEPDMA_DMAAddr(uint32_t value) volatile
    {
        uint32_t curr = DIEPDMA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DIEPDMA = curr;
    }

    /**
     * Get DTXFSTS's INEPTxFSpcAvail field.
     *
     * IN Endpoint TxFIFO Space Avail
     */
    inline USB0_EP1_DTXFSTS_INEPTxFSpcAvail
    get_DTXFSTS_INEPTxFSpcAvail() volatile
    {
        return USB0_EP1_DTXFSTS_INEPTxFSpcAvail((DTXFSTS >> 0u) &
                                                0b1111111111111111u);
    }

    /**
     * Get DIEPDMAB's DMABufferAddr field.
     *
     * DMA Buffer Address
     */
    inline uint32_t get_DIEPDMAB_DMABufferAddr() volatile
    {
        return (DIEPDMAB >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline bool get_DOEPCTL_ISOCONT_EPEna() volatile
    {
        return DOEPCTL_ISOCONT & (1u << 31u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void set_DOEPCTL_ISOCONT_EPEna() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 31u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void clear_DOEPCTL_ISOCONT_EPEna() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 31u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void toggle_DOEPCTL_ISOCONT_EPEna() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 31u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline bool get_DOEPCTL_ISOCONT_EPDis() volatile
    {
        return DOEPCTL_ISOCONT & (1u << 30u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void set_DOEPCTL_ISOCONT_EPDis() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 30u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void clear_DOEPCTL_ISOCONT_EPDis() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 30u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void toggle_DOEPCTL_ISOCONT_EPDis() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 30u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SetOddFr bit.
     *
     * Set Odd frame
     */
    inline void set_DOEPCTL_ISOCONT_SetOddFr() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 29u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SetOddFr bit.
     *
     * Set Odd frame
     */
    inline void clear_DOEPCTL_ISOCONT_SetOddFr() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 29u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SetOddFr bit.
     *
     * Set Odd frame
     */
    inline void toggle_DOEPCTL_ISOCONT_SetOddFr() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 29u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SetEvenFr bit.
     *
     * In non-Scatter/Gather DMA mode: Set Even frame
     */
    inline void set_DOEPCTL_ISOCONT_SetEvenFr() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 28u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SetEvenFr bit.
     *
     * In non-Scatter/Gather DMA mode: Set Even frame
     */
    inline void clear_DOEPCTL_ISOCONT_SetEvenFr() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 28u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SetEvenFr bit.
     *
     * In non-Scatter/Gather DMA mode: Set Even frame
     */
    inline void toggle_DOEPCTL_ISOCONT_SetEvenFr() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 28u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void set_DOEPCTL_ISOCONT_SNAK() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 27u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void clear_DOEPCTL_ISOCONT_SNAK() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 27u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void toggle_DOEPCTL_ISOCONT_SNAK() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 27u;
    }

    /**
     * Set DOEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void set_DOEPCTL_ISOCONT_CNAK() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 26u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void clear_DOEPCTL_ISOCONT_CNAK() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 26u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void toggle_DOEPCTL_ISOCONT_CNAK() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 26u;
    }

    /**
     * Get DOEPCTL_ISOCONT's TxFNum field.
     *
     * TxFIFO Number
     */
    inline uint8_t get_DOEPCTL_ISOCONT_TxFNum() volatile
    {
        return (DOEPCTL_ISOCONT >> 22u) & 0b1111u;
    }

    /**
     * Set DOEPCTL_ISOCONT's TxFNum field.
     *
     * TxFIFO Number
     */
    inline void set_DOEPCTL_ISOCONT_TxFNum(uint8_t value) volatile
    {
        uint32_t curr = DOEPCTL_ISOCONT;

        curr &= ~(0b1111u << 22u);
        curr |= (value & 0b1111u) << 22u;

        DOEPCTL_ISOCONT = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline bool get_DOEPCTL_ISOCONT_Stall() volatile
    {
        return DOEPCTL_ISOCONT & (1u << 21u);
    }

    /**
     * Set DOEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void set_DOEPCTL_ISOCONT_Stall() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 21u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void clear_DOEPCTL_ISOCONT_Stall() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 21u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void toggle_DOEPCTL_ISOCONT_Stall() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 21u;
    }

    /**
     * Get DOEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline bool get_DOEPCTL_ISOCONT_Snp() volatile
    {
        return DOEPCTL_ISOCONT & (1u << 20u);
    }

    /**
     * Set DOEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void set_DOEPCTL_ISOCONT_Snp() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 20u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void clear_DOEPCTL_ISOCONT_Snp() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 20u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void toggle_DOEPCTL_ISOCONT_Snp() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 20u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPType field.
     *
     * Endpoint Type
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_EPType
    get_DOEPCTL_ISOCONT_EPType() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_EPType((DOEPCTL_ISOCONT >> 18u) &
                                               0b11u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPType field.
     *
     * Endpoint Type
     */
    inline void set_DOEPCTL_ISOCONT_EPType(
        USB0_EP1_DIEPCTL_ISOCONT_EPType value) volatile
    {
        uint32_t curr = DOEPCTL_ISOCONT;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        DOEPCTL_ISOCONT = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's NAKSts bit.
     *
     * NAK Status
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_NAKSts
    get_DOEPCTL_ISOCONT_NAKSts() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_NAKSts(DOEPCTL_ISOCONT & (1u << 17u));
    }

    /**
     * Get DOEPCTL_ISOCONT's EO_FrNum bit.
     *
     * Even/Odd Frame
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum
    get_DOEPCTL_ISOCONT_EO_FrNum() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum(DOEPCTL_ISOCONT &
                                                 (1u << 16u));
    }

    /**
     * Get DOEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline bool get_DOEPCTL_ISOCONT_USBActEP() volatile
    {
        return DOEPCTL_ISOCONT & (1u << 15u);
    }

    /**
     * Set DOEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void set_DOEPCTL_ISOCONT_USBActEP() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 15u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void clear_DOEPCTL_ISOCONT_USBActEP() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 15u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void toggle_DOEPCTL_ISOCONT_USBActEP() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 15u;
    }

    /**
     * Get DOEPCTL_ISOCONT's MPS field.
     *
     * Maximum Packet Size
     */
    inline uint16_t get_DOEPCTL_ISOCONT_MPS() volatile
    {
        return (DOEPCTL_ISOCONT >> 0u) & 0b11111111111u;
    }

    /**
     * Set DOEPCTL_ISOCONT's MPS field.
     *
     * Maximum Packet Size
     */
    inline void set_DOEPCTL_ISOCONT_MPS(uint16_t value) volatile
    {
        uint32_t curr = DOEPCTL_ISOCONT;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        DOEPCTL_ISOCONT = curr;
    }

    /**
     * Get all of DOEPCTL_ISOCONT's bit fields.
     *
     * (read-write) Device Endpoint Control Register [ISOCONT]
     */
    inline void get_DOEPCTL_ISOCONT(
        bool &EPEna, bool &EPDis, uint8_t &TxFNum, bool &Stall, bool &Snp,
        USB0_EP1_DIEPCTL_ISOCONT_EPType &EPType,
        USB0_EP1_DIEPCTL_ISOCONT_NAKSts &NAKSts,
        USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum &EO_FrNum, bool &USBActEP,
        uint16_t &MPS) volatile
    {
        uint32_t curr = DOEPCTL_ISOCONT;

        EPEna = curr & (1u << 31u);
        EPDis = curr & (1u << 30u);
        TxFNum = (curr >> 22u) & 0b1111u;
        Stall = curr & (1u << 21u);
        Snp = curr & (1u << 20u);
        EPType = USB0_EP1_DIEPCTL_ISOCONT_EPType((curr >> 18u) & 0b11u);
        NAKSts = USB0_EP1_DIEPCTL_ISOCONT_NAKSts(curr & (1u << 17u));
        EO_FrNum = USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum(curr & (1u << 16u));
        USBActEP = curr & (1u << 15u);
        MPS = (curr >> 0u) & 0b11111111111u;
    }

    /**
     * Set all of DOEPCTL_ISOCONT's bit fields.
     *
     * (read-write) Device Endpoint Control Register [ISOCONT]
     */
    inline void set_DOEPCTL_ISOCONT(bool EPEna, bool EPDis, bool SetOddFr,
                                    bool SetEvenFr, bool SNAK, bool CNAK,
                                    uint8_t TxFNum, bool Stall, bool Snp,
                                    USB0_EP1_DIEPCTL_ISOCONT_EPType EPType,
                                    bool USBActEP, uint16_t MPS) volatile
    {
        uint32_t curr = DOEPCTL_ISOCONT;

        curr &= ~(0b1u << 31u);
        curr |= (EPEna & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (EPDis & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (SetOddFr & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (SetEvenFr & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (SNAK & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (CNAK & 0b1u) << 26u;
        curr &= ~(0b1111u << 22u);
        curr |= (TxFNum & 0b1111u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (Stall & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (Snp & 0b1u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EPType) & 0b11u) << 18u;
        curr &= ~(0b1u << 15u);
        curr |= (USBActEP & 0b1u) << 15u;
        curr &= ~(0b11111111111u << 0u);
        curr |= (MPS & 0b11111111111u) << 0u;

        DOEPCTL_ISOCONT = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline bool get_DOEPCTL_INTBULK_EPEna() volatile
    {
        return DOEPCTL_INTBULK & (1u << 31u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void set_DOEPCTL_INTBULK_EPEna() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 31u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void clear_DOEPCTL_INTBULK_EPEna() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 31u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's EPEna bit.
     *
     * Endpoint Enable
     */
    inline void toggle_DOEPCTL_INTBULK_EPEna() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 31u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline bool get_DOEPCTL_INTBULK_EPDis() volatile
    {
        return DOEPCTL_INTBULK & (1u << 30u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void set_DOEPCTL_INTBULK_EPDis() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 30u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void clear_DOEPCTL_INTBULK_EPDis() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 30u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's EPDis bit.
     *
     * Endpoint Disable
     */
    inline void toggle_DOEPCTL_INTBULK_EPDis() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 30u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SetD1PID bit.
     *
     * 29 Set DATA1 PID
     */
    inline void set_DOEPCTL_INTBULK_SetD1PID() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 29u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SetD1PID bit.
     *
     * 29 Set DATA1 PID
     */
    inline void clear_DOEPCTL_INTBULK_SetD1PID() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 29u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SetD1PID bit.
     *
     * 29 Set DATA1 PID
     */
    inline void toggle_DOEPCTL_INTBULK_SetD1PID() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 29u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SetD0PID bit.
     *
     * Set DATA0 PID
     */
    inline void set_DOEPCTL_INTBULK_SetD0PID() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 28u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SetD0PID bit.
     *
     * Set DATA0 PID
     */
    inline void clear_DOEPCTL_INTBULK_SetD0PID() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 28u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SetD0PID bit.
     *
     * Set DATA0 PID
     */
    inline void toggle_DOEPCTL_INTBULK_SetD0PID() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 28u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void set_DOEPCTL_INTBULK_SNAK() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 27u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void clear_DOEPCTL_INTBULK_SNAK() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 27u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SNAK bit.
     *
     * Set NAK
     */
    inline void toggle_DOEPCTL_INTBULK_SNAK() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 27u;
    }

    /**
     * Set DOEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void set_DOEPCTL_INTBULK_CNAK() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 26u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void clear_DOEPCTL_INTBULK_CNAK() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 26u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's CNAK bit.
     *
     * Clear NAK
     */
    inline void toggle_DOEPCTL_INTBULK_CNAK() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 26u;
    }

    /**
     * Get DOEPCTL_ISOCONT's TxFNum field.
     *
     * TxFIFO Number
     */
    inline uint8_t get_DOEPCTL_INTBULK_TxFNum() volatile
    {
        return (DOEPCTL_INTBULK >> 22u) & 0b1111u;
    }

    /**
     * Set DOEPCTL_ISOCONT's TxFNum field.
     *
     * TxFIFO Number
     */
    inline void set_DOEPCTL_INTBULK_TxFNum(uint8_t value) volatile
    {
        uint32_t curr = DOEPCTL_INTBULK;

        curr &= ~(0b1111u << 22u);
        curr |= (value & 0b1111u) << 22u;

        DOEPCTL_INTBULK = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline bool get_DOEPCTL_INTBULK_Stall() volatile
    {
        return DOEPCTL_INTBULK & (1u << 21u);
    }

    /**
     * Set DOEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void set_DOEPCTL_INTBULK_Stall() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 21u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void clear_DOEPCTL_INTBULK_Stall() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 21u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's Stall bit.
     *
     * STALL Handshake
     */
    inline void toggle_DOEPCTL_INTBULK_Stall() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 21u;
    }

    /**
     * Get DOEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline bool get_DOEPCTL_INTBULK_Snp() volatile
    {
        return DOEPCTL_INTBULK & (1u << 20u);
    }

    /**
     * Set DOEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void set_DOEPCTL_INTBULK_Snp() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 20u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void clear_DOEPCTL_INTBULK_Snp() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 20u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's Snp bit.
     *
     * Snoop Mode
     */
    inline void toggle_DOEPCTL_INTBULK_Snp() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 20u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPType field.
     *
     * Endpoint Type
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_EPType
    get_DOEPCTL_INTBULK_EPType() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_EPType((DOEPCTL_INTBULK >> 18u) &
                                               0b11u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPType field.
     *
     * Endpoint Type
     */
    inline void set_DOEPCTL_INTBULK_EPType(
        USB0_EP1_DIEPCTL_ISOCONT_EPType value) volatile
    {
        uint32_t curr = DOEPCTL_INTBULK;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        DOEPCTL_INTBULK = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's NAKSts bit.
     *
     * NAK Status
     */
    inline USB0_EP1_DIEPCTL_ISOCONT_NAKSts
    get_DOEPCTL_INTBULK_NAKSts() volatile
    {
        return USB0_EP1_DIEPCTL_ISOCONT_NAKSts(DOEPCTL_INTBULK & (1u << 17u));
    }

    /**
     * Get DOEPCTL_ISOCONT's DPID bit.
     *
     * Endpoint Data PID
     */
    inline USB0_EP1_DIEPCTL_INTBULK_DPID get_DOEPCTL_INTBULK_DPID() volatile
    {
        return USB0_EP1_DIEPCTL_INTBULK_DPID(DOEPCTL_INTBULK & (1u << 16u));
    }

    /**
     * Get DOEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline bool get_DOEPCTL_INTBULK_USBActEP() volatile
    {
        return DOEPCTL_INTBULK & (1u << 15u);
    }

    /**
     * Set DOEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void set_DOEPCTL_INTBULK_USBActEP() volatile
    {
        DOEPCTL_ISOCONT |= 1u << 15u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void clear_DOEPCTL_INTBULK_USBActEP() volatile
    {
        DOEPCTL_ISOCONT &= ~(1u << 15u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's USBActEP bit.
     *
     * USB Active Endpoint
     */
    inline void toggle_DOEPCTL_INTBULK_USBActEP() volatile
    {
        DOEPCTL_ISOCONT ^= 1u << 15u;
    }

    /**
     * Get DOEPCTL_ISOCONT's MPS field.
     *
     * Maximum Packet Size
     */
    inline uint16_t get_DOEPCTL_INTBULK_MPS() volatile
    {
        return (DOEPCTL_INTBULK >> 0u) & 0b11111111111u;
    }

    /**
     * Set DOEPCTL_ISOCONT's MPS field.
     *
     * Maximum Packet Size
     */
    inline void set_DOEPCTL_INTBULK_MPS(uint16_t value) volatile
    {
        uint32_t curr = DOEPCTL_INTBULK;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        DOEPCTL_INTBULK = curr;
    }

    /**
     * Get all of DOEPCTL_INTBULK's bit fields.
     *
     * (read-write) Device Endpoint Control Register [ISOCONT]
     */
    inline void get_DOEPCTL_INTBULK(bool &EPEna, bool &EPDis, uint8_t &TxFNum,
                                    bool &Stall, bool &Snp,
                                    USB0_EP1_DIEPCTL_ISOCONT_EPType &EPType,
                                    USB0_EP1_DIEPCTL_ISOCONT_NAKSts &NAKSts,
                                    USB0_EP1_DIEPCTL_INTBULK_DPID &DPID,
                                    bool &USBActEP, uint16_t &MPS) volatile
    {
        uint32_t curr = DOEPCTL_INTBULK;

        EPEna = curr & (1u << 31u);
        EPDis = curr & (1u << 30u);
        TxFNum = (curr >> 22u) & 0b1111u;
        Stall = curr & (1u << 21u);
        Snp = curr & (1u << 20u);
        EPType = USB0_EP1_DIEPCTL_ISOCONT_EPType((curr >> 18u) & 0b11u);
        NAKSts = USB0_EP1_DIEPCTL_ISOCONT_NAKSts(curr & (1u << 17u));
        DPID = USB0_EP1_DIEPCTL_INTBULK_DPID(curr & (1u << 16u));
        USBActEP = curr & (1u << 15u);
        MPS = (curr >> 0u) & 0b11111111111u;
    }

    /**
     * Set all of DOEPCTL_INTBULK's bit fields.
     *
     * (read-write) Device Endpoint Control Register [ISOCONT]
     */
    inline void set_DOEPCTL_INTBULK(bool EPEna, bool EPDis, bool SetD1PID,
                                    bool SetD0PID, bool SNAK, bool CNAK,
                                    uint8_t TxFNum, bool Stall, bool Snp,
                                    USB0_EP1_DIEPCTL_ISOCONT_EPType EPType,
                                    bool USBActEP, uint16_t MPS) volatile
    {
        uint32_t curr = DOEPCTL_INTBULK;

        curr &= ~(0b1u << 31u);
        curr |= (EPEna & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (EPDis & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (SetD1PID & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (SetD0PID & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (SNAK & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (CNAK & 0b1u) << 26u;
        curr &= ~(0b1111u << 22u);
        curr |= (TxFNum & 0b1111u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (Stall & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (Snp & 0b1u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EPType) & 0b11u) << 18u;
        curr &= ~(0b1u << 15u);
        curr |= (USBActEP & 0b1u) << 15u;
        curr &= ~(0b11111111111u << 0u);
        curr |= (MPS & 0b11111111111u) << 0u;

        DOEPCTL_INTBULK = curr;
    }

    /**
     * Get DOEPINT's NYETIntrpt bit.
     *
     * NYET interrupt
     */
    inline bool get_DOEPINT_NYETIntrpt() volatile
    {
        return DOEPINT & (1u << 14u);
    }

    /**
     * Set DOEPINT's NYETIntrpt bit.
     *
     * NYET interrupt
     */
    inline void set_DOEPINT_NYETIntrpt() volatile
    {
        DOEPINT |= 1u << 14u;
    }

    /**
     * Clear DOEPINT's NYETIntrpt bit.
     *
     * NYET interrupt
     */
    inline void clear_DOEPINT_NYETIntrpt() volatile
    {
        DOEPINT &= ~(1u << 14u);
    }

    /**
     * Toggle DOEPINT's NYETIntrpt bit.
     *
     * NYET interrupt
     */
    inline void toggle_DOEPINT_NYETIntrpt() volatile
    {
        DOEPINT ^= 1u << 14u;
    }

    /**
     * Get DOEPINT's NAKIntrpt bit.
     *
     * NAK interrupt
     */
    inline bool get_DOEPINT_NAKIntrpt() volatile
    {
        return DOEPINT & (1u << 13u);
    }

    /**
     * Set DOEPINT's NAKIntrpt bit.
     *
     * NAK interrupt
     */
    inline void set_DOEPINT_NAKIntrpt() volatile
    {
        DOEPINT |= 1u << 13u;
    }

    /**
     * Clear DOEPINT's NAKIntrpt bit.
     *
     * NAK interrupt
     */
    inline void clear_DOEPINT_NAKIntrpt() volatile
    {
        DOEPINT &= ~(1u << 13u);
    }

    /**
     * Toggle DOEPINT's NAKIntrpt bit.
     *
     * NAK interrupt
     */
    inline void toggle_DOEPINT_NAKIntrpt() volatile
    {
        DOEPINT ^= 1u << 13u;
    }

    /**
     * Get DOEPINT's BbleErrIntrpt bit.
     *
     * BbleErr (Babble Error) interrupt
     */
    inline bool get_DOEPINT_BbleErrIntrpt() volatile
    {
        return DOEPINT & (1u << 12u);
    }

    /**
     * Set DOEPINT's BbleErrIntrpt bit.
     *
     * BbleErr (Babble Error) interrupt
     */
    inline void set_DOEPINT_BbleErrIntrpt() volatile
    {
        DOEPINT |= 1u << 12u;
    }

    /**
     * Clear DOEPINT's BbleErrIntrpt bit.
     *
     * BbleErr (Babble Error) interrupt
     */
    inline void clear_DOEPINT_BbleErrIntrpt() volatile
    {
        DOEPINT &= ~(1u << 12u);
    }

    /**
     * Toggle DOEPINT's BbleErrIntrpt bit.
     *
     * BbleErr (Babble Error) interrupt
     */
    inline void toggle_DOEPINT_BbleErrIntrpt() volatile
    {
        DOEPINT ^= 1u << 12u;
    }

    /**
     * Get DOEPINT's PktDrpSts bit.
     *
     * Packet Dropped Status
     */
    inline bool get_DOEPINT_PktDrpSts() volatile
    {
        return DOEPINT & (1u << 11u);
    }

    /**
     * Set DOEPINT's PktDrpSts bit.
     *
     * Packet Dropped Status
     */
    inline void set_DOEPINT_PktDrpSts() volatile
    {
        DOEPINT |= 1u << 11u;
    }

    /**
     * Clear DOEPINT's PktDrpSts bit.
     *
     * Packet Dropped Status
     */
    inline void clear_DOEPINT_PktDrpSts() volatile
    {
        DOEPINT &= ~(1u << 11u);
    }

    /**
     * Toggle DOEPINT's PktDrpSts bit.
     *
     * Packet Dropped Status
     */
    inline void toggle_DOEPINT_PktDrpSts() volatile
    {
        DOEPINT ^= 1u << 11u;
    }

    /**
     * Get DOEPINT's BNAIntr bit.
     *
     * BNA (Buffer Not Available) Interrupt
     */
    inline bool get_DOEPINT_BNAIntr() volatile
    {
        return DOEPINT & (1u << 9u);
    }

    /**
     * Set DOEPINT's BNAIntr bit.
     *
     * BNA (Buffer Not Available) Interrupt
     */
    inline void set_DOEPINT_BNAIntr() volatile
    {
        DOEPINT |= 1u << 9u;
    }

    /**
     * Clear DOEPINT's BNAIntr bit.
     *
     * BNA (Buffer Not Available) Interrupt
     */
    inline void clear_DOEPINT_BNAIntr() volatile
    {
        DOEPINT &= ~(1u << 9u);
    }

    /**
     * Toggle DOEPINT's BNAIntr bit.
     *
     * BNA (Buffer Not Available) Interrupt
     */
    inline void toggle_DOEPINT_BNAIntr() volatile
    {
        DOEPINT ^= 1u << 9u;
    }

    /**
     * Get DOEPINT's Back2BackSETup bit.
     *
     * Back-to-Back SETUP Packets Received
     */
    inline bool get_DOEPINT_Back2BackSETup() volatile
    {
        return DOEPINT & (1u << 6u);
    }

    /**
     * Set DOEPINT's Back2BackSETup bit.
     *
     * Back-to-Back SETUP Packets Received
     */
    inline void set_DOEPINT_Back2BackSETup() volatile
    {
        DOEPINT |= 1u << 6u;
    }

    /**
     * Clear DOEPINT's Back2BackSETup bit.
     *
     * Back-to-Back SETUP Packets Received
     */
    inline void clear_DOEPINT_Back2BackSETup() volatile
    {
        DOEPINT &= ~(1u << 6u);
    }

    /**
     * Toggle DOEPINT's Back2BackSETup bit.
     *
     * Back-to-Back SETUP Packets Received
     */
    inline void toggle_DOEPINT_Back2BackSETup() volatile
    {
        DOEPINT ^= 1u << 6u;
    }

    /**
     * Get DOEPINT's StsPhseRcvd bit.
     *
     * Status Phase Received For Control Write
     */
    inline bool get_DOEPINT_StsPhseRcvd() volatile
    {
        return DOEPINT & (1u << 5u);
    }

    /**
     * Set DOEPINT's StsPhseRcvd bit.
     *
     * Status Phase Received For Control Write
     */
    inline void set_DOEPINT_StsPhseRcvd() volatile
    {
        DOEPINT |= 1u << 5u;
    }

    /**
     * Clear DOEPINT's StsPhseRcvd bit.
     *
     * Status Phase Received For Control Write
     */
    inline void clear_DOEPINT_StsPhseRcvd() volatile
    {
        DOEPINT &= ~(1u << 5u);
    }

    /**
     * Toggle DOEPINT's StsPhseRcvd bit.
     *
     * Status Phase Received For Control Write
     */
    inline void toggle_DOEPINT_StsPhseRcvd() volatile
    {
        DOEPINT ^= 1u << 5u;
    }

    /**
     * Get DOEPINT's OUTTknEPdis bit.
     *
     * OUT Token Received When Endpoint Disabled
     */
    inline bool get_DOEPINT_OUTTknEPdis() volatile
    {
        return DOEPINT & (1u << 4u);
    }

    /**
     * Set DOEPINT's OUTTknEPdis bit.
     *
     * OUT Token Received When Endpoint Disabled
     */
    inline void set_DOEPINT_OUTTknEPdis() volatile
    {
        DOEPINT |= 1u << 4u;
    }

    /**
     * Clear DOEPINT's OUTTknEPdis bit.
     *
     * OUT Token Received When Endpoint Disabled
     */
    inline void clear_DOEPINT_OUTTknEPdis() volatile
    {
        DOEPINT &= ~(1u << 4u);
    }

    /**
     * Toggle DOEPINT's OUTTknEPdis bit.
     *
     * OUT Token Received When Endpoint Disabled
     */
    inline void toggle_DOEPINT_OUTTknEPdis() volatile
    {
        DOEPINT ^= 1u << 4u;
    }

    /**
     * Get DOEPINT's SetUp bit.
     *
     * SETUP Phase Done
     */
    inline bool get_DOEPINT_SetUp() volatile
    {
        return DOEPINT & (1u << 3u);
    }

    /**
     * Set DOEPINT's SetUp bit.
     *
     * SETUP Phase Done
     */
    inline void set_DOEPINT_SetUp() volatile
    {
        DOEPINT |= 1u << 3u;
    }

    /**
     * Clear DOEPINT's SetUp bit.
     *
     * SETUP Phase Done
     */
    inline void clear_DOEPINT_SetUp() volatile
    {
        DOEPINT &= ~(1u << 3u);
    }

    /**
     * Toggle DOEPINT's SetUp bit.
     *
     * SETUP Phase Done
     */
    inline void toggle_DOEPINT_SetUp() volatile
    {
        DOEPINT ^= 1u << 3u;
    }

    /**
     * Get DOEPINT's AHBErr bit.
     *
     * AHB Error
     */
    inline bool get_DOEPINT_AHBErr() volatile
    {
        return DOEPINT & (1u << 2u);
    }

    /**
     * Set DOEPINT's AHBErr bit.
     *
     * AHB Error
     */
    inline void set_DOEPINT_AHBErr() volatile
    {
        DOEPINT |= 1u << 2u;
    }

    /**
     * Clear DOEPINT's AHBErr bit.
     *
     * AHB Error
     */
    inline void clear_DOEPINT_AHBErr() volatile
    {
        DOEPINT &= ~(1u << 2u);
    }

    /**
     * Toggle DOEPINT's AHBErr bit.
     *
     * AHB Error
     */
    inline void toggle_DOEPINT_AHBErr() volatile
    {
        DOEPINT ^= 1u << 2u;
    }

    /**
     * Get DOEPINT's EPDisbld bit.
     *
     * Endpoint Disabled Interrupt
     */
    inline bool get_DOEPINT_EPDisbld() volatile
    {
        return DOEPINT & (1u << 1u);
    }

    /**
     * Set DOEPINT's EPDisbld bit.
     *
     * Endpoint Disabled Interrupt
     */
    inline void set_DOEPINT_EPDisbld() volatile
    {
        DOEPINT |= 1u << 1u;
    }

    /**
     * Clear DOEPINT's EPDisbld bit.
     *
     * Endpoint Disabled Interrupt
     */
    inline void clear_DOEPINT_EPDisbld() volatile
    {
        DOEPINT &= ~(1u << 1u);
    }

    /**
     * Toggle DOEPINT's EPDisbld bit.
     *
     * Endpoint Disabled Interrupt
     */
    inline void toggle_DOEPINT_EPDisbld() volatile
    {
        DOEPINT ^= 1u << 1u;
    }

    /**
     * Get DOEPINT's XferCompl bit.
     *
     * Transfer Completed Interrupt
     */
    inline bool get_DOEPINT_XferCompl() volatile
    {
        return DOEPINT & (1u << 0u);
    }

    /**
     * Set DOEPINT's XferCompl bit.
     *
     * Transfer Completed Interrupt
     */
    inline void set_DOEPINT_XferCompl() volatile
    {
        DOEPINT |= 1u << 0u;
    }

    /**
     * Clear DOEPINT's XferCompl bit.
     *
     * Transfer Completed Interrupt
     */
    inline void clear_DOEPINT_XferCompl() volatile
    {
        DOEPINT &= ~(1u << 0u);
    }

    /**
     * Toggle DOEPINT's XferCompl bit.
     *
     * Transfer Completed Interrupt
     */
    inline void toggle_DOEPINT_XferCompl() volatile
    {
        DOEPINT ^= 1u << 0u;
    }

    /**
     * Get all of DOEPINT's bit fields.
     *
     * (read-write) Device Endpoint Interrupt Register
     */
    inline void get_DOEPINT(bool &NYETIntrpt, bool &NAKIntrpt,
                            bool &BbleErrIntrpt, bool &PktDrpSts,
                            bool &BNAIntr, bool &Back2BackSETup,
                            bool &StsPhseRcvd, bool &OUTTknEPdis, bool &SetUp,
                            bool &AHBErr, bool &EPDisbld,
                            bool &XferCompl) volatile
    {
        uint32_t curr = DOEPINT;

        NYETIntrpt = curr & (1u << 14u);
        NAKIntrpt = curr & (1u << 13u);
        BbleErrIntrpt = curr & (1u << 12u);
        PktDrpSts = curr & (1u << 11u);
        BNAIntr = curr & (1u << 9u);
        Back2BackSETup = curr & (1u << 6u);
        StsPhseRcvd = curr & (1u << 5u);
        OUTTknEPdis = curr & (1u << 4u);
        SetUp = curr & (1u << 3u);
        AHBErr = curr & (1u << 2u);
        EPDisbld = curr & (1u << 1u);
        XferCompl = curr & (1u << 0u);
    }

    /**
     * Set all of DOEPINT's bit fields.
     *
     * (read-write) Device Endpoint Interrupt Register
     */
    inline void set_DOEPINT(bool NYETIntrpt, bool NAKIntrpt,
                            bool BbleErrIntrpt, bool PktDrpSts, bool BNAIntr,
                            bool Back2BackSETup, bool StsPhseRcvd,
                            bool OUTTknEPdis, bool SetUp, bool AHBErr,
                            bool EPDisbld, bool XferCompl) volatile
    {
        uint32_t curr = DOEPINT;

        curr &= ~(0b1u << 14u);
        curr |= (NYETIntrpt & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (NAKIntrpt & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (BbleErrIntrpt & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (PktDrpSts & 0b1u) << 11u;
        curr &= ~(0b1u << 9u);
        curr |= (BNAIntr & 0b1u) << 9u;
        curr &= ~(0b1u << 6u);
        curr |= (Back2BackSETup & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (StsPhseRcvd & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (OUTTknEPdis & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SetUp & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (AHBErr & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (EPDisbld & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (XferCompl & 0b1u) << 0u;

        DOEPINT = curr;
    }

    /**
     * Get DOEPTSIZ_ISO's RxDPID field.
     *
     * Received Data PID
     */
    inline USB0_EP1_DOEPTSIZ_ISO_RxDPID get_DOEPTSIZ_ISO_RxDPID() volatile
    {
        return USB0_EP1_DOEPTSIZ_ISO_RxDPID((DOEPTSIZ_ISO >> 29u) & 0b11u);
    }

    /**
     * Get DOEPTSIZ_ISO's PktCnt field.
     *
     * Packet Count
     */
    inline uint16_t get_DOEPTSIZ_ISO_PktCnt() volatile
    {
        return (DOEPTSIZ_ISO >> 19u) & 0b1111111111u;
    }

    /**
     * Set DOEPTSIZ_ISO's PktCnt field.
     *
     * Packet Count
     */
    inline void set_DOEPTSIZ_ISO_PktCnt(uint16_t value) volatile
    {
        uint32_t curr = DOEPTSIZ_ISO;

        curr &= ~(0b1111111111u << 19u);
        curr |= (value & 0b1111111111u) << 19u;

        DOEPTSIZ_ISO = curr;
    }

    /**
     * Get DOEPTSIZ_ISO's XferSize field.
     *
     * Transfer Size
     */
    inline uint32_t get_DOEPTSIZ_ISO_XferSize() volatile
    {
        return (DOEPTSIZ_ISO >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set DOEPTSIZ_ISO's XferSize field.
     *
     * Transfer Size
     */
    inline void set_DOEPTSIZ_ISO_XferSize(uint32_t value) volatile
    {
        uint32_t curr = DOEPTSIZ_ISO;

        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111u) << 0u;

        DOEPTSIZ_ISO = curr;
    }

    /**
     * Get all of DOEPTSIZ_ISO's bit fields.
     *
     * (read-write) Device Endpoint Transfer Size Register [ISO]
     */
    inline void get_DOEPTSIZ_ISO(USB0_EP1_DOEPTSIZ_ISO_RxDPID &RxDPID,
                                 uint16_t &PktCnt, uint32_t &XferSize) volatile
    {
        uint32_t curr = DOEPTSIZ_ISO;

        RxDPID = USB0_EP1_DOEPTSIZ_ISO_RxDPID((curr >> 29u) & 0b11u);
        PktCnt = (curr >> 19u) & 0b1111111111u;
        XferSize = (curr >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set all of DOEPTSIZ_ISO's bit fields.
     *
     * (read-write) Device Endpoint Transfer Size Register [ISO]
     */
    inline void set_DOEPTSIZ_ISO(uint16_t PktCnt, uint32_t XferSize) volatile
    {
        uint32_t curr = DOEPTSIZ_ISO;

        curr &= ~(0b1111111111u << 19u);
        curr |= (PktCnt & 0b1111111111u) << 19u;
        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (XferSize & 0b1111111111111111111u) << 0u;

        DOEPTSIZ_ISO = curr;
    }

    /**
     * Get DOEPTSIZ_ISO's SUPCnt field.
     *
     * SETUP Packet Count: 0b00=1 packet, 0b00=2 packets, 0b00=3 packets,
     */
    inline uint8_t get_DOEPTSIZ_CONTROL_SUPCnt() volatile
    {
        return (DOEPTSIZ_CONTROL >> 29u) & 0b11u;
    }

    /**
     * Set DOEPTSIZ_ISO's SUPCnt field.
     *
     * SETUP Packet Count: 0b00=1 packet, 0b00=2 packets, 0b00=3 packets,
     */
    inline void set_DOEPTSIZ_CONTROL_SUPCnt(uint8_t value) volatile
    {
        uint32_t curr = DOEPTSIZ_CONTROL;

        curr &= ~(0b11u << 29u);
        curr |= (value & 0b11u) << 29u;

        DOEPTSIZ_CONTROL = curr;
    }

    /**
     * Get DOEPTSIZ_ISO's PktCnt field.
     *
     * Packet Count
     */
    inline uint16_t get_DOEPTSIZ_CONTROL_PktCnt() volatile
    {
        return (DOEPTSIZ_CONTROL >> 19u) & 0b1111111111u;
    }

    /**
     * Set DOEPTSIZ_ISO's PktCnt field.
     *
     * Packet Count
     */
    inline void set_DOEPTSIZ_CONTROL_PktCnt(uint16_t value) volatile
    {
        uint32_t curr = DOEPTSIZ_CONTROL;

        curr &= ~(0b1111111111u << 19u);
        curr |= (value & 0b1111111111u) << 19u;

        DOEPTSIZ_CONTROL = curr;
    }

    /**
     * Get DOEPTSIZ_ISO's XferSize field.
     *
     * Transfer Size
     */
    inline uint32_t get_DOEPTSIZ_CONTROL_XferSize() volatile
    {
        return (DOEPTSIZ_CONTROL >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set DOEPTSIZ_ISO's XferSize field.
     *
     * Transfer Size
     */
    inline void set_DOEPTSIZ_CONTROL_XferSize(uint32_t value) volatile
    {
        uint32_t curr = DOEPTSIZ_CONTROL;

        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111u) << 0u;

        DOEPTSIZ_CONTROL = curr;
    }

    /**
     * Get all of DOEPTSIZ_CONTROL's bit fields.
     *
     * (read-write) Device Endpoint Transfer Size Register [ISO]
     */
    inline void get_DOEPTSIZ_CONTROL(uint8_t &SUPCnt, uint16_t &PktCnt,
                                     uint32_t &XferSize) volatile
    {
        uint32_t curr = DOEPTSIZ_CONTROL;

        SUPCnt = (curr >> 29u) & 0b11u;
        PktCnt = (curr >> 19u) & 0b1111111111u;
        XferSize = (curr >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set all of DOEPTSIZ_CONTROL's bit fields.
     *
     * (read-write) Device Endpoint Transfer Size Register [ISO]
     */
    inline void set_DOEPTSIZ_CONTROL(uint8_t SUPCnt, uint16_t PktCnt,
                                     uint32_t XferSize) volatile
    {
        uint32_t curr = DOEPTSIZ_CONTROL;

        curr &= ~(0b11u << 29u);
        curr |= (SUPCnt & 0b11u) << 29u;
        curr &= ~(0b1111111111u << 19u);
        curr |= (PktCnt & 0b1111111111u) << 19u;
        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (XferSize & 0b1111111111111111111u) << 0u;

        DOEPTSIZ_CONTROL = curr;
    }

    /**
     * Get DOEPDMA's DMAAddr field.
     *
     * DMA Address
     */
    inline uint32_t get_DOEPDMA_DMAAddr() volatile
    {
        return (DOEPDMA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DOEPDMA's DMAAddr field.
     *
     * DMA Address
     */
    inline void set_DOEPDMA_DMAAddr(uint32_t value) volatile
    {
        uint32_t curr = DOEPDMA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DOEPDMA = curr;
    }

    /**
     * Get DOEPDMAB's DMABufferAddr field.
     *
     * DMA Buffer Address
     */
    inline uint32_t get_DOEPDMAB_DMABufferAddr() volatile
    {
        return (DOEPDMAB >> 0u) & 0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(usb0_ep1) == usb0_ep1::size);

static volatile usb0_ep1 *const USB0_EP1 =
    reinterpret_cast<usb0_ep1 *>(0x50040920);

static volatile usb0_ep1 *const USB0_EP2 =
    reinterpret_cast<usb0_ep1 *>(0x50040940);

static volatile usb0_ep1 *const USB0_EP3 =
    reinterpret_cast<usb0_ep1 *>(0x50040960);

static volatile usb0_ep1 *const USB0_EP4 =
    reinterpret_cast<usb0_ep1 *>(0x50040980);

static volatile usb0_ep1 *const USB0_EP5 =
    reinterpret_cast<usb0_ep1 *>(0x500409A0);

static volatile usb0_ep1 *const USB0_EP6 =
    reinterpret_cast<usb0_ep1 *>(0x500409C0);

}; // namespace XMC4700
