/**
 * \file
 * \brief Generated by ifgen (3.0.1).
 */
#pragma once

#include "../enums/USB0_EP1_DIEPCTL_INTBULK_DPID.h"
#include "../enums/USB0_EP1_DIEPCTL_INTBULK_EPType.h"
#include "../enums/USB0_EP1_DIEPCTL_INTBULK_NAKSts.h"
#include "../enums/USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum.h"
#include "../enums/USB0_EP1_DIEPCTL_ISOCONT_EPType.h"
#include "../enums/USB0_EP1_DIEPCTL_ISOCONT_NAKSts.h"
#include "../enums/USB0_EP1_DOEPCTL_INTBULK_DPID.h"
#include "../enums/USB0_EP1_DOEPCTL_INTBULK_EPType.h"
#include "../enums/USB0_EP1_DOEPCTL_INTBULK_NAKSts.h"
#include "../enums/USB0_EP1_DOEPCTL_ISOCONT_EO_FrNum.h"
#include "../enums/USB0_EP1_DOEPCTL_ISOCONT_EPType.h"
#include "../enums/USB0_EP1_DOEPCTL_ISOCONT_NAKSts.h"
#include "../enums/USB0_EP1_DOEPTSIZ_ISO_RxDPID.h"
#include "../enums/USB0_EP1_DTXFSTS_INEPTxFSpcAvail.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Universal Serial Bus
 */
struct [[gnu::packed]] usb0_ep1
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< usb0_ep1's identifier. */
    static constexpr std::size_t size = 544; /*!< usb0_ep1's size in bytes. */

    /* Fields. */
    union
    {
        uint32_t DIEPCTL_ISOCONT; /* (read-write) Device Endpoint Control Register [ISOCONT] */
        uint32_t DIEPCTL_INTBULK; /* (read-write) Device Endpoint Control Register [INTBULK] */
    };
    union
    {
        uint32_t DOEPCTL_ISOCONT; /* (read-write) Device Endpoint Control Register [ISOCONT] */
        uint32_t DOEPCTL_INTBULK; /* (read-write) Device Endpoint Control Register [INTBULK] */
    };
    union
    {
        uint32_t DOEPTSIZ_ISO; /* (read-write) Device Endpoint Transfer Size Register [ISO] */
        uint32_t DOEPTSIZ_CONTROL; /* (read-write) Device Endpoint Transfer Size Register [CONT] */
    };
    const uint32_t reserved_padding0 = {};
    uint32_t DIEPINT;                                                /*!< (read-write) Device Endpoint Interrupt Register */
    const uint32_t reserved_padding1 = {};
    uint32_t DIEPTSIZ;                                               /*!< (read-write) Device Endpoint Transfer Size Register */
    uint32_t DIEPDMA;                                                /*!< (read-write) Device Endpoint DMA Address Register */
    const uint32_t DTXFSTS = {};                                     /*!< (read-only) Device IN Endpoint Transmit FIFO Status Register */
    const uint32_t DIEPDMAB = {};                                    /*!< (read-only) Device Endpoint DMA Buffer Address Register */
    static constexpr std::size_t reserved_padding2_length = 120;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    const uint32_t reserved_padding3 = {};
    uint32_t DOEPINT;                                                /*!< (read-write) Device Endpoint Interrupt Register */
    const uint32_t reserved_padding4 = {};
    uint32_t DOEPDMA;                                                /*!< (read-write) Device Endpoint DMA Address Register */
    const uint32_t reserved_padding5 = {};
    const uint32_t DOEPDMAB = {};                                    /*!< (read-only) Device Endpoint DMA Buffer Address Register */

    /* Methods. */

    /**
     * Get DIEPCTL_ISOCONT's EPEna bit.
     */
    bool get_DIEPCTL_ISOCONT_EPEna()
    {
        return DIEPCTL_ISOCONT & (1u << 31u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPEna bit.
     */
    inline void set_DIEPCTL_ISOCONT_EPEna()
    {
        DIEPCTL_ISOCONT |= 1u << 31u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's EPEna bit.
     */
    inline void clear_DIEPCTL_ISOCONT_EPEna()
    {
        DIEPCTL_ISOCONT &= ~(1u << 31u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's EPEna bit.
     */
    inline void toggle_DIEPCTL_ISOCONT_EPEna()
    {
        DIEPCTL_ISOCONT ^= 1u << 31u;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPDis bit.
     */
    bool get_DIEPCTL_ISOCONT_EPDis()
    {
        return DIEPCTL_ISOCONT & (1u << 30u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPDis bit.
     */
    inline void set_DIEPCTL_ISOCONT_EPDis()
    {
        DIEPCTL_ISOCONT |= 1u << 30u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's EPDis bit.
     */
    inline void clear_DIEPCTL_ISOCONT_EPDis()
    {
        DIEPCTL_ISOCONT &= ~(1u << 30u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's EPDis bit.
     */
    inline void toggle_DIEPCTL_ISOCONT_EPDis()
    {
        DIEPCTL_ISOCONT ^= 1u << 30u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SetOddFr bit.
     */
    inline void set_DIEPCTL_ISOCONT_SetOddFr()
    {
        DIEPCTL_ISOCONT |= 1u << 29u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SetOddFr bit.
     */
    inline void clear_DIEPCTL_ISOCONT_SetOddFr()
    {
        DIEPCTL_ISOCONT &= ~(1u << 29u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SetOddFr bit.
     */
    inline void toggle_DIEPCTL_ISOCONT_SetOddFr()
    {
        DIEPCTL_ISOCONT ^= 1u << 29u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SetEvenFr bit.
     */
    inline void set_DIEPCTL_ISOCONT_SetEvenFr()
    {
        DIEPCTL_ISOCONT |= 1u << 28u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SetEvenFr bit.
     */
    inline void clear_DIEPCTL_ISOCONT_SetEvenFr()
    {
        DIEPCTL_ISOCONT &= ~(1u << 28u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SetEvenFr bit.
     */
    inline void toggle_DIEPCTL_ISOCONT_SetEvenFr()
    {
        DIEPCTL_ISOCONT ^= 1u << 28u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SNAK bit.
     */
    inline void set_DIEPCTL_ISOCONT_SNAK()
    {
        DIEPCTL_ISOCONT |= 1u << 27u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SNAK bit.
     */
    inline void clear_DIEPCTL_ISOCONT_SNAK()
    {
        DIEPCTL_ISOCONT &= ~(1u << 27u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SNAK bit.
     */
    inline void toggle_DIEPCTL_ISOCONT_SNAK()
    {
        DIEPCTL_ISOCONT ^= 1u << 27u;
    }

    /**
     * Set DIEPCTL_ISOCONT's CNAK bit.
     */
    inline void set_DIEPCTL_ISOCONT_CNAK()
    {
        DIEPCTL_ISOCONT |= 1u << 26u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's CNAK bit.
     */
    inline void clear_DIEPCTL_ISOCONT_CNAK()
    {
        DIEPCTL_ISOCONT &= ~(1u << 26u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's CNAK bit.
     */
    inline void toggle_DIEPCTL_ISOCONT_CNAK()
    {
        DIEPCTL_ISOCONT ^= 1u << 26u;
    }

    /**
     * Get DIEPCTL_ISOCONT's TxFNum field.
     */
    uint8_t get_DIEPCTL_ISOCONT_TxFNum()
    {
        return (DIEPCTL_ISOCONT >> 22u) & 0b1111u;
    }

    /**
     * Set DIEPCTL_ISOCONT's TxFNum field.
     */
    inline void set_DIEPCTL_ISOCONT_TxFNum(uint8_t value)
    {
        uint32_t curr = DIEPCTL_ISOCONT;

        curr &= ~(0b1111u << 22u);
        curr |= (value & 0b1111u) << 22u;

        DIEPCTL_ISOCONT = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's Stall bit.
     */
    bool get_DIEPCTL_ISOCONT_Stall()
    {
        return DIEPCTL_ISOCONT & (1u << 21u);
    }

    /**
     * Set DIEPCTL_ISOCONT's Stall bit.
     */
    inline void set_DIEPCTL_ISOCONT_Stall()
    {
        DIEPCTL_ISOCONT |= 1u << 21u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's Stall bit.
     */
    inline void clear_DIEPCTL_ISOCONT_Stall()
    {
        DIEPCTL_ISOCONT &= ~(1u << 21u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's Stall bit.
     */
    inline void toggle_DIEPCTL_ISOCONT_Stall()
    {
        DIEPCTL_ISOCONT ^= 1u << 21u;
    }

    /**
     * Get DIEPCTL_ISOCONT's Snp bit.
     */
    bool get_DIEPCTL_ISOCONT_Snp()
    {
        return DIEPCTL_ISOCONT & (1u << 20u);
    }

    /**
     * Set DIEPCTL_ISOCONT's Snp bit.
     */
    inline void set_DIEPCTL_ISOCONT_Snp()
    {
        DIEPCTL_ISOCONT |= 1u << 20u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's Snp bit.
     */
    inline void clear_DIEPCTL_ISOCONT_Snp()
    {
        DIEPCTL_ISOCONT &= ~(1u << 20u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's Snp bit.
     */
    inline void toggle_DIEPCTL_ISOCONT_Snp()
    {
        DIEPCTL_ISOCONT ^= 1u << 20u;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPType field.
     */
    USB0_EP1_DIEPCTL_ISOCONT_EPType get_DIEPCTL_ISOCONT_EPType()
    {
        return USB0_EP1_DIEPCTL_ISOCONT_EPType((DIEPCTL_ISOCONT >> 18u) & 0b11u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPType field.
     */
    inline void set_DIEPCTL_ISOCONT_EPType(USB0_EP1_DIEPCTL_ISOCONT_EPType value)
    {
        uint32_t curr = DIEPCTL_ISOCONT;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        DIEPCTL_ISOCONT = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's NAKSts bit.
     */
    USB0_EP1_DIEPCTL_ISOCONT_NAKSts get_DIEPCTL_ISOCONT_NAKSts()
    {
        return USB0_EP1_DIEPCTL_ISOCONT_NAKSts(DIEPCTL_ISOCONT & (1u << 17u));
    }

    /**
     * Get DIEPCTL_ISOCONT's EO_FrNum bit.
     */
    USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum get_DIEPCTL_ISOCONT_EO_FrNum()
    {
        return USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum(DIEPCTL_ISOCONT & (1u << 16u));
    }

    /**
     * Get DIEPCTL_ISOCONT's USBActEP bit.
     */
    bool get_DIEPCTL_ISOCONT_USBActEP()
    {
        return DIEPCTL_ISOCONT & (1u << 15u);
    }

    /**
     * Set DIEPCTL_ISOCONT's USBActEP bit.
     */
    inline void set_DIEPCTL_ISOCONT_USBActEP()
    {
        DIEPCTL_ISOCONT |= 1u << 15u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's USBActEP bit.
     */
    inline void clear_DIEPCTL_ISOCONT_USBActEP()
    {
        DIEPCTL_ISOCONT &= ~(1u << 15u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's USBActEP bit.
     */
    inline void toggle_DIEPCTL_ISOCONT_USBActEP()
    {
        DIEPCTL_ISOCONT ^= 1u << 15u;
    }

    /**
     * Get DIEPCTL_ISOCONT's MPS field.
     */
    uint16_t get_DIEPCTL_ISOCONT_MPS()
    {
        return (DIEPCTL_ISOCONT >> 0u) & 0b11111111111u;
    }

    /**
     * Set DIEPCTL_ISOCONT's MPS field.
     */
    inline void set_DIEPCTL_ISOCONT_MPS(uint16_t value)
    {
        uint32_t curr = DIEPCTL_ISOCONT;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        DIEPCTL_ISOCONT = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPEna bit.
     */
    bool get_DIEPCTL_INTBULK_EPEna()
    {
        return DIEPCTL_INTBULK & (1u << 31u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPEna bit.
     */
    inline void set_DIEPCTL_INTBULK_EPEna()
    {
        DIEPCTL_ISOCONT |= 1u << 31u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's EPEna bit.
     */
    inline void clear_DIEPCTL_INTBULK_EPEna()
    {
        DIEPCTL_ISOCONT &= ~(1u << 31u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's EPEna bit.
     */
    inline void toggle_DIEPCTL_INTBULK_EPEna()
    {
        DIEPCTL_ISOCONT ^= 1u << 31u;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPDis bit.
     */
    bool get_DIEPCTL_INTBULK_EPDis()
    {
        return DIEPCTL_INTBULK & (1u << 30u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPDis bit.
     */
    inline void set_DIEPCTL_INTBULK_EPDis()
    {
        DIEPCTL_ISOCONT |= 1u << 30u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's EPDis bit.
     */
    inline void clear_DIEPCTL_INTBULK_EPDis()
    {
        DIEPCTL_ISOCONT &= ~(1u << 30u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's EPDis bit.
     */
    inline void toggle_DIEPCTL_INTBULK_EPDis()
    {
        DIEPCTL_ISOCONT ^= 1u << 30u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SetD1PID bit.
     */
    inline void set_DIEPCTL_INTBULK_SetD1PID()
    {
        DIEPCTL_ISOCONT |= 1u << 29u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SetD1PID bit.
     */
    inline void clear_DIEPCTL_INTBULK_SetD1PID()
    {
        DIEPCTL_ISOCONT &= ~(1u << 29u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SetD1PID bit.
     */
    inline void toggle_DIEPCTL_INTBULK_SetD1PID()
    {
        DIEPCTL_ISOCONT ^= 1u << 29u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SetD0PID bit.
     */
    inline void set_DIEPCTL_INTBULK_SetD0PID()
    {
        DIEPCTL_ISOCONT |= 1u << 28u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SetD0PID bit.
     */
    inline void clear_DIEPCTL_INTBULK_SetD0PID()
    {
        DIEPCTL_ISOCONT &= ~(1u << 28u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SetD0PID bit.
     */
    inline void toggle_DIEPCTL_INTBULK_SetD0PID()
    {
        DIEPCTL_ISOCONT ^= 1u << 28u;
    }

    /**
     * Set DIEPCTL_ISOCONT's SNAK bit.
     */
    inline void set_DIEPCTL_INTBULK_SNAK()
    {
        DIEPCTL_ISOCONT |= 1u << 27u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's SNAK bit.
     */
    inline void clear_DIEPCTL_INTBULK_SNAK()
    {
        DIEPCTL_ISOCONT &= ~(1u << 27u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's SNAK bit.
     */
    inline void toggle_DIEPCTL_INTBULK_SNAK()
    {
        DIEPCTL_ISOCONT ^= 1u << 27u;
    }

    /**
     * Set DIEPCTL_ISOCONT's CNAK bit.
     */
    inline void set_DIEPCTL_INTBULK_CNAK()
    {
        DIEPCTL_ISOCONT |= 1u << 26u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's CNAK bit.
     */
    inline void clear_DIEPCTL_INTBULK_CNAK()
    {
        DIEPCTL_ISOCONT &= ~(1u << 26u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's CNAK bit.
     */
    inline void toggle_DIEPCTL_INTBULK_CNAK()
    {
        DIEPCTL_ISOCONT ^= 1u << 26u;
    }

    /**
     * Get DIEPCTL_ISOCONT's TxFNum field.
     */
    uint8_t get_DIEPCTL_INTBULK_TxFNum()
    {
        return (DIEPCTL_INTBULK >> 22u) & 0b1111u;
    }

    /**
     * Set DIEPCTL_ISOCONT's TxFNum field.
     */
    inline void set_DIEPCTL_INTBULK_TxFNum(uint8_t value)
    {
        uint32_t curr = DIEPCTL_INTBULK;

        curr &= ~(0b1111u << 22u);
        curr |= (value & 0b1111u) << 22u;

        DIEPCTL_INTBULK = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's Stall bit.
     */
    bool get_DIEPCTL_INTBULK_Stall()
    {
        return DIEPCTL_INTBULK & (1u << 21u);
    }

    /**
     * Set DIEPCTL_ISOCONT's Stall bit.
     */
    inline void set_DIEPCTL_INTBULK_Stall()
    {
        DIEPCTL_ISOCONT |= 1u << 21u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's Stall bit.
     */
    inline void clear_DIEPCTL_INTBULK_Stall()
    {
        DIEPCTL_ISOCONT &= ~(1u << 21u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's Stall bit.
     */
    inline void toggle_DIEPCTL_INTBULK_Stall()
    {
        DIEPCTL_ISOCONT ^= 1u << 21u;
    }

    /**
     * Get DIEPCTL_ISOCONT's Snp bit.
     */
    bool get_DIEPCTL_INTBULK_Snp()
    {
        return DIEPCTL_INTBULK & (1u << 20u);
    }

    /**
     * Set DIEPCTL_ISOCONT's Snp bit.
     */
    inline void set_DIEPCTL_INTBULK_Snp()
    {
        DIEPCTL_ISOCONT |= 1u << 20u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's Snp bit.
     */
    inline void clear_DIEPCTL_INTBULK_Snp()
    {
        DIEPCTL_ISOCONT &= ~(1u << 20u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's Snp bit.
     */
    inline void toggle_DIEPCTL_INTBULK_Snp()
    {
        DIEPCTL_ISOCONT ^= 1u << 20u;
    }

    /**
     * Get DIEPCTL_ISOCONT's EPType field.
     */
    USB0_EP1_DIEPCTL_INTBULK_EPType get_DIEPCTL_INTBULK_EPType()
    {
        return USB0_EP1_DIEPCTL_INTBULK_EPType((DIEPCTL_INTBULK >> 18u) & 0b11u);
    }

    /**
     * Set DIEPCTL_ISOCONT's EPType field.
     */
    inline void set_DIEPCTL_INTBULK_EPType(USB0_EP1_DIEPCTL_INTBULK_EPType value)
    {
        uint32_t curr = DIEPCTL_INTBULK;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        DIEPCTL_INTBULK = curr;
    }

    /**
     * Get DIEPCTL_ISOCONT's NAKSts bit.
     */
    USB0_EP1_DIEPCTL_INTBULK_NAKSts get_DIEPCTL_INTBULK_NAKSts()
    {
        return USB0_EP1_DIEPCTL_INTBULK_NAKSts(DIEPCTL_INTBULK & (1u << 17u));
    }

    /**
     * Get DIEPCTL_ISOCONT's DPID bit.
     */
    USB0_EP1_DIEPCTL_INTBULK_DPID get_DIEPCTL_INTBULK_DPID()
    {
        return USB0_EP1_DIEPCTL_INTBULK_DPID(DIEPCTL_INTBULK & (1u << 16u));
    }

    /**
     * Get DIEPCTL_ISOCONT's USBActEP bit.
     */
    bool get_DIEPCTL_INTBULK_USBActEP()
    {
        return DIEPCTL_INTBULK & (1u << 15u);
    }

    /**
     * Set DIEPCTL_ISOCONT's USBActEP bit.
     */
    inline void set_DIEPCTL_INTBULK_USBActEP()
    {
        DIEPCTL_ISOCONT |= 1u << 15u;
    }

    /**
     * Clear DIEPCTL_ISOCONT's USBActEP bit.
     */
    inline void clear_DIEPCTL_INTBULK_USBActEP()
    {
        DIEPCTL_ISOCONT &= ~(1u << 15u);
    }

    /**
     * Toggle DIEPCTL_ISOCONT's USBActEP bit.
     */
    inline void toggle_DIEPCTL_INTBULK_USBActEP()
    {
        DIEPCTL_ISOCONT ^= 1u << 15u;
    }

    /**
     * Get DIEPCTL_ISOCONT's MPS field.
     */
    uint16_t get_DIEPCTL_INTBULK_MPS()
    {
        return (DIEPCTL_INTBULK >> 0u) & 0b11111111111u;
    }

    /**
     * Set DIEPCTL_ISOCONT's MPS field.
     */
    inline void set_DIEPCTL_INTBULK_MPS(uint16_t value)
    {
        uint32_t curr = DIEPCTL_INTBULK;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        DIEPCTL_INTBULK = curr;
    }

    /**
     * Get DIEPINT's BNAIntr bit.
     */
    bool get_DIEPINT_BNAIntr()
    {
        return DIEPINT & (1u << 9u);
    }

    /**
     * Set DIEPINT's BNAIntr bit.
     */
    inline void set_DIEPINT_BNAIntr()
    {
        DIEPINT |= 1u << 9u;
    }

    /**
     * Clear DIEPINT's BNAIntr bit.
     */
    inline void clear_DIEPINT_BNAIntr()
    {
        DIEPINT &= ~(1u << 9u);
    }

    /**
     * Toggle DIEPINT's BNAIntr bit.
     */
    inline void toggle_DIEPINT_BNAIntr()
    {
        DIEPINT ^= 1u << 9u;
    }

    /**
     * Get DIEPINT's TxFEmp bit.
     */
    bool get_DIEPINT_TxFEmp()
    {
        return DIEPINT & (1u << 7u);
    }

    /**
     * Get DIEPINT's INEPNakEff bit.
     */
    bool get_DIEPINT_INEPNakEff()
    {
        return DIEPINT & (1u << 6u);
    }

    /**
     * Set DIEPINT's INEPNakEff bit.
     */
    inline void set_DIEPINT_INEPNakEff()
    {
        DIEPINT |= 1u << 6u;
    }

    /**
     * Clear DIEPINT's INEPNakEff bit.
     */
    inline void clear_DIEPINT_INEPNakEff()
    {
        DIEPINT &= ~(1u << 6u);
    }

    /**
     * Toggle DIEPINT's INEPNakEff bit.
     */
    inline void toggle_DIEPINT_INEPNakEff()
    {
        DIEPINT ^= 1u << 6u;
    }

    /**
     * Get DIEPINT's INTknTXFEmp bit.
     */
    bool get_DIEPINT_INTknTXFEmp()
    {
        return DIEPINT & (1u << 4u);
    }

    /**
     * Set DIEPINT's INTknTXFEmp bit.
     */
    inline void set_DIEPINT_INTknTXFEmp()
    {
        DIEPINT |= 1u << 4u;
    }

    /**
     * Clear DIEPINT's INTknTXFEmp bit.
     */
    inline void clear_DIEPINT_INTknTXFEmp()
    {
        DIEPINT &= ~(1u << 4u);
    }

    /**
     * Toggle DIEPINT's INTknTXFEmp bit.
     */
    inline void toggle_DIEPINT_INTknTXFEmp()
    {
        DIEPINT ^= 1u << 4u;
    }

    /**
     * Get DIEPINT's TimeOUT bit.
     */
    bool get_DIEPINT_TimeOUT()
    {
        return DIEPINT & (1u << 3u);
    }

    /**
     * Set DIEPINT's TimeOUT bit.
     */
    inline void set_DIEPINT_TimeOUT()
    {
        DIEPINT |= 1u << 3u;
    }

    /**
     * Clear DIEPINT's TimeOUT bit.
     */
    inline void clear_DIEPINT_TimeOUT()
    {
        DIEPINT &= ~(1u << 3u);
    }

    /**
     * Toggle DIEPINT's TimeOUT bit.
     */
    inline void toggle_DIEPINT_TimeOUT()
    {
        DIEPINT ^= 1u << 3u;
    }

    /**
     * Get DIEPINT's AHBErr bit.
     */
    bool get_DIEPINT_AHBErr()
    {
        return DIEPINT & (1u << 2u);
    }

    /**
     * Set DIEPINT's AHBErr bit.
     */
    inline void set_DIEPINT_AHBErr()
    {
        DIEPINT |= 1u << 2u;
    }

    /**
     * Clear DIEPINT's AHBErr bit.
     */
    inline void clear_DIEPINT_AHBErr()
    {
        DIEPINT &= ~(1u << 2u);
    }

    /**
     * Toggle DIEPINT's AHBErr bit.
     */
    inline void toggle_DIEPINT_AHBErr()
    {
        DIEPINT ^= 1u << 2u;
    }

    /**
     * Get DIEPINT's EPDisbld bit.
     */
    bool get_DIEPINT_EPDisbld()
    {
        return DIEPINT & (1u << 1u);
    }

    /**
     * Set DIEPINT's EPDisbld bit.
     */
    inline void set_DIEPINT_EPDisbld()
    {
        DIEPINT |= 1u << 1u;
    }

    /**
     * Clear DIEPINT's EPDisbld bit.
     */
    inline void clear_DIEPINT_EPDisbld()
    {
        DIEPINT &= ~(1u << 1u);
    }

    /**
     * Toggle DIEPINT's EPDisbld bit.
     */
    inline void toggle_DIEPINT_EPDisbld()
    {
        DIEPINT ^= 1u << 1u;
    }

    /**
     * Get DIEPINT's XferCompl bit.
     */
    bool get_DIEPINT_XferCompl()
    {
        return DIEPINT & (1u << 0u);
    }

    /**
     * Set DIEPINT's XferCompl bit.
     */
    inline void set_DIEPINT_XferCompl()
    {
        DIEPINT |= 1u << 0u;
    }

    /**
     * Clear DIEPINT's XferCompl bit.
     */
    inline void clear_DIEPINT_XferCompl()
    {
        DIEPINT &= ~(1u << 0u);
    }

    /**
     * Toggle DIEPINT's XferCompl bit.
     */
    inline void toggle_DIEPINT_XferCompl()
    {
        DIEPINT ^= 1u << 0u;
    }

    /**
     * Get DIEPTSIZ's PktCnt field.
     */
    uint16_t get_DIEPTSIZ_PktCnt()
    {
        return (DIEPTSIZ >> 19u) & 0b1111111111u;
    }

    /**
     * Set DIEPTSIZ's PktCnt field.
     */
    inline void set_DIEPTSIZ_PktCnt(uint16_t value)
    {
        uint32_t curr = DIEPTSIZ;

        curr &= ~(0b1111111111u << 19u);
        curr |= (value & 0b1111111111u) << 19u;

        DIEPTSIZ = curr;
    }

    /**
     * Get DIEPTSIZ's XferSize field.
     */
    uint32_t get_DIEPTSIZ_XferSize()
    {
        return (DIEPTSIZ >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set DIEPTSIZ's XferSize field.
     */
    inline void set_DIEPTSIZ_XferSize(uint32_t value)
    {
        uint32_t curr = DIEPTSIZ;

        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111u) << 0u;

        DIEPTSIZ = curr;
    }

    /**
     * Get DIEPDMA's DMAAddr field.
     */
    uint32_t get_DIEPDMA_DMAAddr()
    {
        return (DIEPDMA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DIEPDMA's DMAAddr field.
     */
    inline void set_DIEPDMA_DMAAddr(uint32_t value)
    {
        uint32_t curr = DIEPDMA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DIEPDMA = curr;
    }

    /**
     * Get DTXFSTS's INEPTxFSpcAvail field.
     */
    USB0_EP1_DTXFSTS_INEPTxFSpcAvail get_DTXFSTS_INEPTxFSpcAvail()
    {
        return USB0_EP1_DTXFSTS_INEPTxFSpcAvail((DTXFSTS >> 0u) & 0b1111111111111111u);
    }

    /**
     * Get DIEPDMAB's DMABufferAddr field.
     */
    uint32_t get_DIEPDMAB_DMABufferAddr()
    {
        return (DIEPDMAB >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPEna bit.
     */
    bool get_DOEPCTL_ISOCONT_EPEna()
    {
        return DOEPCTL_ISOCONT & (1u << 31u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPEna bit.
     */
    inline void set_DOEPCTL_ISOCONT_EPEna()
    {
        DOEPCTL_ISOCONT |= 1u << 31u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's EPEna bit.
     */
    inline void clear_DOEPCTL_ISOCONT_EPEna()
    {
        DOEPCTL_ISOCONT &= ~(1u << 31u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's EPEna bit.
     */
    inline void toggle_DOEPCTL_ISOCONT_EPEna()
    {
        DOEPCTL_ISOCONT ^= 1u << 31u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPDis bit.
     */
    bool get_DOEPCTL_ISOCONT_EPDis()
    {
        return DOEPCTL_ISOCONT & (1u << 30u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPDis bit.
     */
    inline void set_DOEPCTL_ISOCONT_EPDis()
    {
        DOEPCTL_ISOCONT |= 1u << 30u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's EPDis bit.
     */
    inline void clear_DOEPCTL_ISOCONT_EPDis()
    {
        DOEPCTL_ISOCONT &= ~(1u << 30u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's EPDis bit.
     */
    inline void toggle_DOEPCTL_ISOCONT_EPDis()
    {
        DOEPCTL_ISOCONT ^= 1u << 30u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SetOddFr bit.
     */
    inline void set_DOEPCTL_ISOCONT_SetOddFr()
    {
        DOEPCTL_ISOCONT |= 1u << 29u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SetOddFr bit.
     */
    inline void clear_DOEPCTL_ISOCONT_SetOddFr()
    {
        DOEPCTL_ISOCONT &= ~(1u << 29u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SetOddFr bit.
     */
    inline void toggle_DOEPCTL_ISOCONT_SetOddFr()
    {
        DOEPCTL_ISOCONT ^= 1u << 29u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SetEvenFr bit.
     */
    inline void set_DOEPCTL_ISOCONT_SetEvenFr()
    {
        DOEPCTL_ISOCONT |= 1u << 28u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SetEvenFr bit.
     */
    inline void clear_DOEPCTL_ISOCONT_SetEvenFr()
    {
        DOEPCTL_ISOCONT &= ~(1u << 28u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SetEvenFr bit.
     */
    inline void toggle_DOEPCTL_ISOCONT_SetEvenFr()
    {
        DOEPCTL_ISOCONT ^= 1u << 28u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SNAK bit.
     */
    inline void set_DOEPCTL_ISOCONT_SNAK()
    {
        DOEPCTL_ISOCONT |= 1u << 27u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SNAK bit.
     */
    inline void clear_DOEPCTL_ISOCONT_SNAK()
    {
        DOEPCTL_ISOCONT &= ~(1u << 27u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SNAK bit.
     */
    inline void toggle_DOEPCTL_ISOCONT_SNAK()
    {
        DOEPCTL_ISOCONT ^= 1u << 27u;
    }

    /**
     * Set DOEPCTL_ISOCONT's CNAK bit.
     */
    inline void set_DOEPCTL_ISOCONT_CNAK()
    {
        DOEPCTL_ISOCONT |= 1u << 26u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's CNAK bit.
     */
    inline void clear_DOEPCTL_ISOCONT_CNAK()
    {
        DOEPCTL_ISOCONT &= ~(1u << 26u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's CNAK bit.
     */
    inline void toggle_DOEPCTL_ISOCONT_CNAK()
    {
        DOEPCTL_ISOCONT ^= 1u << 26u;
    }

    /**
     * Get DOEPCTL_ISOCONT's TxFNum field.
     */
    uint8_t get_DOEPCTL_ISOCONT_TxFNum()
    {
        return (DOEPCTL_ISOCONT >> 22u) & 0b1111u;
    }

    /**
     * Set DOEPCTL_ISOCONT's TxFNum field.
     */
    inline void set_DOEPCTL_ISOCONT_TxFNum(uint8_t value)
    {
        uint32_t curr = DOEPCTL_ISOCONT;

        curr &= ~(0b1111u << 22u);
        curr |= (value & 0b1111u) << 22u;

        DOEPCTL_ISOCONT = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's Stall bit.
     */
    bool get_DOEPCTL_ISOCONT_Stall()
    {
        return DOEPCTL_ISOCONT & (1u << 21u);
    }

    /**
     * Set DOEPCTL_ISOCONT's Stall bit.
     */
    inline void set_DOEPCTL_ISOCONT_Stall()
    {
        DOEPCTL_ISOCONT |= 1u << 21u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's Stall bit.
     */
    inline void clear_DOEPCTL_ISOCONT_Stall()
    {
        DOEPCTL_ISOCONT &= ~(1u << 21u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's Stall bit.
     */
    inline void toggle_DOEPCTL_ISOCONT_Stall()
    {
        DOEPCTL_ISOCONT ^= 1u << 21u;
    }

    /**
     * Get DOEPCTL_ISOCONT's Snp bit.
     */
    bool get_DOEPCTL_ISOCONT_Snp()
    {
        return DOEPCTL_ISOCONT & (1u << 20u);
    }

    /**
     * Set DOEPCTL_ISOCONT's Snp bit.
     */
    inline void set_DOEPCTL_ISOCONT_Snp()
    {
        DOEPCTL_ISOCONT |= 1u << 20u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's Snp bit.
     */
    inline void clear_DOEPCTL_ISOCONT_Snp()
    {
        DOEPCTL_ISOCONT &= ~(1u << 20u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's Snp bit.
     */
    inline void toggle_DOEPCTL_ISOCONT_Snp()
    {
        DOEPCTL_ISOCONT ^= 1u << 20u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPType field.
     */
    USB0_EP1_DOEPCTL_ISOCONT_EPType get_DOEPCTL_ISOCONT_EPType()
    {
        return USB0_EP1_DOEPCTL_ISOCONT_EPType((DOEPCTL_ISOCONT >> 18u) & 0b11u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPType field.
     */
    inline void set_DOEPCTL_ISOCONT_EPType(USB0_EP1_DOEPCTL_ISOCONT_EPType value)
    {
        uint32_t curr = DOEPCTL_ISOCONT;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        DOEPCTL_ISOCONT = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's NAKSts bit.
     */
    USB0_EP1_DOEPCTL_ISOCONT_NAKSts get_DOEPCTL_ISOCONT_NAKSts()
    {
        return USB0_EP1_DOEPCTL_ISOCONT_NAKSts(DOEPCTL_ISOCONT & (1u << 17u));
    }

    /**
     * Get DOEPCTL_ISOCONT's EO_FrNum bit.
     */
    USB0_EP1_DOEPCTL_ISOCONT_EO_FrNum get_DOEPCTL_ISOCONT_EO_FrNum()
    {
        return USB0_EP1_DOEPCTL_ISOCONT_EO_FrNum(DOEPCTL_ISOCONT & (1u << 16u));
    }

    /**
     * Get DOEPCTL_ISOCONT's USBActEP bit.
     */
    bool get_DOEPCTL_ISOCONT_USBActEP()
    {
        return DOEPCTL_ISOCONT & (1u << 15u);
    }

    /**
     * Set DOEPCTL_ISOCONT's USBActEP bit.
     */
    inline void set_DOEPCTL_ISOCONT_USBActEP()
    {
        DOEPCTL_ISOCONT |= 1u << 15u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's USBActEP bit.
     */
    inline void clear_DOEPCTL_ISOCONT_USBActEP()
    {
        DOEPCTL_ISOCONT &= ~(1u << 15u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's USBActEP bit.
     */
    inline void toggle_DOEPCTL_ISOCONT_USBActEP()
    {
        DOEPCTL_ISOCONT ^= 1u << 15u;
    }

    /**
     * Get DOEPCTL_ISOCONT's MPS field.
     */
    uint16_t get_DOEPCTL_ISOCONT_MPS()
    {
        return (DOEPCTL_ISOCONT >> 0u) & 0b11111111111u;
    }

    /**
     * Set DOEPCTL_ISOCONT's MPS field.
     */
    inline void set_DOEPCTL_ISOCONT_MPS(uint16_t value)
    {
        uint32_t curr = DOEPCTL_ISOCONT;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        DOEPCTL_ISOCONT = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPEna bit.
     */
    bool get_DOEPCTL_INTBULK_EPEna()
    {
        return DOEPCTL_INTBULK & (1u << 31u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPEna bit.
     */
    inline void set_DOEPCTL_INTBULK_EPEna()
    {
        DOEPCTL_ISOCONT |= 1u << 31u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's EPEna bit.
     */
    inline void clear_DOEPCTL_INTBULK_EPEna()
    {
        DOEPCTL_ISOCONT &= ~(1u << 31u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's EPEna bit.
     */
    inline void toggle_DOEPCTL_INTBULK_EPEna()
    {
        DOEPCTL_ISOCONT ^= 1u << 31u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPDis bit.
     */
    bool get_DOEPCTL_INTBULK_EPDis()
    {
        return DOEPCTL_INTBULK & (1u << 30u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPDis bit.
     */
    inline void set_DOEPCTL_INTBULK_EPDis()
    {
        DOEPCTL_ISOCONT |= 1u << 30u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's EPDis bit.
     */
    inline void clear_DOEPCTL_INTBULK_EPDis()
    {
        DOEPCTL_ISOCONT &= ~(1u << 30u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's EPDis bit.
     */
    inline void toggle_DOEPCTL_INTBULK_EPDis()
    {
        DOEPCTL_ISOCONT ^= 1u << 30u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SetD1PID bit.
     */
    inline void set_DOEPCTL_INTBULK_SetD1PID()
    {
        DOEPCTL_ISOCONT |= 1u << 29u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SetD1PID bit.
     */
    inline void clear_DOEPCTL_INTBULK_SetD1PID()
    {
        DOEPCTL_ISOCONT &= ~(1u << 29u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SetD1PID bit.
     */
    inline void toggle_DOEPCTL_INTBULK_SetD1PID()
    {
        DOEPCTL_ISOCONT ^= 1u << 29u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SetD0PID bit.
     */
    inline void set_DOEPCTL_INTBULK_SetD0PID()
    {
        DOEPCTL_ISOCONT |= 1u << 28u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SetD0PID bit.
     */
    inline void clear_DOEPCTL_INTBULK_SetD0PID()
    {
        DOEPCTL_ISOCONT &= ~(1u << 28u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SetD0PID bit.
     */
    inline void toggle_DOEPCTL_INTBULK_SetD0PID()
    {
        DOEPCTL_ISOCONT ^= 1u << 28u;
    }

    /**
     * Set DOEPCTL_ISOCONT's SNAK bit.
     */
    inline void set_DOEPCTL_INTBULK_SNAK()
    {
        DOEPCTL_ISOCONT |= 1u << 27u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's SNAK bit.
     */
    inline void clear_DOEPCTL_INTBULK_SNAK()
    {
        DOEPCTL_ISOCONT &= ~(1u << 27u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's SNAK bit.
     */
    inline void toggle_DOEPCTL_INTBULK_SNAK()
    {
        DOEPCTL_ISOCONT ^= 1u << 27u;
    }

    /**
     * Set DOEPCTL_ISOCONT's CNAK bit.
     */
    inline void set_DOEPCTL_INTBULK_CNAK()
    {
        DOEPCTL_ISOCONT |= 1u << 26u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's CNAK bit.
     */
    inline void clear_DOEPCTL_INTBULK_CNAK()
    {
        DOEPCTL_ISOCONT &= ~(1u << 26u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's CNAK bit.
     */
    inline void toggle_DOEPCTL_INTBULK_CNAK()
    {
        DOEPCTL_ISOCONT ^= 1u << 26u;
    }

    /**
     * Get DOEPCTL_ISOCONT's TxFNum field.
     */
    uint8_t get_DOEPCTL_INTBULK_TxFNum()
    {
        return (DOEPCTL_INTBULK >> 22u) & 0b1111u;
    }

    /**
     * Set DOEPCTL_ISOCONT's TxFNum field.
     */
    inline void set_DOEPCTL_INTBULK_TxFNum(uint8_t value)
    {
        uint32_t curr = DOEPCTL_INTBULK;

        curr &= ~(0b1111u << 22u);
        curr |= (value & 0b1111u) << 22u;

        DOEPCTL_INTBULK = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's Stall bit.
     */
    bool get_DOEPCTL_INTBULK_Stall()
    {
        return DOEPCTL_INTBULK & (1u << 21u);
    }

    /**
     * Set DOEPCTL_ISOCONT's Stall bit.
     */
    inline void set_DOEPCTL_INTBULK_Stall()
    {
        DOEPCTL_ISOCONT |= 1u << 21u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's Stall bit.
     */
    inline void clear_DOEPCTL_INTBULK_Stall()
    {
        DOEPCTL_ISOCONT &= ~(1u << 21u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's Stall bit.
     */
    inline void toggle_DOEPCTL_INTBULK_Stall()
    {
        DOEPCTL_ISOCONT ^= 1u << 21u;
    }

    /**
     * Get DOEPCTL_ISOCONT's Snp bit.
     */
    bool get_DOEPCTL_INTBULK_Snp()
    {
        return DOEPCTL_INTBULK & (1u << 20u);
    }

    /**
     * Set DOEPCTL_ISOCONT's Snp bit.
     */
    inline void set_DOEPCTL_INTBULK_Snp()
    {
        DOEPCTL_ISOCONT |= 1u << 20u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's Snp bit.
     */
    inline void clear_DOEPCTL_INTBULK_Snp()
    {
        DOEPCTL_ISOCONT &= ~(1u << 20u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's Snp bit.
     */
    inline void toggle_DOEPCTL_INTBULK_Snp()
    {
        DOEPCTL_ISOCONT ^= 1u << 20u;
    }

    /**
     * Get DOEPCTL_ISOCONT's EPType field.
     */
    USB0_EP1_DOEPCTL_INTBULK_EPType get_DOEPCTL_INTBULK_EPType()
    {
        return USB0_EP1_DOEPCTL_INTBULK_EPType((DOEPCTL_INTBULK >> 18u) & 0b11u);
    }

    /**
     * Set DOEPCTL_ISOCONT's EPType field.
     */
    inline void set_DOEPCTL_INTBULK_EPType(USB0_EP1_DOEPCTL_INTBULK_EPType value)
    {
        uint32_t curr = DOEPCTL_INTBULK;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        DOEPCTL_INTBULK = curr;
    }

    /**
     * Get DOEPCTL_ISOCONT's NAKSts bit.
     */
    USB0_EP1_DOEPCTL_INTBULK_NAKSts get_DOEPCTL_INTBULK_NAKSts()
    {
        return USB0_EP1_DOEPCTL_INTBULK_NAKSts(DOEPCTL_INTBULK & (1u << 17u));
    }

    /**
     * Get DOEPCTL_ISOCONT's DPID bit.
     */
    USB0_EP1_DOEPCTL_INTBULK_DPID get_DOEPCTL_INTBULK_DPID()
    {
        return USB0_EP1_DOEPCTL_INTBULK_DPID(DOEPCTL_INTBULK & (1u << 16u));
    }

    /**
     * Get DOEPCTL_ISOCONT's USBActEP bit.
     */
    bool get_DOEPCTL_INTBULK_USBActEP()
    {
        return DOEPCTL_INTBULK & (1u << 15u);
    }

    /**
     * Set DOEPCTL_ISOCONT's USBActEP bit.
     */
    inline void set_DOEPCTL_INTBULK_USBActEP()
    {
        DOEPCTL_ISOCONT |= 1u << 15u;
    }

    /**
     * Clear DOEPCTL_ISOCONT's USBActEP bit.
     */
    inline void clear_DOEPCTL_INTBULK_USBActEP()
    {
        DOEPCTL_ISOCONT &= ~(1u << 15u);
    }

    /**
     * Toggle DOEPCTL_ISOCONT's USBActEP bit.
     */
    inline void toggle_DOEPCTL_INTBULK_USBActEP()
    {
        DOEPCTL_ISOCONT ^= 1u << 15u;
    }

    /**
     * Get DOEPCTL_ISOCONT's MPS field.
     */
    uint16_t get_DOEPCTL_INTBULK_MPS()
    {
        return (DOEPCTL_INTBULK >> 0u) & 0b11111111111u;
    }

    /**
     * Set DOEPCTL_ISOCONT's MPS field.
     */
    inline void set_DOEPCTL_INTBULK_MPS(uint16_t value)
    {
        uint32_t curr = DOEPCTL_INTBULK;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        DOEPCTL_INTBULK = curr;
    }

    /**
     * Get DOEPINT's NYETIntrpt bit.
     */
    bool get_DOEPINT_NYETIntrpt()
    {
        return DOEPINT & (1u << 14u);
    }

    /**
     * Set DOEPINT's NYETIntrpt bit.
     */
    inline void set_DOEPINT_NYETIntrpt()
    {
        DOEPINT |= 1u << 14u;
    }

    /**
     * Clear DOEPINT's NYETIntrpt bit.
     */
    inline void clear_DOEPINT_NYETIntrpt()
    {
        DOEPINT &= ~(1u << 14u);
    }

    /**
     * Toggle DOEPINT's NYETIntrpt bit.
     */
    inline void toggle_DOEPINT_NYETIntrpt()
    {
        DOEPINT ^= 1u << 14u;
    }

    /**
     * Get DOEPINT's NAKIntrpt bit.
     */
    bool get_DOEPINT_NAKIntrpt()
    {
        return DOEPINT & (1u << 13u);
    }

    /**
     * Set DOEPINT's NAKIntrpt bit.
     */
    inline void set_DOEPINT_NAKIntrpt()
    {
        DOEPINT |= 1u << 13u;
    }

    /**
     * Clear DOEPINT's NAKIntrpt bit.
     */
    inline void clear_DOEPINT_NAKIntrpt()
    {
        DOEPINT &= ~(1u << 13u);
    }

    /**
     * Toggle DOEPINT's NAKIntrpt bit.
     */
    inline void toggle_DOEPINT_NAKIntrpt()
    {
        DOEPINT ^= 1u << 13u;
    }

    /**
     * Get DOEPINT's BbleErrIntrpt bit.
     */
    bool get_DOEPINT_BbleErrIntrpt()
    {
        return DOEPINT & (1u << 12u);
    }

    /**
     * Set DOEPINT's BbleErrIntrpt bit.
     */
    inline void set_DOEPINT_BbleErrIntrpt()
    {
        DOEPINT |= 1u << 12u;
    }

    /**
     * Clear DOEPINT's BbleErrIntrpt bit.
     */
    inline void clear_DOEPINT_BbleErrIntrpt()
    {
        DOEPINT &= ~(1u << 12u);
    }

    /**
     * Toggle DOEPINT's BbleErrIntrpt bit.
     */
    inline void toggle_DOEPINT_BbleErrIntrpt()
    {
        DOEPINT ^= 1u << 12u;
    }

    /**
     * Get DOEPINT's PktDrpSts bit.
     */
    bool get_DOEPINT_PktDrpSts()
    {
        return DOEPINT & (1u << 11u);
    }

    /**
     * Set DOEPINT's PktDrpSts bit.
     */
    inline void set_DOEPINT_PktDrpSts()
    {
        DOEPINT |= 1u << 11u;
    }

    /**
     * Clear DOEPINT's PktDrpSts bit.
     */
    inline void clear_DOEPINT_PktDrpSts()
    {
        DOEPINT &= ~(1u << 11u);
    }

    /**
     * Toggle DOEPINT's PktDrpSts bit.
     */
    inline void toggle_DOEPINT_PktDrpSts()
    {
        DOEPINT ^= 1u << 11u;
    }

    /**
     * Get DOEPINT's BNAIntr bit.
     */
    bool get_DOEPINT_BNAIntr()
    {
        return DOEPINT & (1u << 9u);
    }

    /**
     * Set DOEPINT's BNAIntr bit.
     */
    inline void set_DOEPINT_BNAIntr()
    {
        DOEPINT |= 1u << 9u;
    }

    /**
     * Clear DOEPINT's BNAIntr bit.
     */
    inline void clear_DOEPINT_BNAIntr()
    {
        DOEPINT &= ~(1u << 9u);
    }

    /**
     * Toggle DOEPINT's BNAIntr bit.
     */
    inline void toggle_DOEPINT_BNAIntr()
    {
        DOEPINT ^= 1u << 9u;
    }

    /**
     * Get DOEPINT's Back2BackSETup bit.
     */
    bool get_DOEPINT_Back2BackSETup()
    {
        return DOEPINT & (1u << 6u);
    }

    /**
     * Set DOEPINT's Back2BackSETup bit.
     */
    inline void set_DOEPINT_Back2BackSETup()
    {
        DOEPINT |= 1u << 6u;
    }

    /**
     * Clear DOEPINT's Back2BackSETup bit.
     */
    inline void clear_DOEPINT_Back2BackSETup()
    {
        DOEPINT &= ~(1u << 6u);
    }

    /**
     * Toggle DOEPINT's Back2BackSETup bit.
     */
    inline void toggle_DOEPINT_Back2BackSETup()
    {
        DOEPINT ^= 1u << 6u;
    }

    /**
     * Get DOEPINT's StsPhseRcvd bit.
     */
    bool get_DOEPINT_StsPhseRcvd()
    {
        return DOEPINT & (1u << 5u);
    }

    /**
     * Set DOEPINT's StsPhseRcvd bit.
     */
    inline void set_DOEPINT_StsPhseRcvd()
    {
        DOEPINT |= 1u << 5u;
    }

    /**
     * Clear DOEPINT's StsPhseRcvd bit.
     */
    inline void clear_DOEPINT_StsPhseRcvd()
    {
        DOEPINT &= ~(1u << 5u);
    }

    /**
     * Toggle DOEPINT's StsPhseRcvd bit.
     */
    inline void toggle_DOEPINT_StsPhseRcvd()
    {
        DOEPINT ^= 1u << 5u;
    }

    /**
     * Get DOEPINT's OUTTknEPdis bit.
     */
    bool get_DOEPINT_OUTTknEPdis()
    {
        return DOEPINT & (1u << 4u);
    }

    /**
     * Set DOEPINT's OUTTknEPdis bit.
     */
    inline void set_DOEPINT_OUTTknEPdis()
    {
        DOEPINT |= 1u << 4u;
    }

    /**
     * Clear DOEPINT's OUTTknEPdis bit.
     */
    inline void clear_DOEPINT_OUTTknEPdis()
    {
        DOEPINT &= ~(1u << 4u);
    }

    /**
     * Toggle DOEPINT's OUTTknEPdis bit.
     */
    inline void toggle_DOEPINT_OUTTknEPdis()
    {
        DOEPINT ^= 1u << 4u;
    }

    /**
     * Get DOEPINT's SetUp bit.
     */
    bool get_DOEPINT_SetUp()
    {
        return DOEPINT & (1u << 3u);
    }

    /**
     * Set DOEPINT's SetUp bit.
     */
    inline void set_DOEPINT_SetUp()
    {
        DOEPINT |= 1u << 3u;
    }

    /**
     * Clear DOEPINT's SetUp bit.
     */
    inline void clear_DOEPINT_SetUp()
    {
        DOEPINT &= ~(1u << 3u);
    }

    /**
     * Toggle DOEPINT's SetUp bit.
     */
    inline void toggle_DOEPINT_SetUp()
    {
        DOEPINT ^= 1u << 3u;
    }

    /**
     * Get DOEPINT's AHBErr bit.
     */
    bool get_DOEPINT_AHBErr()
    {
        return DOEPINT & (1u << 2u);
    }

    /**
     * Set DOEPINT's AHBErr bit.
     */
    inline void set_DOEPINT_AHBErr()
    {
        DOEPINT |= 1u << 2u;
    }

    /**
     * Clear DOEPINT's AHBErr bit.
     */
    inline void clear_DOEPINT_AHBErr()
    {
        DOEPINT &= ~(1u << 2u);
    }

    /**
     * Toggle DOEPINT's AHBErr bit.
     */
    inline void toggle_DOEPINT_AHBErr()
    {
        DOEPINT ^= 1u << 2u;
    }

    /**
     * Get DOEPINT's EPDisbld bit.
     */
    bool get_DOEPINT_EPDisbld()
    {
        return DOEPINT & (1u << 1u);
    }

    /**
     * Set DOEPINT's EPDisbld bit.
     */
    inline void set_DOEPINT_EPDisbld()
    {
        DOEPINT |= 1u << 1u;
    }

    /**
     * Clear DOEPINT's EPDisbld bit.
     */
    inline void clear_DOEPINT_EPDisbld()
    {
        DOEPINT &= ~(1u << 1u);
    }

    /**
     * Toggle DOEPINT's EPDisbld bit.
     */
    inline void toggle_DOEPINT_EPDisbld()
    {
        DOEPINT ^= 1u << 1u;
    }

    /**
     * Get DOEPINT's XferCompl bit.
     */
    bool get_DOEPINT_XferCompl()
    {
        return DOEPINT & (1u << 0u);
    }

    /**
     * Set DOEPINT's XferCompl bit.
     */
    inline void set_DOEPINT_XferCompl()
    {
        DOEPINT |= 1u << 0u;
    }

    /**
     * Clear DOEPINT's XferCompl bit.
     */
    inline void clear_DOEPINT_XferCompl()
    {
        DOEPINT &= ~(1u << 0u);
    }

    /**
     * Toggle DOEPINT's XferCompl bit.
     */
    inline void toggle_DOEPINT_XferCompl()
    {
        DOEPINT ^= 1u << 0u;
    }

    /**
     * Get DOEPTSIZ_ISO's RxDPID field.
     */
    USB0_EP1_DOEPTSIZ_ISO_RxDPID get_DOEPTSIZ_ISO_RxDPID()
    {
        return USB0_EP1_DOEPTSIZ_ISO_RxDPID((DOEPTSIZ_ISO >> 29u) & 0b11u);
    }

    /**
     * Get DOEPTSIZ_ISO's PktCnt field.
     */
    uint16_t get_DOEPTSIZ_ISO_PktCnt()
    {
        return (DOEPTSIZ_ISO >> 19u) & 0b1111111111u;
    }

    /**
     * Set DOEPTSIZ_ISO's PktCnt field.
     */
    inline void set_DOEPTSIZ_ISO_PktCnt(uint16_t value)
    {
        uint32_t curr = DOEPTSIZ_ISO;

        curr &= ~(0b1111111111u << 19u);
        curr |= (value & 0b1111111111u) << 19u;

        DOEPTSIZ_ISO = curr;
    }

    /**
     * Get DOEPTSIZ_ISO's XferSize field.
     */
    uint32_t get_DOEPTSIZ_ISO_XferSize()
    {
        return (DOEPTSIZ_ISO >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set DOEPTSIZ_ISO's XferSize field.
     */
    inline void set_DOEPTSIZ_ISO_XferSize(uint32_t value)
    {
        uint32_t curr = DOEPTSIZ_ISO;

        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111u) << 0u;

        DOEPTSIZ_ISO = curr;
    }

    /**
     * Get DOEPTSIZ_ISO's SUPCnt field.
     */
    uint8_t get_DOEPTSIZ_CONTROL_SUPCnt()
    {
        return (DOEPTSIZ_CONTROL >> 29u) & 0b11u;
    }

    /**
     * Set DOEPTSIZ_ISO's SUPCnt field.
     */
    inline void set_DOEPTSIZ_CONTROL_SUPCnt(uint8_t value)
    {
        uint32_t curr = DOEPTSIZ_CONTROL;

        curr &= ~(0b11u << 29u);
        curr |= (value & 0b11u) << 29u;

        DOEPTSIZ_CONTROL = curr;
    }

    /**
     * Get DOEPTSIZ_ISO's PktCnt field.
     */
    uint16_t get_DOEPTSIZ_CONTROL_PktCnt()
    {
        return (DOEPTSIZ_CONTROL >> 19u) & 0b1111111111u;
    }

    /**
     * Set DOEPTSIZ_ISO's PktCnt field.
     */
    inline void set_DOEPTSIZ_CONTROL_PktCnt(uint16_t value)
    {
        uint32_t curr = DOEPTSIZ_CONTROL;

        curr &= ~(0b1111111111u << 19u);
        curr |= (value & 0b1111111111u) << 19u;

        DOEPTSIZ_CONTROL = curr;
    }

    /**
     * Get DOEPTSIZ_ISO's XferSize field.
     */
    uint32_t get_DOEPTSIZ_CONTROL_XferSize()
    {
        return (DOEPTSIZ_CONTROL >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set DOEPTSIZ_ISO's XferSize field.
     */
    inline void set_DOEPTSIZ_CONTROL_XferSize(uint32_t value)
    {
        uint32_t curr = DOEPTSIZ_CONTROL;

        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111u) << 0u;

        DOEPTSIZ_CONTROL = curr;
    }

    /**
     * Get DOEPDMA's DMAAddr field.
     */
    uint32_t get_DOEPDMA_DMAAddr()
    {
        return (DOEPDMA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DOEPDMA's DMAAddr field.
     */
    inline void set_DOEPDMA_DMAAddr(uint32_t value)
    {
        uint32_t curr = DOEPDMA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DOEPDMA = curr;
    }

    /**
     * Get DOEPDMAB's DMABufferAddr field.
     */
    uint32_t get_DOEPDMAB_DMABufferAddr()
    {
        return (DOEPDMAB >> 0u) & 0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(usb0_ep1) == usb0_ep1::size);

static volatile usb0_ep1 *const USB0_EP1 = reinterpret_cast<usb0_ep1 *>(0x50040920);

static volatile usb0_ep1 *const USB0_EP2 = reinterpret_cast<usb0_ep1 *>(0x50040940);

static volatile usb0_ep1 *const USB0_EP3 = reinterpret_cast<usb0_ep1 *>(0x50040960);

static volatile usb0_ep1 *const USB0_EP4 = reinterpret_cast<usb0_ep1 *>(0x50040980);

static volatile usb0_ep1 *const USB0_EP5 = reinterpret_cast<usb0_ep1 *>(0x500409A0);

static volatile usb0_ep1 *const USB0_EP6 = reinterpret_cast<usb0_ep1 *>(0x500409C0);

}; // namespace XMC4700
