/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include "../enums/CCU80_GCST_S3PSS.h"
#include "../enums/CCU80_GCTRL_MSDE.h"
#include "../enums/CCU80_GCTRL_MSE3.h"
#include "../enums/CCU80_GCTRL_PCIS.h"
#include "../enums/CCU80_GCTRL_PRBC.h"
#include "../enums/CCU80_GCTRL_SUSCFG.h"
#include "../enums/CCU80_GPCHK_PACS.h"
#include "../enums/CCU80_GPCHK_PCDS.h"
#include "../enums/CCU80_GPCHK_PCTS.h"
#include "../enums/CCU80_GPCHK_PISEL.h"
#include "../enums/CCU80_GSTAT_PCRB.h"
#include "../enums/CCU80_GSTAT_S3I.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Capture Compare Unit 8 - Unit 0
 */
struct [[gnu::packed]] ccu80
{
    /* Constant attributes. */
    static constexpr std::size_t size = 132; /*!< ccu80's size in bytes. */

    /* Fields. */
    uint32_t GCTRL;            /*!< (read-write) Global Control Register */
    const uint32_t GSTAT = {}; /*!< (read-only) Global Status Register */
    uint32_t GIDLS;            /*!< (write-only) Global Idle Set */
    uint32_t GIDLC;            /*!< (write-only) Global Idle Clear */
    uint32_t GCSS;             /*!< (write-only) Global Channel Set */
    uint32_t GCSC;             /*!< (write-only) Global Channel Clear */
    const uint32_t GCST = {};  /*!< (read-only) Global Channel status */
    uint32_t GPCHK; /*!< (read-write) Parity Checker Configuration */
    static constexpr std::size_t reserved_padding0_length = 24;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    const uint32_t MIDR = {}; /*!< (read-only) Module Identification */

    /* Methods. */

    /**
     * Get GCTRL's MSDE field.
     */
    inline CCU80_GCTRL_MSDE get_GCTRL_MSDE() volatile
    {
        return CCU80_GCTRL_MSDE((GCTRL >> 14u) & 0b11u);
    }

    /**
     * Set GCTRL's MSDE field.
     */
    inline void set_GCTRL_MSDE(CCU80_GCTRL_MSDE value) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        GCTRL = curr;
    }

    /**
     * Get GCTRL's MSE3 bit.
     */
    inline CCU80_GCTRL_MSE3 get_GCTRL_MSE3() volatile
    {
        return CCU80_GCTRL_MSE3(GCTRL & (1u << 13u));
    }

    /**
     * Set GCTRL's MSE3 bit.
     */
    inline void set_GCTRL_MSE3() volatile
    {
        GCTRL |= 1u << 13u;
    }

    /**
     * Clear GCTRL's MSE3 bit.
     */
    inline void clear_GCTRL_MSE3() volatile
    {
        GCTRL &= ~(1u << 13u);
    }

    /**
     * Toggle GCTRL's MSE3 bit.
     */
    inline void toggle_GCTRL_MSE3() volatile
    {
        GCTRL ^= 1u << 13u;
    }

    /**
     * Get GCTRL's MSE2 bit.
     */
    inline CCU80_GCTRL_MSE3 get_GCTRL_MSE2() volatile
    {
        return CCU80_GCTRL_MSE3(GCTRL & (1u << 12u));
    }

    /**
     * Set GCTRL's MSE2 bit.
     */
    inline void set_GCTRL_MSE2() volatile
    {
        GCTRL |= 1u << 12u;
    }

    /**
     * Clear GCTRL's MSE2 bit.
     */
    inline void clear_GCTRL_MSE2() volatile
    {
        GCTRL &= ~(1u << 12u);
    }

    /**
     * Toggle GCTRL's MSE2 bit.
     */
    inline void toggle_GCTRL_MSE2() volatile
    {
        GCTRL ^= 1u << 12u;
    }

    /**
     * Get GCTRL's MSE1 bit.
     */
    inline CCU80_GCTRL_MSE3 get_GCTRL_MSE1() volatile
    {
        return CCU80_GCTRL_MSE3(GCTRL & (1u << 11u));
    }

    /**
     * Set GCTRL's MSE1 bit.
     */
    inline void set_GCTRL_MSE1() volatile
    {
        GCTRL |= 1u << 11u;
    }

    /**
     * Clear GCTRL's MSE1 bit.
     */
    inline void clear_GCTRL_MSE1() volatile
    {
        GCTRL &= ~(1u << 11u);
    }

    /**
     * Toggle GCTRL's MSE1 bit.
     */
    inline void toggle_GCTRL_MSE1() volatile
    {
        GCTRL ^= 1u << 11u;
    }

    /**
     * Get GCTRL's MSE0 bit.
     */
    inline CCU80_GCTRL_MSE3 get_GCTRL_MSE0() volatile
    {
        return CCU80_GCTRL_MSE3(GCTRL & (1u << 10u));
    }

    /**
     * Set GCTRL's MSE0 bit.
     */
    inline void set_GCTRL_MSE0() volatile
    {
        GCTRL |= 1u << 10u;
    }

    /**
     * Clear GCTRL's MSE0 bit.
     */
    inline void clear_GCTRL_MSE0() volatile
    {
        GCTRL &= ~(1u << 10u);
    }

    /**
     * Toggle GCTRL's MSE0 bit.
     */
    inline void toggle_GCTRL_MSE0() volatile
    {
        GCTRL ^= 1u << 10u;
    }

    /**
     * Get GCTRL's SUSCFG field.
     */
    inline CCU80_GCTRL_SUSCFG get_GCTRL_SUSCFG() volatile
    {
        return CCU80_GCTRL_SUSCFG((GCTRL >> 8u) & 0b11u);
    }

    /**
     * Set GCTRL's SUSCFG field.
     */
    inline void set_GCTRL_SUSCFG(CCU80_GCTRL_SUSCFG value) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        GCTRL = curr;
    }

    /**
     * Get GCTRL's PCIS field.
     */
    inline CCU80_GCTRL_PCIS get_GCTRL_PCIS() volatile
    {
        return CCU80_GCTRL_PCIS((GCTRL >> 4u) & 0b11u);
    }

    /**
     * Set GCTRL's PCIS field.
     */
    inline void set_GCTRL_PCIS(CCU80_GCTRL_PCIS value) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GCTRL = curr;
    }

    /**
     * Get GCTRL's PRBC field.
     */
    inline CCU80_GCTRL_PRBC get_GCTRL_PRBC() volatile
    {
        return CCU80_GCTRL_PRBC((GCTRL >> 0u) & 0b111u);
    }

    /**
     * Set GCTRL's PRBC field.
     */
    inline void set_GCTRL_PRBC(CCU80_GCTRL_PRBC value) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        GCTRL = curr;
    }

    /**
     * Get all of GCTRL's bit fields.
     */
    inline void get_GCTRL(CCU80_GCTRL_MSDE &MSDE, CCU80_GCTRL_MSE3 &MSE3,
                          CCU80_GCTRL_MSE3 &MSE2, CCU80_GCTRL_MSE3 &MSE1,
                          CCU80_GCTRL_MSE3 &MSE0, CCU80_GCTRL_SUSCFG &SUSCFG,
                          CCU80_GCTRL_PCIS &PCIS,
                          CCU80_GCTRL_PRBC &PRBC) volatile
    {
        uint32_t curr = GCTRL;

        MSDE = CCU80_GCTRL_MSDE((curr >> 14u) & 0b11u);
        MSE3 = CCU80_GCTRL_MSE3(curr & (1u << 13u));
        MSE2 = CCU80_GCTRL_MSE3(curr & (1u << 12u));
        MSE1 = CCU80_GCTRL_MSE3(curr & (1u << 11u));
        MSE0 = CCU80_GCTRL_MSE3(curr & (1u << 10u));
        SUSCFG = CCU80_GCTRL_SUSCFG((curr >> 8u) & 0b11u);
        PCIS = CCU80_GCTRL_PCIS((curr >> 4u) & 0b11u);
        PRBC = CCU80_GCTRL_PRBC((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of GCTRL's bit fields.
     */
    inline void set_GCTRL(CCU80_GCTRL_MSDE MSDE, CCU80_GCTRL_MSE3 MSE3,
                          CCU80_GCTRL_MSE3 MSE2, CCU80_GCTRL_MSE3 MSE1,
                          CCU80_GCTRL_MSE3 MSE0, CCU80_GCTRL_SUSCFG SUSCFG,
                          CCU80_GCTRL_PCIS PCIS,
                          CCU80_GCTRL_PRBC PRBC) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(MSDE) & 0b11u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(MSE3) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(MSE2) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(MSE1) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(MSE0) & 0b1u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(SUSCFG) & 0b11u) << 8u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PCIS) & 0b11u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(PRBC) & 0b111u) << 0u;

        GCTRL = curr;
    }

    /**
     * Get GSTAT's PCRB bit.
     */
    inline CCU80_GSTAT_PCRB get_GSTAT_PCRB() volatile
    {
        return CCU80_GSTAT_PCRB(GSTAT & (1u << 10u));
    }

    /**
     * Get GSTAT's PRB bit.
     */
    inline CCU80_GSTAT_PCRB get_GSTAT_PRB() volatile
    {
        return CCU80_GSTAT_PCRB(GSTAT & (1u << 8u));
    }

    /**
     * Get GSTAT's S3I bit.
     */
    inline CCU80_GSTAT_S3I get_GSTAT_S3I() volatile
    {
        return CCU80_GSTAT_S3I(GSTAT & (1u << 3u));
    }

    /**
     * Get GSTAT's S2I bit.
     */
    inline CCU80_GSTAT_S3I get_GSTAT_S2I() volatile
    {
        return CCU80_GSTAT_S3I(GSTAT & (1u << 2u));
    }

    /**
     * Get GSTAT's S1I bit.
     */
    inline CCU80_GSTAT_S3I get_GSTAT_S1I() volatile
    {
        return CCU80_GSTAT_S3I(GSTAT & (1u << 1u));
    }

    /**
     * Get GSTAT's S0I bit.
     */
    inline CCU80_GSTAT_S3I get_GSTAT_S0I() volatile
    {
        return CCU80_GSTAT_S3I(GSTAT & (1u << 0u));
    }

    /**
     * Get all of GSTAT's bit fields.
     */
    inline void get_GSTAT(CCU80_GSTAT_PCRB &PCRB, CCU80_GSTAT_PCRB &PRB,
                          CCU80_GSTAT_S3I &S3I, CCU80_GSTAT_S3I &S2I,
                          CCU80_GSTAT_S3I &S1I, CCU80_GSTAT_S3I &S0I) volatile
    {
        uint32_t curr = GSTAT;

        PCRB = CCU80_GSTAT_PCRB(curr & (1u << 10u));
        PRB = CCU80_GSTAT_PCRB(curr & (1u << 8u));
        S3I = CCU80_GSTAT_S3I(curr & (1u << 3u));
        S2I = CCU80_GSTAT_S3I(curr & (1u << 2u));
        S1I = CCU80_GSTAT_S3I(curr & (1u << 1u));
        S0I = CCU80_GSTAT_S3I(curr & (1u << 0u));
    }

    /**
     * Set GIDLS's CPCH bit.
     */
    inline void set_GIDLS_CPCH() volatile
    {
        GIDLS |= 1u << 10u;
    }

    /**
     * Clear GIDLS's CPCH bit.
     */
    inline void clear_GIDLS_CPCH() volatile
    {
        GIDLS &= ~(1u << 10u);
    }

    /**
     * Toggle GIDLS's CPCH bit.
     */
    inline void toggle_GIDLS_CPCH() volatile
    {
        GIDLS ^= 1u << 10u;
    }

    /**
     * Set GIDLS's PSIC bit.
     */
    inline void set_GIDLS_PSIC() volatile
    {
        GIDLS |= 1u << 9u;
    }

    /**
     * Clear GIDLS's PSIC bit.
     */
    inline void clear_GIDLS_PSIC() volatile
    {
        GIDLS &= ~(1u << 9u);
    }

    /**
     * Toggle GIDLS's PSIC bit.
     */
    inline void toggle_GIDLS_PSIC() volatile
    {
        GIDLS ^= 1u << 9u;
    }

    /**
     * Set GIDLS's CPRB bit.
     */
    inline void set_GIDLS_CPRB() volatile
    {
        GIDLS |= 1u << 8u;
    }

    /**
     * Clear GIDLS's CPRB bit.
     */
    inline void clear_GIDLS_CPRB() volatile
    {
        GIDLS &= ~(1u << 8u);
    }

    /**
     * Toggle GIDLS's CPRB bit.
     */
    inline void toggle_GIDLS_CPRB() volatile
    {
        GIDLS ^= 1u << 8u;
    }

    /**
     * Set GIDLS's SS3I bit.
     */
    inline void set_GIDLS_SS3I() volatile
    {
        GIDLS |= 1u << 3u;
    }

    /**
     * Clear GIDLS's SS3I bit.
     */
    inline void clear_GIDLS_SS3I() volatile
    {
        GIDLS &= ~(1u << 3u);
    }

    /**
     * Toggle GIDLS's SS3I bit.
     */
    inline void toggle_GIDLS_SS3I() volatile
    {
        GIDLS ^= 1u << 3u;
    }

    /**
     * Set GIDLS's SS2I bit.
     */
    inline void set_GIDLS_SS2I() volatile
    {
        GIDLS |= 1u << 2u;
    }

    /**
     * Clear GIDLS's SS2I bit.
     */
    inline void clear_GIDLS_SS2I() volatile
    {
        GIDLS &= ~(1u << 2u);
    }

    /**
     * Toggle GIDLS's SS2I bit.
     */
    inline void toggle_GIDLS_SS2I() volatile
    {
        GIDLS ^= 1u << 2u;
    }

    /**
     * Set GIDLS's SS1I bit.
     */
    inline void set_GIDLS_SS1I() volatile
    {
        GIDLS |= 1u << 1u;
    }

    /**
     * Clear GIDLS's SS1I bit.
     */
    inline void clear_GIDLS_SS1I() volatile
    {
        GIDLS &= ~(1u << 1u);
    }

    /**
     * Toggle GIDLS's SS1I bit.
     */
    inline void toggle_GIDLS_SS1I() volatile
    {
        GIDLS ^= 1u << 1u;
    }

    /**
     * Set GIDLS's SS0I bit.
     */
    inline void set_GIDLS_SS0I() volatile
    {
        GIDLS |= 1u << 0u;
    }

    /**
     * Clear GIDLS's SS0I bit.
     */
    inline void clear_GIDLS_SS0I() volatile
    {
        GIDLS &= ~(1u << 0u);
    }

    /**
     * Toggle GIDLS's SS0I bit.
     */
    inline void toggle_GIDLS_SS0I() volatile
    {
        GIDLS ^= 1u << 0u;
    }

    /**
     * Set all of GIDLS's bit fields.
     */
    inline void set_GIDLS(bool CPCH, bool PSIC, bool CPRB, bool SS3I,
                          bool SS2I, bool SS1I, bool SS0I) volatile
    {
        uint32_t curr = GIDLS;

        curr &= ~(0b1u << 10u);
        curr |= (CPCH & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (PSIC & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (CPRB & 0b1u) << 8u;
        curr &= ~(0b1u << 3u);
        curr |= (SS3I & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SS2I & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SS1I & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SS0I & 0b1u) << 0u;

        GIDLS = curr;
    }

    /**
     * Set GIDLC's SPCH bit.
     */
    inline void set_GIDLC_SPCH() volatile
    {
        GIDLC |= 1u << 10u;
    }

    /**
     * Clear GIDLC's SPCH bit.
     */
    inline void clear_GIDLC_SPCH() volatile
    {
        GIDLC &= ~(1u << 10u);
    }

    /**
     * Toggle GIDLC's SPCH bit.
     */
    inline void toggle_GIDLC_SPCH() volatile
    {
        GIDLC ^= 1u << 10u;
    }

    /**
     * Set GIDLC's SPRB bit.
     */
    inline void set_GIDLC_SPRB() volatile
    {
        GIDLC |= 1u << 8u;
    }

    /**
     * Clear GIDLC's SPRB bit.
     */
    inline void clear_GIDLC_SPRB() volatile
    {
        GIDLC &= ~(1u << 8u);
    }

    /**
     * Toggle GIDLC's SPRB bit.
     */
    inline void toggle_GIDLC_SPRB() volatile
    {
        GIDLC ^= 1u << 8u;
    }

    /**
     * Set GIDLC's CS3I bit.
     */
    inline void set_GIDLC_CS3I() volatile
    {
        GIDLC |= 1u << 3u;
    }

    /**
     * Clear GIDLC's CS3I bit.
     */
    inline void clear_GIDLC_CS3I() volatile
    {
        GIDLC &= ~(1u << 3u);
    }

    /**
     * Toggle GIDLC's CS3I bit.
     */
    inline void toggle_GIDLC_CS3I() volatile
    {
        GIDLC ^= 1u << 3u;
    }

    /**
     * Set GIDLC's CS2I bit.
     */
    inline void set_GIDLC_CS2I() volatile
    {
        GIDLC |= 1u << 2u;
    }

    /**
     * Clear GIDLC's CS2I bit.
     */
    inline void clear_GIDLC_CS2I() volatile
    {
        GIDLC &= ~(1u << 2u);
    }

    /**
     * Toggle GIDLC's CS2I bit.
     */
    inline void toggle_GIDLC_CS2I() volatile
    {
        GIDLC ^= 1u << 2u;
    }

    /**
     * Set GIDLC's CS1I bit.
     */
    inline void set_GIDLC_CS1I() volatile
    {
        GIDLC |= 1u << 1u;
    }

    /**
     * Clear GIDLC's CS1I bit.
     */
    inline void clear_GIDLC_CS1I() volatile
    {
        GIDLC &= ~(1u << 1u);
    }

    /**
     * Toggle GIDLC's CS1I bit.
     */
    inline void toggle_GIDLC_CS1I() volatile
    {
        GIDLC ^= 1u << 1u;
    }

    /**
     * Set GIDLC's CS0I bit.
     */
    inline void set_GIDLC_CS0I() volatile
    {
        GIDLC |= 1u << 0u;
    }

    /**
     * Clear GIDLC's CS0I bit.
     */
    inline void clear_GIDLC_CS0I() volatile
    {
        GIDLC &= ~(1u << 0u);
    }

    /**
     * Toggle GIDLC's CS0I bit.
     */
    inline void toggle_GIDLC_CS0I() volatile
    {
        GIDLC ^= 1u << 0u;
    }

    /**
     * Set all of GIDLC's bit fields.
     */
    inline void set_GIDLC(bool SPCH, bool SPRB, bool CS3I, bool CS2I,
                          bool CS1I, bool CS0I) volatile
    {
        uint32_t curr = GIDLC;

        curr &= ~(0b1u << 10u);
        curr |= (SPCH & 0b1u) << 10u;
        curr &= ~(0b1u << 8u);
        curr |= (SPRB & 0b1u) << 8u;
        curr &= ~(0b1u << 3u);
        curr |= (CS3I & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CS2I & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CS1I & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CS0I & 0b1u) << 0u;

        GIDLC = curr;
    }

    /**
     * Set GCSS's S3ST2S bit.
     */
    inline void set_GCSS_S3ST2S() volatile
    {
        GCSS |= 1u << 23u;
    }

    /**
     * Clear GCSS's S3ST2S bit.
     */
    inline void clear_GCSS_S3ST2S() volatile
    {
        GCSS &= ~(1u << 23u);
    }

    /**
     * Toggle GCSS's S3ST2S bit.
     */
    inline void toggle_GCSS_S3ST2S() volatile
    {
        GCSS ^= 1u << 23u;
    }

    /**
     * Set GCSS's S2ST2S bit.
     */
    inline void set_GCSS_S2ST2S() volatile
    {
        GCSS |= 1u << 22u;
    }

    /**
     * Clear GCSS's S2ST2S bit.
     */
    inline void clear_GCSS_S2ST2S() volatile
    {
        GCSS &= ~(1u << 22u);
    }

    /**
     * Toggle GCSS's S2ST2S bit.
     */
    inline void toggle_GCSS_S2ST2S() volatile
    {
        GCSS ^= 1u << 22u;
    }

    /**
     * Set GCSS's S1ST2S bit.
     */
    inline void set_GCSS_S1ST2S() volatile
    {
        GCSS |= 1u << 21u;
    }

    /**
     * Clear GCSS's S1ST2S bit.
     */
    inline void clear_GCSS_S1ST2S() volatile
    {
        GCSS &= ~(1u << 21u);
    }

    /**
     * Toggle GCSS's S1ST2S bit.
     */
    inline void toggle_GCSS_S1ST2S() volatile
    {
        GCSS ^= 1u << 21u;
    }

    /**
     * Set GCSS's S0ST2S bit.
     */
    inline void set_GCSS_S0ST2S() volatile
    {
        GCSS |= 1u << 20u;
    }

    /**
     * Clear GCSS's S0ST2S bit.
     */
    inline void clear_GCSS_S0ST2S() volatile
    {
        GCSS &= ~(1u << 20u);
    }

    /**
     * Toggle GCSS's S0ST2S bit.
     */
    inline void toggle_GCSS_S0ST2S() volatile
    {
        GCSS ^= 1u << 20u;
    }

    /**
     * Set GCSS's S3ST1S bit.
     */
    inline void set_GCSS_S3ST1S() volatile
    {
        GCSS |= 1u << 19u;
    }

    /**
     * Clear GCSS's S3ST1S bit.
     */
    inline void clear_GCSS_S3ST1S() volatile
    {
        GCSS &= ~(1u << 19u);
    }

    /**
     * Toggle GCSS's S3ST1S bit.
     */
    inline void toggle_GCSS_S3ST1S() volatile
    {
        GCSS ^= 1u << 19u;
    }

    /**
     * Set GCSS's S2ST1S bit.
     */
    inline void set_GCSS_S2ST1S() volatile
    {
        GCSS |= 1u << 18u;
    }

    /**
     * Clear GCSS's S2ST1S bit.
     */
    inline void clear_GCSS_S2ST1S() volatile
    {
        GCSS &= ~(1u << 18u);
    }

    /**
     * Toggle GCSS's S2ST1S bit.
     */
    inline void toggle_GCSS_S2ST1S() volatile
    {
        GCSS ^= 1u << 18u;
    }

    /**
     * Set GCSS's S1ST1S bit.
     */
    inline void set_GCSS_S1ST1S() volatile
    {
        GCSS |= 1u << 17u;
    }

    /**
     * Clear GCSS's S1ST1S bit.
     */
    inline void clear_GCSS_S1ST1S() volatile
    {
        GCSS &= ~(1u << 17u);
    }

    /**
     * Toggle GCSS's S1ST1S bit.
     */
    inline void toggle_GCSS_S1ST1S() volatile
    {
        GCSS ^= 1u << 17u;
    }

    /**
     * Set GCSS's S0ST1S bit.
     */
    inline void set_GCSS_S0ST1S() volatile
    {
        GCSS |= 1u << 16u;
    }

    /**
     * Clear GCSS's S0ST1S bit.
     */
    inline void clear_GCSS_S0ST1S() volatile
    {
        GCSS &= ~(1u << 16u);
    }

    /**
     * Toggle GCSS's S0ST1S bit.
     */
    inline void toggle_GCSS_S0ST1S() volatile
    {
        GCSS ^= 1u << 16u;
    }

    /**
     * Set GCSS's S3PSE bit.
     */
    inline void set_GCSS_S3PSE() volatile
    {
        GCSS |= 1u << 14u;
    }

    /**
     * Clear GCSS's S3PSE bit.
     */
    inline void clear_GCSS_S3PSE() volatile
    {
        GCSS &= ~(1u << 14u);
    }

    /**
     * Toggle GCSS's S3PSE bit.
     */
    inline void toggle_GCSS_S3PSE() volatile
    {
        GCSS ^= 1u << 14u;
    }

    /**
     * Set GCSS's S3DSE bit.
     */
    inline void set_GCSS_S3DSE() volatile
    {
        GCSS |= 1u << 13u;
    }

    /**
     * Clear GCSS's S3DSE bit.
     */
    inline void clear_GCSS_S3DSE() volatile
    {
        GCSS &= ~(1u << 13u);
    }

    /**
     * Toggle GCSS's S3DSE bit.
     */
    inline void toggle_GCSS_S3DSE() volatile
    {
        GCSS ^= 1u << 13u;
    }

    /**
     * Set GCSS's S3SE bit.
     */
    inline void set_GCSS_S3SE() volatile
    {
        GCSS |= 1u << 12u;
    }

    /**
     * Clear GCSS's S3SE bit.
     */
    inline void clear_GCSS_S3SE() volatile
    {
        GCSS &= ~(1u << 12u);
    }

    /**
     * Toggle GCSS's S3SE bit.
     */
    inline void toggle_GCSS_S3SE() volatile
    {
        GCSS ^= 1u << 12u;
    }

    /**
     * Set GCSS's S2PSE bit.
     */
    inline void set_GCSS_S2PSE() volatile
    {
        GCSS |= 1u << 10u;
    }

    /**
     * Clear GCSS's S2PSE bit.
     */
    inline void clear_GCSS_S2PSE() volatile
    {
        GCSS &= ~(1u << 10u);
    }

    /**
     * Toggle GCSS's S2PSE bit.
     */
    inline void toggle_GCSS_S2PSE() volatile
    {
        GCSS ^= 1u << 10u;
    }

    /**
     * Set GCSS's S2DSE bit.
     */
    inline void set_GCSS_S2DSE() volatile
    {
        GCSS |= 1u << 9u;
    }

    /**
     * Clear GCSS's S2DSE bit.
     */
    inline void clear_GCSS_S2DSE() volatile
    {
        GCSS &= ~(1u << 9u);
    }

    /**
     * Toggle GCSS's S2DSE bit.
     */
    inline void toggle_GCSS_S2DSE() volatile
    {
        GCSS ^= 1u << 9u;
    }

    /**
     * Set GCSS's S2SE bit.
     */
    inline void set_GCSS_S2SE() volatile
    {
        GCSS |= 1u << 8u;
    }

    /**
     * Clear GCSS's S2SE bit.
     */
    inline void clear_GCSS_S2SE() volatile
    {
        GCSS &= ~(1u << 8u);
    }

    /**
     * Toggle GCSS's S2SE bit.
     */
    inline void toggle_GCSS_S2SE() volatile
    {
        GCSS ^= 1u << 8u;
    }

    /**
     * Set GCSS's S1PSE bit.
     */
    inline void set_GCSS_S1PSE() volatile
    {
        GCSS |= 1u << 6u;
    }

    /**
     * Clear GCSS's S1PSE bit.
     */
    inline void clear_GCSS_S1PSE() volatile
    {
        GCSS &= ~(1u << 6u);
    }

    /**
     * Toggle GCSS's S1PSE bit.
     */
    inline void toggle_GCSS_S1PSE() volatile
    {
        GCSS ^= 1u << 6u;
    }

    /**
     * Set GCSS's S1DSE bit.
     */
    inline void set_GCSS_S1DSE() volatile
    {
        GCSS |= 1u << 5u;
    }

    /**
     * Clear GCSS's S1DSE bit.
     */
    inline void clear_GCSS_S1DSE() volatile
    {
        GCSS &= ~(1u << 5u);
    }

    /**
     * Toggle GCSS's S1DSE bit.
     */
    inline void toggle_GCSS_S1DSE() volatile
    {
        GCSS ^= 1u << 5u;
    }

    /**
     * Set GCSS's S1SE bit.
     */
    inline void set_GCSS_S1SE() volatile
    {
        GCSS |= 1u << 4u;
    }

    /**
     * Clear GCSS's S1SE bit.
     */
    inline void clear_GCSS_S1SE() volatile
    {
        GCSS &= ~(1u << 4u);
    }

    /**
     * Toggle GCSS's S1SE bit.
     */
    inline void toggle_GCSS_S1SE() volatile
    {
        GCSS ^= 1u << 4u;
    }

    /**
     * Set GCSS's S0PSE bit.
     */
    inline void set_GCSS_S0PSE() volatile
    {
        GCSS |= 1u << 2u;
    }

    /**
     * Clear GCSS's S0PSE bit.
     */
    inline void clear_GCSS_S0PSE() volatile
    {
        GCSS &= ~(1u << 2u);
    }

    /**
     * Toggle GCSS's S0PSE bit.
     */
    inline void toggle_GCSS_S0PSE() volatile
    {
        GCSS ^= 1u << 2u;
    }

    /**
     * Set GCSS's S0DSE bit.
     */
    inline void set_GCSS_S0DSE() volatile
    {
        GCSS |= 1u << 1u;
    }

    /**
     * Clear GCSS's S0DSE bit.
     */
    inline void clear_GCSS_S0DSE() volatile
    {
        GCSS &= ~(1u << 1u);
    }

    /**
     * Toggle GCSS's S0DSE bit.
     */
    inline void toggle_GCSS_S0DSE() volatile
    {
        GCSS ^= 1u << 1u;
    }

    /**
     * Set GCSS's S0SE bit.
     */
    inline void set_GCSS_S0SE() volatile
    {
        GCSS |= 1u << 0u;
    }

    /**
     * Clear GCSS's S0SE bit.
     */
    inline void clear_GCSS_S0SE() volatile
    {
        GCSS &= ~(1u << 0u);
    }

    /**
     * Toggle GCSS's S0SE bit.
     */
    inline void toggle_GCSS_S0SE() volatile
    {
        GCSS ^= 1u << 0u;
    }

    /**
     * Set all of GCSS's bit fields.
     */
    inline void set_GCSS(bool S3ST2S, bool S2ST2S, bool S1ST2S, bool S0ST2S,
                         bool S3ST1S, bool S2ST1S, bool S1ST1S, bool S0ST1S,
                         bool S3PSE, bool S3DSE, bool S3SE, bool S2PSE,
                         bool S2DSE, bool S2SE, bool S1PSE, bool S1DSE,
                         bool S1SE, bool S0PSE, bool S0DSE, bool S0SE) volatile
    {
        uint32_t curr = GCSS;

        curr &= ~(0b1u << 23u);
        curr |= (S3ST2S & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (S2ST2S & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (S1ST2S & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (S0ST2S & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (S3ST1S & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (S2ST1S & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (S1ST1S & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (S0ST1S & 0b1u) << 16u;
        curr &= ~(0b1u << 14u);
        curr |= (S3PSE & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (S3DSE & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (S3SE & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (S2PSE & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (S2DSE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (S2SE & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (S1PSE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (S1DSE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (S1SE & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (S0PSE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (S0DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (S0SE & 0b1u) << 0u;

        GCSS = curr;
    }

    /**
     * Set GCSC's S3ST2C bit.
     */
    inline void set_GCSC_S3ST2C() volatile
    {
        GCSC |= 1u << 23u;
    }

    /**
     * Clear GCSC's S3ST2C bit.
     */
    inline void clear_GCSC_S3ST2C() volatile
    {
        GCSC &= ~(1u << 23u);
    }

    /**
     * Toggle GCSC's S3ST2C bit.
     */
    inline void toggle_GCSC_S3ST2C() volatile
    {
        GCSC ^= 1u << 23u;
    }

    /**
     * Set GCSC's S2ST2C bit.
     */
    inline void set_GCSC_S2ST2C() volatile
    {
        GCSC |= 1u << 22u;
    }

    /**
     * Clear GCSC's S2ST2C bit.
     */
    inline void clear_GCSC_S2ST2C() volatile
    {
        GCSC &= ~(1u << 22u);
    }

    /**
     * Toggle GCSC's S2ST2C bit.
     */
    inline void toggle_GCSC_S2ST2C() volatile
    {
        GCSC ^= 1u << 22u;
    }

    /**
     * Set GCSC's S1ST2C bit.
     */
    inline void set_GCSC_S1ST2C() volatile
    {
        GCSC |= 1u << 21u;
    }

    /**
     * Clear GCSC's S1ST2C bit.
     */
    inline void clear_GCSC_S1ST2C() volatile
    {
        GCSC &= ~(1u << 21u);
    }

    /**
     * Toggle GCSC's S1ST2C bit.
     */
    inline void toggle_GCSC_S1ST2C() volatile
    {
        GCSC ^= 1u << 21u;
    }

    /**
     * Set GCSC's S0ST2C bit.
     */
    inline void set_GCSC_S0ST2C() volatile
    {
        GCSC |= 1u << 20u;
    }

    /**
     * Clear GCSC's S0ST2C bit.
     */
    inline void clear_GCSC_S0ST2C() volatile
    {
        GCSC &= ~(1u << 20u);
    }

    /**
     * Toggle GCSC's S0ST2C bit.
     */
    inline void toggle_GCSC_S0ST2C() volatile
    {
        GCSC ^= 1u << 20u;
    }

    /**
     * Set GCSC's S3ST1C bit.
     */
    inline void set_GCSC_S3ST1C() volatile
    {
        GCSC |= 1u << 19u;
    }

    /**
     * Clear GCSC's S3ST1C bit.
     */
    inline void clear_GCSC_S3ST1C() volatile
    {
        GCSC &= ~(1u << 19u);
    }

    /**
     * Toggle GCSC's S3ST1C bit.
     */
    inline void toggle_GCSC_S3ST1C() volatile
    {
        GCSC ^= 1u << 19u;
    }

    /**
     * Set GCSC's S2ST1C bit.
     */
    inline void set_GCSC_S2ST1C() volatile
    {
        GCSC |= 1u << 18u;
    }

    /**
     * Clear GCSC's S2ST1C bit.
     */
    inline void clear_GCSC_S2ST1C() volatile
    {
        GCSC &= ~(1u << 18u);
    }

    /**
     * Toggle GCSC's S2ST1C bit.
     */
    inline void toggle_GCSC_S2ST1C() volatile
    {
        GCSC ^= 1u << 18u;
    }

    /**
     * Set GCSC's S1ST1C bit.
     */
    inline void set_GCSC_S1ST1C() volatile
    {
        GCSC |= 1u << 17u;
    }

    /**
     * Clear GCSC's S1ST1C bit.
     */
    inline void clear_GCSC_S1ST1C() volatile
    {
        GCSC &= ~(1u << 17u);
    }

    /**
     * Toggle GCSC's S1ST1C bit.
     */
    inline void toggle_GCSC_S1ST1C() volatile
    {
        GCSC ^= 1u << 17u;
    }

    /**
     * Set GCSC's S0ST1C bit.
     */
    inline void set_GCSC_S0ST1C() volatile
    {
        GCSC |= 1u << 16u;
    }

    /**
     * Clear GCSC's S0ST1C bit.
     */
    inline void clear_GCSC_S0ST1C() volatile
    {
        GCSC &= ~(1u << 16u);
    }

    /**
     * Toggle GCSC's S0ST1C bit.
     */
    inline void toggle_GCSC_S0ST1C() volatile
    {
        GCSC ^= 1u << 16u;
    }

    /**
     * Set GCSC's S3PSC bit.
     */
    inline void set_GCSC_S3PSC() volatile
    {
        GCSC |= 1u << 14u;
    }

    /**
     * Clear GCSC's S3PSC bit.
     */
    inline void clear_GCSC_S3PSC() volatile
    {
        GCSC &= ~(1u << 14u);
    }

    /**
     * Toggle GCSC's S3PSC bit.
     */
    inline void toggle_GCSC_S3PSC() volatile
    {
        GCSC ^= 1u << 14u;
    }

    /**
     * Set GCSC's S3DSC bit.
     */
    inline void set_GCSC_S3DSC() volatile
    {
        GCSC |= 1u << 13u;
    }

    /**
     * Clear GCSC's S3DSC bit.
     */
    inline void clear_GCSC_S3DSC() volatile
    {
        GCSC &= ~(1u << 13u);
    }

    /**
     * Toggle GCSC's S3DSC bit.
     */
    inline void toggle_GCSC_S3DSC() volatile
    {
        GCSC ^= 1u << 13u;
    }

    /**
     * Set GCSC's S3SC bit.
     */
    inline void set_GCSC_S3SC() volatile
    {
        GCSC |= 1u << 12u;
    }

    /**
     * Clear GCSC's S3SC bit.
     */
    inline void clear_GCSC_S3SC() volatile
    {
        GCSC &= ~(1u << 12u);
    }

    /**
     * Toggle GCSC's S3SC bit.
     */
    inline void toggle_GCSC_S3SC() volatile
    {
        GCSC ^= 1u << 12u;
    }

    /**
     * Set GCSC's S2PSC bit.
     */
    inline void set_GCSC_S2PSC() volatile
    {
        GCSC |= 1u << 10u;
    }

    /**
     * Clear GCSC's S2PSC bit.
     */
    inline void clear_GCSC_S2PSC() volatile
    {
        GCSC &= ~(1u << 10u);
    }

    /**
     * Toggle GCSC's S2PSC bit.
     */
    inline void toggle_GCSC_S2PSC() volatile
    {
        GCSC ^= 1u << 10u;
    }

    /**
     * Set GCSC's S2DSC bit.
     */
    inline void set_GCSC_S2DSC() volatile
    {
        GCSC |= 1u << 9u;
    }

    /**
     * Clear GCSC's S2DSC bit.
     */
    inline void clear_GCSC_S2DSC() volatile
    {
        GCSC &= ~(1u << 9u);
    }

    /**
     * Toggle GCSC's S2DSC bit.
     */
    inline void toggle_GCSC_S2DSC() volatile
    {
        GCSC ^= 1u << 9u;
    }

    /**
     * Set GCSC's S2SC bit.
     */
    inline void set_GCSC_S2SC() volatile
    {
        GCSC |= 1u << 8u;
    }

    /**
     * Clear GCSC's S2SC bit.
     */
    inline void clear_GCSC_S2SC() volatile
    {
        GCSC &= ~(1u << 8u);
    }

    /**
     * Toggle GCSC's S2SC bit.
     */
    inline void toggle_GCSC_S2SC() volatile
    {
        GCSC ^= 1u << 8u;
    }

    /**
     * Set GCSC's S1PSC bit.
     */
    inline void set_GCSC_S1PSC() volatile
    {
        GCSC |= 1u << 6u;
    }

    /**
     * Clear GCSC's S1PSC bit.
     */
    inline void clear_GCSC_S1PSC() volatile
    {
        GCSC &= ~(1u << 6u);
    }

    /**
     * Toggle GCSC's S1PSC bit.
     */
    inline void toggle_GCSC_S1PSC() volatile
    {
        GCSC ^= 1u << 6u;
    }

    /**
     * Set GCSC's S1DSC bit.
     */
    inline void set_GCSC_S1DSC() volatile
    {
        GCSC |= 1u << 5u;
    }

    /**
     * Clear GCSC's S1DSC bit.
     */
    inline void clear_GCSC_S1DSC() volatile
    {
        GCSC &= ~(1u << 5u);
    }

    /**
     * Toggle GCSC's S1DSC bit.
     */
    inline void toggle_GCSC_S1DSC() volatile
    {
        GCSC ^= 1u << 5u;
    }

    /**
     * Set GCSC's S1SC bit.
     */
    inline void set_GCSC_S1SC() volatile
    {
        GCSC |= 1u << 4u;
    }

    /**
     * Clear GCSC's S1SC bit.
     */
    inline void clear_GCSC_S1SC() volatile
    {
        GCSC &= ~(1u << 4u);
    }

    /**
     * Toggle GCSC's S1SC bit.
     */
    inline void toggle_GCSC_S1SC() volatile
    {
        GCSC ^= 1u << 4u;
    }

    /**
     * Set GCSC's S0PSC bit.
     */
    inline void set_GCSC_S0PSC() volatile
    {
        GCSC |= 1u << 2u;
    }

    /**
     * Clear GCSC's S0PSC bit.
     */
    inline void clear_GCSC_S0PSC() volatile
    {
        GCSC &= ~(1u << 2u);
    }

    /**
     * Toggle GCSC's S0PSC bit.
     */
    inline void toggle_GCSC_S0PSC() volatile
    {
        GCSC ^= 1u << 2u;
    }

    /**
     * Set GCSC's S0DSC bit.
     */
    inline void set_GCSC_S0DSC() volatile
    {
        GCSC |= 1u << 1u;
    }

    /**
     * Clear GCSC's S0DSC bit.
     */
    inline void clear_GCSC_S0DSC() volatile
    {
        GCSC &= ~(1u << 1u);
    }

    /**
     * Toggle GCSC's S0DSC bit.
     */
    inline void toggle_GCSC_S0DSC() volatile
    {
        GCSC ^= 1u << 1u;
    }

    /**
     * Set GCSC's S0SC bit.
     */
    inline void set_GCSC_S0SC() volatile
    {
        GCSC |= 1u << 0u;
    }

    /**
     * Clear GCSC's S0SC bit.
     */
    inline void clear_GCSC_S0SC() volatile
    {
        GCSC &= ~(1u << 0u);
    }

    /**
     * Toggle GCSC's S0SC bit.
     */
    inline void toggle_GCSC_S0SC() volatile
    {
        GCSC ^= 1u << 0u;
    }

    /**
     * Set all of GCSC's bit fields.
     */
    inline void set_GCSC(bool S3ST2C, bool S2ST2C, bool S1ST2C, bool S0ST2C,
                         bool S3ST1C, bool S2ST1C, bool S1ST1C, bool S0ST1C,
                         bool S3PSC, bool S3DSC, bool S3SC, bool S2PSC,
                         bool S2DSC, bool S2SC, bool S1PSC, bool S1DSC,
                         bool S1SC, bool S0PSC, bool S0DSC, bool S0SC) volatile
    {
        uint32_t curr = GCSC;

        curr &= ~(0b1u << 23u);
        curr |= (S3ST2C & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (S2ST2C & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (S1ST2C & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (S0ST2C & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (S3ST1C & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (S2ST1C & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (S1ST1C & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (S0ST1C & 0b1u) << 16u;
        curr &= ~(0b1u << 14u);
        curr |= (S3PSC & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (S3DSC & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (S3SC & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (S2PSC & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (S2DSC & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (S2SC & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (S1PSC & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (S1DSC & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (S1SC & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (S0PSC & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (S0DSC & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (S0SC & 0b1u) << 0u;

        GCSC = curr;
    }

    /**
     * Get GCST's CC83ST2 bit.
     */
    inline bool get_GCST_CC83ST2() volatile
    {
        return GCST & (1u << 23u);
    }

    /**
     * Get GCST's CC82ST2 bit.
     */
    inline bool get_GCST_CC82ST2() volatile
    {
        return GCST & (1u << 22u);
    }

    /**
     * Get GCST's CC81ST2 bit.
     */
    inline bool get_GCST_CC81ST2() volatile
    {
        return GCST & (1u << 21u);
    }

    /**
     * Get GCST's CC80ST2 bit.
     */
    inline bool get_GCST_CC80ST2() volatile
    {
        return GCST & (1u << 20u);
    }

    /**
     * Get GCST's CC83ST1 bit.
     */
    inline bool get_GCST_CC83ST1() volatile
    {
        return GCST & (1u << 19u);
    }

    /**
     * Get GCST's CC82ST1 bit.
     */
    inline bool get_GCST_CC82ST1() volatile
    {
        return GCST & (1u << 18u);
    }

    /**
     * Get GCST's CC81ST1 bit.
     */
    inline bool get_GCST_CC81ST1() volatile
    {
        return GCST & (1u << 17u);
    }

    /**
     * Get GCST's CC80ST1 bit.
     */
    inline bool get_GCST_CC80ST1() volatile
    {
        return GCST & (1u << 16u);
    }

    /**
     * Get GCST's S3PSS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S3PSS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 14u));
    }

    /**
     * Get GCST's S3DSS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S3DSS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 13u));
    }

    /**
     * Get GCST's S3SS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S3SS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 12u));
    }

    /**
     * Get GCST's S2PSS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S2PSS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 10u));
    }

    /**
     * Get GCST's S2DSS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S2DSS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 9u));
    }

    /**
     * Get GCST's S2SS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S2SS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 8u));
    }

    /**
     * Get GCST's S1PSS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S1PSS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 6u));
    }

    /**
     * Get GCST's S1DSS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S1DSS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 5u));
    }

    /**
     * Get GCST's S1SS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S1SS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 4u));
    }

    /**
     * Get GCST's S0PSS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S0PSS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 2u));
    }

    /**
     * Get GCST's S0DSS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S0DSS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 1u));
    }

    /**
     * Get GCST's S0SS bit.
     */
    inline CCU80_GCST_S3PSS get_GCST_S0SS() volatile
    {
        return CCU80_GCST_S3PSS(GCST & (1u << 0u));
    }

    /**
     * Get all of GCST's bit fields.
     */
    inline void get_GCST(bool &CC83ST2, bool &CC82ST2, bool &CC81ST2,
                         bool &CC80ST2, bool &CC83ST1, bool &CC82ST1,
                         bool &CC81ST1, bool &CC80ST1, CCU80_GCST_S3PSS &S3PSS,
                         CCU80_GCST_S3PSS &S3DSS, CCU80_GCST_S3PSS &S3SS,
                         CCU80_GCST_S3PSS &S2PSS, CCU80_GCST_S3PSS &S2DSS,
                         CCU80_GCST_S3PSS &S2SS, CCU80_GCST_S3PSS &S1PSS,
                         CCU80_GCST_S3PSS &S1DSS, CCU80_GCST_S3PSS &S1SS,
                         CCU80_GCST_S3PSS &S0PSS, CCU80_GCST_S3PSS &S0DSS,
                         CCU80_GCST_S3PSS &S0SS) volatile
    {
        uint32_t curr = GCST;

        CC83ST2 = curr & (1u << 23u);
        CC82ST2 = curr & (1u << 22u);
        CC81ST2 = curr & (1u << 21u);
        CC80ST2 = curr & (1u << 20u);
        CC83ST1 = curr & (1u << 19u);
        CC82ST1 = curr & (1u << 18u);
        CC81ST1 = curr & (1u << 17u);
        CC80ST1 = curr & (1u << 16u);
        S3PSS = CCU80_GCST_S3PSS(curr & (1u << 14u));
        S3DSS = CCU80_GCST_S3PSS(curr & (1u << 13u));
        S3SS = CCU80_GCST_S3PSS(curr & (1u << 12u));
        S2PSS = CCU80_GCST_S3PSS(curr & (1u << 10u));
        S2DSS = CCU80_GCST_S3PSS(curr & (1u << 9u));
        S2SS = CCU80_GCST_S3PSS(curr & (1u << 8u));
        S1PSS = CCU80_GCST_S3PSS(curr & (1u << 6u));
        S1DSS = CCU80_GCST_S3PSS(curr & (1u << 5u));
        S1SS = CCU80_GCST_S3PSS(curr & (1u << 4u));
        S0PSS = CCU80_GCST_S3PSS(curr & (1u << 2u));
        S0DSS = CCU80_GCST_S3PSS(curr & (1u << 1u));
        S0SS = CCU80_GCST_S3PSS(curr & (1u << 0u));
    }

    /**
     * Get GPCHK's PCSEL3 field.
     */
    inline uint8_t get_GPCHK_PCSEL3() volatile
    {
        return (GPCHK >> 28u) & 0b1111u;
    }

    /**
     * Set GPCHK's PCSEL3 field.
     */
    inline void set_GPCHK_PCSEL3(uint8_t value) volatile
    {
        uint32_t curr = GPCHK;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        GPCHK = curr;
    }

    /**
     * Get GPCHK's PCSEL2 field.
     */
    inline uint8_t get_GPCHK_PCSEL2() volatile
    {
        return (GPCHK >> 24u) & 0b1111u;
    }

    /**
     * Set GPCHK's PCSEL2 field.
     */
    inline void set_GPCHK_PCSEL2(uint8_t value) volatile
    {
        uint32_t curr = GPCHK;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        GPCHK = curr;
    }

    /**
     * Get GPCHK's PCSEL1 field.
     */
    inline uint8_t get_GPCHK_PCSEL1() volatile
    {
        return (GPCHK >> 20u) & 0b1111u;
    }

    /**
     * Set GPCHK's PCSEL1 field.
     */
    inline void set_GPCHK_PCSEL1(uint8_t value) volatile
    {
        uint32_t curr = GPCHK;

        curr &= ~(0b1111u << 20u);
        curr |= (value & 0b1111u) << 20u;

        GPCHK = curr;
    }

    /**
     * Get GPCHK's PCSEL0 field.
     */
    inline uint8_t get_GPCHK_PCSEL0() volatile
    {
        return (GPCHK >> 16u) & 0b1111u;
    }

    /**
     * Set GPCHK's PCSEL0 field.
     */
    inline void set_GPCHK_PCSEL0(uint8_t value) volatile
    {
        uint32_t curr = GPCHK;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        GPCHK = curr;
    }

    /**
     * Get GPCHK's PCST bit.
     */
    inline bool get_GPCHK_PCST() volatile
    {
        return GPCHK & (1u << 15u);
    }

    /**
     * Get GPCHK's PCTS bit.
     */
    inline CCU80_GPCHK_PCTS get_GPCHK_PCTS() volatile
    {
        return CCU80_GPCHK_PCTS(GPCHK & (1u << 7u));
    }

    /**
     * Set GPCHK's PCTS bit.
     */
    inline void set_GPCHK_PCTS() volatile
    {
        GPCHK |= 1u << 7u;
    }

    /**
     * Clear GPCHK's PCTS bit.
     */
    inline void clear_GPCHK_PCTS() volatile
    {
        GPCHK &= ~(1u << 7u);
    }

    /**
     * Toggle GPCHK's PCTS bit.
     */
    inline void toggle_GPCHK_PCTS() volatile
    {
        GPCHK ^= 1u << 7u;
    }

    /**
     * Get GPCHK's PCDS field.
     */
    inline CCU80_GPCHK_PCDS get_GPCHK_PCDS() volatile
    {
        return CCU80_GPCHK_PCDS((GPCHK >> 5u) & 0b11u);
    }

    /**
     * Set GPCHK's PCDS field.
     */
    inline void set_GPCHK_PCDS(CCU80_GPCHK_PCDS value) volatile
    {
        uint32_t curr = GPCHK;

        curr &= ~(0b11u << 5u);
        curr |= (std::to_underlying(value) & 0b11u) << 5u;

        GPCHK = curr;
    }

    /**
     * Get GPCHK's PISEL field.
     */
    inline CCU80_GPCHK_PISEL get_GPCHK_PISEL() volatile
    {
        return CCU80_GPCHK_PISEL((GPCHK >> 3u) & 0b11u);
    }

    /**
     * Set GPCHK's PISEL field.
     */
    inline void set_GPCHK_PISEL(CCU80_GPCHK_PISEL value) volatile
    {
        uint32_t curr = GPCHK;

        curr &= ~(0b11u << 3u);
        curr |= (std::to_underlying(value) & 0b11u) << 3u;

        GPCHK = curr;
    }

    /**
     * Get GPCHK's PACS field.
     */
    inline CCU80_GPCHK_PACS get_GPCHK_PACS() volatile
    {
        return CCU80_GPCHK_PACS((GPCHK >> 1u) & 0b11u);
    }

    /**
     * Set GPCHK's PACS field.
     */
    inline void set_GPCHK_PACS(CCU80_GPCHK_PACS value) volatile
    {
        uint32_t curr = GPCHK;

        curr &= ~(0b11u << 1u);
        curr |= (std::to_underlying(value) & 0b11u) << 1u;

        GPCHK = curr;
    }

    /**
     * Get GPCHK's PASE bit.
     */
    inline bool get_GPCHK_PASE() volatile
    {
        return GPCHK & (1u << 0u);
    }

    /**
     * Set GPCHK's PASE bit.
     */
    inline void set_GPCHK_PASE() volatile
    {
        GPCHK |= 1u << 0u;
    }

    /**
     * Clear GPCHK's PASE bit.
     */
    inline void clear_GPCHK_PASE() volatile
    {
        GPCHK &= ~(1u << 0u);
    }

    /**
     * Toggle GPCHK's PASE bit.
     */
    inline void toggle_GPCHK_PASE() volatile
    {
        GPCHK ^= 1u << 0u;
    }

    /**
     * Get all of GPCHK's bit fields.
     */
    inline void get_GPCHK(uint8_t &PCSEL3, uint8_t &PCSEL2, uint8_t &PCSEL1,
                          uint8_t &PCSEL0, bool &PCST, CCU80_GPCHK_PCTS &PCTS,
                          CCU80_GPCHK_PCDS &PCDS, CCU80_GPCHK_PISEL &PISEL,
                          CCU80_GPCHK_PACS &PACS, bool &PASE) volatile
    {
        uint32_t curr = GPCHK;

        PCSEL3 = (curr >> 28u) & 0b1111u;
        PCSEL2 = (curr >> 24u) & 0b1111u;
        PCSEL1 = (curr >> 20u) & 0b1111u;
        PCSEL0 = (curr >> 16u) & 0b1111u;
        PCST = curr & (1u << 15u);
        PCTS = CCU80_GPCHK_PCTS(curr & (1u << 7u));
        PCDS = CCU80_GPCHK_PCDS((curr >> 5u) & 0b11u);
        PISEL = CCU80_GPCHK_PISEL((curr >> 3u) & 0b11u);
        PACS = CCU80_GPCHK_PACS((curr >> 1u) & 0b11u);
        PASE = curr & (1u << 0u);
    }

    /**
     * Set all of GPCHK's bit fields.
     */
    inline void set_GPCHK(uint8_t PCSEL3, uint8_t PCSEL2, uint8_t PCSEL1,
                          uint8_t PCSEL0, CCU80_GPCHK_PCTS PCTS,
                          CCU80_GPCHK_PCDS PCDS, CCU80_GPCHK_PISEL PISEL,
                          CCU80_GPCHK_PACS PACS, bool PASE) volatile
    {
        uint32_t curr = GPCHK;

        curr &= ~(0b1111u << 28u);
        curr |= (PCSEL3 & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (PCSEL2 & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (PCSEL1 & 0b1111u) << 20u;
        curr &= ~(0b1111u << 16u);
        curr |= (PCSEL0 & 0b1111u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(PCTS) & 0b1u) << 7u;
        curr &= ~(0b11u << 5u);
        curr |= (std::to_underlying(PCDS) & 0b11u) << 5u;
        curr &= ~(0b11u << 3u);
        curr |= (std::to_underlying(PISEL) & 0b11u) << 3u;
        curr &= ~(0b11u << 1u);
        curr |= (std::to_underlying(PACS) & 0b11u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (PASE & 0b1u) << 0u;

        GPCHK = curr;
    }

    /**
     * Get MIDR's MODN field.
     */
    inline uint16_t get_MIDR_MODN() volatile
    {
        return (MIDR >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get MIDR's MODT field.
     */
    inline uint8_t get_MIDR_MODT() volatile
    {
        return (MIDR >> 8u) & 0b11111111u;
    }

    /**
     * Get MIDR's MODR field.
     */
    inline uint8_t get_MIDR_MODR() volatile
    {
        return (MIDR >> 0u) & 0b11111111u;
    }

    /**
     * Get all of MIDR's bit fields.
     */
    inline void get_MIDR(uint16_t &MODN, uint8_t &MODT, uint8_t &MODR) volatile
    {
        uint32_t curr = MIDR;

        MODN = (curr >> 16u) & 0b1111111111111111u;
        MODT = (curr >> 8u) & 0b11111111u;
        MODR = (curr >> 0u) & 0b11111111u;
    }
};

static_assert(sizeof(ccu80) == ccu80::size);

static volatile ccu80 *const CCU80 = reinterpret_cast<ccu80 *>(0x40020000);

static volatile ccu80 *const CCU81 = reinterpret_cast<ccu80 *>(0x40024000);

}; // namespace XMC4700
