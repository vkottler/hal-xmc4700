/**
 * \file
 * \brief Generated by ifgen (2.6.2).
 */
#pragma once

#include "../enums/PPB_AIRCR_ENDIANNESS.h"
#include "../enums/PPB_AIRCR_SYSRESETREQ.h"
#include "../enums/PPB_CCR_BFHFNMIGN.h"
#include "../enums/PPB_CCR_DIV_0_TRP.h"
#include "../enums/PPB_CCR_NONBASETHRDENA.h"
#include "../enums/PPB_CCR_STKALIGN.h"
#include "../enums/PPB_CCR_UNALIGN_TRP.h"
#include "../enums/PPB_CCR_USERSETMPEND.h"
#include "../enums/PPB_CFSR_BFARVALID.h"
#include "../enums/PPB_CFSR_DACCVIOL.h"
#include "../enums/PPB_CFSR_DIVBYZERO.h"
#include "../enums/PPB_CFSR_IACCVIOL.h"
#include "../enums/PPB_CFSR_IBUSERR.h"
#include "../enums/PPB_CFSR_IMPRECISERR.h"
#include "../enums/PPB_CFSR_INVPC.h"
#include "../enums/PPB_CFSR_INVSTATE.h"
#include "../enums/PPB_CFSR_LSPERR.h"
#include "../enums/PPB_CFSR_MLSPERR.h"
#include "../enums/PPB_CFSR_MMARVALID.h"
#include "../enums/PPB_CFSR_MSTKERR.h"
#include "../enums/PPB_CFSR_MUNSTKERR.h"
#include "../enums/PPB_CFSR_NOCP.h"
#include "../enums/PPB_CFSR_PRECISERR.h"
#include "../enums/PPB_CFSR_STKERR.h"
#include "../enums/PPB_CFSR_UNALIGNED.h"
#include "../enums/PPB_CFSR_UNDEFINSTR.h"
#include "../enums/PPB_CFSR_UNSTKERR.h"
#include "../enums/PPB_CPACR_CP10.h"
#include "../enums/PPB_CPACR_CP11.h"
#include "../enums/PPB_CPUID_Implementer.h"
#include "../enums/PPB_CPUID_PartNo.h"
#include "../enums/PPB_CPUID_Revision.h"
#include "../enums/PPB_CPUID_Variant.h"
#include "../enums/PPB_FPCCR_ASPEN.h"
#include "../enums/PPB_FPCCR_BFRDY.h"
#include "../enums/PPB_FPCCR_HFRDY.h"
#include "../enums/PPB_FPCCR_LSPACT.h"
#include "../enums/PPB_FPCCR_LSPEN.h"
#include "../enums/PPB_FPCCR_MMRDY.h"
#include "../enums/PPB_FPCCR_MONRDY.h"
#include "../enums/PPB_FPCCR_THREAD.h"
#include "../enums/PPB_FPCCR_USER.h"
#include "../enums/PPB_HFSR_FORCED.h"
#include "../enums/PPB_HFSR_VECTTBL.h"
#include "../enums/PPB_ICSR_ISRPENDING.h"
#include "../enums/PPB_ICSR_PENDSTCLR.h"
#include "../enums/PPB_ICSR_PENDSTSET.h"
#include "../enums/PPB_ICSR_PENDSVCLR.h"
#include "../enums/PPB_ICSR_RETTOBASE.h"
#include "../enums/PPB_ICSR_VECTACTIVE.h"
#include "../enums/PPB_ICSR_VECTPENDING.h"
#include "../enums/PPB_MPU_CTRL_ENABLE.h"
#include "../enums/PPB_MPU_CTRL_HFNMIENA.h"
#include "../enums/PPB_MPU_CTRL_PRIVDEFENA.h"
#include "../enums/PPB_MPU_RASR_A1_SRD.h"
#include "../enums/PPB_MPU_RASR_A1_XN.h"
#include "../enums/PPB_MPU_RASR_A2_SRD.h"
#include "../enums/PPB_MPU_RASR_A2_XN.h"
#include "../enums/PPB_MPU_RASR_A3_SRD.h"
#include "../enums/PPB_MPU_RASR_A3_XN.h"
#include "../enums/PPB_MPU_RASR_SRD.h"
#include "../enums/PPB_MPU_RASR_XN.h"
#include "../enums/PPB_MPU_RBAR_A1_VALID.h"
#include "../enums/PPB_MPU_RBAR_A2_VALID.h"
#include "../enums/PPB_MPU_RBAR_A3_VALID.h"
#include "../enums/PPB_MPU_RBAR_VALID.h"
#include "../enums/PPB_NVIC_IABR0_ACTIVE.h"
#include "../enums/PPB_NVIC_IABR1_ACTIVE.h"
#include "../enums/PPB_NVIC_IABR2_ACTIVE.h"
#include "../enums/PPB_NVIC_IABR3_ACTIVE.h"
#include "../enums/PPB_NVIC_ICER0_CLRENA.h"
#include "../enums/PPB_NVIC_ICER1_CLRENA.h"
#include "../enums/PPB_NVIC_ICER2_CLRENA.h"
#include "../enums/PPB_NVIC_ICER3_CLRENA.h"
#include "../enums/PPB_NVIC_ICPR0_CLRPEND.h"
#include "../enums/PPB_NVIC_ICPR1_CLRPEND.h"
#include "../enums/PPB_NVIC_ICPR2_CLRPEND.h"
#include "../enums/PPB_NVIC_ICPR3_CLRPEND.h"
#include "../enums/PPB_NVIC_ISER0_SETENA.h"
#include "../enums/PPB_NVIC_ISER1_SETENA.h"
#include "../enums/PPB_NVIC_ISER2_SETENA.h"
#include "../enums/PPB_NVIC_ISER3_SETENA.h"
#include "../enums/PPB_NVIC_ISPR0_SETPEND.h"
#include "../enums/PPB_NVIC_ISPR1_SETPEND.h"
#include "../enums/PPB_NVIC_ISPR2_SETPEND.h"
#include "../enums/PPB_NVIC_ISPR3_SETPEND.h"
#include "../enums/PPB_SCR_SEVONPEND.h"
#include "../enums/PPB_SCR_SLEEPDEEP.h"
#include "../enums/PPB_SCR_SLEEPONEXIT.h"
#include "../enums/PPB_SYST_CALIB_NOREF.h"
#include "../enums/PPB_SYST_CALIB_SKEW.h"
#include "../enums/PPB_SYST_CSR_CLKSOURCE.h"
#include "../enums/PPB_SYST_CSR_ENABLE.h"
#include "../enums/PPB_SYST_CSR_TICKINT.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Cortex-M4 Private Peripheral Block
 */
struct [[gnu::packed]] ppb
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;         /*!< ppb's identifier. */
    static constexpr std::size_t size = 3904; /*!< ppb's size in bytes. */

    /* Fields. */
    static constexpr std::size_t reserved_padding0_length = 2;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t ACTLR;                                                    /*!< (read-write) Auxiliary Control Register */
    const uint32_t reserved_padding1 = {};
    uint32_t SYST_CSR;                                                 /*!< (read-write) SysTick Control and Status Register */
    uint32_t SYST_RVR;                                                 /*!< (read-write) SysTick Reload Value Register */
    uint32_t SYST_CVR;                                                 /*!< (read-write) SysTick Current Value Register */
    uint32_t SYST_CALIB;                                               /*!< (read-write) SysTick Calibration Value Register r */
    static constexpr std::size_t reserved_padding2_length = 56;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t NVIC_ISER0;                                               /*!< (read-write) Interrupt Set-enable Register 0 */
    uint32_t NVIC_ISER1;                                               /*!< (read-write) Interrupt Set-enable Register 1 */
    uint32_t NVIC_ISER2;                                               /*!< (read-write) Interrupt Set-enable Register 2 */
    uint32_t NVIC_ISER3;                                               /*!< (read-write) Interrupt Set-enable Register 3 */
    static constexpr std::size_t reserved_padding3_length = 28;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t NVIC_ICER0;                                               /*!< (read-write) Interrupt Clear-enable Register 0 */
    uint32_t NVIC_ICER1;                                               /*!< (read-write) Interrupt Clear-enable Register 1 */
    uint32_t NVIC_ICER2;                                               /*!< (read-write) Interrupt Clear-enable Register 2 */
    uint32_t NVIC_ICER3;                                               /*!< (read-write) Interrupt Clear-enable Register 3 */
    static constexpr std::size_t reserved_padding4_length = 28;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t NVIC_ISPR0;                                               /*!< (read-write) Interrupt Set-pending Register 0 */
    uint32_t NVIC_ISPR1;                                               /*!< (read-write) Interrupt Set-pending Register 1 */
    uint32_t NVIC_ISPR2;                                               /*!< (read-write) Interrupt Set-pending Register 2 */
    uint32_t NVIC_ISPR3;                                               /*!< (read-write) Interrupt Set-pending Register 3 */
    static constexpr std::size_t reserved_padding5_length = 28;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t NVIC_ICPR0;                                               /*!< (read-write) Interrupt Clear-pending Register 0 */
    uint32_t NVIC_ICPR1;                                               /*!< (read-write) Interrupt Clear-pending Register 1 */
    uint32_t NVIC_ICPR2;                                               /*!< (read-write) Interrupt Clear-pending Register 2 */
    uint32_t NVIC_ICPR3;                                               /*!< (read-write) Interrupt Clear-pending Register 3 */
    static constexpr std::size_t reserved_padding6_length = 28;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t NVIC_IABR0;                                               /*!< (read-write) Interrupt Active Bit Register 0 */
    uint32_t NVIC_IABR1;                                               /*!< (read-write) Interrupt Active Bit Register 1 */
    uint32_t NVIC_IABR2;                                               /*!< (read-write) Interrupt Active Bit Register 2 */
    uint32_t NVIC_IABR3;                                               /*!< (read-write) Interrupt Active Bit Register 3 */
    static constexpr std::size_t reserved_padding7_length = 60;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t NVIC_IPR0;                                                /*!< (read-write) Interrupt Priority Register 0 */
    uint32_t NVIC_IPR1;                                                /*!< (read-write) Interrupt Priority Register 1 */
    uint32_t NVIC_IPR2;                                                /*!< (read-write) Interrupt Priority Register 2 */
    uint32_t NVIC_IPR3;                                                /*!< (read-write) Interrupt Priority Register 3 */
    uint32_t NVIC_IPR4;                                                /*!< (read-write) Interrupt Priority Register 4 */
    uint32_t NVIC_IPR5;                                                /*!< (read-write) Interrupt Priority Register 5 */
    uint32_t NVIC_IPR6;                                                /*!< (read-write) Interrupt Priority Register 6 */
    uint32_t NVIC_IPR7;                                                /*!< (read-write) Interrupt Priority Register 7 */
    uint32_t NVIC_IPR8;                                                /*!< (read-write) Interrupt Priority Register 8 */
    uint32_t NVIC_IPR9;                                                /*!< (read-write) Interrupt Priority Register 9 */
    uint32_t NVIC_IPR10;                                               /*!< (read-write) Interrupt Priority Register 10 */
    uint32_t NVIC_IPR11;                                               /*!< (read-write) Interrupt Priority Register 11 */
    uint32_t NVIC_IPR12;                                               /*!< (read-write) Interrupt Priority Register 12 */
    uint32_t NVIC_IPR13;                                               /*!< (read-write) Interrupt Priority Register 13 */
    uint32_t NVIC_IPR14;                                               /*!< (read-write) Interrupt Priority Register 14 */
    uint32_t NVIC_IPR15;                                               /*!< (read-write) Interrupt Priority Register 15 */
    uint32_t NVIC_IPR16;                                               /*!< (read-write) Interrupt Priority Register 16 */
    uint32_t NVIC_IPR17;                                               /*!< (read-write) Interrupt Priority Register 17 */
    uint32_t NVIC_IPR18;                                               /*!< (read-write) Interrupt Priority Register 18 */
    uint32_t NVIC_IPR19;                                               /*!< (read-write) Interrupt Priority Register 19 */
    uint32_t NVIC_IPR20;                                               /*!< (read-write) Interrupt Priority Register 20 */
    uint32_t NVIC_IPR21;                                               /*!< (read-write) Interrupt Priority Register 21 */
    uint32_t NVIC_IPR22;                                               /*!< (read-write) Interrupt Priority Register 22 */
    uint32_t NVIC_IPR23;                                               /*!< (read-write) Interrupt Priority Register 23 */
    uint32_t NVIC_IPR24;                                               /*!< (read-write) Interrupt Priority Register 24 */
    uint32_t NVIC_IPR25;                                               /*!< (read-write) Interrupt Priority Register 25 */
    uint32_t NVIC_IPR26;                                               /*!< (read-write) Interrupt Priority Register 26 */
    uint32_t NVIC_IPR27;                                               /*!< (read-write) Interrupt Priority Register 27 */
    static constexpr std::size_t reserved_padding8_length = 548;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    const uint32_t CPUID = {};                                         /*!< (read-only) CPUID Base Register */
    uint32_t ICSR;                                                     /*!< (read-write) Interrupt Control and State Register */
    uint32_t VTOR;                                                     /*!< (read-write) Vector Table Offset Register */
    uint32_t AIRCR;                                                    /*!< (read-write) Application Interrupt and Reset Control Register */
    uint32_t SCR;                                                      /*!< (read-write) System Control Register */
    uint32_t CCR;                                                      /*!< (read-write) Configuration and Control Register */
    uint32_t SHPR1;                                                    /*!< (read-write) System Handler Priority Register 1 */
    uint32_t SHPR2;                                                    /*!< (read-write) System Handler Priority Register 2 */
    uint32_t SHPR3;                                                    /*!< (read-write) System Handler Priority Register 3 */
    uint32_t SHCSR;                                                    /*!< (read-write) System Handler Control and State Register */
    uint32_t CFSR;                                                     /*!< (read-write) Configurable Fault Status Register */
    uint32_t HFSR;                                                     /*!< (read-write) HardFault Status Register */
    const uint32_t reserved_padding9 = {};
    uint32_t MMFAR;                                                    /*!< (read-write) MemManage Fault Address Register */
    uint32_t BFAR;                                                     /*!< (read-write) BusFault Address Register */
    uint32_t AFSR;                                                     /*!< (read-write) Auxiliary Fault Status Register */
    static constexpr std::size_t reserved_padding10_length = 18;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t CPACR;                                                    /*!< (read-write) Coprocessor Access Control Register */
    const uint32_t reserved_padding11 = {};
    const uint32_t MPU_TYPE = {};                                      /*!< (read-only) MPU Type Register */
    uint32_t MPU_CTRL;                                                 /*!< (read-write) MPU Control Register */
    uint32_t MPU_RNR;                                                  /*!< (read-write) MPU Region Number Register */
    uint32_t MPU_RBAR;                                                 /*!< (read-write) MPU Region Base Address Register */
    uint32_t MPU_RASR;                                                 /*!< (read-write) MPU Region Attribute and Size Register */
    uint32_t MPU_RBAR_A1;                                              /*!< (read-write) MPU Region Base Address Register A1 */
    uint32_t MPU_RASR_A1;                                              /*!< (read-write) MPU Region Attribute and Size Register A1 */
    uint32_t MPU_RBAR_A2;                                              /*!< (read-write) MPU Region Base Address Register A2 */
    uint32_t MPU_RASR_A2;                                              /*!< (read-write) MPU Region Attribute and Size Register A2 */
    uint32_t MPU_RBAR_A3;                                              /*!< (read-write) MPU Region Base Address Register A3 */
    uint32_t MPU_RASR_A3;                                              /*!< (read-write) MPU Region Attribute and Size Register A3 */
    static constexpr std::size_t reserved_padding12_length = 81;
    const uint32_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t STIR;                                                     /*!< (write-only) Software Trigger Interrupt Register */
    static constexpr std::size_t reserved_padding13_length = 12;
    const uint32_t reserved_padding13[reserved_padding13_length] = {};
    uint32_t FPCCR;                                                    /*!< (read-write) Floating-point Context Control Register */
    uint32_t FPCAR;                                                    /*!< (read-write) Floating-point Context Address Register */
    uint32_t FPDSCR;                                                   /*!< (read-write) Floating-point Default Status Control Register */

    /* Methods. */

    /**
     * Get ACTLR's DISOOFP bit.
     */
    bool get_ACTLR_DISOOFP()
    {
        return ACTLR & (1u << 9u);
    }

    /**
     * Set ACTLR's DISOOFP bit.
     */
    inline void set_ACTLR_DISOOFP()
    {
        ACTLR |= 1u << 9u;
    }

    /**
     * Clear ACTLR's DISOOFP bit.
     */
    inline void clear_ACTLR_DISOOFP()
    {
        ACTLR &= ~(1u << 9u);
    }

    /**
     * Toggle ACTLR's DISOOFP bit.
     */
    inline void toggle_ACTLR_DISOOFP()
    {
        ACTLR ^= 1u << 9u;
    }

    /**
     * Get ACTLR's DISFPCA bit.
     */
    bool get_ACTLR_DISFPCA()
    {
        return ACTLR & (1u << 8u);
    }

    /**
     * Set ACTLR's DISFPCA bit.
     */
    inline void set_ACTLR_DISFPCA()
    {
        ACTLR |= 1u << 8u;
    }

    /**
     * Clear ACTLR's DISFPCA bit.
     */
    inline void clear_ACTLR_DISFPCA()
    {
        ACTLR &= ~(1u << 8u);
    }

    /**
     * Toggle ACTLR's DISFPCA bit.
     */
    inline void toggle_ACTLR_DISFPCA()
    {
        ACTLR ^= 1u << 8u;
    }

    /**
     * Get ACTLR's DISFOLD bit.
     */
    bool get_ACTLR_DISFOLD()
    {
        return ACTLR & (1u << 2u);
    }

    /**
     * Set ACTLR's DISFOLD bit.
     */
    inline void set_ACTLR_DISFOLD()
    {
        ACTLR |= 1u << 2u;
    }

    /**
     * Clear ACTLR's DISFOLD bit.
     */
    inline void clear_ACTLR_DISFOLD()
    {
        ACTLR &= ~(1u << 2u);
    }

    /**
     * Toggle ACTLR's DISFOLD bit.
     */
    inline void toggle_ACTLR_DISFOLD()
    {
        ACTLR ^= 1u << 2u;
    }

    /**
     * Get ACTLR's DISDEFWBUF bit.
     */
    bool get_ACTLR_DISDEFWBUF()
    {
        return ACTLR & (1u << 1u);
    }

    /**
     * Set ACTLR's DISDEFWBUF bit.
     */
    inline void set_ACTLR_DISDEFWBUF()
    {
        ACTLR |= 1u << 1u;
    }

    /**
     * Clear ACTLR's DISDEFWBUF bit.
     */
    inline void clear_ACTLR_DISDEFWBUF()
    {
        ACTLR &= ~(1u << 1u);
    }

    /**
     * Toggle ACTLR's DISDEFWBUF bit.
     */
    inline void toggle_ACTLR_DISDEFWBUF()
    {
        ACTLR ^= 1u << 1u;
    }

    /**
     * Get ACTLR's DISMCYCINT bit.
     */
    bool get_ACTLR_DISMCYCINT()
    {
        return ACTLR & (1u << 0u);
    }

    /**
     * Set ACTLR's DISMCYCINT bit.
     */
    inline void set_ACTLR_DISMCYCINT()
    {
        ACTLR |= 1u << 0u;
    }

    /**
     * Clear ACTLR's DISMCYCINT bit.
     */
    inline void clear_ACTLR_DISMCYCINT()
    {
        ACTLR &= ~(1u << 0u);
    }

    /**
     * Toggle ACTLR's DISMCYCINT bit.
     */
    inline void toggle_ACTLR_DISMCYCINT()
    {
        ACTLR ^= 1u << 0u;
    }

    /**
     * Get SYST_CSR's COUNTFLAG bit.
     */
    bool get_SYST_CSR_COUNTFLAG()
    {
        return SYST_CSR & (1u << 16u);
    }

    /**
     * Set SYST_CSR's COUNTFLAG bit.
     */
    inline void set_SYST_CSR_COUNTFLAG()
    {
        SYST_CSR |= 1u << 16u;
    }

    /**
     * Clear SYST_CSR's COUNTFLAG bit.
     */
    inline void clear_SYST_CSR_COUNTFLAG()
    {
        SYST_CSR &= ~(1u << 16u);
    }

    /**
     * Toggle SYST_CSR's COUNTFLAG bit.
     */
    inline void toggle_SYST_CSR_COUNTFLAG()
    {
        SYST_CSR ^= 1u << 16u;
    }

    /**
     * Get SYST_CSR's CLKSOURCE bit.
     */
    PPB_SYST_CSR_CLKSOURCE get_SYST_CSR_CLKSOURCE()
    {
        return PPB_SYST_CSR_CLKSOURCE(SYST_CSR & (1u << 2u));
    }

    /**
     * Set SYST_CSR's CLKSOURCE bit.
     */
    inline void set_SYST_CSR_CLKSOURCE()
    {
        SYST_CSR |= 1u << 2u;
    }

    /**
     * Clear SYST_CSR's CLKSOURCE bit.
     */
    inline void clear_SYST_CSR_CLKSOURCE()
    {
        SYST_CSR &= ~(1u << 2u);
    }

    /**
     * Toggle SYST_CSR's CLKSOURCE bit.
     */
    inline void toggle_SYST_CSR_CLKSOURCE()
    {
        SYST_CSR ^= 1u << 2u;
    }

    /**
     * Get SYST_CSR's TICKINT bit.
     */
    PPB_SYST_CSR_TICKINT get_SYST_CSR_TICKINT()
    {
        return PPB_SYST_CSR_TICKINT(SYST_CSR & (1u << 1u));
    }

    /**
     * Set SYST_CSR's TICKINT bit.
     */
    inline void set_SYST_CSR_TICKINT()
    {
        SYST_CSR |= 1u << 1u;
    }

    /**
     * Clear SYST_CSR's TICKINT bit.
     */
    inline void clear_SYST_CSR_TICKINT()
    {
        SYST_CSR &= ~(1u << 1u);
    }

    /**
     * Toggle SYST_CSR's TICKINT bit.
     */
    inline void toggle_SYST_CSR_TICKINT()
    {
        SYST_CSR ^= 1u << 1u;
    }

    /**
     * Get SYST_CSR's ENABLE bit.
     */
    PPB_SYST_CSR_ENABLE get_SYST_CSR_ENABLE()
    {
        return PPB_SYST_CSR_ENABLE(SYST_CSR & (1u << 0u));
    }

    /**
     * Set SYST_CSR's ENABLE bit.
     */
    inline void set_SYST_CSR_ENABLE()
    {
        SYST_CSR |= 1u << 0u;
    }

    /**
     * Clear SYST_CSR's ENABLE bit.
     */
    inline void clear_SYST_CSR_ENABLE()
    {
        SYST_CSR &= ~(1u << 0u);
    }

    /**
     * Toggle SYST_CSR's ENABLE bit.
     */
    inline void toggle_SYST_CSR_ENABLE()
    {
        SYST_CSR ^= 1u << 0u;
    }

    /**
     * Get SYST_RVR's RELOAD field.
     */
    uint32_t get_SYST_RVR_RELOAD()
    {
        return (SYST_RVR >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set SYST_RVR's RELOAD field.
     */
    inline void set_SYST_RVR_RELOAD(uint32_t value)
    {
        uint32_t curr = SYST_RVR;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        SYST_RVR = curr;
    }

    /**
     * Get SYST_CVR's CURRENT field.
     */
    uint32_t get_SYST_CVR_CURRENT()
    {
        return (SYST_CVR >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set SYST_CVR's CURRENT field.
     */
    inline void set_SYST_CVR_CURRENT(uint32_t value)
    {
        uint32_t curr = SYST_CVR;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        SYST_CVR = curr;
    }

    /**
     * Get SYST_CALIB's NOREF bit.
     */
    PPB_SYST_CALIB_NOREF get_SYST_CALIB_NOREF()
    {
        return PPB_SYST_CALIB_NOREF(SYST_CALIB & (1u << 31u));
    }

    /**
     * Set SYST_CALIB's NOREF bit.
     */
    inline void set_SYST_CALIB_NOREF()
    {
        SYST_CALIB |= 1u << 31u;
    }

    /**
     * Clear SYST_CALIB's NOREF bit.
     */
    inline void clear_SYST_CALIB_NOREF()
    {
        SYST_CALIB &= ~(1u << 31u);
    }

    /**
     * Toggle SYST_CALIB's NOREF bit.
     */
    inline void toggle_SYST_CALIB_NOREF()
    {
        SYST_CALIB ^= 1u << 31u;
    }

    /**
     * Get SYST_CALIB's SKEW bit.
     */
    PPB_SYST_CALIB_SKEW get_SYST_CALIB_SKEW()
    {
        return PPB_SYST_CALIB_SKEW(SYST_CALIB & (1u << 30u));
    }

    /**
     * Set SYST_CALIB's SKEW bit.
     */
    inline void set_SYST_CALIB_SKEW()
    {
        SYST_CALIB |= 1u << 30u;
    }

    /**
     * Clear SYST_CALIB's SKEW bit.
     */
    inline void clear_SYST_CALIB_SKEW()
    {
        SYST_CALIB &= ~(1u << 30u);
    }

    /**
     * Toggle SYST_CALIB's SKEW bit.
     */
    inline void toggle_SYST_CALIB_SKEW()
    {
        SYST_CALIB ^= 1u << 30u;
    }

    /**
     * Get SYST_CALIB's TENMS field.
     */
    uint32_t get_SYST_CALIB_TENMS()
    {
        return (SYST_CALIB >> 0u) & 0b111111111111111111111111u;
    }

    /**
     * Set SYST_CALIB's TENMS field.
     */
    inline void set_SYST_CALIB_TENMS(uint32_t value)
    {
        uint32_t curr = SYST_CALIB;

        curr &= ~(0b111111111111111111111111u << 0u);
        curr |= (value & 0b111111111111111111111111u) << 0u;

        SYST_CALIB = curr;
    }

    /**
     * Get NVIC_ISER0's SETENA field.
     */
    PPB_NVIC_ISER0_SETENA get_NVIC_ISER0_SETENA()
    {
        return PPB_NVIC_ISER0_SETENA((NVIC_ISER0 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ISER0's SETENA field.
     */
    inline void set_NVIC_ISER0_SETENA(PPB_NVIC_ISER0_SETENA value)
    {
        uint32_t curr = NVIC_ISER0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ISER0 = curr;
    }

    /**
     * Get NVIC_ISER1's SETENA field.
     */
    PPB_NVIC_ISER1_SETENA get_NVIC_ISER1_SETENA()
    {
        return PPB_NVIC_ISER1_SETENA((NVIC_ISER1 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ISER1's SETENA field.
     */
    inline void set_NVIC_ISER1_SETENA(PPB_NVIC_ISER1_SETENA value)
    {
        uint32_t curr = NVIC_ISER1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ISER1 = curr;
    }

    /**
     * Get NVIC_ISER2's SETENA field.
     */
    PPB_NVIC_ISER2_SETENA get_NVIC_ISER2_SETENA()
    {
        return PPB_NVIC_ISER2_SETENA((NVIC_ISER2 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ISER2's SETENA field.
     */
    inline void set_NVIC_ISER2_SETENA(PPB_NVIC_ISER2_SETENA value)
    {
        uint32_t curr = NVIC_ISER2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ISER2 = curr;
    }

    /**
     * Get NVIC_ISER3's SETENA field.
     */
    PPB_NVIC_ISER3_SETENA get_NVIC_ISER3_SETENA()
    {
        return PPB_NVIC_ISER3_SETENA((NVIC_ISER3 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ISER3's SETENA field.
     */
    inline void set_NVIC_ISER3_SETENA(PPB_NVIC_ISER3_SETENA value)
    {
        uint32_t curr = NVIC_ISER3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ISER3 = curr;
    }

    /**
     * Get NVIC_ICER0's CLRENA field.
     */
    PPB_NVIC_ICER0_CLRENA get_NVIC_ICER0_CLRENA()
    {
        return PPB_NVIC_ICER0_CLRENA((NVIC_ICER0 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ICER0's CLRENA field.
     */
    inline void set_NVIC_ICER0_CLRENA(PPB_NVIC_ICER0_CLRENA value)
    {
        uint32_t curr = NVIC_ICER0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ICER0 = curr;
    }

    /**
     * Get NVIC_ICER1's CLRENA field.
     */
    PPB_NVIC_ICER1_CLRENA get_NVIC_ICER1_CLRENA()
    {
        return PPB_NVIC_ICER1_CLRENA((NVIC_ICER1 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ICER1's CLRENA field.
     */
    inline void set_NVIC_ICER1_CLRENA(PPB_NVIC_ICER1_CLRENA value)
    {
        uint32_t curr = NVIC_ICER1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ICER1 = curr;
    }

    /**
     * Get NVIC_ICER2's CLRENA field.
     */
    PPB_NVIC_ICER2_CLRENA get_NVIC_ICER2_CLRENA()
    {
        return PPB_NVIC_ICER2_CLRENA((NVIC_ICER2 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ICER2's CLRENA field.
     */
    inline void set_NVIC_ICER2_CLRENA(PPB_NVIC_ICER2_CLRENA value)
    {
        uint32_t curr = NVIC_ICER2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ICER2 = curr;
    }

    /**
     * Get NVIC_ICER3's CLRENA field.
     */
    PPB_NVIC_ICER3_CLRENA get_NVIC_ICER3_CLRENA()
    {
        return PPB_NVIC_ICER3_CLRENA((NVIC_ICER3 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ICER3's CLRENA field.
     */
    inline void set_NVIC_ICER3_CLRENA(PPB_NVIC_ICER3_CLRENA value)
    {
        uint32_t curr = NVIC_ICER3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ICER3 = curr;
    }

    /**
     * Get NVIC_ISPR0's SETPEND field.
     */
    PPB_NVIC_ISPR0_SETPEND get_NVIC_ISPR0_SETPEND()
    {
        return PPB_NVIC_ISPR0_SETPEND((NVIC_ISPR0 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ISPR0's SETPEND field.
     */
    inline void set_NVIC_ISPR0_SETPEND(PPB_NVIC_ISPR0_SETPEND value)
    {
        uint32_t curr = NVIC_ISPR0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ISPR0 = curr;
    }

    /**
     * Get NVIC_ISPR1's SETPEND field.
     */
    PPB_NVIC_ISPR1_SETPEND get_NVIC_ISPR1_SETPEND()
    {
        return PPB_NVIC_ISPR1_SETPEND((NVIC_ISPR1 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ISPR1's SETPEND field.
     */
    inline void set_NVIC_ISPR1_SETPEND(PPB_NVIC_ISPR1_SETPEND value)
    {
        uint32_t curr = NVIC_ISPR1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ISPR1 = curr;
    }

    /**
     * Get NVIC_ISPR2's SETPEND field.
     */
    PPB_NVIC_ISPR2_SETPEND get_NVIC_ISPR2_SETPEND()
    {
        return PPB_NVIC_ISPR2_SETPEND((NVIC_ISPR2 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ISPR2's SETPEND field.
     */
    inline void set_NVIC_ISPR2_SETPEND(PPB_NVIC_ISPR2_SETPEND value)
    {
        uint32_t curr = NVIC_ISPR2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ISPR2 = curr;
    }

    /**
     * Get NVIC_ISPR3's SETPEND field.
     */
    PPB_NVIC_ISPR3_SETPEND get_NVIC_ISPR3_SETPEND()
    {
        return PPB_NVIC_ISPR3_SETPEND((NVIC_ISPR3 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ISPR3's SETPEND field.
     */
    inline void set_NVIC_ISPR3_SETPEND(PPB_NVIC_ISPR3_SETPEND value)
    {
        uint32_t curr = NVIC_ISPR3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ISPR3 = curr;
    }

    /**
     * Get NVIC_ICPR0's CLRPEND field.
     */
    PPB_NVIC_ICPR0_CLRPEND get_NVIC_ICPR0_CLRPEND()
    {
        return PPB_NVIC_ICPR0_CLRPEND((NVIC_ICPR0 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ICPR0's CLRPEND field.
     */
    inline void set_NVIC_ICPR0_CLRPEND(PPB_NVIC_ICPR0_CLRPEND value)
    {
        uint32_t curr = NVIC_ICPR0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ICPR0 = curr;
    }

    /**
     * Get NVIC_ICPR1's CLRPEND field.
     */
    PPB_NVIC_ICPR1_CLRPEND get_NVIC_ICPR1_CLRPEND()
    {
        return PPB_NVIC_ICPR1_CLRPEND((NVIC_ICPR1 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ICPR1's CLRPEND field.
     */
    inline void set_NVIC_ICPR1_CLRPEND(PPB_NVIC_ICPR1_CLRPEND value)
    {
        uint32_t curr = NVIC_ICPR1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ICPR1 = curr;
    }

    /**
     * Get NVIC_ICPR2's CLRPEND field.
     */
    PPB_NVIC_ICPR2_CLRPEND get_NVIC_ICPR2_CLRPEND()
    {
        return PPB_NVIC_ICPR2_CLRPEND((NVIC_ICPR2 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ICPR2's CLRPEND field.
     */
    inline void set_NVIC_ICPR2_CLRPEND(PPB_NVIC_ICPR2_CLRPEND value)
    {
        uint32_t curr = NVIC_ICPR2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ICPR2 = curr;
    }

    /**
     * Get NVIC_ICPR3's CLRPEND field.
     */
    PPB_NVIC_ICPR3_CLRPEND get_NVIC_ICPR3_CLRPEND()
    {
        return PPB_NVIC_ICPR3_CLRPEND((NVIC_ICPR3 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_ICPR3's CLRPEND field.
     */
    inline void set_NVIC_ICPR3_CLRPEND(PPB_NVIC_ICPR3_CLRPEND value)
    {
        uint32_t curr = NVIC_ICPR3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_ICPR3 = curr;
    }

    /**
     * Get NVIC_IABR0's ACTIVE field.
     */
    PPB_NVIC_IABR0_ACTIVE get_NVIC_IABR0_ACTIVE()
    {
        return PPB_NVIC_IABR0_ACTIVE((NVIC_IABR0 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_IABR0's ACTIVE field.
     */
    inline void set_NVIC_IABR0_ACTIVE(PPB_NVIC_IABR0_ACTIVE value)
    {
        uint32_t curr = NVIC_IABR0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_IABR0 = curr;
    }

    /**
     * Get NVIC_IABR1's ACTIVE field.
     */
    PPB_NVIC_IABR1_ACTIVE get_NVIC_IABR1_ACTIVE()
    {
        return PPB_NVIC_IABR1_ACTIVE((NVIC_IABR1 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_IABR1's ACTIVE field.
     */
    inline void set_NVIC_IABR1_ACTIVE(PPB_NVIC_IABR1_ACTIVE value)
    {
        uint32_t curr = NVIC_IABR1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_IABR1 = curr;
    }

    /**
     * Get NVIC_IABR2's ACTIVE field.
     */
    PPB_NVIC_IABR2_ACTIVE get_NVIC_IABR2_ACTIVE()
    {
        return PPB_NVIC_IABR2_ACTIVE((NVIC_IABR2 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_IABR2's ACTIVE field.
     */
    inline void set_NVIC_IABR2_ACTIVE(PPB_NVIC_IABR2_ACTIVE value)
    {
        uint32_t curr = NVIC_IABR2;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_IABR2 = curr;
    }

    /**
     * Get NVIC_IABR3's ACTIVE field.
     */
    PPB_NVIC_IABR3_ACTIVE get_NVIC_IABR3_ACTIVE()
    {
        return PPB_NVIC_IABR3_ACTIVE((NVIC_IABR3 >> 0u) & 0b11111111111111111111111111111111u);
    }

    /**
     * Set NVIC_IABR3's ACTIVE field.
     */
    inline void set_NVIC_IABR3_ACTIVE(PPB_NVIC_IABR3_ACTIVE value)
    {
        uint32_t curr = NVIC_IABR3;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111111111111111111111111111111u) << 0u;

        NVIC_IABR3 = curr;
    }

    /**
     * Get NVIC_IPR0's PRI_3 field.
     */
    uint8_t get_NVIC_IPR0_PRI_3()
    {
        return (NVIC_IPR0 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR0's PRI_3 field.
     */
    inline void set_NVIC_IPR0_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR0;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR0 = curr;
    }

    /**
     * Get NVIC_IPR0's PRI_2 field.
     */
    uint8_t get_NVIC_IPR0_PRI_2()
    {
        return (NVIC_IPR0 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR0's PRI_2 field.
     */
    inline void set_NVIC_IPR0_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR0 = curr;
    }

    /**
     * Get NVIC_IPR0's PRI_1 field.
     */
    uint8_t get_NVIC_IPR0_PRI_1()
    {
        return (NVIC_IPR0 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR0's PRI_1 field.
     */
    inline void set_NVIC_IPR0_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR0;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR0 = curr;
    }

    /**
     * Get NVIC_IPR0's PRI_0 field.
     */
    uint8_t get_NVIC_IPR0_PRI_0()
    {
        return (NVIC_IPR0 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR0's PRI_0 field.
     */
    inline void set_NVIC_IPR0_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR0;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR0 = curr;
    }

    /**
     * Get NVIC_IPR1's PRI_3 field.
     */
    uint8_t get_NVIC_IPR1_PRI_3()
    {
        return (NVIC_IPR1 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR1's PRI_3 field.
     */
    inline void set_NVIC_IPR1_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR1;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR1 = curr;
    }

    /**
     * Get NVIC_IPR1's PRI_2 field.
     */
    uint8_t get_NVIC_IPR1_PRI_2()
    {
        return (NVIC_IPR1 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR1's PRI_2 field.
     */
    inline void set_NVIC_IPR1_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR1 = curr;
    }

    /**
     * Get NVIC_IPR1's PRI_1 field.
     */
    uint8_t get_NVIC_IPR1_PRI_1()
    {
        return (NVIC_IPR1 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR1's PRI_1 field.
     */
    inline void set_NVIC_IPR1_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR1;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR1 = curr;
    }

    /**
     * Get NVIC_IPR1's PRI_0 field.
     */
    uint8_t get_NVIC_IPR1_PRI_0()
    {
        return (NVIC_IPR1 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR1's PRI_0 field.
     */
    inline void set_NVIC_IPR1_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR1;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR1 = curr;
    }

    /**
     * Get NVIC_IPR2's PRI_3 field.
     */
    uint8_t get_NVIC_IPR2_PRI_3()
    {
        return (NVIC_IPR2 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR2's PRI_3 field.
     */
    inline void set_NVIC_IPR2_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR2;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR2 = curr;
    }

    /**
     * Get NVIC_IPR2's PRI_2 field.
     */
    uint8_t get_NVIC_IPR2_PRI_2()
    {
        return (NVIC_IPR2 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR2's PRI_2 field.
     */
    inline void set_NVIC_IPR2_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR2;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR2 = curr;
    }

    /**
     * Get NVIC_IPR2's PRI_1 field.
     */
    uint8_t get_NVIC_IPR2_PRI_1()
    {
        return (NVIC_IPR2 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR2's PRI_1 field.
     */
    inline void set_NVIC_IPR2_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR2;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR2 = curr;
    }

    /**
     * Get NVIC_IPR2's PRI_0 field.
     */
    uint8_t get_NVIC_IPR2_PRI_0()
    {
        return (NVIC_IPR2 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR2's PRI_0 field.
     */
    inline void set_NVIC_IPR2_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR2;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR2 = curr;
    }

    /**
     * Get NVIC_IPR3's PRI_3 field.
     */
    uint8_t get_NVIC_IPR3_PRI_3()
    {
        return (NVIC_IPR3 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR3's PRI_3 field.
     */
    inline void set_NVIC_IPR3_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR3;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR3 = curr;
    }

    /**
     * Get NVIC_IPR3's PRI_2 field.
     */
    uint8_t get_NVIC_IPR3_PRI_2()
    {
        return (NVIC_IPR3 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR3's PRI_2 field.
     */
    inline void set_NVIC_IPR3_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR3;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR3 = curr;
    }

    /**
     * Get NVIC_IPR3's PRI_1 field.
     */
    uint8_t get_NVIC_IPR3_PRI_1()
    {
        return (NVIC_IPR3 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR3's PRI_1 field.
     */
    inline void set_NVIC_IPR3_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR3;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR3 = curr;
    }

    /**
     * Get NVIC_IPR3's PRI_0 field.
     */
    uint8_t get_NVIC_IPR3_PRI_0()
    {
        return (NVIC_IPR3 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR3's PRI_0 field.
     */
    inline void set_NVIC_IPR3_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR3;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR3 = curr;
    }

    /**
     * Get NVIC_IPR4's PRI_3 field.
     */
    uint8_t get_NVIC_IPR4_PRI_3()
    {
        return (NVIC_IPR4 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR4's PRI_3 field.
     */
    inline void set_NVIC_IPR4_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR4;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR4 = curr;
    }

    /**
     * Get NVIC_IPR4's PRI_2 field.
     */
    uint8_t get_NVIC_IPR4_PRI_2()
    {
        return (NVIC_IPR4 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR4's PRI_2 field.
     */
    inline void set_NVIC_IPR4_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR4;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR4 = curr;
    }

    /**
     * Get NVIC_IPR4's PRI_1 field.
     */
    uint8_t get_NVIC_IPR4_PRI_1()
    {
        return (NVIC_IPR4 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR4's PRI_1 field.
     */
    inline void set_NVIC_IPR4_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR4;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR4 = curr;
    }

    /**
     * Get NVIC_IPR4's PRI_0 field.
     */
    uint8_t get_NVIC_IPR4_PRI_0()
    {
        return (NVIC_IPR4 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR4's PRI_0 field.
     */
    inline void set_NVIC_IPR4_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR4;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR4 = curr;
    }

    /**
     * Get NVIC_IPR5's PRI_3 field.
     */
    uint8_t get_NVIC_IPR5_PRI_3()
    {
        return (NVIC_IPR5 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR5's PRI_3 field.
     */
    inline void set_NVIC_IPR5_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR5;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR5 = curr;
    }

    /**
     * Get NVIC_IPR5's PRI_2 field.
     */
    uint8_t get_NVIC_IPR5_PRI_2()
    {
        return (NVIC_IPR5 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR5's PRI_2 field.
     */
    inline void set_NVIC_IPR5_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR5;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR5 = curr;
    }

    /**
     * Get NVIC_IPR5's PRI_1 field.
     */
    uint8_t get_NVIC_IPR5_PRI_1()
    {
        return (NVIC_IPR5 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR5's PRI_1 field.
     */
    inline void set_NVIC_IPR5_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR5;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR5 = curr;
    }

    /**
     * Get NVIC_IPR5's PRI_0 field.
     */
    uint8_t get_NVIC_IPR5_PRI_0()
    {
        return (NVIC_IPR5 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR5's PRI_0 field.
     */
    inline void set_NVIC_IPR5_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR5;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR5 = curr;
    }

    /**
     * Get NVIC_IPR6's PRI_3 field.
     */
    uint8_t get_NVIC_IPR6_PRI_3()
    {
        return (NVIC_IPR6 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR6's PRI_3 field.
     */
    inline void set_NVIC_IPR6_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR6;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR6 = curr;
    }

    /**
     * Get NVIC_IPR6's PRI_2 field.
     */
    uint8_t get_NVIC_IPR6_PRI_2()
    {
        return (NVIC_IPR6 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR6's PRI_2 field.
     */
    inline void set_NVIC_IPR6_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR6;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR6 = curr;
    }

    /**
     * Get NVIC_IPR6's PRI_1 field.
     */
    uint8_t get_NVIC_IPR6_PRI_1()
    {
        return (NVIC_IPR6 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR6's PRI_1 field.
     */
    inline void set_NVIC_IPR6_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR6;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR6 = curr;
    }

    /**
     * Get NVIC_IPR6's PRI_0 field.
     */
    uint8_t get_NVIC_IPR6_PRI_0()
    {
        return (NVIC_IPR6 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR6's PRI_0 field.
     */
    inline void set_NVIC_IPR6_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR6;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR6 = curr;
    }

    /**
     * Get NVIC_IPR7's PRI_3 field.
     */
    uint8_t get_NVIC_IPR7_PRI_3()
    {
        return (NVIC_IPR7 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR7's PRI_3 field.
     */
    inline void set_NVIC_IPR7_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR7;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR7 = curr;
    }

    /**
     * Get NVIC_IPR7's PRI_2 field.
     */
    uint8_t get_NVIC_IPR7_PRI_2()
    {
        return (NVIC_IPR7 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR7's PRI_2 field.
     */
    inline void set_NVIC_IPR7_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR7;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR7 = curr;
    }

    /**
     * Get NVIC_IPR7's PRI_1 field.
     */
    uint8_t get_NVIC_IPR7_PRI_1()
    {
        return (NVIC_IPR7 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR7's PRI_1 field.
     */
    inline void set_NVIC_IPR7_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR7;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR7 = curr;
    }

    /**
     * Get NVIC_IPR7's PRI_0 field.
     */
    uint8_t get_NVIC_IPR7_PRI_0()
    {
        return (NVIC_IPR7 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR7's PRI_0 field.
     */
    inline void set_NVIC_IPR7_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR7;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR7 = curr;
    }

    /**
     * Get NVIC_IPR8's PRI_3 field.
     */
    uint8_t get_NVIC_IPR8_PRI_3()
    {
        return (NVIC_IPR8 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR8's PRI_3 field.
     */
    inline void set_NVIC_IPR8_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR8;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR8 = curr;
    }

    /**
     * Get NVIC_IPR8's PRI_2 field.
     */
    uint8_t get_NVIC_IPR8_PRI_2()
    {
        return (NVIC_IPR8 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR8's PRI_2 field.
     */
    inline void set_NVIC_IPR8_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR8;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR8 = curr;
    }

    /**
     * Get NVIC_IPR8's PRI_1 field.
     */
    uint8_t get_NVIC_IPR8_PRI_1()
    {
        return (NVIC_IPR8 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR8's PRI_1 field.
     */
    inline void set_NVIC_IPR8_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR8;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR8 = curr;
    }

    /**
     * Get NVIC_IPR8's PRI_0 field.
     */
    uint8_t get_NVIC_IPR8_PRI_0()
    {
        return (NVIC_IPR8 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR8's PRI_0 field.
     */
    inline void set_NVIC_IPR8_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR8;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR8 = curr;
    }

    /**
     * Get NVIC_IPR9's PRI_3 field.
     */
    uint8_t get_NVIC_IPR9_PRI_3()
    {
        return (NVIC_IPR9 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR9's PRI_3 field.
     */
    inline void set_NVIC_IPR9_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR9;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR9 = curr;
    }

    /**
     * Get NVIC_IPR9's PRI_2 field.
     */
    uint8_t get_NVIC_IPR9_PRI_2()
    {
        return (NVIC_IPR9 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR9's PRI_2 field.
     */
    inline void set_NVIC_IPR9_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR9;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR9 = curr;
    }

    /**
     * Get NVIC_IPR9's PRI_1 field.
     */
    uint8_t get_NVIC_IPR9_PRI_1()
    {
        return (NVIC_IPR9 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR9's PRI_1 field.
     */
    inline void set_NVIC_IPR9_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR9;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR9 = curr;
    }

    /**
     * Get NVIC_IPR9's PRI_0 field.
     */
    uint8_t get_NVIC_IPR9_PRI_0()
    {
        return (NVIC_IPR9 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR9's PRI_0 field.
     */
    inline void set_NVIC_IPR9_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR9;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR9 = curr;
    }

    /**
     * Get NVIC_IPR10's PRI_3 field.
     */
    uint8_t get_NVIC_IPR10_PRI_3()
    {
        return (NVIC_IPR10 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR10's PRI_3 field.
     */
    inline void set_NVIC_IPR10_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR10;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR10 = curr;
    }

    /**
     * Get NVIC_IPR10's PRI_2 field.
     */
    uint8_t get_NVIC_IPR10_PRI_2()
    {
        return (NVIC_IPR10 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR10's PRI_2 field.
     */
    inline void set_NVIC_IPR10_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR10;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR10 = curr;
    }

    /**
     * Get NVIC_IPR10's PRI_1 field.
     */
    uint8_t get_NVIC_IPR10_PRI_1()
    {
        return (NVIC_IPR10 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR10's PRI_1 field.
     */
    inline void set_NVIC_IPR10_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR10;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR10 = curr;
    }

    /**
     * Get NVIC_IPR10's PRI_0 field.
     */
    uint8_t get_NVIC_IPR10_PRI_0()
    {
        return (NVIC_IPR10 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR10's PRI_0 field.
     */
    inline void set_NVIC_IPR10_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR10;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR10 = curr;
    }

    /**
     * Get NVIC_IPR11's PRI_3 field.
     */
    uint8_t get_NVIC_IPR11_PRI_3()
    {
        return (NVIC_IPR11 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR11's PRI_3 field.
     */
    inline void set_NVIC_IPR11_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR11;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR11 = curr;
    }

    /**
     * Get NVIC_IPR11's PRI_2 field.
     */
    uint8_t get_NVIC_IPR11_PRI_2()
    {
        return (NVIC_IPR11 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR11's PRI_2 field.
     */
    inline void set_NVIC_IPR11_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR11;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR11 = curr;
    }

    /**
     * Get NVIC_IPR11's PRI_1 field.
     */
    uint8_t get_NVIC_IPR11_PRI_1()
    {
        return (NVIC_IPR11 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR11's PRI_1 field.
     */
    inline void set_NVIC_IPR11_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR11;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR11 = curr;
    }

    /**
     * Get NVIC_IPR11's PRI_0 field.
     */
    uint8_t get_NVIC_IPR11_PRI_0()
    {
        return (NVIC_IPR11 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR11's PRI_0 field.
     */
    inline void set_NVIC_IPR11_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR11;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR11 = curr;
    }

    /**
     * Get NVIC_IPR12's PRI_3 field.
     */
    uint8_t get_NVIC_IPR12_PRI_3()
    {
        return (NVIC_IPR12 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR12's PRI_3 field.
     */
    inline void set_NVIC_IPR12_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR12;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR12 = curr;
    }

    /**
     * Get NVIC_IPR12's PRI_2 field.
     */
    uint8_t get_NVIC_IPR12_PRI_2()
    {
        return (NVIC_IPR12 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR12's PRI_2 field.
     */
    inline void set_NVIC_IPR12_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR12;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR12 = curr;
    }

    /**
     * Get NVIC_IPR12's PRI_1 field.
     */
    uint8_t get_NVIC_IPR12_PRI_1()
    {
        return (NVIC_IPR12 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR12's PRI_1 field.
     */
    inline void set_NVIC_IPR12_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR12;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR12 = curr;
    }

    /**
     * Get NVIC_IPR12's PRI_0 field.
     */
    uint8_t get_NVIC_IPR12_PRI_0()
    {
        return (NVIC_IPR12 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR12's PRI_0 field.
     */
    inline void set_NVIC_IPR12_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR12;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR12 = curr;
    }

    /**
     * Get NVIC_IPR13's PRI_3 field.
     */
    uint8_t get_NVIC_IPR13_PRI_3()
    {
        return (NVIC_IPR13 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR13's PRI_3 field.
     */
    inline void set_NVIC_IPR13_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR13;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR13 = curr;
    }

    /**
     * Get NVIC_IPR13's PRI_2 field.
     */
    uint8_t get_NVIC_IPR13_PRI_2()
    {
        return (NVIC_IPR13 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR13's PRI_2 field.
     */
    inline void set_NVIC_IPR13_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR13;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR13 = curr;
    }

    /**
     * Get NVIC_IPR13's PRI_1 field.
     */
    uint8_t get_NVIC_IPR13_PRI_1()
    {
        return (NVIC_IPR13 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR13's PRI_1 field.
     */
    inline void set_NVIC_IPR13_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR13;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR13 = curr;
    }

    /**
     * Get NVIC_IPR13's PRI_0 field.
     */
    uint8_t get_NVIC_IPR13_PRI_0()
    {
        return (NVIC_IPR13 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR13's PRI_0 field.
     */
    inline void set_NVIC_IPR13_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR13;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR13 = curr;
    }

    /**
     * Get NVIC_IPR14's PRI_3 field.
     */
    uint8_t get_NVIC_IPR14_PRI_3()
    {
        return (NVIC_IPR14 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR14's PRI_3 field.
     */
    inline void set_NVIC_IPR14_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR14;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR14 = curr;
    }

    /**
     * Get NVIC_IPR14's PRI_2 field.
     */
    uint8_t get_NVIC_IPR14_PRI_2()
    {
        return (NVIC_IPR14 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR14's PRI_2 field.
     */
    inline void set_NVIC_IPR14_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR14;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR14 = curr;
    }

    /**
     * Get NVIC_IPR14's PRI_1 field.
     */
    uint8_t get_NVIC_IPR14_PRI_1()
    {
        return (NVIC_IPR14 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR14's PRI_1 field.
     */
    inline void set_NVIC_IPR14_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR14;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR14 = curr;
    }

    /**
     * Get NVIC_IPR14's PRI_0 field.
     */
    uint8_t get_NVIC_IPR14_PRI_0()
    {
        return (NVIC_IPR14 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR14's PRI_0 field.
     */
    inline void set_NVIC_IPR14_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR14;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR14 = curr;
    }

    /**
     * Get NVIC_IPR15's PRI_3 field.
     */
    uint8_t get_NVIC_IPR15_PRI_3()
    {
        return (NVIC_IPR15 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR15's PRI_3 field.
     */
    inline void set_NVIC_IPR15_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR15;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR15 = curr;
    }

    /**
     * Get NVIC_IPR15's PRI_2 field.
     */
    uint8_t get_NVIC_IPR15_PRI_2()
    {
        return (NVIC_IPR15 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR15's PRI_2 field.
     */
    inline void set_NVIC_IPR15_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR15;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR15 = curr;
    }

    /**
     * Get NVIC_IPR15's PRI_1 field.
     */
    uint8_t get_NVIC_IPR15_PRI_1()
    {
        return (NVIC_IPR15 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR15's PRI_1 field.
     */
    inline void set_NVIC_IPR15_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR15;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR15 = curr;
    }

    /**
     * Get NVIC_IPR15's PRI_0 field.
     */
    uint8_t get_NVIC_IPR15_PRI_0()
    {
        return (NVIC_IPR15 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR15's PRI_0 field.
     */
    inline void set_NVIC_IPR15_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR15;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR15 = curr;
    }

    /**
     * Get NVIC_IPR16's PRI_3 field.
     */
    uint8_t get_NVIC_IPR16_PRI_3()
    {
        return (NVIC_IPR16 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR16's PRI_3 field.
     */
    inline void set_NVIC_IPR16_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR16;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR16 = curr;
    }

    /**
     * Get NVIC_IPR16's PRI_2 field.
     */
    uint8_t get_NVIC_IPR16_PRI_2()
    {
        return (NVIC_IPR16 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR16's PRI_2 field.
     */
    inline void set_NVIC_IPR16_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR16;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR16 = curr;
    }

    /**
     * Get NVIC_IPR16's PRI_1 field.
     */
    uint8_t get_NVIC_IPR16_PRI_1()
    {
        return (NVIC_IPR16 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR16's PRI_1 field.
     */
    inline void set_NVIC_IPR16_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR16;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR16 = curr;
    }

    /**
     * Get NVIC_IPR16's PRI_0 field.
     */
    uint8_t get_NVIC_IPR16_PRI_0()
    {
        return (NVIC_IPR16 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR16's PRI_0 field.
     */
    inline void set_NVIC_IPR16_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR16;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR16 = curr;
    }

    /**
     * Get NVIC_IPR17's PRI_3 field.
     */
    uint8_t get_NVIC_IPR17_PRI_3()
    {
        return (NVIC_IPR17 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR17's PRI_3 field.
     */
    inline void set_NVIC_IPR17_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR17;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR17 = curr;
    }

    /**
     * Get NVIC_IPR17's PRI_2 field.
     */
    uint8_t get_NVIC_IPR17_PRI_2()
    {
        return (NVIC_IPR17 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR17's PRI_2 field.
     */
    inline void set_NVIC_IPR17_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR17;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR17 = curr;
    }

    /**
     * Get NVIC_IPR17's PRI_1 field.
     */
    uint8_t get_NVIC_IPR17_PRI_1()
    {
        return (NVIC_IPR17 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR17's PRI_1 field.
     */
    inline void set_NVIC_IPR17_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR17;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR17 = curr;
    }

    /**
     * Get NVIC_IPR17's PRI_0 field.
     */
    uint8_t get_NVIC_IPR17_PRI_0()
    {
        return (NVIC_IPR17 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR17's PRI_0 field.
     */
    inline void set_NVIC_IPR17_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR17;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR17 = curr;
    }

    /**
     * Get NVIC_IPR18's PRI_3 field.
     */
    uint8_t get_NVIC_IPR18_PRI_3()
    {
        return (NVIC_IPR18 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR18's PRI_3 field.
     */
    inline void set_NVIC_IPR18_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR18;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR18 = curr;
    }

    /**
     * Get NVIC_IPR18's PRI_2 field.
     */
    uint8_t get_NVIC_IPR18_PRI_2()
    {
        return (NVIC_IPR18 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR18's PRI_2 field.
     */
    inline void set_NVIC_IPR18_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR18;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR18 = curr;
    }

    /**
     * Get NVIC_IPR18's PRI_1 field.
     */
    uint8_t get_NVIC_IPR18_PRI_1()
    {
        return (NVIC_IPR18 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR18's PRI_1 field.
     */
    inline void set_NVIC_IPR18_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR18;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR18 = curr;
    }

    /**
     * Get NVIC_IPR18's PRI_0 field.
     */
    uint8_t get_NVIC_IPR18_PRI_0()
    {
        return (NVIC_IPR18 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR18's PRI_0 field.
     */
    inline void set_NVIC_IPR18_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR18;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR18 = curr;
    }

    /**
     * Get NVIC_IPR19's PRI_3 field.
     */
    uint8_t get_NVIC_IPR19_PRI_3()
    {
        return (NVIC_IPR19 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR19's PRI_3 field.
     */
    inline void set_NVIC_IPR19_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR19;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR19 = curr;
    }

    /**
     * Get NVIC_IPR19's PRI_2 field.
     */
    uint8_t get_NVIC_IPR19_PRI_2()
    {
        return (NVIC_IPR19 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR19's PRI_2 field.
     */
    inline void set_NVIC_IPR19_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR19;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR19 = curr;
    }

    /**
     * Get NVIC_IPR19's PRI_1 field.
     */
    uint8_t get_NVIC_IPR19_PRI_1()
    {
        return (NVIC_IPR19 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR19's PRI_1 field.
     */
    inline void set_NVIC_IPR19_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR19;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR19 = curr;
    }

    /**
     * Get NVIC_IPR19's PRI_0 field.
     */
    uint8_t get_NVIC_IPR19_PRI_0()
    {
        return (NVIC_IPR19 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR19's PRI_0 field.
     */
    inline void set_NVIC_IPR19_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR19;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR19 = curr;
    }

    /**
     * Get NVIC_IPR20's PRI_3 field.
     */
    uint8_t get_NVIC_IPR20_PRI_3()
    {
        return (NVIC_IPR20 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR20's PRI_3 field.
     */
    inline void set_NVIC_IPR20_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR20;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR20 = curr;
    }

    /**
     * Get NVIC_IPR20's PRI_2 field.
     */
    uint8_t get_NVIC_IPR20_PRI_2()
    {
        return (NVIC_IPR20 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR20's PRI_2 field.
     */
    inline void set_NVIC_IPR20_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR20;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR20 = curr;
    }

    /**
     * Get NVIC_IPR20's PRI_1 field.
     */
    uint8_t get_NVIC_IPR20_PRI_1()
    {
        return (NVIC_IPR20 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR20's PRI_1 field.
     */
    inline void set_NVIC_IPR20_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR20;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR20 = curr;
    }

    /**
     * Get NVIC_IPR20's PRI_0 field.
     */
    uint8_t get_NVIC_IPR20_PRI_0()
    {
        return (NVIC_IPR20 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR20's PRI_0 field.
     */
    inline void set_NVIC_IPR20_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR20;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR20 = curr;
    }

    /**
     * Get NVIC_IPR21's PRI_3 field.
     */
    uint8_t get_NVIC_IPR21_PRI_3()
    {
        return (NVIC_IPR21 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR21's PRI_3 field.
     */
    inline void set_NVIC_IPR21_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR21;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR21 = curr;
    }

    /**
     * Get NVIC_IPR21's PRI_2 field.
     */
    uint8_t get_NVIC_IPR21_PRI_2()
    {
        return (NVIC_IPR21 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR21's PRI_2 field.
     */
    inline void set_NVIC_IPR21_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR21;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR21 = curr;
    }

    /**
     * Get NVIC_IPR21's PRI_1 field.
     */
    uint8_t get_NVIC_IPR21_PRI_1()
    {
        return (NVIC_IPR21 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR21's PRI_1 field.
     */
    inline void set_NVIC_IPR21_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR21;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR21 = curr;
    }

    /**
     * Get NVIC_IPR21's PRI_0 field.
     */
    uint8_t get_NVIC_IPR21_PRI_0()
    {
        return (NVIC_IPR21 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR21's PRI_0 field.
     */
    inline void set_NVIC_IPR21_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR21;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR21 = curr;
    }

    /**
     * Get NVIC_IPR22's PRI_3 field.
     */
    uint8_t get_NVIC_IPR22_PRI_3()
    {
        return (NVIC_IPR22 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR22's PRI_3 field.
     */
    inline void set_NVIC_IPR22_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR22;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR22 = curr;
    }

    /**
     * Get NVIC_IPR22's PRI_2 field.
     */
    uint8_t get_NVIC_IPR22_PRI_2()
    {
        return (NVIC_IPR22 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR22's PRI_2 field.
     */
    inline void set_NVIC_IPR22_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR22;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR22 = curr;
    }

    /**
     * Get NVIC_IPR22's PRI_1 field.
     */
    uint8_t get_NVIC_IPR22_PRI_1()
    {
        return (NVIC_IPR22 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR22's PRI_1 field.
     */
    inline void set_NVIC_IPR22_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR22;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR22 = curr;
    }

    /**
     * Get NVIC_IPR22's PRI_0 field.
     */
    uint8_t get_NVIC_IPR22_PRI_0()
    {
        return (NVIC_IPR22 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR22's PRI_0 field.
     */
    inline void set_NVIC_IPR22_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR22;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR22 = curr;
    }

    /**
     * Get NVIC_IPR23's PRI_3 field.
     */
    uint8_t get_NVIC_IPR23_PRI_3()
    {
        return (NVIC_IPR23 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR23's PRI_3 field.
     */
    inline void set_NVIC_IPR23_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR23;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR23 = curr;
    }

    /**
     * Get NVIC_IPR23's PRI_2 field.
     */
    uint8_t get_NVIC_IPR23_PRI_2()
    {
        return (NVIC_IPR23 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR23's PRI_2 field.
     */
    inline void set_NVIC_IPR23_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR23;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR23 = curr;
    }

    /**
     * Get NVIC_IPR23's PRI_1 field.
     */
    uint8_t get_NVIC_IPR23_PRI_1()
    {
        return (NVIC_IPR23 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR23's PRI_1 field.
     */
    inline void set_NVIC_IPR23_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR23;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR23 = curr;
    }

    /**
     * Get NVIC_IPR23's PRI_0 field.
     */
    uint8_t get_NVIC_IPR23_PRI_0()
    {
        return (NVIC_IPR23 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR23's PRI_0 field.
     */
    inline void set_NVIC_IPR23_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR23;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR23 = curr;
    }

    /**
     * Get NVIC_IPR24's PRI_3 field.
     */
    uint8_t get_NVIC_IPR24_PRI_3()
    {
        return (NVIC_IPR24 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR24's PRI_3 field.
     */
    inline void set_NVIC_IPR24_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR24;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR24 = curr;
    }

    /**
     * Get NVIC_IPR24's PRI_2 field.
     */
    uint8_t get_NVIC_IPR24_PRI_2()
    {
        return (NVIC_IPR24 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR24's PRI_2 field.
     */
    inline void set_NVIC_IPR24_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR24;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR24 = curr;
    }

    /**
     * Get NVIC_IPR24's PRI_1 field.
     */
    uint8_t get_NVIC_IPR24_PRI_1()
    {
        return (NVIC_IPR24 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR24's PRI_1 field.
     */
    inline void set_NVIC_IPR24_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR24;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR24 = curr;
    }

    /**
     * Get NVIC_IPR24's PRI_0 field.
     */
    uint8_t get_NVIC_IPR24_PRI_0()
    {
        return (NVIC_IPR24 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR24's PRI_0 field.
     */
    inline void set_NVIC_IPR24_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR24;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR24 = curr;
    }

    /**
     * Get NVIC_IPR25's PRI_3 field.
     */
    uint8_t get_NVIC_IPR25_PRI_3()
    {
        return (NVIC_IPR25 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR25's PRI_3 field.
     */
    inline void set_NVIC_IPR25_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR25;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR25 = curr;
    }

    /**
     * Get NVIC_IPR25's PRI_2 field.
     */
    uint8_t get_NVIC_IPR25_PRI_2()
    {
        return (NVIC_IPR25 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR25's PRI_2 field.
     */
    inline void set_NVIC_IPR25_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR25;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR25 = curr;
    }

    /**
     * Get NVIC_IPR25's PRI_1 field.
     */
    uint8_t get_NVIC_IPR25_PRI_1()
    {
        return (NVIC_IPR25 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR25's PRI_1 field.
     */
    inline void set_NVIC_IPR25_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR25;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR25 = curr;
    }

    /**
     * Get NVIC_IPR25's PRI_0 field.
     */
    uint8_t get_NVIC_IPR25_PRI_0()
    {
        return (NVIC_IPR25 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR25's PRI_0 field.
     */
    inline void set_NVIC_IPR25_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR25;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR25 = curr;
    }

    /**
     * Get NVIC_IPR26's PRI_3 field.
     */
    uint8_t get_NVIC_IPR26_PRI_3()
    {
        return (NVIC_IPR26 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR26's PRI_3 field.
     */
    inline void set_NVIC_IPR26_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR26;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR26 = curr;
    }

    /**
     * Get NVIC_IPR26's PRI_2 field.
     */
    uint8_t get_NVIC_IPR26_PRI_2()
    {
        return (NVIC_IPR26 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR26's PRI_2 field.
     */
    inline void set_NVIC_IPR26_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR26;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR26 = curr;
    }

    /**
     * Get NVIC_IPR26's PRI_1 field.
     */
    uint8_t get_NVIC_IPR26_PRI_1()
    {
        return (NVIC_IPR26 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR26's PRI_1 field.
     */
    inline void set_NVIC_IPR26_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR26;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR26 = curr;
    }

    /**
     * Get NVIC_IPR26's PRI_0 field.
     */
    uint8_t get_NVIC_IPR26_PRI_0()
    {
        return (NVIC_IPR26 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR26's PRI_0 field.
     */
    inline void set_NVIC_IPR26_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR26;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR26 = curr;
    }

    /**
     * Get NVIC_IPR27's PRI_3 field.
     */
    uint8_t get_NVIC_IPR27_PRI_3()
    {
        return (NVIC_IPR27 >> 24u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR27's PRI_3 field.
     */
    inline void set_NVIC_IPR27_PRI_3(uint8_t value)
    {
        uint32_t curr = NVIC_IPR27;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        NVIC_IPR27 = curr;
    }

    /**
     * Get NVIC_IPR27's PRI_2 field.
     */
    uint8_t get_NVIC_IPR27_PRI_2()
    {
        return (NVIC_IPR27 >> 16u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR27's PRI_2 field.
     */
    inline void set_NVIC_IPR27_PRI_2(uint8_t value)
    {
        uint32_t curr = NVIC_IPR27;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        NVIC_IPR27 = curr;
    }

    /**
     * Get NVIC_IPR27's PRI_1 field.
     */
    uint8_t get_NVIC_IPR27_PRI_1()
    {
        return (NVIC_IPR27 >> 8u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR27's PRI_1 field.
     */
    inline void set_NVIC_IPR27_PRI_1(uint8_t value)
    {
        uint32_t curr = NVIC_IPR27;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        NVIC_IPR27 = curr;
    }

    /**
     * Get NVIC_IPR27's PRI_0 field.
     */
    uint8_t get_NVIC_IPR27_PRI_0()
    {
        return (NVIC_IPR27 >> 0u) & 0b11111111u;
    }

    /**
     * Set NVIC_IPR27's PRI_0 field.
     */
    inline void set_NVIC_IPR27_PRI_0(uint8_t value)
    {
        uint32_t curr = NVIC_IPR27;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        NVIC_IPR27 = curr;
    }

    /**
     * Get CPUID's Implementer field.
     */
    PPB_CPUID_Implementer get_CPUID_Implementer()
    {
        return PPB_CPUID_Implementer((CPUID >> 24u) & 0b11111111u);
    }

    /**
     * Get CPUID's Variant field.
     */
    PPB_CPUID_Variant get_CPUID_Variant()
    {
        return PPB_CPUID_Variant((CPUID >> 20u) & 0b1111u);
    }

    /**
     * Get CPUID's Constant field.
     */
    uint8_t get_CPUID_Constant()
    {
        return (CPUID >> 16u) & 0b1111u;
    }

    /**
     * Get CPUID's PartNo field.
     */
    PPB_CPUID_PartNo get_CPUID_PartNo()
    {
        return PPB_CPUID_PartNo((CPUID >> 4u) & 0b111111111111u);
    }

    /**
     * Get CPUID's Revision field.
     */
    PPB_CPUID_Revision get_CPUID_Revision()
    {
        return PPB_CPUID_Revision((CPUID >> 0u) & 0b1111u);
    }

    /**
     * Get ICSR's NMIPENDSET bit.
     */
    bool get_ICSR_NMIPENDSET()
    {
        return ICSR & (1u << 31u);
    }

    /**
     * Set ICSR's NMIPENDSET bit.
     */
    inline void set_ICSR_NMIPENDSET()
    {
        ICSR |= 1u << 31u;
    }

    /**
     * Clear ICSR's NMIPENDSET bit.
     */
    inline void clear_ICSR_NMIPENDSET()
    {
        ICSR &= ~(1u << 31u);
    }

    /**
     * Toggle ICSR's NMIPENDSET bit.
     */
    inline void toggle_ICSR_NMIPENDSET()
    {
        ICSR ^= 1u << 31u;
    }

    /**
     * Get ICSR's PENDSVSET bit.
     */
    bool get_ICSR_PENDSVSET()
    {
        return ICSR & (1u << 28u);
    }

    /**
     * Set ICSR's PENDSVSET bit.
     */
    inline void set_ICSR_PENDSVSET()
    {
        ICSR |= 1u << 28u;
    }

    /**
     * Clear ICSR's PENDSVSET bit.
     */
    inline void clear_ICSR_PENDSVSET()
    {
        ICSR &= ~(1u << 28u);
    }

    /**
     * Toggle ICSR's PENDSVSET bit.
     */
    inline void toggle_ICSR_PENDSVSET()
    {
        ICSR ^= 1u << 28u;
    }

    /**
     * Set ICSR's PENDSVCLR bit.
     */
    inline void set_ICSR_PENDSVCLR()
    {
        ICSR |= 1u << 27u;
    }

    /**
     * Clear ICSR's PENDSVCLR bit.
     */
    inline void clear_ICSR_PENDSVCLR()
    {
        ICSR &= ~(1u << 27u);
    }

    /**
     * Toggle ICSR's PENDSVCLR bit.
     */
    inline void toggle_ICSR_PENDSVCLR()
    {
        ICSR ^= 1u << 27u;
    }

    /**
     * Get ICSR's PENDSTSET bit.
     */
    PPB_ICSR_PENDSTSET get_ICSR_PENDSTSET()
    {
        return PPB_ICSR_PENDSTSET(ICSR & (1u << 26u));
    }

    /**
     * Set ICSR's PENDSTSET bit.
     */
    inline void set_ICSR_PENDSTSET()
    {
        ICSR |= 1u << 26u;
    }

    /**
     * Clear ICSR's PENDSTSET bit.
     */
    inline void clear_ICSR_PENDSTSET()
    {
        ICSR &= ~(1u << 26u);
    }

    /**
     * Toggle ICSR's PENDSTSET bit.
     */
    inline void toggle_ICSR_PENDSTSET()
    {
        ICSR ^= 1u << 26u;
    }

    /**
     * Set ICSR's PENDSTCLR bit.
     */
    inline void set_ICSR_PENDSTCLR()
    {
        ICSR |= 1u << 25u;
    }

    /**
     * Clear ICSR's PENDSTCLR bit.
     */
    inline void clear_ICSR_PENDSTCLR()
    {
        ICSR &= ~(1u << 25u);
    }

    /**
     * Toggle ICSR's PENDSTCLR bit.
     */
    inline void toggle_ICSR_PENDSTCLR()
    {
        ICSR ^= 1u << 25u;
    }

    /**
     * Get ICSR's ISRPENDING bit.
     */
    PPB_ICSR_ISRPENDING get_ICSR_ISRPENDING()
    {
        return PPB_ICSR_ISRPENDING(ICSR & (1u << 22u));
    }

    /**
     * Get ICSR's VECTPENDING field.
     */
    PPB_ICSR_VECTPENDING get_ICSR_VECTPENDING()
    {
        return PPB_ICSR_VECTPENDING((ICSR >> 12u) & 0b111111u);
    }

    /**
     * Get ICSR's RETTOBASE bit.
     */
    PPB_ICSR_RETTOBASE get_ICSR_RETTOBASE()
    {
        return PPB_ICSR_RETTOBASE(ICSR & (1u << 11u));
    }

    /**
     * Get ICSR's VECTACTIVE field.
     */
    PPB_ICSR_VECTACTIVE get_ICSR_VECTACTIVE()
    {
        return PPB_ICSR_VECTACTIVE((ICSR >> 0u) & 0b111111111u);
    }

    /**
     * Get VTOR's TBLOFF field.
     */
    uint32_t get_VTOR_TBLOFF()
    {
        return (VTOR >> 10u) & 0b1111111111111111111111u;
    }

    /**
     * Set VTOR's TBLOFF field.
     */
    inline void set_VTOR_TBLOFF(uint32_t value)
    {
        uint32_t curr = VTOR;

        curr &= ~(0b1111111111111111111111u << 10u);
        curr |= (value & 0b1111111111111111111111u) << 10u;

        VTOR = curr;
    }

    /**
     * Get AIRCR's VECTKEY field.
     */
    uint16_t get_AIRCR_VECTKEY()
    {
        return (AIRCR >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set AIRCR's VECTKEY field.
     */
    inline void set_AIRCR_VECTKEY(uint16_t value)
    {
        uint32_t curr = AIRCR;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        AIRCR = curr;
    }

    /**
     * Get AIRCR's ENDIANNESS bit.
     */
    PPB_AIRCR_ENDIANNESS get_AIRCR_ENDIANNESS()
    {
        return PPB_AIRCR_ENDIANNESS(AIRCR & (1u << 15u));
    }

    /**
     * Get AIRCR's PRIGROUP field.
     */
    uint8_t get_AIRCR_PRIGROUP()
    {
        return (AIRCR >> 8u) & 0b111u;
    }

    /**
     * Set AIRCR's PRIGROUP field.
     */
    inline void set_AIRCR_PRIGROUP(uint8_t value)
    {
        uint32_t curr = AIRCR;

        curr &= ~(0b111u << 8u);
        curr |= (value & 0b111u) << 8u;

        AIRCR = curr;
    }

    /**
     * Set AIRCR's SYSRESETREQ bit.
     */
    inline void set_AIRCR_SYSRESETREQ()
    {
        AIRCR |= 1u << 2u;
    }

    /**
     * Clear AIRCR's SYSRESETREQ bit.
     */
    inline void clear_AIRCR_SYSRESETREQ()
    {
        AIRCR &= ~(1u << 2u);
    }

    /**
     * Toggle AIRCR's SYSRESETREQ bit.
     */
    inline void toggle_AIRCR_SYSRESETREQ()
    {
        AIRCR ^= 1u << 2u;
    }

    /**
     * Set AIRCR's VECTCLRACTIVE bit.
     */
    inline void set_AIRCR_VECTCLRACTIVE()
    {
        AIRCR |= 1u << 1u;
    }

    /**
     * Clear AIRCR's VECTCLRACTIVE bit.
     */
    inline void clear_AIRCR_VECTCLRACTIVE()
    {
        AIRCR &= ~(1u << 1u);
    }

    /**
     * Toggle AIRCR's VECTCLRACTIVE bit.
     */
    inline void toggle_AIRCR_VECTCLRACTIVE()
    {
        AIRCR ^= 1u << 1u;
    }

    /**
     * Set AIRCR's VECTRESET bit.
     */
    inline void set_AIRCR_VECTRESET()
    {
        AIRCR |= 1u << 0u;
    }

    /**
     * Clear AIRCR's VECTRESET bit.
     */
    inline void clear_AIRCR_VECTRESET()
    {
        AIRCR &= ~(1u << 0u);
    }

    /**
     * Toggle AIRCR's VECTRESET bit.
     */
    inline void toggle_AIRCR_VECTRESET()
    {
        AIRCR ^= 1u << 0u;
    }

    /**
     * Get SCR's SEVONPEND bit.
     */
    PPB_SCR_SEVONPEND get_SCR_SEVONPEND()
    {
        return PPB_SCR_SEVONPEND(SCR & (1u << 4u));
    }

    /**
     * Set SCR's SEVONPEND bit.
     */
    inline void set_SCR_SEVONPEND()
    {
        SCR |= 1u << 4u;
    }

    /**
     * Clear SCR's SEVONPEND bit.
     */
    inline void clear_SCR_SEVONPEND()
    {
        SCR &= ~(1u << 4u);
    }

    /**
     * Toggle SCR's SEVONPEND bit.
     */
    inline void toggle_SCR_SEVONPEND()
    {
        SCR ^= 1u << 4u;
    }

    /**
     * Get SCR's SLEEPDEEP bit.
     */
    PPB_SCR_SLEEPDEEP get_SCR_SLEEPDEEP()
    {
        return PPB_SCR_SLEEPDEEP(SCR & (1u << 2u));
    }

    /**
     * Set SCR's SLEEPDEEP bit.
     */
    inline void set_SCR_SLEEPDEEP()
    {
        SCR |= 1u << 2u;
    }

    /**
     * Clear SCR's SLEEPDEEP bit.
     */
    inline void clear_SCR_SLEEPDEEP()
    {
        SCR &= ~(1u << 2u);
    }

    /**
     * Toggle SCR's SLEEPDEEP bit.
     */
    inline void toggle_SCR_SLEEPDEEP()
    {
        SCR ^= 1u << 2u;
    }

    /**
     * Get SCR's SLEEPONEXIT bit.
     */
    PPB_SCR_SLEEPONEXIT get_SCR_SLEEPONEXIT()
    {
        return PPB_SCR_SLEEPONEXIT(SCR & (1u << 1u));
    }

    /**
     * Set SCR's SLEEPONEXIT bit.
     */
    inline void set_SCR_SLEEPONEXIT()
    {
        SCR |= 1u << 1u;
    }

    /**
     * Clear SCR's SLEEPONEXIT bit.
     */
    inline void clear_SCR_SLEEPONEXIT()
    {
        SCR &= ~(1u << 1u);
    }

    /**
     * Toggle SCR's SLEEPONEXIT bit.
     */
    inline void toggle_SCR_SLEEPONEXIT()
    {
        SCR ^= 1u << 1u;
    }

    /**
     * Get CCR's STKALIGN bit.
     */
    PPB_CCR_STKALIGN get_CCR_STKALIGN()
    {
        return PPB_CCR_STKALIGN(CCR & (1u << 9u));
    }

    /**
     * Set CCR's STKALIGN bit.
     */
    inline void set_CCR_STKALIGN()
    {
        CCR |= 1u << 9u;
    }

    /**
     * Clear CCR's STKALIGN bit.
     */
    inline void clear_CCR_STKALIGN()
    {
        CCR &= ~(1u << 9u);
    }

    /**
     * Toggle CCR's STKALIGN bit.
     */
    inline void toggle_CCR_STKALIGN()
    {
        CCR ^= 1u << 9u;
    }

    /**
     * Get CCR's BFHFNMIGN bit.
     */
    PPB_CCR_BFHFNMIGN get_CCR_BFHFNMIGN()
    {
        return PPB_CCR_BFHFNMIGN(CCR & (1u << 8u));
    }

    /**
     * Set CCR's BFHFNMIGN bit.
     */
    inline void set_CCR_BFHFNMIGN()
    {
        CCR |= 1u << 8u;
    }

    /**
     * Clear CCR's BFHFNMIGN bit.
     */
    inline void clear_CCR_BFHFNMIGN()
    {
        CCR &= ~(1u << 8u);
    }

    /**
     * Toggle CCR's BFHFNMIGN bit.
     */
    inline void toggle_CCR_BFHFNMIGN()
    {
        CCR ^= 1u << 8u;
    }

    /**
     * Get CCR's DIV_0_TRP bit.
     */
    PPB_CCR_DIV_0_TRP get_CCR_DIV_0_TRP()
    {
        return PPB_CCR_DIV_0_TRP(CCR & (1u << 4u));
    }

    /**
     * Set CCR's DIV_0_TRP bit.
     */
    inline void set_CCR_DIV_0_TRP()
    {
        CCR |= 1u << 4u;
    }

    /**
     * Clear CCR's DIV_0_TRP bit.
     */
    inline void clear_CCR_DIV_0_TRP()
    {
        CCR &= ~(1u << 4u);
    }

    /**
     * Toggle CCR's DIV_0_TRP bit.
     */
    inline void toggle_CCR_DIV_0_TRP()
    {
        CCR ^= 1u << 4u;
    }

    /**
     * Get CCR's UNALIGN_TRP bit.
     */
    PPB_CCR_UNALIGN_TRP get_CCR_UNALIGN_TRP()
    {
        return PPB_CCR_UNALIGN_TRP(CCR & (1u << 3u));
    }

    /**
     * Set CCR's UNALIGN_TRP bit.
     */
    inline void set_CCR_UNALIGN_TRP()
    {
        CCR |= 1u << 3u;
    }

    /**
     * Clear CCR's UNALIGN_TRP bit.
     */
    inline void clear_CCR_UNALIGN_TRP()
    {
        CCR &= ~(1u << 3u);
    }

    /**
     * Toggle CCR's UNALIGN_TRP bit.
     */
    inline void toggle_CCR_UNALIGN_TRP()
    {
        CCR ^= 1u << 3u;
    }

    /**
     * Get CCR's USERSETMPEND bit.
     */
    PPB_CCR_USERSETMPEND get_CCR_USERSETMPEND()
    {
        return PPB_CCR_USERSETMPEND(CCR & (1u << 1u));
    }

    /**
     * Set CCR's USERSETMPEND bit.
     */
    inline void set_CCR_USERSETMPEND()
    {
        CCR |= 1u << 1u;
    }

    /**
     * Clear CCR's USERSETMPEND bit.
     */
    inline void clear_CCR_USERSETMPEND()
    {
        CCR &= ~(1u << 1u);
    }

    /**
     * Toggle CCR's USERSETMPEND bit.
     */
    inline void toggle_CCR_USERSETMPEND()
    {
        CCR ^= 1u << 1u;
    }

    /**
     * Get CCR's NONBASETHRDENA bit.
     */
    PPB_CCR_NONBASETHRDENA get_CCR_NONBASETHRDENA()
    {
        return PPB_CCR_NONBASETHRDENA(CCR & (1u << 0u));
    }

    /**
     * Set CCR's NONBASETHRDENA bit.
     */
    inline void set_CCR_NONBASETHRDENA()
    {
        CCR |= 1u << 0u;
    }

    /**
     * Clear CCR's NONBASETHRDENA bit.
     */
    inline void clear_CCR_NONBASETHRDENA()
    {
        CCR &= ~(1u << 0u);
    }

    /**
     * Toggle CCR's NONBASETHRDENA bit.
     */
    inline void toggle_CCR_NONBASETHRDENA()
    {
        CCR ^= 1u << 0u;
    }

    /**
     * Get SHPR1's PRI_6 field.
     */
    uint8_t get_SHPR1_PRI_6()
    {
        return (SHPR1 >> 16u) & 0b11111111u;
    }

    /**
     * Set SHPR1's PRI_6 field.
     */
    inline void set_SHPR1_PRI_6(uint8_t value)
    {
        uint32_t curr = SHPR1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        SHPR1 = curr;
    }

    /**
     * Get SHPR1's PRI_5 field.
     */
    uint8_t get_SHPR1_PRI_5()
    {
        return (SHPR1 >> 8u) & 0b11111111u;
    }

    /**
     * Set SHPR1's PRI_5 field.
     */
    inline void set_SHPR1_PRI_5(uint8_t value)
    {
        uint32_t curr = SHPR1;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SHPR1 = curr;
    }

    /**
     * Get SHPR1's PRI_4 field.
     */
    uint8_t get_SHPR1_PRI_4()
    {
        return (SHPR1 >> 0u) & 0b11111111u;
    }

    /**
     * Set SHPR1's PRI_4 field.
     */
    inline void set_SHPR1_PRI_4(uint8_t value)
    {
        uint32_t curr = SHPR1;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SHPR1 = curr;
    }

    /**
     * Get SHPR2's PRI_11 field.
     */
    uint8_t get_SHPR2_PRI_11()
    {
        return (SHPR2 >> 24u) & 0b11111111u;
    }

    /**
     * Set SHPR2's PRI_11 field.
     */
    inline void set_SHPR2_PRI_11(uint8_t value)
    {
        uint32_t curr = SHPR2;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        SHPR2 = curr;
    }

    /**
     * Get SHPR3's PRI_15 field.
     */
    uint8_t get_SHPR3_PRI_15()
    {
        return (SHPR3 >> 24u) & 0b11111111u;
    }

    /**
     * Set SHPR3's PRI_15 field.
     */
    inline void set_SHPR3_PRI_15(uint8_t value)
    {
        uint32_t curr = SHPR3;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        SHPR3 = curr;
    }

    /**
     * Get SHPR3's PRI_14 field.
     */
    uint8_t get_SHPR3_PRI_14()
    {
        return (SHPR3 >> 16u) & 0b11111111u;
    }

    /**
     * Set SHPR3's PRI_14 field.
     */
    inline void set_SHPR3_PRI_14(uint8_t value)
    {
        uint32_t curr = SHPR3;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        SHPR3 = curr;
    }

    /**
     * Get SHCSR's USGFAULTENA bit.
     */
    bool get_SHCSR_USGFAULTENA()
    {
        return SHCSR & (1u << 18u);
    }

    /**
     * Set SHCSR's USGFAULTENA bit.
     */
    inline void set_SHCSR_USGFAULTENA()
    {
        SHCSR |= 1u << 18u;
    }

    /**
     * Clear SHCSR's USGFAULTENA bit.
     */
    inline void clear_SHCSR_USGFAULTENA()
    {
        SHCSR &= ~(1u << 18u);
    }

    /**
     * Toggle SHCSR's USGFAULTENA bit.
     */
    inline void toggle_SHCSR_USGFAULTENA()
    {
        SHCSR ^= 1u << 18u;
    }

    /**
     * Get SHCSR's BUSFAULTENA bit.
     */
    bool get_SHCSR_BUSFAULTENA()
    {
        return SHCSR & (1u << 17u);
    }

    /**
     * Set SHCSR's BUSFAULTENA bit.
     */
    inline void set_SHCSR_BUSFAULTENA()
    {
        SHCSR |= 1u << 17u;
    }

    /**
     * Clear SHCSR's BUSFAULTENA bit.
     */
    inline void clear_SHCSR_BUSFAULTENA()
    {
        SHCSR &= ~(1u << 17u);
    }

    /**
     * Toggle SHCSR's BUSFAULTENA bit.
     */
    inline void toggle_SHCSR_BUSFAULTENA()
    {
        SHCSR ^= 1u << 17u;
    }

    /**
     * Get SHCSR's MEMFAULTENA bit.
     */
    bool get_SHCSR_MEMFAULTENA()
    {
        return SHCSR & (1u << 16u);
    }

    /**
     * Set SHCSR's MEMFAULTENA bit.
     */
    inline void set_SHCSR_MEMFAULTENA()
    {
        SHCSR |= 1u << 16u;
    }

    /**
     * Clear SHCSR's MEMFAULTENA bit.
     */
    inline void clear_SHCSR_MEMFAULTENA()
    {
        SHCSR &= ~(1u << 16u);
    }

    /**
     * Toggle SHCSR's MEMFAULTENA bit.
     */
    inline void toggle_SHCSR_MEMFAULTENA()
    {
        SHCSR ^= 1u << 16u;
    }

    /**
     * Get SHCSR's SVCALLPENDED bit.
     */
    bool get_SHCSR_SVCALLPENDED()
    {
        return SHCSR & (1u << 15u);
    }

    /**
     * Set SHCSR's SVCALLPENDED bit.
     */
    inline void set_SHCSR_SVCALLPENDED()
    {
        SHCSR |= 1u << 15u;
    }

    /**
     * Clear SHCSR's SVCALLPENDED bit.
     */
    inline void clear_SHCSR_SVCALLPENDED()
    {
        SHCSR &= ~(1u << 15u);
    }

    /**
     * Toggle SHCSR's SVCALLPENDED bit.
     */
    inline void toggle_SHCSR_SVCALLPENDED()
    {
        SHCSR ^= 1u << 15u;
    }

    /**
     * Get SHCSR's BUSFAULTPENDED bit.
     */
    bool get_SHCSR_BUSFAULTPENDED()
    {
        return SHCSR & (1u << 14u);
    }

    /**
     * Set SHCSR's BUSFAULTPENDED bit.
     */
    inline void set_SHCSR_BUSFAULTPENDED()
    {
        SHCSR |= 1u << 14u;
    }

    /**
     * Clear SHCSR's BUSFAULTPENDED bit.
     */
    inline void clear_SHCSR_BUSFAULTPENDED()
    {
        SHCSR &= ~(1u << 14u);
    }

    /**
     * Toggle SHCSR's BUSFAULTPENDED bit.
     */
    inline void toggle_SHCSR_BUSFAULTPENDED()
    {
        SHCSR ^= 1u << 14u;
    }

    /**
     * Get SHCSR's MEMFAULTPENDED bit.
     */
    bool get_SHCSR_MEMFAULTPENDED()
    {
        return SHCSR & (1u << 13u);
    }

    /**
     * Set SHCSR's MEMFAULTPENDED bit.
     */
    inline void set_SHCSR_MEMFAULTPENDED()
    {
        SHCSR |= 1u << 13u;
    }

    /**
     * Clear SHCSR's MEMFAULTPENDED bit.
     */
    inline void clear_SHCSR_MEMFAULTPENDED()
    {
        SHCSR &= ~(1u << 13u);
    }

    /**
     * Toggle SHCSR's MEMFAULTPENDED bit.
     */
    inline void toggle_SHCSR_MEMFAULTPENDED()
    {
        SHCSR ^= 1u << 13u;
    }

    /**
     * Get SHCSR's USGFAULTPENDED bit.
     */
    bool get_SHCSR_USGFAULTPENDED()
    {
        return SHCSR & (1u << 12u);
    }

    /**
     * Set SHCSR's USGFAULTPENDED bit.
     */
    inline void set_SHCSR_USGFAULTPENDED()
    {
        SHCSR |= 1u << 12u;
    }

    /**
     * Clear SHCSR's USGFAULTPENDED bit.
     */
    inline void clear_SHCSR_USGFAULTPENDED()
    {
        SHCSR &= ~(1u << 12u);
    }

    /**
     * Toggle SHCSR's USGFAULTPENDED bit.
     */
    inline void toggle_SHCSR_USGFAULTPENDED()
    {
        SHCSR ^= 1u << 12u;
    }

    /**
     * Get SHCSR's SYSTICKACT bit.
     */
    bool get_SHCSR_SYSTICKACT()
    {
        return SHCSR & (1u << 11u);
    }

    /**
     * Set SHCSR's SYSTICKACT bit.
     */
    inline void set_SHCSR_SYSTICKACT()
    {
        SHCSR |= 1u << 11u;
    }

    /**
     * Clear SHCSR's SYSTICKACT bit.
     */
    inline void clear_SHCSR_SYSTICKACT()
    {
        SHCSR &= ~(1u << 11u);
    }

    /**
     * Toggle SHCSR's SYSTICKACT bit.
     */
    inline void toggle_SHCSR_SYSTICKACT()
    {
        SHCSR ^= 1u << 11u;
    }

    /**
     * Get SHCSR's PENDSVACT bit.
     */
    bool get_SHCSR_PENDSVACT()
    {
        return SHCSR & (1u << 10u);
    }

    /**
     * Set SHCSR's PENDSVACT bit.
     */
    inline void set_SHCSR_PENDSVACT()
    {
        SHCSR |= 1u << 10u;
    }

    /**
     * Clear SHCSR's PENDSVACT bit.
     */
    inline void clear_SHCSR_PENDSVACT()
    {
        SHCSR &= ~(1u << 10u);
    }

    /**
     * Toggle SHCSR's PENDSVACT bit.
     */
    inline void toggle_SHCSR_PENDSVACT()
    {
        SHCSR ^= 1u << 10u;
    }

    /**
     * Get SHCSR's MONITORACT bit.
     */
    bool get_SHCSR_MONITORACT()
    {
        return SHCSR & (1u << 8u);
    }

    /**
     * Set SHCSR's MONITORACT bit.
     */
    inline void set_SHCSR_MONITORACT()
    {
        SHCSR |= 1u << 8u;
    }

    /**
     * Clear SHCSR's MONITORACT bit.
     */
    inline void clear_SHCSR_MONITORACT()
    {
        SHCSR &= ~(1u << 8u);
    }

    /**
     * Toggle SHCSR's MONITORACT bit.
     */
    inline void toggle_SHCSR_MONITORACT()
    {
        SHCSR ^= 1u << 8u;
    }

    /**
     * Get SHCSR's SVCALLACT bit.
     */
    bool get_SHCSR_SVCALLACT()
    {
        return SHCSR & (1u << 7u);
    }

    /**
     * Set SHCSR's SVCALLACT bit.
     */
    inline void set_SHCSR_SVCALLACT()
    {
        SHCSR |= 1u << 7u;
    }

    /**
     * Clear SHCSR's SVCALLACT bit.
     */
    inline void clear_SHCSR_SVCALLACT()
    {
        SHCSR &= ~(1u << 7u);
    }

    /**
     * Toggle SHCSR's SVCALLACT bit.
     */
    inline void toggle_SHCSR_SVCALLACT()
    {
        SHCSR ^= 1u << 7u;
    }

    /**
     * Get SHCSR's USGFAULTACT bit.
     */
    bool get_SHCSR_USGFAULTACT()
    {
        return SHCSR & (1u << 3u);
    }

    /**
     * Set SHCSR's USGFAULTACT bit.
     */
    inline void set_SHCSR_USGFAULTACT()
    {
        SHCSR |= 1u << 3u;
    }

    /**
     * Clear SHCSR's USGFAULTACT bit.
     */
    inline void clear_SHCSR_USGFAULTACT()
    {
        SHCSR &= ~(1u << 3u);
    }

    /**
     * Toggle SHCSR's USGFAULTACT bit.
     */
    inline void toggle_SHCSR_USGFAULTACT()
    {
        SHCSR ^= 1u << 3u;
    }

    /**
     * Get SHCSR's BUSFAULTACT bit.
     */
    bool get_SHCSR_BUSFAULTACT()
    {
        return SHCSR & (1u << 1u);
    }

    /**
     * Set SHCSR's BUSFAULTACT bit.
     */
    inline void set_SHCSR_BUSFAULTACT()
    {
        SHCSR |= 1u << 1u;
    }

    /**
     * Clear SHCSR's BUSFAULTACT bit.
     */
    inline void clear_SHCSR_BUSFAULTACT()
    {
        SHCSR &= ~(1u << 1u);
    }

    /**
     * Toggle SHCSR's BUSFAULTACT bit.
     */
    inline void toggle_SHCSR_BUSFAULTACT()
    {
        SHCSR ^= 1u << 1u;
    }

    /**
     * Get SHCSR's MEMFAULTACT bit.
     */
    bool get_SHCSR_MEMFAULTACT()
    {
        return SHCSR & (1u << 0u);
    }

    /**
     * Set SHCSR's MEMFAULTACT bit.
     */
    inline void set_SHCSR_MEMFAULTACT()
    {
        SHCSR |= 1u << 0u;
    }

    /**
     * Clear SHCSR's MEMFAULTACT bit.
     */
    inline void clear_SHCSR_MEMFAULTACT()
    {
        SHCSR &= ~(1u << 0u);
    }

    /**
     * Toggle SHCSR's MEMFAULTACT bit.
     */
    inline void toggle_SHCSR_MEMFAULTACT()
    {
        SHCSR ^= 1u << 0u;
    }

    /**
     * Get CFSR's DIVBYZERO bit.
     */
    PPB_CFSR_DIVBYZERO get_CFSR_DIVBYZERO()
    {
        return PPB_CFSR_DIVBYZERO(CFSR & (1u << 25u));
    }

    /**
     * Set CFSR's DIVBYZERO bit.
     */
    inline void set_CFSR_DIVBYZERO()
    {
        CFSR |= 1u << 25u;
    }

    /**
     * Clear CFSR's DIVBYZERO bit.
     */
    inline void clear_CFSR_DIVBYZERO()
    {
        CFSR &= ~(1u << 25u);
    }

    /**
     * Toggle CFSR's DIVBYZERO bit.
     */
    inline void toggle_CFSR_DIVBYZERO()
    {
        CFSR ^= 1u << 25u;
    }

    /**
     * Get CFSR's UNALIGNED bit.
     */
    PPB_CFSR_UNALIGNED get_CFSR_UNALIGNED()
    {
        return PPB_CFSR_UNALIGNED(CFSR & (1u << 24u));
    }

    /**
     * Set CFSR's UNALIGNED bit.
     */
    inline void set_CFSR_UNALIGNED()
    {
        CFSR |= 1u << 24u;
    }

    /**
     * Clear CFSR's UNALIGNED bit.
     */
    inline void clear_CFSR_UNALIGNED()
    {
        CFSR &= ~(1u << 24u);
    }

    /**
     * Toggle CFSR's UNALIGNED bit.
     */
    inline void toggle_CFSR_UNALIGNED()
    {
        CFSR ^= 1u << 24u;
    }

    /**
     * Get CFSR's NOCP bit.
     */
    PPB_CFSR_NOCP get_CFSR_NOCP()
    {
        return PPB_CFSR_NOCP(CFSR & (1u << 19u));
    }

    /**
     * Set CFSR's NOCP bit.
     */
    inline void set_CFSR_NOCP()
    {
        CFSR |= 1u << 19u;
    }

    /**
     * Clear CFSR's NOCP bit.
     */
    inline void clear_CFSR_NOCP()
    {
        CFSR &= ~(1u << 19u);
    }

    /**
     * Toggle CFSR's NOCP bit.
     */
    inline void toggle_CFSR_NOCP()
    {
        CFSR ^= 1u << 19u;
    }

    /**
     * Get CFSR's INVPC bit.
     */
    PPB_CFSR_INVPC get_CFSR_INVPC()
    {
        return PPB_CFSR_INVPC(CFSR & (1u << 18u));
    }

    /**
     * Set CFSR's INVPC bit.
     */
    inline void set_CFSR_INVPC()
    {
        CFSR |= 1u << 18u;
    }

    /**
     * Clear CFSR's INVPC bit.
     */
    inline void clear_CFSR_INVPC()
    {
        CFSR &= ~(1u << 18u);
    }

    /**
     * Toggle CFSR's INVPC bit.
     */
    inline void toggle_CFSR_INVPC()
    {
        CFSR ^= 1u << 18u;
    }

    /**
     * Get CFSR's INVSTATE bit.
     */
    PPB_CFSR_INVSTATE get_CFSR_INVSTATE()
    {
        return PPB_CFSR_INVSTATE(CFSR & (1u << 17u));
    }

    /**
     * Set CFSR's INVSTATE bit.
     */
    inline void set_CFSR_INVSTATE()
    {
        CFSR |= 1u << 17u;
    }

    /**
     * Clear CFSR's INVSTATE bit.
     */
    inline void clear_CFSR_INVSTATE()
    {
        CFSR &= ~(1u << 17u);
    }

    /**
     * Toggle CFSR's INVSTATE bit.
     */
    inline void toggle_CFSR_INVSTATE()
    {
        CFSR ^= 1u << 17u;
    }

    /**
     * Get CFSR's UNDEFINSTR bit.
     */
    PPB_CFSR_UNDEFINSTR get_CFSR_UNDEFINSTR()
    {
        return PPB_CFSR_UNDEFINSTR(CFSR & (1u << 16u));
    }

    /**
     * Set CFSR's UNDEFINSTR bit.
     */
    inline void set_CFSR_UNDEFINSTR()
    {
        CFSR |= 1u << 16u;
    }

    /**
     * Clear CFSR's UNDEFINSTR bit.
     */
    inline void clear_CFSR_UNDEFINSTR()
    {
        CFSR &= ~(1u << 16u);
    }

    /**
     * Toggle CFSR's UNDEFINSTR bit.
     */
    inline void toggle_CFSR_UNDEFINSTR()
    {
        CFSR ^= 1u << 16u;
    }

    /**
     * Get CFSR's BFARVALID bit.
     */
    PPB_CFSR_BFARVALID get_CFSR_BFARVALID()
    {
        return PPB_CFSR_BFARVALID(CFSR & (1u << 15u));
    }

    /**
     * Set CFSR's BFARVALID bit.
     */
    inline void set_CFSR_BFARVALID()
    {
        CFSR |= 1u << 15u;
    }

    /**
     * Clear CFSR's BFARVALID bit.
     */
    inline void clear_CFSR_BFARVALID()
    {
        CFSR &= ~(1u << 15u);
    }

    /**
     * Toggle CFSR's BFARVALID bit.
     */
    inline void toggle_CFSR_BFARVALID()
    {
        CFSR ^= 1u << 15u;
    }

    /**
     * Get CFSR's LSPERR bit.
     */
    PPB_CFSR_LSPERR get_CFSR_LSPERR()
    {
        return PPB_CFSR_LSPERR(CFSR & (1u << 13u));
    }

    /**
     * Set CFSR's LSPERR bit.
     */
    inline void set_CFSR_LSPERR()
    {
        CFSR |= 1u << 13u;
    }

    /**
     * Clear CFSR's LSPERR bit.
     */
    inline void clear_CFSR_LSPERR()
    {
        CFSR &= ~(1u << 13u);
    }

    /**
     * Toggle CFSR's LSPERR bit.
     */
    inline void toggle_CFSR_LSPERR()
    {
        CFSR ^= 1u << 13u;
    }

    /**
     * Get CFSR's STKERR bit.
     */
    PPB_CFSR_STKERR get_CFSR_STKERR()
    {
        return PPB_CFSR_STKERR(CFSR & (1u << 12u));
    }

    /**
     * Set CFSR's STKERR bit.
     */
    inline void set_CFSR_STKERR()
    {
        CFSR |= 1u << 12u;
    }

    /**
     * Clear CFSR's STKERR bit.
     */
    inline void clear_CFSR_STKERR()
    {
        CFSR &= ~(1u << 12u);
    }

    /**
     * Toggle CFSR's STKERR bit.
     */
    inline void toggle_CFSR_STKERR()
    {
        CFSR ^= 1u << 12u;
    }

    /**
     * Get CFSR's UNSTKERR bit.
     */
    PPB_CFSR_UNSTKERR get_CFSR_UNSTKERR()
    {
        return PPB_CFSR_UNSTKERR(CFSR & (1u << 11u));
    }

    /**
     * Set CFSR's UNSTKERR bit.
     */
    inline void set_CFSR_UNSTKERR()
    {
        CFSR |= 1u << 11u;
    }

    /**
     * Clear CFSR's UNSTKERR bit.
     */
    inline void clear_CFSR_UNSTKERR()
    {
        CFSR &= ~(1u << 11u);
    }

    /**
     * Toggle CFSR's UNSTKERR bit.
     */
    inline void toggle_CFSR_UNSTKERR()
    {
        CFSR ^= 1u << 11u;
    }

    /**
     * Get CFSR's IMPRECISERR bit.
     */
    PPB_CFSR_IMPRECISERR get_CFSR_IMPRECISERR()
    {
        return PPB_CFSR_IMPRECISERR(CFSR & (1u << 10u));
    }

    /**
     * Set CFSR's IMPRECISERR bit.
     */
    inline void set_CFSR_IMPRECISERR()
    {
        CFSR |= 1u << 10u;
    }

    /**
     * Clear CFSR's IMPRECISERR bit.
     */
    inline void clear_CFSR_IMPRECISERR()
    {
        CFSR &= ~(1u << 10u);
    }

    /**
     * Toggle CFSR's IMPRECISERR bit.
     */
    inline void toggle_CFSR_IMPRECISERR()
    {
        CFSR ^= 1u << 10u;
    }

    /**
     * Get CFSR's PRECISERR bit.
     */
    PPB_CFSR_PRECISERR get_CFSR_PRECISERR()
    {
        return PPB_CFSR_PRECISERR(CFSR & (1u << 9u));
    }

    /**
     * Set CFSR's PRECISERR bit.
     */
    inline void set_CFSR_PRECISERR()
    {
        CFSR |= 1u << 9u;
    }

    /**
     * Clear CFSR's PRECISERR bit.
     */
    inline void clear_CFSR_PRECISERR()
    {
        CFSR &= ~(1u << 9u);
    }

    /**
     * Toggle CFSR's PRECISERR bit.
     */
    inline void toggle_CFSR_PRECISERR()
    {
        CFSR ^= 1u << 9u;
    }

    /**
     * Get CFSR's IBUSERR bit.
     */
    PPB_CFSR_IBUSERR get_CFSR_IBUSERR()
    {
        return PPB_CFSR_IBUSERR(CFSR & (1u << 8u));
    }

    /**
     * Set CFSR's IBUSERR bit.
     */
    inline void set_CFSR_IBUSERR()
    {
        CFSR |= 1u << 8u;
    }

    /**
     * Clear CFSR's IBUSERR bit.
     */
    inline void clear_CFSR_IBUSERR()
    {
        CFSR &= ~(1u << 8u);
    }

    /**
     * Toggle CFSR's IBUSERR bit.
     */
    inline void toggle_CFSR_IBUSERR()
    {
        CFSR ^= 1u << 8u;
    }

    /**
     * Get CFSR's MMARVALID bit.
     */
    PPB_CFSR_MMARVALID get_CFSR_MMARVALID()
    {
        return PPB_CFSR_MMARVALID(CFSR & (1u << 7u));
    }

    /**
     * Set CFSR's MMARVALID bit.
     */
    inline void set_CFSR_MMARVALID()
    {
        CFSR |= 1u << 7u;
    }

    /**
     * Clear CFSR's MMARVALID bit.
     */
    inline void clear_CFSR_MMARVALID()
    {
        CFSR &= ~(1u << 7u);
    }

    /**
     * Toggle CFSR's MMARVALID bit.
     */
    inline void toggle_CFSR_MMARVALID()
    {
        CFSR ^= 1u << 7u;
    }

    /**
     * Get CFSR's MLSPERR bit.
     */
    PPB_CFSR_MLSPERR get_CFSR_MLSPERR()
    {
        return PPB_CFSR_MLSPERR(CFSR & (1u << 5u));
    }

    /**
     * Set CFSR's MLSPERR bit.
     */
    inline void set_CFSR_MLSPERR()
    {
        CFSR |= 1u << 5u;
    }

    /**
     * Clear CFSR's MLSPERR bit.
     */
    inline void clear_CFSR_MLSPERR()
    {
        CFSR &= ~(1u << 5u);
    }

    /**
     * Toggle CFSR's MLSPERR bit.
     */
    inline void toggle_CFSR_MLSPERR()
    {
        CFSR ^= 1u << 5u;
    }

    /**
     * Get CFSR's MSTKERR bit.
     */
    PPB_CFSR_MSTKERR get_CFSR_MSTKERR()
    {
        return PPB_CFSR_MSTKERR(CFSR & (1u << 4u));
    }

    /**
     * Set CFSR's MSTKERR bit.
     */
    inline void set_CFSR_MSTKERR()
    {
        CFSR |= 1u << 4u;
    }

    /**
     * Clear CFSR's MSTKERR bit.
     */
    inline void clear_CFSR_MSTKERR()
    {
        CFSR &= ~(1u << 4u);
    }

    /**
     * Toggle CFSR's MSTKERR bit.
     */
    inline void toggle_CFSR_MSTKERR()
    {
        CFSR ^= 1u << 4u;
    }

    /**
     * Get CFSR's MUNSTKERR bit.
     */
    PPB_CFSR_MUNSTKERR get_CFSR_MUNSTKERR()
    {
        return PPB_CFSR_MUNSTKERR(CFSR & (1u << 3u));
    }

    /**
     * Set CFSR's MUNSTKERR bit.
     */
    inline void set_CFSR_MUNSTKERR()
    {
        CFSR |= 1u << 3u;
    }

    /**
     * Clear CFSR's MUNSTKERR bit.
     */
    inline void clear_CFSR_MUNSTKERR()
    {
        CFSR &= ~(1u << 3u);
    }

    /**
     * Toggle CFSR's MUNSTKERR bit.
     */
    inline void toggle_CFSR_MUNSTKERR()
    {
        CFSR ^= 1u << 3u;
    }

    /**
     * Get CFSR's DACCVIOL bit.
     */
    PPB_CFSR_DACCVIOL get_CFSR_DACCVIOL()
    {
        return PPB_CFSR_DACCVIOL(CFSR & (1u << 1u));
    }

    /**
     * Set CFSR's DACCVIOL bit.
     */
    inline void set_CFSR_DACCVIOL()
    {
        CFSR |= 1u << 1u;
    }

    /**
     * Clear CFSR's DACCVIOL bit.
     */
    inline void clear_CFSR_DACCVIOL()
    {
        CFSR &= ~(1u << 1u);
    }

    /**
     * Toggle CFSR's DACCVIOL bit.
     */
    inline void toggle_CFSR_DACCVIOL()
    {
        CFSR ^= 1u << 1u;
    }

    /**
     * Get CFSR's IACCVIOL bit.
     */
    PPB_CFSR_IACCVIOL get_CFSR_IACCVIOL()
    {
        return PPB_CFSR_IACCVIOL(CFSR & (1u << 0u));
    }

    /**
     * Set CFSR's IACCVIOL bit.
     */
    inline void set_CFSR_IACCVIOL()
    {
        CFSR |= 1u << 0u;
    }

    /**
     * Clear CFSR's IACCVIOL bit.
     */
    inline void clear_CFSR_IACCVIOL()
    {
        CFSR &= ~(1u << 0u);
    }

    /**
     * Toggle CFSR's IACCVIOL bit.
     */
    inline void toggle_CFSR_IACCVIOL()
    {
        CFSR ^= 1u << 0u;
    }

    /**
     * Get HFSR's DEBUGEVT bit.
     */
    bool get_HFSR_DEBUGEVT()
    {
        return HFSR & (1u << 31u);
    }

    /**
     * Set HFSR's DEBUGEVT bit.
     */
    inline void set_HFSR_DEBUGEVT()
    {
        HFSR |= 1u << 31u;
    }

    /**
     * Clear HFSR's DEBUGEVT bit.
     */
    inline void clear_HFSR_DEBUGEVT()
    {
        HFSR &= ~(1u << 31u);
    }

    /**
     * Toggle HFSR's DEBUGEVT bit.
     */
    inline void toggle_HFSR_DEBUGEVT()
    {
        HFSR ^= 1u << 31u;
    }

    /**
     * Get HFSR's FORCED bit.
     */
    PPB_HFSR_FORCED get_HFSR_FORCED()
    {
        return PPB_HFSR_FORCED(HFSR & (1u << 30u));
    }

    /**
     * Set HFSR's FORCED bit.
     */
    inline void set_HFSR_FORCED()
    {
        HFSR |= 1u << 30u;
    }

    /**
     * Clear HFSR's FORCED bit.
     */
    inline void clear_HFSR_FORCED()
    {
        HFSR &= ~(1u << 30u);
    }

    /**
     * Toggle HFSR's FORCED bit.
     */
    inline void toggle_HFSR_FORCED()
    {
        HFSR ^= 1u << 30u;
    }

    /**
     * Get HFSR's VECTTBL bit.
     */
    PPB_HFSR_VECTTBL get_HFSR_VECTTBL()
    {
        return PPB_HFSR_VECTTBL(HFSR & (1u << 1u));
    }

    /**
     * Set HFSR's VECTTBL bit.
     */
    inline void set_HFSR_VECTTBL()
    {
        HFSR |= 1u << 1u;
    }

    /**
     * Clear HFSR's VECTTBL bit.
     */
    inline void clear_HFSR_VECTTBL()
    {
        HFSR &= ~(1u << 1u);
    }

    /**
     * Toggle HFSR's VECTTBL bit.
     */
    inline void toggle_HFSR_VECTTBL()
    {
        HFSR ^= 1u << 1u;
    }

    /**
     * Get MMFAR's ADDRESS field.
     */
    uint32_t get_MMFAR_ADDRESS()
    {
        return (MMFAR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set MMFAR's ADDRESS field.
     */
    inline void set_MMFAR_ADDRESS(uint32_t value)
    {
        uint32_t curr = MMFAR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        MMFAR = curr;
    }

    /**
     * Get BFAR's ADDRESS field.
     */
    uint32_t get_BFAR_ADDRESS()
    {
        return (BFAR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set BFAR's ADDRESS field.
     */
    inline void set_BFAR_ADDRESS(uint32_t value)
    {
        uint32_t curr = BFAR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        BFAR = curr;
    }

    /**
     * Get AFSR's VALUE field.
     */
    uint32_t get_AFSR_VALUE()
    {
        return (AFSR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set AFSR's VALUE field.
     */
    inline void set_AFSR_VALUE(uint32_t value)
    {
        uint32_t curr = AFSR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        AFSR = curr;
    }

    /**
     * Get CPACR's CP11 field.
     */
    PPB_CPACR_CP11 get_CPACR_CP11()
    {
        return PPB_CPACR_CP11((CPACR >> 22u) & 0b11u);
    }

    /**
     * Set CPACR's CP11 field.
     */
    inline void set_CPACR_CP11(PPB_CPACR_CP11 value)
    {
        uint32_t curr = CPACR;

        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(value) & 0b11u) << 22u;

        CPACR = curr;
    }

    /**
     * Get CPACR's CP10 field.
     */
    PPB_CPACR_CP10 get_CPACR_CP10()
    {
        return PPB_CPACR_CP10((CPACR >> 20u) & 0b11u);
    }

    /**
     * Set CPACR's CP10 field.
     */
    inline void set_CPACR_CP10(PPB_CPACR_CP10 value)
    {
        uint32_t curr = CPACR;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        CPACR = curr;
    }

    /**
     * Get MPU_TYPE's IREGION field.
     */
    uint8_t get_MPU_TYPE_IREGION()
    {
        return (MPU_TYPE >> 16u) & 0b11111111u;
    }

    /**
     * Get MPU_TYPE's DREGION field.
     */
    uint8_t get_MPU_TYPE_DREGION()
    {
        return (MPU_TYPE >> 8u) & 0b11111111u;
    }

    /**
     * Get MPU_TYPE's SEPARATE bit.
     */
    bool get_MPU_TYPE_SEPARATE()
    {
        return MPU_TYPE & (1u << 0u);
    }

    /**
     * Get MPU_CTRL's PRIVDEFENA bit.
     */
    PPB_MPU_CTRL_PRIVDEFENA get_MPU_CTRL_PRIVDEFENA()
    {
        return PPB_MPU_CTRL_PRIVDEFENA(MPU_CTRL & (1u << 2u));
    }

    /**
     * Set MPU_CTRL's PRIVDEFENA bit.
     */
    inline void set_MPU_CTRL_PRIVDEFENA()
    {
        MPU_CTRL |= 1u << 2u;
    }

    /**
     * Clear MPU_CTRL's PRIVDEFENA bit.
     */
    inline void clear_MPU_CTRL_PRIVDEFENA()
    {
        MPU_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle MPU_CTRL's PRIVDEFENA bit.
     */
    inline void toggle_MPU_CTRL_PRIVDEFENA()
    {
        MPU_CTRL ^= 1u << 2u;
    }

    /**
     * Get MPU_CTRL's HFNMIENA bit.
     */
    PPB_MPU_CTRL_HFNMIENA get_MPU_CTRL_HFNMIENA()
    {
        return PPB_MPU_CTRL_HFNMIENA(MPU_CTRL & (1u << 1u));
    }

    /**
     * Set MPU_CTRL's HFNMIENA bit.
     */
    inline void set_MPU_CTRL_HFNMIENA()
    {
        MPU_CTRL |= 1u << 1u;
    }

    /**
     * Clear MPU_CTRL's HFNMIENA bit.
     */
    inline void clear_MPU_CTRL_HFNMIENA()
    {
        MPU_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle MPU_CTRL's HFNMIENA bit.
     */
    inline void toggle_MPU_CTRL_HFNMIENA()
    {
        MPU_CTRL ^= 1u << 1u;
    }

    /**
     * Get MPU_CTRL's ENABLE bit.
     */
    PPB_MPU_CTRL_ENABLE get_MPU_CTRL_ENABLE()
    {
        return PPB_MPU_CTRL_ENABLE(MPU_CTRL & (1u << 0u));
    }

    /**
     * Set MPU_CTRL's ENABLE bit.
     */
    inline void set_MPU_CTRL_ENABLE()
    {
        MPU_CTRL |= 1u << 0u;
    }

    /**
     * Clear MPU_CTRL's ENABLE bit.
     */
    inline void clear_MPU_CTRL_ENABLE()
    {
        MPU_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle MPU_CTRL's ENABLE bit.
     */
    inline void toggle_MPU_CTRL_ENABLE()
    {
        MPU_CTRL ^= 1u << 0u;
    }

    /**
     * Get MPU_RNR's REGION field.
     */
    uint8_t get_MPU_RNR_REGION()
    {
        return (MPU_RNR >> 0u) & 0b11111111u;
    }

    /**
     * Set MPU_RNR's REGION field.
     */
    inline void set_MPU_RNR_REGION(uint8_t value)
    {
        uint32_t curr = MPU_RNR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        MPU_RNR = curr;
    }

    /**
     * Get MPU_RBAR's ADDR field.
     */
    uint32_t get_MPU_RBAR_ADDR()
    {
        return (MPU_RBAR >> 9u) & 0b11111111111111111111111u;
    }

    /**
     * Set MPU_RBAR's ADDR field.
     */
    inline void set_MPU_RBAR_ADDR(uint32_t value)
    {
        uint32_t curr = MPU_RBAR;

        curr &= ~(0b11111111111111111111111u << 9u);
        curr |= (value & 0b11111111111111111111111u) << 9u;

        MPU_RBAR = curr;
    }

    /**
     * Get MPU_RBAR's VALID bit.
     */
    PPB_MPU_RBAR_VALID get_MPU_RBAR_VALID()
    {
        return PPB_MPU_RBAR_VALID(MPU_RBAR & (1u << 4u));
    }

    /**
     * Set MPU_RBAR's VALID bit.
     */
    inline void set_MPU_RBAR_VALID()
    {
        MPU_RBAR |= 1u << 4u;
    }

    /**
     * Clear MPU_RBAR's VALID bit.
     */
    inline void clear_MPU_RBAR_VALID()
    {
        MPU_RBAR &= ~(1u << 4u);
    }

    /**
     * Toggle MPU_RBAR's VALID bit.
     */
    inline void toggle_MPU_RBAR_VALID()
    {
        MPU_RBAR ^= 1u << 4u;
    }

    /**
     * Get MPU_RBAR's REGION field.
     */
    uint8_t get_MPU_RBAR_REGION()
    {
        return (MPU_RBAR >> 0u) & 0b1111u;
    }

    /**
     * Set MPU_RBAR's REGION field.
     */
    inline void set_MPU_RBAR_REGION(uint8_t value)
    {
        uint32_t curr = MPU_RBAR;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        MPU_RBAR = curr;
    }

    /**
     * Get MPU_RASR's XN bit.
     */
    PPB_MPU_RASR_XN get_MPU_RASR_XN()
    {
        return PPB_MPU_RASR_XN(MPU_RASR & (1u << 28u));
    }

    /**
     * Set MPU_RASR's XN bit.
     */
    inline void set_MPU_RASR_XN()
    {
        MPU_RASR |= 1u << 28u;
    }

    /**
     * Clear MPU_RASR's XN bit.
     */
    inline void clear_MPU_RASR_XN()
    {
        MPU_RASR &= ~(1u << 28u);
    }

    /**
     * Toggle MPU_RASR's XN bit.
     */
    inline void toggle_MPU_RASR_XN()
    {
        MPU_RASR ^= 1u << 28u;
    }

    /**
     * Get MPU_RASR's AP field.
     */
    uint8_t get_MPU_RASR_AP()
    {
        return (MPU_RASR >> 24u) & 0b111u;
    }

    /**
     * Set MPU_RASR's AP field.
     */
    inline void set_MPU_RASR_AP(uint8_t value)
    {
        uint32_t curr = MPU_RASR;

        curr &= ~(0b111u << 24u);
        curr |= (value & 0b111u) << 24u;

        MPU_RASR = curr;
    }

    /**
     * Get MPU_RASR's TEX field.
     */
    uint8_t get_MPU_RASR_TEX()
    {
        return (MPU_RASR >> 19u) & 0b111u;
    }

    /**
     * Set MPU_RASR's TEX field.
     */
    inline void set_MPU_RASR_TEX(uint8_t value)
    {
        uint32_t curr = MPU_RASR;

        curr &= ~(0b111u << 19u);
        curr |= (value & 0b111u) << 19u;

        MPU_RASR = curr;
    }

    /**
     * Get MPU_RASR's S bit.
     */
    bool get_MPU_RASR_S()
    {
        return MPU_RASR & (1u << 18u);
    }

    /**
     * Set MPU_RASR's S bit.
     */
    inline void set_MPU_RASR_S()
    {
        MPU_RASR |= 1u << 18u;
    }

    /**
     * Clear MPU_RASR's S bit.
     */
    inline void clear_MPU_RASR_S()
    {
        MPU_RASR &= ~(1u << 18u);
    }

    /**
     * Toggle MPU_RASR's S bit.
     */
    inline void toggle_MPU_RASR_S()
    {
        MPU_RASR ^= 1u << 18u;
    }

    /**
     * Get MPU_RASR's C bit.
     */
    bool get_MPU_RASR_C()
    {
        return MPU_RASR & (1u << 17u);
    }

    /**
     * Set MPU_RASR's C bit.
     */
    inline void set_MPU_RASR_C()
    {
        MPU_RASR |= 1u << 17u;
    }

    /**
     * Clear MPU_RASR's C bit.
     */
    inline void clear_MPU_RASR_C()
    {
        MPU_RASR &= ~(1u << 17u);
    }

    /**
     * Toggle MPU_RASR's C bit.
     */
    inline void toggle_MPU_RASR_C()
    {
        MPU_RASR ^= 1u << 17u;
    }

    /**
     * Get MPU_RASR's B bit.
     */
    bool get_MPU_RASR_B()
    {
        return MPU_RASR & (1u << 16u);
    }

    /**
     * Set MPU_RASR's B bit.
     */
    inline void set_MPU_RASR_B()
    {
        MPU_RASR |= 1u << 16u;
    }

    /**
     * Clear MPU_RASR's B bit.
     */
    inline void clear_MPU_RASR_B()
    {
        MPU_RASR &= ~(1u << 16u);
    }

    /**
     * Toggle MPU_RASR's B bit.
     */
    inline void toggle_MPU_RASR_B()
    {
        MPU_RASR ^= 1u << 16u;
    }

    /**
     * Get MPU_RASR's SRD field.
     */
    PPB_MPU_RASR_SRD get_MPU_RASR_SRD()
    {
        return PPB_MPU_RASR_SRD((MPU_RASR >> 8u) & 0b11111111u);
    }

    /**
     * Set MPU_RASR's SRD field.
     */
    inline void set_MPU_RASR_SRD(PPB_MPU_RASR_SRD value)
    {
        uint32_t curr = MPU_RASR;

        curr &= ~(0b11111111u << 8u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 8u;

        MPU_RASR = curr;
    }

    /**
     * Get MPU_RASR's SIZE field.
     */
    uint8_t get_MPU_RASR_SIZE()
    {
        return (MPU_RASR >> 1u) & 0b11111u;
    }

    /**
     * Set MPU_RASR's SIZE field.
     */
    inline void set_MPU_RASR_SIZE(uint8_t value)
    {
        uint32_t curr = MPU_RASR;

        curr &= ~(0b11111u << 1u);
        curr |= (value & 0b11111u) << 1u;

        MPU_RASR = curr;
    }

    /**
     * Get MPU_RASR's ENABLE bit.
     */
    bool get_MPU_RASR_ENABLE()
    {
        return MPU_RASR & (1u << 0u);
    }

    /**
     * Set MPU_RASR's ENABLE bit.
     */
    inline void set_MPU_RASR_ENABLE()
    {
        MPU_RASR |= 1u << 0u;
    }

    /**
     * Clear MPU_RASR's ENABLE bit.
     */
    inline void clear_MPU_RASR_ENABLE()
    {
        MPU_RASR &= ~(1u << 0u);
    }

    /**
     * Toggle MPU_RASR's ENABLE bit.
     */
    inline void toggle_MPU_RASR_ENABLE()
    {
        MPU_RASR ^= 1u << 0u;
    }

    /**
     * Get MPU_RBAR_A1's ADDR field.
     */
    uint32_t get_MPU_RBAR_A1_ADDR()
    {
        return (MPU_RBAR_A1 >> 9u) & 0b11111111111111111111111u;
    }

    /**
     * Set MPU_RBAR_A1's ADDR field.
     */
    inline void set_MPU_RBAR_A1_ADDR(uint32_t value)
    {
        uint32_t curr = MPU_RBAR_A1;

        curr &= ~(0b11111111111111111111111u << 9u);
        curr |= (value & 0b11111111111111111111111u) << 9u;

        MPU_RBAR_A1 = curr;
    }

    /**
     * Get MPU_RBAR_A1's VALID bit.
     */
    PPB_MPU_RBAR_A1_VALID get_MPU_RBAR_A1_VALID()
    {
        return PPB_MPU_RBAR_A1_VALID(MPU_RBAR_A1 & (1u << 4u));
    }

    /**
     * Set MPU_RBAR_A1's VALID bit.
     */
    inline void set_MPU_RBAR_A1_VALID()
    {
        MPU_RBAR_A1 |= 1u << 4u;
    }

    /**
     * Clear MPU_RBAR_A1's VALID bit.
     */
    inline void clear_MPU_RBAR_A1_VALID()
    {
        MPU_RBAR_A1 &= ~(1u << 4u);
    }

    /**
     * Toggle MPU_RBAR_A1's VALID bit.
     */
    inline void toggle_MPU_RBAR_A1_VALID()
    {
        MPU_RBAR_A1 ^= 1u << 4u;
    }

    /**
     * Get MPU_RBAR_A1's REGION field.
     */
    uint8_t get_MPU_RBAR_A1_REGION()
    {
        return (MPU_RBAR_A1 >> 0u) & 0b1111u;
    }

    /**
     * Set MPU_RBAR_A1's REGION field.
     */
    inline void set_MPU_RBAR_A1_REGION(uint8_t value)
    {
        uint32_t curr = MPU_RBAR_A1;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        MPU_RBAR_A1 = curr;
    }

    /**
     * Get MPU_RASR_A1's XN bit.
     */
    PPB_MPU_RASR_A1_XN get_MPU_RASR_A1_XN()
    {
        return PPB_MPU_RASR_A1_XN(MPU_RASR_A1 & (1u << 28u));
    }

    /**
     * Set MPU_RASR_A1's XN bit.
     */
    inline void set_MPU_RASR_A1_XN()
    {
        MPU_RASR_A1 |= 1u << 28u;
    }

    /**
     * Clear MPU_RASR_A1's XN bit.
     */
    inline void clear_MPU_RASR_A1_XN()
    {
        MPU_RASR_A1 &= ~(1u << 28u);
    }

    /**
     * Toggle MPU_RASR_A1's XN bit.
     */
    inline void toggle_MPU_RASR_A1_XN()
    {
        MPU_RASR_A1 ^= 1u << 28u;
    }

    /**
     * Get MPU_RASR_A1's AP field.
     */
    uint8_t get_MPU_RASR_A1_AP()
    {
        return (MPU_RASR_A1 >> 24u) & 0b111u;
    }

    /**
     * Set MPU_RASR_A1's AP field.
     */
    inline void set_MPU_RASR_A1_AP(uint8_t value)
    {
        uint32_t curr = MPU_RASR_A1;

        curr &= ~(0b111u << 24u);
        curr |= (value & 0b111u) << 24u;

        MPU_RASR_A1 = curr;
    }

    /**
     * Get MPU_RASR_A1's TEX field.
     */
    uint8_t get_MPU_RASR_A1_TEX()
    {
        return (MPU_RASR_A1 >> 19u) & 0b111u;
    }

    /**
     * Set MPU_RASR_A1's TEX field.
     */
    inline void set_MPU_RASR_A1_TEX(uint8_t value)
    {
        uint32_t curr = MPU_RASR_A1;

        curr &= ~(0b111u << 19u);
        curr |= (value & 0b111u) << 19u;

        MPU_RASR_A1 = curr;
    }

    /**
     * Get MPU_RASR_A1's S bit.
     */
    bool get_MPU_RASR_A1_S()
    {
        return MPU_RASR_A1 & (1u << 18u);
    }

    /**
     * Set MPU_RASR_A1's S bit.
     */
    inline void set_MPU_RASR_A1_S()
    {
        MPU_RASR_A1 |= 1u << 18u;
    }

    /**
     * Clear MPU_RASR_A1's S bit.
     */
    inline void clear_MPU_RASR_A1_S()
    {
        MPU_RASR_A1 &= ~(1u << 18u);
    }

    /**
     * Toggle MPU_RASR_A1's S bit.
     */
    inline void toggle_MPU_RASR_A1_S()
    {
        MPU_RASR_A1 ^= 1u << 18u;
    }

    /**
     * Get MPU_RASR_A1's C bit.
     */
    bool get_MPU_RASR_A1_C()
    {
        return MPU_RASR_A1 & (1u << 17u);
    }

    /**
     * Set MPU_RASR_A1's C bit.
     */
    inline void set_MPU_RASR_A1_C()
    {
        MPU_RASR_A1 |= 1u << 17u;
    }

    /**
     * Clear MPU_RASR_A1's C bit.
     */
    inline void clear_MPU_RASR_A1_C()
    {
        MPU_RASR_A1 &= ~(1u << 17u);
    }

    /**
     * Toggle MPU_RASR_A1's C bit.
     */
    inline void toggle_MPU_RASR_A1_C()
    {
        MPU_RASR_A1 ^= 1u << 17u;
    }

    /**
     * Get MPU_RASR_A1's B bit.
     */
    bool get_MPU_RASR_A1_B()
    {
        return MPU_RASR_A1 & (1u << 16u);
    }

    /**
     * Set MPU_RASR_A1's B bit.
     */
    inline void set_MPU_RASR_A1_B()
    {
        MPU_RASR_A1 |= 1u << 16u;
    }

    /**
     * Clear MPU_RASR_A1's B bit.
     */
    inline void clear_MPU_RASR_A1_B()
    {
        MPU_RASR_A1 &= ~(1u << 16u);
    }

    /**
     * Toggle MPU_RASR_A1's B bit.
     */
    inline void toggle_MPU_RASR_A1_B()
    {
        MPU_RASR_A1 ^= 1u << 16u;
    }

    /**
     * Get MPU_RASR_A1's SRD field.
     */
    PPB_MPU_RASR_A1_SRD get_MPU_RASR_A1_SRD()
    {
        return PPB_MPU_RASR_A1_SRD((MPU_RASR_A1 >> 8u) & 0b11111111u);
    }

    /**
     * Set MPU_RASR_A1's SRD field.
     */
    inline void set_MPU_RASR_A1_SRD(PPB_MPU_RASR_A1_SRD value)
    {
        uint32_t curr = MPU_RASR_A1;

        curr &= ~(0b11111111u << 8u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 8u;

        MPU_RASR_A1 = curr;
    }

    /**
     * Get MPU_RASR_A1's SIZE field.
     */
    uint8_t get_MPU_RASR_A1_SIZE()
    {
        return (MPU_RASR_A1 >> 1u) & 0b11111u;
    }

    /**
     * Set MPU_RASR_A1's SIZE field.
     */
    inline void set_MPU_RASR_A1_SIZE(uint8_t value)
    {
        uint32_t curr = MPU_RASR_A1;

        curr &= ~(0b11111u << 1u);
        curr |= (value & 0b11111u) << 1u;

        MPU_RASR_A1 = curr;
    }

    /**
     * Get MPU_RASR_A1's ENABLE bit.
     */
    bool get_MPU_RASR_A1_ENABLE()
    {
        return MPU_RASR_A1 & (1u << 0u);
    }

    /**
     * Set MPU_RASR_A1's ENABLE bit.
     */
    inline void set_MPU_RASR_A1_ENABLE()
    {
        MPU_RASR_A1 |= 1u << 0u;
    }

    /**
     * Clear MPU_RASR_A1's ENABLE bit.
     */
    inline void clear_MPU_RASR_A1_ENABLE()
    {
        MPU_RASR_A1 &= ~(1u << 0u);
    }

    /**
     * Toggle MPU_RASR_A1's ENABLE bit.
     */
    inline void toggle_MPU_RASR_A1_ENABLE()
    {
        MPU_RASR_A1 ^= 1u << 0u;
    }

    /**
     * Get MPU_RBAR_A2's ADDR field.
     */
    uint32_t get_MPU_RBAR_A2_ADDR()
    {
        return (MPU_RBAR_A2 >> 9u) & 0b11111111111111111111111u;
    }

    /**
     * Set MPU_RBAR_A2's ADDR field.
     */
    inline void set_MPU_RBAR_A2_ADDR(uint32_t value)
    {
        uint32_t curr = MPU_RBAR_A2;

        curr &= ~(0b11111111111111111111111u << 9u);
        curr |= (value & 0b11111111111111111111111u) << 9u;

        MPU_RBAR_A2 = curr;
    }

    /**
     * Get MPU_RBAR_A2's VALID bit.
     */
    PPB_MPU_RBAR_A2_VALID get_MPU_RBAR_A2_VALID()
    {
        return PPB_MPU_RBAR_A2_VALID(MPU_RBAR_A2 & (1u << 4u));
    }

    /**
     * Set MPU_RBAR_A2's VALID bit.
     */
    inline void set_MPU_RBAR_A2_VALID()
    {
        MPU_RBAR_A2 |= 1u << 4u;
    }

    /**
     * Clear MPU_RBAR_A2's VALID bit.
     */
    inline void clear_MPU_RBAR_A2_VALID()
    {
        MPU_RBAR_A2 &= ~(1u << 4u);
    }

    /**
     * Toggle MPU_RBAR_A2's VALID bit.
     */
    inline void toggle_MPU_RBAR_A2_VALID()
    {
        MPU_RBAR_A2 ^= 1u << 4u;
    }

    /**
     * Get MPU_RBAR_A2's REGION field.
     */
    uint8_t get_MPU_RBAR_A2_REGION()
    {
        return (MPU_RBAR_A2 >> 0u) & 0b1111u;
    }

    /**
     * Set MPU_RBAR_A2's REGION field.
     */
    inline void set_MPU_RBAR_A2_REGION(uint8_t value)
    {
        uint32_t curr = MPU_RBAR_A2;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        MPU_RBAR_A2 = curr;
    }

    /**
     * Get MPU_RASR_A2's XN bit.
     */
    PPB_MPU_RASR_A2_XN get_MPU_RASR_A2_XN()
    {
        return PPB_MPU_RASR_A2_XN(MPU_RASR_A2 & (1u << 28u));
    }

    /**
     * Set MPU_RASR_A2's XN bit.
     */
    inline void set_MPU_RASR_A2_XN()
    {
        MPU_RASR_A2 |= 1u << 28u;
    }

    /**
     * Clear MPU_RASR_A2's XN bit.
     */
    inline void clear_MPU_RASR_A2_XN()
    {
        MPU_RASR_A2 &= ~(1u << 28u);
    }

    /**
     * Toggle MPU_RASR_A2's XN bit.
     */
    inline void toggle_MPU_RASR_A2_XN()
    {
        MPU_RASR_A2 ^= 1u << 28u;
    }

    /**
     * Get MPU_RASR_A2's AP field.
     */
    uint8_t get_MPU_RASR_A2_AP()
    {
        return (MPU_RASR_A2 >> 24u) & 0b111u;
    }

    /**
     * Set MPU_RASR_A2's AP field.
     */
    inline void set_MPU_RASR_A2_AP(uint8_t value)
    {
        uint32_t curr = MPU_RASR_A2;

        curr &= ~(0b111u << 24u);
        curr |= (value & 0b111u) << 24u;

        MPU_RASR_A2 = curr;
    }

    /**
     * Get MPU_RASR_A2's TEX field.
     */
    uint8_t get_MPU_RASR_A2_TEX()
    {
        return (MPU_RASR_A2 >> 19u) & 0b111u;
    }

    /**
     * Set MPU_RASR_A2's TEX field.
     */
    inline void set_MPU_RASR_A2_TEX(uint8_t value)
    {
        uint32_t curr = MPU_RASR_A2;

        curr &= ~(0b111u << 19u);
        curr |= (value & 0b111u) << 19u;

        MPU_RASR_A2 = curr;
    }

    /**
     * Get MPU_RASR_A2's S bit.
     */
    bool get_MPU_RASR_A2_S()
    {
        return MPU_RASR_A2 & (1u << 18u);
    }

    /**
     * Set MPU_RASR_A2's S bit.
     */
    inline void set_MPU_RASR_A2_S()
    {
        MPU_RASR_A2 |= 1u << 18u;
    }

    /**
     * Clear MPU_RASR_A2's S bit.
     */
    inline void clear_MPU_RASR_A2_S()
    {
        MPU_RASR_A2 &= ~(1u << 18u);
    }

    /**
     * Toggle MPU_RASR_A2's S bit.
     */
    inline void toggle_MPU_RASR_A2_S()
    {
        MPU_RASR_A2 ^= 1u << 18u;
    }

    /**
     * Get MPU_RASR_A2's C bit.
     */
    bool get_MPU_RASR_A2_C()
    {
        return MPU_RASR_A2 & (1u << 17u);
    }

    /**
     * Set MPU_RASR_A2's C bit.
     */
    inline void set_MPU_RASR_A2_C()
    {
        MPU_RASR_A2 |= 1u << 17u;
    }

    /**
     * Clear MPU_RASR_A2's C bit.
     */
    inline void clear_MPU_RASR_A2_C()
    {
        MPU_RASR_A2 &= ~(1u << 17u);
    }

    /**
     * Toggle MPU_RASR_A2's C bit.
     */
    inline void toggle_MPU_RASR_A2_C()
    {
        MPU_RASR_A2 ^= 1u << 17u;
    }

    /**
     * Get MPU_RASR_A2's B bit.
     */
    bool get_MPU_RASR_A2_B()
    {
        return MPU_RASR_A2 & (1u << 16u);
    }

    /**
     * Set MPU_RASR_A2's B bit.
     */
    inline void set_MPU_RASR_A2_B()
    {
        MPU_RASR_A2 |= 1u << 16u;
    }

    /**
     * Clear MPU_RASR_A2's B bit.
     */
    inline void clear_MPU_RASR_A2_B()
    {
        MPU_RASR_A2 &= ~(1u << 16u);
    }

    /**
     * Toggle MPU_RASR_A2's B bit.
     */
    inline void toggle_MPU_RASR_A2_B()
    {
        MPU_RASR_A2 ^= 1u << 16u;
    }

    /**
     * Get MPU_RASR_A2's SRD field.
     */
    PPB_MPU_RASR_A2_SRD get_MPU_RASR_A2_SRD()
    {
        return PPB_MPU_RASR_A2_SRD((MPU_RASR_A2 >> 8u) & 0b11111111u);
    }

    /**
     * Set MPU_RASR_A2's SRD field.
     */
    inline void set_MPU_RASR_A2_SRD(PPB_MPU_RASR_A2_SRD value)
    {
        uint32_t curr = MPU_RASR_A2;

        curr &= ~(0b11111111u << 8u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 8u;

        MPU_RASR_A2 = curr;
    }

    /**
     * Get MPU_RASR_A2's SIZE field.
     */
    uint8_t get_MPU_RASR_A2_SIZE()
    {
        return (MPU_RASR_A2 >> 1u) & 0b11111u;
    }

    /**
     * Set MPU_RASR_A2's SIZE field.
     */
    inline void set_MPU_RASR_A2_SIZE(uint8_t value)
    {
        uint32_t curr = MPU_RASR_A2;

        curr &= ~(0b11111u << 1u);
        curr |= (value & 0b11111u) << 1u;

        MPU_RASR_A2 = curr;
    }

    /**
     * Get MPU_RASR_A2's ENABLE bit.
     */
    bool get_MPU_RASR_A2_ENABLE()
    {
        return MPU_RASR_A2 & (1u << 0u);
    }

    /**
     * Set MPU_RASR_A2's ENABLE bit.
     */
    inline void set_MPU_RASR_A2_ENABLE()
    {
        MPU_RASR_A2 |= 1u << 0u;
    }

    /**
     * Clear MPU_RASR_A2's ENABLE bit.
     */
    inline void clear_MPU_RASR_A2_ENABLE()
    {
        MPU_RASR_A2 &= ~(1u << 0u);
    }

    /**
     * Toggle MPU_RASR_A2's ENABLE bit.
     */
    inline void toggle_MPU_RASR_A2_ENABLE()
    {
        MPU_RASR_A2 ^= 1u << 0u;
    }

    /**
     * Get MPU_RBAR_A3's ADDR field.
     */
    uint32_t get_MPU_RBAR_A3_ADDR()
    {
        return (MPU_RBAR_A3 >> 9u) & 0b11111111111111111111111u;
    }

    /**
     * Set MPU_RBAR_A3's ADDR field.
     */
    inline void set_MPU_RBAR_A3_ADDR(uint32_t value)
    {
        uint32_t curr = MPU_RBAR_A3;

        curr &= ~(0b11111111111111111111111u << 9u);
        curr |= (value & 0b11111111111111111111111u) << 9u;

        MPU_RBAR_A3 = curr;
    }

    /**
     * Get MPU_RBAR_A3's VALID bit.
     */
    PPB_MPU_RBAR_A3_VALID get_MPU_RBAR_A3_VALID()
    {
        return PPB_MPU_RBAR_A3_VALID(MPU_RBAR_A3 & (1u << 4u));
    }

    /**
     * Set MPU_RBAR_A3's VALID bit.
     */
    inline void set_MPU_RBAR_A3_VALID()
    {
        MPU_RBAR_A3 |= 1u << 4u;
    }

    /**
     * Clear MPU_RBAR_A3's VALID bit.
     */
    inline void clear_MPU_RBAR_A3_VALID()
    {
        MPU_RBAR_A3 &= ~(1u << 4u);
    }

    /**
     * Toggle MPU_RBAR_A3's VALID bit.
     */
    inline void toggle_MPU_RBAR_A3_VALID()
    {
        MPU_RBAR_A3 ^= 1u << 4u;
    }

    /**
     * Get MPU_RBAR_A3's REGION field.
     */
    uint8_t get_MPU_RBAR_A3_REGION()
    {
        return (MPU_RBAR_A3 >> 0u) & 0b1111u;
    }

    /**
     * Set MPU_RBAR_A3's REGION field.
     */
    inline void set_MPU_RBAR_A3_REGION(uint8_t value)
    {
        uint32_t curr = MPU_RBAR_A3;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        MPU_RBAR_A3 = curr;
    }

    /**
     * Get MPU_RASR_A3's XN bit.
     */
    PPB_MPU_RASR_A3_XN get_MPU_RASR_A3_XN()
    {
        return PPB_MPU_RASR_A3_XN(MPU_RASR_A3 & (1u << 28u));
    }

    /**
     * Set MPU_RASR_A3's XN bit.
     */
    inline void set_MPU_RASR_A3_XN()
    {
        MPU_RASR_A3 |= 1u << 28u;
    }

    /**
     * Clear MPU_RASR_A3's XN bit.
     */
    inline void clear_MPU_RASR_A3_XN()
    {
        MPU_RASR_A3 &= ~(1u << 28u);
    }

    /**
     * Toggle MPU_RASR_A3's XN bit.
     */
    inline void toggle_MPU_RASR_A3_XN()
    {
        MPU_RASR_A3 ^= 1u << 28u;
    }

    /**
     * Get MPU_RASR_A3's AP field.
     */
    uint8_t get_MPU_RASR_A3_AP()
    {
        return (MPU_RASR_A3 >> 24u) & 0b111u;
    }

    /**
     * Set MPU_RASR_A3's AP field.
     */
    inline void set_MPU_RASR_A3_AP(uint8_t value)
    {
        uint32_t curr = MPU_RASR_A3;

        curr &= ~(0b111u << 24u);
        curr |= (value & 0b111u) << 24u;

        MPU_RASR_A3 = curr;
    }

    /**
     * Get MPU_RASR_A3's TEX field.
     */
    uint8_t get_MPU_RASR_A3_TEX()
    {
        return (MPU_RASR_A3 >> 19u) & 0b111u;
    }

    /**
     * Set MPU_RASR_A3's TEX field.
     */
    inline void set_MPU_RASR_A3_TEX(uint8_t value)
    {
        uint32_t curr = MPU_RASR_A3;

        curr &= ~(0b111u << 19u);
        curr |= (value & 0b111u) << 19u;

        MPU_RASR_A3 = curr;
    }

    /**
     * Get MPU_RASR_A3's S bit.
     */
    bool get_MPU_RASR_A3_S()
    {
        return MPU_RASR_A3 & (1u << 18u);
    }

    /**
     * Set MPU_RASR_A3's S bit.
     */
    inline void set_MPU_RASR_A3_S()
    {
        MPU_RASR_A3 |= 1u << 18u;
    }

    /**
     * Clear MPU_RASR_A3's S bit.
     */
    inline void clear_MPU_RASR_A3_S()
    {
        MPU_RASR_A3 &= ~(1u << 18u);
    }

    /**
     * Toggle MPU_RASR_A3's S bit.
     */
    inline void toggle_MPU_RASR_A3_S()
    {
        MPU_RASR_A3 ^= 1u << 18u;
    }

    /**
     * Get MPU_RASR_A3's C bit.
     */
    bool get_MPU_RASR_A3_C()
    {
        return MPU_RASR_A3 & (1u << 17u);
    }

    /**
     * Set MPU_RASR_A3's C bit.
     */
    inline void set_MPU_RASR_A3_C()
    {
        MPU_RASR_A3 |= 1u << 17u;
    }

    /**
     * Clear MPU_RASR_A3's C bit.
     */
    inline void clear_MPU_RASR_A3_C()
    {
        MPU_RASR_A3 &= ~(1u << 17u);
    }

    /**
     * Toggle MPU_RASR_A3's C bit.
     */
    inline void toggle_MPU_RASR_A3_C()
    {
        MPU_RASR_A3 ^= 1u << 17u;
    }

    /**
     * Get MPU_RASR_A3's B bit.
     */
    bool get_MPU_RASR_A3_B()
    {
        return MPU_RASR_A3 & (1u << 16u);
    }

    /**
     * Set MPU_RASR_A3's B bit.
     */
    inline void set_MPU_RASR_A3_B()
    {
        MPU_RASR_A3 |= 1u << 16u;
    }

    /**
     * Clear MPU_RASR_A3's B bit.
     */
    inline void clear_MPU_RASR_A3_B()
    {
        MPU_RASR_A3 &= ~(1u << 16u);
    }

    /**
     * Toggle MPU_RASR_A3's B bit.
     */
    inline void toggle_MPU_RASR_A3_B()
    {
        MPU_RASR_A3 ^= 1u << 16u;
    }

    /**
     * Get MPU_RASR_A3's SRD field.
     */
    PPB_MPU_RASR_A3_SRD get_MPU_RASR_A3_SRD()
    {
        return PPB_MPU_RASR_A3_SRD((MPU_RASR_A3 >> 8u) & 0b11111111u);
    }

    /**
     * Set MPU_RASR_A3's SRD field.
     */
    inline void set_MPU_RASR_A3_SRD(PPB_MPU_RASR_A3_SRD value)
    {
        uint32_t curr = MPU_RASR_A3;

        curr &= ~(0b11111111u << 8u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 8u;

        MPU_RASR_A3 = curr;
    }

    /**
     * Get MPU_RASR_A3's SIZE field.
     */
    uint8_t get_MPU_RASR_A3_SIZE()
    {
        return (MPU_RASR_A3 >> 1u) & 0b11111u;
    }

    /**
     * Set MPU_RASR_A3's SIZE field.
     */
    inline void set_MPU_RASR_A3_SIZE(uint8_t value)
    {
        uint32_t curr = MPU_RASR_A3;

        curr &= ~(0b11111u << 1u);
        curr |= (value & 0b11111u) << 1u;

        MPU_RASR_A3 = curr;
    }

    /**
     * Get MPU_RASR_A3's ENABLE bit.
     */
    bool get_MPU_RASR_A3_ENABLE()
    {
        return MPU_RASR_A3 & (1u << 0u);
    }

    /**
     * Set MPU_RASR_A3's ENABLE bit.
     */
    inline void set_MPU_RASR_A3_ENABLE()
    {
        MPU_RASR_A3 |= 1u << 0u;
    }

    /**
     * Clear MPU_RASR_A3's ENABLE bit.
     */
    inline void clear_MPU_RASR_A3_ENABLE()
    {
        MPU_RASR_A3 &= ~(1u << 0u);
    }

    /**
     * Toggle MPU_RASR_A3's ENABLE bit.
     */
    inline void toggle_MPU_RASR_A3_ENABLE()
    {
        MPU_RASR_A3 ^= 1u << 0u;
    }

    /**
     * Set STIR's INTID field.
     */
    inline void set_STIR_INTID(uint16_t value)
    {
        uint32_t curr = STIR;

        curr &= ~(0b111111111u << 0u);
        curr |= (value & 0b111111111u) << 0u;

        STIR = curr;
    }

    /**
     * Get FPCCR's ASPEN bit.
     */
    PPB_FPCCR_ASPEN get_FPCCR_ASPEN()
    {
        return PPB_FPCCR_ASPEN(FPCCR & (1u << 31u));
    }

    /**
     * Set FPCCR's ASPEN bit.
     */
    inline void set_FPCCR_ASPEN()
    {
        FPCCR |= 1u << 31u;
    }

    /**
     * Clear FPCCR's ASPEN bit.
     */
    inline void clear_FPCCR_ASPEN()
    {
        FPCCR &= ~(1u << 31u);
    }

    /**
     * Toggle FPCCR's ASPEN bit.
     */
    inline void toggle_FPCCR_ASPEN()
    {
        FPCCR ^= 1u << 31u;
    }

    /**
     * Get FPCCR's LSPEN bit.
     */
    PPB_FPCCR_LSPEN get_FPCCR_LSPEN()
    {
        return PPB_FPCCR_LSPEN(FPCCR & (1u << 30u));
    }

    /**
     * Set FPCCR's LSPEN bit.
     */
    inline void set_FPCCR_LSPEN()
    {
        FPCCR |= 1u << 30u;
    }

    /**
     * Clear FPCCR's LSPEN bit.
     */
    inline void clear_FPCCR_LSPEN()
    {
        FPCCR &= ~(1u << 30u);
    }

    /**
     * Toggle FPCCR's LSPEN bit.
     */
    inline void toggle_FPCCR_LSPEN()
    {
        FPCCR ^= 1u << 30u;
    }

    /**
     * Get FPCCR's MONRDY bit.
     */
    PPB_FPCCR_MONRDY get_FPCCR_MONRDY()
    {
        return PPB_FPCCR_MONRDY(FPCCR & (1u << 8u));
    }

    /**
     * Set FPCCR's MONRDY bit.
     */
    inline void set_FPCCR_MONRDY()
    {
        FPCCR |= 1u << 8u;
    }

    /**
     * Clear FPCCR's MONRDY bit.
     */
    inline void clear_FPCCR_MONRDY()
    {
        FPCCR &= ~(1u << 8u);
    }

    /**
     * Toggle FPCCR's MONRDY bit.
     */
    inline void toggle_FPCCR_MONRDY()
    {
        FPCCR ^= 1u << 8u;
    }

    /**
     * Get FPCCR's BFRDY bit.
     */
    PPB_FPCCR_BFRDY get_FPCCR_BFRDY()
    {
        return PPB_FPCCR_BFRDY(FPCCR & (1u << 6u));
    }

    /**
     * Set FPCCR's BFRDY bit.
     */
    inline void set_FPCCR_BFRDY()
    {
        FPCCR |= 1u << 6u;
    }

    /**
     * Clear FPCCR's BFRDY bit.
     */
    inline void clear_FPCCR_BFRDY()
    {
        FPCCR &= ~(1u << 6u);
    }

    /**
     * Toggle FPCCR's BFRDY bit.
     */
    inline void toggle_FPCCR_BFRDY()
    {
        FPCCR ^= 1u << 6u;
    }

    /**
     * Get FPCCR's MMRDY bit.
     */
    PPB_FPCCR_MMRDY get_FPCCR_MMRDY()
    {
        return PPB_FPCCR_MMRDY(FPCCR & (1u << 5u));
    }

    /**
     * Set FPCCR's MMRDY bit.
     */
    inline void set_FPCCR_MMRDY()
    {
        FPCCR |= 1u << 5u;
    }

    /**
     * Clear FPCCR's MMRDY bit.
     */
    inline void clear_FPCCR_MMRDY()
    {
        FPCCR &= ~(1u << 5u);
    }

    /**
     * Toggle FPCCR's MMRDY bit.
     */
    inline void toggle_FPCCR_MMRDY()
    {
        FPCCR ^= 1u << 5u;
    }

    /**
     * Get FPCCR's HFRDY bit.
     */
    PPB_FPCCR_HFRDY get_FPCCR_HFRDY()
    {
        return PPB_FPCCR_HFRDY(FPCCR & (1u << 4u));
    }

    /**
     * Set FPCCR's HFRDY bit.
     */
    inline void set_FPCCR_HFRDY()
    {
        FPCCR |= 1u << 4u;
    }

    /**
     * Clear FPCCR's HFRDY bit.
     */
    inline void clear_FPCCR_HFRDY()
    {
        FPCCR &= ~(1u << 4u);
    }

    /**
     * Toggle FPCCR's HFRDY bit.
     */
    inline void toggle_FPCCR_HFRDY()
    {
        FPCCR ^= 1u << 4u;
    }

    /**
     * Get FPCCR's THREAD bit.
     */
    PPB_FPCCR_THREAD get_FPCCR_THREAD()
    {
        return PPB_FPCCR_THREAD(FPCCR & (1u << 3u));
    }

    /**
     * Set FPCCR's THREAD bit.
     */
    inline void set_FPCCR_THREAD()
    {
        FPCCR |= 1u << 3u;
    }

    /**
     * Clear FPCCR's THREAD bit.
     */
    inline void clear_FPCCR_THREAD()
    {
        FPCCR &= ~(1u << 3u);
    }

    /**
     * Toggle FPCCR's THREAD bit.
     */
    inline void toggle_FPCCR_THREAD()
    {
        FPCCR ^= 1u << 3u;
    }

    /**
     * Get FPCCR's USER bit.
     */
    PPB_FPCCR_USER get_FPCCR_USER()
    {
        return PPB_FPCCR_USER(FPCCR & (1u << 1u));
    }

    /**
     * Set FPCCR's USER bit.
     */
    inline void set_FPCCR_USER()
    {
        FPCCR |= 1u << 1u;
    }

    /**
     * Clear FPCCR's USER bit.
     */
    inline void clear_FPCCR_USER()
    {
        FPCCR &= ~(1u << 1u);
    }

    /**
     * Toggle FPCCR's USER bit.
     */
    inline void toggle_FPCCR_USER()
    {
        FPCCR ^= 1u << 1u;
    }

    /**
     * Get FPCCR's LSPACT bit.
     */
    PPB_FPCCR_LSPACT get_FPCCR_LSPACT()
    {
        return PPB_FPCCR_LSPACT(FPCCR & (1u << 0u));
    }

    /**
     * Set FPCCR's LSPACT bit.
     */
    inline void set_FPCCR_LSPACT()
    {
        FPCCR |= 1u << 0u;
    }

    /**
     * Clear FPCCR's LSPACT bit.
     */
    inline void clear_FPCCR_LSPACT()
    {
        FPCCR &= ~(1u << 0u);
    }

    /**
     * Toggle FPCCR's LSPACT bit.
     */
    inline void toggle_FPCCR_LSPACT()
    {
        FPCCR ^= 1u << 0u;
    }

    /**
     * Get FPCAR's ADDRESS field.
     */
    uint32_t get_FPCAR_ADDRESS()
    {
        return (FPCAR >> 3u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set FPCAR's ADDRESS field.
     */
    inline void set_FPCAR_ADDRESS(uint32_t value)
    {
        uint32_t curr = FPCAR;

        curr &= ~(0b11111111111111111111111111111u << 3u);
        curr |= (value & 0b11111111111111111111111111111u) << 3u;

        FPCAR = curr;
    }

    /**
     * Get FPDSCR's AHP bit.
     */
    bool get_FPDSCR_AHP()
    {
        return FPDSCR & (1u << 26u);
    }

    /**
     * Set FPDSCR's AHP bit.
     */
    inline void set_FPDSCR_AHP()
    {
        FPDSCR |= 1u << 26u;
    }

    /**
     * Clear FPDSCR's AHP bit.
     */
    inline void clear_FPDSCR_AHP()
    {
        FPDSCR &= ~(1u << 26u);
    }

    /**
     * Toggle FPDSCR's AHP bit.
     */
    inline void toggle_FPDSCR_AHP()
    {
        FPDSCR ^= 1u << 26u;
    }

    /**
     * Get FPDSCR's DN bit.
     */
    bool get_FPDSCR_DN()
    {
        return FPDSCR & (1u << 25u);
    }

    /**
     * Set FPDSCR's DN bit.
     */
    inline void set_FPDSCR_DN()
    {
        FPDSCR |= 1u << 25u;
    }

    /**
     * Clear FPDSCR's DN bit.
     */
    inline void clear_FPDSCR_DN()
    {
        FPDSCR &= ~(1u << 25u);
    }

    /**
     * Toggle FPDSCR's DN bit.
     */
    inline void toggle_FPDSCR_DN()
    {
        FPDSCR ^= 1u << 25u;
    }

    /**
     * Get FPDSCR's FZ bit.
     */
    bool get_FPDSCR_FZ()
    {
        return FPDSCR & (1u << 24u);
    }

    /**
     * Set FPDSCR's FZ bit.
     */
    inline void set_FPDSCR_FZ()
    {
        FPDSCR |= 1u << 24u;
    }

    /**
     * Clear FPDSCR's FZ bit.
     */
    inline void clear_FPDSCR_FZ()
    {
        FPDSCR &= ~(1u << 24u);
    }

    /**
     * Toggle FPDSCR's FZ bit.
     */
    inline void toggle_FPDSCR_FZ()
    {
        FPDSCR ^= 1u << 24u;
    }

    /**
     * Get FPDSCR's RMode field.
     */
    uint8_t get_FPDSCR_RMode()
    {
        return (FPDSCR >> 22u) & 0b11u;
    }

    /**
     * Set FPDSCR's RMode field.
     */
    inline void set_FPDSCR_RMode(uint8_t value)
    {
        uint32_t curr = FPDSCR;

        curr &= ~(0b11u << 22u);
        curr |= (value & 0b11u) << 22u;

        FPDSCR = curr;
    }
};

static_assert(sizeof(ppb) == ppb::size);

static volatile ppb *const PPB = reinterpret_cast<ppb *>(0xE000E000);

}; // namespace XMC4700
