/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include "../enums/FCE_CFG_ALR.h"
#include "../enums/FCE_CFG_BEI.h"
#include "../enums/FCE_CFG_CCE.h"
#include "../enums/FCE_CFG_CEI.h"
#include "../enums/FCE_CFG_CMI.h"
#include "../enums/FCE_CFG_LEI.h"
#include "../enums/FCE_CFG_REFIN.h"
#include "../enums/FCE_CFG_REFOUT.h"
#include "../enums/FCE_CFG_XSEL.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Flexible CRC Engine
 */
struct [[gnu::packed]] fce
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< fce's identifier. */
    static constexpr std::size_t size = 32; /*!< fce's size in bytes. */

    /* Fields. */
    uint32_t IR;             /*!< (read-write) Input Register */
    const uint32_t RES = {}; /*!< (read-only) CRC Result Register */
    uint32_t CFG;            /*!< (read-write) CRC Configuration Register */
    uint32_t STS;            /*!< (read-write) CRC Status Register */
    uint32_t LENGTH;         /*!< (read-write) CRC Length Register */
    uint32_t CHECK;          /*!< (read-write) CRC Check Register */
    uint32_t CRC;            /*!< (read-write) CRC Register */
    uint32_t CTR;            /*!< (read-write) CRC Test Register */

    /* Methods. */

    /**
     * Get IR's IR field.
     */
    uint32_t get_IR_IR()
    {
        return (IR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set IR's IR field.
     */
    inline void set_IR_IR(uint32_t value)
    {
        uint32_t curr = IR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        IR = curr;
    }

    /**
     * Get RES's RES field.
     */
    uint32_t get_RES_RES()
    {
        return (RES >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get CFG's XSEL bit.
     */
    FCE_CFG_XSEL get_CFG_XSEL()
    {
        return FCE_CFG_XSEL(CFG & (1u << 10u));
    }

    /**
     * Set CFG's XSEL bit.
     */
    inline void set_CFG_XSEL()
    {
        CFG |= 1u << 10u;
    }

    /**
     * Clear CFG's XSEL bit.
     */
    inline void clear_CFG_XSEL()
    {
        CFG &= ~(1u << 10u);
    }

    /**
     * Toggle CFG's XSEL bit.
     */
    inline void toggle_CFG_XSEL()
    {
        CFG ^= 1u << 10u;
    }

    /**
     * Get CFG's REFOUT bit.
     */
    FCE_CFG_REFOUT get_CFG_REFOUT()
    {
        return FCE_CFG_REFOUT(CFG & (1u << 9u));
    }

    /**
     * Set CFG's REFOUT bit.
     */
    inline void set_CFG_REFOUT()
    {
        CFG |= 1u << 9u;
    }

    /**
     * Clear CFG's REFOUT bit.
     */
    inline void clear_CFG_REFOUT()
    {
        CFG &= ~(1u << 9u);
    }

    /**
     * Toggle CFG's REFOUT bit.
     */
    inline void toggle_CFG_REFOUT()
    {
        CFG ^= 1u << 9u;
    }

    /**
     * Get CFG's REFIN bit.
     */
    FCE_CFG_REFIN get_CFG_REFIN()
    {
        return FCE_CFG_REFIN(CFG & (1u << 8u));
    }

    /**
     * Set CFG's REFIN bit.
     */
    inline void set_CFG_REFIN()
    {
        CFG |= 1u << 8u;
    }

    /**
     * Clear CFG's REFIN bit.
     */
    inline void clear_CFG_REFIN()
    {
        CFG &= ~(1u << 8u);
    }

    /**
     * Toggle CFG's REFIN bit.
     */
    inline void toggle_CFG_REFIN()
    {
        CFG ^= 1u << 8u;
    }

    /**
     * Get CFG's ALR bit.
     */
    FCE_CFG_ALR get_CFG_ALR()
    {
        return FCE_CFG_ALR(CFG & (1u << 5u));
    }

    /**
     * Set CFG's ALR bit.
     */
    inline void set_CFG_ALR()
    {
        CFG |= 1u << 5u;
    }

    /**
     * Clear CFG's ALR bit.
     */
    inline void clear_CFG_ALR()
    {
        CFG &= ~(1u << 5u);
    }

    /**
     * Toggle CFG's ALR bit.
     */
    inline void toggle_CFG_ALR()
    {
        CFG ^= 1u << 5u;
    }

    /**
     * Get CFG's CCE bit.
     */
    FCE_CFG_CCE get_CFG_CCE()
    {
        return FCE_CFG_CCE(CFG & (1u << 4u));
    }

    /**
     * Set CFG's CCE bit.
     */
    inline void set_CFG_CCE()
    {
        CFG |= 1u << 4u;
    }

    /**
     * Clear CFG's CCE bit.
     */
    inline void clear_CFG_CCE()
    {
        CFG &= ~(1u << 4u);
    }

    /**
     * Toggle CFG's CCE bit.
     */
    inline void toggle_CFG_CCE()
    {
        CFG ^= 1u << 4u;
    }

    /**
     * Get CFG's BEI bit.
     */
    FCE_CFG_BEI get_CFG_BEI()
    {
        return FCE_CFG_BEI(CFG & (1u << 3u));
    }

    /**
     * Set CFG's BEI bit.
     */
    inline void set_CFG_BEI()
    {
        CFG |= 1u << 3u;
    }

    /**
     * Clear CFG's BEI bit.
     */
    inline void clear_CFG_BEI()
    {
        CFG &= ~(1u << 3u);
    }

    /**
     * Toggle CFG's BEI bit.
     */
    inline void toggle_CFG_BEI()
    {
        CFG ^= 1u << 3u;
    }

    /**
     * Get CFG's LEI bit.
     */
    FCE_CFG_LEI get_CFG_LEI()
    {
        return FCE_CFG_LEI(CFG & (1u << 2u));
    }

    /**
     * Set CFG's LEI bit.
     */
    inline void set_CFG_LEI()
    {
        CFG |= 1u << 2u;
    }

    /**
     * Clear CFG's LEI bit.
     */
    inline void clear_CFG_LEI()
    {
        CFG &= ~(1u << 2u);
    }

    /**
     * Toggle CFG's LEI bit.
     */
    inline void toggle_CFG_LEI()
    {
        CFG ^= 1u << 2u;
    }

    /**
     * Get CFG's CEI bit.
     */
    FCE_CFG_CEI get_CFG_CEI()
    {
        return FCE_CFG_CEI(CFG & (1u << 1u));
    }

    /**
     * Set CFG's CEI bit.
     */
    inline void set_CFG_CEI()
    {
        CFG |= 1u << 1u;
    }

    /**
     * Clear CFG's CEI bit.
     */
    inline void clear_CFG_CEI()
    {
        CFG &= ~(1u << 1u);
    }

    /**
     * Toggle CFG's CEI bit.
     */
    inline void toggle_CFG_CEI()
    {
        CFG ^= 1u << 1u;
    }

    /**
     * Get CFG's CMI bit.
     */
    FCE_CFG_CMI get_CFG_CMI()
    {
        return FCE_CFG_CMI(CFG & (1u << 0u));
    }

    /**
     * Set CFG's CMI bit.
     */
    inline void set_CFG_CMI()
    {
        CFG |= 1u << 0u;
    }

    /**
     * Clear CFG's CMI bit.
     */
    inline void clear_CFG_CMI()
    {
        CFG &= ~(1u << 0u);
    }

    /**
     * Toggle CFG's CMI bit.
     */
    inline void toggle_CFG_CMI()
    {
        CFG ^= 1u << 0u;
    }

    /**
     * Get STS's BEF bit.
     */
    bool get_STS_BEF()
    {
        return STS & (1u << 3u);
    }

    /**
     * Set STS's BEF bit.
     */
    inline void set_STS_BEF()
    {
        STS |= 1u << 3u;
    }

    /**
     * Clear STS's BEF bit.
     */
    inline void clear_STS_BEF()
    {
        STS &= ~(1u << 3u);
    }

    /**
     * Toggle STS's BEF bit.
     */
    inline void toggle_STS_BEF()
    {
        STS ^= 1u << 3u;
    }

    /**
     * Get STS's LEF bit.
     */
    bool get_STS_LEF()
    {
        return STS & (1u << 2u);
    }

    /**
     * Set STS's LEF bit.
     */
    inline void set_STS_LEF()
    {
        STS |= 1u << 2u;
    }

    /**
     * Clear STS's LEF bit.
     */
    inline void clear_STS_LEF()
    {
        STS &= ~(1u << 2u);
    }

    /**
     * Toggle STS's LEF bit.
     */
    inline void toggle_STS_LEF()
    {
        STS ^= 1u << 2u;
    }

    /**
     * Get STS's CEF bit.
     */
    bool get_STS_CEF()
    {
        return STS & (1u << 1u);
    }

    /**
     * Set STS's CEF bit.
     */
    inline void set_STS_CEF()
    {
        STS |= 1u << 1u;
    }

    /**
     * Clear STS's CEF bit.
     */
    inline void clear_STS_CEF()
    {
        STS &= ~(1u << 1u);
    }

    /**
     * Toggle STS's CEF bit.
     */
    inline void toggle_STS_CEF()
    {
        STS ^= 1u << 1u;
    }

    /**
     * Get STS's CMF bit.
     */
    bool get_STS_CMF()
    {
        return STS & (1u << 0u);
    }

    /**
     * Set STS's CMF bit.
     */
    inline void set_STS_CMF()
    {
        STS |= 1u << 0u;
    }

    /**
     * Clear STS's CMF bit.
     */
    inline void clear_STS_CMF()
    {
        STS &= ~(1u << 0u);
    }

    /**
     * Toggle STS's CMF bit.
     */
    inline void toggle_STS_CMF()
    {
        STS ^= 1u << 0u;
    }

    /**
     * Get LENGTH's LENGTH field.
     */
    uint16_t get_LENGTH_LENGTH()
    {
        return (LENGTH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set LENGTH's LENGTH field.
     */
    inline void set_LENGTH_LENGTH(uint16_t value)
    {
        uint32_t curr = LENGTH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        LENGTH = curr;
    }

    /**
     * Get CHECK's CHECK field.
     */
    uint32_t get_CHECK_CHECK()
    {
        return (CHECK >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CHECK's CHECK field.
     */
    inline void set_CHECK_CHECK(uint32_t value)
    {
        uint32_t curr = CHECK;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CHECK = curr;
    }

    /**
     * Get CRC's CRC field.
     */
    uint32_t get_CRC_CRC()
    {
        return (CRC >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set CRC's CRC field.
     */
    inline void set_CRC_CRC(uint32_t value)
    {
        uint32_t curr = CRC;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        CRC = curr;
    }

    /**
     * Get CTR's FRM_CHECK bit.
     */
    bool get_CTR_FRM_CHECK()
    {
        return CTR & (1u << 2u);
    }

    /**
     * Set CTR's FRM_CHECK bit.
     */
    inline void set_CTR_FRM_CHECK()
    {
        CTR |= 1u << 2u;
    }

    /**
     * Clear CTR's FRM_CHECK bit.
     */
    inline void clear_CTR_FRM_CHECK()
    {
        CTR &= ~(1u << 2u);
    }

    /**
     * Toggle CTR's FRM_CHECK bit.
     */
    inline void toggle_CTR_FRM_CHECK()
    {
        CTR ^= 1u << 2u;
    }

    /**
     * Get CTR's FRM_CFG bit.
     */
    bool get_CTR_FRM_CFG()
    {
        return CTR & (1u << 1u);
    }

    /**
     * Set CTR's FRM_CFG bit.
     */
    inline void set_CTR_FRM_CFG()
    {
        CTR |= 1u << 1u;
    }

    /**
     * Clear CTR's FRM_CFG bit.
     */
    inline void clear_CTR_FRM_CFG()
    {
        CTR &= ~(1u << 1u);
    }

    /**
     * Toggle CTR's FRM_CFG bit.
     */
    inline void toggle_CTR_FRM_CFG()
    {
        CTR ^= 1u << 1u;
    }

    /**
     * Get CTR's FCM bit.
     */
    bool get_CTR_FCM()
    {
        return CTR & (1u << 0u);
    }

    /**
     * Set CTR's FCM bit.
     */
    inline void set_CTR_FCM()
    {
        CTR |= 1u << 0u;
    }

    /**
     * Clear CTR's FCM bit.
     */
    inline void clear_CTR_FCM()
    {
        CTR &= ~(1u << 0u);
    }

    /**
     * Toggle CTR's FCM bit.
     */
    inline void toggle_CTR_FCM()
    {
        CTR ^= 1u << 0u;
    }
};

static_assert(sizeof(fce) == fce::size);

static volatile fce *const FCE_KE0 = reinterpret_cast<fce *>(0x50020020);

static volatile fce *const FCE = reinterpret_cast<fce *>(0x50020000);

static volatile fce *const FCE_KE1 = reinterpret_cast<fce *>(0x50020040);

static volatile fce *const FCE_KE2 = reinterpret_cast<fce *>(0x50020060);

static volatile fce *const FCE_KE3 = reinterpret_cast<fce *>(0x50020080);

}; // namespace XMC4700
