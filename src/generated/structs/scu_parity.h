/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include "../enums/SCU_PARITY_MCHKCON_SELSD1.h"
#include "../enums/SCU_PARITY_PEEN_PEENSD1.h"
#include "../enums/SCU_PARITY_PEFLAG_PESD1.h"
#include "../enums/SCU_PARITY_PMTSR_MTSD1.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * System Control Unit
 */
struct [[gnu::packed]] scu_parity
{
    /* Constant attributes. */
    static constexpr std::size_t size = 32; /*!< scu_parity's size in bytes. */

    /* Fields. */
    uint32_t PEEN;    /*!< (read-write) Parity Error Enable Register */
    uint32_t MCHKCON; /*!< (read-write) Memory Checking Control Register */
    uint32_t PETE;    /*!< (read-write) Parity Error Trap Enable Register */
    uint32_t PERSTEN; /*!< (read-write) Parity Error Reset Enable Register */
    const uint32_t reserved_padding0 = {};
    uint32_t PEFLAG; /*!< (read-write) Parity Error Flag Register */
    uint32_t PMTPR;  /*!< (read-write) Parity Memory Test Pattern Register */
    uint32_t PMTSR;  /*!< (read-write) Parity Memory Test Select Register */

    /* Methods. */

    /**
     * Get PEEN's PEENSD1 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENSD1() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 20u));
    }

    /**
     * Set PEEN's PEENSD1 bit.
     *
     * Parity Error Enable for SDMMC Memory 1
     */
    inline void set_PEEN_PEENSD1() volatile
    {
        PEEN |= 1u << 20u;
    }

    /**
     * Clear PEEN's PEENSD1 bit.
     *
     * Parity Error Enable for SDMMC Memory 1
     */
    inline void clear_PEEN_PEENSD1() volatile
    {
        PEEN &= ~(1u << 20u);
    }

    /**
     * Toggle PEEN's PEENSD1 bit.
     *
     * Parity Error Enable for SDMMC Memory 1
     */
    inline void toggle_PEEN_PEENSD1() volatile
    {
        PEEN ^= 1u << 20u;
    }

    /**
     * Get PEEN's PEENSD0 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENSD0() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 19u));
    }

    /**
     * Set PEEN's PEENSD0 bit.
     *
     * Parity Error Enable for SDMMC Memory 0
     */
    inline void set_PEEN_PEENSD0() volatile
    {
        PEEN |= 1u << 19u;
    }

    /**
     * Clear PEEN's PEENSD0 bit.
     *
     * Parity Error Enable for SDMMC Memory 0
     */
    inline void clear_PEEN_PEENSD0() volatile
    {
        PEEN &= ~(1u << 19u);
    }

    /**
     * Toggle PEEN's PEENSD0 bit.
     *
     * Parity Error Enable for SDMMC Memory 0
     */
    inline void toggle_PEEN_PEENSD0() volatile
    {
        PEEN ^= 1u << 19u;
    }

    /**
     * Get PEEN's PEENETH0RX bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENETH0RX() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 18u));
    }

    /**
     * Set PEEN's PEENETH0RX bit.
     *
     * Parity Error Enable for ETH RX Memory
     */
    inline void set_PEEN_PEENETH0RX() volatile
    {
        PEEN |= 1u << 18u;
    }

    /**
     * Clear PEEN's PEENETH0RX bit.
     *
     * Parity Error Enable for ETH RX Memory
     */
    inline void clear_PEEN_PEENETH0RX() volatile
    {
        PEEN &= ~(1u << 18u);
    }

    /**
     * Toggle PEEN's PEENETH0RX bit.
     *
     * Parity Error Enable for ETH RX Memory
     */
    inline void toggle_PEEN_PEENETH0RX() volatile
    {
        PEEN ^= 1u << 18u;
    }

    /**
     * Get PEEN's PEENETH0TX bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENETH0TX() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 17u));
    }

    /**
     * Set PEEN's PEENETH0TX bit.
     *
     * Parity Error Enable for ETH TX Memory
     */
    inline void set_PEEN_PEENETH0TX() volatile
    {
        PEEN |= 1u << 17u;
    }

    /**
     * Clear PEEN's PEENETH0TX bit.
     *
     * Parity Error Enable for ETH TX Memory
     */
    inline void clear_PEEN_PEENETH0TX() volatile
    {
        PEEN &= ~(1u << 17u);
    }

    /**
     * Toggle PEEN's PEENETH0TX bit.
     *
     * Parity Error Enable for ETH TX Memory
     */
    inline void toggle_PEEN_PEENETH0TX() volatile
    {
        PEEN ^= 1u << 17u;
    }

    /**
     * Get PEEN's PEENUSB bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENUSB() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 16u));
    }

    /**
     * Set PEEN's PEENUSB bit.
     *
     * Parity Error Enable for USB Memory
     */
    inline void set_PEEN_PEENUSB() volatile
    {
        PEEN |= 1u << 16u;
    }

    /**
     * Clear PEEN's PEENUSB bit.
     *
     * Parity Error Enable for USB Memory
     */
    inline void clear_PEEN_PEENUSB() volatile
    {
        PEEN &= ~(1u << 16u);
    }

    /**
     * Toggle PEEN's PEENUSB bit.
     *
     * Parity Error Enable for USB Memory
     */
    inline void toggle_PEEN_PEENUSB() volatile
    {
        PEEN ^= 1u << 16u;
    }

    /**
     * Get PEEN's PEENPPRF bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENPPRF() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 13u));
    }

    /**
     * Set PEEN's PEENPPRF bit.
     *
     * Parity Error Enable for PMU Prefetch Memory
     */
    inline void set_PEEN_PEENPPRF() volatile
    {
        PEEN |= 1u << 13u;
    }

    /**
     * Clear PEEN's PEENPPRF bit.
     *
     * Parity Error Enable for PMU Prefetch Memory
     */
    inline void clear_PEEN_PEENPPRF() volatile
    {
        PEEN &= ~(1u << 13u);
    }

    /**
     * Toggle PEEN's PEENPPRF bit.
     *
     * Parity Error Enable for PMU Prefetch Memory
     */
    inline void toggle_PEEN_PEENPPRF() volatile
    {
        PEEN ^= 1u << 13u;
    }

    /**
     * Get PEEN's PEENMC bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENMC() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 12u));
    }

    /**
     * Set PEEN's PEENMC bit.
     *
     * Parity Error Enable for MultiCAN Memory
     */
    inline void set_PEEN_PEENMC() volatile
    {
        PEEN |= 1u << 12u;
    }

    /**
     * Clear PEEN's PEENMC bit.
     *
     * Parity Error Enable for MultiCAN Memory
     */
    inline void clear_PEEN_PEENMC() volatile
    {
        PEEN &= ~(1u << 12u);
    }

    /**
     * Toggle PEEN's PEENMC bit.
     *
     * Parity Error Enable for MultiCAN Memory
     */
    inline void toggle_PEEN_PEENMC() volatile
    {
        PEEN ^= 1u << 12u;
    }

    /**
     * Get PEEN's PEENU2 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENU2() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 10u));
    }

    /**
     * Set PEEN's PEENU2 bit.
     *
     * Parity Error Enable for USIC2 Memory
     */
    inline void set_PEEN_PEENU2() volatile
    {
        PEEN |= 1u << 10u;
    }

    /**
     * Clear PEEN's PEENU2 bit.
     *
     * Parity Error Enable for USIC2 Memory
     */
    inline void clear_PEEN_PEENU2() volatile
    {
        PEEN &= ~(1u << 10u);
    }

    /**
     * Toggle PEEN's PEENU2 bit.
     *
     * Parity Error Enable for USIC2 Memory
     */
    inline void toggle_PEEN_PEENU2() volatile
    {
        PEEN ^= 1u << 10u;
    }

    /**
     * Get PEEN's PEENU1 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENU1() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 9u));
    }

    /**
     * Set PEEN's PEENU1 bit.
     *
     * Parity Error Enable for USIC1 Memory
     */
    inline void set_PEEN_PEENU1() volatile
    {
        PEEN |= 1u << 9u;
    }

    /**
     * Clear PEEN's PEENU1 bit.
     *
     * Parity Error Enable for USIC1 Memory
     */
    inline void clear_PEEN_PEENU1() volatile
    {
        PEEN &= ~(1u << 9u);
    }

    /**
     * Toggle PEEN's PEENU1 bit.
     *
     * Parity Error Enable for USIC1 Memory
     */
    inline void toggle_PEEN_PEENU1() volatile
    {
        PEEN ^= 1u << 9u;
    }

    /**
     * Get PEEN's PEENU0 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENU0() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 8u));
    }

    /**
     * Set PEEN's PEENU0 bit.
     *
     * Parity Error Enable for USIC0 Memory
     */
    inline void set_PEEN_PEENU0() volatile
    {
        PEEN |= 1u << 8u;
    }

    /**
     * Clear PEEN's PEENU0 bit.
     *
     * Parity Error Enable for USIC0 Memory
     */
    inline void clear_PEEN_PEENU0() volatile
    {
        PEEN &= ~(1u << 8u);
    }

    /**
     * Toggle PEEN's PEENU0 bit.
     *
     * Parity Error Enable for USIC0 Memory
     */
    inline void toggle_PEEN_PEENU0() volatile
    {
        PEEN ^= 1u << 8u;
    }

    /**
     * Get PEEN's PEENDS2 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENDS2() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 2u));
    }

    /**
     * Set PEEN's PEENDS2 bit.
     *
     * Parity Error Enable for DSRAM2
     */
    inline void set_PEEN_PEENDS2() volatile
    {
        PEEN |= 1u << 2u;
    }

    /**
     * Clear PEEN's PEENDS2 bit.
     *
     * Parity Error Enable for DSRAM2
     */
    inline void clear_PEEN_PEENDS2() volatile
    {
        PEEN &= ~(1u << 2u);
    }

    /**
     * Toggle PEEN's PEENDS2 bit.
     *
     * Parity Error Enable for DSRAM2
     */
    inline void toggle_PEEN_PEENDS2() volatile
    {
        PEEN ^= 1u << 2u;
    }

    /**
     * Get PEEN's PEENDS1 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENDS1() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 1u));
    }

    /**
     * Set PEEN's PEENDS1 bit.
     *
     * Parity Error Enable for DSRAM1
     */
    inline void set_PEEN_PEENDS1() volatile
    {
        PEEN |= 1u << 1u;
    }

    /**
     * Clear PEEN's PEENDS1 bit.
     *
     * Parity Error Enable for DSRAM1
     */
    inline void clear_PEEN_PEENDS1() volatile
    {
        PEEN &= ~(1u << 1u);
    }

    /**
     * Toggle PEEN's PEENDS1 bit.
     *
     * Parity Error Enable for DSRAM1
     */
    inline void toggle_PEEN_PEENDS1() volatile
    {
        PEEN ^= 1u << 1u;
    }

    /**
     * Get PEEN's PEENPS bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENPS() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 0u));
    }

    /**
     * Set PEEN's PEENPS bit.
     *
     * Parity Error Enable for PSRAM
     */
    inline void set_PEEN_PEENPS() volatile
    {
        PEEN |= 1u << 0u;
    }

    /**
     * Clear PEEN's PEENPS bit.
     *
     * Parity Error Enable for PSRAM
     */
    inline void clear_PEEN_PEENPS() volatile
    {
        PEEN &= ~(1u << 0u);
    }

    /**
     * Toggle PEEN's PEENPS bit.
     *
     * Parity Error Enable for PSRAM
     */
    inline void toggle_PEEN_PEENPS() volatile
    {
        PEEN ^= 1u << 0u;
    }

    /**
     * Get all of PEEN's bit fields.
     */
    inline void get_PEEN(
        SCU_PARITY_PEEN_PEENSD1 &PEENSD1, SCU_PARITY_PEEN_PEENSD1 &PEENSD0,
        SCU_PARITY_PEEN_PEENSD1 &PEENETH0RX,
        SCU_PARITY_PEEN_PEENSD1 &PEENETH0TX, SCU_PARITY_PEEN_PEENSD1 &PEENUSB,
        SCU_PARITY_PEEN_PEENSD1 &PEENPPRF, SCU_PARITY_PEEN_PEENSD1 &PEENMC,
        SCU_PARITY_PEEN_PEENSD1 &PEENU2, SCU_PARITY_PEEN_PEENSD1 &PEENU1,
        SCU_PARITY_PEEN_PEENSD1 &PEENU0, SCU_PARITY_PEEN_PEENSD1 &PEENDS2,
        SCU_PARITY_PEEN_PEENSD1 &PEENDS1,
        SCU_PARITY_PEEN_PEENSD1 &PEENPS) volatile
    {
        uint32_t curr = PEEN;

        PEENSD1 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 20u));
        PEENSD0 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 19u));
        PEENETH0RX = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 18u));
        PEENETH0TX = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 17u));
        PEENUSB = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 16u));
        PEENPPRF = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 13u));
        PEENMC = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 12u));
        PEENU2 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 10u));
        PEENU1 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 9u));
        PEENU0 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 8u));
        PEENDS2 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 2u));
        PEENDS1 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 1u));
        PEENPS = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 0u));
    }

    /**
     * Set all of PEEN's bit fields.
     *
     * (read-write) Parity Error Enable Register
     */
    inline void set_PEEN(
        SCU_PARITY_PEEN_PEENSD1 PEENSD1, SCU_PARITY_PEEN_PEENSD1 PEENSD0,
        SCU_PARITY_PEEN_PEENSD1 PEENETH0RX, SCU_PARITY_PEEN_PEENSD1 PEENETH0TX,
        SCU_PARITY_PEEN_PEENSD1 PEENUSB, SCU_PARITY_PEEN_PEENSD1 PEENPPRF,
        SCU_PARITY_PEEN_PEENSD1 PEENMC, SCU_PARITY_PEEN_PEENSD1 PEENU2,
        SCU_PARITY_PEEN_PEENSD1 PEENU1, SCU_PARITY_PEEN_PEENSD1 PEENU0,
        SCU_PARITY_PEEN_PEENSD1 PEENDS2, SCU_PARITY_PEEN_PEENSD1 PEENDS1,
        SCU_PARITY_PEEN_PEENSD1 PEENPS) volatile
    {
        uint32_t curr = PEEN;

        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(PEENSD1) & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(PEENSD0) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(PEENETH0RX) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(PEENETH0TX) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(PEENUSB) & 0b1u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(PEENPPRF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(PEENMC) & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(PEENU2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(PEENU1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(PEENU0) & 0b1u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(PEENDS2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(PEENDS1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PEENPS) & 0b1u) << 0u;

        PEEN = curr;
    }

    /**
     * Get MCHKCON's SELSD1 bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_SELSD1() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 20u));
    }

    /**
     * Set MCHKCON's SELSD1 bit.
     *
     * Select Memory Check for SDMMC SRAM 1
     */
    inline void set_MCHKCON_SELSD1() volatile
    {
        MCHKCON |= 1u << 20u;
    }

    /**
     * Clear MCHKCON's SELSD1 bit.
     *
     * Select Memory Check for SDMMC SRAM 1
     */
    inline void clear_MCHKCON_SELSD1() volatile
    {
        MCHKCON &= ~(1u << 20u);
    }

    /**
     * Toggle MCHKCON's SELSD1 bit.
     *
     * Select Memory Check for SDMMC SRAM 1
     */
    inline void toggle_MCHKCON_SELSD1() volatile
    {
        MCHKCON ^= 1u << 20u;
    }

    /**
     * Get MCHKCON's SELSD0 bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_SELSD0() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 19u));
    }

    /**
     * Set MCHKCON's SELSD0 bit.
     *
     * Select Memory Check for SDMMC SRAM 0
     */
    inline void set_MCHKCON_SELSD0() volatile
    {
        MCHKCON |= 1u << 19u;
    }

    /**
     * Clear MCHKCON's SELSD0 bit.
     *
     * Select Memory Check for SDMMC SRAM 0
     */
    inline void clear_MCHKCON_SELSD0() volatile
    {
        MCHKCON &= ~(1u << 19u);
    }

    /**
     * Toggle MCHKCON's SELSD0 bit.
     *
     * Select Memory Check for SDMMC SRAM 0
     */
    inline void toggle_MCHKCON_SELSD0() volatile
    {
        MCHKCON ^= 1u << 19u;
    }

    /**
     * Get MCHKCON's SELETH0RX bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_SELETH0RX() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 18u));
    }

    /**
     * Set MCHKCON's SELETH0RX bit.
     *
     * Select Memory Check for ETH0 RX SRAM
     */
    inline void set_MCHKCON_SELETH0RX() volatile
    {
        MCHKCON |= 1u << 18u;
    }

    /**
     * Clear MCHKCON's SELETH0RX bit.
     *
     * Select Memory Check for ETH0 RX SRAM
     */
    inline void clear_MCHKCON_SELETH0RX() volatile
    {
        MCHKCON &= ~(1u << 18u);
    }

    /**
     * Toggle MCHKCON's SELETH0RX bit.
     *
     * Select Memory Check for ETH0 RX SRAM
     */
    inline void toggle_MCHKCON_SELETH0RX() volatile
    {
        MCHKCON ^= 1u << 18u;
    }

    /**
     * Get MCHKCON's SELETH0TX bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_SELETH0TX() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 17u));
    }

    /**
     * Set MCHKCON's SELETH0TX bit.
     *
     * Select Memory Check for ETH0 TX SRAM
     */
    inline void set_MCHKCON_SELETH0TX() volatile
    {
        MCHKCON |= 1u << 17u;
    }

    /**
     * Clear MCHKCON's SELETH0TX bit.
     *
     * Select Memory Check for ETH0 TX SRAM
     */
    inline void clear_MCHKCON_SELETH0TX() volatile
    {
        MCHKCON &= ~(1u << 17u);
    }

    /**
     * Toggle MCHKCON's SELETH0TX bit.
     *
     * Select Memory Check for ETH0 TX SRAM
     */
    inline void toggle_MCHKCON_SELETH0TX() volatile
    {
        MCHKCON ^= 1u << 17u;
    }

    /**
     * Get MCHKCON's SELUSB bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_SELUSB() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 16u));
    }

    /**
     * Set MCHKCON's SELUSB bit.
     *
     * Select Memory Check for USB SRAM
     */
    inline void set_MCHKCON_SELUSB() volatile
    {
        MCHKCON |= 1u << 16u;
    }

    /**
     * Clear MCHKCON's SELUSB bit.
     *
     * Select Memory Check for USB SRAM
     */
    inline void clear_MCHKCON_SELUSB() volatile
    {
        MCHKCON &= ~(1u << 16u);
    }

    /**
     * Toggle MCHKCON's SELUSB bit.
     *
     * Select Memory Check for USB SRAM
     */
    inline void toggle_MCHKCON_SELUSB() volatile
    {
        MCHKCON ^= 1u << 16u;
    }

    /**
     * Get MCHKCON's PPRFDRA bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_PPRFDRA() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 13u));
    }

    /**
     * Set MCHKCON's PPRFDRA bit.
     *
     * Select Memory Check for PMU
     */
    inline void set_MCHKCON_PPRFDRA() volatile
    {
        MCHKCON |= 1u << 13u;
    }

    /**
     * Clear MCHKCON's PPRFDRA bit.
     *
     * Select Memory Check for PMU
     */
    inline void clear_MCHKCON_PPRFDRA() volatile
    {
        MCHKCON &= ~(1u << 13u);
    }

    /**
     * Toggle MCHKCON's PPRFDRA bit.
     *
     * Select Memory Check for PMU
     */
    inline void toggle_MCHKCON_PPRFDRA() volatile
    {
        MCHKCON ^= 1u << 13u;
    }

    /**
     * Get MCHKCON's MCANDRA bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_MCANDRA() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 12u));
    }

    /**
     * Set MCHKCON's MCANDRA bit.
     *
     * Select Memory Check for MultiCAN
     */
    inline void set_MCHKCON_MCANDRA() volatile
    {
        MCHKCON |= 1u << 12u;
    }

    /**
     * Clear MCHKCON's MCANDRA bit.
     *
     * Select Memory Check for MultiCAN
     */
    inline void clear_MCHKCON_MCANDRA() volatile
    {
        MCHKCON &= ~(1u << 12u);
    }

    /**
     * Toggle MCHKCON's MCANDRA bit.
     *
     * Select Memory Check for MultiCAN
     */
    inline void toggle_MCHKCON_MCANDRA() volatile
    {
        MCHKCON ^= 1u << 12u;
    }

    /**
     * Get MCHKCON's USIC2DRA bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_USIC2DRA() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 10u));
    }

    /**
     * Set MCHKCON's USIC2DRA bit.
     *
     * Select Memory Check for USIC2
     */
    inline void set_MCHKCON_USIC2DRA() volatile
    {
        MCHKCON |= 1u << 10u;
    }

    /**
     * Clear MCHKCON's USIC2DRA bit.
     *
     * Select Memory Check for USIC2
     */
    inline void clear_MCHKCON_USIC2DRA() volatile
    {
        MCHKCON &= ~(1u << 10u);
    }

    /**
     * Toggle MCHKCON's USIC2DRA bit.
     *
     * Select Memory Check for USIC2
     */
    inline void toggle_MCHKCON_USIC2DRA() volatile
    {
        MCHKCON ^= 1u << 10u;
    }

    /**
     * Get MCHKCON's USIC1DRA bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_USIC1DRA() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 9u));
    }

    /**
     * Set MCHKCON's USIC1DRA bit.
     *
     * Select Memory Check for USIC1
     */
    inline void set_MCHKCON_USIC1DRA() volatile
    {
        MCHKCON |= 1u << 9u;
    }

    /**
     * Clear MCHKCON's USIC1DRA bit.
     *
     * Select Memory Check for USIC1
     */
    inline void clear_MCHKCON_USIC1DRA() volatile
    {
        MCHKCON &= ~(1u << 9u);
    }

    /**
     * Toggle MCHKCON's USIC1DRA bit.
     *
     * Select Memory Check for USIC1
     */
    inline void toggle_MCHKCON_USIC1DRA() volatile
    {
        MCHKCON ^= 1u << 9u;
    }

    /**
     * Get MCHKCON's USIC0DRA bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_USIC0DRA() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 8u));
    }

    /**
     * Set MCHKCON's USIC0DRA bit.
     *
     * Select Memory Check for USIC0
     */
    inline void set_MCHKCON_USIC0DRA() volatile
    {
        MCHKCON |= 1u << 8u;
    }

    /**
     * Clear MCHKCON's USIC0DRA bit.
     *
     * Select Memory Check for USIC0
     */
    inline void clear_MCHKCON_USIC0DRA() volatile
    {
        MCHKCON &= ~(1u << 8u);
    }

    /**
     * Toggle MCHKCON's USIC0DRA bit.
     *
     * Select Memory Check for USIC0
     */
    inline void toggle_MCHKCON_USIC0DRA() volatile
    {
        MCHKCON ^= 1u << 8u;
    }

    /**
     * Get MCHKCON's SELDS2 bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_SELDS2() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 2u));
    }

    /**
     * Set MCHKCON's SELDS2 bit.
     *
     * Select Memory Check for DSRAM2
     */
    inline void set_MCHKCON_SELDS2() volatile
    {
        MCHKCON |= 1u << 2u;
    }

    /**
     * Clear MCHKCON's SELDS2 bit.
     *
     * Select Memory Check for DSRAM2
     */
    inline void clear_MCHKCON_SELDS2() volatile
    {
        MCHKCON &= ~(1u << 2u);
    }

    /**
     * Toggle MCHKCON's SELDS2 bit.
     *
     * Select Memory Check for DSRAM2
     */
    inline void toggle_MCHKCON_SELDS2() volatile
    {
        MCHKCON ^= 1u << 2u;
    }

    /**
     * Get MCHKCON's SELDS1 bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_SELDS1() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 1u));
    }

    /**
     * Set MCHKCON's SELDS1 bit.
     *
     * Select Memory Check for DSRAM1
     */
    inline void set_MCHKCON_SELDS1() volatile
    {
        MCHKCON |= 1u << 1u;
    }

    /**
     * Clear MCHKCON's SELDS1 bit.
     *
     * Select Memory Check for DSRAM1
     */
    inline void clear_MCHKCON_SELDS1() volatile
    {
        MCHKCON &= ~(1u << 1u);
    }

    /**
     * Toggle MCHKCON's SELDS1 bit.
     *
     * Select Memory Check for DSRAM1
     */
    inline void toggle_MCHKCON_SELDS1() volatile
    {
        MCHKCON ^= 1u << 1u;
    }

    /**
     * Get MCHKCON's SELPS bit.
     */
    inline SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_SELPS() volatile
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 0u));
    }

    /**
     * Set MCHKCON's SELPS bit.
     *
     * Select Memory Check for PSRAM
     */
    inline void set_MCHKCON_SELPS() volatile
    {
        MCHKCON |= 1u << 0u;
    }

    /**
     * Clear MCHKCON's SELPS bit.
     *
     * Select Memory Check for PSRAM
     */
    inline void clear_MCHKCON_SELPS() volatile
    {
        MCHKCON &= ~(1u << 0u);
    }

    /**
     * Toggle MCHKCON's SELPS bit.
     *
     * Select Memory Check for PSRAM
     */
    inline void toggle_MCHKCON_SELPS() volatile
    {
        MCHKCON ^= 1u << 0u;
    }

    /**
     * Get all of MCHKCON's bit fields.
     */
    inline void get_MCHKCON(SCU_PARITY_MCHKCON_SELSD1 &SELSD1,
                            SCU_PARITY_MCHKCON_SELSD1 &SELSD0,
                            SCU_PARITY_MCHKCON_SELSD1 &SELETH0RX,
                            SCU_PARITY_MCHKCON_SELSD1 &SELETH0TX,
                            SCU_PARITY_MCHKCON_SELSD1 &SELUSB,
                            SCU_PARITY_MCHKCON_SELSD1 &PPRFDRA,
                            SCU_PARITY_MCHKCON_SELSD1 &MCANDRA,
                            SCU_PARITY_MCHKCON_SELSD1 &USIC2DRA,
                            SCU_PARITY_MCHKCON_SELSD1 &USIC1DRA,
                            SCU_PARITY_MCHKCON_SELSD1 &USIC0DRA,
                            SCU_PARITY_MCHKCON_SELSD1 &SELDS2,
                            SCU_PARITY_MCHKCON_SELSD1 &SELDS1,
                            SCU_PARITY_MCHKCON_SELSD1 &SELPS) volatile
    {
        uint32_t curr = MCHKCON;

        SELSD1 = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 20u));
        SELSD0 = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 19u));
        SELETH0RX = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 18u));
        SELETH0TX = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 17u));
        SELUSB = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 16u));
        PPRFDRA = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 13u));
        MCANDRA = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 12u));
        USIC2DRA = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 10u));
        USIC1DRA = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 9u));
        USIC0DRA = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 8u));
        SELDS2 = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 2u));
        SELDS1 = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 1u));
        SELPS = SCU_PARITY_MCHKCON_SELSD1(curr & (1u << 0u));
    }

    /**
     * Set all of MCHKCON's bit fields.
     *
     * (read-write) Memory Checking Control Register
     */
    inline void set_MCHKCON(
        SCU_PARITY_MCHKCON_SELSD1 SELSD1, SCU_PARITY_MCHKCON_SELSD1 SELSD0,
        SCU_PARITY_MCHKCON_SELSD1 SELETH0RX,
        SCU_PARITY_MCHKCON_SELSD1 SELETH0TX, SCU_PARITY_MCHKCON_SELSD1 SELUSB,
        SCU_PARITY_MCHKCON_SELSD1 PPRFDRA, SCU_PARITY_MCHKCON_SELSD1 MCANDRA,
        SCU_PARITY_MCHKCON_SELSD1 USIC2DRA, SCU_PARITY_MCHKCON_SELSD1 USIC1DRA,
        SCU_PARITY_MCHKCON_SELSD1 USIC0DRA, SCU_PARITY_MCHKCON_SELSD1 SELDS2,
        SCU_PARITY_MCHKCON_SELSD1 SELDS1,
        SCU_PARITY_MCHKCON_SELSD1 SELPS) volatile
    {
        uint32_t curr = MCHKCON;

        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(SELSD1) & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(SELSD0) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(SELETH0RX) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(SELETH0TX) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(SELUSB) & 0b1u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(PPRFDRA) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(MCANDRA) & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(USIC2DRA) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(USIC1DRA) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(USIC0DRA) & 0b1u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(SELDS2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(SELDS1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(SELPS) & 0b1u) << 0u;

        MCHKCON = curr;
    }

    /**
     * Get PETE's PETESD1 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETESD1() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 20u));
    }

    /**
     * Set PETE's PETESD1 bit.
     *
     * Parity Error Trap Enable for SDMMC SRAM 1 Memory
     */
    inline void set_PETE_PETESD1() volatile
    {
        PETE |= 1u << 20u;
    }

    /**
     * Clear PETE's PETESD1 bit.
     *
     * Parity Error Trap Enable for SDMMC SRAM 1 Memory
     */
    inline void clear_PETE_PETESD1() volatile
    {
        PETE &= ~(1u << 20u);
    }

    /**
     * Toggle PETE's PETESD1 bit.
     *
     * Parity Error Trap Enable for SDMMC SRAM 1 Memory
     */
    inline void toggle_PETE_PETESD1() volatile
    {
        PETE ^= 1u << 20u;
    }

    /**
     * Get PETE's PETESD0 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETESD0() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 19u));
    }

    /**
     * Set PETE's PETESD0 bit.
     *
     * Parity Error Trap Enable for SDMMC SRAM 0 Memory
     */
    inline void set_PETE_PETESD0() volatile
    {
        PETE |= 1u << 19u;
    }

    /**
     * Clear PETE's PETESD0 bit.
     *
     * Parity Error Trap Enable for SDMMC SRAM 0 Memory
     */
    inline void clear_PETE_PETESD0() volatile
    {
        PETE &= ~(1u << 19u);
    }

    /**
     * Toggle PETE's PETESD0 bit.
     *
     * Parity Error Trap Enable for SDMMC SRAM 0 Memory
     */
    inline void toggle_PETE_PETESD0() volatile
    {
        PETE ^= 1u << 19u;
    }

    /**
     * Get PETE's PETEETH0RX bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEETH0RX() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 18u));
    }

    /**
     * Set PETE's PETEETH0RX bit.
     *
     * Parity Error Trap Enable for ETH0 RX Memory
     */
    inline void set_PETE_PETEETH0RX() volatile
    {
        PETE |= 1u << 18u;
    }

    /**
     * Clear PETE's PETEETH0RX bit.
     *
     * Parity Error Trap Enable for ETH0 RX Memory
     */
    inline void clear_PETE_PETEETH0RX() volatile
    {
        PETE &= ~(1u << 18u);
    }

    /**
     * Toggle PETE's PETEETH0RX bit.
     *
     * Parity Error Trap Enable for ETH0 RX Memory
     */
    inline void toggle_PETE_PETEETH0RX() volatile
    {
        PETE ^= 1u << 18u;
    }

    /**
     * Get PETE's PETEETH0TX bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEETH0TX() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 17u));
    }

    /**
     * Set PETE's PETEETH0TX bit.
     *
     * Parity Error Trap Enable for ETH 0TX Memory
     */
    inline void set_PETE_PETEETH0TX() volatile
    {
        PETE |= 1u << 17u;
    }

    /**
     * Clear PETE's PETEETH0TX bit.
     *
     * Parity Error Trap Enable for ETH 0TX Memory
     */
    inline void clear_PETE_PETEETH0TX() volatile
    {
        PETE &= ~(1u << 17u);
    }

    /**
     * Toggle PETE's PETEETH0TX bit.
     *
     * Parity Error Trap Enable for ETH 0TX Memory
     */
    inline void toggle_PETE_PETEETH0TX() volatile
    {
        PETE ^= 1u << 17u;
    }

    /**
     * Get PETE's PETEUSB bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEUSB() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 16u));
    }

    /**
     * Set PETE's PETEUSB bit.
     *
     * Parity Error Trap Enable for USB Memory
     */
    inline void set_PETE_PETEUSB() volatile
    {
        PETE |= 1u << 16u;
    }

    /**
     * Clear PETE's PETEUSB bit.
     *
     * Parity Error Trap Enable for USB Memory
     */
    inline void clear_PETE_PETEUSB() volatile
    {
        PETE &= ~(1u << 16u);
    }

    /**
     * Toggle PETE's PETEUSB bit.
     *
     * Parity Error Trap Enable for USB Memory
     */
    inline void toggle_PETE_PETEUSB() volatile
    {
        PETE ^= 1u << 16u;
    }

    /**
     * Get PETE's PETEPPRF bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEPPRF() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 13u));
    }

    /**
     * Set PETE's PETEPPRF bit.
     *
     * Parity Error Trap Enable for PMU Prefetch Memory
     */
    inline void set_PETE_PETEPPRF() volatile
    {
        PETE |= 1u << 13u;
    }

    /**
     * Clear PETE's PETEPPRF bit.
     *
     * Parity Error Trap Enable for PMU Prefetch Memory
     */
    inline void clear_PETE_PETEPPRF() volatile
    {
        PETE &= ~(1u << 13u);
    }

    /**
     * Toggle PETE's PETEPPRF bit.
     *
     * Parity Error Trap Enable for PMU Prefetch Memory
     */
    inline void toggle_PETE_PETEPPRF() volatile
    {
        PETE ^= 1u << 13u;
    }

    /**
     * Get PETE's PETEMC bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEMC() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 12u));
    }

    /**
     * Set PETE's PETEMC bit.
     *
     * Parity Error Trap Enable for MultiCAN Memory
     */
    inline void set_PETE_PETEMC() volatile
    {
        PETE |= 1u << 12u;
    }

    /**
     * Clear PETE's PETEMC bit.
     *
     * Parity Error Trap Enable for MultiCAN Memory
     */
    inline void clear_PETE_PETEMC() volatile
    {
        PETE &= ~(1u << 12u);
    }

    /**
     * Toggle PETE's PETEMC bit.
     *
     * Parity Error Trap Enable for MultiCAN Memory
     */
    inline void toggle_PETE_PETEMC() volatile
    {
        PETE ^= 1u << 12u;
    }

    /**
     * Get PETE's PETEU2 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEU2() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 10u));
    }

    /**
     * Set PETE's PETEU2 bit.
     *
     * Parity Error Trap Enable for USIC2 Memory
     */
    inline void set_PETE_PETEU2() volatile
    {
        PETE |= 1u << 10u;
    }

    /**
     * Clear PETE's PETEU2 bit.
     *
     * Parity Error Trap Enable for USIC2 Memory
     */
    inline void clear_PETE_PETEU2() volatile
    {
        PETE &= ~(1u << 10u);
    }

    /**
     * Toggle PETE's PETEU2 bit.
     *
     * Parity Error Trap Enable for USIC2 Memory
     */
    inline void toggle_PETE_PETEU2() volatile
    {
        PETE ^= 1u << 10u;
    }

    /**
     * Get PETE's PETEU1 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEU1() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 9u));
    }

    /**
     * Set PETE's PETEU1 bit.
     *
     * Parity Error Trap Enable for USIC1 Memory
     */
    inline void set_PETE_PETEU1() volatile
    {
        PETE |= 1u << 9u;
    }

    /**
     * Clear PETE's PETEU1 bit.
     *
     * Parity Error Trap Enable for USIC1 Memory
     */
    inline void clear_PETE_PETEU1() volatile
    {
        PETE &= ~(1u << 9u);
    }

    /**
     * Toggle PETE's PETEU1 bit.
     *
     * Parity Error Trap Enable for USIC1 Memory
     */
    inline void toggle_PETE_PETEU1() volatile
    {
        PETE ^= 1u << 9u;
    }

    /**
     * Get PETE's PETEU0 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEU0() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 8u));
    }

    /**
     * Set PETE's PETEU0 bit.
     *
     * Parity Error Trap Enable for USIC0 Memory
     */
    inline void set_PETE_PETEU0() volatile
    {
        PETE |= 1u << 8u;
    }

    /**
     * Clear PETE's PETEU0 bit.
     *
     * Parity Error Trap Enable for USIC0 Memory
     */
    inline void clear_PETE_PETEU0() volatile
    {
        PETE &= ~(1u << 8u);
    }

    /**
     * Toggle PETE's PETEU0 bit.
     *
     * Parity Error Trap Enable for USIC0 Memory
     */
    inline void toggle_PETE_PETEU0() volatile
    {
        PETE ^= 1u << 8u;
    }

    /**
     * Get PETE's PETEDS2 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEDS2() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 2u));
    }

    /**
     * Set PETE's PETEDS2 bit.
     *
     * Parity Error Trap Enable for DSRAM2
     */
    inline void set_PETE_PETEDS2() volatile
    {
        PETE |= 1u << 2u;
    }

    /**
     * Clear PETE's PETEDS2 bit.
     *
     * Parity Error Trap Enable for DSRAM2
     */
    inline void clear_PETE_PETEDS2() volatile
    {
        PETE &= ~(1u << 2u);
    }

    /**
     * Toggle PETE's PETEDS2 bit.
     *
     * Parity Error Trap Enable for DSRAM2
     */
    inline void toggle_PETE_PETEDS2() volatile
    {
        PETE ^= 1u << 2u;
    }

    /**
     * Get PETE's PETEDS1 bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEDS1() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 1u));
    }

    /**
     * Set PETE's PETEDS1 bit.
     *
     * Parity Error Trap Enable for DSRAM1
     */
    inline void set_PETE_PETEDS1() volatile
    {
        PETE |= 1u << 1u;
    }

    /**
     * Clear PETE's PETEDS1 bit.
     *
     * Parity Error Trap Enable for DSRAM1
     */
    inline void clear_PETE_PETEDS1() volatile
    {
        PETE &= ~(1u << 1u);
    }

    /**
     * Toggle PETE's PETEDS1 bit.
     *
     * Parity Error Trap Enable for DSRAM1
     */
    inline void toggle_PETE_PETEDS1() volatile
    {
        PETE ^= 1u << 1u;
    }

    /**
     * Get PETE's PETEPS bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PETE_PETEPS() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PETE & (1u << 0u));
    }

    /**
     * Set PETE's PETEPS bit.
     *
     * Parity Error Trap Enable for PSRAM
     */
    inline void set_PETE_PETEPS() volatile
    {
        PETE |= 1u << 0u;
    }

    /**
     * Clear PETE's PETEPS bit.
     *
     * Parity Error Trap Enable for PSRAM
     */
    inline void clear_PETE_PETEPS() volatile
    {
        PETE &= ~(1u << 0u);
    }

    /**
     * Toggle PETE's PETEPS bit.
     *
     * Parity Error Trap Enable for PSRAM
     */
    inline void toggle_PETE_PETEPS() volatile
    {
        PETE ^= 1u << 0u;
    }

    /**
     * Get all of PETE's bit fields.
     */
    inline void get_PETE(
        SCU_PARITY_PEEN_PEENSD1 &PETESD1, SCU_PARITY_PEEN_PEENSD1 &PETESD0,
        SCU_PARITY_PEEN_PEENSD1 &PETEETH0RX,
        SCU_PARITY_PEEN_PEENSD1 &PETEETH0TX, SCU_PARITY_PEEN_PEENSD1 &PETEUSB,
        SCU_PARITY_PEEN_PEENSD1 &PETEPPRF, SCU_PARITY_PEEN_PEENSD1 &PETEMC,
        SCU_PARITY_PEEN_PEENSD1 &PETEU2, SCU_PARITY_PEEN_PEENSD1 &PETEU1,
        SCU_PARITY_PEEN_PEENSD1 &PETEU0, SCU_PARITY_PEEN_PEENSD1 &PETEDS2,
        SCU_PARITY_PEEN_PEENSD1 &PETEDS1,
        SCU_PARITY_PEEN_PEENSD1 &PETEPS) volatile
    {
        uint32_t curr = PETE;

        PETESD1 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 20u));
        PETESD0 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 19u));
        PETEETH0RX = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 18u));
        PETEETH0TX = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 17u));
        PETEUSB = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 16u));
        PETEPPRF = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 13u));
        PETEMC = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 12u));
        PETEU2 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 10u));
        PETEU1 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 9u));
        PETEU0 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 8u));
        PETEDS2 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 2u));
        PETEDS1 = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 1u));
        PETEPS = SCU_PARITY_PEEN_PEENSD1(curr & (1u << 0u));
    }

    /**
     * Set all of PETE's bit fields.
     *
     * (read-write) Parity Error Trap Enable Register
     */
    inline void set_PETE(
        SCU_PARITY_PEEN_PEENSD1 PETESD1, SCU_PARITY_PEEN_PEENSD1 PETESD0,
        SCU_PARITY_PEEN_PEENSD1 PETEETH0RX, SCU_PARITY_PEEN_PEENSD1 PETEETH0TX,
        SCU_PARITY_PEEN_PEENSD1 PETEUSB, SCU_PARITY_PEEN_PEENSD1 PETEPPRF,
        SCU_PARITY_PEEN_PEENSD1 PETEMC, SCU_PARITY_PEEN_PEENSD1 PETEU2,
        SCU_PARITY_PEEN_PEENSD1 PETEU1, SCU_PARITY_PEEN_PEENSD1 PETEU0,
        SCU_PARITY_PEEN_PEENSD1 PETEDS2, SCU_PARITY_PEEN_PEENSD1 PETEDS1,
        SCU_PARITY_PEEN_PEENSD1 PETEPS) volatile
    {
        uint32_t curr = PETE;

        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(PETESD1) & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(PETESD0) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(PETEETH0RX) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(PETEETH0TX) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(PETEUSB) & 0b1u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(PETEPPRF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(PETEMC) & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(PETEU2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(PETEU1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(PETEU0) & 0b1u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(PETEDS2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(PETEDS1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PETEPS) & 0b1u) << 0u;

        PETE = curr;
    }

    /**
     * Get PERSTEN's RSEN bit.
     */
    inline SCU_PARITY_PEEN_PEENSD1 get_PERSTEN_RSEN() volatile
    {
        return SCU_PARITY_PEEN_PEENSD1(PERSTEN & (1u << 0u));
    }

    /**
     * Set PERSTEN's RSEN bit.
     *
     * System Reset Enable upon Parity Error Trap
     */
    inline void set_PERSTEN_RSEN() volatile
    {
        PERSTEN |= 1u << 0u;
    }

    /**
     * Clear PERSTEN's RSEN bit.
     *
     * System Reset Enable upon Parity Error Trap
     */
    inline void clear_PERSTEN_RSEN() volatile
    {
        PERSTEN &= ~(1u << 0u);
    }

    /**
     * Toggle PERSTEN's RSEN bit.
     *
     * System Reset Enable upon Parity Error Trap
     */
    inline void toggle_PERSTEN_RSEN() volatile
    {
        PERSTEN ^= 1u << 0u;
    }

    /**
     * Get PEFLAG's PESD1 bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PESD1() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 20u));
    }

    /**
     * Set PEFLAG's PESD1 bit.
     *
     * Parity Error Flag for SDMMC Memory 1
     */
    inline void set_PEFLAG_PESD1() volatile
    {
        PEFLAG |= 1u << 20u;
    }

    /**
     * Clear PEFLAG's PESD1 bit.
     *
     * Parity Error Flag for SDMMC Memory 1
     */
    inline void clear_PEFLAG_PESD1() volatile
    {
        PEFLAG &= ~(1u << 20u);
    }

    /**
     * Toggle PEFLAG's PESD1 bit.
     *
     * Parity Error Flag for SDMMC Memory 1
     */
    inline void toggle_PEFLAG_PESD1() volatile
    {
        PEFLAG ^= 1u << 20u;
    }

    /**
     * Get PEFLAG's PESD0 bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PESD0() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 19u));
    }

    /**
     * Set PEFLAG's PESD0 bit.
     *
     * Parity Error Flag for SDMMC Memory 0
     */
    inline void set_PEFLAG_PESD0() volatile
    {
        PEFLAG |= 1u << 19u;
    }

    /**
     * Clear PEFLAG's PESD0 bit.
     *
     * Parity Error Flag for SDMMC Memory 0
     */
    inline void clear_PEFLAG_PESD0() volatile
    {
        PEFLAG &= ~(1u << 19u);
    }

    /**
     * Toggle PEFLAG's PESD0 bit.
     *
     * Parity Error Flag for SDMMC Memory 0
     */
    inline void toggle_PEFLAG_PESD0() volatile
    {
        PEFLAG ^= 1u << 19u;
    }

    /**
     * Get PEFLAG's PEETH0RX bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEETH0RX() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 18u));
    }

    /**
     * Set PEFLAG's PEETH0RX bit.
     *
     * Parity Error Flag for ETH RX Memory
     */
    inline void set_PEFLAG_PEETH0RX() volatile
    {
        PEFLAG |= 1u << 18u;
    }

    /**
     * Clear PEFLAG's PEETH0RX bit.
     *
     * Parity Error Flag for ETH RX Memory
     */
    inline void clear_PEFLAG_PEETH0RX() volatile
    {
        PEFLAG &= ~(1u << 18u);
    }

    /**
     * Toggle PEFLAG's PEETH0RX bit.
     *
     * Parity Error Flag for ETH RX Memory
     */
    inline void toggle_PEFLAG_PEETH0RX() volatile
    {
        PEFLAG ^= 1u << 18u;
    }

    /**
     * Get PEFLAG's PEETH0TX bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEETH0TX() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 17u));
    }

    /**
     * Set PEFLAG's PEETH0TX bit.
     *
     * Parity Error Flag for ETH TX Memory
     */
    inline void set_PEFLAG_PEETH0TX() volatile
    {
        PEFLAG |= 1u << 17u;
    }

    /**
     * Clear PEFLAG's PEETH0TX bit.
     *
     * Parity Error Flag for ETH TX Memory
     */
    inline void clear_PEFLAG_PEETH0TX() volatile
    {
        PEFLAG &= ~(1u << 17u);
    }

    /**
     * Toggle PEFLAG's PEETH0TX bit.
     *
     * Parity Error Flag for ETH TX Memory
     */
    inline void toggle_PEFLAG_PEETH0TX() volatile
    {
        PEFLAG ^= 1u << 17u;
    }

    /**
     * Get PEFLAG's PEUSB bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEUSB() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 16u));
    }

    /**
     * Set PEFLAG's PEUSB bit.
     *
     * Parity Error Flag for USB Memory
     */
    inline void set_PEFLAG_PEUSB() volatile
    {
        PEFLAG |= 1u << 16u;
    }

    /**
     * Clear PEFLAG's PEUSB bit.
     *
     * Parity Error Flag for USB Memory
     */
    inline void clear_PEFLAG_PEUSB() volatile
    {
        PEFLAG &= ~(1u << 16u);
    }

    /**
     * Toggle PEFLAG's PEUSB bit.
     *
     * Parity Error Flag for USB Memory
     */
    inline void toggle_PEFLAG_PEUSB() volatile
    {
        PEFLAG ^= 1u << 16u;
    }

    /**
     * Get PEFLAG's PEFPPRF bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEFPPRF() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 13u));
    }

    /**
     * Set PEFLAG's PEFPPRF bit.
     *
     * Parity Error Flag for PMU Prefetch Memory
     */
    inline void set_PEFLAG_PEFPPRF() volatile
    {
        PEFLAG |= 1u << 13u;
    }

    /**
     * Clear PEFLAG's PEFPPRF bit.
     *
     * Parity Error Flag for PMU Prefetch Memory
     */
    inline void clear_PEFLAG_PEFPPRF() volatile
    {
        PEFLAG &= ~(1u << 13u);
    }

    /**
     * Toggle PEFLAG's PEFPPRF bit.
     *
     * Parity Error Flag for PMU Prefetch Memory
     */
    inline void toggle_PEFLAG_PEFPPRF() volatile
    {
        PEFLAG ^= 1u << 13u;
    }

    /**
     * Get PEFLAG's PEFMC bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEFMC() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 12u));
    }

    /**
     * Set PEFLAG's PEFMC bit.
     *
     * Parity Error Flag for MultiCAN Memory
     */
    inline void set_PEFLAG_PEFMC() volatile
    {
        PEFLAG |= 1u << 12u;
    }

    /**
     * Clear PEFLAG's PEFMC bit.
     *
     * Parity Error Flag for MultiCAN Memory
     */
    inline void clear_PEFLAG_PEFMC() volatile
    {
        PEFLAG &= ~(1u << 12u);
    }

    /**
     * Toggle PEFLAG's PEFMC bit.
     *
     * Parity Error Flag for MultiCAN Memory
     */
    inline void toggle_PEFLAG_PEFMC() volatile
    {
        PEFLAG ^= 1u << 12u;
    }

    /**
     * Get PEFLAG's PEFU2 bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEFU2() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 10u));
    }

    /**
     * Set PEFLAG's PEFU2 bit.
     *
     * Parity Error Flag for USIC2 Memory
     */
    inline void set_PEFLAG_PEFU2() volatile
    {
        PEFLAG |= 1u << 10u;
    }

    /**
     * Clear PEFLAG's PEFU2 bit.
     *
     * Parity Error Flag for USIC2 Memory
     */
    inline void clear_PEFLAG_PEFU2() volatile
    {
        PEFLAG &= ~(1u << 10u);
    }

    /**
     * Toggle PEFLAG's PEFU2 bit.
     *
     * Parity Error Flag for USIC2 Memory
     */
    inline void toggle_PEFLAG_PEFU2() volatile
    {
        PEFLAG ^= 1u << 10u;
    }

    /**
     * Get PEFLAG's PEFU1 bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEFU1() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 9u));
    }

    /**
     * Set PEFLAG's PEFU1 bit.
     *
     * Parity Error Flag for USIC1 Memory
     */
    inline void set_PEFLAG_PEFU1() volatile
    {
        PEFLAG |= 1u << 9u;
    }

    /**
     * Clear PEFLAG's PEFU1 bit.
     *
     * Parity Error Flag for USIC1 Memory
     */
    inline void clear_PEFLAG_PEFU1() volatile
    {
        PEFLAG &= ~(1u << 9u);
    }

    /**
     * Toggle PEFLAG's PEFU1 bit.
     *
     * Parity Error Flag for USIC1 Memory
     */
    inline void toggle_PEFLAG_PEFU1() volatile
    {
        PEFLAG ^= 1u << 9u;
    }

    /**
     * Get PEFLAG's PEFU0 bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEFU0() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 8u));
    }

    /**
     * Set PEFLAG's PEFU0 bit.
     *
     * Parity Error Flag for USIC0 Memory
     */
    inline void set_PEFLAG_PEFU0() volatile
    {
        PEFLAG |= 1u << 8u;
    }

    /**
     * Clear PEFLAG's PEFU0 bit.
     *
     * Parity Error Flag for USIC0 Memory
     */
    inline void clear_PEFLAG_PEFU0() volatile
    {
        PEFLAG &= ~(1u << 8u);
    }

    /**
     * Toggle PEFLAG's PEFU0 bit.
     *
     * Parity Error Flag for USIC0 Memory
     */
    inline void toggle_PEFLAG_PEFU0() volatile
    {
        PEFLAG ^= 1u << 8u;
    }

    /**
     * Get PEFLAG's PEFDS2 bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEFDS2() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 2u));
    }

    /**
     * Set PEFLAG's PEFDS2 bit.
     *
     * Parity Error Flag for DSRAM2
     */
    inline void set_PEFLAG_PEFDS2() volatile
    {
        PEFLAG |= 1u << 2u;
    }

    /**
     * Clear PEFLAG's PEFDS2 bit.
     *
     * Parity Error Flag for DSRAM2
     */
    inline void clear_PEFLAG_PEFDS2() volatile
    {
        PEFLAG &= ~(1u << 2u);
    }

    /**
     * Toggle PEFLAG's PEFDS2 bit.
     *
     * Parity Error Flag for DSRAM2
     */
    inline void toggle_PEFLAG_PEFDS2() volatile
    {
        PEFLAG ^= 1u << 2u;
    }

    /**
     * Get PEFLAG's PEFDS1 bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEFDS1() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 1u));
    }

    /**
     * Set PEFLAG's PEFDS1 bit.
     *
     * Parity Error Flag for DSRAM1
     */
    inline void set_PEFLAG_PEFDS1() volatile
    {
        PEFLAG |= 1u << 1u;
    }

    /**
     * Clear PEFLAG's PEFDS1 bit.
     *
     * Parity Error Flag for DSRAM1
     */
    inline void clear_PEFLAG_PEFDS1() volatile
    {
        PEFLAG &= ~(1u << 1u);
    }

    /**
     * Toggle PEFLAG's PEFDS1 bit.
     *
     * Parity Error Flag for DSRAM1
     */
    inline void toggle_PEFLAG_PEFDS1() volatile
    {
        PEFLAG ^= 1u << 1u;
    }

    /**
     * Get PEFLAG's PEFPS bit.
     */
    inline SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PEFPS() volatile
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 0u));
    }

    /**
     * Set PEFLAG's PEFPS bit.
     *
     * Parity Error Flag for PSRAM
     */
    inline void set_PEFLAG_PEFPS() volatile
    {
        PEFLAG |= 1u << 0u;
    }

    /**
     * Clear PEFLAG's PEFPS bit.
     *
     * Parity Error Flag for PSRAM
     */
    inline void clear_PEFLAG_PEFPS() volatile
    {
        PEFLAG &= ~(1u << 0u);
    }

    /**
     * Toggle PEFLAG's PEFPS bit.
     *
     * Parity Error Flag for PSRAM
     */
    inline void toggle_PEFLAG_PEFPS() volatile
    {
        PEFLAG ^= 1u << 0u;
    }

    /**
     * Get all of PEFLAG's bit fields.
     */
    inline void get_PEFLAG(
        SCU_PARITY_PEFLAG_PESD1 &PESD1, SCU_PARITY_PEFLAG_PESD1 &PESD0,
        SCU_PARITY_PEFLAG_PESD1 &PEETH0RX, SCU_PARITY_PEFLAG_PESD1 &PEETH0TX,
        SCU_PARITY_PEFLAG_PESD1 &PEUSB, SCU_PARITY_PEFLAG_PESD1 &PEFPPRF,
        SCU_PARITY_PEFLAG_PESD1 &PEFMC, SCU_PARITY_PEFLAG_PESD1 &PEFU2,
        SCU_PARITY_PEFLAG_PESD1 &PEFU1, SCU_PARITY_PEFLAG_PESD1 &PEFU0,
        SCU_PARITY_PEFLAG_PESD1 &PEFDS2, SCU_PARITY_PEFLAG_PESD1 &PEFDS1,
        SCU_PARITY_PEFLAG_PESD1 &PEFPS) volatile
    {
        uint32_t curr = PEFLAG;

        PESD1 = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 20u));
        PESD0 = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 19u));
        PEETH0RX = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 18u));
        PEETH0TX = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 17u));
        PEUSB = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 16u));
        PEFPPRF = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 13u));
        PEFMC = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 12u));
        PEFU2 = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 10u));
        PEFU1 = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 9u));
        PEFU0 = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 8u));
        PEFDS2 = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 2u));
        PEFDS1 = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 1u));
        PEFPS = SCU_PARITY_PEFLAG_PESD1(curr & (1u << 0u));
    }

    /**
     * Set all of PEFLAG's bit fields.
     *
     * (read-write) Parity Error Flag Register
     */
    inline void set_PEFLAG(
        SCU_PARITY_PEFLAG_PESD1 PESD1, SCU_PARITY_PEFLAG_PESD1 PESD0,
        SCU_PARITY_PEFLAG_PESD1 PEETH0RX, SCU_PARITY_PEFLAG_PESD1 PEETH0TX,
        SCU_PARITY_PEFLAG_PESD1 PEUSB, SCU_PARITY_PEFLAG_PESD1 PEFPPRF,
        SCU_PARITY_PEFLAG_PESD1 PEFMC, SCU_PARITY_PEFLAG_PESD1 PEFU2,
        SCU_PARITY_PEFLAG_PESD1 PEFU1, SCU_PARITY_PEFLAG_PESD1 PEFU0,
        SCU_PARITY_PEFLAG_PESD1 PEFDS2, SCU_PARITY_PEFLAG_PESD1 PEFDS1,
        SCU_PARITY_PEFLAG_PESD1 PEFPS) volatile
    {
        uint32_t curr = PEFLAG;

        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(PESD1) & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(PESD0) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(PEETH0RX) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(PEETH0TX) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(PEUSB) & 0b1u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(PEFPPRF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(PEFMC) & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(PEFU2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(PEFU1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(PEFU0) & 0b1u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(PEFDS2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(PEFDS1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PEFPS) & 0b1u) << 0u;

        PEFLAG = curr;
    }

    /**
     * Get PMTPR's PWR field.
     */
    inline uint8_t get_PMTPR_PWR() volatile
    {
        return (PMTPR >> 0u) & 0b11111111u;
    }

    /**
     * Set PMTPR's PWR field.
     *
     * Parity Write Values for Memory Test
     */
    inline void set_PMTPR_PWR(uint8_t value) volatile
    {
        uint32_t curr = PMTPR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        PMTPR = curr;
    }

    /**
     * Get PMTPR's PRD field.
     */
    inline uint8_t get_PMTPR_PRD() volatile
    {
        return (PMTPR >> 8u) & 0b11111111u;
    }

    /**
     * Get all of PMTPR's bit fields.
     */
    inline void get_PMTPR(uint8_t &PWR, uint8_t &PRD) volatile
    {
        uint32_t curr = PMTPR;

        PWR = (curr >> 0u) & 0b11111111u;
        PRD = (curr >> 8u) & 0b11111111u;
    }

    /**
     * Get PMTSR's MTSD1 bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTSD1() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 20u));
    }

    /**
     * Set PMTSR's MTSD1 bit.
     *
     * Test Enable Control for SDMMC Memory 1
     */
    inline void set_PMTSR_MTSD1() volatile
    {
        PMTSR |= 1u << 20u;
    }

    /**
     * Clear PMTSR's MTSD1 bit.
     *
     * Test Enable Control for SDMMC Memory 1
     */
    inline void clear_PMTSR_MTSD1() volatile
    {
        PMTSR &= ~(1u << 20u);
    }

    /**
     * Toggle PMTSR's MTSD1 bit.
     *
     * Test Enable Control for SDMMC Memory 1
     */
    inline void toggle_PMTSR_MTSD1() volatile
    {
        PMTSR ^= 1u << 20u;
    }

    /**
     * Get PMTSR's MTSD0 bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTSD0() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 19u));
    }

    /**
     * Set PMTSR's MTSD0 bit.
     *
     * Test Enable Control for SDMMC Memory 0
     */
    inline void set_PMTSR_MTSD0() volatile
    {
        PMTSR |= 1u << 19u;
    }

    /**
     * Clear PMTSR's MTSD0 bit.
     *
     * Test Enable Control for SDMMC Memory 0
     */
    inline void clear_PMTSR_MTSD0() volatile
    {
        PMTSR &= ~(1u << 19u);
    }

    /**
     * Toggle PMTSR's MTSD0 bit.
     *
     * Test Enable Control for SDMMC Memory 0
     */
    inline void toggle_PMTSR_MTSD0() volatile
    {
        PMTSR ^= 1u << 19u;
    }

    /**
     * Get PMTSR's MTETH0RX bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTETH0RX() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 18u));
    }

    /**
     * Set PMTSR's MTETH0RX bit.
     *
     * Test Enable Control for ETH RX Memory
     */
    inline void set_PMTSR_MTETH0RX() volatile
    {
        PMTSR |= 1u << 18u;
    }

    /**
     * Clear PMTSR's MTETH0RX bit.
     *
     * Test Enable Control for ETH RX Memory
     */
    inline void clear_PMTSR_MTETH0RX() volatile
    {
        PMTSR &= ~(1u << 18u);
    }

    /**
     * Toggle PMTSR's MTETH0RX bit.
     *
     * Test Enable Control for ETH RX Memory
     */
    inline void toggle_PMTSR_MTETH0RX() volatile
    {
        PMTSR ^= 1u << 18u;
    }

    /**
     * Get PMTSR's MTETH0TX bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTETH0TX() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 17u));
    }

    /**
     * Set PMTSR's MTETH0TX bit.
     *
     * Test Enable Control for ETH TX Memory
     */
    inline void set_PMTSR_MTETH0TX() volatile
    {
        PMTSR |= 1u << 17u;
    }

    /**
     * Clear PMTSR's MTETH0TX bit.
     *
     * Test Enable Control for ETH TX Memory
     */
    inline void clear_PMTSR_MTETH0TX() volatile
    {
        PMTSR &= ~(1u << 17u);
    }

    /**
     * Toggle PMTSR's MTETH0TX bit.
     *
     * Test Enable Control for ETH TX Memory
     */
    inline void toggle_PMTSR_MTETH0TX() volatile
    {
        PMTSR ^= 1u << 17u;
    }

    /**
     * Get PMTSR's MTUSB bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTUSB() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 16u));
    }

    /**
     * Set PMTSR's MTUSB bit.
     *
     * Test Enable Control for USB Memory
     */
    inline void set_PMTSR_MTUSB() volatile
    {
        PMTSR |= 1u << 16u;
    }

    /**
     * Clear PMTSR's MTUSB bit.
     *
     * Test Enable Control for USB Memory
     */
    inline void clear_PMTSR_MTUSB() volatile
    {
        PMTSR &= ~(1u << 16u);
    }

    /**
     * Toggle PMTSR's MTUSB bit.
     *
     * Test Enable Control for USB Memory
     */
    inline void toggle_PMTSR_MTUSB() volatile
    {
        PMTSR ^= 1u << 16u;
    }

    /**
     * Get PMTSR's MTEPPRF bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTEPPRF() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 13u));
    }

    /**
     * Set PMTSR's MTEPPRF bit.
     *
     * Test Enable Control for PMU Prefetch Memory
     */
    inline void set_PMTSR_MTEPPRF() volatile
    {
        PMTSR |= 1u << 13u;
    }

    /**
     * Clear PMTSR's MTEPPRF bit.
     *
     * Test Enable Control for PMU Prefetch Memory
     */
    inline void clear_PMTSR_MTEPPRF() volatile
    {
        PMTSR &= ~(1u << 13u);
    }

    /**
     * Toggle PMTSR's MTEPPRF bit.
     *
     * Test Enable Control for PMU Prefetch Memory
     */
    inline void toggle_PMTSR_MTEPPRF() volatile
    {
        PMTSR ^= 1u << 13u;
    }

    /**
     * Get PMTSR's MTEMC bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTEMC() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 12u));
    }

    /**
     * Set PMTSR's MTEMC bit.
     *
     * Test Enable Control for MultiCAN Memory
     */
    inline void set_PMTSR_MTEMC() volatile
    {
        PMTSR |= 1u << 12u;
    }

    /**
     * Clear PMTSR's MTEMC bit.
     *
     * Test Enable Control for MultiCAN Memory
     */
    inline void clear_PMTSR_MTEMC() volatile
    {
        PMTSR &= ~(1u << 12u);
    }

    /**
     * Toggle PMTSR's MTEMC bit.
     *
     * Test Enable Control for MultiCAN Memory
     */
    inline void toggle_PMTSR_MTEMC() volatile
    {
        PMTSR ^= 1u << 12u;
    }

    /**
     * Get PMTSR's MTEU2 bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTEU2() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 10u));
    }

    /**
     * Set PMTSR's MTEU2 bit.
     *
     * Test Enable Control for USIC2 Memory
     */
    inline void set_PMTSR_MTEU2() volatile
    {
        PMTSR |= 1u << 10u;
    }

    /**
     * Clear PMTSR's MTEU2 bit.
     *
     * Test Enable Control for USIC2 Memory
     */
    inline void clear_PMTSR_MTEU2() volatile
    {
        PMTSR &= ~(1u << 10u);
    }

    /**
     * Toggle PMTSR's MTEU2 bit.
     *
     * Test Enable Control for USIC2 Memory
     */
    inline void toggle_PMTSR_MTEU2() volatile
    {
        PMTSR ^= 1u << 10u;
    }

    /**
     * Get PMTSR's MTEU1 bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTEU1() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 9u));
    }

    /**
     * Set PMTSR's MTEU1 bit.
     *
     * Test Enable Control for USIC1 Memory
     */
    inline void set_PMTSR_MTEU1() volatile
    {
        PMTSR |= 1u << 9u;
    }

    /**
     * Clear PMTSR's MTEU1 bit.
     *
     * Test Enable Control for USIC1 Memory
     */
    inline void clear_PMTSR_MTEU1() volatile
    {
        PMTSR &= ~(1u << 9u);
    }

    /**
     * Toggle PMTSR's MTEU1 bit.
     *
     * Test Enable Control for USIC1 Memory
     */
    inline void toggle_PMTSR_MTEU1() volatile
    {
        PMTSR ^= 1u << 9u;
    }

    /**
     * Get PMTSR's MTEU0 bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTEU0() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 8u));
    }

    /**
     * Set PMTSR's MTEU0 bit.
     *
     * Test Enable Control for USIC0 Memory
     */
    inline void set_PMTSR_MTEU0() volatile
    {
        PMTSR |= 1u << 8u;
    }

    /**
     * Clear PMTSR's MTEU0 bit.
     *
     * Test Enable Control for USIC0 Memory
     */
    inline void clear_PMTSR_MTEU0() volatile
    {
        PMTSR &= ~(1u << 8u);
    }

    /**
     * Toggle PMTSR's MTEU0 bit.
     *
     * Test Enable Control for USIC0 Memory
     */
    inline void toggle_PMTSR_MTEU0() volatile
    {
        PMTSR ^= 1u << 8u;
    }

    /**
     * Get PMTSR's MTENDS2 bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTENDS2() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 2u));
    }

    /**
     * Set PMTSR's MTENDS2 bit.
     *
     * Test Enable Control for DSRAM2
     */
    inline void set_PMTSR_MTENDS2() volatile
    {
        PMTSR |= 1u << 2u;
    }

    /**
     * Clear PMTSR's MTENDS2 bit.
     *
     * Test Enable Control for DSRAM2
     */
    inline void clear_PMTSR_MTENDS2() volatile
    {
        PMTSR &= ~(1u << 2u);
    }

    /**
     * Toggle PMTSR's MTENDS2 bit.
     *
     * Test Enable Control for DSRAM2
     */
    inline void toggle_PMTSR_MTENDS2() volatile
    {
        PMTSR ^= 1u << 2u;
    }

    /**
     * Get PMTSR's MTENDS1 bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTENDS1() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 1u));
    }

    /**
     * Set PMTSR's MTENDS1 bit.
     *
     * Test Enable Control for DSRAM1
     */
    inline void set_PMTSR_MTENDS1() volatile
    {
        PMTSR |= 1u << 1u;
    }

    /**
     * Clear PMTSR's MTENDS1 bit.
     *
     * Test Enable Control for DSRAM1
     */
    inline void clear_PMTSR_MTENDS1() volatile
    {
        PMTSR &= ~(1u << 1u);
    }

    /**
     * Toggle PMTSR's MTENDS1 bit.
     *
     * Test Enable Control for DSRAM1
     */
    inline void toggle_PMTSR_MTENDS1() volatile
    {
        PMTSR ^= 1u << 1u;
    }

    /**
     * Get PMTSR's MTENPS bit.
     */
    inline SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTENPS() volatile
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 0u));
    }

    /**
     * Set PMTSR's MTENPS bit.
     *
     * Test Enable Control for PSRAM
     */
    inline void set_PMTSR_MTENPS() volatile
    {
        PMTSR |= 1u << 0u;
    }

    /**
     * Clear PMTSR's MTENPS bit.
     *
     * Test Enable Control for PSRAM
     */
    inline void clear_PMTSR_MTENPS() volatile
    {
        PMTSR &= ~(1u << 0u);
    }

    /**
     * Toggle PMTSR's MTENPS bit.
     *
     * Test Enable Control for PSRAM
     */
    inline void toggle_PMTSR_MTENPS() volatile
    {
        PMTSR ^= 1u << 0u;
    }

    /**
     * Get all of PMTSR's bit fields.
     */
    inline void get_PMTSR(
        SCU_PARITY_PMTSR_MTSD1 &MTSD1, SCU_PARITY_PMTSR_MTSD1 &MTSD0,
        SCU_PARITY_PMTSR_MTSD1 &MTETH0RX, SCU_PARITY_PMTSR_MTSD1 &MTETH0TX,
        SCU_PARITY_PMTSR_MTSD1 &MTUSB, SCU_PARITY_PMTSR_MTSD1 &MTEPPRF,
        SCU_PARITY_PMTSR_MTSD1 &MTEMC, SCU_PARITY_PMTSR_MTSD1 &MTEU2,
        SCU_PARITY_PMTSR_MTSD1 &MTEU1, SCU_PARITY_PMTSR_MTSD1 &MTEU0,
        SCU_PARITY_PMTSR_MTSD1 &MTENDS2, SCU_PARITY_PMTSR_MTSD1 &MTENDS1,
        SCU_PARITY_PMTSR_MTSD1 &MTENPS) volatile
    {
        uint32_t curr = PMTSR;

        MTSD1 = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 20u));
        MTSD0 = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 19u));
        MTETH0RX = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 18u));
        MTETH0TX = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 17u));
        MTUSB = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 16u));
        MTEPPRF = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 13u));
        MTEMC = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 12u));
        MTEU2 = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 10u));
        MTEU1 = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 9u));
        MTEU0 = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 8u));
        MTENDS2 = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 2u));
        MTENDS1 = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 1u));
        MTENPS = SCU_PARITY_PMTSR_MTSD1(curr & (1u << 0u));
    }

    /**
     * Set all of PMTSR's bit fields.
     *
     * (read-write) Parity Memory Test Select Register
     */
    inline void set_PMTSR(
        SCU_PARITY_PMTSR_MTSD1 MTSD1, SCU_PARITY_PMTSR_MTSD1 MTSD0,
        SCU_PARITY_PMTSR_MTSD1 MTETH0RX, SCU_PARITY_PMTSR_MTSD1 MTETH0TX,
        SCU_PARITY_PMTSR_MTSD1 MTUSB, SCU_PARITY_PMTSR_MTSD1 MTEPPRF,
        SCU_PARITY_PMTSR_MTSD1 MTEMC, SCU_PARITY_PMTSR_MTSD1 MTEU2,
        SCU_PARITY_PMTSR_MTSD1 MTEU1, SCU_PARITY_PMTSR_MTSD1 MTEU0,
        SCU_PARITY_PMTSR_MTSD1 MTENDS2, SCU_PARITY_PMTSR_MTSD1 MTENDS1,
        SCU_PARITY_PMTSR_MTSD1 MTENPS) volatile
    {
        uint32_t curr = PMTSR;

        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(MTSD1) & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(MTSD0) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(MTETH0RX) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(MTETH0TX) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(MTUSB) & 0b1u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(MTEPPRF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(MTEMC) & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(MTEU2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(MTEU1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(MTEU0) & 0b1u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(MTENDS2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(MTENDS1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(MTENPS) & 0b1u) << 0u;

        PMTSR = curr;
    }
};

static_assert(sizeof(scu_parity) == scu_parity::size);

static volatile scu_parity *const SCU_PARITY =
    reinterpret_cast<scu_parity *>(0x5000413C);

}; // namespace XMC4700
