/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/SCU_PARITY_MCHKCON_MCANDRA.h"
#include "../enums/SCU_PARITY_MCHKCON_PPRFDRA.h"
#include "../enums/SCU_PARITY_MCHKCON_SELDS1.h"
#include "../enums/SCU_PARITY_MCHKCON_SELDS2.h"
#include "../enums/SCU_PARITY_MCHKCON_SELETH0RX.h"
#include "../enums/SCU_PARITY_MCHKCON_SELETH0TX.h"
#include "../enums/SCU_PARITY_MCHKCON_SELPS.h"
#include "../enums/SCU_PARITY_MCHKCON_SELSD0.h"
#include "../enums/SCU_PARITY_MCHKCON_SELSD1.h"
#include "../enums/SCU_PARITY_MCHKCON_SELUSB.h"
#include "../enums/SCU_PARITY_MCHKCON_USIC0DRA.h"
#include "../enums/SCU_PARITY_MCHKCON_USIC1DRA.h"
#include "../enums/SCU_PARITY_MCHKCON_USIC2DRA.h"
#include "../enums/SCU_PARITY_PEEN_PEENDS1.h"
#include "../enums/SCU_PARITY_PEEN_PEENDS2.h"
#include "../enums/SCU_PARITY_PEEN_PEENETH0RX.h"
#include "../enums/SCU_PARITY_PEEN_PEENETH0TX.h"
#include "../enums/SCU_PARITY_PEEN_PEENMC.h"
#include "../enums/SCU_PARITY_PEEN_PEENPPRF.h"
#include "../enums/SCU_PARITY_PEEN_PEENPS.h"
#include "../enums/SCU_PARITY_PEEN_PEENSD0.h"
#include "../enums/SCU_PARITY_PEEN_PEENSD1.h"
#include "../enums/SCU_PARITY_PEEN_PEENU0.h"
#include "../enums/SCU_PARITY_PEEN_PEENU1.h"
#include "../enums/SCU_PARITY_PEEN_PEENU2.h"
#include "../enums/SCU_PARITY_PEEN_PEENUSB.h"
#include "../enums/SCU_PARITY_PEFLAG_PEETH0RX.h"
#include "../enums/SCU_PARITY_PEFLAG_PEETH0TX.h"
#include "../enums/SCU_PARITY_PEFLAG_PEFDS1.h"
#include "../enums/SCU_PARITY_PEFLAG_PEFDS2.h"
#include "../enums/SCU_PARITY_PEFLAG_PEFMC.h"
#include "../enums/SCU_PARITY_PEFLAG_PEFPPRF.h"
#include "../enums/SCU_PARITY_PEFLAG_PEFPS.h"
#include "../enums/SCU_PARITY_PEFLAG_PEFU0.h"
#include "../enums/SCU_PARITY_PEFLAG_PEFU1.h"
#include "../enums/SCU_PARITY_PEFLAG_PEFU2.h"
#include "../enums/SCU_PARITY_PEFLAG_PESD0.h"
#include "../enums/SCU_PARITY_PEFLAG_PESD1.h"
#include "../enums/SCU_PARITY_PEFLAG_PEUSB.h"
#include "../enums/SCU_PARITY_PERSTEN_RSEN.h"
#include "../enums/SCU_PARITY_PETE_PETEDS1.h"
#include "../enums/SCU_PARITY_PETE_PETEDS2.h"
#include "../enums/SCU_PARITY_PETE_PETEETH0RX.h"
#include "../enums/SCU_PARITY_PETE_PETEETH0TX.h"
#include "../enums/SCU_PARITY_PETE_PETEMC.h"
#include "../enums/SCU_PARITY_PETE_PETEPPRF.h"
#include "../enums/SCU_PARITY_PETE_PETEPS.h"
#include "../enums/SCU_PARITY_PETE_PETESD0.h"
#include "../enums/SCU_PARITY_PETE_PETESD1.h"
#include "../enums/SCU_PARITY_PETE_PETEU0.h"
#include "../enums/SCU_PARITY_PETE_PETEU1.h"
#include "../enums/SCU_PARITY_PETE_PETEU2.h"
#include "../enums/SCU_PARITY_PETE_PETEUSB.h"
#include "../enums/SCU_PARITY_PMTSR_MTEMC.h"
#include "../enums/SCU_PARITY_PMTSR_MTENDS1.h"
#include "../enums/SCU_PARITY_PMTSR_MTENDS2.h"
#include "../enums/SCU_PARITY_PMTSR_MTENPS.h"
#include "../enums/SCU_PARITY_PMTSR_MTEPPRF.h"
#include "../enums/SCU_PARITY_PMTSR_MTETH0RX.h"
#include "../enums/SCU_PARITY_PMTSR_MTETH0TX.h"
#include "../enums/SCU_PARITY_PMTSR_MTEU0.h"
#include "../enums/SCU_PARITY_PMTSR_MTEU1.h"
#include "../enums/SCU_PARITY_PMTSR_MTEU2.h"
#include "../enums/SCU_PARITY_PMTSR_MTSD0.h"
#include "../enums/SCU_PARITY_PMTSR_MTSD1.h"
#include "../enums/SCU_PARITY_PMTSR_MTUSB.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * System Control Unit
 */
struct [[gnu::packed]] scu_parity
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< scu_parity's identifier. */
    static constexpr std::size_t size = 32; /*!< scu_parity's size in bytes. */

    /* Fields. */
    uint32_t PEEN;    /*!< (read-write) Parity Error Enable Register */
    uint32_t MCHKCON; /*!< (read-write) Memory Checking Control Register */
    uint32_t PETE;    /*!< (read-write) Parity Error Trap Enable Register */
    uint32_t PERSTEN; /*!< (read-write) Parity Error Reset Enable Register */
    const uint32_t reserved_padding0 = {};
    uint32_t PEFLAG; /*!< (read-write) Parity Error Flag Register */
    uint32_t PMTPR;  /*!< (read-write) Parity Memory Test Pattern Register */
    uint32_t PMTSR;  /*!< (read-write) Parity Memory Test Select Register */

    /* Methods. */

    /**
     * Get PEEN's PEENSD1 bit.
     */
    SCU_PARITY_PEEN_PEENSD1 get_PEEN_PEENSD1()
    {
        return SCU_PARITY_PEEN_PEENSD1(PEEN & (1u << 20u));
    }

    /**
     * Set PEEN's PEENSD1 bit.
     */
    inline void set_PEEN_PEENSD1()
    {
        PEEN |= 1u << 20u;
    }

    /**
     * Clear PEEN's PEENSD1 bit.
     */
    inline void clear_PEEN_PEENSD1()
    {
        PEEN &= ~(1u << 20u);
    }

    /**
     * Toggle PEEN's PEENSD1 bit.
     */
    inline void toggle_PEEN_PEENSD1()
    {
        PEEN ^= 1u << 20u;
    }

    /**
     * Get PEEN's PEENSD0 bit.
     */
    SCU_PARITY_PEEN_PEENSD0 get_PEEN_PEENSD0()
    {
        return SCU_PARITY_PEEN_PEENSD0(PEEN & (1u << 19u));
    }

    /**
     * Set PEEN's PEENSD0 bit.
     */
    inline void set_PEEN_PEENSD0()
    {
        PEEN |= 1u << 19u;
    }

    /**
     * Clear PEEN's PEENSD0 bit.
     */
    inline void clear_PEEN_PEENSD0()
    {
        PEEN &= ~(1u << 19u);
    }

    /**
     * Toggle PEEN's PEENSD0 bit.
     */
    inline void toggle_PEEN_PEENSD0()
    {
        PEEN ^= 1u << 19u;
    }

    /**
     * Get PEEN's PEENETH0RX bit.
     */
    SCU_PARITY_PEEN_PEENETH0RX get_PEEN_PEENETH0RX()
    {
        return SCU_PARITY_PEEN_PEENETH0RX(PEEN & (1u << 18u));
    }

    /**
     * Set PEEN's PEENETH0RX bit.
     */
    inline void set_PEEN_PEENETH0RX()
    {
        PEEN |= 1u << 18u;
    }

    /**
     * Clear PEEN's PEENETH0RX bit.
     */
    inline void clear_PEEN_PEENETH0RX()
    {
        PEEN &= ~(1u << 18u);
    }

    /**
     * Toggle PEEN's PEENETH0RX bit.
     */
    inline void toggle_PEEN_PEENETH0RX()
    {
        PEEN ^= 1u << 18u;
    }

    /**
     * Get PEEN's PEENETH0TX bit.
     */
    SCU_PARITY_PEEN_PEENETH0TX get_PEEN_PEENETH0TX()
    {
        return SCU_PARITY_PEEN_PEENETH0TX(PEEN & (1u << 17u));
    }

    /**
     * Set PEEN's PEENETH0TX bit.
     */
    inline void set_PEEN_PEENETH0TX()
    {
        PEEN |= 1u << 17u;
    }

    /**
     * Clear PEEN's PEENETH0TX bit.
     */
    inline void clear_PEEN_PEENETH0TX()
    {
        PEEN &= ~(1u << 17u);
    }

    /**
     * Toggle PEEN's PEENETH0TX bit.
     */
    inline void toggle_PEEN_PEENETH0TX()
    {
        PEEN ^= 1u << 17u;
    }

    /**
     * Get PEEN's PEENUSB bit.
     */
    SCU_PARITY_PEEN_PEENUSB get_PEEN_PEENUSB()
    {
        return SCU_PARITY_PEEN_PEENUSB(PEEN & (1u << 16u));
    }

    /**
     * Set PEEN's PEENUSB bit.
     */
    inline void set_PEEN_PEENUSB()
    {
        PEEN |= 1u << 16u;
    }

    /**
     * Clear PEEN's PEENUSB bit.
     */
    inline void clear_PEEN_PEENUSB()
    {
        PEEN &= ~(1u << 16u);
    }

    /**
     * Toggle PEEN's PEENUSB bit.
     */
    inline void toggle_PEEN_PEENUSB()
    {
        PEEN ^= 1u << 16u;
    }

    /**
     * Get PEEN's PEENPPRF bit.
     */
    SCU_PARITY_PEEN_PEENPPRF get_PEEN_PEENPPRF()
    {
        return SCU_PARITY_PEEN_PEENPPRF(PEEN & (1u << 13u));
    }

    /**
     * Set PEEN's PEENPPRF bit.
     */
    inline void set_PEEN_PEENPPRF()
    {
        PEEN |= 1u << 13u;
    }

    /**
     * Clear PEEN's PEENPPRF bit.
     */
    inline void clear_PEEN_PEENPPRF()
    {
        PEEN &= ~(1u << 13u);
    }

    /**
     * Toggle PEEN's PEENPPRF bit.
     */
    inline void toggle_PEEN_PEENPPRF()
    {
        PEEN ^= 1u << 13u;
    }

    /**
     * Get PEEN's PEENMC bit.
     */
    SCU_PARITY_PEEN_PEENMC get_PEEN_PEENMC()
    {
        return SCU_PARITY_PEEN_PEENMC(PEEN & (1u << 12u));
    }

    /**
     * Set PEEN's PEENMC bit.
     */
    inline void set_PEEN_PEENMC()
    {
        PEEN |= 1u << 12u;
    }

    /**
     * Clear PEEN's PEENMC bit.
     */
    inline void clear_PEEN_PEENMC()
    {
        PEEN &= ~(1u << 12u);
    }

    /**
     * Toggle PEEN's PEENMC bit.
     */
    inline void toggle_PEEN_PEENMC()
    {
        PEEN ^= 1u << 12u;
    }

    /**
     * Get PEEN's PEENU2 bit.
     */
    SCU_PARITY_PEEN_PEENU2 get_PEEN_PEENU2()
    {
        return SCU_PARITY_PEEN_PEENU2(PEEN & (1u << 10u));
    }

    /**
     * Set PEEN's PEENU2 bit.
     */
    inline void set_PEEN_PEENU2()
    {
        PEEN |= 1u << 10u;
    }

    /**
     * Clear PEEN's PEENU2 bit.
     */
    inline void clear_PEEN_PEENU2()
    {
        PEEN &= ~(1u << 10u);
    }

    /**
     * Toggle PEEN's PEENU2 bit.
     */
    inline void toggle_PEEN_PEENU2()
    {
        PEEN ^= 1u << 10u;
    }

    /**
     * Get PEEN's PEENU1 bit.
     */
    SCU_PARITY_PEEN_PEENU1 get_PEEN_PEENU1()
    {
        return SCU_PARITY_PEEN_PEENU1(PEEN & (1u << 9u));
    }

    /**
     * Set PEEN's PEENU1 bit.
     */
    inline void set_PEEN_PEENU1()
    {
        PEEN |= 1u << 9u;
    }

    /**
     * Clear PEEN's PEENU1 bit.
     */
    inline void clear_PEEN_PEENU1()
    {
        PEEN &= ~(1u << 9u);
    }

    /**
     * Toggle PEEN's PEENU1 bit.
     */
    inline void toggle_PEEN_PEENU1()
    {
        PEEN ^= 1u << 9u;
    }

    /**
     * Get PEEN's PEENU0 bit.
     */
    SCU_PARITY_PEEN_PEENU0 get_PEEN_PEENU0()
    {
        return SCU_PARITY_PEEN_PEENU0(PEEN & (1u << 8u));
    }

    /**
     * Set PEEN's PEENU0 bit.
     */
    inline void set_PEEN_PEENU0()
    {
        PEEN |= 1u << 8u;
    }

    /**
     * Clear PEEN's PEENU0 bit.
     */
    inline void clear_PEEN_PEENU0()
    {
        PEEN &= ~(1u << 8u);
    }

    /**
     * Toggle PEEN's PEENU0 bit.
     */
    inline void toggle_PEEN_PEENU0()
    {
        PEEN ^= 1u << 8u;
    }

    /**
     * Get PEEN's PEENDS2 bit.
     */
    SCU_PARITY_PEEN_PEENDS2 get_PEEN_PEENDS2()
    {
        return SCU_PARITY_PEEN_PEENDS2(PEEN & (1u << 2u));
    }

    /**
     * Set PEEN's PEENDS2 bit.
     */
    inline void set_PEEN_PEENDS2()
    {
        PEEN |= 1u << 2u;
    }

    /**
     * Clear PEEN's PEENDS2 bit.
     */
    inline void clear_PEEN_PEENDS2()
    {
        PEEN &= ~(1u << 2u);
    }

    /**
     * Toggle PEEN's PEENDS2 bit.
     */
    inline void toggle_PEEN_PEENDS2()
    {
        PEEN ^= 1u << 2u;
    }

    /**
     * Get PEEN's PEENDS1 bit.
     */
    SCU_PARITY_PEEN_PEENDS1 get_PEEN_PEENDS1()
    {
        return SCU_PARITY_PEEN_PEENDS1(PEEN & (1u << 1u));
    }

    /**
     * Set PEEN's PEENDS1 bit.
     */
    inline void set_PEEN_PEENDS1()
    {
        PEEN |= 1u << 1u;
    }

    /**
     * Clear PEEN's PEENDS1 bit.
     */
    inline void clear_PEEN_PEENDS1()
    {
        PEEN &= ~(1u << 1u);
    }

    /**
     * Toggle PEEN's PEENDS1 bit.
     */
    inline void toggle_PEEN_PEENDS1()
    {
        PEEN ^= 1u << 1u;
    }

    /**
     * Get PEEN's PEENPS bit.
     */
    SCU_PARITY_PEEN_PEENPS get_PEEN_PEENPS()
    {
        return SCU_PARITY_PEEN_PEENPS(PEEN & (1u << 0u));
    }

    /**
     * Set PEEN's PEENPS bit.
     */
    inline void set_PEEN_PEENPS()
    {
        PEEN |= 1u << 0u;
    }

    /**
     * Clear PEEN's PEENPS bit.
     */
    inline void clear_PEEN_PEENPS()
    {
        PEEN &= ~(1u << 0u);
    }

    /**
     * Toggle PEEN's PEENPS bit.
     */
    inline void toggle_PEEN_PEENPS()
    {
        PEEN ^= 1u << 0u;
    }

    /**
     * Get MCHKCON's SELSD1 bit.
     */
    SCU_PARITY_MCHKCON_SELSD1 get_MCHKCON_SELSD1()
    {
        return SCU_PARITY_MCHKCON_SELSD1(MCHKCON & (1u << 20u));
    }

    /**
     * Set MCHKCON's SELSD1 bit.
     */
    inline void set_MCHKCON_SELSD1()
    {
        MCHKCON |= 1u << 20u;
    }

    /**
     * Clear MCHKCON's SELSD1 bit.
     */
    inline void clear_MCHKCON_SELSD1()
    {
        MCHKCON &= ~(1u << 20u);
    }

    /**
     * Toggle MCHKCON's SELSD1 bit.
     */
    inline void toggle_MCHKCON_SELSD1()
    {
        MCHKCON ^= 1u << 20u;
    }

    /**
     * Get MCHKCON's SELSD0 bit.
     */
    SCU_PARITY_MCHKCON_SELSD0 get_MCHKCON_SELSD0()
    {
        return SCU_PARITY_MCHKCON_SELSD0(MCHKCON & (1u << 19u));
    }

    /**
     * Set MCHKCON's SELSD0 bit.
     */
    inline void set_MCHKCON_SELSD0()
    {
        MCHKCON |= 1u << 19u;
    }

    /**
     * Clear MCHKCON's SELSD0 bit.
     */
    inline void clear_MCHKCON_SELSD0()
    {
        MCHKCON &= ~(1u << 19u);
    }

    /**
     * Toggle MCHKCON's SELSD0 bit.
     */
    inline void toggle_MCHKCON_SELSD0()
    {
        MCHKCON ^= 1u << 19u;
    }

    /**
     * Get MCHKCON's SELETH0RX bit.
     */
    SCU_PARITY_MCHKCON_SELETH0RX get_MCHKCON_SELETH0RX()
    {
        return SCU_PARITY_MCHKCON_SELETH0RX(MCHKCON & (1u << 18u));
    }

    /**
     * Set MCHKCON's SELETH0RX bit.
     */
    inline void set_MCHKCON_SELETH0RX()
    {
        MCHKCON |= 1u << 18u;
    }

    /**
     * Clear MCHKCON's SELETH0RX bit.
     */
    inline void clear_MCHKCON_SELETH0RX()
    {
        MCHKCON &= ~(1u << 18u);
    }

    /**
     * Toggle MCHKCON's SELETH0RX bit.
     */
    inline void toggle_MCHKCON_SELETH0RX()
    {
        MCHKCON ^= 1u << 18u;
    }

    /**
     * Get MCHKCON's SELETH0TX bit.
     */
    SCU_PARITY_MCHKCON_SELETH0TX get_MCHKCON_SELETH0TX()
    {
        return SCU_PARITY_MCHKCON_SELETH0TX(MCHKCON & (1u << 17u));
    }

    /**
     * Set MCHKCON's SELETH0TX bit.
     */
    inline void set_MCHKCON_SELETH0TX()
    {
        MCHKCON |= 1u << 17u;
    }

    /**
     * Clear MCHKCON's SELETH0TX bit.
     */
    inline void clear_MCHKCON_SELETH0TX()
    {
        MCHKCON &= ~(1u << 17u);
    }

    /**
     * Toggle MCHKCON's SELETH0TX bit.
     */
    inline void toggle_MCHKCON_SELETH0TX()
    {
        MCHKCON ^= 1u << 17u;
    }

    /**
     * Get MCHKCON's SELUSB bit.
     */
    SCU_PARITY_MCHKCON_SELUSB get_MCHKCON_SELUSB()
    {
        return SCU_PARITY_MCHKCON_SELUSB(MCHKCON & (1u << 16u));
    }

    /**
     * Set MCHKCON's SELUSB bit.
     */
    inline void set_MCHKCON_SELUSB()
    {
        MCHKCON |= 1u << 16u;
    }

    /**
     * Clear MCHKCON's SELUSB bit.
     */
    inline void clear_MCHKCON_SELUSB()
    {
        MCHKCON &= ~(1u << 16u);
    }

    /**
     * Toggle MCHKCON's SELUSB bit.
     */
    inline void toggle_MCHKCON_SELUSB()
    {
        MCHKCON ^= 1u << 16u;
    }

    /**
     * Get MCHKCON's PPRFDRA bit.
     */
    SCU_PARITY_MCHKCON_PPRFDRA get_MCHKCON_PPRFDRA()
    {
        return SCU_PARITY_MCHKCON_PPRFDRA(MCHKCON & (1u << 13u));
    }

    /**
     * Set MCHKCON's PPRFDRA bit.
     */
    inline void set_MCHKCON_PPRFDRA()
    {
        MCHKCON |= 1u << 13u;
    }

    /**
     * Clear MCHKCON's PPRFDRA bit.
     */
    inline void clear_MCHKCON_PPRFDRA()
    {
        MCHKCON &= ~(1u << 13u);
    }

    /**
     * Toggle MCHKCON's PPRFDRA bit.
     */
    inline void toggle_MCHKCON_PPRFDRA()
    {
        MCHKCON ^= 1u << 13u;
    }

    /**
     * Get MCHKCON's MCANDRA bit.
     */
    SCU_PARITY_MCHKCON_MCANDRA get_MCHKCON_MCANDRA()
    {
        return SCU_PARITY_MCHKCON_MCANDRA(MCHKCON & (1u << 12u));
    }

    /**
     * Set MCHKCON's MCANDRA bit.
     */
    inline void set_MCHKCON_MCANDRA()
    {
        MCHKCON |= 1u << 12u;
    }

    /**
     * Clear MCHKCON's MCANDRA bit.
     */
    inline void clear_MCHKCON_MCANDRA()
    {
        MCHKCON &= ~(1u << 12u);
    }

    /**
     * Toggle MCHKCON's MCANDRA bit.
     */
    inline void toggle_MCHKCON_MCANDRA()
    {
        MCHKCON ^= 1u << 12u;
    }

    /**
     * Get MCHKCON's USIC2DRA bit.
     */
    SCU_PARITY_MCHKCON_USIC2DRA get_MCHKCON_USIC2DRA()
    {
        return SCU_PARITY_MCHKCON_USIC2DRA(MCHKCON & (1u << 10u));
    }

    /**
     * Set MCHKCON's USIC2DRA bit.
     */
    inline void set_MCHKCON_USIC2DRA()
    {
        MCHKCON |= 1u << 10u;
    }

    /**
     * Clear MCHKCON's USIC2DRA bit.
     */
    inline void clear_MCHKCON_USIC2DRA()
    {
        MCHKCON &= ~(1u << 10u);
    }

    /**
     * Toggle MCHKCON's USIC2DRA bit.
     */
    inline void toggle_MCHKCON_USIC2DRA()
    {
        MCHKCON ^= 1u << 10u;
    }

    /**
     * Get MCHKCON's USIC1DRA bit.
     */
    SCU_PARITY_MCHKCON_USIC1DRA get_MCHKCON_USIC1DRA()
    {
        return SCU_PARITY_MCHKCON_USIC1DRA(MCHKCON & (1u << 9u));
    }

    /**
     * Set MCHKCON's USIC1DRA bit.
     */
    inline void set_MCHKCON_USIC1DRA()
    {
        MCHKCON |= 1u << 9u;
    }

    /**
     * Clear MCHKCON's USIC1DRA bit.
     */
    inline void clear_MCHKCON_USIC1DRA()
    {
        MCHKCON &= ~(1u << 9u);
    }

    /**
     * Toggle MCHKCON's USIC1DRA bit.
     */
    inline void toggle_MCHKCON_USIC1DRA()
    {
        MCHKCON ^= 1u << 9u;
    }

    /**
     * Get MCHKCON's USIC0DRA bit.
     */
    SCU_PARITY_MCHKCON_USIC0DRA get_MCHKCON_USIC0DRA()
    {
        return SCU_PARITY_MCHKCON_USIC0DRA(MCHKCON & (1u << 8u));
    }

    /**
     * Set MCHKCON's USIC0DRA bit.
     */
    inline void set_MCHKCON_USIC0DRA()
    {
        MCHKCON |= 1u << 8u;
    }

    /**
     * Clear MCHKCON's USIC0DRA bit.
     */
    inline void clear_MCHKCON_USIC0DRA()
    {
        MCHKCON &= ~(1u << 8u);
    }

    /**
     * Toggle MCHKCON's USIC0DRA bit.
     */
    inline void toggle_MCHKCON_USIC0DRA()
    {
        MCHKCON ^= 1u << 8u;
    }

    /**
     * Get MCHKCON's SELDS2 bit.
     */
    SCU_PARITY_MCHKCON_SELDS2 get_MCHKCON_SELDS2()
    {
        return SCU_PARITY_MCHKCON_SELDS2(MCHKCON & (1u << 2u));
    }

    /**
     * Set MCHKCON's SELDS2 bit.
     */
    inline void set_MCHKCON_SELDS2()
    {
        MCHKCON |= 1u << 2u;
    }

    /**
     * Clear MCHKCON's SELDS2 bit.
     */
    inline void clear_MCHKCON_SELDS2()
    {
        MCHKCON &= ~(1u << 2u);
    }

    /**
     * Toggle MCHKCON's SELDS2 bit.
     */
    inline void toggle_MCHKCON_SELDS2()
    {
        MCHKCON ^= 1u << 2u;
    }

    /**
     * Get MCHKCON's SELDS1 bit.
     */
    SCU_PARITY_MCHKCON_SELDS1 get_MCHKCON_SELDS1()
    {
        return SCU_PARITY_MCHKCON_SELDS1(MCHKCON & (1u << 1u));
    }

    /**
     * Set MCHKCON's SELDS1 bit.
     */
    inline void set_MCHKCON_SELDS1()
    {
        MCHKCON |= 1u << 1u;
    }

    /**
     * Clear MCHKCON's SELDS1 bit.
     */
    inline void clear_MCHKCON_SELDS1()
    {
        MCHKCON &= ~(1u << 1u);
    }

    /**
     * Toggle MCHKCON's SELDS1 bit.
     */
    inline void toggle_MCHKCON_SELDS1()
    {
        MCHKCON ^= 1u << 1u;
    }

    /**
     * Get MCHKCON's SELPS bit.
     */
    SCU_PARITY_MCHKCON_SELPS get_MCHKCON_SELPS()
    {
        return SCU_PARITY_MCHKCON_SELPS(MCHKCON & (1u << 0u));
    }

    /**
     * Set MCHKCON's SELPS bit.
     */
    inline void set_MCHKCON_SELPS()
    {
        MCHKCON |= 1u << 0u;
    }

    /**
     * Clear MCHKCON's SELPS bit.
     */
    inline void clear_MCHKCON_SELPS()
    {
        MCHKCON &= ~(1u << 0u);
    }

    /**
     * Toggle MCHKCON's SELPS bit.
     */
    inline void toggle_MCHKCON_SELPS()
    {
        MCHKCON ^= 1u << 0u;
    }

    /**
     * Get PETE's PETESD1 bit.
     */
    SCU_PARITY_PETE_PETESD1 get_PETE_PETESD1()
    {
        return SCU_PARITY_PETE_PETESD1(PETE & (1u << 20u));
    }

    /**
     * Set PETE's PETESD1 bit.
     */
    inline void set_PETE_PETESD1()
    {
        PETE |= 1u << 20u;
    }

    /**
     * Clear PETE's PETESD1 bit.
     */
    inline void clear_PETE_PETESD1()
    {
        PETE &= ~(1u << 20u);
    }

    /**
     * Toggle PETE's PETESD1 bit.
     */
    inline void toggle_PETE_PETESD1()
    {
        PETE ^= 1u << 20u;
    }

    /**
     * Get PETE's PETESD0 bit.
     */
    SCU_PARITY_PETE_PETESD0 get_PETE_PETESD0()
    {
        return SCU_PARITY_PETE_PETESD0(PETE & (1u << 19u));
    }

    /**
     * Set PETE's PETESD0 bit.
     */
    inline void set_PETE_PETESD0()
    {
        PETE |= 1u << 19u;
    }

    /**
     * Clear PETE's PETESD0 bit.
     */
    inline void clear_PETE_PETESD0()
    {
        PETE &= ~(1u << 19u);
    }

    /**
     * Toggle PETE's PETESD0 bit.
     */
    inline void toggle_PETE_PETESD0()
    {
        PETE ^= 1u << 19u;
    }

    /**
     * Get PETE's PETEETH0RX bit.
     */
    SCU_PARITY_PETE_PETEETH0RX get_PETE_PETEETH0RX()
    {
        return SCU_PARITY_PETE_PETEETH0RX(PETE & (1u << 18u));
    }

    /**
     * Set PETE's PETEETH0RX bit.
     */
    inline void set_PETE_PETEETH0RX()
    {
        PETE |= 1u << 18u;
    }

    /**
     * Clear PETE's PETEETH0RX bit.
     */
    inline void clear_PETE_PETEETH0RX()
    {
        PETE &= ~(1u << 18u);
    }

    /**
     * Toggle PETE's PETEETH0RX bit.
     */
    inline void toggle_PETE_PETEETH0RX()
    {
        PETE ^= 1u << 18u;
    }

    /**
     * Get PETE's PETEETH0TX bit.
     */
    SCU_PARITY_PETE_PETEETH0TX get_PETE_PETEETH0TX()
    {
        return SCU_PARITY_PETE_PETEETH0TX(PETE & (1u << 17u));
    }

    /**
     * Set PETE's PETEETH0TX bit.
     */
    inline void set_PETE_PETEETH0TX()
    {
        PETE |= 1u << 17u;
    }

    /**
     * Clear PETE's PETEETH0TX bit.
     */
    inline void clear_PETE_PETEETH0TX()
    {
        PETE &= ~(1u << 17u);
    }

    /**
     * Toggle PETE's PETEETH0TX bit.
     */
    inline void toggle_PETE_PETEETH0TX()
    {
        PETE ^= 1u << 17u;
    }

    /**
     * Get PETE's PETEUSB bit.
     */
    SCU_PARITY_PETE_PETEUSB get_PETE_PETEUSB()
    {
        return SCU_PARITY_PETE_PETEUSB(PETE & (1u << 16u));
    }

    /**
     * Set PETE's PETEUSB bit.
     */
    inline void set_PETE_PETEUSB()
    {
        PETE |= 1u << 16u;
    }

    /**
     * Clear PETE's PETEUSB bit.
     */
    inline void clear_PETE_PETEUSB()
    {
        PETE &= ~(1u << 16u);
    }

    /**
     * Toggle PETE's PETEUSB bit.
     */
    inline void toggle_PETE_PETEUSB()
    {
        PETE ^= 1u << 16u;
    }

    /**
     * Get PETE's PETEPPRF bit.
     */
    SCU_PARITY_PETE_PETEPPRF get_PETE_PETEPPRF()
    {
        return SCU_PARITY_PETE_PETEPPRF(PETE & (1u << 13u));
    }

    /**
     * Set PETE's PETEPPRF bit.
     */
    inline void set_PETE_PETEPPRF()
    {
        PETE |= 1u << 13u;
    }

    /**
     * Clear PETE's PETEPPRF bit.
     */
    inline void clear_PETE_PETEPPRF()
    {
        PETE &= ~(1u << 13u);
    }

    /**
     * Toggle PETE's PETEPPRF bit.
     */
    inline void toggle_PETE_PETEPPRF()
    {
        PETE ^= 1u << 13u;
    }

    /**
     * Get PETE's PETEMC bit.
     */
    SCU_PARITY_PETE_PETEMC get_PETE_PETEMC()
    {
        return SCU_PARITY_PETE_PETEMC(PETE & (1u << 12u));
    }

    /**
     * Set PETE's PETEMC bit.
     */
    inline void set_PETE_PETEMC()
    {
        PETE |= 1u << 12u;
    }

    /**
     * Clear PETE's PETEMC bit.
     */
    inline void clear_PETE_PETEMC()
    {
        PETE &= ~(1u << 12u);
    }

    /**
     * Toggle PETE's PETEMC bit.
     */
    inline void toggle_PETE_PETEMC()
    {
        PETE ^= 1u << 12u;
    }

    /**
     * Get PETE's PETEU2 bit.
     */
    SCU_PARITY_PETE_PETEU2 get_PETE_PETEU2()
    {
        return SCU_PARITY_PETE_PETEU2(PETE & (1u << 10u));
    }

    /**
     * Set PETE's PETEU2 bit.
     */
    inline void set_PETE_PETEU2()
    {
        PETE |= 1u << 10u;
    }

    /**
     * Clear PETE's PETEU2 bit.
     */
    inline void clear_PETE_PETEU2()
    {
        PETE &= ~(1u << 10u);
    }

    /**
     * Toggle PETE's PETEU2 bit.
     */
    inline void toggle_PETE_PETEU2()
    {
        PETE ^= 1u << 10u;
    }

    /**
     * Get PETE's PETEU1 bit.
     */
    SCU_PARITY_PETE_PETEU1 get_PETE_PETEU1()
    {
        return SCU_PARITY_PETE_PETEU1(PETE & (1u << 9u));
    }

    /**
     * Set PETE's PETEU1 bit.
     */
    inline void set_PETE_PETEU1()
    {
        PETE |= 1u << 9u;
    }

    /**
     * Clear PETE's PETEU1 bit.
     */
    inline void clear_PETE_PETEU1()
    {
        PETE &= ~(1u << 9u);
    }

    /**
     * Toggle PETE's PETEU1 bit.
     */
    inline void toggle_PETE_PETEU1()
    {
        PETE ^= 1u << 9u;
    }

    /**
     * Get PETE's PETEU0 bit.
     */
    SCU_PARITY_PETE_PETEU0 get_PETE_PETEU0()
    {
        return SCU_PARITY_PETE_PETEU0(PETE & (1u << 8u));
    }

    /**
     * Set PETE's PETEU0 bit.
     */
    inline void set_PETE_PETEU0()
    {
        PETE |= 1u << 8u;
    }

    /**
     * Clear PETE's PETEU0 bit.
     */
    inline void clear_PETE_PETEU0()
    {
        PETE &= ~(1u << 8u);
    }

    /**
     * Toggle PETE's PETEU0 bit.
     */
    inline void toggle_PETE_PETEU0()
    {
        PETE ^= 1u << 8u;
    }

    /**
     * Get PETE's PETEDS2 bit.
     */
    SCU_PARITY_PETE_PETEDS2 get_PETE_PETEDS2()
    {
        return SCU_PARITY_PETE_PETEDS2(PETE & (1u << 2u));
    }

    /**
     * Set PETE's PETEDS2 bit.
     */
    inline void set_PETE_PETEDS2()
    {
        PETE |= 1u << 2u;
    }

    /**
     * Clear PETE's PETEDS2 bit.
     */
    inline void clear_PETE_PETEDS2()
    {
        PETE &= ~(1u << 2u);
    }

    /**
     * Toggle PETE's PETEDS2 bit.
     */
    inline void toggle_PETE_PETEDS2()
    {
        PETE ^= 1u << 2u;
    }

    /**
     * Get PETE's PETEDS1 bit.
     */
    SCU_PARITY_PETE_PETEDS1 get_PETE_PETEDS1()
    {
        return SCU_PARITY_PETE_PETEDS1(PETE & (1u << 1u));
    }

    /**
     * Set PETE's PETEDS1 bit.
     */
    inline void set_PETE_PETEDS1()
    {
        PETE |= 1u << 1u;
    }

    /**
     * Clear PETE's PETEDS1 bit.
     */
    inline void clear_PETE_PETEDS1()
    {
        PETE &= ~(1u << 1u);
    }

    /**
     * Toggle PETE's PETEDS1 bit.
     */
    inline void toggle_PETE_PETEDS1()
    {
        PETE ^= 1u << 1u;
    }

    /**
     * Get PETE's PETEPS bit.
     */
    SCU_PARITY_PETE_PETEPS get_PETE_PETEPS()
    {
        return SCU_PARITY_PETE_PETEPS(PETE & (1u << 0u));
    }

    /**
     * Set PETE's PETEPS bit.
     */
    inline void set_PETE_PETEPS()
    {
        PETE |= 1u << 0u;
    }

    /**
     * Clear PETE's PETEPS bit.
     */
    inline void clear_PETE_PETEPS()
    {
        PETE &= ~(1u << 0u);
    }

    /**
     * Toggle PETE's PETEPS bit.
     */
    inline void toggle_PETE_PETEPS()
    {
        PETE ^= 1u << 0u;
    }

    /**
     * Get PERSTEN's RSEN bit.
     */
    SCU_PARITY_PERSTEN_RSEN get_PERSTEN_RSEN()
    {
        return SCU_PARITY_PERSTEN_RSEN(PERSTEN & (1u << 0u));
    }

    /**
     * Set PERSTEN's RSEN bit.
     */
    inline void set_PERSTEN_RSEN()
    {
        PERSTEN |= 1u << 0u;
    }

    /**
     * Clear PERSTEN's RSEN bit.
     */
    inline void clear_PERSTEN_RSEN()
    {
        PERSTEN &= ~(1u << 0u);
    }

    /**
     * Toggle PERSTEN's RSEN bit.
     */
    inline void toggle_PERSTEN_RSEN()
    {
        PERSTEN ^= 1u << 0u;
    }

    /**
     * Get PEFLAG's PESD1 bit.
     */
    SCU_PARITY_PEFLAG_PESD1 get_PEFLAG_PESD1()
    {
        return SCU_PARITY_PEFLAG_PESD1(PEFLAG & (1u << 20u));
    }

    /**
     * Set PEFLAG's PESD1 bit.
     */
    inline void set_PEFLAG_PESD1()
    {
        PEFLAG |= 1u << 20u;
    }

    /**
     * Clear PEFLAG's PESD1 bit.
     */
    inline void clear_PEFLAG_PESD1()
    {
        PEFLAG &= ~(1u << 20u);
    }

    /**
     * Toggle PEFLAG's PESD1 bit.
     */
    inline void toggle_PEFLAG_PESD1()
    {
        PEFLAG ^= 1u << 20u;
    }

    /**
     * Get PEFLAG's PESD0 bit.
     */
    SCU_PARITY_PEFLAG_PESD0 get_PEFLAG_PESD0()
    {
        return SCU_PARITY_PEFLAG_PESD0(PEFLAG & (1u << 19u));
    }

    /**
     * Set PEFLAG's PESD0 bit.
     */
    inline void set_PEFLAG_PESD0()
    {
        PEFLAG |= 1u << 19u;
    }

    /**
     * Clear PEFLAG's PESD0 bit.
     */
    inline void clear_PEFLAG_PESD0()
    {
        PEFLAG &= ~(1u << 19u);
    }

    /**
     * Toggle PEFLAG's PESD0 bit.
     */
    inline void toggle_PEFLAG_PESD0()
    {
        PEFLAG ^= 1u << 19u;
    }

    /**
     * Get PEFLAG's PEETH0RX bit.
     */
    SCU_PARITY_PEFLAG_PEETH0RX get_PEFLAG_PEETH0RX()
    {
        return SCU_PARITY_PEFLAG_PEETH0RX(PEFLAG & (1u << 18u));
    }

    /**
     * Set PEFLAG's PEETH0RX bit.
     */
    inline void set_PEFLAG_PEETH0RX()
    {
        PEFLAG |= 1u << 18u;
    }

    /**
     * Clear PEFLAG's PEETH0RX bit.
     */
    inline void clear_PEFLAG_PEETH0RX()
    {
        PEFLAG &= ~(1u << 18u);
    }

    /**
     * Toggle PEFLAG's PEETH0RX bit.
     */
    inline void toggle_PEFLAG_PEETH0RX()
    {
        PEFLAG ^= 1u << 18u;
    }

    /**
     * Get PEFLAG's PEETH0TX bit.
     */
    SCU_PARITY_PEFLAG_PEETH0TX get_PEFLAG_PEETH0TX()
    {
        return SCU_PARITY_PEFLAG_PEETH0TX(PEFLAG & (1u << 17u));
    }

    /**
     * Set PEFLAG's PEETH0TX bit.
     */
    inline void set_PEFLAG_PEETH0TX()
    {
        PEFLAG |= 1u << 17u;
    }

    /**
     * Clear PEFLAG's PEETH0TX bit.
     */
    inline void clear_PEFLAG_PEETH0TX()
    {
        PEFLAG &= ~(1u << 17u);
    }

    /**
     * Toggle PEFLAG's PEETH0TX bit.
     */
    inline void toggle_PEFLAG_PEETH0TX()
    {
        PEFLAG ^= 1u << 17u;
    }

    /**
     * Get PEFLAG's PEUSB bit.
     */
    SCU_PARITY_PEFLAG_PEUSB get_PEFLAG_PEUSB()
    {
        return SCU_PARITY_PEFLAG_PEUSB(PEFLAG & (1u << 16u));
    }

    /**
     * Set PEFLAG's PEUSB bit.
     */
    inline void set_PEFLAG_PEUSB()
    {
        PEFLAG |= 1u << 16u;
    }

    /**
     * Clear PEFLAG's PEUSB bit.
     */
    inline void clear_PEFLAG_PEUSB()
    {
        PEFLAG &= ~(1u << 16u);
    }

    /**
     * Toggle PEFLAG's PEUSB bit.
     */
    inline void toggle_PEFLAG_PEUSB()
    {
        PEFLAG ^= 1u << 16u;
    }

    /**
     * Get PEFLAG's PEFPPRF bit.
     */
    SCU_PARITY_PEFLAG_PEFPPRF get_PEFLAG_PEFPPRF()
    {
        return SCU_PARITY_PEFLAG_PEFPPRF(PEFLAG & (1u << 13u));
    }

    /**
     * Set PEFLAG's PEFPPRF bit.
     */
    inline void set_PEFLAG_PEFPPRF()
    {
        PEFLAG |= 1u << 13u;
    }

    /**
     * Clear PEFLAG's PEFPPRF bit.
     */
    inline void clear_PEFLAG_PEFPPRF()
    {
        PEFLAG &= ~(1u << 13u);
    }

    /**
     * Toggle PEFLAG's PEFPPRF bit.
     */
    inline void toggle_PEFLAG_PEFPPRF()
    {
        PEFLAG ^= 1u << 13u;
    }

    /**
     * Get PEFLAG's PEFMC bit.
     */
    SCU_PARITY_PEFLAG_PEFMC get_PEFLAG_PEFMC()
    {
        return SCU_PARITY_PEFLAG_PEFMC(PEFLAG & (1u << 12u));
    }

    /**
     * Set PEFLAG's PEFMC bit.
     */
    inline void set_PEFLAG_PEFMC()
    {
        PEFLAG |= 1u << 12u;
    }

    /**
     * Clear PEFLAG's PEFMC bit.
     */
    inline void clear_PEFLAG_PEFMC()
    {
        PEFLAG &= ~(1u << 12u);
    }

    /**
     * Toggle PEFLAG's PEFMC bit.
     */
    inline void toggle_PEFLAG_PEFMC()
    {
        PEFLAG ^= 1u << 12u;
    }

    /**
     * Get PEFLAG's PEFU2 bit.
     */
    SCU_PARITY_PEFLAG_PEFU2 get_PEFLAG_PEFU2()
    {
        return SCU_PARITY_PEFLAG_PEFU2(PEFLAG & (1u << 10u));
    }

    /**
     * Set PEFLAG's PEFU2 bit.
     */
    inline void set_PEFLAG_PEFU2()
    {
        PEFLAG |= 1u << 10u;
    }

    /**
     * Clear PEFLAG's PEFU2 bit.
     */
    inline void clear_PEFLAG_PEFU2()
    {
        PEFLAG &= ~(1u << 10u);
    }

    /**
     * Toggle PEFLAG's PEFU2 bit.
     */
    inline void toggle_PEFLAG_PEFU2()
    {
        PEFLAG ^= 1u << 10u;
    }

    /**
     * Get PEFLAG's PEFU1 bit.
     */
    SCU_PARITY_PEFLAG_PEFU1 get_PEFLAG_PEFU1()
    {
        return SCU_PARITY_PEFLAG_PEFU1(PEFLAG & (1u << 9u));
    }

    /**
     * Set PEFLAG's PEFU1 bit.
     */
    inline void set_PEFLAG_PEFU1()
    {
        PEFLAG |= 1u << 9u;
    }

    /**
     * Clear PEFLAG's PEFU1 bit.
     */
    inline void clear_PEFLAG_PEFU1()
    {
        PEFLAG &= ~(1u << 9u);
    }

    /**
     * Toggle PEFLAG's PEFU1 bit.
     */
    inline void toggle_PEFLAG_PEFU1()
    {
        PEFLAG ^= 1u << 9u;
    }

    /**
     * Get PEFLAG's PEFU0 bit.
     */
    SCU_PARITY_PEFLAG_PEFU0 get_PEFLAG_PEFU0()
    {
        return SCU_PARITY_PEFLAG_PEFU0(PEFLAG & (1u << 8u));
    }

    /**
     * Set PEFLAG's PEFU0 bit.
     */
    inline void set_PEFLAG_PEFU0()
    {
        PEFLAG |= 1u << 8u;
    }

    /**
     * Clear PEFLAG's PEFU0 bit.
     */
    inline void clear_PEFLAG_PEFU0()
    {
        PEFLAG &= ~(1u << 8u);
    }

    /**
     * Toggle PEFLAG's PEFU0 bit.
     */
    inline void toggle_PEFLAG_PEFU0()
    {
        PEFLAG ^= 1u << 8u;
    }

    /**
     * Get PEFLAG's PEFDS2 bit.
     */
    SCU_PARITY_PEFLAG_PEFDS2 get_PEFLAG_PEFDS2()
    {
        return SCU_PARITY_PEFLAG_PEFDS2(PEFLAG & (1u << 2u));
    }

    /**
     * Set PEFLAG's PEFDS2 bit.
     */
    inline void set_PEFLAG_PEFDS2()
    {
        PEFLAG |= 1u << 2u;
    }

    /**
     * Clear PEFLAG's PEFDS2 bit.
     */
    inline void clear_PEFLAG_PEFDS2()
    {
        PEFLAG &= ~(1u << 2u);
    }

    /**
     * Toggle PEFLAG's PEFDS2 bit.
     */
    inline void toggle_PEFLAG_PEFDS2()
    {
        PEFLAG ^= 1u << 2u;
    }

    /**
     * Get PEFLAG's PEFDS1 bit.
     */
    SCU_PARITY_PEFLAG_PEFDS1 get_PEFLAG_PEFDS1()
    {
        return SCU_PARITY_PEFLAG_PEFDS1(PEFLAG & (1u << 1u));
    }

    /**
     * Set PEFLAG's PEFDS1 bit.
     */
    inline void set_PEFLAG_PEFDS1()
    {
        PEFLAG |= 1u << 1u;
    }

    /**
     * Clear PEFLAG's PEFDS1 bit.
     */
    inline void clear_PEFLAG_PEFDS1()
    {
        PEFLAG &= ~(1u << 1u);
    }

    /**
     * Toggle PEFLAG's PEFDS1 bit.
     */
    inline void toggle_PEFLAG_PEFDS1()
    {
        PEFLAG ^= 1u << 1u;
    }

    /**
     * Get PEFLAG's PEFPS bit.
     */
    SCU_PARITY_PEFLAG_PEFPS get_PEFLAG_PEFPS()
    {
        return SCU_PARITY_PEFLAG_PEFPS(PEFLAG & (1u << 0u));
    }

    /**
     * Set PEFLAG's PEFPS bit.
     */
    inline void set_PEFLAG_PEFPS()
    {
        PEFLAG |= 1u << 0u;
    }

    /**
     * Clear PEFLAG's PEFPS bit.
     */
    inline void clear_PEFLAG_PEFPS()
    {
        PEFLAG &= ~(1u << 0u);
    }

    /**
     * Toggle PEFLAG's PEFPS bit.
     */
    inline void toggle_PEFLAG_PEFPS()
    {
        PEFLAG ^= 1u << 0u;
    }

    /**
     * Get PMTPR's PWR field.
     */
    uint8_t get_PMTPR_PWR()
    {
        return (PMTPR >> 0u) & 0b11111111u;
    }

    /**
     * Set PMTPR's PWR field.
     */
    inline void set_PMTPR_PWR(uint8_t value)
    {
        uint32_t curr = PMTPR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        PMTPR = curr;
    }

    /**
     * Get PMTPR's PRD field.
     */
    uint8_t get_PMTPR_PRD()
    {
        return (PMTPR >> 8u) & 0b11111111u;
    }

    /**
     * Get PMTSR's MTSD1 bit.
     */
    SCU_PARITY_PMTSR_MTSD1 get_PMTSR_MTSD1()
    {
        return SCU_PARITY_PMTSR_MTSD1(PMTSR & (1u << 20u));
    }

    /**
     * Set PMTSR's MTSD1 bit.
     */
    inline void set_PMTSR_MTSD1()
    {
        PMTSR |= 1u << 20u;
    }

    /**
     * Clear PMTSR's MTSD1 bit.
     */
    inline void clear_PMTSR_MTSD1()
    {
        PMTSR &= ~(1u << 20u);
    }

    /**
     * Toggle PMTSR's MTSD1 bit.
     */
    inline void toggle_PMTSR_MTSD1()
    {
        PMTSR ^= 1u << 20u;
    }

    /**
     * Get PMTSR's MTSD0 bit.
     */
    SCU_PARITY_PMTSR_MTSD0 get_PMTSR_MTSD0()
    {
        return SCU_PARITY_PMTSR_MTSD0(PMTSR & (1u << 19u));
    }

    /**
     * Set PMTSR's MTSD0 bit.
     */
    inline void set_PMTSR_MTSD0()
    {
        PMTSR |= 1u << 19u;
    }

    /**
     * Clear PMTSR's MTSD0 bit.
     */
    inline void clear_PMTSR_MTSD0()
    {
        PMTSR &= ~(1u << 19u);
    }

    /**
     * Toggle PMTSR's MTSD0 bit.
     */
    inline void toggle_PMTSR_MTSD0()
    {
        PMTSR ^= 1u << 19u;
    }

    /**
     * Get PMTSR's MTETH0RX bit.
     */
    SCU_PARITY_PMTSR_MTETH0RX get_PMTSR_MTETH0RX()
    {
        return SCU_PARITY_PMTSR_MTETH0RX(PMTSR & (1u << 18u));
    }

    /**
     * Set PMTSR's MTETH0RX bit.
     */
    inline void set_PMTSR_MTETH0RX()
    {
        PMTSR |= 1u << 18u;
    }

    /**
     * Clear PMTSR's MTETH0RX bit.
     */
    inline void clear_PMTSR_MTETH0RX()
    {
        PMTSR &= ~(1u << 18u);
    }

    /**
     * Toggle PMTSR's MTETH0RX bit.
     */
    inline void toggle_PMTSR_MTETH0RX()
    {
        PMTSR ^= 1u << 18u;
    }

    /**
     * Get PMTSR's MTETH0TX bit.
     */
    SCU_PARITY_PMTSR_MTETH0TX get_PMTSR_MTETH0TX()
    {
        return SCU_PARITY_PMTSR_MTETH0TX(PMTSR & (1u << 17u));
    }

    /**
     * Set PMTSR's MTETH0TX bit.
     */
    inline void set_PMTSR_MTETH0TX()
    {
        PMTSR |= 1u << 17u;
    }

    /**
     * Clear PMTSR's MTETH0TX bit.
     */
    inline void clear_PMTSR_MTETH0TX()
    {
        PMTSR &= ~(1u << 17u);
    }

    /**
     * Toggle PMTSR's MTETH0TX bit.
     */
    inline void toggle_PMTSR_MTETH0TX()
    {
        PMTSR ^= 1u << 17u;
    }

    /**
     * Get PMTSR's MTUSB bit.
     */
    SCU_PARITY_PMTSR_MTUSB get_PMTSR_MTUSB()
    {
        return SCU_PARITY_PMTSR_MTUSB(PMTSR & (1u << 16u));
    }

    /**
     * Set PMTSR's MTUSB bit.
     */
    inline void set_PMTSR_MTUSB()
    {
        PMTSR |= 1u << 16u;
    }

    /**
     * Clear PMTSR's MTUSB bit.
     */
    inline void clear_PMTSR_MTUSB()
    {
        PMTSR &= ~(1u << 16u);
    }

    /**
     * Toggle PMTSR's MTUSB bit.
     */
    inline void toggle_PMTSR_MTUSB()
    {
        PMTSR ^= 1u << 16u;
    }

    /**
     * Get PMTSR's MTEPPRF bit.
     */
    SCU_PARITY_PMTSR_MTEPPRF get_PMTSR_MTEPPRF()
    {
        return SCU_PARITY_PMTSR_MTEPPRF(PMTSR & (1u << 13u));
    }

    /**
     * Set PMTSR's MTEPPRF bit.
     */
    inline void set_PMTSR_MTEPPRF()
    {
        PMTSR |= 1u << 13u;
    }

    /**
     * Clear PMTSR's MTEPPRF bit.
     */
    inline void clear_PMTSR_MTEPPRF()
    {
        PMTSR &= ~(1u << 13u);
    }

    /**
     * Toggle PMTSR's MTEPPRF bit.
     */
    inline void toggle_PMTSR_MTEPPRF()
    {
        PMTSR ^= 1u << 13u;
    }

    /**
     * Get PMTSR's MTEMC bit.
     */
    SCU_PARITY_PMTSR_MTEMC get_PMTSR_MTEMC()
    {
        return SCU_PARITY_PMTSR_MTEMC(PMTSR & (1u << 12u));
    }

    /**
     * Set PMTSR's MTEMC bit.
     */
    inline void set_PMTSR_MTEMC()
    {
        PMTSR |= 1u << 12u;
    }

    /**
     * Clear PMTSR's MTEMC bit.
     */
    inline void clear_PMTSR_MTEMC()
    {
        PMTSR &= ~(1u << 12u);
    }

    /**
     * Toggle PMTSR's MTEMC bit.
     */
    inline void toggle_PMTSR_MTEMC()
    {
        PMTSR ^= 1u << 12u;
    }

    /**
     * Get PMTSR's MTEU2 bit.
     */
    SCU_PARITY_PMTSR_MTEU2 get_PMTSR_MTEU2()
    {
        return SCU_PARITY_PMTSR_MTEU2(PMTSR & (1u << 10u));
    }

    /**
     * Set PMTSR's MTEU2 bit.
     */
    inline void set_PMTSR_MTEU2()
    {
        PMTSR |= 1u << 10u;
    }

    /**
     * Clear PMTSR's MTEU2 bit.
     */
    inline void clear_PMTSR_MTEU2()
    {
        PMTSR &= ~(1u << 10u);
    }

    /**
     * Toggle PMTSR's MTEU2 bit.
     */
    inline void toggle_PMTSR_MTEU2()
    {
        PMTSR ^= 1u << 10u;
    }

    /**
     * Get PMTSR's MTEU1 bit.
     */
    SCU_PARITY_PMTSR_MTEU1 get_PMTSR_MTEU1()
    {
        return SCU_PARITY_PMTSR_MTEU1(PMTSR & (1u << 9u));
    }

    /**
     * Set PMTSR's MTEU1 bit.
     */
    inline void set_PMTSR_MTEU1()
    {
        PMTSR |= 1u << 9u;
    }

    /**
     * Clear PMTSR's MTEU1 bit.
     */
    inline void clear_PMTSR_MTEU1()
    {
        PMTSR &= ~(1u << 9u);
    }

    /**
     * Toggle PMTSR's MTEU1 bit.
     */
    inline void toggle_PMTSR_MTEU1()
    {
        PMTSR ^= 1u << 9u;
    }

    /**
     * Get PMTSR's MTEU0 bit.
     */
    SCU_PARITY_PMTSR_MTEU0 get_PMTSR_MTEU0()
    {
        return SCU_PARITY_PMTSR_MTEU0(PMTSR & (1u << 8u));
    }

    /**
     * Set PMTSR's MTEU0 bit.
     */
    inline void set_PMTSR_MTEU0()
    {
        PMTSR |= 1u << 8u;
    }

    /**
     * Clear PMTSR's MTEU0 bit.
     */
    inline void clear_PMTSR_MTEU0()
    {
        PMTSR &= ~(1u << 8u);
    }

    /**
     * Toggle PMTSR's MTEU0 bit.
     */
    inline void toggle_PMTSR_MTEU0()
    {
        PMTSR ^= 1u << 8u;
    }

    /**
     * Get PMTSR's MTENDS2 bit.
     */
    SCU_PARITY_PMTSR_MTENDS2 get_PMTSR_MTENDS2()
    {
        return SCU_PARITY_PMTSR_MTENDS2(PMTSR & (1u << 2u));
    }

    /**
     * Set PMTSR's MTENDS2 bit.
     */
    inline void set_PMTSR_MTENDS2()
    {
        PMTSR |= 1u << 2u;
    }

    /**
     * Clear PMTSR's MTENDS2 bit.
     */
    inline void clear_PMTSR_MTENDS2()
    {
        PMTSR &= ~(1u << 2u);
    }

    /**
     * Toggle PMTSR's MTENDS2 bit.
     */
    inline void toggle_PMTSR_MTENDS2()
    {
        PMTSR ^= 1u << 2u;
    }

    /**
     * Get PMTSR's MTENDS1 bit.
     */
    SCU_PARITY_PMTSR_MTENDS1 get_PMTSR_MTENDS1()
    {
        return SCU_PARITY_PMTSR_MTENDS1(PMTSR & (1u << 1u));
    }

    /**
     * Set PMTSR's MTENDS1 bit.
     */
    inline void set_PMTSR_MTENDS1()
    {
        PMTSR |= 1u << 1u;
    }

    /**
     * Clear PMTSR's MTENDS1 bit.
     */
    inline void clear_PMTSR_MTENDS1()
    {
        PMTSR &= ~(1u << 1u);
    }

    /**
     * Toggle PMTSR's MTENDS1 bit.
     */
    inline void toggle_PMTSR_MTENDS1()
    {
        PMTSR ^= 1u << 1u;
    }

    /**
     * Get PMTSR's MTENPS bit.
     */
    SCU_PARITY_PMTSR_MTENPS get_PMTSR_MTENPS()
    {
        return SCU_PARITY_PMTSR_MTENPS(PMTSR & (1u << 0u));
    }

    /**
     * Set PMTSR's MTENPS bit.
     */
    inline void set_PMTSR_MTENPS()
    {
        PMTSR |= 1u << 0u;
    }

    /**
     * Clear PMTSR's MTENPS bit.
     */
    inline void clear_PMTSR_MTENPS()
    {
        PMTSR &= ~(1u << 0u);
    }

    /**
     * Toggle PMTSR's MTENPS bit.
     */
    inline void toggle_PMTSR_MTENPS()
    {
        PMTSR ^= 1u << 0u;
    }
};

static_assert(sizeof(scu_parity) == scu_parity::size);

static volatile scu_parity *const SCU_PARITY =
    reinterpret_cast<scu_parity *>(0x5000413C);

}; // namespace XMC4700
