/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include "../enums/SCU_INTERRUPT_NMIREQEN_AI.h"
#include "../enums/SCU_INTERRUPT_NMIREQEN_ERU00.h"
#include "../enums/SCU_INTERRUPT_NMIREQEN_ERU01.h"
#include "../enums/SCU_INTERRUPT_NMIREQEN_ERU02.h"
#include "../enums/SCU_INTERRUPT_NMIREQEN_ERU03.h"
#include "../enums/SCU_INTERRUPT_NMIREQEN_PI.h"
#include "../enums/SCU_INTERRUPT_NMIREQEN_PRWARN.h"
#include "../enums/SCU_INTERRUPT_SRCLR_AI.h"
#include "../enums/SCU_INTERRUPT_SRCLR_DLROVR.h"
#include "../enums/SCU_INTERRUPT_SRCLR_HDCLR.h"
#include "../enums/SCU_INTERRUPT_SRCLR_HDCR.h"
#include "../enums/SCU_INTERRUPT_SRCLR_HDSET.h"
#include "../enums/SCU_INTERRUPT_SRCLR_OSCSICTRL.h"
#include "../enums/SCU_INTERRUPT_SRCLR_OSCULCTRL.h"
#include "../enums/SCU_INTERRUPT_SRCLR_PI.h"
#include "../enums/SCU_INTERRUPT_SRCLR_PRWARN.h"
#include "../enums/SCU_INTERRUPT_SRCLR_RMX.h"
#include "../enums/SCU_INTERRUPT_SRCLR_RTC_ATIM0.h"
#include "../enums/SCU_INTERRUPT_SRCLR_RTC_ATIM1.h"
#include "../enums/SCU_INTERRUPT_SRCLR_RTC_CTR.h"
#include "../enums/SCU_INTERRUPT_SRCLR_RTC_TIM0.h"
#include "../enums/SCU_INTERRUPT_SRCLR_RTC_TIM1.h"
#include "../enums/SCU_INTERRUPT_SRMSK_AI.h"
#include "../enums/SCU_INTERRUPT_SRMSK_DLROVR.h"
#include "../enums/SCU_INTERRUPT_SRMSK_HDCLR.h"
#include "../enums/SCU_INTERRUPT_SRMSK_HDCR.h"
#include "../enums/SCU_INTERRUPT_SRMSK_HDSET.h"
#include "../enums/SCU_INTERRUPT_SRMSK_OSCSICTRL.h"
#include "../enums/SCU_INTERRUPT_SRMSK_OSCULCTRL.h"
#include "../enums/SCU_INTERRUPT_SRMSK_PI.h"
#include "../enums/SCU_INTERRUPT_SRMSK_PRWARN.h"
#include "../enums/SCU_INTERRUPT_SRMSK_RMX.h"
#include "../enums/SCU_INTERRUPT_SRMSK_RTC_ATIM0.h"
#include "../enums/SCU_INTERRUPT_SRMSK_RTC_ATIM1.h"
#include "../enums/SCU_INTERRUPT_SRMSK_RTC_CTR.h"
#include "../enums/SCU_INTERRUPT_SRMSK_RTC_TIM0.h"
#include "../enums/SCU_INTERRUPT_SRMSK_RTC_TIM1.h"
#include "../enums/SCU_INTERRUPT_SRRAW_HDCLR.h"
#include "../enums/SCU_INTERRUPT_SRRAW_HDCR.h"
#include "../enums/SCU_INTERRUPT_SRRAW_HDSET.h"
#include "../enums/SCU_INTERRUPT_SRRAW_OSCSICTRL.h"
#include "../enums/SCU_INTERRUPT_SRRAW_OSCULCTRL.h"
#include "../enums/SCU_INTERRUPT_SRRAW_PRWARN.h"
#include "../enums/SCU_INTERRUPT_SRRAW_RMX.h"
#include "../enums/SCU_INTERRUPT_SRRAW_RTC_ATIM0.h"
#include "../enums/SCU_INTERRUPT_SRRAW_RTC_ATIM1.h"
#include "../enums/SCU_INTERRUPT_SRRAW_RTC_CTR.h"
#include "../enums/SCU_INTERRUPT_SRRAW_RTC_TIM0.h"
#include "../enums/SCU_INTERRUPT_SRRAW_RTC_TIM1.h"
#include "../enums/SCU_INTERRUPT_SRSET_AI.h"
#include "../enums/SCU_INTERRUPT_SRSET_DLROVR.h"
#include "../enums/SCU_INTERRUPT_SRSET_HDCR.h"
#include "../enums/SCU_INTERRUPT_SRSET_HDCRCLR.h"
#include "../enums/SCU_INTERRUPT_SRSET_HDCRSET.h"
#include "../enums/SCU_INTERRUPT_SRSET_OSCSICTRL.h"
#include "../enums/SCU_INTERRUPT_SRSET_OSCULCTRL.h"
#include "../enums/SCU_INTERRUPT_SRSET_PI.h"
#include "../enums/SCU_INTERRUPT_SRSET_PRWARN.h"
#include "../enums/SCU_INTERRUPT_SRSET_RMX.h"
#include "../enums/SCU_INTERRUPT_SRSET_RTC_ATIM0.h"
#include "../enums/SCU_INTERRUPT_SRSET_RTC_ATIM1.h"
#include "../enums/SCU_INTERRUPT_SRSET_RTC_CTR.h"
#include "../enums/SCU_INTERRUPT_SRSET_RTC_TIM0.h"
#include "../enums/SCU_INTERRUPT_SRSET_RTC_TIM1.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_HDCLR.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_HDCR.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_HDSET.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_OSCSICTRL.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_OSCULCTRL.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_PRWARN.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_RMX.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_RTC_ATIM0.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_RTC_ATIM1.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_RTC_CTR.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_RTC_TIM0.h"
#include "../enums/SCU_INTERRUPT_SRSTAT_RTC_TIM1.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * System Control Unit
 */
struct [[gnu::packed]] scu_interrupt
{
    /* Constant attributes. */
    static constexpr std::size_t size = 24; /*!< scu_interrupt's size in bytes. */

    /* Fields. */
    const uint32_t SRSTAT = {}; /*!< (read-only) SCU Service Request Status */
    const uint32_t SRRAW = {};  /*!< (read-only) SCU Raw Service Request Status */
    uint32_t SRMSK;             /*!< (read-write) SCU Service Request Mask */
    uint32_t SRCLR;             /*!< (write-only) SCU Service Request Clear */
    uint32_t SRSET;             /*!< (write-only) SCU Service Request Set */
    uint32_t NMIREQEN;          /*!< (read-write) SCU Service Request Mask */

    /* Methods. */

    /**
     * Get SRSTAT's RMX bit.
     */
    inline SCU_INTERRUPT_SRSTAT_RMX get_SRSTAT_RMX()
    {
        return SCU_INTERRUPT_SRSTAT_RMX(SRSTAT & (1u << 29u));
    }

    /**
     * Get SRSTAT's RTC_TIM1 bit.
     */
    inline SCU_INTERRUPT_SRSTAT_RTC_TIM1 get_SRSTAT_RTC_TIM1()
    {
        return SCU_INTERRUPT_SRSTAT_RTC_TIM1(SRSTAT & (1u << 28u));
    }

    /**
     * Get SRSTAT's RTC_TIM0 bit.
     */
    inline SCU_INTERRUPT_SRSTAT_RTC_TIM0 get_SRSTAT_RTC_TIM0()
    {
        return SCU_INTERRUPT_SRSTAT_RTC_TIM0(SRSTAT & (1u << 27u));
    }

    /**
     * Get SRSTAT's RTC_ATIM1 bit.
     */
    inline SCU_INTERRUPT_SRSTAT_RTC_ATIM1 get_SRSTAT_RTC_ATIM1()
    {
        return SCU_INTERRUPT_SRSTAT_RTC_ATIM1(SRSTAT & (1u << 26u));
    }

    /**
     * Get SRSTAT's RTC_ATIM0 bit.
     */
    inline SCU_INTERRUPT_SRSTAT_RTC_ATIM0 get_SRSTAT_RTC_ATIM0()
    {
        return SCU_INTERRUPT_SRSTAT_RTC_ATIM0(SRSTAT & (1u << 25u));
    }

    /**
     * Get SRSTAT's RTC_CTR bit.
     */
    inline SCU_INTERRUPT_SRSTAT_RTC_CTR get_SRSTAT_RTC_CTR()
    {
        return SCU_INTERRUPT_SRSTAT_RTC_CTR(SRSTAT & (1u << 24u));
    }

    /**
     * Get SRSTAT's OSCULCTRL bit.
     */
    inline SCU_INTERRUPT_SRSTAT_OSCULCTRL get_SRSTAT_OSCULCTRL()
    {
        return SCU_INTERRUPT_SRSTAT_OSCULCTRL(SRSTAT & (1u << 23u));
    }

    /**
     * Get SRSTAT's OSCSICTRL bit.
     */
    inline SCU_INTERRUPT_SRSTAT_OSCSICTRL get_SRSTAT_OSCSICTRL()
    {
        return SCU_INTERRUPT_SRSTAT_OSCSICTRL(SRSTAT & (1u << 21u));
    }

    /**
     * Get SRSTAT's HDCR bit.
     */
    inline SCU_INTERRUPT_SRSTAT_HDCR get_SRSTAT_HDCR()
    {
        return SCU_INTERRUPT_SRSTAT_HDCR(SRSTAT & (1u << 19u));
    }

    /**
     * Get SRSTAT's HDSET bit.
     */
    inline SCU_INTERRUPT_SRSTAT_HDSET get_SRSTAT_HDSET()
    {
        return SCU_INTERRUPT_SRSTAT_HDSET(SRSTAT & (1u << 18u));
    }

    /**
     * Get SRSTAT's HDCLR bit.
     */
    inline SCU_INTERRUPT_SRSTAT_HDCLR get_SRSTAT_HDCLR()
    {
        return SCU_INTERRUPT_SRSTAT_HDCLR(SRSTAT & (1u << 17u));
    }

    /**
     * Get SRSTAT's DLROVR bit.
     */
    inline bool get_SRSTAT_DLROVR()
    {
        return SRSTAT & (1u << 3u);
    }

    /**
     * Get SRSTAT's AI bit.
     */
    inline bool get_SRSTAT_AI()
    {
        return SRSTAT & (1u << 2u);
    }

    /**
     * Get SRSTAT's PI bit.
     */
    inline bool get_SRSTAT_PI()
    {
        return SRSTAT & (1u << 1u);
    }

    /**
     * Get SRSTAT's PRWARN bit.
     */
    inline SCU_INTERRUPT_SRSTAT_PRWARN get_SRSTAT_PRWARN()
    {
        return SCU_INTERRUPT_SRSTAT_PRWARN(SRSTAT & (1u << 0u));
    }

    /**
     * Get all of SRSTAT's bit fields.
     */
    inline void get_SRSTAT(SCU_INTERRUPT_SRSTAT_RMX &RMX, SCU_INTERRUPT_SRSTAT_RTC_TIM1 &RTC_TIM1, SCU_INTERRUPT_SRSTAT_RTC_TIM0 &RTC_TIM0, SCU_INTERRUPT_SRSTAT_RTC_ATIM1 &RTC_ATIM1, SCU_INTERRUPT_SRSTAT_RTC_ATIM0 &RTC_ATIM0, SCU_INTERRUPT_SRSTAT_RTC_CTR &RTC_CTR, SCU_INTERRUPT_SRSTAT_OSCULCTRL &OSCULCTRL, SCU_INTERRUPT_SRSTAT_OSCSICTRL &OSCSICTRL, SCU_INTERRUPT_SRSTAT_HDCR &HDCR, SCU_INTERRUPT_SRSTAT_HDSET &HDSET, SCU_INTERRUPT_SRSTAT_HDCLR &HDCLR, bool &DLROVR, bool &AI, bool &PI, SCU_INTERRUPT_SRSTAT_PRWARN &PRWARN)
    {
        uint32_t curr = SRSTAT;

        RMX = SCU_INTERRUPT_SRSTAT_RMX(curr & (1u << 29u));
        RTC_TIM1 = SCU_INTERRUPT_SRSTAT_RTC_TIM1(curr & (1u << 28u));
        RTC_TIM0 = SCU_INTERRUPT_SRSTAT_RTC_TIM0(curr & (1u << 27u));
        RTC_ATIM1 = SCU_INTERRUPT_SRSTAT_RTC_ATIM1(curr & (1u << 26u));
        RTC_ATIM0 = SCU_INTERRUPT_SRSTAT_RTC_ATIM0(curr & (1u << 25u));
        RTC_CTR = SCU_INTERRUPT_SRSTAT_RTC_CTR(curr & (1u << 24u));
        OSCULCTRL = SCU_INTERRUPT_SRSTAT_OSCULCTRL(curr & (1u << 23u));
        OSCSICTRL = SCU_INTERRUPT_SRSTAT_OSCSICTRL(curr & (1u << 21u));
        HDCR = SCU_INTERRUPT_SRSTAT_HDCR(curr & (1u << 19u));
        HDSET = SCU_INTERRUPT_SRSTAT_HDSET(curr & (1u << 18u));
        HDCLR = SCU_INTERRUPT_SRSTAT_HDCLR(curr & (1u << 17u));
        DLROVR = curr & (1u << 3u);
        AI = curr & (1u << 2u);
        PI = curr & (1u << 1u);
        PRWARN = SCU_INTERRUPT_SRSTAT_PRWARN(curr & (1u << 0u));
    }

    /**
     * Get SRRAW's RMX bit.
     */
    inline SCU_INTERRUPT_SRRAW_RMX get_SRRAW_RMX()
    {
        return SCU_INTERRUPT_SRRAW_RMX(SRRAW & (1u << 29u));
    }

    /**
     * Get SRRAW's RTC_TIM1 bit.
     */
    inline SCU_INTERRUPT_SRRAW_RTC_TIM1 get_SRRAW_RTC_TIM1()
    {
        return SCU_INTERRUPT_SRRAW_RTC_TIM1(SRRAW & (1u << 28u));
    }

    /**
     * Get SRRAW's RTC_TIM0 bit.
     */
    inline SCU_INTERRUPT_SRRAW_RTC_TIM0 get_SRRAW_RTC_TIM0()
    {
        return SCU_INTERRUPT_SRRAW_RTC_TIM0(SRRAW & (1u << 27u));
    }

    /**
     * Get SRRAW's RTC_ATIM1 bit.
     */
    inline SCU_INTERRUPT_SRRAW_RTC_ATIM1 get_SRRAW_RTC_ATIM1()
    {
        return SCU_INTERRUPT_SRRAW_RTC_ATIM1(SRRAW & (1u << 26u));
    }

    /**
     * Get SRRAW's RTC_ATIM0 bit.
     */
    inline SCU_INTERRUPT_SRRAW_RTC_ATIM0 get_SRRAW_RTC_ATIM0()
    {
        return SCU_INTERRUPT_SRRAW_RTC_ATIM0(SRRAW & (1u << 25u));
    }

    /**
     * Get SRRAW's RTC_CTR bit.
     */
    inline SCU_INTERRUPT_SRRAW_RTC_CTR get_SRRAW_RTC_CTR()
    {
        return SCU_INTERRUPT_SRRAW_RTC_CTR(SRRAW & (1u << 24u));
    }

    /**
     * Get SRRAW's OSCULCTRL bit.
     */
    inline SCU_INTERRUPT_SRRAW_OSCULCTRL get_SRRAW_OSCULCTRL()
    {
        return SCU_INTERRUPT_SRRAW_OSCULCTRL(SRRAW & (1u << 23u));
    }

    /**
     * Get SRRAW's OSCSICTRL bit.
     */
    inline SCU_INTERRUPT_SRRAW_OSCSICTRL get_SRRAW_OSCSICTRL()
    {
        return SCU_INTERRUPT_SRRAW_OSCSICTRL(SRRAW & (1u << 21u));
    }

    /**
     * Get SRRAW's HDCR bit.
     */
    inline SCU_INTERRUPT_SRRAW_HDCR get_SRRAW_HDCR()
    {
        return SCU_INTERRUPT_SRRAW_HDCR(SRRAW & (1u << 19u));
    }

    /**
     * Get SRRAW's HDSET bit.
     */
    inline SCU_INTERRUPT_SRRAW_HDSET get_SRRAW_HDSET()
    {
        return SCU_INTERRUPT_SRRAW_HDSET(SRRAW & (1u << 18u));
    }

    /**
     * Get SRRAW's HDCLR bit.
     */
    inline SCU_INTERRUPT_SRRAW_HDCLR get_SRRAW_HDCLR()
    {
        return SCU_INTERRUPT_SRRAW_HDCLR(SRRAW & (1u << 17u));
    }

    /**
     * Get SRRAW's DLROVR bit.
     */
    inline bool get_SRRAW_DLROVR()
    {
        return SRRAW & (1u << 3u);
    }

    /**
     * Get SRRAW's AI bit.
     */
    inline bool get_SRRAW_AI()
    {
        return SRRAW & (1u << 2u);
    }

    /**
     * Get SRRAW's PI bit.
     */
    inline bool get_SRRAW_PI()
    {
        return SRRAW & (1u << 1u);
    }

    /**
     * Get SRRAW's PRWARN bit.
     */
    inline SCU_INTERRUPT_SRRAW_PRWARN get_SRRAW_PRWARN()
    {
        return SCU_INTERRUPT_SRRAW_PRWARN(SRRAW & (1u << 0u));
    }

    /**
     * Get all of SRRAW's bit fields.
     */
    inline void get_SRRAW(SCU_INTERRUPT_SRRAW_RMX &RMX, SCU_INTERRUPT_SRRAW_RTC_TIM1 &RTC_TIM1, SCU_INTERRUPT_SRRAW_RTC_TIM0 &RTC_TIM0, SCU_INTERRUPT_SRRAW_RTC_ATIM1 &RTC_ATIM1, SCU_INTERRUPT_SRRAW_RTC_ATIM0 &RTC_ATIM0, SCU_INTERRUPT_SRRAW_RTC_CTR &RTC_CTR, SCU_INTERRUPT_SRRAW_OSCULCTRL &OSCULCTRL, SCU_INTERRUPT_SRRAW_OSCSICTRL &OSCSICTRL, SCU_INTERRUPT_SRRAW_HDCR &HDCR, SCU_INTERRUPT_SRRAW_HDSET &HDSET, SCU_INTERRUPT_SRRAW_HDCLR &HDCLR, bool &DLROVR, bool &AI, bool &PI, SCU_INTERRUPT_SRRAW_PRWARN &PRWARN)
    {
        uint32_t curr = SRRAW;

        RMX = SCU_INTERRUPT_SRRAW_RMX(curr & (1u << 29u));
        RTC_TIM1 = SCU_INTERRUPT_SRRAW_RTC_TIM1(curr & (1u << 28u));
        RTC_TIM0 = SCU_INTERRUPT_SRRAW_RTC_TIM0(curr & (1u << 27u));
        RTC_ATIM1 = SCU_INTERRUPT_SRRAW_RTC_ATIM1(curr & (1u << 26u));
        RTC_ATIM0 = SCU_INTERRUPT_SRRAW_RTC_ATIM0(curr & (1u << 25u));
        RTC_CTR = SCU_INTERRUPT_SRRAW_RTC_CTR(curr & (1u << 24u));
        OSCULCTRL = SCU_INTERRUPT_SRRAW_OSCULCTRL(curr & (1u << 23u));
        OSCSICTRL = SCU_INTERRUPT_SRRAW_OSCSICTRL(curr & (1u << 21u));
        HDCR = SCU_INTERRUPT_SRRAW_HDCR(curr & (1u << 19u));
        HDSET = SCU_INTERRUPT_SRRAW_HDSET(curr & (1u << 18u));
        HDCLR = SCU_INTERRUPT_SRRAW_HDCLR(curr & (1u << 17u));
        DLROVR = curr & (1u << 3u);
        AI = curr & (1u << 2u);
        PI = curr & (1u << 1u);
        PRWARN = SCU_INTERRUPT_SRRAW_PRWARN(curr & (1u << 0u));
    }

    /**
     * Get SRMSK's RMX bit.
     */
    inline SCU_INTERRUPT_SRMSK_RMX get_SRMSK_RMX()
    {
        return SCU_INTERRUPT_SRMSK_RMX(SRMSK & (1u << 29u));
    }

    /**
     * Set SRMSK's RMX bit.
     */
    inline void set_SRMSK_RMX()
    {
        SRMSK |= 1u << 29u;
    }

    /**
     * Clear SRMSK's RMX bit.
     */
    inline void clear_SRMSK_RMX()
    {
        SRMSK &= ~(1u << 29u);
    }

    /**
     * Toggle SRMSK's RMX bit.
     */
    inline void toggle_SRMSK_RMX()
    {
        SRMSK ^= 1u << 29u;
    }

    /**
     * Get SRMSK's RTC_TIM1 bit.
     */
    inline SCU_INTERRUPT_SRMSK_RTC_TIM1 get_SRMSK_RTC_TIM1()
    {
        return SCU_INTERRUPT_SRMSK_RTC_TIM1(SRMSK & (1u << 28u));
    }

    /**
     * Set SRMSK's RTC_TIM1 bit.
     */
    inline void set_SRMSK_RTC_TIM1()
    {
        SRMSK |= 1u << 28u;
    }

    /**
     * Clear SRMSK's RTC_TIM1 bit.
     */
    inline void clear_SRMSK_RTC_TIM1()
    {
        SRMSK &= ~(1u << 28u);
    }

    /**
     * Toggle SRMSK's RTC_TIM1 bit.
     */
    inline void toggle_SRMSK_RTC_TIM1()
    {
        SRMSK ^= 1u << 28u;
    }

    /**
     * Get SRMSK's RTC_TIM0 bit.
     */
    inline SCU_INTERRUPT_SRMSK_RTC_TIM0 get_SRMSK_RTC_TIM0()
    {
        return SCU_INTERRUPT_SRMSK_RTC_TIM0(SRMSK & (1u << 27u));
    }

    /**
     * Set SRMSK's RTC_TIM0 bit.
     */
    inline void set_SRMSK_RTC_TIM0()
    {
        SRMSK |= 1u << 27u;
    }

    /**
     * Clear SRMSK's RTC_TIM0 bit.
     */
    inline void clear_SRMSK_RTC_TIM0()
    {
        SRMSK &= ~(1u << 27u);
    }

    /**
     * Toggle SRMSK's RTC_TIM0 bit.
     */
    inline void toggle_SRMSK_RTC_TIM0()
    {
        SRMSK ^= 1u << 27u;
    }

    /**
     * Get SRMSK's RTC_ATIM1 bit.
     */
    inline SCU_INTERRUPT_SRMSK_RTC_ATIM1 get_SRMSK_RTC_ATIM1()
    {
        return SCU_INTERRUPT_SRMSK_RTC_ATIM1(SRMSK & (1u << 26u));
    }

    /**
     * Set SRMSK's RTC_ATIM1 bit.
     */
    inline void set_SRMSK_RTC_ATIM1()
    {
        SRMSK |= 1u << 26u;
    }

    /**
     * Clear SRMSK's RTC_ATIM1 bit.
     */
    inline void clear_SRMSK_RTC_ATIM1()
    {
        SRMSK &= ~(1u << 26u);
    }

    /**
     * Toggle SRMSK's RTC_ATIM1 bit.
     */
    inline void toggle_SRMSK_RTC_ATIM1()
    {
        SRMSK ^= 1u << 26u;
    }

    /**
     * Get SRMSK's RTC_ATIM0 bit.
     */
    inline SCU_INTERRUPT_SRMSK_RTC_ATIM0 get_SRMSK_RTC_ATIM0()
    {
        return SCU_INTERRUPT_SRMSK_RTC_ATIM0(SRMSK & (1u << 25u));
    }

    /**
     * Set SRMSK's RTC_ATIM0 bit.
     */
    inline void set_SRMSK_RTC_ATIM0()
    {
        SRMSK |= 1u << 25u;
    }

    /**
     * Clear SRMSK's RTC_ATIM0 bit.
     */
    inline void clear_SRMSK_RTC_ATIM0()
    {
        SRMSK &= ~(1u << 25u);
    }

    /**
     * Toggle SRMSK's RTC_ATIM0 bit.
     */
    inline void toggle_SRMSK_RTC_ATIM0()
    {
        SRMSK ^= 1u << 25u;
    }

    /**
     * Get SRMSK's RTC_CTR bit.
     */
    inline SCU_INTERRUPT_SRMSK_RTC_CTR get_SRMSK_RTC_CTR()
    {
        return SCU_INTERRUPT_SRMSK_RTC_CTR(SRMSK & (1u << 24u));
    }

    /**
     * Set SRMSK's RTC_CTR bit.
     */
    inline void set_SRMSK_RTC_CTR()
    {
        SRMSK |= 1u << 24u;
    }

    /**
     * Clear SRMSK's RTC_CTR bit.
     */
    inline void clear_SRMSK_RTC_CTR()
    {
        SRMSK &= ~(1u << 24u);
    }

    /**
     * Toggle SRMSK's RTC_CTR bit.
     */
    inline void toggle_SRMSK_RTC_CTR()
    {
        SRMSK ^= 1u << 24u;
    }

    /**
     * Get SRMSK's OSCULCTRL bit.
     */
    inline SCU_INTERRUPT_SRMSK_OSCULCTRL get_SRMSK_OSCULCTRL()
    {
        return SCU_INTERRUPT_SRMSK_OSCULCTRL(SRMSK & (1u << 23u));
    }

    /**
     * Set SRMSK's OSCULCTRL bit.
     */
    inline void set_SRMSK_OSCULCTRL()
    {
        SRMSK |= 1u << 23u;
    }

    /**
     * Clear SRMSK's OSCULCTRL bit.
     */
    inline void clear_SRMSK_OSCULCTRL()
    {
        SRMSK &= ~(1u << 23u);
    }

    /**
     * Toggle SRMSK's OSCULCTRL bit.
     */
    inline void toggle_SRMSK_OSCULCTRL()
    {
        SRMSK ^= 1u << 23u;
    }

    /**
     * Get SRMSK's OSCSICTRL bit.
     */
    inline SCU_INTERRUPT_SRMSK_OSCSICTRL get_SRMSK_OSCSICTRL()
    {
        return SCU_INTERRUPT_SRMSK_OSCSICTRL(SRMSK & (1u << 21u));
    }

    /**
     * Set SRMSK's OSCSICTRL bit.
     */
    inline void set_SRMSK_OSCSICTRL()
    {
        SRMSK |= 1u << 21u;
    }

    /**
     * Clear SRMSK's OSCSICTRL bit.
     */
    inline void clear_SRMSK_OSCSICTRL()
    {
        SRMSK &= ~(1u << 21u);
    }

    /**
     * Toggle SRMSK's OSCSICTRL bit.
     */
    inline void toggle_SRMSK_OSCSICTRL()
    {
        SRMSK ^= 1u << 21u;
    }

    /**
     * Get SRMSK's HDCR bit.
     */
    inline SCU_INTERRUPT_SRMSK_HDCR get_SRMSK_HDCR()
    {
        return SCU_INTERRUPT_SRMSK_HDCR(SRMSK & (1u << 19u));
    }

    /**
     * Set SRMSK's HDCR bit.
     */
    inline void set_SRMSK_HDCR()
    {
        SRMSK |= 1u << 19u;
    }

    /**
     * Clear SRMSK's HDCR bit.
     */
    inline void clear_SRMSK_HDCR()
    {
        SRMSK &= ~(1u << 19u);
    }

    /**
     * Toggle SRMSK's HDCR bit.
     */
    inline void toggle_SRMSK_HDCR()
    {
        SRMSK ^= 1u << 19u;
    }

    /**
     * Get SRMSK's HDSET bit.
     */
    inline SCU_INTERRUPT_SRMSK_HDSET get_SRMSK_HDSET()
    {
        return SCU_INTERRUPT_SRMSK_HDSET(SRMSK & (1u << 18u));
    }

    /**
     * Set SRMSK's HDSET bit.
     */
    inline void set_SRMSK_HDSET()
    {
        SRMSK |= 1u << 18u;
    }

    /**
     * Clear SRMSK's HDSET bit.
     */
    inline void clear_SRMSK_HDSET()
    {
        SRMSK &= ~(1u << 18u);
    }

    /**
     * Toggle SRMSK's HDSET bit.
     */
    inline void toggle_SRMSK_HDSET()
    {
        SRMSK ^= 1u << 18u;
    }

    /**
     * Get SRMSK's HDCLR bit.
     */
    inline SCU_INTERRUPT_SRMSK_HDCLR get_SRMSK_HDCLR()
    {
        return SCU_INTERRUPT_SRMSK_HDCLR(SRMSK & (1u << 17u));
    }

    /**
     * Set SRMSK's HDCLR bit.
     */
    inline void set_SRMSK_HDCLR()
    {
        SRMSK |= 1u << 17u;
    }

    /**
     * Clear SRMSK's HDCLR bit.
     */
    inline void clear_SRMSK_HDCLR()
    {
        SRMSK &= ~(1u << 17u);
    }

    /**
     * Toggle SRMSK's HDCLR bit.
     */
    inline void toggle_SRMSK_HDCLR()
    {
        SRMSK ^= 1u << 17u;
    }

    /**
     * Get SRMSK's DLROVR bit.
     */
    inline SCU_INTERRUPT_SRMSK_DLROVR get_SRMSK_DLROVR()
    {
        return SCU_INTERRUPT_SRMSK_DLROVR(SRMSK & (1u << 3u));
    }

    /**
     * Set SRMSK's DLROVR bit.
     */
    inline void set_SRMSK_DLROVR()
    {
        SRMSK |= 1u << 3u;
    }

    /**
     * Clear SRMSK's DLROVR bit.
     */
    inline void clear_SRMSK_DLROVR()
    {
        SRMSK &= ~(1u << 3u);
    }

    /**
     * Toggle SRMSK's DLROVR bit.
     */
    inline void toggle_SRMSK_DLROVR()
    {
        SRMSK ^= 1u << 3u;
    }

    /**
     * Get SRMSK's AI bit.
     */
    inline SCU_INTERRUPT_SRMSK_AI get_SRMSK_AI()
    {
        return SCU_INTERRUPT_SRMSK_AI(SRMSK & (1u << 2u));
    }

    /**
     * Set SRMSK's AI bit.
     */
    inline void set_SRMSK_AI()
    {
        SRMSK |= 1u << 2u;
    }

    /**
     * Clear SRMSK's AI bit.
     */
    inline void clear_SRMSK_AI()
    {
        SRMSK &= ~(1u << 2u);
    }

    /**
     * Toggle SRMSK's AI bit.
     */
    inline void toggle_SRMSK_AI()
    {
        SRMSK ^= 1u << 2u;
    }

    /**
     * Get SRMSK's PI bit.
     */
    inline SCU_INTERRUPT_SRMSK_PI get_SRMSK_PI()
    {
        return SCU_INTERRUPT_SRMSK_PI(SRMSK & (1u << 1u));
    }

    /**
     * Set SRMSK's PI bit.
     */
    inline void set_SRMSK_PI()
    {
        SRMSK |= 1u << 1u;
    }

    /**
     * Clear SRMSK's PI bit.
     */
    inline void clear_SRMSK_PI()
    {
        SRMSK &= ~(1u << 1u);
    }

    /**
     * Toggle SRMSK's PI bit.
     */
    inline void toggle_SRMSK_PI()
    {
        SRMSK ^= 1u << 1u;
    }

    /**
     * Get SRMSK's PRWARN bit.
     */
    inline SCU_INTERRUPT_SRMSK_PRWARN get_SRMSK_PRWARN()
    {
        return SCU_INTERRUPT_SRMSK_PRWARN(SRMSK & (1u << 0u));
    }

    /**
     * Set SRMSK's PRWARN bit.
     */
    inline void set_SRMSK_PRWARN()
    {
        SRMSK |= 1u << 0u;
    }

    /**
     * Clear SRMSK's PRWARN bit.
     */
    inline void clear_SRMSK_PRWARN()
    {
        SRMSK &= ~(1u << 0u);
    }

    /**
     * Toggle SRMSK's PRWARN bit.
     */
    inline void toggle_SRMSK_PRWARN()
    {
        SRMSK ^= 1u << 0u;
    }

    /**
     * Get all of SRMSK's bit fields.
     */
    inline void get_SRMSK(SCU_INTERRUPT_SRMSK_RMX &RMX, SCU_INTERRUPT_SRMSK_RTC_TIM1 &RTC_TIM1, SCU_INTERRUPT_SRMSK_RTC_TIM0 &RTC_TIM0, SCU_INTERRUPT_SRMSK_RTC_ATIM1 &RTC_ATIM1, SCU_INTERRUPT_SRMSK_RTC_ATIM0 &RTC_ATIM0, SCU_INTERRUPT_SRMSK_RTC_CTR &RTC_CTR, SCU_INTERRUPT_SRMSK_OSCULCTRL &OSCULCTRL, SCU_INTERRUPT_SRMSK_OSCSICTRL &OSCSICTRL, SCU_INTERRUPT_SRMSK_HDCR &HDCR, SCU_INTERRUPT_SRMSK_HDSET &HDSET, SCU_INTERRUPT_SRMSK_HDCLR &HDCLR, SCU_INTERRUPT_SRMSK_DLROVR &DLROVR, SCU_INTERRUPT_SRMSK_AI &AI, SCU_INTERRUPT_SRMSK_PI &PI, SCU_INTERRUPT_SRMSK_PRWARN &PRWARN)
    {
        uint32_t curr = SRMSK;

        RMX = SCU_INTERRUPT_SRMSK_RMX(curr & (1u << 29u));
        RTC_TIM1 = SCU_INTERRUPT_SRMSK_RTC_TIM1(curr & (1u << 28u));
        RTC_TIM0 = SCU_INTERRUPT_SRMSK_RTC_TIM0(curr & (1u << 27u));
        RTC_ATIM1 = SCU_INTERRUPT_SRMSK_RTC_ATIM1(curr & (1u << 26u));
        RTC_ATIM0 = SCU_INTERRUPT_SRMSK_RTC_ATIM0(curr & (1u << 25u));
        RTC_CTR = SCU_INTERRUPT_SRMSK_RTC_CTR(curr & (1u << 24u));
        OSCULCTRL = SCU_INTERRUPT_SRMSK_OSCULCTRL(curr & (1u << 23u));
        OSCSICTRL = SCU_INTERRUPT_SRMSK_OSCSICTRL(curr & (1u << 21u));
        HDCR = SCU_INTERRUPT_SRMSK_HDCR(curr & (1u << 19u));
        HDSET = SCU_INTERRUPT_SRMSK_HDSET(curr & (1u << 18u));
        HDCLR = SCU_INTERRUPT_SRMSK_HDCLR(curr & (1u << 17u));
        DLROVR = SCU_INTERRUPT_SRMSK_DLROVR(curr & (1u << 3u));
        AI = SCU_INTERRUPT_SRMSK_AI(curr & (1u << 2u));
        PI = SCU_INTERRUPT_SRMSK_PI(curr & (1u << 1u));
        PRWARN = SCU_INTERRUPT_SRMSK_PRWARN(curr & (1u << 0u));
    }

    /**
     * Set all of SRMSK's bit fields.
     */
    inline void set_SRMSK(SCU_INTERRUPT_SRMSK_RMX RMX, SCU_INTERRUPT_SRMSK_RTC_TIM1 RTC_TIM1, SCU_INTERRUPT_SRMSK_RTC_TIM0 RTC_TIM0, SCU_INTERRUPT_SRMSK_RTC_ATIM1 RTC_ATIM1, SCU_INTERRUPT_SRMSK_RTC_ATIM0 RTC_ATIM0, SCU_INTERRUPT_SRMSK_RTC_CTR RTC_CTR, SCU_INTERRUPT_SRMSK_OSCULCTRL OSCULCTRL, SCU_INTERRUPT_SRMSK_OSCSICTRL OSCSICTRL, SCU_INTERRUPT_SRMSK_HDCR HDCR, SCU_INTERRUPT_SRMSK_HDSET HDSET, SCU_INTERRUPT_SRMSK_HDCLR HDCLR, SCU_INTERRUPT_SRMSK_DLROVR DLROVR, SCU_INTERRUPT_SRMSK_AI AI, SCU_INTERRUPT_SRMSK_PI PI, SCU_INTERRUPT_SRMSK_PRWARN PRWARN)
    {
        uint32_t curr = SRMSK;

        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(RMX) & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (std::to_underlying(RTC_TIM1) & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (std::to_underlying(RTC_TIM0) & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(RTC_ATIM1) & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (std::to_underlying(RTC_ATIM0) & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (std::to_underlying(RTC_CTR) & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (std::to_underlying(OSCULCTRL) & 0b1u) << 23u;
        curr &= ~(0b1u << 21u);
        curr |= (std::to_underlying(OSCSICTRL) & 0b1u) << 21u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(HDCR) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(HDSET) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(HDCLR) & 0b1u) << 17u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(DLROVR) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(AI) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(PI) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PRWARN) & 0b1u) << 0u;

        SRMSK = curr;
    }

    /**
     * Set SRCLR's RMX bit.
     */
    inline void set_SRCLR_RMX()
    {
        SRCLR |= 1u << 29u;
    }

    /**
     * Clear SRCLR's RMX bit.
     */
    inline void clear_SRCLR_RMX()
    {
        SRCLR &= ~(1u << 29u);
    }

    /**
     * Toggle SRCLR's RMX bit.
     */
    inline void toggle_SRCLR_RMX()
    {
        SRCLR ^= 1u << 29u;
    }

    /**
     * Set SRCLR's RTC_TIM1 bit.
     */
    inline void set_SRCLR_RTC_TIM1()
    {
        SRCLR |= 1u << 28u;
    }

    /**
     * Clear SRCLR's RTC_TIM1 bit.
     */
    inline void clear_SRCLR_RTC_TIM1()
    {
        SRCLR &= ~(1u << 28u);
    }

    /**
     * Toggle SRCLR's RTC_TIM1 bit.
     */
    inline void toggle_SRCLR_RTC_TIM1()
    {
        SRCLR ^= 1u << 28u;
    }

    /**
     * Set SRCLR's RTC_TIM0 bit.
     */
    inline void set_SRCLR_RTC_TIM0()
    {
        SRCLR |= 1u << 27u;
    }

    /**
     * Clear SRCLR's RTC_TIM0 bit.
     */
    inline void clear_SRCLR_RTC_TIM0()
    {
        SRCLR &= ~(1u << 27u);
    }

    /**
     * Toggle SRCLR's RTC_TIM0 bit.
     */
    inline void toggle_SRCLR_RTC_TIM0()
    {
        SRCLR ^= 1u << 27u;
    }

    /**
     * Set SRCLR's RTC_ATIM1 bit.
     */
    inline void set_SRCLR_RTC_ATIM1()
    {
        SRCLR |= 1u << 26u;
    }

    /**
     * Clear SRCLR's RTC_ATIM1 bit.
     */
    inline void clear_SRCLR_RTC_ATIM1()
    {
        SRCLR &= ~(1u << 26u);
    }

    /**
     * Toggle SRCLR's RTC_ATIM1 bit.
     */
    inline void toggle_SRCLR_RTC_ATIM1()
    {
        SRCLR ^= 1u << 26u;
    }

    /**
     * Set SRCLR's RTC_ATIM0 bit.
     */
    inline void set_SRCLR_RTC_ATIM0()
    {
        SRCLR |= 1u << 25u;
    }

    /**
     * Clear SRCLR's RTC_ATIM0 bit.
     */
    inline void clear_SRCLR_RTC_ATIM0()
    {
        SRCLR &= ~(1u << 25u);
    }

    /**
     * Toggle SRCLR's RTC_ATIM0 bit.
     */
    inline void toggle_SRCLR_RTC_ATIM0()
    {
        SRCLR ^= 1u << 25u;
    }

    /**
     * Set SRCLR's RTC_CTR bit.
     */
    inline void set_SRCLR_RTC_CTR()
    {
        SRCLR |= 1u << 24u;
    }

    /**
     * Clear SRCLR's RTC_CTR bit.
     */
    inline void clear_SRCLR_RTC_CTR()
    {
        SRCLR &= ~(1u << 24u);
    }

    /**
     * Toggle SRCLR's RTC_CTR bit.
     */
    inline void toggle_SRCLR_RTC_CTR()
    {
        SRCLR ^= 1u << 24u;
    }

    /**
     * Set SRCLR's OSCULCTRL bit.
     */
    inline void set_SRCLR_OSCULCTRL()
    {
        SRCLR |= 1u << 23u;
    }

    /**
     * Clear SRCLR's OSCULCTRL bit.
     */
    inline void clear_SRCLR_OSCULCTRL()
    {
        SRCLR &= ~(1u << 23u);
    }

    /**
     * Toggle SRCLR's OSCULCTRL bit.
     */
    inline void toggle_SRCLR_OSCULCTRL()
    {
        SRCLR ^= 1u << 23u;
    }

    /**
     * Set SRCLR's OSCSICTRL bit.
     */
    inline void set_SRCLR_OSCSICTRL()
    {
        SRCLR |= 1u << 21u;
    }

    /**
     * Clear SRCLR's OSCSICTRL bit.
     */
    inline void clear_SRCLR_OSCSICTRL()
    {
        SRCLR &= ~(1u << 21u);
    }

    /**
     * Toggle SRCLR's OSCSICTRL bit.
     */
    inline void toggle_SRCLR_OSCSICTRL()
    {
        SRCLR ^= 1u << 21u;
    }

    /**
     * Set SRCLR's HDCR bit.
     */
    inline void set_SRCLR_HDCR()
    {
        SRCLR |= 1u << 19u;
    }

    /**
     * Clear SRCLR's HDCR bit.
     */
    inline void clear_SRCLR_HDCR()
    {
        SRCLR &= ~(1u << 19u);
    }

    /**
     * Toggle SRCLR's HDCR bit.
     */
    inline void toggle_SRCLR_HDCR()
    {
        SRCLR ^= 1u << 19u;
    }

    /**
     * Set SRCLR's HDSET bit.
     */
    inline void set_SRCLR_HDSET()
    {
        SRCLR |= 1u << 18u;
    }

    /**
     * Clear SRCLR's HDSET bit.
     */
    inline void clear_SRCLR_HDSET()
    {
        SRCLR &= ~(1u << 18u);
    }

    /**
     * Toggle SRCLR's HDSET bit.
     */
    inline void toggle_SRCLR_HDSET()
    {
        SRCLR ^= 1u << 18u;
    }

    /**
     * Set SRCLR's HDCLR bit.
     */
    inline void set_SRCLR_HDCLR()
    {
        SRCLR |= 1u << 17u;
    }

    /**
     * Clear SRCLR's HDCLR bit.
     */
    inline void clear_SRCLR_HDCLR()
    {
        SRCLR &= ~(1u << 17u);
    }

    /**
     * Toggle SRCLR's HDCLR bit.
     */
    inline void toggle_SRCLR_HDCLR()
    {
        SRCLR ^= 1u << 17u;
    }

    /**
     * Set SRCLR's DLROVR bit.
     */
    inline void set_SRCLR_DLROVR()
    {
        SRCLR |= 1u << 3u;
    }

    /**
     * Clear SRCLR's DLROVR bit.
     */
    inline void clear_SRCLR_DLROVR()
    {
        SRCLR &= ~(1u << 3u);
    }

    /**
     * Toggle SRCLR's DLROVR bit.
     */
    inline void toggle_SRCLR_DLROVR()
    {
        SRCLR ^= 1u << 3u;
    }

    /**
     * Set SRCLR's AI bit.
     */
    inline void set_SRCLR_AI()
    {
        SRCLR |= 1u << 2u;
    }

    /**
     * Clear SRCLR's AI bit.
     */
    inline void clear_SRCLR_AI()
    {
        SRCLR &= ~(1u << 2u);
    }

    /**
     * Toggle SRCLR's AI bit.
     */
    inline void toggle_SRCLR_AI()
    {
        SRCLR ^= 1u << 2u;
    }

    /**
     * Set SRCLR's PI bit.
     */
    inline void set_SRCLR_PI()
    {
        SRCLR |= 1u << 1u;
    }

    /**
     * Clear SRCLR's PI bit.
     */
    inline void clear_SRCLR_PI()
    {
        SRCLR &= ~(1u << 1u);
    }

    /**
     * Toggle SRCLR's PI bit.
     */
    inline void toggle_SRCLR_PI()
    {
        SRCLR ^= 1u << 1u;
    }

    /**
     * Set SRCLR's PRWARN bit.
     */
    inline void set_SRCLR_PRWARN()
    {
        SRCLR |= 1u << 0u;
    }

    /**
     * Clear SRCLR's PRWARN bit.
     */
    inline void clear_SRCLR_PRWARN()
    {
        SRCLR &= ~(1u << 0u);
    }

    /**
     * Toggle SRCLR's PRWARN bit.
     */
    inline void toggle_SRCLR_PRWARN()
    {
        SRCLR ^= 1u << 0u;
    }

    /**
     * Set all of SRCLR's bit fields.
     */
    inline void set_SRCLR(SCU_INTERRUPT_SRCLR_RMX RMX, SCU_INTERRUPT_SRCLR_RTC_TIM1 RTC_TIM1, SCU_INTERRUPT_SRCLR_RTC_TIM0 RTC_TIM0, SCU_INTERRUPT_SRCLR_RTC_ATIM1 RTC_ATIM1, SCU_INTERRUPT_SRCLR_RTC_ATIM0 RTC_ATIM0, SCU_INTERRUPT_SRCLR_RTC_CTR RTC_CTR, SCU_INTERRUPT_SRCLR_OSCULCTRL OSCULCTRL, SCU_INTERRUPT_SRCLR_OSCSICTRL OSCSICTRL, SCU_INTERRUPT_SRCLR_HDCR HDCR, SCU_INTERRUPT_SRCLR_HDSET HDSET, SCU_INTERRUPT_SRCLR_HDCLR HDCLR, SCU_INTERRUPT_SRCLR_DLROVR DLROVR, SCU_INTERRUPT_SRCLR_AI AI, SCU_INTERRUPT_SRCLR_PI PI, SCU_INTERRUPT_SRCLR_PRWARN PRWARN)
    {
        uint32_t curr = SRCLR;

        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(RMX) & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (std::to_underlying(RTC_TIM1) & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (std::to_underlying(RTC_TIM0) & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(RTC_ATIM1) & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (std::to_underlying(RTC_ATIM0) & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (std::to_underlying(RTC_CTR) & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (std::to_underlying(OSCULCTRL) & 0b1u) << 23u;
        curr &= ~(0b1u << 21u);
        curr |= (std::to_underlying(OSCSICTRL) & 0b1u) << 21u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(HDCR) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(HDSET) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(HDCLR) & 0b1u) << 17u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(DLROVR) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(AI) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(PI) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PRWARN) & 0b1u) << 0u;

        SRCLR = curr;
    }

    /**
     * Set SRSET's RMX bit.
     */
    inline void set_SRSET_RMX()
    {
        SRSET |= 1u << 29u;
    }

    /**
     * Clear SRSET's RMX bit.
     */
    inline void clear_SRSET_RMX()
    {
        SRSET &= ~(1u << 29u);
    }

    /**
     * Toggle SRSET's RMX bit.
     */
    inline void toggle_SRSET_RMX()
    {
        SRSET ^= 1u << 29u;
    }

    /**
     * Set SRSET's RTC_TIM1 bit.
     */
    inline void set_SRSET_RTC_TIM1()
    {
        SRSET |= 1u << 28u;
    }

    /**
     * Clear SRSET's RTC_TIM1 bit.
     */
    inline void clear_SRSET_RTC_TIM1()
    {
        SRSET &= ~(1u << 28u);
    }

    /**
     * Toggle SRSET's RTC_TIM1 bit.
     */
    inline void toggle_SRSET_RTC_TIM1()
    {
        SRSET ^= 1u << 28u;
    }

    /**
     * Set SRSET's RTC_TIM0 bit.
     */
    inline void set_SRSET_RTC_TIM0()
    {
        SRSET |= 1u << 27u;
    }

    /**
     * Clear SRSET's RTC_TIM0 bit.
     */
    inline void clear_SRSET_RTC_TIM0()
    {
        SRSET &= ~(1u << 27u);
    }

    /**
     * Toggle SRSET's RTC_TIM0 bit.
     */
    inline void toggle_SRSET_RTC_TIM0()
    {
        SRSET ^= 1u << 27u;
    }

    /**
     * Set SRSET's RTC_ATIM1 bit.
     */
    inline void set_SRSET_RTC_ATIM1()
    {
        SRSET |= 1u << 26u;
    }

    /**
     * Clear SRSET's RTC_ATIM1 bit.
     */
    inline void clear_SRSET_RTC_ATIM1()
    {
        SRSET &= ~(1u << 26u);
    }

    /**
     * Toggle SRSET's RTC_ATIM1 bit.
     */
    inline void toggle_SRSET_RTC_ATIM1()
    {
        SRSET ^= 1u << 26u;
    }

    /**
     * Set SRSET's RTC_ATIM0 bit.
     */
    inline void set_SRSET_RTC_ATIM0()
    {
        SRSET |= 1u << 25u;
    }

    /**
     * Clear SRSET's RTC_ATIM0 bit.
     */
    inline void clear_SRSET_RTC_ATIM0()
    {
        SRSET &= ~(1u << 25u);
    }

    /**
     * Toggle SRSET's RTC_ATIM0 bit.
     */
    inline void toggle_SRSET_RTC_ATIM0()
    {
        SRSET ^= 1u << 25u;
    }

    /**
     * Set SRSET's RTC_CTR bit.
     */
    inline void set_SRSET_RTC_CTR()
    {
        SRSET |= 1u << 24u;
    }

    /**
     * Clear SRSET's RTC_CTR bit.
     */
    inline void clear_SRSET_RTC_CTR()
    {
        SRSET &= ~(1u << 24u);
    }

    /**
     * Toggle SRSET's RTC_CTR bit.
     */
    inline void toggle_SRSET_RTC_CTR()
    {
        SRSET ^= 1u << 24u;
    }

    /**
     * Set SRSET's OSCULCTRL bit.
     */
    inline void set_SRSET_OSCULCTRL()
    {
        SRSET |= 1u << 23u;
    }

    /**
     * Clear SRSET's OSCULCTRL bit.
     */
    inline void clear_SRSET_OSCULCTRL()
    {
        SRSET &= ~(1u << 23u);
    }

    /**
     * Toggle SRSET's OSCULCTRL bit.
     */
    inline void toggle_SRSET_OSCULCTRL()
    {
        SRSET ^= 1u << 23u;
    }

    /**
     * Set SRSET's OSCSICTRL bit.
     */
    inline void set_SRSET_OSCSICTRL()
    {
        SRSET |= 1u << 21u;
    }

    /**
     * Clear SRSET's OSCSICTRL bit.
     */
    inline void clear_SRSET_OSCSICTRL()
    {
        SRSET &= ~(1u << 21u);
    }

    /**
     * Toggle SRSET's OSCSICTRL bit.
     */
    inline void toggle_SRSET_OSCSICTRL()
    {
        SRSET ^= 1u << 21u;
    }

    /**
     * Set SRSET's HDCR bit.
     */
    inline void set_SRSET_HDCR()
    {
        SRSET |= 1u << 19u;
    }

    /**
     * Clear SRSET's HDCR bit.
     */
    inline void clear_SRSET_HDCR()
    {
        SRSET &= ~(1u << 19u);
    }

    /**
     * Toggle SRSET's HDCR bit.
     */
    inline void toggle_SRSET_HDCR()
    {
        SRSET ^= 1u << 19u;
    }

    /**
     * Set SRSET's HDCRSET bit.
     */
    inline void set_SRSET_HDCRSET()
    {
        SRSET |= 1u << 18u;
    }

    /**
     * Clear SRSET's HDCRSET bit.
     */
    inline void clear_SRSET_HDCRSET()
    {
        SRSET &= ~(1u << 18u);
    }

    /**
     * Toggle SRSET's HDCRSET bit.
     */
    inline void toggle_SRSET_HDCRSET()
    {
        SRSET ^= 1u << 18u;
    }

    /**
     * Set SRSET's HDCRCLR bit.
     */
    inline void set_SRSET_HDCRCLR()
    {
        SRSET |= 1u << 17u;
    }

    /**
     * Clear SRSET's HDCRCLR bit.
     */
    inline void clear_SRSET_HDCRCLR()
    {
        SRSET &= ~(1u << 17u);
    }

    /**
     * Toggle SRSET's HDCRCLR bit.
     */
    inline void toggle_SRSET_HDCRCLR()
    {
        SRSET ^= 1u << 17u;
    }

    /**
     * Set SRSET's DLROVR bit.
     */
    inline void set_SRSET_DLROVR()
    {
        SRSET |= 1u << 3u;
    }

    /**
     * Clear SRSET's DLROVR bit.
     */
    inline void clear_SRSET_DLROVR()
    {
        SRSET &= ~(1u << 3u);
    }

    /**
     * Toggle SRSET's DLROVR bit.
     */
    inline void toggle_SRSET_DLROVR()
    {
        SRSET ^= 1u << 3u;
    }

    /**
     * Set SRSET's AI bit.
     */
    inline void set_SRSET_AI()
    {
        SRSET |= 1u << 2u;
    }

    /**
     * Clear SRSET's AI bit.
     */
    inline void clear_SRSET_AI()
    {
        SRSET &= ~(1u << 2u);
    }

    /**
     * Toggle SRSET's AI bit.
     */
    inline void toggle_SRSET_AI()
    {
        SRSET ^= 1u << 2u;
    }

    /**
     * Set SRSET's PI bit.
     */
    inline void set_SRSET_PI()
    {
        SRSET |= 1u << 1u;
    }

    /**
     * Clear SRSET's PI bit.
     */
    inline void clear_SRSET_PI()
    {
        SRSET &= ~(1u << 1u);
    }

    /**
     * Toggle SRSET's PI bit.
     */
    inline void toggle_SRSET_PI()
    {
        SRSET ^= 1u << 1u;
    }

    /**
     * Set SRSET's PRWARN bit.
     */
    inline void set_SRSET_PRWARN()
    {
        SRSET |= 1u << 0u;
    }

    /**
     * Clear SRSET's PRWARN bit.
     */
    inline void clear_SRSET_PRWARN()
    {
        SRSET &= ~(1u << 0u);
    }

    /**
     * Toggle SRSET's PRWARN bit.
     */
    inline void toggle_SRSET_PRWARN()
    {
        SRSET ^= 1u << 0u;
    }

    /**
     * Set all of SRSET's bit fields.
     */
    inline void set_SRSET(SCU_INTERRUPT_SRSET_RMX RMX, SCU_INTERRUPT_SRSET_RTC_TIM1 RTC_TIM1, SCU_INTERRUPT_SRSET_RTC_TIM0 RTC_TIM0, SCU_INTERRUPT_SRSET_RTC_ATIM1 RTC_ATIM1, SCU_INTERRUPT_SRSET_RTC_ATIM0 RTC_ATIM0, SCU_INTERRUPT_SRSET_RTC_CTR RTC_CTR, SCU_INTERRUPT_SRSET_OSCULCTRL OSCULCTRL, SCU_INTERRUPT_SRSET_OSCSICTRL OSCSICTRL, SCU_INTERRUPT_SRSET_HDCR HDCR, SCU_INTERRUPT_SRSET_HDCRSET HDCRSET, SCU_INTERRUPT_SRSET_HDCRCLR HDCRCLR, SCU_INTERRUPT_SRSET_DLROVR DLROVR, SCU_INTERRUPT_SRSET_AI AI, SCU_INTERRUPT_SRSET_PI PI, SCU_INTERRUPT_SRSET_PRWARN PRWARN)
    {
        uint32_t curr = SRSET;

        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(RMX) & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (std::to_underlying(RTC_TIM1) & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (std::to_underlying(RTC_TIM0) & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(RTC_ATIM1) & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (std::to_underlying(RTC_ATIM0) & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (std::to_underlying(RTC_CTR) & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (std::to_underlying(OSCULCTRL) & 0b1u) << 23u;
        curr &= ~(0b1u << 21u);
        curr |= (std::to_underlying(OSCSICTRL) & 0b1u) << 21u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(HDCR) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(HDCRSET) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(HDCRCLR) & 0b1u) << 17u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(DLROVR) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(AI) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(PI) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PRWARN) & 0b1u) << 0u;

        SRSET = curr;
    }

    /**
     * Get NMIREQEN's ERU03 bit.
     */
    inline SCU_INTERRUPT_NMIREQEN_ERU03 get_NMIREQEN_ERU03()
    {
        return SCU_INTERRUPT_NMIREQEN_ERU03(NMIREQEN & (1u << 19u));
    }

    /**
     * Set NMIREQEN's ERU03 bit.
     */
    inline void set_NMIREQEN_ERU03()
    {
        NMIREQEN |= 1u << 19u;
    }

    /**
     * Clear NMIREQEN's ERU03 bit.
     */
    inline void clear_NMIREQEN_ERU03()
    {
        NMIREQEN &= ~(1u << 19u);
    }

    /**
     * Toggle NMIREQEN's ERU03 bit.
     */
    inline void toggle_NMIREQEN_ERU03()
    {
        NMIREQEN ^= 1u << 19u;
    }

    /**
     * Get NMIREQEN's ERU02 bit.
     */
    inline SCU_INTERRUPT_NMIREQEN_ERU02 get_NMIREQEN_ERU02()
    {
        return SCU_INTERRUPT_NMIREQEN_ERU02(NMIREQEN & (1u << 18u));
    }

    /**
     * Set NMIREQEN's ERU02 bit.
     */
    inline void set_NMIREQEN_ERU02()
    {
        NMIREQEN |= 1u << 18u;
    }

    /**
     * Clear NMIREQEN's ERU02 bit.
     */
    inline void clear_NMIREQEN_ERU02()
    {
        NMIREQEN &= ~(1u << 18u);
    }

    /**
     * Toggle NMIREQEN's ERU02 bit.
     */
    inline void toggle_NMIREQEN_ERU02()
    {
        NMIREQEN ^= 1u << 18u;
    }

    /**
     * Get NMIREQEN's ERU01 bit.
     */
    inline SCU_INTERRUPT_NMIREQEN_ERU01 get_NMIREQEN_ERU01()
    {
        return SCU_INTERRUPT_NMIREQEN_ERU01(NMIREQEN & (1u << 17u));
    }

    /**
     * Set NMIREQEN's ERU01 bit.
     */
    inline void set_NMIREQEN_ERU01()
    {
        NMIREQEN |= 1u << 17u;
    }

    /**
     * Clear NMIREQEN's ERU01 bit.
     */
    inline void clear_NMIREQEN_ERU01()
    {
        NMIREQEN &= ~(1u << 17u);
    }

    /**
     * Toggle NMIREQEN's ERU01 bit.
     */
    inline void toggle_NMIREQEN_ERU01()
    {
        NMIREQEN ^= 1u << 17u;
    }

    /**
     * Get NMIREQEN's ERU00 bit.
     */
    inline SCU_INTERRUPT_NMIREQEN_ERU00 get_NMIREQEN_ERU00()
    {
        return SCU_INTERRUPT_NMIREQEN_ERU00(NMIREQEN & (1u << 16u));
    }

    /**
     * Set NMIREQEN's ERU00 bit.
     */
    inline void set_NMIREQEN_ERU00()
    {
        NMIREQEN |= 1u << 16u;
    }

    /**
     * Clear NMIREQEN's ERU00 bit.
     */
    inline void clear_NMIREQEN_ERU00()
    {
        NMIREQEN &= ~(1u << 16u);
    }

    /**
     * Toggle NMIREQEN's ERU00 bit.
     */
    inline void toggle_NMIREQEN_ERU00()
    {
        NMIREQEN ^= 1u << 16u;
    }

    /**
     * Get NMIREQEN's AI bit.
     */
    inline SCU_INTERRUPT_NMIREQEN_AI get_NMIREQEN_AI()
    {
        return SCU_INTERRUPT_NMIREQEN_AI(NMIREQEN & (1u << 2u));
    }

    /**
     * Set NMIREQEN's AI bit.
     */
    inline void set_NMIREQEN_AI()
    {
        NMIREQEN |= 1u << 2u;
    }

    /**
     * Clear NMIREQEN's AI bit.
     */
    inline void clear_NMIREQEN_AI()
    {
        NMIREQEN &= ~(1u << 2u);
    }

    /**
     * Toggle NMIREQEN's AI bit.
     */
    inline void toggle_NMIREQEN_AI()
    {
        NMIREQEN ^= 1u << 2u;
    }

    /**
     * Get NMIREQEN's PI bit.
     */
    inline SCU_INTERRUPT_NMIREQEN_PI get_NMIREQEN_PI()
    {
        return SCU_INTERRUPT_NMIREQEN_PI(NMIREQEN & (1u << 1u));
    }

    /**
     * Set NMIREQEN's PI bit.
     */
    inline void set_NMIREQEN_PI()
    {
        NMIREQEN |= 1u << 1u;
    }

    /**
     * Clear NMIREQEN's PI bit.
     */
    inline void clear_NMIREQEN_PI()
    {
        NMIREQEN &= ~(1u << 1u);
    }

    /**
     * Toggle NMIREQEN's PI bit.
     */
    inline void toggle_NMIREQEN_PI()
    {
        NMIREQEN ^= 1u << 1u;
    }

    /**
     * Get NMIREQEN's PRWARN bit.
     */
    inline SCU_INTERRUPT_NMIREQEN_PRWARN get_NMIREQEN_PRWARN()
    {
        return SCU_INTERRUPT_NMIREQEN_PRWARN(NMIREQEN & (1u << 0u));
    }

    /**
     * Set NMIREQEN's PRWARN bit.
     */
    inline void set_NMIREQEN_PRWARN()
    {
        NMIREQEN |= 1u << 0u;
    }

    /**
     * Clear NMIREQEN's PRWARN bit.
     */
    inline void clear_NMIREQEN_PRWARN()
    {
        NMIREQEN &= ~(1u << 0u);
    }

    /**
     * Toggle NMIREQEN's PRWARN bit.
     */
    inline void toggle_NMIREQEN_PRWARN()
    {
        NMIREQEN ^= 1u << 0u;
    }

    /**
     * Get all of NMIREQEN's bit fields.
     */
    inline void get_NMIREQEN(SCU_INTERRUPT_NMIREQEN_ERU03 &ERU03, SCU_INTERRUPT_NMIREQEN_ERU02 &ERU02, SCU_INTERRUPT_NMIREQEN_ERU01 &ERU01, SCU_INTERRUPT_NMIREQEN_ERU00 &ERU00, SCU_INTERRUPT_NMIREQEN_AI &AI, SCU_INTERRUPT_NMIREQEN_PI &PI, SCU_INTERRUPT_NMIREQEN_PRWARN &PRWARN)
    {
        uint32_t curr = NMIREQEN;

        ERU03 = SCU_INTERRUPT_NMIREQEN_ERU03(curr & (1u << 19u));
        ERU02 = SCU_INTERRUPT_NMIREQEN_ERU02(curr & (1u << 18u));
        ERU01 = SCU_INTERRUPT_NMIREQEN_ERU01(curr & (1u << 17u));
        ERU00 = SCU_INTERRUPT_NMIREQEN_ERU00(curr & (1u << 16u));
        AI = SCU_INTERRUPT_NMIREQEN_AI(curr & (1u << 2u));
        PI = SCU_INTERRUPT_NMIREQEN_PI(curr & (1u << 1u));
        PRWARN = SCU_INTERRUPT_NMIREQEN_PRWARN(curr & (1u << 0u));
    }

    /**
     * Set all of NMIREQEN's bit fields.
     */
    inline void set_NMIREQEN(SCU_INTERRUPT_NMIREQEN_ERU03 ERU03, SCU_INTERRUPT_NMIREQEN_ERU02 ERU02, SCU_INTERRUPT_NMIREQEN_ERU01 ERU01, SCU_INTERRUPT_NMIREQEN_ERU00 ERU00, SCU_INTERRUPT_NMIREQEN_AI AI, SCU_INTERRUPT_NMIREQEN_PI PI, SCU_INTERRUPT_NMIREQEN_PRWARN PRWARN)
    {
        uint32_t curr = NMIREQEN;

        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(ERU03) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(ERU02) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(ERU01) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ERU00) & 0b1u) << 16u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(AI) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(PI) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PRWARN) & 0b1u) << 0u;

        NMIREQEN = curr;
    }
};

static_assert(sizeof(scu_interrupt) == scu_interrupt::size);

static volatile scu_interrupt *const SCU_INTERRUPT = reinterpret_cast<scu_interrupt *>(0x50004074);

}; // namespace XMC4700
