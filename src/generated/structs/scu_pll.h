/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/SCU_PLL_CLKMXSTAT_SYSCLKMUX.h"
#include "../enums/SCU_PLL_PLLCON0_AOTREN.h"
#include "../enums/SCU_PLL_PLLCON0_FINDIS.h"
#include "../enums/SCU_PLL_PLLCON0_FOTR.h"
#include "../enums/SCU_PLL_PLLCON0_OSCDISCDIS.h"
#include "../enums/SCU_PLL_PLLCON0_OSCRES.h"
#include "../enums/SCU_PLL_PLLCON0_PLLPWD.h"
#include "../enums/SCU_PLL_PLLCON0_VCOBYP.h"
#include "../enums/SCU_PLL_PLLCON0_VCOPWD.h"
#include "../enums/SCU_PLL_PLLCON0_VCOTR.h"
#include "../enums/SCU_PLL_PLLCON2_K1INSEL.h"
#include "../enums/SCU_PLL_PLLCON2_PINSEL.h"
#include "../enums/SCU_PLL_PLLSTAT_BY.h"
#include "../enums/SCU_PLL_PLLSTAT_K1RDY.h"
#include "../enums/SCU_PLL_PLLSTAT_K2RDY.h"
#include "../enums/SCU_PLL_PLLSTAT_PLLHV.h"
#include "../enums/SCU_PLL_PLLSTAT_PLLLV.h"
#include "../enums/SCU_PLL_PLLSTAT_PLLSP.h"
#include "../enums/SCU_PLL_PLLSTAT_PWDSTAT.h"
#include "../enums/SCU_PLL_PLLSTAT_VCOBYST.h"
#include "../enums/SCU_PLL_PLLSTAT_VCOLOCK.h"
#include "../enums/SCU_PLL_USBPLLCON_FINDIS.h"
#include "../enums/SCU_PLL_USBPLLCON_OSCDISCDIS.h"
#include "../enums/SCU_PLL_USBPLLCON_PLLPWD.h"
#include "../enums/SCU_PLL_USBPLLCON_VCOBYP.h"
#include "../enums/SCU_PLL_USBPLLCON_VCOPWD.h"
#include "../enums/SCU_PLL_USBPLLCON_VCOTR.h"
#include "../enums/SCU_PLL_USBPLLSTAT_BY.h"
#include "../enums/SCU_PLL_USBPLLSTAT_PWDSTAT.h"
#include "../enums/SCU_PLL_USBPLLSTAT_VCOBYST.h"
#include "../enums/SCU_PLL_USBPLLSTAT_VCOLOCK.h"
#include "../enums/SCU_PLL_USBPLLSTAT_VCOLOCKED.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * System Control Unit
 */
struct [[gnu::packed]] scu_pll
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< scu_pll's identifier. */
    static constexpr std::size_t size = 44; /*!< scu_pll's size in bytes. */

    /* Fields. */
    const uint32_t PLLSTAT = {}; /*!< (read-only) PLL Status Register */
    uint32_t PLLCON0; /*!< (read-write) PLL Configuration 0 Register */
    uint32_t PLLCON1; /*!< (read-write) PLL Configuration 1 Register */
    uint32_t PLLCON2; /*!< (read-write) PLL Configuration 2 Register */
    const uint32_t USBPLLSTAT = {}; /*!< (read-only) USB PLL Status Register */
    uint32_t USBPLLCON; /*!< (read-write) USB PLL Configuration Register */
    static constexpr std::size_t reserved_padding0_length = 4;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    const uint32_t CLKMXSTAT =
        {}; /*!< (read-only) Clock Multiplexing Status Register */

    /* Methods. */

    /**
     * Get PLLSTAT's PLLSP bit.
     */
    SCU_PLL_PLLSTAT_PLLSP get_PLLSTAT_PLLSP()
    {
        return SCU_PLL_PLLSTAT_PLLSP(PLLSTAT & (1u << 9u));
    }

    /**
     * Get PLLSTAT's PLLHV bit.
     */
    SCU_PLL_PLLSTAT_PLLHV get_PLLSTAT_PLLHV()
    {
        return SCU_PLL_PLLSTAT_PLLHV(PLLSTAT & (1u << 8u));
    }

    /**
     * Get PLLSTAT's PLLLV bit.
     */
    SCU_PLL_PLLSTAT_PLLLV get_PLLSTAT_PLLLV()
    {
        return SCU_PLL_PLLSTAT_PLLLV(PLLSTAT & (1u << 7u));
    }

    /**
     * Get PLLSTAT's BY bit.
     */
    SCU_PLL_PLLSTAT_BY get_PLLSTAT_BY()
    {
        return SCU_PLL_PLLSTAT_BY(PLLSTAT & (1u << 6u));
    }

    /**
     * Get PLLSTAT's K2RDY bit.
     */
    SCU_PLL_PLLSTAT_K2RDY get_PLLSTAT_K2RDY()
    {
        return SCU_PLL_PLLSTAT_K2RDY(PLLSTAT & (1u << 5u));
    }

    /**
     * Get PLLSTAT's K1RDY bit.
     */
    SCU_PLL_PLLSTAT_K1RDY get_PLLSTAT_K1RDY()
    {
        return SCU_PLL_PLLSTAT_K1RDY(PLLSTAT & (1u << 4u));
    }

    /**
     * Get PLLSTAT's VCOLOCK bit.
     */
    SCU_PLL_PLLSTAT_VCOLOCK get_PLLSTAT_VCOLOCK()
    {
        return SCU_PLL_PLLSTAT_VCOLOCK(PLLSTAT & (1u << 2u));
    }

    /**
     * Get PLLSTAT's PWDSTAT bit.
     */
    SCU_PLL_PLLSTAT_PWDSTAT get_PLLSTAT_PWDSTAT()
    {
        return SCU_PLL_PLLSTAT_PWDSTAT(PLLSTAT & (1u << 1u));
    }

    /**
     * Get PLLSTAT's VCOBYST bit.
     */
    SCU_PLL_PLLSTAT_VCOBYST get_PLLSTAT_VCOBYST()
    {
        return SCU_PLL_PLLSTAT_VCOBYST(PLLSTAT & (1u << 0u));
    }

    /**
     * Get PLLCON0's FOTR bit.
     */
    SCU_PLL_PLLCON0_FOTR get_PLLCON0_FOTR()
    {
        return SCU_PLL_PLLCON0_FOTR(PLLCON0 & (1u << 20u));
    }

    /**
     * Set PLLCON0's FOTR bit.
     */
    inline void set_PLLCON0_FOTR()
    {
        PLLCON0 |= 1u << 20u;
    }

    /**
     * Clear PLLCON0's FOTR bit.
     */
    inline void clear_PLLCON0_FOTR()
    {
        PLLCON0 &= ~(1u << 20u);
    }

    /**
     * Toggle PLLCON0's FOTR bit.
     */
    inline void toggle_PLLCON0_FOTR()
    {
        PLLCON0 ^= 1u << 20u;
    }

    /**
     * Get PLLCON0's AOTREN bit.
     */
    SCU_PLL_PLLCON0_AOTREN get_PLLCON0_AOTREN()
    {
        return SCU_PLL_PLLCON0_AOTREN(PLLCON0 & (1u << 19u));
    }

    /**
     * Set PLLCON0's AOTREN bit.
     */
    inline void set_PLLCON0_AOTREN()
    {
        PLLCON0 |= 1u << 19u;
    }

    /**
     * Clear PLLCON0's AOTREN bit.
     */
    inline void clear_PLLCON0_AOTREN()
    {
        PLLCON0 &= ~(1u << 19u);
    }

    /**
     * Toggle PLLCON0's AOTREN bit.
     */
    inline void toggle_PLLCON0_AOTREN()
    {
        PLLCON0 ^= 1u << 19u;
    }

    /**
     * Set PLLCON0's RESLD bit.
     */
    inline void set_PLLCON0_RESLD()
    {
        PLLCON0 |= 1u << 18u;
    }

    /**
     * Clear PLLCON0's RESLD bit.
     */
    inline void clear_PLLCON0_RESLD()
    {
        PLLCON0 &= ~(1u << 18u);
    }

    /**
     * Toggle PLLCON0's RESLD bit.
     */
    inline void toggle_PLLCON0_RESLD()
    {
        PLLCON0 ^= 1u << 18u;
    }

    /**
     * Get PLLCON0's OSCRES bit.
     */
    SCU_PLL_PLLCON0_OSCRES get_PLLCON0_OSCRES()
    {
        return SCU_PLL_PLLCON0_OSCRES(PLLCON0 & (1u << 17u));
    }

    /**
     * Set PLLCON0's OSCRES bit.
     */
    inline void set_PLLCON0_OSCRES()
    {
        PLLCON0 |= 1u << 17u;
    }

    /**
     * Clear PLLCON0's OSCRES bit.
     */
    inline void clear_PLLCON0_OSCRES()
    {
        PLLCON0 &= ~(1u << 17u);
    }

    /**
     * Toggle PLLCON0's OSCRES bit.
     */
    inline void toggle_PLLCON0_OSCRES()
    {
        PLLCON0 ^= 1u << 17u;
    }

    /**
     * Get PLLCON0's PLLPWD bit.
     */
    SCU_PLL_PLLCON0_PLLPWD get_PLLCON0_PLLPWD()
    {
        return SCU_PLL_PLLCON0_PLLPWD(PLLCON0 & (1u << 16u));
    }

    /**
     * Set PLLCON0's PLLPWD bit.
     */
    inline void set_PLLCON0_PLLPWD()
    {
        PLLCON0 |= 1u << 16u;
    }

    /**
     * Clear PLLCON0's PLLPWD bit.
     */
    inline void clear_PLLCON0_PLLPWD()
    {
        PLLCON0 &= ~(1u << 16u);
    }

    /**
     * Toggle PLLCON0's PLLPWD bit.
     */
    inline void toggle_PLLCON0_PLLPWD()
    {
        PLLCON0 ^= 1u << 16u;
    }

    /**
     * Get PLLCON0's OSCDISCDIS bit.
     */
    SCU_PLL_PLLCON0_OSCDISCDIS get_PLLCON0_OSCDISCDIS()
    {
        return SCU_PLL_PLLCON0_OSCDISCDIS(PLLCON0 & (1u << 6u));
    }

    /**
     * Set PLLCON0's OSCDISCDIS bit.
     */
    inline void set_PLLCON0_OSCDISCDIS()
    {
        PLLCON0 |= 1u << 6u;
    }

    /**
     * Clear PLLCON0's OSCDISCDIS bit.
     */
    inline void clear_PLLCON0_OSCDISCDIS()
    {
        PLLCON0 &= ~(1u << 6u);
    }

    /**
     * Toggle PLLCON0's OSCDISCDIS bit.
     */
    inline void toggle_PLLCON0_OSCDISCDIS()
    {
        PLLCON0 ^= 1u << 6u;
    }

    /**
     * Get PLLCON0's FINDIS bit.
     */
    SCU_PLL_PLLCON0_FINDIS get_PLLCON0_FINDIS()
    {
        return SCU_PLL_PLLCON0_FINDIS(PLLCON0 & (1u << 4u));
    }

    /**
     * Set PLLCON0's FINDIS bit.
     */
    inline void set_PLLCON0_FINDIS()
    {
        PLLCON0 |= 1u << 4u;
    }

    /**
     * Clear PLLCON0's FINDIS bit.
     */
    inline void clear_PLLCON0_FINDIS()
    {
        PLLCON0 &= ~(1u << 4u);
    }

    /**
     * Toggle PLLCON0's FINDIS bit.
     */
    inline void toggle_PLLCON0_FINDIS()
    {
        PLLCON0 ^= 1u << 4u;
    }

    /**
     * Get PLLCON0's VCOTR bit.
     */
    SCU_PLL_PLLCON0_VCOTR get_PLLCON0_VCOTR()
    {
        return SCU_PLL_PLLCON0_VCOTR(PLLCON0 & (1u << 2u));
    }

    /**
     * Set PLLCON0's VCOTR bit.
     */
    inline void set_PLLCON0_VCOTR()
    {
        PLLCON0 |= 1u << 2u;
    }

    /**
     * Clear PLLCON0's VCOTR bit.
     */
    inline void clear_PLLCON0_VCOTR()
    {
        PLLCON0 &= ~(1u << 2u);
    }

    /**
     * Toggle PLLCON0's VCOTR bit.
     */
    inline void toggle_PLLCON0_VCOTR()
    {
        PLLCON0 ^= 1u << 2u;
    }

    /**
     * Get PLLCON0's VCOPWD bit.
     */
    SCU_PLL_PLLCON0_VCOPWD get_PLLCON0_VCOPWD()
    {
        return SCU_PLL_PLLCON0_VCOPWD(PLLCON0 & (1u << 1u));
    }

    /**
     * Set PLLCON0's VCOPWD bit.
     */
    inline void set_PLLCON0_VCOPWD()
    {
        PLLCON0 |= 1u << 1u;
    }

    /**
     * Clear PLLCON0's VCOPWD bit.
     */
    inline void clear_PLLCON0_VCOPWD()
    {
        PLLCON0 &= ~(1u << 1u);
    }

    /**
     * Toggle PLLCON0's VCOPWD bit.
     */
    inline void toggle_PLLCON0_VCOPWD()
    {
        PLLCON0 ^= 1u << 1u;
    }

    /**
     * Get PLLCON0's VCOBYP bit.
     */
    SCU_PLL_PLLCON0_VCOBYP get_PLLCON0_VCOBYP()
    {
        return SCU_PLL_PLLCON0_VCOBYP(PLLCON0 & (1u << 0u));
    }

    /**
     * Set PLLCON0's VCOBYP bit.
     */
    inline void set_PLLCON0_VCOBYP()
    {
        PLLCON0 |= 1u << 0u;
    }

    /**
     * Clear PLLCON0's VCOBYP bit.
     */
    inline void clear_PLLCON0_VCOBYP()
    {
        PLLCON0 &= ~(1u << 0u);
    }

    /**
     * Toggle PLLCON0's VCOBYP bit.
     */
    inline void toggle_PLLCON0_VCOBYP()
    {
        PLLCON0 ^= 1u << 0u;
    }

    /**
     * Get PLLCON1's PDIV field.
     */
    uint8_t get_PLLCON1_PDIV()
    {
        return (PLLCON1 >> 24u) & 0b1111u;
    }

    /**
     * Set PLLCON1's PDIV field.
     */
    inline void set_PLLCON1_PDIV(uint8_t value)
    {
        uint32_t curr = PLLCON1;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        PLLCON1 = curr;
    }

    /**
     * Get PLLCON1's K2DIV field.
     */
    uint8_t get_PLLCON1_K2DIV()
    {
        return (PLLCON1 >> 16u) & 0b1111111u;
    }

    /**
     * Set PLLCON1's K2DIV field.
     */
    inline void set_PLLCON1_K2DIV(uint8_t value)
    {
        uint32_t curr = PLLCON1;

        curr &= ~(0b1111111u << 16u);
        curr |= (value & 0b1111111u) << 16u;

        PLLCON1 = curr;
    }

    /**
     * Get PLLCON1's NDIV field.
     */
    uint8_t get_PLLCON1_NDIV()
    {
        return (PLLCON1 >> 8u) & 0b1111111u;
    }

    /**
     * Set PLLCON1's NDIV field.
     */
    inline void set_PLLCON1_NDIV(uint8_t value)
    {
        uint32_t curr = PLLCON1;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        PLLCON1 = curr;
    }

    /**
     * Get PLLCON1's K1DIV field.
     */
    uint8_t get_PLLCON1_K1DIV()
    {
        return (PLLCON1 >> 0u) & 0b1111111u;
    }

    /**
     * Set PLLCON1's K1DIV field.
     */
    inline void set_PLLCON1_K1DIV(uint8_t value)
    {
        uint32_t curr = PLLCON1;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        PLLCON1 = curr;
    }

    /**
     * Get PLLCON2's K1INSEL bit.
     */
    SCU_PLL_PLLCON2_K1INSEL get_PLLCON2_K1INSEL()
    {
        return SCU_PLL_PLLCON2_K1INSEL(PLLCON2 & (1u << 8u));
    }

    /**
     * Set PLLCON2's K1INSEL bit.
     */
    inline void set_PLLCON2_K1INSEL()
    {
        PLLCON2 |= 1u << 8u;
    }

    /**
     * Clear PLLCON2's K1INSEL bit.
     */
    inline void clear_PLLCON2_K1INSEL()
    {
        PLLCON2 &= ~(1u << 8u);
    }

    /**
     * Toggle PLLCON2's K1INSEL bit.
     */
    inline void toggle_PLLCON2_K1INSEL()
    {
        PLLCON2 ^= 1u << 8u;
    }

    /**
     * Get PLLCON2's PINSEL bit.
     */
    SCU_PLL_PLLCON2_PINSEL get_PLLCON2_PINSEL()
    {
        return SCU_PLL_PLLCON2_PINSEL(PLLCON2 & (1u << 0u));
    }

    /**
     * Set PLLCON2's PINSEL bit.
     */
    inline void set_PLLCON2_PINSEL()
    {
        PLLCON2 |= 1u << 0u;
    }

    /**
     * Clear PLLCON2's PINSEL bit.
     */
    inline void clear_PLLCON2_PINSEL()
    {
        PLLCON2 &= ~(1u << 0u);
    }

    /**
     * Toggle PLLCON2's PINSEL bit.
     */
    inline void toggle_PLLCON2_PINSEL()
    {
        PLLCON2 ^= 1u << 0u;
    }

    /**
     * Get USBPLLSTAT's VCOLOCKED bit.
     */
    SCU_PLL_USBPLLSTAT_VCOLOCKED get_USBPLLSTAT_VCOLOCKED()
    {
        return SCU_PLL_USBPLLSTAT_VCOLOCKED(USBPLLSTAT & (1u << 7u));
    }

    /**
     * Get USBPLLSTAT's BY bit.
     */
    SCU_PLL_USBPLLSTAT_BY get_USBPLLSTAT_BY()
    {
        return SCU_PLL_USBPLLSTAT_BY(USBPLLSTAT & (1u << 6u));
    }

    /**
     * Get USBPLLSTAT's VCOLOCK bit.
     */
    SCU_PLL_USBPLLSTAT_VCOLOCK get_USBPLLSTAT_VCOLOCK()
    {
        return SCU_PLL_USBPLLSTAT_VCOLOCK(USBPLLSTAT & (1u << 2u));
    }

    /**
     * Get USBPLLSTAT's PWDSTAT bit.
     */
    SCU_PLL_USBPLLSTAT_PWDSTAT get_USBPLLSTAT_PWDSTAT()
    {
        return SCU_PLL_USBPLLSTAT_PWDSTAT(USBPLLSTAT & (1u << 1u));
    }

    /**
     * Get USBPLLSTAT's VCOBYST bit.
     */
    SCU_PLL_USBPLLSTAT_VCOBYST get_USBPLLSTAT_VCOBYST()
    {
        return SCU_PLL_USBPLLSTAT_VCOBYST(USBPLLSTAT & (1u << 0u));
    }

    /**
     * Get USBPLLCON's PDIV field.
     */
    uint8_t get_USBPLLCON_PDIV()
    {
        return (USBPLLCON >> 24u) & 0b1111u;
    }

    /**
     * Set USBPLLCON's PDIV field.
     */
    inline void set_USBPLLCON_PDIV(uint8_t value)
    {
        uint32_t curr = USBPLLCON;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        USBPLLCON = curr;
    }

    /**
     * Set USBPLLCON's RESLD bit.
     */
    inline void set_USBPLLCON_RESLD()
    {
        USBPLLCON |= 1u << 18u;
    }

    /**
     * Clear USBPLLCON's RESLD bit.
     */
    inline void clear_USBPLLCON_RESLD()
    {
        USBPLLCON &= ~(1u << 18u);
    }

    /**
     * Toggle USBPLLCON's RESLD bit.
     */
    inline void toggle_USBPLLCON_RESLD()
    {
        USBPLLCON ^= 1u << 18u;
    }

    /**
     * Get USBPLLCON's PLLPWD bit.
     */
    SCU_PLL_USBPLLCON_PLLPWD get_USBPLLCON_PLLPWD()
    {
        return SCU_PLL_USBPLLCON_PLLPWD(USBPLLCON & (1u << 16u));
    }

    /**
     * Set USBPLLCON's PLLPWD bit.
     */
    inline void set_USBPLLCON_PLLPWD()
    {
        USBPLLCON |= 1u << 16u;
    }

    /**
     * Clear USBPLLCON's PLLPWD bit.
     */
    inline void clear_USBPLLCON_PLLPWD()
    {
        USBPLLCON &= ~(1u << 16u);
    }

    /**
     * Toggle USBPLLCON's PLLPWD bit.
     */
    inline void toggle_USBPLLCON_PLLPWD()
    {
        USBPLLCON ^= 1u << 16u;
    }

    /**
     * Get USBPLLCON's NDIV field.
     */
    uint8_t get_USBPLLCON_NDIV()
    {
        return (USBPLLCON >> 8u) & 0b1111111u;
    }

    /**
     * Set USBPLLCON's NDIV field.
     */
    inline void set_USBPLLCON_NDIV(uint8_t value)
    {
        uint32_t curr = USBPLLCON;

        curr &= ~(0b1111111u << 8u);
        curr |= (value & 0b1111111u) << 8u;

        USBPLLCON = curr;
    }

    /**
     * Get USBPLLCON's OSCDISCDIS bit.
     */
    SCU_PLL_USBPLLCON_OSCDISCDIS get_USBPLLCON_OSCDISCDIS()
    {
        return SCU_PLL_USBPLLCON_OSCDISCDIS(USBPLLCON & (1u << 6u));
    }

    /**
     * Set USBPLLCON's OSCDISCDIS bit.
     */
    inline void set_USBPLLCON_OSCDISCDIS()
    {
        USBPLLCON |= 1u << 6u;
    }

    /**
     * Clear USBPLLCON's OSCDISCDIS bit.
     */
    inline void clear_USBPLLCON_OSCDISCDIS()
    {
        USBPLLCON &= ~(1u << 6u);
    }

    /**
     * Toggle USBPLLCON's OSCDISCDIS bit.
     */
    inline void toggle_USBPLLCON_OSCDISCDIS()
    {
        USBPLLCON ^= 1u << 6u;
    }

    /**
     * Get USBPLLCON's FINDIS bit.
     */
    SCU_PLL_USBPLLCON_FINDIS get_USBPLLCON_FINDIS()
    {
        return SCU_PLL_USBPLLCON_FINDIS(USBPLLCON & (1u << 4u));
    }

    /**
     * Set USBPLLCON's FINDIS bit.
     */
    inline void set_USBPLLCON_FINDIS()
    {
        USBPLLCON |= 1u << 4u;
    }

    /**
     * Clear USBPLLCON's FINDIS bit.
     */
    inline void clear_USBPLLCON_FINDIS()
    {
        USBPLLCON &= ~(1u << 4u);
    }

    /**
     * Toggle USBPLLCON's FINDIS bit.
     */
    inline void toggle_USBPLLCON_FINDIS()
    {
        USBPLLCON ^= 1u << 4u;
    }

    /**
     * Get USBPLLCON's VCOTR bit.
     */
    SCU_PLL_USBPLLCON_VCOTR get_USBPLLCON_VCOTR()
    {
        return SCU_PLL_USBPLLCON_VCOTR(USBPLLCON & (1u << 2u));
    }

    /**
     * Set USBPLLCON's VCOTR bit.
     */
    inline void set_USBPLLCON_VCOTR()
    {
        USBPLLCON |= 1u << 2u;
    }

    /**
     * Clear USBPLLCON's VCOTR bit.
     */
    inline void clear_USBPLLCON_VCOTR()
    {
        USBPLLCON &= ~(1u << 2u);
    }

    /**
     * Toggle USBPLLCON's VCOTR bit.
     */
    inline void toggle_USBPLLCON_VCOTR()
    {
        USBPLLCON ^= 1u << 2u;
    }

    /**
     * Get USBPLLCON's VCOPWD bit.
     */
    SCU_PLL_USBPLLCON_VCOPWD get_USBPLLCON_VCOPWD()
    {
        return SCU_PLL_USBPLLCON_VCOPWD(USBPLLCON & (1u << 1u));
    }

    /**
     * Set USBPLLCON's VCOPWD bit.
     */
    inline void set_USBPLLCON_VCOPWD()
    {
        USBPLLCON |= 1u << 1u;
    }

    /**
     * Clear USBPLLCON's VCOPWD bit.
     */
    inline void clear_USBPLLCON_VCOPWD()
    {
        USBPLLCON &= ~(1u << 1u);
    }

    /**
     * Toggle USBPLLCON's VCOPWD bit.
     */
    inline void toggle_USBPLLCON_VCOPWD()
    {
        USBPLLCON ^= 1u << 1u;
    }

    /**
     * Get USBPLLCON's VCOBYP bit.
     */
    SCU_PLL_USBPLLCON_VCOBYP get_USBPLLCON_VCOBYP()
    {
        return SCU_PLL_USBPLLCON_VCOBYP(USBPLLCON & (1u << 0u));
    }

    /**
     * Set USBPLLCON's VCOBYP bit.
     */
    inline void set_USBPLLCON_VCOBYP()
    {
        USBPLLCON |= 1u << 0u;
    }

    /**
     * Clear USBPLLCON's VCOBYP bit.
     */
    inline void clear_USBPLLCON_VCOBYP()
    {
        USBPLLCON &= ~(1u << 0u);
    }

    /**
     * Toggle USBPLLCON's VCOBYP bit.
     */
    inline void toggle_USBPLLCON_VCOBYP()
    {
        USBPLLCON ^= 1u << 0u;
    }

    /**
     * Get CLKMXSTAT's SYSCLKMUX field.
     */
    SCU_PLL_CLKMXSTAT_SYSCLKMUX get_CLKMXSTAT_SYSCLKMUX()
    {
        return SCU_PLL_CLKMXSTAT_SYSCLKMUX((CLKMXSTAT >> 0u) & 0b11u);
    }
};

static_assert(sizeof(scu_pll) == scu_pll::size);

static volatile scu_pll *const SCU_PLL =
    reinterpret_cast<scu_pll *>(0x50004710);

}; // namespace XMC4700
