/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include "../enums/GPDMA1_CHENREG_CH.h"
#include "../enums/GPDMA1_CLEARTFR_CH3.h"
#include "../enums/GPDMA1_LSTSRCREG_CH3.h"
#include "../enums/GPDMA1_MASKTFR_CH3.h"
#include "../enums/GPDMA1_MASKTFR_WE_CH3.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * General Purpose DMA Unit 1
 */
struct [[gnu::packed]] gpdma1
{
    /* Constant attributes. */
    static constexpr std::size_t size = 320; /*!< gpdma1's size in bytes. */

    /* Fields. */
    uint32_t RAWTFR; /*!< (read-write) Raw IntTfr Status */
    const uint32_t reserved_padding0 = {};
    uint32_t RAWBLOCK; /*!< (read-write) Raw IntBlock Status */
    const uint32_t reserved_padding1 = {};
    uint32_t RAWSRCTRAN; /*!< (read-write) Raw IntSrcTran Status */
    const uint32_t reserved_padding2 = {};
    uint32_t RAWDSTTRAN; /*!< (read-write) Raw IntBlock Status */
    const uint32_t reserved_padding3 = {};
    uint32_t RAWERR; /*!< (read-write) Raw IntErr Status */
    const uint32_t reserved_padding4 = {};
    const uint32_t STATUSTFR = {}; /*!< (read-only) IntTfr Status */
    const uint32_t reserved_padding5 = {};
    const uint32_t STATUSBLOCK = {}; /*!< (read-only) IntBlock Status */
    const uint32_t reserved_padding6 = {};
    const uint32_t STATUSSRCTRAN = {}; /*!< (read-only) IntSrcTran Status */
    const uint32_t reserved_padding7 = {};
    const uint32_t STATUSDSTTRAN = {}; /*!< (read-only) IntBlock Status */
    const uint32_t reserved_padding8 = {};
    const uint32_t STATUSERR = {}; /*!< (read-only) IntErr Status */
    const uint32_t reserved_padding9 = {};
    uint32_t MASKTFR; /*!< (read-write) Mask for Raw IntTfr Status */
    const uint32_t reserved_padding10 = {};
    uint32_t MASKBLOCK; /*!< (read-write) Mask for Raw IntBlock Status */
    const uint32_t reserved_padding11 = {};
    uint32_t MASKSRCTRAN; /*!< (read-write) Mask for Raw IntSrcTran Status */
    const uint32_t reserved_padding12 = {};
    uint32_t MASKDSTTRAN; /*!< (read-write) Mask for Raw IntBlock Status */
    const uint32_t reserved_padding13 = {};
    uint32_t MASKERR; /*!< (read-write) Mask for Raw IntErr Status */
    const uint32_t reserved_padding14 = {};
    uint32_t CLEARTFR; /*!< (write-only) IntTfr Status */
    const uint32_t reserved_padding15 = {};
    uint32_t CLEARBLOCK; /*!< (write-only) IntBlock Status */
    const uint32_t reserved_padding16 = {};
    uint32_t CLEARSRCTRAN; /*!< (write-only) IntSrcTran Status */
    const uint32_t reserved_padding17 = {};
    uint32_t CLEARDSTTRAN; /*!< (write-only) IntBlock Status */
    const uint32_t reserved_padding18 = {};
    uint32_t CLEARERR; /*!< (write-only) IntErr Status */
    const uint32_t reserved_padding19 = {};
    const uint32_t STATUSINT =
        {}; /*!< (read-only) Combined Interrupt Status Register */
    const uint32_t reserved_padding20 = {};
    uint32_t REQSRCREG; /*!< (read-write) Source Software Transaction Request
                           Register */
    const uint32_t reserved_padding21 = {};
    uint32_t REQDSTREG; /*!< (read-write) Destination Software Transaction
                           Request Register */
    const uint32_t reserved_padding22 = {};
    uint32_t SGLREQSRCREG; /*!< (read-write) Single Source Transaction Request
                              Register */
    const uint32_t reserved_padding23 = {};
    uint32_t SGLREQDSTREG; /*!< (read-write) Single Destination Transaction
                              Request Register */
    const uint32_t reserved_padding24 = {};
    uint32_t LSTSRCREG; /*!< (read-write) Last Source Transaction Request
                           Register */
    const uint32_t reserved_padding25 = {};
    uint32_t LSTDSTREG; /*!< (read-write) Last Destination Transaction Request
                           Register */
    const uint32_t reserved_padding26 = {};
    uint32_t DMACFGREG; /*!< (read-write) GPDMA Configuration Register */
    const uint32_t reserved_padding27 = {};
    uint32_t CHENREG; /*!< (read-write) GPDMA Channel Enable Register */
    const uint32_t reserved_padding28 = {};
    const uint32_t ID = {}; /*!< (read-only) GPDMA1 ID Register */
    static constexpr std::size_t reserved_padding29_length = 19;
    const uint32_t reserved_padding29[reserved_padding29_length] = {};
    const uint32_t TYPE = {};    /*!< (read-only) GPDMA Component Type */
    const uint32_t VERSION = {}; /*!< (read-only) DMA Component Version */

    /* Methods. */

    /**
     * Get RAWTFR's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline bool get_RAWTFR_CH3() volatile
    {
        return RAWTFR & (1u << 3u);
    }

    /**
     * Set RAWTFR's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void set_RAWTFR_CH3() volatile
    {
        RAWTFR |= 1u << 3u;
    }

    /**
     * Clear RAWTFR's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void clear_RAWTFR_CH3() volatile
    {
        RAWTFR &= ~(1u << 3u);
    }

    /**
     * Toggle RAWTFR's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void toggle_RAWTFR_CH3() volatile
    {
        RAWTFR ^= 1u << 3u;
    }

    /**
     * Get RAWTFR's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline bool get_RAWTFR_CH2() volatile
    {
        return RAWTFR & (1u << 2u);
    }

    /**
     * Set RAWTFR's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void set_RAWTFR_CH2() volatile
    {
        RAWTFR |= 1u << 2u;
    }

    /**
     * Clear RAWTFR's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void clear_RAWTFR_CH2() volatile
    {
        RAWTFR &= ~(1u << 2u);
    }

    /**
     * Toggle RAWTFR's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void toggle_RAWTFR_CH2() volatile
    {
        RAWTFR ^= 1u << 2u;
    }

    /**
     * Get RAWTFR's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline bool get_RAWTFR_CH1() volatile
    {
        return RAWTFR & (1u << 1u);
    }

    /**
     * Set RAWTFR's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void set_RAWTFR_CH1() volatile
    {
        RAWTFR |= 1u << 1u;
    }

    /**
     * Clear RAWTFR's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void clear_RAWTFR_CH1() volatile
    {
        RAWTFR &= ~(1u << 1u);
    }

    /**
     * Toggle RAWTFR's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void toggle_RAWTFR_CH1() volatile
    {
        RAWTFR ^= 1u << 1u;
    }

    /**
     * Get RAWTFR's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline bool get_RAWTFR_CH0() volatile
    {
        return RAWTFR & (1u << 0u);
    }

    /**
     * Set RAWTFR's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void set_RAWTFR_CH0() volatile
    {
        RAWTFR |= 1u << 0u;
    }

    /**
     * Clear RAWTFR's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void clear_RAWTFR_CH0() volatile
    {
        RAWTFR &= ~(1u << 0u);
    }

    /**
     * Toggle RAWTFR's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void toggle_RAWTFR_CH0() volatile
    {
        RAWTFR ^= 1u << 0u;
    }

    /**
     * Get all of RAWTFR's bit fields.
     *
     * (read-write) Raw IntTfr Status
     */
    inline void get_RAWTFR(bool &CH3, bool &CH2, bool &CH1, bool &CH0) volatile
    {
        uint32_t curr = RAWTFR;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Set all of RAWTFR's bit fields.
     *
     * (read-write) Raw IntTfr Status
     */
    inline void set_RAWTFR(bool CH3, bool CH2, bool CH1, bool CH0) volatile
    {
        uint32_t curr = RAWTFR;

        curr &= ~(0b1u << 3u);
        curr |= (CH3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0 & 0b1u) << 0u;

        RAWTFR = curr;
    }

    /**
     * Get RAWBLOCK's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline bool get_RAWBLOCK_CH3() volatile
    {
        return RAWBLOCK & (1u << 3u);
    }

    /**
     * Set RAWBLOCK's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void set_RAWBLOCK_CH3() volatile
    {
        RAWBLOCK |= 1u << 3u;
    }

    /**
     * Clear RAWBLOCK's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void clear_RAWBLOCK_CH3() volatile
    {
        RAWBLOCK &= ~(1u << 3u);
    }

    /**
     * Toggle RAWBLOCK's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void toggle_RAWBLOCK_CH3() volatile
    {
        RAWBLOCK ^= 1u << 3u;
    }

    /**
     * Get RAWBLOCK's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline bool get_RAWBLOCK_CH2() volatile
    {
        return RAWBLOCK & (1u << 2u);
    }

    /**
     * Set RAWBLOCK's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void set_RAWBLOCK_CH2() volatile
    {
        RAWBLOCK |= 1u << 2u;
    }

    /**
     * Clear RAWBLOCK's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void clear_RAWBLOCK_CH2() volatile
    {
        RAWBLOCK &= ~(1u << 2u);
    }

    /**
     * Toggle RAWBLOCK's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void toggle_RAWBLOCK_CH2() volatile
    {
        RAWBLOCK ^= 1u << 2u;
    }

    /**
     * Get RAWBLOCK's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline bool get_RAWBLOCK_CH1() volatile
    {
        return RAWBLOCK & (1u << 1u);
    }

    /**
     * Set RAWBLOCK's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void set_RAWBLOCK_CH1() volatile
    {
        RAWBLOCK |= 1u << 1u;
    }

    /**
     * Clear RAWBLOCK's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void clear_RAWBLOCK_CH1() volatile
    {
        RAWBLOCK &= ~(1u << 1u);
    }

    /**
     * Toggle RAWBLOCK's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void toggle_RAWBLOCK_CH1() volatile
    {
        RAWBLOCK ^= 1u << 1u;
    }

    /**
     * Get RAWBLOCK's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline bool get_RAWBLOCK_CH0() volatile
    {
        return RAWBLOCK & (1u << 0u);
    }

    /**
     * Set RAWBLOCK's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void set_RAWBLOCK_CH0() volatile
    {
        RAWBLOCK |= 1u << 0u;
    }

    /**
     * Clear RAWBLOCK's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void clear_RAWBLOCK_CH0() volatile
    {
        RAWBLOCK &= ~(1u << 0u);
    }

    /**
     * Toggle RAWBLOCK's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void toggle_RAWBLOCK_CH0() volatile
    {
        RAWBLOCK ^= 1u << 0u;
    }

    /**
     * Get all of RAWBLOCK's bit fields.
     *
     * (read-write) Raw IntBlock Status
     */
    inline void get_RAWBLOCK(bool &CH3, bool &CH2, bool &CH1,
                             bool &CH0) volatile
    {
        uint32_t curr = RAWBLOCK;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Set all of RAWBLOCK's bit fields.
     *
     * (read-write) Raw IntBlock Status
     */
    inline void set_RAWBLOCK(bool CH3, bool CH2, bool CH1, bool CH0) volatile
    {
        uint32_t curr = RAWBLOCK;

        curr &= ~(0b1u << 3u);
        curr |= (CH3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0 & 0b1u) << 0u;

        RAWBLOCK = curr;
    }

    /**
     * Get RAWSRCTRAN's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline bool get_RAWSRCTRAN_CH3() volatile
    {
        return RAWSRCTRAN & (1u << 3u);
    }

    /**
     * Set RAWSRCTRAN's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void set_RAWSRCTRAN_CH3() volatile
    {
        RAWSRCTRAN |= 1u << 3u;
    }

    /**
     * Clear RAWSRCTRAN's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void clear_RAWSRCTRAN_CH3() volatile
    {
        RAWSRCTRAN &= ~(1u << 3u);
    }

    /**
     * Toggle RAWSRCTRAN's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void toggle_RAWSRCTRAN_CH3() volatile
    {
        RAWSRCTRAN ^= 1u << 3u;
    }

    /**
     * Get RAWSRCTRAN's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline bool get_RAWSRCTRAN_CH2() volatile
    {
        return RAWSRCTRAN & (1u << 2u);
    }

    /**
     * Set RAWSRCTRAN's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void set_RAWSRCTRAN_CH2() volatile
    {
        RAWSRCTRAN |= 1u << 2u;
    }

    /**
     * Clear RAWSRCTRAN's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void clear_RAWSRCTRAN_CH2() volatile
    {
        RAWSRCTRAN &= ~(1u << 2u);
    }

    /**
     * Toggle RAWSRCTRAN's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void toggle_RAWSRCTRAN_CH2() volatile
    {
        RAWSRCTRAN ^= 1u << 2u;
    }

    /**
     * Get RAWSRCTRAN's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline bool get_RAWSRCTRAN_CH1() volatile
    {
        return RAWSRCTRAN & (1u << 1u);
    }

    /**
     * Set RAWSRCTRAN's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void set_RAWSRCTRAN_CH1() volatile
    {
        RAWSRCTRAN |= 1u << 1u;
    }

    /**
     * Clear RAWSRCTRAN's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void clear_RAWSRCTRAN_CH1() volatile
    {
        RAWSRCTRAN &= ~(1u << 1u);
    }

    /**
     * Toggle RAWSRCTRAN's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void toggle_RAWSRCTRAN_CH1() volatile
    {
        RAWSRCTRAN ^= 1u << 1u;
    }

    /**
     * Get RAWSRCTRAN's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline bool get_RAWSRCTRAN_CH0() volatile
    {
        return RAWSRCTRAN & (1u << 0u);
    }

    /**
     * Set RAWSRCTRAN's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void set_RAWSRCTRAN_CH0() volatile
    {
        RAWSRCTRAN |= 1u << 0u;
    }

    /**
     * Clear RAWSRCTRAN's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void clear_RAWSRCTRAN_CH0() volatile
    {
        RAWSRCTRAN &= ~(1u << 0u);
    }

    /**
     * Toggle RAWSRCTRAN's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void toggle_RAWSRCTRAN_CH0() volatile
    {
        RAWSRCTRAN ^= 1u << 0u;
    }

    /**
     * Get all of RAWSRCTRAN's bit fields.
     *
     * (read-write) Raw IntSrcTran Status
     */
    inline void get_RAWSRCTRAN(bool &CH3, bool &CH2, bool &CH1,
                               bool &CH0) volatile
    {
        uint32_t curr = RAWSRCTRAN;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Set all of RAWSRCTRAN's bit fields.
     *
     * (read-write) Raw IntSrcTran Status
     */
    inline void set_RAWSRCTRAN(bool CH3, bool CH2, bool CH1, bool CH0) volatile
    {
        uint32_t curr = RAWSRCTRAN;

        curr &= ~(0b1u << 3u);
        curr |= (CH3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0 & 0b1u) << 0u;

        RAWSRCTRAN = curr;
    }

    /**
     * Get RAWDSTTRAN's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline bool get_RAWDSTTRAN_CH3() volatile
    {
        return RAWDSTTRAN & (1u << 3u);
    }

    /**
     * Set RAWDSTTRAN's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void set_RAWDSTTRAN_CH3() volatile
    {
        RAWDSTTRAN |= 1u << 3u;
    }

    /**
     * Clear RAWDSTTRAN's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void clear_RAWDSTTRAN_CH3() volatile
    {
        RAWDSTTRAN &= ~(1u << 3u);
    }

    /**
     * Toggle RAWDSTTRAN's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void toggle_RAWDSTTRAN_CH3() volatile
    {
        RAWDSTTRAN ^= 1u << 3u;
    }

    /**
     * Get RAWDSTTRAN's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline bool get_RAWDSTTRAN_CH2() volatile
    {
        return RAWDSTTRAN & (1u << 2u);
    }

    /**
     * Set RAWDSTTRAN's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void set_RAWDSTTRAN_CH2() volatile
    {
        RAWDSTTRAN |= 1u << 2u;
    }

    /**
     * Clear RAWDSTTRAN's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void clear_RAWDSTTRAN_CH2() volatile
    {
        RAWDSTTRAN &= ~(1u << 2u);
    }

    /**
     * Toggle RAWDSTTRAN's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void toggle_RAWDSTTRAN_CH2() volatile
    {
        RAWDSTTRAN ^= 1u << 2u;
    }

    /**
     * Get RAWDSTTRAN's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline bool get_RAWDSTTRAN_CH1() volatile
    {
        return RAWDSTTRAN & (1u << 1u);
    }

    /**
     * Set RAWDSTTRAN's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void set_RAWDSTTRAN_CH1() volatile
    {
        RAWDSTTRAN |= 1u << 1u;
    }

    /**
     * Clear RAWDSTTRAN's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void clear_RAWDSTTRAN_CH1() volatile
    {
        RAWDSTTRAN &= ~(1u << 1u);
    }

    /**
     * Toggle RAWDSTTRAN's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void toggle_RAWDSTTRAN_CH1() volatile
    {
        RAWDSTTRAN ^= 1u << 1u;
    }

    /**
     * Get RAWDSTTRAN's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline bool get_RAWDSTTRAN_CH0() volatile
    {
        return RAWDSTTRAN & (1u << 0u);
    }

    /**
     * Set RAWDSTTRAN's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void set_RAWDSTTRAN_CH0() volatile
    {
        RAWDSTTRAN |= 1u << 0u;
    }

    /**
     * Clear RAWDSTTRAN's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void clear_RAWDSTTRAN_CH0() volatile
    {
        RAWDSTTRAN &= ~(1u << 0u);
    }

    /**
     * Toggle RAWDSTTRAN's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void toggle_RAWDSTTRAN_CH0() volatile
    {
        RAWDSTTRAN ^= 1u << 0u;
    }

    /**
     * Get all of RAWDSTTRAN's bit fields.
     *
     * (read-write) Raw IntBlock Status
     */
    inline void get_RAWDSTTRAN(bool &CH3, bool &CH2, bool &CH1,
                               bool &CH0) volatile
    {
        uint32_t curr = RAWDSTTRAN;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Set all of RAWDSTTRAN's bit fields.
     *
     * (read-write) Raw IntBlock Status
     */
    inline void set_RAWDSTTRAN(bool CH3, bool CH2, bool CH1, bool CH0) volatile
    {
        uint32_t curr = RAWDSTTRAN;

        curr &= ~(0b1u << 3u);
        curr |= (CH3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0 & 0b1u) << 0u;

        RAWDSTTRAN = curr;
    }

    /**
     * Get RAWERR's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline bool get_RAWERR_CH3() volatile
    {
        return RAWERR & (1u << 3u);
    }

    /**
     * Set RAWERR's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void set_RAWERR_CH3() volatile
    {
        RAWERR |= 1u << 3u;
    }

    /**
     * Clear RAWERR's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void clear_RAWERR_CH3() volatile
    {
        RAWERR &= ~(1u << 3u);
    }

    /**
     * Toggle RAWERR's CH3 bit.
     *
     * Raw Interrupt Status for channel 3
     */
    inline void toggle_RAWERR_CH3() volatile
    {
        RAWERR ^= 1u << 3u;
    }

    /**
     * Get RAWERR's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline bool get_RAWERR_CH2() volatile
    {
        return RAWERR & (1u << 2u);
    }

    /**
     * Set RAWERR's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void set_RAWERR_CH2() volatile
    {
        RAWERR |= 1u << 2u;
    }

    /**
     * Clear RAWERR's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void clear_RAWERR_CH2() volatile
    {
        RAWERR &= ~(1u << 2u);
    }

    /**
     * Toggle RAWERR's CH2 bit.
     *
     * Raw Interrupt Status for channel 2
     */
    inline void toggle_RAWERR_CH2() volatile
    {
        RAWERR ^= 1u << 2u;
    }

    /**
     * Get RAWERR's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline bool get_RAWERR_CH1() volatile
    {
        return RAWERR & (1u << 1u);
    }

    /**
     * Set RAWERR's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void set_RAWERR_CH1() volatile
    {
        RAWERR |= 1u << 1u;
    }

    /**
     * Clear RAWERR's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void clear_RAWERR_CH1() volatile
    {
        RAWERR &= ~(1u << 1u);
    }

    /**
     * Toggle RAWERR's CH1 bit.
     *
     * Raw Interrupt Status for channel 1
     */
    inline void toggle_RAWERR_CH1() volatile
    {
        RAWERR ^= 1u << 1u;
    }

    /**
     * Get RAWERR's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline bool get_RAWERR_CH0() volatile
    {
        return RAWERR & (1u << 0u);
    }

    /**
     * Set RAWERR's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void set_RAWERR_CH0() volatile
    {
        RAWERR |= 1u << 0u;
    }

    /**
     * Clear RAWERR's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void clear_RAWERR_CH0() volatile
    {
        RAWERR &= ~(1u << 0u);
    }

    /**
     * Toggle RAWERR's CH0 bit.
     *
     * Raw Interrupt Status for channel 0
     */
    inline void toggle_RAWERR_CH0() volatile
    {
        RAWERR ^= 1u << 0u;
    }

    /**
     * Get all of RAWERR's bit fields.
     *
     * (read-write) Raw IntErr Status
     */
    inline void get_RAWERR(bool &CH3, bool &CH2, bool &CH1, bool &CH0) volatile
    {
        uint32_t curr = RAWERR;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Set all of RAWERR's bit fields.
     *
     * (read-write) Raw IntErr Status
     */
    inline void set_RAWERR(bool CH3, bool CH2, bool CH1, bool CH0) volatile
    {
        uint32_t curr = RAWERR;

        curr &= ~(0b1u << 3u);
        curr |= (CH3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0 & 0b1u) << 0u;

        RAWERR = curr;
    }

    /**
     * Get STATUSTFR's CH3 bit.
     *
     * Interrupt Status for channel 3
     */
    inline bool get_STATUSTFR_CH3() volatile
    {
        return STATUSTFR & (1u << 3u);
    }

    /**
     * Get STATUSTFR's CH2 bit.
     *
     * Interrupt Status for channel 2
     */
    inline bool get_STATUSTFR_CH2() volatile
    {
        return STATUSTFR & (1u << 2u);
    }

    /**
     * Get STATUSTFR's CH1 bit.
     *
     * Interrupt Status for channel 1
     */
    inline bool get_STATUSTFR_CH1() volatile
    {
        return STATUSTFR & (1u << 1u);
    }

    /**
     * Get STATUSTFR's CH0 bit.
     *
     * Interrupt Status for channel 0
     */
    inline bool get_STATUSTFR_CH0() volatile
    {
        return STATUSTFR & (1u << 0u);
    }

    /**
     * Get all of STATUSTFR's bit fields.
     *
     * (read-only) IntTfr Status
     */
    inline void get_STATUSTFR(bool &CH3, bool &CH2, bool &CH1,
                              bool &CH0) volatile
    {
        uint32_t curr = STATUSTFR;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Get STATUSBLOCK's CH3 bit.
     *
     * Interrupt Status for channel 3
     */
    inline bool get_STATUSBLOCK_CH3() volatile
    {
        return STATUSBLOCK & (1u << 3u);
    }

    /**
     * Get STATUSBLOCK's CH2 bit.
     *
     * Interrupt Status for channel 2
     */
    inline bool get_STATUSBLOCK_CH2() volatile
    {
        return STATUSBLOCK & (1u << 2u);
    }

    /**
     * Get STATUSBLOCK's CH1 bit.
     *
     * Interrupt Status for channel 1
     */
    inline bool get_STATUSBLOCK_CH1() volatile
    {
        return STATUSBLOCK & (1u << 1u);
    }

    /**
     * Get STATUSBLOCK's CH0 bit.
     *
     * Interrupt Status for channel 0
     */
    inline bool get_STATUSBLOCK_CH0() volatile
    {
        return STATUSBLOCK & (1u << 0u);
    }

    /**
     * Get all of STATUSBLOCK's bit fields.
     *
     * (read-only) IntBlock Status
     */
    inline void get_STATUSBLOCK(bool &CH3, bool &CH2, bool &CH1,
                                bool &CH0) volatile
    {
        uint32_t curr = STATUSBLOCK;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Get STATUSSRCTRAN's CH3 bit.
     *
     * Interrupt Status for channel 3
     */
    inline bool get_STATUSSRCTRAN_CH3() volatile
    {
        return STATUSSRCTRAN & (1u << 3u);
    }

    /**
     * Get STATUSSRCTRAN's CH2 bit.
     *
     * Interrupt Status for channel 2
     */
    inline bool get_STATUSSRCTRAN_CH2() volatile
    {
        return STATUSSRCTRAN & (1u << 2u);
    }

    /**
     * Get STATUSSRCTRAN's CH1 bit.
     *
     * Interrupt Status for channel 1
     */
    inline bool get_STATUSSRCTRAN_CH1() volatile
    {
        return STATUSSRCTRAN & (1u << 1u);
    }

    /**
     * Get STATUSSRCTRAN's CH0 bit.
     *
     * Interrupt Status for channel 0
     */
    inline bool get_STATUSSRCTRAN_CH0() volatile
    {
        return STATUSSRCTRAN & (1u << 0u);
    }

    /**
     * Get all of STATUSSRCTRAN's bit fields.
     *
     * (read-only) IntSrcTran Status
     */
    inline void get_STATUSSRCTRAN(bool &CH3, bool &CH2, bool &CH1,
                                  bool &CH0) volatile
    {
        uint32_t curr = STATUSSRCTRAN;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Get STATUSDSTTRAN's CH3 bit.
     *
     * Interrupt Status for channel 3
     */
    inline bool get_STATUSDSTTRAN_CH3() volatile
    {
        return STATUSDSTTRAN & (1u << 3u);
    }

    /**
     * Get STATUSDSTTRAN's CH2 bit.
     *
     * Interrupt Status for channel 2
     */
    inline bool get_STATUSDSTTRAN_CH2() volatile
    {
        return STATUSDSTTRAN & (1u << 2u);
    }

    /**
     * Get STATUSDSTTRAN's CH1 bit.
     *
     * Interrupt Status for channel 1
     */
    inline bool get_STATUSDSTTRAN_CH1() volatile
    {
        return STATUSDSTTRAN & (1u << 1u);
    }

    /**
     * Get STATUSDSTTRAN's CH0 bit.
     *
     * Interrupt Status for channel 0
     */
    inline bool get_STATUSDSTTRAN_CH0() volatile
    {
        return STATUSDSTTRAN & (1u << 0u);
    }

    /**
     * Get all of STATUSDSTTRAN's bit fields.
     *
     * (read-only) IntBlock Status
     */
    inline void get_STATUSDSTTRAN(bool &CH3, bool &CH2, bool &CH1,
                                  bool &CH0) volatile
    {
        uint32_t curr = STATUSDSTTRAN;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Get STATUSERR's CH3 bit.
     *
     * Interrupt Status for channel 3
     */
    inline bool get_STATUSERR_CH3() volatile
    {
        return STATUSERR & (1u << 3u);
    }

    /**
     * Get STATUSERR's CH2 bit.
     *
     * Interrupt Status for channel 2
     */
    inline bool get_STATUSERR_CH2() volatile
    {
        return STATUSERR & (1u << 2u);
    }

    /**
     * Get STATUSERR's CH1 bit.
     *
     * Interrupt Status for channel 1
     */
    inline bool get_STATUSERR_CH1() volatile
    {
        return STATUSERR & (1u << 1u);
    }

    /**
     * Get STATUSERR's CH0 bit.
     *
     * Interrupt Status for channel 0
     */
    inline bool get_STATUSERR_CH0() volatile
    {
        return STATUSERR & (1u << 0u);
    }

    /**
     * Get all of STATUSERR's bit fields.
     *
     * (read-only) IntErr Status
     */
    inline void get_STATUSERR(bool &CH3, bool &CH2, bool &CH1,
                              bool &CH0) volatile
    {
        uint32_t curr = STATUSERR;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Get MASKTFR's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKTFR_CH3() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKTFR & (1u << 3u));
    }

    /**
     * Set MASKTFR's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void set_MASKTFR_CH3() volatile
    {
        MASKTFR |= 1u << 3u;
    }

    /**
     * Clear MASKTFR's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void clear_MASKTFR_CH3() volatile
    {
        MASKTFR &= ~(1u << 3u);
    }

    /**
     * Toggle MASKTFR's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void toggle_MASKTFR_CH3() volatile
    {
        MASKTFR ^= 1u << 3u;
    }

    /**
     * Get MASKTFR's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKTFR_CH2() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKTFR & (1u << 2u));
    }

    /**
     * Set MASKTFR's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void set_MASKTFR_CH2() volatile
    {
        MASKTFR |= 1u << 2u;
    }

    /**
     * Clear MASKTFR's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void clear_MASKTFR_CH2() volatile
    {
        MASKTFR &= ~(1u << 2u);
    }

    /**
     * Toggle MASKTFR's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void toggle_MASKTFR_CH2() volatile
    {
        MASKTFR ^= 1u << 2u;
    }

    /**
     * Get MASKTFR's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKTFR_CH1() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKTFR & (1u << 1u));
    }

    /**
     * Set MASKTFR's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void set_MASKTFR_CH1() volatile
    {
        MASKTFR |= 1u << 1u;
    }

    /**
     * Clear MASKTFR's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void clear_MASKTFR_CH1() volatile
    {
        MASKTFR &= ~(1u << 1u);
    }

    /**
     * Toggle MASKTFR's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void toggle_MASKTFR_CH1() volatile
    {
        MASKTFR ^= 1u << 1u;
    }

    /**
     * Get MASKTFR's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKTFR_CH0() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKTFR & (1u << 0u));
    }

    /**
     * Set MASKTFR's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void set_MASKTFR_CH0() volatile
    {
        MASKTFR |= 1u << 0u;
    }

    /**
     * Clear MASKTFR's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void clear_MASKTFR_CH0() volatile
    {
        MASKTFR &= ~(1u << 0u);
    }

    /**
     * Toggle MASKTFR's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void toggle_MASKTFR_CH0() volatile
    {
        MASKTFR ^= 1u << 0u;
    }

    /**
     * Set MASKTFR's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void set_MASKTFR_WE_CH3() volatile
    {
        MASKTFR |= 1u << 11u;
    }

    /**
     * Clear MASKTFR's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void clear_MASKTFR_WE_CH3() volatile
    {
        MASKTFR &= ~(1u << 11u);
    }

    /**
     * Toggle MASKTFR's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void toggle_MASKTFR_WE_CH3() volatile
    {
        MASKTFR ^= 1u << 11u;
    }

    /**
     * Set MASKTFR's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void set_MASKTFR_WE_CH2() volatile
    {
        MASKTFR |= 1u << 10u;
    }

    /**
     * Clear MASKTFR's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void clear_MASKTFR_WE_CH2() volatile
    {
        MASKTFR &= ~(1u << 10u);
    }

    /**
     * Toggle MASKTFR's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void toggle_MASKTFR_WE_CH2() volatile
    {
        MASKTFR ^= 1u << 10u;
    }

    /**
     * Set MASKTFR's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void set_MASKTFR_WE_CH1() volatile
    {
        MASKTFR |= 1u << 9u;
    }

    /**
     * Clear MASKTFR's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void clear_MASKTFR_WE_CH1() volatile
    {
        MASKTFR &= ~(1u << 9u);
    }

    /**
     * Toggle MASKTFR's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void toggle_MASKTFR_WE_CH1() volatile
    {
        MASKTFR ^= 1u << 9u;
    }

    /**
     * Set MASKTFR's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void set_MASKTFR_WE_CH0() volatile
    {
        MASKTFR |= 1u << 8u;
    }

    /**
     * Clear MASKTFR's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void clear_MASKTFR_WE_CH0() volatile
    {
        MASKTFR &= ~(1u << 8u);
    }

    /**
     * Toggle MASKTFR's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void toggle_MASKTFR_WE_CH0() volatile
    {
        MASKTFR ^= 1u << 8u;
    }

    /**
     * Get all of MASKTFR's bit fields.
     *
     * (read-write) Mask for Raw IntTfr Status
     */
    inline void get_MASKTFR(GPDMA1_MASKTFR_CH3 &CH3, GPDMA1_MASKTFR_CH3 &CH2,
                            GPDMA1_MASKTFR_CH3 &CH1,
                            GPDMA1_MASKTFR_CH3 &CH0) volatile
    {
        uint32_t curr = MASKTFR;

        CH3 = GPDMA1_MASKTFR_CH3(curr & (1u << 3u));
        CH2 = GPDMA1_MASKTFR_CH3(curr & (1u << 2u));
        CH1 = GPDMA1_MASKTFR_CH3(curr & (1u << 1u));
        CH0 = GPDMA1_MASKTFR_CH3(curr & (1u << 0u));
    }

    /**
     * Set all of MASKTFR's bit fields.
     *
     * (read-write) Mask for Raw IntTfr Status
     */
    inline void set_MASKTFR(GPDMA1_MASKTFR_CH3 CH3, GPDMA1_MASKTFR_CH3 CH2,
                            GPDMA1_MASKTFR_CH3 CH1, GPDMA1_MASKTFR_CH3 CH0,
                            GPDMA1_MASKTFR_WE_CH3 WE_CH3,
                            GPDMA1_MASKTFR_WE_CH3 WE_CH2,
                            GPDMA1_MASKTFR_WE_CH3 WE_CH1,
                            GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = MASKTFR;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        MASKTFR = curr;
    }

    /**
     * Get MASKBLOCK's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKBLOCK_CH3() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKBLOCK & (1u << 3u));
    }

    /**
     * Set MASKBLOCK's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void set_MASKBLOCK_CH3() volatile
    {
        MASKBLOCK |= 1u << 3u;
    }

    /**
     * Clear MASKBLOCK's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void clear_MASKBLOCK_CH3() volatile
    {
        MASKBLOCK &= ~(1u << 3u);
    }

    /**
     * Toggle MASKBLOCK's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void toggle_MASKBLOCK_CH3() volatile
    {
        MASKBLOCK ^= 1u << 3u;
    }

    /**
     * Get MASKBLOCK's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKBLOCK_CH2() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKBLOCK & (1u << 2u));
    }

    /**
     * Set MASKBLOCK's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void set_MASKBLOCK_CH2() volatile
    {
        MASKBLOCK |= 1u << 2u;
    }

    /**
     * Clear MASKBLOCK's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void clear_MASKBLOCK_CH2() volatile
    {
        MASKBLOCK &= ~(1u << 2u);
    }

    /**
     * Toggle MASKBLOCK's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void toggle_MASKBLOCK_CH2() volatile
    {
        MASKBLOCK ^= 1u << 2u;
    }

    /**
     * Get MASKBLOCK's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKBLOCK_CH1() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKBLOCK & (1u << 1u));
    }

    /**
     * Set MASKBLOCK's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void set_MASKBLOCK_CH1() volatile
    {
        MASKBLOCK |= 1u << 1u;
    }

    /**
     * Clear MASKBLOCK's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void clear_MASKBLOCK_CH1() volatile
    {
        MASKBLOCK &= ~(1u << 1u);
    }

    /**
     * Toggle MASKBLOCK's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void toggle_MASKBLOCK_CH1() volatile
    {
        MASKBLOCK ^= 1u << 1u;
    }

    /**
     * Get MASKBLOCK's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKBLOCK_CH0() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKBLOCK & (1u << 0u));
    }

    /**
     * Set MASKBLOCK's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void set_MASKBLOCK_CH0() volatile
    {
        MASKBLOCK |= 1u << 0u;
    }

    /**
     * Clear MASKBLOCK's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void clear_MASKBLOCK_CH0() volatile
    {
        MASKBLOCK &= ~(1u << 0u);
    }

    /**
     * Toggle MASKBLOCK's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void toggle_MASKBLOCK_CH0() volatile
    {
        MASKBLOCK ^= 1u << 0u;
    }

    /**
     * Set MASKBLOCK's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void set_MASKBLOCK_WE_CH3() volatile
    {
        MASKBLOCK |= 1u << 11u;
    }

    /**
     * Clear MASKBLOCK's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void clear_MASKBLOCK_WE_CH3() volatile
    {
        MASKBLOCK &= ~(1u << 11u);
    }

    /**
     * Toggle MASKBLOCK's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void toggle_MASKBLOCK_WE_CH3() volatile
    {
        MASKBLOCK ^= 1u << 11u;
    }

    /**
     * Set MASKBLOCK's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void set_MASKBLOCK_WE_CH2() volatile
    {
        MASKBLOCK |= 1u << 10u;
    }

    /**
     * Clear MASKBLOCK's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void clear_MASKBLOCK_WE_CH2() volatile
    {
        MASKBLOCK &= ~(1u << 10u);
    }

    /**
     * Toggle MASKBLOCK's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void toggle_MASKBLOCK_WE_CH2() volatile
    {
        MASKBLOCK ^= 1u << 10u;
    }

    /**
     * Set MASKBLOCK's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void set_MASKBLOCK_WE_CH1() volatile
    {
        MASKBLOCK |= 1u << 9u;
    }

    /**
     * Clear MASKBLOCK's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void clear_MASKBLOCK_WE_CH1() volatile
    {
        MASKBLOCK &= ~(1u << 9u);
    }

    /**
     * Toggle MASKBLOCK's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void toggle_MASKBLOCK_WE_CH1() volatile
    {
        MASKBLOCK ^= 1u << 9u;
    }

    /**
     * Set MASKBLOCK's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void set_MASKBLOCK_WE_CH0() volatile
    {
        MASKBLOCK |= 1u << 8u;
    }

    /**
     * Clear MASKBLOCK's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void clear_MASKBLOCK_WE_CH0() volatile
    {
        MASKBLOCK &= ~(1u << 8u);
    }

    /**
     * Toggle MASKBLOCK's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void toggle_MASKBLOCK_WE_CH0() volatile
    {
        MASKBLOCK ^= 1u << 8u;
    }

    /**
     * Get all of MASKBLOCK's bit fields.
     *
     * (read-write) Mask for Raw IntBlock Status
     */
    inline void get_MASKBLOCK(GPDMA1_MASKTFR_CH3 &CH3, GPDMA1_MASKTFR_CH3 &CH2,
                              GPDMA1_MASKTFR_CH3 &CH1,
                              GPDMA1_MASKTFR_CH3 &CH0) volatile
    {
        uint32_t curr = MASKBLOCK;

        CH3 = GPDMA1_MASKTFR_CH3(curr & (1u << 3u));
        CH2 = GPDMA1_MASKTFR_CH3(curr & (1u << 2u));
        CH1 = GPDMA1_MASKTFR_CH3(curr & (1u << 1u));
        CH0 = GPDMA1_MASKTFR_CH3(curr & (1u << 0u));
    }

    /**
     * Set all of MASKBLOCK's bit fields.
     *
     * (read-write) Mask for Raw IntBlock Status
     */
    inline void set_MASKBLOCK(GPDMA1_MASKTFR_CH3 CH3, GPDMA1_MASKTFR_CH3 CH2,
                              GPDMA1_MASKTFR_CH3 CH1, GPDMA1_MASKTFR_CH3 CH0,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH3,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH2,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH1,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = MASKBLOCK;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        MASKBLOCK = curr;
    }

    /**
     * Get MASKSRCTRAN's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKSRCTRAN_CH3() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKSRCTRAN & (1u << 3u));
    }

    /**
     * Set MASKSRCTRAN's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void set_MASKSRCTRAN_CH3() volatile
    {
        MASKSRCTRAN |= 1u << 3u;
    }

    /**
     * Clear MASKSRCTRAN's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void clear_MASKSRCTRAN_CH3() volatile
    {
        MASKSRCTRAN &= ~(1u << 3u);
    }

    /**
     * Toggle MASKSRCTRAN's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void toggle_MASKSRCTRAN_CH3() volatile
    {
        MASKSRCTRAN ^= 1u << 3u;
    }

    /**
     * Get MASKSRCTRAN's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKSRCTRAN_CH2() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKSRCTRAN & (1u << 2u));
    }

    /**
     * Set MASKSRCTRAN's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void set_MASKSRCTRAN_CH2() volatile
    {
        MASKSRCTRAN |= 1u << 2u;
    }

    /**
     * Clear MASKSRCTRAN's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void clear_MASKSRCTRAN_CH2() volatile
    {
        MASKSRCTRAN &= ~(1u << 2u);
    }

    /**
     * Toggle MASKSRCTRAN's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void toggle_MASKSRCTRAN_CH2() volatile
    {
        MASKSRCTRAN ^= 1u << 2u;
    }

    /**
     * Get MASKSRCTRAN's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKSRCTRAN_CH1() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKSRCTRAN & (1u << 1u));
    }

    /**
     * Set MASKSRCTRAN's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void set_MASKSRCTRAN_CH1() volatile
    {
        MASKSRCTRAN |= 1u << 1u;
    }

    /**
     * Clear MASKSRCTRAN's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void clear_MASKSRCTRAN_CH1() volatile
    {
        MASKSRCTRAN &= ~(1u << 1u);
    }

    /**
     * Toggle MASKSRCTRAN's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void toggle_MASKSRCTRAN_CH1() volatile
    {
        MASKSRCTRAN ^= 1u << 1u;
    }

    /**
     * Get MASKSRCTRAN's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKSRCTRAN_CH0() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKSRCTRAN & (1u << 0u));
    }

    /**
     * Set MASKSRCTRAN's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void set_MASKSRCTRAN_CH0() volatile
    {
        MASKSRCTRAN |= 1u << 0u;
    }

    /**
     * Clear MASKSRCTRAN's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void clear_MASKSRCTRAN_CH0() volatile
    {
        MASKSRCTRAN &= ~(1u << 0u);
    }

    /**
     * Toggle MASKSRCTRAN's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void toggle_MASKSRCTRAN_CH0() volatile
    {
        MASKSRCTRAN ^= 1u << 0u;
    }

    /**
     * Set MASKSRCTRAN's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void set_MASKSRCTRAN_WE_CH3() volatile
    {
        MASKSRCTRAN |= 1u << 11u;
    }

    /**
     * Clear MASKSRCTRAN's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void clear_MASKSRCTRAN_WE_CH3() volatile
    {
        MASKSRCTRAN &= ~(1u << 11u);
    }

    /**
     * Toggle MASKSRCTRAN's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void toggle_MASKSRCTRAN_WE_CH3() volatile
    {
        MASKSRCTRAN ^= 1u << 11u;
    }

    /**
     * Set MASKSRCTRAN's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void set_MASKSRCTRAN_WE_CH2() volatile
    {
        MASKSRCTRAN |= 1u << 10u;
    }

    /**
     * Clear MASKSRCTRAN's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void clear_MASKSRCTRAN_WE_CH2() volatile
    {
        MASKSRCTRAN &= ~(1u << 10u);
    }

    /**
     * Toggle MASKSRCTRAN's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void toggle_MASKSRCTRAN_WE_CH2() volatile
    {
        MASKSRCTRAN ^= 1u << 10u;
    }

    /**
     * Set MASKSRCTRAN's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void set_MASKSRCTRAN_WE_CH1() volatile
    {
        MASKSRCTRAN |= 1u << 9u;
    }

    /**
     * Clear MASKSRCTRAN's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void clear_MASKSRCTRAN_WE_CH1() volatile
    {
        MASKSRCTRAN &= ~(1u << 9u);
    }

    /**
     * Toggle MASKSRCTRAN's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void toggle_MASKSRCTRAN_WE_CH1() volatile
    {
        MASKSRCTRAN ^= 1u << 9u;
    }

    /**
     * Set MASKSRCTRAN's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void set_MASKSRCTRAN_WE_CH0() volatile
    {
        MASKSRCTRAN |= 1u << 8u;
    }

    /**
     * Clear MASKSRCTRAN's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void clear_MASKSRCTRAN_WE_CH0() volatile
    {
        MASKSRCTRAN &= ~(1u << 8u);
    }

    /**
     * Toggle MASKSRCTRAN's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void toggle_MASKSRCTRAN_WE_CH0() volatile
    {
        MASKSRCTRAN ^= 1u << 8u;
    }

    /**
     * Get all of MASKSRCTRAN's bit fields.
     *
     * (read-write) Mask for Raw IntSrcTran Status
     */
    inline void get_MASKSRCTRAN(GPDMA1_MASKTFR_CH3 &CH3,
                                GPDMA1_MASKTFR_CH3 &CH2,
                                GPDMA1_MASKTFR_CH3 &CH1,
                                GPDMA1_MASKTFR_CH3 &CH0) volatile
    {
        uint32_t curr = MASKSRCTRAN;

        CH3 = GPDMA1_MASKTFR_CH3(curr & (1u << 3u));
        CH2 = GPDMA1_MASKTFR_CH3(curr & (1u << 2u));
        CH1 = GPDMA1_MASKTFR_CH3(curr & (1u << 1u));
        CH0 = GPDMA1_MASKTFR_CH3(curr & (1u << 0u));
    }

    /**
     * Set all of MASKSRCTRAN's bit fields.
     *
     * (read-write) Mask for Raw IntSrcTran Status
     */
    inline void set_MASKSRCTRAN(GPDMA1_MASKTFR_CH3 CH3, GPDMA1_MASKTFR_CH3 CH2,
                                GPDMA1_MASKTFR_CH3 CH1, GPDMA1_MASKTFR_CH3 CH0,
                                GPDMA1_MASKTFR_WE_CH3 WE_CH3,
                                GPDMA1_MASKTFR_WE_CH3 WE_CH2,
                                GPDMA1_MASKTFR_WE_CH3 WE_CH1,
                                GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = MASKSRCTRAN;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        MASKSRCTRAN = curr;
    }

    /**
     * Get MASKDSTTRAN's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKDSTTRAN_CH3() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKDSTTRAN & (1u << 3u));
    }

    /**
     * Set MASKDSTTRAN's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void set_MASKDSTTRAN_CH3() volatile
    {
        MASKDSTTRAN |= 1u << 3u;
    }

    /**
     * Clear MASKDSTTRAN's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void clear_MASKDSTTRAN_CH3() volatile
    {
        MASKDSTTRAN &= ~(1u << 3u);
    }

    /**
     * Toggle MASKDSTTRAN's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void toggle_MASKDSTTRAN_CH3() volatile
    {
        MASKDSTTRAN ^= 1u << 3u;
    }

    /**
     * Get MASKDSTTRAN's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKDSTTRAN_CH2() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKDSTTRAN & (1u << 2u));
    }

    /**
     * Set MASKDSTTRAN's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void set_MASKDSTTRAN_CH2() volatile
    {
        MASKDSTTRAN |= 1u << 2u;
    }

    /**
     * Clear MASKDSTTRAN's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void clear_MASKDSTTRAN_CH2() volatile
    {
        MASKDSTTRAN &= ~(1u << 2u);
    }

    /**
     * Toggle MASKDSTTRAN's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void toggle_MASKDSTTRAN_CH2() volatile
    {
        MASKDSTTRAN ^= 1u << 2u;
    }

    /**
     * Get MASKDSTTRAN's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKDSTTRAN_CH1() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKDSTTRAN & (1u << 1u));
    }

    /**
     * Set MASKDSTTRAN's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void set_MASKDSTTRAN_CH1() volatile
    {
        MASKDSTTRAN |= 1u << 1u;
    }

    /**
     * Clear MASKDSTTRAN's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void clear_MASKDSTTRAN_CH1() volatile
    {
        MASKDSTTRAN &= ~(1u << 1u);
    }

    /**
     * Toggle MASKDSTTRAN's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void toggle_MASKDSTTRAN_CH1() volatile
    {
        MASKDSTTRAN ^= 1u << 1u;
    }

    /**
     * Get MASKDSTTRAN's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKDSTTRAN_CH0() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKDSTTRAN & (1u << 0u));
    }

    /**
     * Set MASKDSTTRAN's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void set_MASKDSTTRAN_CH0() volatile
    {
        MASKDSTTRAN |= 1u << 0u;
    }

    /**
     * Clear MASKDSTTRAN's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void clear_MASKDSTTRAN_CH0() volatile
    {
        MASKDSTTRAN &= ~(1u << 0u);
    }

    /**
     * Toggle MASKDSTTRAN's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void toggle_MASKDSTTRAN_CH0() volatile
    {
        MASKDSTTRAN ^= 1u << 0u;
    }

    /**
     * Set MASKDSTTRAN's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void set_MASKDSTTRAN_WE_CH3() volatile
    {
        MASKDSTTRAN |= 1u << 11u;
    }

    /**
     * Clear MASKDSTTRAN's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void clear_MASKDSTTRAN_WE_CH3() volatile
    {
        MASKDSTTRAN &= ~(1u << 11u);
    }

    /**
     * Toggle MASKDSTTRAN's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void toggle_MASKDSTTRAN_WE_CH3() volatile
    {
        MASKDSTTRAN ^= 1u << 11u;
    }

    /**
     * Set MASKDSTTRAN's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void set_MASKDSTTRAN_WE_CH2() volatile
    {
        MASKDSTTRAN |= 1u << 10u;
    }

    /**
     * Clear MASKDSTTRAN's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void clear_MASKDSTTRAN_WE_CH2() volatile
    {
        MASKDSTTRAN &= ~(1u << 10u);
    }

    /**
     * Toggle MASKDSTTRAN's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void toggle_MASKDSTTRAN_WE_CH2() volatile
    {
        MASKDSTTRAN ^= 1u << 10u;
    }

    /**
     * Set MASKDSTTRAN's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void set_MASKDSTTRAN_WE_CH1() volatile
    {
        MASKDSTTRAN |= 1u << 9u;
    }

    /**
     * Clear MASKDSTTRAN's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void clear_MASKDSTTRAN_WE_CH1() volatile
    {
        MASKDSTTRAN &= ~(1u << 9u);
    }

    /**
     * Toggle MASKDSTTRAN's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void toggle_MASKDSTTRAN_WE_CH1() volatile
    {
        MASKDSTTRAN ^= 1u << 9u;
    }

    /**
     * Set MASKDSTTRAN's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void set_MASKDSTTRAN_WE_CH0() volatile
    {
        MASKDSTTRAN |= 1u << 8u;
    }

    /**
     * Clear MASKDSTTRAN's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void clear_MASKDSTTRAN_WE_CH0() volatile
    {
        MASKDSTTRAN &= ~(1u << 8u);
    }

    /**
     * Toggle MASKDSTTRAN's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void toggle_MASKDSTTRAN_WE_CH0() volatile
    {
        MASKDSTTRAN ^= 1u << 8u;
    }

    /**
     * Get all of MASKDSTTRAN's bit fields.
     *
     * (read-write) Mask for Raw IntBlock Status
     */
    inline void get_MASKDSTTRAN(GPDMA1_MASKTFR_CH3 &CH3,
                                GPDMA1_MASKTFR_CH3 &CH2,
                                GPDMA1_MASKTFR_CH3 &CH1,
                                GPDMA1_MASKTFR_CH3 &CH0) volatile
    {
        uint32_t curr = MASKDSTTRAN;

        CH3 = GPDMA1_MASKTFR_CH3(curr & (1u << 3u));
        CH2 = GPDMA1_MASKTFR_CH3(curr & (1u << 2u));
        CH1 = GPDMA1_MASKTFR_CH3(curr & (1u << 1u));
        CH0 = GPDMA1_MASKTFR_CH3(curr & (1u << 0u));
    }

    /**
     * Set all of MASKDSTTRAN's bit fields.
     *
     * (read-write) Mask for Raw IntBlock Status
     */
    inline void set_MASKDSTTRAN(GPDMA1_MASKTFR_CH3 CH3, GPDMA1_MASKTFR_CH3 CH2,
                                GPDMA1_MASKTFR_CH3 CH1, GPDMA1_MASKTFR_CH3 CH0,
                                GPDMA1_MASKTFR_WE_CH3 WE_CH3,
                                GPDMA1_MASKTFR_WE_CH3 WE_CH2,
                                GPDMA1_MASKTFR_WE_CH3 WE_CH1,
                                GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = MASKDSTTRAN;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        MASKDSTTRAN = curr;
    }

    /**
     * Get MASKERR's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKERR_CH3() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKERR & (1u << 3u));
    }

    /**
     * Set MASKERR's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void set_MASKERR_CH3() volatile
    {
        MASKERR |= 1u << 3u;
    }

    /**
     * Clear MASKERR's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void clear_MASKERR_CH3() volatile
    {
        MASKERR &= ~(1u << 3u);
    }

    /**
     * Toggle MASKERR's CH3 bit.
     *
     * Mask bit for channel 3
     */
    inline void toggle_MASKERR_CH3() volatile
    {
        MASKERR ^= 1u << 3u;
    }

    /**
     * Get MASKERR's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKERR_CH2() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKERR & (1u << 2u));
    }

    /**
     * Set MASKERR's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void set_MASKERR_CH2() volatile
    {
        MASKERR |= 1u << 2u;
    }

    /**
     * Clear MASKERR's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void clear_MASKERR_CH2() volatile
    {
        MASKERR &= ~(1u << 2u);
    }

    /**
     * Toggle MASKERR's CH2 bit.
     *
     * Mask bit for channel 2
     */
    inline void toggle_MASKERR_CH2() volatile
    {
        MASKERR ^= 1u << 2u;
    }

    /**
     * Get MASKERR's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKERR_CH1() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKERR & (1u << 1u));
    }

    /**
     * Set MASKERR's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void set_MASKERR_CH1() volatile
    {
        MASKERR |= 1u << 1u;
    }

    /**
     * Clear MASKERR's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void clear_MASKERR_CH1() volatile
    {
        MASKERR &= ~(1u << 1u);
    }

    /**
     * Toggle MASKERR's CH1 bit.
     *
     * Mask bit for channel 1
     */
    inline void toggle_MASKERR_CH1() volatile
    {
        MASKERR ^= 1u << 1u;
    }

    /**
     * Get MASKERR's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline GPDMA1_MASKTFR_CH3 get_MASKERR_CH0() volatile
    {
        return GPDMA1_MASKTFR_CH3(MASKERR & (1u << 0u));
    }

    /**
     * Set MASKERR's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void set_MASKERR_CH0() volatile
    {
        MASKERR |= 1u << 0u;
    }

    /**
     * Clear MASKERR's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void clear_MASKERR_CH0() volatile
    {
        MASKERR &= ~(1u << 0u);
    }

    /**
     * Toggle MASKERR's CH0 bit.
     *
     * Mask bit for channel 0
     */
    inline void toggle_MASKERR_CH0() volatile
    {
        MASKERR ^= 1u << 0u;
    }

    /**
     * Set MASKERR's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void set_MASKERR_WE_CH3() volatile
    {
        MASKERR |= 1u << 11u;
    }

    /**
     * Clear MASKERR's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void clear_MASKERR_WE_CH3() volatile
    {
        MASKERR &= ~(1u << 11u);
    }

    /**
     * Toggle MASKERR's WE_CH3 bit.
     *
     * Write enable for mask bit of channel 3
     */
    inline void toggle_MASKERR_WE_CH3() volatile
    {
        MASKERR ^= 1u << 11u;
    }

    /**
     * Set MASKERR's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void set_MASKERR_WE_CH2() volatile
    {
        MASKERR |= 1u << 10u;
    }

    /**
     * Clear MASKERR's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void clear_MASKERR_WE_CH2() volatile
    {
        MASKERR &= ~(1u << 10u);
    }

    /**
     * Toggle MASKERR's WE_CH2 bit.
     *
     * Write enable for mask bit of channel 2
     */
    inline void toggle_MASKERR_WE_CH2() volatile
    {
        MASKERR ^= 1u << 10u;
    }

    /**
     * Set MASKERR's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void set_MASKERR_WE_CH1() volatile
    {
        MASKERR |= 1u << 9u;
    }

    /**
     * Clear MASKERR's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void clear_MASKERR_WE_CH1() volatile
    {
        MASKERR &= ~(1u << 9u);
    }

    /**
     * Toggle MASKERR's WE_CH1 bit.
     *
     * Write enable for mask bit of channel 1
     */
    inline void toggle_MASKERR_WE_CH1() volatile
    {
        MASKERR ^= 1u << 9u;
    }

    /**
     * Set MASKERR's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void set_MASKERR_WE_CH0() volatile
    {
        MASKERR |= 1u << 8u;
    }

    /**
     * Clear MASKERR's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void clear_MASKERR_WE_CH0() volatile
    {
        MASKERR &= ~(1u << 8u);
    }

    /**
     * Toggle MASKERR's WE_CH0 bit.
     *
     * Write enable for mask bit of channel 0
     */
    inline void toggle_MASKERR_WE_CH0() volatile
    {
        MASKERR ^= 1u << 8u;
    }

    /**
     * Get all of MASKERR's bit fields.
     *
     * (read-write) Mask for Raw IntErr Status
     */
    inline void get_MASKERR(GPDMA1_MASKTFR_CH3 &CH3, GPDMA1_MASKTFR_CH3 &CH2,
                            GPDMA1_MASKTFR_CH3 &CH1,
                            GPDMA1_MASKTFR_CH3 &CH0) volatile
    {
        uint32_t curr = MASKERR;

        CH3 = GPDMA1_MASKTFR_CH3(curr & (1u << 3u));
        CH2 = GPDMA1_MASKTFR_CH3(curr & (1u << 2u));
        CH1 = GPDMA1_MASKTFR_CH3(curr & (1u << 1u));
        CH0 = GPDMA1_MASKTFR_CH3(curr & (1u << 0u));
    }

    /**
     * Set all of MASKERR's bit fields.
     *
     * (read-write) Mask for Raw IntErr Status
     */
    inline void set_MASKERR(GPDMA1_MASKTFR_CH3 CH3, GPDMA1_MASKTFR_CH3 CH2,
                            GPDMA1_MASKTFR_CH3 CH1, GPDMA1_MASKTFR_CH3 CH0,
                            GPDMA1_MASKTFR_WE_CH3 WE_CH3,
                            GPDMA1_MASKTFR_WE_CH3 WE_CH2,
                            GPDMA1_MASKTFR_WE_CH3 WE_CH1,
                            GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = MASKERR;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        MASKERR = curr;
    }

    /**
     * Set CLEARTFR's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void set_CLEARTFR_CH3() volatile
    {
        CLEARTFR |= 1u << 3u;
    }

    /**
     * Clear CLEARTFR's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void clear_CLEARTFR_CH3() volatile
    {
        CLEARTFR &= ~(1u << 3u);
    }

    /**
     * Toggle CLEARTFR's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void toggle_CLEARTFR_CH3() volatile
    {
        CLEARTFR ^= 1u << 3u;
    }

    /**
     * Set CLEARTFR's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void set_CLEARTFR_CH2() volatile
    {
        CLEARTFR |= 1u << 2u;
    }

    /**
     * Clear CLEARTFR's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void clear_CLEARTFR_CH2() volatile
    {
        CLEARTFR &= ~(1u << 2u);
    }

    /**
     * Toggle CLEARTFR's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void toggle_CLEARTFR_CH2() volatile
    {
        CLEARTFR ^= 1u << 2u;
    }

    /**
     * Set CLEARTFR's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void set_CLEARTFR_CH1() volatile
    {
        CLEARTFR |= 1u << 1u;
    }

    /**
     * Clear CLEARTFR's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void clear_CLEARTFR_CH1() volatile
    {
        CLEARTFR &= ~(1u << 1u);
    }

    /**
     * Toggle CLEARTFR's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void toggle_CLEARTFR_CH1() volatile
    {
        CLEARTFR ^= 1u << 1u;
    }

    /**
     * Set CLEARTFR's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void set_CLEARTFR_CH0() volatile
    {
        CLEARTFR |= 1u << 0u;
    }

    /**
     * Clear CLEARTFR's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void clear_CLEARTFR_CH0() volatile
    {
        CLEARTFR &= ~(1u << 0u);
    }

    /**
     * Toggle CLEARTFR's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void toggle_CLEARTFR_CH0() volatile
    {
        CLEARTFR ^= 1u << 0u;
    }

    /**
     * Set all of CLEARTFR's bit fields.
     *
     * (write-only) IntTfr Status
     */
    inline void set_CLEARTFR(GPDMA1_CLEARTFR_CH3 CH3, GPDMA1_CLEARTFR_CH3 CH2,
                             GPDMA1_CLEARTFR_CH3 CH1,
                             GPDMA1_CLEARTFR_CH3 CH0) volatile
    {
        uint32_t curr = CLEARTFR;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;

        CLEARTFR = curr;
    }

    /**
     * Set CLEARBLOCK's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void set_CLEARBLOCK_CH3() volatile
    {
        CLEARBLOCK |= 1u << 3u;
    }

    /**
     * Clear CLEARBLOCK's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void clear_CLEARBLOCK_CH3() volatile
    {
        CLEARBLOCK &= ~(1u << 3u);
    }

    /**
     * Toggle CLEARBLOCK's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void toggle_CLEARBLOCK_CH3() volatile
    {
        CLEARBLOCK ^= 1u << 3u;
    }

    /**
     * Set CLEARBLOCK's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void set_CLEARBLOCK_CH2() volatile
    {
        CLEARBLOCK |= 1u << 2u;
    }

    /**
     * Clear CLEARBLOCK's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void clear_CLEARBLOCK_CH2() volatile
    {
        CLEARBLOCK &= ~(1u << 2u);
    }

    /**
     * Toggle CLEARBLOCK's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void toggle_CLEARBLOCK_CH2() volatile
    {
        CLEARBLOCK ^= 1u << 2u;
    }

    /**
     * Set CLEARBLOCK's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void set_CLEARBLOCK_CH1() volatile
    {
        CLEARBLOCK |= 1u << 1u;
    }

    /**
     * Clear CLEARBLOCK's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void clear_CLEARBLOCK_CH1() volatile
    {
        CLEARBLOCK &= ~(1u << 1u);
    }

    /**
     * Toggle CLEARBLOCK's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void toggle_CLEARBLOCK_CH1() volatile
    {
        CLEARBLOCK ^= 1u << 1u;
    }

    /**
     * Set CLEARBLOCK's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void set_CLEARBLOCK_CH0() volatile
    {
        CLEARBLOCK |= 1u << 0u;
    }

    /**
     * Clear CLEARBLOCK's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void clear_CLEARBLOCK_CH0() volatile
    {
        CLEARBLOCK &= ~(1u << 0u);
    }

    /**
     * Toggle CLEARBLOCK's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void toggle_CLEARBLOCK_CH0() volatile
    {
        CLEARBLOCK ^= 1u << 0u;
    }

    /**
     * Set all of CLEARBLOCK's bit fields.
     *
     * (write-only) IntBlock Status
     */
    inline void set_CLEARBLOCK(GPDMA1_CLEARTFR_CH3 CH3,
                               GPDMA1_CLEARTFR_CH3 CH2,
                               GPDMA1_CLEARTFR_CH3 CH1,
                               GPDMA1_CLEARTFR_CH3 CH0) volatile
    {
        uint32_t curr = CLEARBLOCK;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;

        CLEARBLOCK = curr;
    }

    /**
     * Set CLEARSRCTRAN's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void set_CLEARSRCTRAN_CH3() volatile
    {
        CLEARSRCTRAN |= 1u << 3u;
    }

    /**
     * Clear CLEARSRCTRAN's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void clear_CLEARSRCTRAN_CH3() volatile
    {
        CLEARSRCTRAN &= ~(1u << 3u);
    }

    /**
     * Toggle CLEARSRCTRAN's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void toggle_CLEARSRCTRAN_CH3() volatile
    {
        CLEARSRCTRAN ^= 1u << 3u;
    }

    /**
     * Set CLEARSRCTRAN's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void set_CLEARSRCTRAN_CH2() volatile
    {
        CLEARSRCTRAN |= 1u << 2u;
    }

    /**
     * Clear CLEARSRCTRAN's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void clear_CLEARSRCTRAN_CH2() volatile
    {
        CLEARSRCTRAN &= ~(1u << 2u);
    }

    /**
     * Toggle CLEARSRCTRAN's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void toggle_CLEARSRCTRAN_CH2() volatile
    {
        CLEARSRCTRAN ^= 1u << 2u;
    }

    /**
     * Set CLEARSRCTRAN's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void set_CLEARSRCTRAN_CH1() volatile
    {
        CLEARSRCTRAN |= 1u << 1u;
    }

    /**
     * Clear CLEARSRCTRAN's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void clear_CLEARSRCTRAN_CH1() volatile
    {
        CLEARSRCTRAN &= ~(1u << 1u);
    }

    /**
     * Toggle CLEARSRCTRAN's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void toggle_CLEARSRCTRAN_CH1() volatile
    {
        CLEARSRCTRAN ^= 1u << 1u;
    }

    /**
     * Set CLEARSRCTRAN's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void set_CLEARSRCTRAN_CH0() volatile
    {
        CLEARSRCTRAN |= 1u << 0u;
    }

    /**
     * Clear CLEARSRCTRAN's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void clear_CLEARSRCTRAN_CH0() volatile
    {
        CLEARSRCTRAN &= ~(1u << 0u);
    }

    /**
     * Toggle CLEARSRCTRAN's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void toggle_CLEARSRCTRAN_CH0() volatile
    {
        CLEARSRCTRAN ^= 1u << 0u;
    }

    /**
     * Set all of CLEARSRCTRAN's bit fields.
     *
     * (write-only) IntSrcTran Status
     */
    inline void set_CLEARSRCTRAN(GPDMA1_CLEARTFR_CH3 CH3,
                                 GPDMA1_CLEARTFR_CH3 CH2,
                                 GPDMA1_CLEARTFR_CH3 CH1,
                                 GPDMA1_CLEARTFR_CH3 CH0) volatile
    {
        uint32_t curr = CLEARSRCTRAN;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;

        CLEARSRCTRAN = curr;
    }

    /**
     * Set CLEARDSTTRAN's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void set_CLEARDSTTRAN_CH3() volatile
    {
        CLEARDSTTRAN |= 1u << 3u;
    }

    /**
     * Clear CLEARDSTTRAN's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void clear_CLEARDSTTRAN_CH3() volatile
    {
        CLEARDSTTRAN &= ~(1u << 3u);
    }

    /**
     * Toggle CLEARDSTTRAN's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void toggle_CLEARDSTTRAN_CH3() volatile
    {
        CLEARDSTTRAN ^= 1u << 3u;
    }

    /**
     * Set CLEARDSTTRAN's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void set_CLEARDSTTRAN_CH2() volatile
    {
        CLEARDSTTRAN |= 1u << 2u;
    }

    /**
     * Clear CLEARDSTTRAN's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void clear_CLEARDSTTRAN_CH2() volatile
    {
        CLEARDSTTRAN &= ~(1u << 2u);
    }

    /**
     * Toggle CLEARDSTTRAN's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void toggle_CLEARDSTTRAN_CH2() volatile
    {
        CLEARDSTTRAN ^= 1u << 2u;
    }

    /**
     * Set CLEARDSTTRAN's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void set_CLEARDSTTRAN_CH1() volatile
    {
        CLEARDSTTRAN |= 1u << 1u;
    }

    /**
     * Clear CLEARDSTTRAN's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void clear_CLEARDSTTRAN_CH1() volatile
    {
        CLEARDSTTRAN &= ~(1u << 1u);
    }

    /**
     * Toggle CLEARDSTTRAN's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void toggle_CLEARDSTTRAN_CH1() volatile
    {
        CLEARDSTTRAN ^= 1u << 1u;
    }

    /**
     * Set CLEARDSTTRAN's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void set_CLEARDSTTRAN_CH0() volatile
    {
        CLEARDSTTRAN |= 1u << 0u;
    }

    /**
     * Clear CLEARDSTTRAN's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void clear_CLEARDSTTRAN_CH0() volatile
    {
        CLEARDSTTRAN &= ~(1u << 0u);
    }

    /**
     * Toggle CLEARDSTTRAN's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void toggle_CLEARDSTTRAN_CH0() volatile
    {
        CLEARDSTTRAN ^= 1u << 0u;
    }

    /**
     * Set all of CLEARDSTTRAN's bit fields.
     *
     * (write-only) IntBlock Status
     */
    inline void set_CLEARDSTTRAN(GPDMA1_CLEARTFR_CH3 CH3,
                                 GPDMA1_CLEARTFR_CH3 CH2,
                                 GPDMA1_CLEARTFR_CH3 CH1,
                                 GPDMA1_CLEARTFR_CH3 CH0) volatile
    {
        uint32_t curr = CLEARDSTTRAN;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;

        CLEARDSTTRAN = curr;
    }

    /**
     * Set CLEARERR's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void set_CLEARERR_CH3() volatile
    {
        CLEARERR |= 1u << 3u;
    }

    /**
     * Clear CLEARERR's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void clear_CLEARERR_CH3() volatile
    {
        CLEARERR &= ~(1u << 3u);
    }

    /**
     * Toggle CLEARERR's CH3 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 3
     */
    inline void toggle_CLEARERR_CH3() volatile
    {
        CLEARERR ^= 1u << 3u;
    }

    /**
     * Set CLEARERR's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void set_CLEARERR_CH2() volatile
    {
        CLEARERR |= 1u << 2u;
    }

    /**
     * Clear CLEARERR's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void clear_CLEARERR_CH2() volatile
    {
        CLEARERR &= ~(1u << 2u);
    }

    /**
     * Toggle CLEARERR's CH2 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 2
     */
    inline void toggle_CLEARERR_CH2() volatile
    {
        CLEARERR ^= 1u << 2u;
    }

    /**
     * Set CLEARERR's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void set_CLEARERR_CH1() volatile
    {
        CLEARERR |= 1u << 1u;
    }

    /**
     * Clear CLEARERR's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void clear_CLEARERR_CH1() volatile
    {
        CLEARERR &= ~(1u << 1u);
    }

    /**
     * Toggle CLEARERR's CH1 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 1
     */
    inline void toggle_CLEARERR_CH1() volatile
    {
        CLEARERR ^= 1u << 1u;
    }

    /**
     * Set CLEARERR's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void set_CLEARERR_CH0() volatile
    {
        CLEARERR |= 1u << 0u;
    }

    /**
     * Clear CLEARERR's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void clear_CLEARERR_CH0() volatile
    {
        CLEARERR &= ~(1u << 0u);
    }

    /**
     * Toggle CLEARERR's CH0 bit.
     *
     * Clear Interrupt Status and Raw Status for channel 0
     */
    inline void toggle_CLEARERR_CH0() volatile
    {
        CLEARERR ^= 1u << 0u;
    }

    /**
     * Set all of CLEARERR's bit fields.
     *
     * (write-only) IntErr Status
     */
    inline void set_CLEARERR(GPDMA1_CLEARTFR_CH3 CH3, GPDMA1_CLEARTFR_CH3 CH2,
                             GPDMA1_CLEARTFR_CH3 CH1,
                             GPDMA1_CLEARTFR_CH3 CH0) volatile
    {
        uint32_t curr = CLEARERR;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;

        CLEARERR = curr;
    }

    /**
     * Get STATUSINT's TFR bit.
     *
     * OR of the contents of STATUSTFR register
     */
    inline bool get_STATUSINT_TFR() volatile
    {
        return STATUSINT & (1u << 0u);
    }

    /**
     * Get STATUSINT's BLOCK bit.
     *
     * OR of the contents of STATUSBLOCK register
     */
    inline bool get_STATUSINT_BLOCK() volatile
    {
        return STATUSINT & (1u << 1u);
    }

    /**
     * Get STATUSINT's SRCT bit.
     *
     * OR of the contents of STATUSSRCTRAN register
     */
    inline bool get_STATUSINT_SRCT() volatile
    {
        return STATUSINT & (1u << 2u);
    }

    /**
     * Get STATUSINT's DSTT bit.
     *
     * OR of the contents of STATUSDSTTRAN register
     */
    inline bool get_STATUSINT_DSTT() volatile
    {
        return STATUSINT & (1u << 3u);
    }

    /**
     * Get STATUSINT's ERR bit.
     *
     * OR of the contents of STATUSERR register
     */
    inline bool get_STATUSINT_ERR() volatile
    {
        return STATUSINT & (1u << 4u);
    }

    /**
     * Get all of STATUSINT's bit fields.
     *
     * (read-only) Combined Interrupt Status Register
     */
    inline void get_STATUSINT(bool &TFR, bool &BLOCK, bool &SRCT, bool &DSTT,
                              bool &ERR) volatile
    {
        uint32_t curr = STATUSINT;

        TFR = curr & (1u << 0u);
        BLOCK = curr & (1u << 1u);
        SRCT = curr & (1u << 2u);
        DSTT = curr & (1u << 3u);
        ERR = curr & (1u << 4u);
    }

    /**
     * Get REQSRCREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline bool get_REQSRCREG_CH3() volatile
    {
        return REQSRCREG & (1u << 3u);
    }

    /**
     * Set REQSRCREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void set_REQSRCREG_CH3() volatile
    {
        REQSRCREG |= 1u << 3u;
    }

    /**
     * Clear REQSRCREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void clear_REQSRCREG_CH3() volatile
    {
        REQSRCREG &= ~(1u << 3u);
    }

    /**
     * Toggle REQSRCREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void toggle_REQSRCREG_CH3() volatile
    {
        REQSRCREG ^= 1u << 3u;
    }

    /**
     * Get REQSRCREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline bool get_REQSRCREG_CH2() volatile
    {
        return REQSRCREG & (1u << 2u);
    }

    /**
     * Set REQSRCREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void set_REQSRCREG_CH2() volatile
    {
        REQSRCREG |= 1u << 2u;
    }

    /**
     * Clear REQSRCREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void clear_REQSRCREG_CH2() volatile
    {
        REQSRCREG &= ~(1u << 2u);
    }

    /**
     * Toggle REQSRCREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void toggle_REQSRCREG_CH2() volatile
    {
        REQSRCREG ^= 1u << 2u;
    }

    /**
     * Get REQSRCREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline bool get_REQSRCREG_CH1() volatile
    {
        return REQSRCREG & (1u << 1u);
    }

    /**
     * Set REQSRCREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void set_REQSRCREG_CH1() volatile
    {
        REQSRCREG |= 1u << 1u;
    }

    /**
     * Clear REQSRCREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void clear_REQSRCREG_CH1() volatile
    {
        REQSRCREG &= ~(1u << 1u);
    }

    /**
     * Toggle REQSRCREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void toggle_REQSRCREG_CH1() volatile
    {
        REQSRCREG ^= 1u << 1u;
    }

    /**
     * Get REQSRCREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline bool get_REQSRCREG_CH0() volatile
    {
        return REQSRCREG & (1u << 0u);
    }

    /**
     * Set REQSRCREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void set_REQSRCREG_CH0() volatile
    {
        REQSRCREG |= 1u << 0u;
    }

    /**
     * Clear REQSRCREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void clear_REQSRCREG_CH0() volatile
    {
        REQSRCREG &= ~(1u << 0u);
    }

    /**
     * Toggle REQSRCREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void toggle_REQSRCREG_CH0() volatile
    {
        REQSRCREG ^= 1u << 0u;
    }

    /**
     * Set REQSRCREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void set_REQSRCREG_WE_CH3() volatile
    {
        REQSRCREG |= 1u << 11u;
    }

    /**
     * Clear REQSRCREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void clear_REQSRCREG_WE_CH3() volatile
    {
        REQSRCREG &= ~(1u << 11u);
    }

    /**
     * Toggle REQSRCREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void toggle_REQSRCREG_WE_CH3() volatile
    {
        REQSRCREG ^= 1u << 11u;
    }

    /**
     * Set REQSRCREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void set_REQSRCREG_WE_CH2() volatile
    {
        REQSRCREG |= 1u << 10u;
    }

    /**
     * Clear REQSRCREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void clear_REQSRCREG_WE_CH2() volatile
    {
        REQSRCREG &= ~(1u << 10u);
    }

    /**
     * Toggle REQSRCREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void toggle_REQSRCREG_WE_CH2() volatile
    {
        REQSRCREG ^= 1u << 10u;
    }

    /**
     * Set REQSRCREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void set_REQSRCREG_WE_CH1() volatile
    {
        REQSRCREG |= 1u << 9u;
    }

    /**
     * Clear REQSRCREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void clear_REQSRCREG_WE_CH1() volatile
    {
        REQSRCREG &= ~(1u << 9u);
    }

    /**
     * Toggle REQSRCREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void toggle_REQSRCREG_WE_CH1() volatile
    {
        REQSRCREG ^= 1u << 9u;
    }

    /**
     * Set REQSRCREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void set_REQSRCREG_WE_CH0() volatile
    {
        REQSRCREG |= 1u << 8u;
    }

    /**
     * Clear REQSRCREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void clear_REQSRCREG_WE_CH0() volatile
    {
        REQSRCREG &= ~(1u << 8u);
    }

    /**
     * Toggle REQSRCREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void toggle_REQSRCREG_WE_CH0() volatile
    {
        REQSRCREG ^= 1u << 8u;
    }

    /**
     * Get all of REQSRCREG's bit fields.
     *
     * (read-write) Source Software Transaction Request Register
     */
    inline void get_REQSRCREG(bool &CH3, bool &CH2, bool &CH1,
                              bool &CH0) volatile
    {
        uint32_t curr = REQSRCREG;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Set all of REQSRCREG's bit fields.
     *
     * (read-write) Source Software Transaction Request Register
     */
    inline void set_REQSRCREG(bool CH3, bool CH2, bool CH1, bool CH0,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH3,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH2,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH1,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = REQSRCREG;

        curr &= ~(0b1u << 3u);
        curr |= (CH3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0 & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        REQSRCREG = curr;
    }

    /**
     * Get REQDSTREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline bool get_REQDSTREG_CH3() volatile
    {
        return REQDSTREG & (1u << 3u);
    }

    /**
     * Set REQDSTREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void set_REQDSTREG_CH3() volatile
    {
        REQDSTREG |= 1u << 3u;
    }

    /**
     * Clear REQDSTREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void clear_REQDSTREG_CH3() volatile
    {
        REQDSTREG &= ~(1u << 3u);
    }

    /**
     * Toggle REQDSTREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void toggle_REQDSTREG_CH3() volatile
    {
        REQDSTREG ^= 1u << 3u;
    }

    /**
     * Get REQDSTREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline bool get_REQDSTREG_CH2() volatile
    {
        return REQDSTREG & (1u << 2u);
    }

    /**
     * Set REQDSTREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void set_REQDSTREG_CH2() volatile
    {
        REQDSTREG |= 1u << 2u;
    }

    /**
     * Clear REQDSTREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void clear_REQDSTREG_CH2() volatile
    {
        REQDSTREG &= ~(1u << 2u);
    }

    /**
     * Toggle REQDSTREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void toggle_REQDSTREG_CH2() volatile
    {
        REQDSTREG ^= 1u << 2u;
    }

    /**
     * Get REQDSTREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline bool get_REQDSTREG_CH1() volatile
    {
        return REQDSTREG & (1u << 1u);
    }

    /**
     * Set REQDSTREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void set_REQDSTREG_CH1() volatile
    {
        REQDSTREG |= 1u << 1u;
    }

    /**
     * Clear REQDSTREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void clear_REQDSTREG_CH1() volatile
    {
        REQDSTREG &= ~(1u << 1u);
    }

    /**
     * Toggle REQDSTREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void toggle_REQDSTREG_CH1() volatile
    {
        REQDSTREG ^= 1u << 1u;
    }

    /**
     * Get REQDSTREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline bool get_REQDSTREG_CH0() volatile
    {
        return REQDSTREG & (1u << 0u);
    }

    /**
     * Set REQDSTREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void set_REQDSTREG_CH0() volatile
    {
        REQDSTREG |= 1u << 0u;
    }

    /**
     * Clear REQDSTREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void clear_REQDSTREG_CH0() volatile
    {
        REQDSTREG &= ~(1u << 0u);
    }

    /**
     * Toggle REQDSTREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void toggle_REQDSTREG_CH0() volatile
    {
        REQDSTREG ^= 1u << 0u;
    }

    /**
     * Set REQDSTREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void set_REQDSTREG_WE_CH3() volatile
    {
        REQDSTREG |= 1u << 11u;
    }

    /**
     * Clear REQDSTREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void clear_REQDSTREG_WE_CH3() volatile
    {
        REQDSTREG &= ~(1u << 11u);
    }

    /**
     * Toggle REQDSTREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void toggle_REQDSTREG_WE_CH3() volatile
    {
        REQDSTREG ^= 1u << 11u;
    }

    /**
     * Set REQDSTREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void set_REQDSTREG_WE_CH2() volatile
    {
        REQDSTREG |= 1u << 10u;
    }

    /**
     * Clear REQDSTREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void clear_REQDSTREG_WE_CH2() volatile
    {
        REQDSTREG &= ~(1u << 10u);
    }

    /**
     * Toggle REQDSTREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void toggle_REQDSTREG_WE_CH2() volatile
    {
        REQDSTREG ^= 1u << 10u;
    }

    /**
     * Set REQDSTREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void set_REQDSTREG_WE_CH1() volatile
    {
        REQDSTREG |= 1u << 9u;
    }

    /**
     * Clear REQDSTREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void clear_REQDSTREG_WE_CH1() volatile
    {
        REQDSTREG &= ~(1u << 9u);
    }

    /**
     * Toggle REQDSTREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void toggle_REQDSTREG_WE_CH1() volatile
    {
        REQDSTREG ^= 1u << 9u;
    }

    /**
     * Set REQDSTREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void set_REQDSTREG_WE_CH0() volatile
    {
        REQDSTREG |= 1u << 8u;
    }

    /**
     * Clear REQDSTREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void clear_REQDSTREG_WE_CH0() volatile
    {
        REQDSTREG &= ~(1u << 8u);
    }

    /**
     * Toggle REQDSTREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void toggle_REQDSTREG_WE_CH0() volatile
    {
        REQDSTREG ^= 1u << 8u;
    }

    /**
     * Get all of REQDSTREG's bit fields.
     *
     * (read-write) Destination Software Transaction Request Register
     */
    inline void get_REQDSTREG(bool &CH3, bool &CH2, bool &CH1,
                              bool &CH0) volatile
    {
        uint32_t curr = REQDSTREG;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Set all of REQDSTREG's bit fields.
     *
     * (read-write) Destination Software Transaction Request Register
     */
    inline void set_REQDSTREG(bool CH3, bool CH2, bool CH1, bool CH0,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH3,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH2,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH1,
                              GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = REQDSTREG;

        curr &= ~(0b1u << 3u);
        curr |= (CH3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0 & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        REQDSTREG = curr;
    }

    /**
     * Get SGLREQSRCREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline bool get_SGLREQSRCREG_CH3() volatile
    {
        return SGLREQSRCREG & (1u << 3u);
    }

    /**
     * Set SGLREQSRCREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void set_SGLREQSRCREG_CH3() volatile
    {
        SGLREQSRCREG |= 1u << 3u;
    }

    /**
     * Clear SGLREQSRCREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void clear_SGLREQSRCREG_CH3() volatile
    {
        SGLREQSRCREG &= ~(1u << 3u);
    }

    /**
     * Toggle SGLREQSRCREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void toggle_SGLREQSRCREG_CH3() volatile
    {
        SGLREQSRCREG ^= 1u << 3u;
    }

    /**
     * Get SGLREQSRCREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline bool get_SGLREQSRCREG_CH2() volatile
    {
        return SGLREQSRCREG & (1u << 2u);
    }

    /**
     * Set SGLREQSRCREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void set_SGLREQSRCREG_CH2() volatile
    {
        SGLREQSRCREG |= 1u << 2u;
    }

    /**
     * Clear SGLREQSRCREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void clear_SGLREQSRCREG_CH2() volatile
    {
        SGLREQSRCREG &= ~(1u << 2u);
    }

    /**
     * Toggle SGLREQSRCREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void toggle_SGLREQSRCREG_CH2() volatile
    {
        SGLREQSRCREG ^= 1u << 2u;
    }

    /**
     * Get SGLREQSRCREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline bool get_SGLREQSRCREG_CH1() volatile
    {
        return SGLREQSRCREG & (1u << 1u);
    }

    /**
     * Set SGLREQSRCREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void set_SGLREQSRCREG_CH1() volatile
    {
        SGLREQSRCREG |= 1u << 1u;
    }

    /**
     * Clear SGLREQSRCREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void clear_SGLREQSRCREG_CH1() volatile
    {
        SGLREQSRCREG &= ~(1u << 1u);
    }

    /**
     * Toggle SGLREQSRCREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void toggle_SGLREQSRCREG_CH1() volatile
    {
        SGLREQSRCREG ^= 1u << 1u;
    }

    /**
     * Get SGLREQSRCREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline bool get_SGLREQSRCREG_CH0() volatile
    {
        return SGLREQSRCREG & (1u << 0u);
    }

    /**
     * Set SGLREQSRCREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void set_SGLREQSRCREG_CH0() volatile
    {
        SGLREQSRCREG |= 1u << 0u;
    }

    /**
     * Clear SGLREQSRCREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void clear_SGLREQSRCREG_CH0() volatile
    {
        SGLREQSRCREG &= ~(1u << 0u);
    }

    /**
     * Toggle SGLREQSRCREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void toggle_SGLREQSRCREG_CH0() volatile
    {
        SGLREQSRCREG ^= 1u << 0u;
    }

    /**
     * Set SGLREQSRCREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void set_SGLREQSRCREG_WE_CH3() volatile
    {
        SGLREQSRCREG |= 1u << 11u;
    }

    /**
     * Clear SGLREQSRCREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void clear_SGLREQSRCREG_WE_CH3() volatile
    {
        SGLREQSRCREG &= ~(1u << 11u);
    }

    /**
     * Toggle SGLREQSRCREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void toggle_SGLREQSRCREG_WE_CH3() volatile
    {
        SGLREQSRCREG ^= 1u << 11u;
    }

    /**
     * Set SGLREQSRCREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void set_SGLREQSRCREG_WE_CH2() volatile
    {
        SGLREQSRCREG |= 1u << 10u;
    }

    /**
     * Clear SGLREQSRCREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void clear_SGLREQSRCREG_WE_CH2() volatile
    {
        SGLREQSRCREG &= ~(1u << 10u);
    }

    /**
     * Toggle SGLREQSRCREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void toggle_SGLREQSRCREG_WE_CH2() volatile
    {
        SGLREQSRCREG ^= 1u << 10u;
    }

    /**
     * Set SGLREQSRCREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void set_SGLREQSRCREG_WE_CH1() volatile
    {
        SGLREQSRCREG |= 1u << 9u;
    }

    /**
     * Clear SGLREQSRCREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void clear_SGLREQSRCREG_WE_CH1() volatile
    {
        SGLREQSRCREG &= ~(1u << 9u);
    }

    /**
     * Toggle SGLREQSRCREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void toggle_SGLREQSRCREG_WE_CH1() volatile
    {
        SGLREQSRCREG ^= 1u << 9u;
    }

    /**
     * Set SGLREQSRCREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void set_SGLREQSRCREG_WE_CH0() volatile
    {
        SGLREQSRCREG |= 1u << 8u;
    }

    /**
     * Clear SGLREQSRCREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void clear_SGLREQSRCREG_WE_CH0() volatile
    {
        SGLREQSRCREG &= ~(1u << 8u);
    }

    /**
     * Toggle SGLREQSRCREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void toggle_SGLREQSRCREG_WE_CH0() volatile
    {
        SGLREQSRCREG ^= 1u << 8u;
    }

    /**
     * Get all of SGLREQSRCREG's bit fields.
     *
     * (read-write) Single Source Transaction Request Register
     */
    inline void get_SGLREQSRCREG(bool &CH3, bool &CH2, bool &CH1,
                                 bool &CH0) volatile
    {
        uint32_t curr = SGLREQSRCREG;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Set all of SGLREQSRCREG's bit fields.
     *
     * (read-write) Single Source Transaction Request Register
     */
    inline void set_SGLREQSRCREG(bool CH3, bool CH2, bool CH1, bool CH0,
                                 GPDMA1_MASKTFR_WE_CH3 WE_CH3,
                                 GPDMA1_MASKTFR_WE_CH3 WE_CH2,
                                 GPDMA1_MASKTFR_WE_CH3 WE_CH1,
                                 GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = SGLREQSRCREG;

        curr &= ~(0b1u << 3u);
        curr |= (CH3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0 & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        SGLREQSRCREG = curr;
    }

    /**
     * Get SGLREQDSTREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline bool get_SGLREQDSTREG_CH3() volatile
    {
        return SGLREQDSTREG & (1u << 3u);
    }

    /**
     * Set SGLREQDSTREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void set_SGLREQDSTREG_CH3() volatile
    {
        SGLREQDSTREG |= 1u << 3u;
    }

    /**
     * Clear SGLREQDSTREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void clear_SGLREQDSTREG_CH3() volatile
    {
        SGLREQDSTREG &= ~(1u << 3u);
    }

    /**
     * Toggle SGLREQDSTREG's CH3 bit.
     *
     * Source request for channel 3
     */
    inline void toggle_SGLREQDSTREG_CH3() volatile
    {
        SGLREQDSTREG ^= 1u << 3u;
    }

    /**
     * Get SGLREQDSTREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline bool get_SGLREQDSTREG_CH2() volatile
    {
        return SGLREQDSTREG & (1u << 2u);
    }

    /**
     * Set SGLREQDSTREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void set_SGLREQDSTREG_CH2() volatile
    {
        SGLREQDSTREG |= 1u << 2u;
    }

    /**
     * Clear SGLREQDSTREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void clear_SGLREQDSTREG_CH2() volatile
    {
        SGLREQDSTREG &= ~(1u << 2u);
    }

    /**
     * Toggle SGLREQDSTREG's CH2 bit.
     *
     * Source request for channel 2
     */
    inline void toggle_SGLREQDSTREG_CH2() volatile
    {
        SGLREQDSTREG ^= 1u << 2u;
    }

    /**
     * Get SGLREQDSTREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline bool get_SGLREQDSTREG_CH1() volatile
    {
        return SGLREQDSTREG & (1u << 1u);
    }

    /**
     * Set SGLREQDSTREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void set_SGLREQDSTREG_CH1() volatile
    {
        SGLREQDSTREG |= 1u << 1u;
    }

    /**
     * Clear SGLREQDSTREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void clear_SGLREQDSTREG_CH1() volatile
    {
        SGLREQDSTREG &= ~(1u << 1u);
    }

    /**
     * Toggle SGLREQDSTREG's CH1 bit.
     *
     * Source request for channel 1
     */
    inline void toggle_SGLREQDSTREG_CH1() volatile
    {
        SGLREQDSTREG ^= 1u << 1u;
    }

    /**
     * Get SGLREQDSTREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline bool get_SGLREQDSTREG_CH0() volatile
    {
        return SGLREQDSTREG & (1u << 0u);
    }

    /**
     * Set SGLREQDSTREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void set_SGLREQDSTREG_CH0() volatile
    {
        SGLREQDSTREG |= 1u << 0u;
    }

    /**
     * Clear SGLREQDSTREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void clear_SGLREQDSTREG_CH0() volatile
    {
        SGLREQDSTREG &= ~(1u << 0u);
    }

    /**
     * Toggle SGLREQDSTREG's CH0 bit.
     *
     * Source request for channel 0
     */
    inline void toggle_SGLREQDSTREG_CH0() volatile
    {
        SGLREQDSTREG ^= 1u << 0u;
    }

    /**
     * Set SGLREQDSTREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void set_SGLREQDSTREG_WE_CH3() volatile
    {
        SGLREQDSTREG |= 1u << 11u;
    }

    /**
     * Clear SGLREQDSTREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void clear_SGLREQDSTREG_WE_CH3() volatile
    {
        SGLREQDSTREG &= ~(1u << 11u);
    }

    /**
     * Toggle SGLREQDSTREG's WE_CH3 bit.
     *
     * Source request write enable for channel 3
     */
    inline void toggle_SGLREQDSTREG_WE_CH3() volatile
    {
        SGLREQDSTREG ^= 1u << 11u;
    }

    /**
     * Set SGLREQDSTREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void set_SGLREQDSTREG_WE_CH2() volatile
    {
        SGLREQDSTREG |= 1u << 10u;
    }

    /**
     * Clear SGLREQDSTREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void clear_SGLREQDSTREG_WE_CH2() volatile
    {
        SGLREQDSTREG &= ~(1u << 10u);
    }

    /**
     * Toggle SGLREQDSTREG's WE_CH2 bit.
     *
     * Source request write enable for channel 2
     */
    inline void toggle_SGLREQDSTREG_WE_CH2() volatile
    {
        SGLREQDSTREG ^= 1u << 10u;
    }

    /**
     * Set SGLREQDSTREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void set_SGLREQDSTREG_WE_CH1() volatile
    {
        SGLREQDSTREG |= 1u << 9u;
    }

    /**
     * Clear SGLREQDSTREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void clear_SGLREQDSTREG_WE_CH1() volatile
    {
        SGLREQDSTREG &= ~(1u << 9u);
    }

    /**
     * Toggle SGLREQDSTREG's WE_CH1 bit.
     *
     * Source request write enable for channel 1
     */
    inline void toggle_SGLREQDSTREG_WE_CH1() volatile
    {
        SGLREQDSTREG ^= 1u << 9u;
    }

    /**
     * Set SGLREQDSTREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void set_SGLREQDSTREG_WE_CH0() volatile
    {
        SGLREQDSTREG |= 1u << 8u;
    }

    /**
     * Clear SGLREQDSTREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void clear_SGLREQDSTREG_WE_CH0() volatile
    {
        SGLREQDSTREG &= ~(1u << 8u);
    }

    /**
     * Toggle SGLREQDSTREG's WE_CH0 bit.
     *
     * Source request write enable for channel 0
     */
    inline void toggle_SGLREQDSTREG_WE_CH0() volatile
    {
        SGLREQDSTREG ^= 1u << 8u;
    }

    /**
     * Get all of SGLREQDSTREG's bit fields.
     *
     * (read-write) Single Destination Transaction Request Register
     */
    inline void get_SGLREQDSTREG(bool &CH3, bool &CH2, bool &CH1,
                                 bool &CH0) volatile
    {
        uint32_t curr = SGLREQDSTREG;

        CH3 = curr & (1u << 3u);
        CH2 = curr & (1u << 2u);
        CH1 = curr & (1u << 1u);
        CH0 = curr & (1u << 0u);
    }

    /**
     * Set all of SGLREQDSTREG's bit fields.
     *
     * (read-write) Single Destination Transaction Request Register
     */
    inline void set_SGLREQDSTREG(bool CH3, bool CH2, bool CH1, bool CH0,
                                 GPDMA1_MASKTFR_WE_CH3 WE_CH3,
                                 GPDMA1_MASKTFR_WE_CH3 WE_CH2,
                                 GPDMA1_MASKTFR_WE_CH3 WE_CH1,
                                 GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = SGLREQDSTREG;

        curr &= ~(0b1u << 3u);
        curr |= (CH3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CH2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CH1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CH0 & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        SGLREQDSTREG = curr;
    }

    /**
     * Get LSTSRCREG's CH3 bit.
     *
     * Source last request for channel 3
     */
    inline GPDMA1_LSTSRCREG_CH3 get_LSTSRCREG_CH3() volatile
    {
        return GPDMA1_LSTSRCREG_CH3(LSTSRCREG & (1u << 3u));
    }

    /**
     * Set LSTSRCREG's CH3 bit.
     *
     * Source last request for channel 3
     */
    inline void set_LSTSRCREG_CH3() volatile
    {
        LSTSRCREG |= 1u << 3u;
    }

    /**
     * Clear LSTSRCREG's CH3 bit.
     *
     * Source last request for channel 3
     */
    inline void clear_LSTSRCREG_CH3() volatile
    {
        LSTSRCREG &= ~(1u << 3u);
    }

    /**
     * Toggle LSTSRCREG's CH3 bit.
     *
     * Source last request for channel 3
     */
    inline void toggle_LSTSRCREG_CH3() volatile
    {
        LSTSRCREG ^= 1u << 3u;
    }

    /**
     * Get LSTSRCREG's CH2 bit.
     *
     * Source last request for channel 2
     */
    inline GPDMA1_LSTSRCREG_CH3 get_LSTSRCREG_CH2() volatile
    {
        return GPDMA1_LSTSRCREG_CH3(LSTSRCREG & (1u << 2u));
    }

    /**
     * Set LSTSRCREG's CH2 bit.
     *
     * Source last request for channel 2
     */
    inline void set_LSTSRCREG_CH2() volatile
    {
        LSTSRCREG |= 1u << 2u;
    }

    /**
     * Clear LSTSRCREG's CH2 bit.
     *
     * Source last request for channel 2
     */
    inline void clear_LSTSRCREG_CH2() volatile
    {
        LSTSRCREG &= ~(1u << 2u);
    }

    /**
     * Toggle LSTSRCREG's CH2 bit.
     *
     * Source last request for channel 2
     */
    inline void toggle_LSTSRCREG_CH2() volatile
    {
        LSTSRCREG ^= 1u << 2u;
    }

    /**
     * Get LSTSRCREG's CH1 bit.
     *
     * Source last request for channel 1
     */
    inline GPDMA1_LSTSRCREG_CH3 get_LSTSRCREG_CH1() volatile
    {
        return GPDMA1_LSTSRCREG_CH3(LSTSRCREG & (1u << 1u));
    }

    /**
     * Set LSTSRCREG's CH1 bit.
     *
     * Source last request for channel 1
     */
    inline void set_LSTSRCREG_CH1() volatile
    {
        LSTSRCREG |= 1u << 1u;
    }

    /**
     * Clear LSTSRCREG's CH1 bit.
     *
     * Source last request for channel 1
     */
    inline void clear_LSTSRCREG_CH1() volatile
    {
        LSTSRCREG &= ~(1u << 1u);
    }

    /**
     * Toggle LSTSRCREG's CH1 bit.
     *
     * Source last request for channel 1
     */
    inline void toggle_LSTSRCREG_CH1() volatile
    {
        LSTSRCREG ^= 1u << 1u;
    }

    /**
     * Get LSTSRCREG's CH0 bit.
     *
     * Source last request for channel 0
     */
    inline GPDMA1_LSTSRCREG_CH3 get_LSTSRCREG_CH0() volatile
    {
        return GPDMA1_LSTSRCREG_CH3(LSTSRCREG & (1u << 0u));
    }

    /**
     * Set LSTSRCREG's CH0 bit.
     *
     * Source last request for channel 0
     */
    inline void set_LSTSRCREG_CH0() volatile
    {
        LSTSRCREG |= 1u << 0u;
    }

    /**
     * Clear LSTSRCREG's CH0 bit.
     *
     * Source last request for channel 0
     */
    inline void clear_LSTSRCREG_CH0() volatile
    {
        LSTSRCREG &= ~(1u << 0u);
    }

    /**
     * Toggle LSTSRCREG's CH0 bit.
     *
     * Source last request for channel 0
     */
    inline void toggle_LSTSRCREG_CH0() volatile
    {
        LSTSRCREG ^= 1u << 0u;
    }

    /**
     * Set LSTSRCREG's WE_CH3 bit.
     *
     * Source last transaction request write enable for channel 3
     */
    inline void set_LSTSRCREG_WE_CH3() volatile
    {
        LSTSRCREG |= 1u << 11u;
    }

    /**
     * Clear LSTSRCREG's WE_CH3 bit.
     *
     * Source last transaction request write enable for channel 3
     */
    inline void clear_LSTSRCREG_WE_CH3() volatile
    {
        LSTSRCREG &= ~(1u << 11u);
    }

    /**
     * Toggle LSTSRCREG's WE_CH3 bit.
     *
     * Source last transaction request write enable for channel 3
     */
    inline void toggle_LSTSRCREG_WE_CH3() volatile
    {
        LSTSRCREG ^= 1u << 11u;
    }

    /**
     * Set LSTSRCREG's WE_CH2 bit.
     *
     * Source last transaction request write enable for channel 2
     */
    inline void set_LSTSRCREG_WE_CH2() volatile
    {
        LSTSRCREG |= 1u << 10u;
    }

    /**
     * Clear LSTSRCREG's WE_CH2 bit.
     *
     * Source last transaction request write enable for channel 2
     */
    inline void clear_LSTSRCREG_WE_CH2() volatile
    {
        LSTSRCREG &= ~(1u << 10u);
    }

    /**
     * Toggle LSTSRCREG's WE_CH2 bit.
     *
     * Source last transaction request write enable for channel 2
     */
    inline void toggle_LSTSRCREG_WE_CH2() volatile
    {
        LSTSRCREG ^= 1u << 10u;
    }

    /**
     * Set LSTSRCREG's WE_CH1 bit.
     *
     * Source last transaction request write enable for channel 1
     */
    inline void set_LSTSRCREG_WE_CH1() volatile
    {
        LSTSRCREG |= 1u << 9u;
    }

    /**
     * Clear LSTSRCREG's WE_CH1 bit.
     *
     * Source last transaction request write enable for channel 1
     */
    inline void clear_LSTSRCREG_WE_CH1() volatile
    {
        LSTSRCREG &= ~(1u << 9u);
    }

    /**
     * Toggle LSTSRCREG's WE_CH1 bit.
     *
     * Source last transaction request write enable for channel 1
     */
    inline void toggle_LSTSRCREG_WE_CH1() volatile
    {
        LSTSRCREG ^= 1u << 9u;
    }

    /**
     * Set LSTSRCREG's WE_CH0 bit.
     *
     * Source last transaction request write enable for channel 0
     */
    inline void set_LSTSRCREG_WE_CH0() volatile
    {
        LSTSRCREG |= 1u << 8u;
    }

    /**
     * Clear LSTSRCREG's WE_CH0 bit.
     *
     * Source last transaction request write enable for channel 0
     */
    inline void clear_LSTSRCREG_WE_CH0() volatile
    {
        LSTSRCREG &= ~(1u << 8u);
    }

    /**
     * Toggle LSTSRCREG's WE_CH0 bit.
     *
     * Source last transaction request write enable for channel 0
     */
    inline void toggle_LSTSRCREG_WE_CH0() volatile
    {
        LSTSRCREG ^= 1u << 8u;
    }

    /**
     * Get all of LSTSRCREG's bit fields.
     *
     * (read-write) Last Source Transaction Request Register
     */
    inline void get_LSTSRCREG(GPDMA1_LSTSRCREG_CH3 &CH3,
                              GPDMA1_LSTSRCREG_CH3 &CH2,
                              GPDMA1_LSTSRCREG_CH3 &CH1,
                              GPDMA1_LSTSRCREG_CH3 &CH0) volatile
    {
        uint32_t curr = LSTSRCREG;

        CH3 = GPDMA1_LSTSRCREG_CH3(curr & (1u << 3u));
        CH2 = GPDMA1_LSTSRCREG_CH3(curr & (1u << 2u));
        CH1 = GPDMA1_LSTSRCREG_CH3(curr & (1u << 1u));
        CH0 = GPDMA1_LSTSRCREG_CH3(curr & (1u << 0u));
    }

    /**
     * Set all of LSTSRCREG's bit fields.
     *
     * (read-write) Last Source Transaction Request Register
     */
    inline void set_LSTSRCREG(
        GPDMA1_LSTSRCREG_CH3 CH3, GPDMA1_LSTSRCREG_CH3 CH2,
        GPDMA1_LSTSRCREG_CH3 CH1, GPDMA1_LSTSRCREG_CH3 CH0,
        GPDMA1_MASKTFR_WE_CH3 WE_CH3, GPDMA1_MASKTFR_WE_CH3 WE_CH2,
        GPDMA1_MASKTFR_WE_CH3 WE_CH1, GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = LSTSRCREG;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        LSTSRCREG = curr;
    }

    /**
     * Get LSTDSTREG's CH3 bit.
     *
     * Destination last request for channel 3
     */
    inline GPDMA1_LSTSRCREG_CH3 get_LSTDSTREG_CH3() volatile
    {
        return GPDMA1_LSTSRCREG_CH3(LSTDSTREG & (1u << 3u));
    }

    /**
     * Set LSTDSTREG's CH3 bit.
     *
     * Destination last request for channel 3
     */
    inline void set_LSTDSTREG_CH3() volatile
    {
        LSTDSTREG |= 1u << 3u;
    }

    /**
     * Clear LSTDSTREG's CH3 bit.
     *
     * Destination last request for channel 3
     */
    inline void clear_LSTDSTREG_CH3() volatile
    {
        LSTDSTREG &= ~(1u << 3u);
    }

    /**
     * Toggle LSTDSTREG's CH3 bit.
     *
     * Destination last request for channel 3
     */
    inline void toggle_LSTDSTREG_CH3() volatile
    {
        LSTDSTREG ^= 1u << 3u;
    }

    /**
     * Get LSTDSTREG's CH2 bit.
     *
     * Destination last request for channel 2
     */
    inline GPDMA1_LSTSRCREG_CH3 get_LSTDSTREG_CH2() volatile
    {
        return GPDMA1_LSTSRCREG_CH3(LSTDSTREG & (1u << 2u));
    }

    /**
     * Set LSTDSTREG's CH2 bit.
     *
     * Destination last request for channel 2
     */
    inline void set_LSTDSTREG_CH2() volatile
    {
        LSTDSTREG |= 1u << 2u;
    }

    /**
     * Clear LSTDSTREG's CH2 bit.
     *
     * Destination last request for channel 2
     */
    inline void clear_LSTDSTREG_CH2() volatile
    {
        LSTDSTREG &= ~(1u << 2u);
    }

    /**
     * Toggle LSTDSTREG's CH2 bit.
     *
     * Destination last request for channel 2
     */
    inline void toggle_LSTDSTREG_CH2() volatile
    {
        LSTDSTREG ^= 1u << 2u;
    }

    /**
     * Get LSTDSTREG's CH1 bit.
     *
     * Destination last request for channel 1
     */
    inline GPDMA1_LSTSRCREG_CH3 get_LSTDSTREG_CH1() volatile
    {
        return GPDMA1_LSTSRCREG_CH3(LSTDSTREG & (1u << 1u));
    }

    /**
     * Set LSTDSTREG's CH1 bit.
     *
     * Destination last request for channel 1
     */
    inline void set_LSTDSTREG_CH1() volatile
    {
        LSTDSTREG |= 1u << 1u;
    }

    /**
     * Clear LSTDSTREG's CH1 bit.
     *
     * Destination last request for channel 1
     */
    inline void clear_LSTDSTREG_CH1() volatile
    {
        LSTDSTREG &= ~(1u << 1u);
    }

    /**
     * Toggle LSTDSTREG's CH1 bit.
     *
     * Destination last request for channel 1
     */
    inline void toggle_LSTDSTREG_CH1() volatile
    {
        LSTDSTREG ^= 1u << 1u;
    }

    /**
     * Get LSTDSTREG's CH0 bit.
     *
     * Destination last request for channel 0
     */
    inline GPDMA1_LSTSRCREG_CH3 get_LSTDSTREG_CH0() volatile
    {
        return GPDMA1_LSTSRCREG_CH3(LSTDSTREG & (1u << 0u));
    }

    /**
     * Set LSTDSTREG's CH0 bit.
     *
     * Destination last request for channel 0
     */
    inline void set_LSTDSTREG_CH0() volatile
    {
        LSTDSTREG |= 1u << 0u;
    }

    /**
     * Clear LSTDSTREG's CH0 bit.
     *
     * Destination last request for channel 0
     */
    inline void clear_LSTDSTREG_CH0() volatile
    {
        LSTDSTREG &= ~(1u << 0u);
    }

    /**
     * Toggle LSTDSTREG's CH0 bit.
     *
     * Destination last request for channel 0
     */
    inline void toggle_LSTDSTREG_CH0() volatile
    {
        LSTDSTREG ^= 1u << 0u;
    }

    /**
     * Set LSTDSTREG's WE_CH3 bit.
     *
     * Destination last transaction request write enable for channel 3
     */
    inline void set_LSTDSTREG_WE_CH3() volatile
    {
        LSTDSTREG |= 1u << 11u;
    }

    /**
     * Clear LSTDSTREG's WE_CH3 bit.
     *
     * Destination last transaction request write enable for channel 3
     */
    inline void clear_LSTDSTREG_WE_CH3() volatile
    {
        LSTDSTREG &= ~(1u << 11u);
    }

    /**
     * Toggle LSTDSTREG's WE_CH3 bit.
     *
     * Destination last transaction request write enable for channel 3
     */
    inline void toggle_LSTDSTREG_WE_CH3() volatile
    {
        LSTDSTREG ^= 1u << 11u;
    }

    /**
     * Set LSTDSTREG's WE_CH2 bit.
     *
     * Destination last transaction request write enable for channel 2
     */
    inline void set_LSTDSTREG_WE_CH2() volatile
    {
        LSTDSTREG |= 1u << 10u;
    }

    /**
     * Clear LSTDSTREG's WE_CH2 bit.
     *
     * Destination last transaction request write enable for channel 2
     */
    inline void clear_LSTDSTREG_WE_CH2() volatile
    {
        LSTDSTREG &= ~(1u << 10u);
    }

    /**
     * Toggle LSTDSTREG's WE_CH2 bit.
     *
     * Destination last transaction request write enable for channel 2
     */
    inline void toggle_LSTDSTREG_WE_CH2() volatile
    {
        LSTDSTREG ^= 1u << 10u;
    }

    /**
     * Set LSTDSTREG's WE_CH1 bit.
     *
     * Destination last transaction request write enable for channel 1
     */
    inline void set_LSTDSTREG_WE_CH1() volatile
    {
        LSTDSTREG |= 1u << 9u;
    }

    /**
     * Clear LSTDSTREG's WE_CH1 bit.
     *
     * Destination last transaction request write enable for channel 1
     */
    inline void clear_LSTDSTREG_WE_CH1() volatile
    {
        LSTDSTREG &= ~(1u << 9u);
    }

    /**
     * Toggle LSTDSTREG's WE_CH1 bit.
     *
     * Destination last transaction request write enable for channel 1
     */
    inline void toggle_LSTDSTREG_WE_CH1() volatile
    {
        LSTDSTREG ^= 1u << 9u;
    }

    /**
     * Set LSTDSTREG's WE_CH0 bit.
     *
     * Destination last transaction request write enable for channel 0
     */
    inline void set_LSTDSTREG_WE_CH0() volatile
    {
        LSTDSTREG |= 1u << 8u;
    }

    /**
     * Clear LSTDSTREG's WE_CH0 bit.
     *
     * Destination last transaction request write enable for channel 0
     */
    inline void clear_LSTDSTREG_WE_CH0() volatile
    {
        LSTDSTREG &= ~(1u << 8u);
    }

    /**
     * Toggle LSTDSTREG's WE_CH0 bit.
     *
     * Destination last transaction request write enable for channel 0
     */
    inline void toggle_LSTDSTREG_WE_CH0() volatile
    {
        LSTDSTREG ^= 1u << 8u;
    }

    /**
     * Get all of LSTDSTREG's bit fields.
     *
     * (read-write) Last Destination Transaction Request Register
     */
    inline void get_LSTDSTREG(GPDMA1_LSTSRCREG_CH3 &CH3,
                              GPDMA1_LSTSRCREG_CH3 &CH2,
                              GPDMA1_LSTSRCREG_CH3 &CH1,
                              GPDMA1_LSTSRCREG_CH3 &CH0) volatile
    {
        uint32_t curr = LSTDSTREG;

        CH3 = GPDMA1_LSTSRCREG_CH3(curr & (1u << 3u));
        CH2 = GPDMA1_LSTSRCREG_CH3(curr & (1u << 2u));
        CH1 = GPDMA1_LSTSRCREG_CH3(curr & (1u << 1u));
        CH0 = GPDMA1_LSTSRCREG_CH3(curr & (1u << 0u));
    }

    /**
     * Set all of LSTDSTREG's bit fields.
     *
     * (read-write) Last Destination Transaction Request Register
     */
    inline void set_LSTDSTREG(
        GPDMA1_LSTSRCREG_CH3 CH3, GPDMA1_LSTSRCREG_CH3 CH2,
        GPDMA1_LSTSRCREG_CH3 CH1, GPDMA1_LSTSRCREG_CH3 CH0,
        GPDMA1_MASKTFR_WE_CH3 WE_CH3, GPDMA1_MASKTFR_WE_CH3 WE_CH2,
        GPDMA1_MASKTFR_WE_CH3 WE_CH1, GPDMA1_MASKTFR_WE_CH3 WE_CH0) volatile
    {
        uint32_t curr = LSTDSTREG;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CH3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CH2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CH1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CH0) & 0b1u) << 0u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(WE_CH3) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(WE_CH2) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(WE_CH1) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(WE_CH0) & 0b1u) << 8u;

        LSTDSTREG = curr;
    }

    /**
     * Get DMACFGREG's DMA_EN bit.
     *
     * GPDMA Enable bit.
     */
    inline GPDMA1_MASKTFR_WE_CH3 get_DMACFGREG_DMA_EN() volatile
    {
        return GPDMA1_MASKTFR_WE_CH3(DMACFGREG & (1u << 0u));
    }

    /**
     * Set DMACFGREG's DMA_EN bit.
     *
     * GPDMA Enable bit.
     */
    inline void set_DMACFGREG_DMA_EN() volatile
    {
        DMACFGREG |= 1u << 0u;
    }

    /**
     * Clear DMACFGREG's DMA_EN bit.
     *
     * GPDMA Enable bit.
     */
    inline void clear_DMACFGREG_DMA_EN() volatile
    {
        DMACFGREG &= ~(1u << 0u);
    }

    /**
     * Toggle DMACFGREG's DMA_EN bit.
     *
     * GPDMA Enable bit.
     */
    inline void toggle_DMACFGREG_DMA_EN() volatile
    {
        DMACFGREG ^= 1u << 0u;
    }

    /**
     * Get CHENREG's CH field.
     *
     * Enables/Disables the channel
     */
    inline GPDMA1_CHENREG_CH get_CHENREG_CH() volatile
    {
        return GPDMA1_CHENREG_CH((CHENREG >> 0u) & 0b1111u);
    }

    /**
     * Set CHENREG's CH field.
     *
     * Enables/Disables the channel
     */
    inline void set_CHENREG_CH(GPDMA1_CHENREG_CH value) volatile
    {
        uint32_t curr = CHENREG;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CHENREG = curr;
    }

    /**
     * Set CHENREG's WE_CH field.
     *
     * Channel enable write enable
     */
    inline void set_CHENREG_WE_CH(uint8_t value) volatile
    {
        uint32_t curr = CHENREG;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        CHENREG = curr;
    }

    /**
     * Set all of CHENREG's bit fields.
     *
     * (read-write) GPDMA Channel Enable Register
     */
    inline void set_CHENREG(GPDMA1_CHENREG_CH CH, uint8_t WE_CH) volatile
    {
        uint32_t curr = CHENREG;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(CH) & 0b1111u) << 0u;
        curr &= ~(0b1111u << 8u);
        curr |= (WE_CH & 0b1111u) << 8u;

        CHENREG = curr;
    }

    /**
     * Get ID's VALUE field.
     *
     * Hardcoded GPDMA Peripheral ID
     */
    inline uint32_t get_ID_VALUE() volatile
    {
        return (ID >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get TYPE's VALUE field.
     *
     * Component Type
     */
    inline uint32_t get_TYPE_VALUE() volatile
    {
        return (TYPE >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get VERSION's VALUE field.
     *
     * Version number of the component
     */
    inline uint32_t get_VERSION_VALUE() volatile
    {
        return (VERSION >> 0u) & 0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(gpdma1) == gpdma1::size);

static volatile gpdma1 *const GPDMA1 = reinterpret_cast<gpdma1 *>(0x500182C0);

}; // namespace XMC4700
