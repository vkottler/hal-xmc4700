/**
 * \file
 * \brief Generated by ifgen (3.2.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Prefetch Unit
 */
struct [[gnu::packed]] pref
{
    /* Constant attributes. */
    static constexpr std::size_t size = 4; /*!< pref's size in bytes. */

    /* Fields. */
    uint32_t PCON; /*!< (read-write) Prefetch Configuration Register */

    /* Methods. */

    /**
     * Get PCON's DBYP bit.
     *
     * Data Buffer Bypass
     */
    inline bool get_PCON_DBYP() volatile
    {
        return PCON & (1u << 4u);
    }

    /**
     * Set PCON's DBYP bit.
     *
     * Data Buffer Bypass
     */
    inline void set_PCON_DBYP() volatile
    {
        PCON |= 1u << 4u;
    }

    /**
     * Clear PCON's DBYP bit.
     *
     * Data Buffer Bypass
     */
    inline void clear_PCON_DBYP() volatile
    {
        PCON &= ~(1u << 4u);
    }

    /**
     * Toggle PCON's DBYP bit.
     *
     * Data Buffer Bypass
     */
    inline void toggle_PCON_DBYP() volatile
    {
        PCON ^= 1u << 4u;
    }

    /**
     * Set PCON's IINV bit.
     *
     * Instruction Prefetch Buffer Invalidate
     */
    inline void set_PCON_IINV() volatile
    {
        PCON |= 1u << 1u;
    }

    /**
     * Clear PCON's IINV bit.
     *
     * Instruction Prefetch Buffer Invalidate
     */
    inline void clear_PCON_IINV() volatile
    {
        PCON &= ~(1u << 1u);
    }

    /**
     * Toggle PCON's IINV bit.
     *
     * Instruction Prefetch Buffer Invalidate
     */
    inline void toggle_PCON_IINV() volatile
    {
        PCON ^= 1u << 1u;
    }

    /**
     * Get PCON's IBYP bit.
     *
     * Instruction Prefetch Buffer Bypass
     */
    inline bool get_PCON_IBYP() volatile
    {
        return PCON & (1u << 0u);
    }

    /**
     * Set PCON's IBYP bit.
     *
     * Instruction Prefetch Buffer Bypass
     */
    inline void set_PCON_IBYP() volatile
    {
        PCON |= 1u << 0u;
    }

    /**
     * Clear PCON's IBYP bit.
     *
     * Instruction Prefetch Buffer Bypass
     */
    inline void clear_PCON_IBYP() volatile
    {
        PCON &= ~(1u << 0u);
    }

    /**
     * Toggle PCON's IBYP bit.
     *
     * Instruction Prefetch Buffer Bypass
     */
    inline void toggle_PCON_IBYP() volatile
    {
        PCON ^= 1u << 0u;
    }

    /**
     * Get all of PCON's bit fields.
     *
     * (read-write) Prefetch Configuration Register
     */
    inline void get_PCON(bool &DBYP, bool &IBYP) volatile
    {
        uint32_t curr = PCON;

        DBYP = curr & (1u << 4u);
        IBYP = curr & (1u << 0u);
    }

    /**
     * Set all of PCON's bit fields.
     *
     * (read-write) Prefetch Configuration Register
     */
    inline void set_PCON(bool DBYP, bool IINV, bool IBYP) volatile
    {
        uint32_t curr = PCON;

        curr &= ~(0b1u << 4u);
        curr |= (DBYP & 0b1u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (IINV & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (IBYP & 0b1u) << 0u;

        PCON = curr;
    }
};

static_assert(sizeof(pref) == pref::size);

static volatile pref *const PREF = reinterpret_cast<pref *>(0x58004000);

}; // namespace XMC4700
