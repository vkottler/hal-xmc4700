/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include "../enums/EBU_ADDRSEL0_ALTENAB.h"
#include "../enums/EBU_ADDRSEL0_REGENAB.h"
#include "../enums/EBU_ADDRSEL0_WPROT.h"
#include "../enums/EBU_ADDRSEL1_ALTENAB.h"
#include "../enums/EBU_ADDRSEL1_REGENAB.h"
#include "../enums/EBU_ADDRSEL1_WPROT.h"
#include "../enums/EBU_ADDRSEL2_ALTENAB.h"
#include "../enums/EBU_ADDRSEL2_REGENAB.h"
#include "../enums/EBU_ADDRSEL2_WPROT.h"
#include "../enums/EBU_ADDRSEL3_ALTENAB.h"
#include "../enums/EBU_ADDRSEL3_REGENAB.h"
#include "../enums/EBU_ADDRSEL3_WPROT.h"
#include "../enums/EBU_BUSRAP0_ADDRC.h"
#include "../enums/EBU_BUSRAP0_AHOLDC.h"
#include "../enums/EBU_BUSRAP0_CMDDELAY.h"
#include "../enums/EBU_BUSRAP0_EXTCLOCK.h"
#include "../enums/EBU_BUSRAP0_EXTDATA.h"
#include "../enums/EBU_BUSRAP0_RDDTACS.h"
#include "../enums/EBU_BUSRAP0_RDRECOVC.h"
#include "../enums/EBU_BUSRAP0_WAITRDC.h"
#include "../enums/EBU_BUSRAP1_ADDRC.h"
#include "../enums/EBU_BUSRAP1_AHOLDC.h"
#include "../enums/EBU_BUSRAP1_CMDDELAY.h"
#include "../enums/EBU_BUSRAP1_EXTCLOCK.h"
#include "../enums/EBU_BUSRAP1_EXTDATA.h"
#include "../enums/EBU_BUSRAP1_RDDTACS.h"
#include "../enums/EBU_BUSRAP1_RDRECOVC.h"
#include "../enums/EBU_BUSRAP1_WAITRDC.h"
#include "../enums/EBU_BUSRAP2_ADDRC.h"
#include "../enums/EBU_BUSRAP2_AHOLDC.h"
#include "../enums/EBU_BUSRAP2_CMDDELAY.h"
#include "../enums/EBU_BUSRAP2_EXTCLOCK.h"
#include "../enums/EBU_BUSRAP2_EXTDATA.h"
#include "../enums/EBU_BUSRAP2_RDDTACS.h"
#include "../enums/EBU_BUSRAP2_RDRECOVC.h"
#include "../enums/EBU_BUSRAP2_WAITRDC.h"
#include "../enums/EBU_BUSRAP3_ADDRC.h"
#include "../enums/EBU_BUSRAP3_AHOLDC.h"
#include "../enums/EBU_BUSRAP3_CMDDELAY.h"
#include "../enums/EBU_BUSRAP3_EXTCLOCK.h"
#include "../enums/EBU_BUSRAP3_EXTDATA.h"
#include "../enums/EBU_BUSRAP3_RDDTACS.h"
#include "../enums/EBU_BUSRAP3_RDRECOVC.h"
#include "../enums/EBU_BUSRAP3_WAITRDC.h"
#include "../enums/EBU_BUSRCON0_AAP.h"
#include "../enums/EBU_BUSRCON0_BCGEN.h"
#include "../enums/EBU_BUSRCON0_BFCMSEL.h"
#include "../enums/EBU_BUSRCON0_BFSSS.h"
#include "../enums/EBU_BUSRCON0_DBA.h"
#include "../enums/EBU_BUSRCON0_EBSE.h"
#include "../enums/EBU_BUSRCON0_ECSE.h"
#include "../enums/EBU_BUSRCON0_FBBMSEL.h"
#include "../enums/EBU_BUSRCON0_FDBKEN.h"
#include "../enums/EBU_BUSRCON0_FETBLEN.h"
#include "../enums/EBU_BUSRCON0_WAITINV.h"
#include "../enums/EBU_BUSRCON1_AAP.h"
#include "../enums/EBU_BUSRCON1_BCGEN.h"
#include "../enums/EBU_BUSRCON1_BFCMSEL.h"
#include "../enums/EBU_BUSRCON1_BFSSS.h"
#include "../enums/EBU_BUSRCON1_DBA.h"
#include "../enums/EBU_BUSRCON1_EBSE.h"
#include "../enums/EBU_BUSRCON1_ECSE.h"
#include "../enums/EBU_BUSRCON1_FBBMSEL.h"
#include "../enums/EBU_BUSRCON1_FDBKEN.h"
#include "../enums/EBU_BUSRCON1_FETBLEN.h"
#include "../enums/EBU_BUSRCON1_WAITINV.h"
#include "../enums/EBU_BUSRCON2_AAP.h"
#include "../enums/EBU_BUSRCON2_BCGEN.h"
#include "../enums/EBU_BUSRCON2_BFCMSEL.h"
#include "../enums/EBU_BUSRCON2_BFSSS.h"
#include "../enums/EBU_BUSRCON2_DBA.h"
#include "../enums/EBU_BUSRCON2_EBSE.h"
#include "../enums/EBU_BUSRCON2_ECSE.h"
#include "../enums/EBU_BUSRCON2_FBBMSEL.h"
#include "../enums/EBU_BUSRCON2_FDBKEN.h"
#include "../enums/EBU_BUSRCON2_FETBLEN.h"
#include "../enums/EBU_BUSRCON2_WAITINV.h"
#include "../enums/EBU_BUSRCON3_AAP.h"
#include "../enums/EBU_BUSRCON3_BCGEN.h"
#include "../enums/EBU_BUSRCON3_BFCMSEL.h"
#include "../enums/EBU_BUSRCON3_BFSSS.h"
#include "../enums/EBU_BUSRCON3_DBA.h"
#include "../enums/EBU_BUSRCON3_EBSE.h"
#include "../enums/EBU_BUSRCON3_ECSE.h"
#include "../enums/EBU_BUSRCON3_FBBMSEL.h"
#include "../enums/EBU_BUSRCON3_FDBKEN.h"
#include "../enums/EBU_BUSRCON3_FETBLEN.h"
#include "../enums/EBU_BUSRCON3_WAITINV.h"
#include "../enums/EBU_BUSWAP0_ADDRC.h"
#include "../enums/EBU_BUSWAP0_AHOLDC.h"
#include "../enums/EBU_BUSWAP0_CMDDELAY.h"
#include "../enums/EBU_BUSWAP0_DATAC.h"
#include "../enums/EBU_BUSWAP0_EXTCLOCK.h"
#include "../enums/EBU_BUSWAP0_EXTDATA.h"
#include "../enums/EBU_BUSWAP0_WAITWRC.h"
#include "../enums/EBU_BUSWAP0_WRDTACS.h"
#include "../enums/EBU_BUSWAP0_WRRECOVC.h"
#include "../enums/EBU_BUSWAP1_ADDRC.h"
#include "../enums/EBU_BUSWAP1_AHOLDC.h"
#include "../enums/EBU_BUSWAP1_CMDDELAY.h"
#include "../enums/EBU_BUSWAP1_DATAC.h"
#include "../enums/EBU_BUSWAP1_EXTCLOCK.h"
#include "../enums/EBU_BUSWAP1_EXTDATA.h"
#include "../enums/EBU_BUSWAP1_WAITWRC.h"
#include "../enums/EBU_BUSWAP1_WRDTACS.h"
#include "../enums/EBU_BUSWAP1_WRRECOVC.h"
#include "../enums/EBU_BUSWAP2_ADDRC.h"
#include "../enums/EBU_BUSWAP2_AHOLDC.h"
#include "../enums/EBU_BUSWAP2_CMDDELAY.h"
#include "../enums/EBU_BUSWAP2_DATAC.h"
#include "../enums/EBU_BUSWAP2_EXTCLOCK.h"
#include "../enums/EBU_BUSWAP2_EXTDATA.h"
#include "../enums/EBU_BUSWAP2_WAITWRC.h"
#include "../enums/EBU_BUSWAP2_WRDTACS.h"
#include "../enums/EBU_BUSWAP2_WRRECOVC.h"
#include "../enums/EBU_BUSWAP3_ADDRC.h"
#include "../enums/EBU_BUSWAP3_AHOLDC.h"
#include "../enums/EBU_BUSWAP3_CMDDELAY.h"
#include "../enums/EBU_BUSWAP3_DATAC.h"
#include "../enums/EBU_BUSWAP3_EXTCLOCK.h"
#include "../enums/EBU_BUSWAP3_EXTDATA.h"
#include "../enums/EBU_BUSWAP3_WAITWRC.h"
#include "../enums/EBU_BUSWAP3_WRDTACS.h"
#include "../enums/EBU_BUSWAP3_WRRECOVC.h"
#include "../enums/EBU_BUSWCON0_AAP.h"
#include "../enums/EBU_BUSWCON0_BCGEN.h"
#include "../enums/EBU_BUSWCON0_EBSE.h"
#include "../enums/EBU_BUSWCON0_ECSE.h"
#include "../enums/EBU_BUSWCON0_FBBMSEL.h"
#include "../enums/EBU_BUSWCON0_FETBLEN.h"
#include "../enums/EBU_BUSWCON0_LOCKCS.h"
#include "../enums/EBU_BUSWCON0_WAITINV.h"
#include "../enums/EBU_BUSWCON1_AAP.h"
#include "../enums/EBU_BUSWCON1_BCGEN.h"
#include "../enums/EBU_BUSWCON1_EBSE.h"
#include "../enums/EBU_BUSWCON1_ECSE.h"
#include "../enums/EBU_BUSWCON1_FBBMSEL.h"
#include "../enums/EBU_BUSWCON1_FETBLEN.h"
#include "../enums/EBU_BUSWCON1_LOCKCS.h"
#include "../enums/EBU_BUSWCON1_WAITINV.h"
#include "../enums/EBU_BUSWCON2_AAP.h"
#include "../enums/EBU_BUSWCON2_BCGEN.h"
#include "../enums/EBU_BUSWCON2_EBSE.h"
#include "../enums/EBU_BUSWCON2_ECSE.h"
#include "../enums/EBU_BUSWCON2_FBBMSEL.h"
#include "../enums/EBU_BUSWCON2_FETBLEN.h"
#include "../enums/EBU_BUSWCON2_LOCKCS.h"
#include "../enums/EBU_BUSWCON2_WAITINV.h"
#include "../enums/EBU_BUSWCON3_AAP.h"
#include "../enums/EBU_BUSWCON3_BCGEN.h"
#include "../enums/EBU_BUSWCON3_EBSE.h"
#include "../enums/EBU_BUSWCON3_ECSE.h"
#include "../enums/EBU_BUSWCON3_FBBMSEL.h"
#include "../enums/EBU_BUSWCON3_FETBLEN.h"
#include "../enums/EBU_BUSWCON3_LOCKCS.h"
#include "../enums/EBU_BUSWCON3_WAITINV.h"
#include "../enums/EBU_CLC_DISR.h"
#include "../enums/EBU_CLC_DISS.h"
#include "../enums/EBU_CLC_DIV2.h"
#include "../enums/EBU_CLC_DIV2ACK.h"
#include "../enums/EBU_CLC_EBUDIV.h"
#include "../enums/EBU_CLC_EBUDIVACK.h"
#include "../enums/EBU_CLC_SYNC.h"
#include "../enums/EBU_CLC_SYNCACK.h"
#include "../enums/EBU_MODCON_ALE.h"
#include "../enums/EBU_MODCON_ARBMODE.h"
#include "../enums/EBU_MODCON_ARBSYNC.h"
#include "../enums/EBU_MODCON_EXTLOCK.h"
#include "../enums/EBU_MODCON_SDTRI.h"
#include "../enums/EBU_MODCON_TIMEOUTC.h"
#include "../enums/EBU_SDRMCON_AWIDTH.h"
#include "../enums/EBU_SDRMCON_BANKM.h"
#include "../enums/EBU_SDRMCON_CLKDIS.h"
#include "../enums/EBU_SDRMCON_PWR_MODE.h"
#include "../enums/EBU_SDRMCON_ROWM.h"
#include "../enums/EBU_SDRMCON_SDCMSEL.h"
#include "../enums/EBU_SDRMOD_BTYP.h"
#include "../enums/EBU_SDRMOD_BURSTL.h"
#include "../enums/EBU_SDRMOD_CASLAT.h"
#include "../enums/EBU_SDRMOD_OPMODE.h"
#include "../enums/EBU_SDRSTAT_REFERR.h"
#include "../enums/EBU_SDRSTAT_SDERR.h"
#include "../enums/EBU_SDRSTAT_SDRMBUSY.h"
#include "../enums/EBU_USERCON_ADDIO.h"
#include "../enums/EBU_USERCON_ADVIO.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * External Bus Unit
 */
struct [[gnu::packed]] ebu
{
    /* Constant attributes. */
    static constexpr std::size_t size = 120; /*!< ebu's size in bytes. */

    /* Fields. */
    uint32_t CLC;                                                    /*!< (read-write) EBU Clock Control Register */
    uint32_t MODCON;                                                 /*!< (read-write) EBU Configuration Register */
    const uint32_t ID = {};                                          /*!< (read-only) EBU Module Identification Register */
    uint32_t USERCON;                                                /*!< (read-write) EBU Test/Control Configuration Register */
    static constexpr std::size_t reserved_padding0_length = 2;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t ADDRSEL0;                                               /*!< (read-write) EBU Address Select Register 0 */
    uint32_t ADDRSEL1;                                               /*!< (read-write) EBU Address Select Register 1 */
    uint32_t ADDRSEL2;                                               /*!< (read-write) EBU Address Select Register 2 */
    uint32_t ADDRSEL3;                                               /*!< (read-write) EBU Address Select Register 3 */
    uint32_t BUSRCON0;                                               /*!< (read-write) EBU Bus Configuration Register */
    uint32_t BUSRAP0;                                                /*!< (read-write) EBU Bus Read Access Parameter Register */
    uint32_t BUSWCON0;                                               /*!< (read-write) EBU Bus Write Configuration Register */
    uint32_t BUSWAP0;                                                /*!< (read-write) EBU Bus Write Access Parameter Register */
    uint32_t BUSRCON1;                                               /*!< (read-write) EBU Bus Configuration Register */
    uint32_t BUSRAP1;                                                /*!< (read-write) EBU Bus Read Access Parameter Register */
    uint32_t BUSWCON1;                                               /*!< (read-write) EBU Bus Write Configuration Register */
    uint32_t BUSWAP1;                                                /*!< (read-write) EBU Bus Write Access Parameter Register */
    uint32_t BUSRCON2;                                               /*!< (read-write) EBU Bus Configuration Register */
    uint32_t BUSRAP2;                                                /*!< (read-write) EBU Bus Read Access Parameter Register */
    uint32_t BUSWCON2;                                               /*!< (read-write) EBU Bus Write Configuration Register */
    uint32_t BUSWAP2;                                                /*!< (read-write) EBU Bus Write Access Parameter Register */
    uint32_t BUSRCON3;                                               /*!< (read-write) EBU Bus Configuration Register */
    uint32_t BUSRAP3;                                                /*!< (read-write) EBU Bus Read Access Parameter Register */
    uint32_t BUSWCON3;                                               /*!< (read-write) EBU Bus Write Configuration Register */
    uint32_t BUSWAP3;                                                /*!< (read-write) EBU Bus Write Access Parameter Register */
    uint32_t SDRMCON;                                                /*!< (read-write) EBU SDRAM Control Register */
    uint32_t SDRMOD;                                                 /*!< (read-write) EBU SDRAM Mode Register */
    uint32_t SDRMREF;                                                /*!< (read-write) EBU SDRAM Refresh Control Register */
    const uint32_t SDRSTAT = {};                                     /*!< (read-only) EBU SDRAM Status Register */

    /* Methods. */

    /**
     * Get CLC's EBUDIVACK field.
     */
    inline EBU_CLC_EBUDIVACK get_CLC_EBUDIVACK()
    {
        return EBU_CLC_EBUDIVACK((CLC >> 22u) & 0b11u);
    }

    /**
     * Get CLC's DIV2ACK bit.
     */
    inline EBU_CLC_DIV2ACK get_CLC_DIV2ACK()
    {
        return EBU_CLC_DIV2ACK(CLC & (1u << 21u));
    }

    /**
     * Get CLC's SYNCACK bit.
     */
    inline EBU_CLC_SYNCACK get_CLC_SYNCACK()
    {
        return EBU_CLC_SYNCACK(CLC & (1u << 20u));
    }

    /**
     * Get CLC's EBUDIV field.
     */
    inline EBU_CLC_EBUDIV get_CLC_EBUDIV()
    {
        return EBU_CLC_EBUDIV((CLC >> 18u) & 0b11u);
    }

    /**
     * Set CLC's EBUDIV field.
     */
    inline void set_CLC_EBUDIV(EBU_CLC_EBUDIV value)
    {
        uint32_t curr = CLC;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        CLC = curr;
    }

    /**
     * Get CLC's DIV2 bit.
     */
    inline EBU_CLC_DIV2 get_CLC_DIV2()
    {
        return EBU_CLC_DIV2(CLC & (1u << 17u));
    }

    /**
     * Set CLC's DIV2 bit.
     */
    inline void set_CLC_DIV2()
    {
        CLC |= 1u << 17u;
    }

    /**
     * Clear CLC's DIV2 bit.
     */
    inline void clear_CLC_DIV2()
    {
        CLC &= ~(1u << 17u);
    }

    /**
     * Toggle CLC's DIV2 bit.
     */
    inline void toggle_CLC_DIV2()
    {
        CLC ^= 1u << 17u;
    }

    /**
     * Get CLC's SYNC bit.
     */
    inline EBU_CLC_SYNC get_CLC_SYNC()
    {
        return EBU_CLC_SYNC(CLC & (1u << 16u));
    }

    /**
     * Set CLC's SYNC bit.
     */
    inline void set_CLC_SYNC()
    {
        CLC |= 1u << 16u;
    }

    /**
     * Clear CLC's SYNC bit.
     */
    inline void clear_CLC_SYNC()
    {
        CLC &= ~(1u << 16u);
    }

    /**
     * Toggle CLC's SYNC bit.
     */
    inline void toggle_CLC_SYNC()
    {
        CLC ^= 1u << 16u;
    }

    /**
     * Get CLC's DISS bit.
     */
    inline EBU_CLC_DISS get_CLC_DISS()
    {
        return EBU_CLC_DISS(CLC & (1u << 1u));
    }

    /**
     * Get CLC's DISR bit.
     */
    inline EBU_CLC_DISR get_CLC_DISR()
    {
        return EBU_CLC_DISR(CLC & (1u << 0u));
    }

    /**
     * Set CLC's DISR bit.
     */
    inline void set_CLC_DISR()
    {
        CLC |= 1u << 0u;
    }

    /**
     * Clear CLC's DISR bit.
     */
    inline void clear_CLC_DISR()
    {
        CLC &= ~(1u << 0u);
    }

    /**
     * Toggle CLC's DISR bit.
     */
    inline void toggle_CLC_DISR()
    {
        CLC ^= 1u << 0u;
    }

    /**
     * Get all of CLC's bit fields.
     */
    inline void get_CLC(EBU_CLC_EBUDIVACK &EBUDIVACK, EBU_CLC_DIV2ACK &DIV2ACK, EBU_CLC_SYNCACK &SYNCACK, EBU_CLC_EBUDIV &EBUDIV, EBU_CLC_DIV2 &DIV2, EBU_CLC_SYNC &SYNC, EBU_CLC_DISS &DISS, EBU_CLC_DISR &DISR)
    {
        uint32_t curr = CLC;

        EBUDIVACK = EBU_CLC_EBUDIVACK((curr >> 22u) & 0b11u);
        DIV2ACK = EBU_CLC_DIV2ACK(curr & (1u << 21u));
        SYNCACK = EBU_CLC_SYNCACK(curr & (1u << 20u));
        EBUDIV = EBU_CLC_EBUDIV((curr >> 18u) & 0b11u);
        DIV2 = EBU_CLC_DIV2(curr & (1u << 17u));
        SYNC = EBU_CLC_SYNC(curr & (1u << 16u));
        DISS = EBU_CLC_DISS(curr & (1u << 1u));
        DISR = EBU_CLC_DISR(curr & (1u << 0u));
    }

    /**
     * Set all of CLC's bit fields.
     */
    inline void set_CLC(EBU_CLC_EBUDIV EBUDIV, EBU_CLC_DIV2 DIV2, EBU_CLC_SYNC SYNC, EBU_CLC_DISR DISR)
    {
        uint32_t curr = CLC;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EBUDIV) & 0b11u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(DIV2) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(SYNC) & 0b1u) << 16u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(DISR) & 0b1u) << 0u;

        CLC = curr;
    }

    /**
     * Get MODCON's ALE bit.
     */
    inline EBU_MODCON_ALE get_MODCON_ALE()
    {
        return EBU_MODCON_ALE(MODCON & (1u << 31u));
    }

    /**
     * Set MODCON's ALE bit.
     */
    inline void set_MODCON_ALE()
    {
        MODCON |= 1u << 31u;
    }

    /**
     * Clear MODCON's ALE bit.
     */
    inline void clear_MODCON_ALE()
    {
        MODCON &= ~(1u << 31u);
    }

    /**
     * Toggle MODCON's ALE bit.
     */
    inline void toggle_MODCON_ALE()
    {
        MODCON ^= 1u << 31u;
    }

    /**
     * Get MODCON's ACCSINHACK bit.
     */
    inline bool get_MODCON_ACCSINHACK()
    {
        return MODCON & (1u << 29u);
    }

    /**
     * Get MODCON's ACCSINH bit.
     */
    inline bool get_MODCON_ACCSINH()
    {
        return MODCON & (1u << 28u);
    }

    /**
     * Set MODCON's ACCSINH bit.
     */
    inline void set_MODCON_ACCSINH()
    {
        MODCON |= 1u << 28u;
    }

    /**
     * Clear MODCON's ACCSINH bit.
     */
    inline void clear_MODCON_ACCSINH()
    {
        MODCON &= ~(1u << 28u);
    }

    /**
     * Toggle MODCON's ACCSINH bit.
     */
    inline void toggle_MODCON_ACCSINH()
    {
        MODCON ^= 1u << 28u;
    }

    /**
     * Get MODCON's GLOBALCS field.
     */
    inline uint8_t get_MODCON_GLOBALCS()
    {
        return (MODCON >> 24u) & 0b1111u;
    }

    /**
     * Set MODCON's GLOBALCS field.
     */
    inline void set_MODCON_GLOBALCS(uint8_t value)
    {
        uint32_t curr = MODCON;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        MODCON = curr;
    }

    /**
     * Get MODCON's LOCKTIMEOUT field.
     */
    inline uint8_t get_MODCON_LOCKTIMEOUT()
    {
        return (MODCON >> 16u) & 0b11111111u;
    }

    /**
     * Set MODCON's LOCKTIMEOUT field.
     */
    inline void set_MODCON_LOCKTIMEOUT(uint8_t value)
    {
        uint32_t curr = MODCON;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        MODCON = curr;
    }

    /**
     * Get MODCON's TIMEOUTC field.
     */
    inline EBU_MODCON_TIMEOUTC get_MODCON_TIMEOUTC()
    {
        return EBU_MODCON_TIMEOUTC((MODCON >> 8u) & 0b11111111u);
    }

    /**
     * Set MODCON's TIMEOUTC field.
     */
    inline void set_MODCON_TIMEOUTC(EBU_MODCON_TIMEOUTC value)
    {
        uint32_t curr = MODCON;

        curr &= ~(0b11111111u << 8u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 8u;

        MODCON = curr;
    }

    /**
     * Get MODCON's ARBMODE field.
     */
    inline EBU_MODCON_ARBMODE get_MODCON_ARBMODE()
    {
        return EBU_MODCON_ARBMODE((MODCON >> 6u) & 0b11u);
    }

    /**
     * Set MODCON's ARBMODE field.
     */
    inline void set_MODCON_ARBMODE(EBU_MODCON_ARBMODE value)
    {
        uint32_t curr = MODCON;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        MODCON = curr;
    }

    /**
     * Get MODCON's ARBSYNC bit.
     */
    inline EBU_MODCON_ARBSYNC get_MODCON_ARBSYNC()
    {
        return EBU_MODCON_ARBSYNC(MODCON & (1u << 5u));
    }

    /**
     * Set MODCON's ARBSYNC bit.
     */
    inline void set_MODCON_ARBSYNC()
    {
        MODCON |= 1u << 5u;
    }

    /**
     * Clear MODCON's ARBSYNC bit.
     */
    inline void clear_MODCON_ARBSYNC()
    {
        MODCON &= ~(1u << 5u);
    }

    /**
     * Toggle MODCON's ARBSYNC bit.
     */
    inline void toggle_MODCON_ARBSYNC()
    {
        MODCON ^= 1u << 5u;
    }

    /**
     * Get MODCON's EXTLOCK bit.
     */
    inline EBU_MODCON_EXTLOCK get_MODCON_EXTLOCK()
    {
        return EBU_MODCON_EXTLOCK(MODCON & (1u << 4u));
    }

    /**
     * Set MODCON's EXTLOCK bit.
     */
    inline void set_MODCON_EXTLOCK()
    {
        MODCON |= 1u << 4u;
    }

    /**
     * Clear MODCON's EXTLOCK bit.
     */
    inline void clear_MODCON_EXTLOCK()
    {
        MODCON &= ~(1u << 4u);
    }

    /**
     * Toggle MODCON's EXTLOCK bit.
     */
    inline void toggle_MODCON_EXTLOCK()
    {
        MODCON ^= 1u << 4u;
    }

    /**
     * Get MODCON's SDTRI bit.
     */
    inline EBU_MODCON_SDTRI get_MODCON_SDTRI()
    {
        return EBU_MODCON_SDTRI(MODCON & (1u << 2u));
    }

    /**
     * Set MODCON's SDTRI bit.
     */
    inline void set_MODCON_SDTRI()
    {
        MODCON |= 1u << 2u;
    }

    /**
     * Clear MODCON's SDTRI bit.
     */
    inline void clear_MODCON_SDTRI()
    {
        MODCON &= ~(1u << 2u);
    }

    /**
     * Toggle MODCON's SDTRI bit.
     */
    inline void toggle_MODCON_SDTRI()
    {
        MODCON ^= 1u << 2u;
    }

    /**
     * Get MODCON's LCKABRT bit.
     */
    inline bool get_MODCON_LCKABRT()
    {
        return MODCON & (1u << 1u);
    }

    /**
     * Get MODCON's STS bit.
     */
    inline bool get_MODCON_STS()
    {
        return MODCON & (1u << 0u);
    }

    /**
     * Get all of MODCON's bit fields.
     */
    inline void get_MODCON(EBU_MODCON_ALE &ALE, bool &ACCSINHACK, bool &ACCSINH, uint8_t &GLOBALCS, uint8_t &LOCKTIMEOUT, EBU_MODCON_TIMEOUTC &TIMEOUTC, EBU_MODCON_ARBMODE &ARBMODE, EBU_MODCON_ARBSYNC &ARBSYNC, EBU_MODCON_EXTLOCK &EXTLOCK, EBU_MODCON_SDTRI &SDTRI, bool &LCKABRT, bool &STS)
    {
        uint32_t curr = MODCON;

        ALE = EBU_MODCON_ALE(curr & (1u << 31u));
        ACCSINHACK = curr & (1u << 29u);
        ACCSINH = curr & (1u << 28u);
        GLOBALCS = (curr >> 24u) & 0b1111u;
        LOCKTIMEOUT = (curr >> 16u) & 0b11111111u;
        TIMEOUTC = EBU_MODCON_TIMEOUTC((curr >> 8u) & 0b11111111u);
        ARBMODE = EBU_MODCON_ARBMODE((curr >> 6u) & 0b11u);
        ARBSYNC = EBU_MODCON_ARBSYNC(curr & (1u << 5u));
        EXTLOCK = EBU_MODCON_EXTLOCK(curr & (1u << 4u));
        SDTRI = EBU_MODCON_SDTRI(curr & (1u << 2u));
        LCKABRT = curr & (1u << 1u);
        STS = curr & (1u << 0u);
    }

    /**
     * Set all of MODCON's bit fields.
     */
    inline void set_MODCON(EBU_MODCON_ALE ALE, bool ACCSINH, uint8_t GLOBALCS, uint8_t LOCKTIMEOUT, EBU_MODCON_TIMEOUTC TIMEOUTC, EBU_MODCON_ARBMODE ARBMODE, EBU_MODCON_ARBSYNC ARBSYNC, EBU_MODCON_EXTLOCK EXTLOCK, EBU_MODCON_SDTRI SDTRI)
    {
        uint32_t curr = MODCON;

        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(ALE) & 0b1u) << 31u;
        curr &= ~(0b1u << 28u);
        curr |= (ACCSINH & 0b1u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (GLOBALCS & 0b1111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (LOCKTIMEOUT & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (std::to_underlying(TIMEOUTC) & 0b11111111u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(ARBMODE) & 0b11u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(ARBSYNC) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(EXTLOCK) & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(SDTRI) & 0b1u) << 2u;

        MODCON = curr;
    }

    /**
     * Get ID's MOD_NUMBER field.
     */
    inline uint16_t get_ID_MOD_NUMBER()
    {
        return (ID >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get ID's MOD_TYPE field.
     */
    inline uint8_t get_ID_MOD_TYPE()
    {
        return (ID >> 8u) & 0b11111111u;
    }

    /**
     * Get ID's MOD_REV field.
     */
    inline uint8_t get_ID_MOD_REV()
    {
        return (ID >> 0u) & 0b11111111u;
    }

    /**
     * Get all of ID's bit fields.
     */
    inline void get_ID(uint16_t &MOD_NUMBER, uint8_t &MOD_TYPE, uint8_t &MOD_REV)
    {
        uint32_t curr = ID;

        MOD_NUMBER = (curr >> 16u) & 0b1111111111111111u;
        MOD_TYPE = (curr >> 8u) & 0b11111111u;
        MOD_REV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get USERCON's ADVIO bit.
     */
    inline EBU_USERCON_ADVIO get_USERCON_ADVIO()
    {
        return EBU_USERCON_ADVIO(USERCON & (1u << 25u));
    }

    /**
     * Set USERCON's ADVIO bit.
     */
    inline void set_USERCON_ADVIO()
    {
        USERCON |= 1u << 25u;
    }

    /**
     * Clear USERCON's ADVIO bit.
     */
    inline void clear_USERCON_ADVIO()
    {
        USERCON &= ~(1u << 25u);
    }

    /**
     * Toggle USERCON's ADVIO bit.
     */
    inline void toggle_USERCON_ADVIO()
    {
        USERCON ^= 1u << 25u;
    }

    /**
     * Get USERCON's ADDIO field.
     */
    inline EBU_USERCON_ADDIO get_USERCON_ADDIO()
    {
        return EBU_USERCON_ADDIO((USERCON >> 16u) & 0b111111111u);
    }

    /**
     * Set USERCON's ADDIO field.
     */
    inline void set_USERCON_ADDIO(EBU_USERCON_ADDIO value)
    {
        uint32_t curr = USERCON;

        curr &= ~(0b111111111u << 16u);
        curr |= (std::to_underlying(value) & 0b111111111u) << 16u;

        USERCON = curr;
    }

    /**
     * Get USERCON's DIP bit.
     */
    inline bool get_USERCON_DIP()
    {
        return USERCON & (1u << 0u);
    }

    /**
     * Set USERCON's DIP bit.
     */
    inline void set_USERCON_DIP()
    {
        USERCON |= 1u << 0u;
    }

    /**
     * Clear USERCON's DIP bit.
     */
    inline void clear_USERCON_DIP()
    {
        USERCON &= ~(1u << 0u);
    }

    /**
     * Toggle USERCON's DIP bit.
     */
    inline void toggle_USERCON_DIP()
    {
        USERCON ^= 1u << 0u;
    }

    /**
     * Get all of USERCON's bit fields.
     */
    inline void get_USERCON(EBU_USERCON_ADVIO &ADVIO, EBU_USERCON_ADDIO &ADDIO, bool &DIP)
    {
        uint32_t curr = USERCON;

        ADVIO = EBU_USERCON_ADVIO(curr & (1u << 25u));
        ADDIO = EBU_USERCON_ADDIO((curr >> 16u) & 0b111111111u);
        DIP = curr & (1u << 0u);
    }

    /**
     * Set all of USERCON's bit fields.
     */
    inline void set_USERCON(EBU_USERCON_ADVIO ADVIO, EBU_USERCON_ADDIO ADDIO, bool DIP)
    {
        uint32_t curr = USERCON;

        curr &= ~(0b1u << 25u);
        curr |= (std::to_underlying(ADVIO) & 0b1u) << 25u;
        curr &= ~(0b111111111u << 16u);
        curr |= (std::to_underlying(ADDIO) & 0b111111111u) << 16u;
        curr &= ~(0b1u << 0u);
        curr |= (DIP & 0b1u) << 0u;

        USERCON = curr;
    }

    /**
     * Get ADDRSEL0's WPROT bit.
     */
    inline EBU_ADDRSEL0_WPROT get_ADDRSEL0_WPROT()
    {
        return EBU_ADDRSEL0_WPROT(ADDRSEL0 & (1u << 2u));
    }

    /**
     * Set ADDRSEL0's WPROT bit.
     */
    inline void set_ADDRSEL0_WPROT()
    {
        ADDRSEL0 |= 1u << 2u;
    }

    /**
     * Clear ADDRSEL0's WPROT bit.
     */
    inline void clear_ADDRSEL0_WPROT()
    {
        ADDRSEL0 &= ~(1u << 2u);
    }

    /**
     * Toggle ADDRSEL0's WPROT bit.
     */
    inline void toggle_ADDRSEL0_WPROT()
    {
        ADDRSEL0 ^= 1u << 2u;
    }

    /**
     * Get ADDRSEL0's ALTENAB bit.
     */
    inline EBU_ADDRSEL0_ALTENAB get_ADDRSEL0_ALTENAB()
    {
        return EBU_ADDRSEL0_ALTENAB(ADDRSEL0 & (1u << 1u));
    }

    /**
     * Set ADDRSEL0's ALTENAB bit.
     */
    inline void set_ADDRSEL0_ALTENAB()
    {
        ADDRSEL0 |= 1u << 1u;
    }

    /**
     * Clear ADDRSEL0's ALTENAB bit.
     */
    inline void clear_ADDRSEL0_ALTENAB()
    {
        ADDRSEL0 &= ~(1u << 1u);
    }

    /**
     * Toggle ADDRSEL0's ALTENAB bit.
     */
    inline void toggle_ADDRSEL0_ALTENAB()
    {
        ADDRSEL0 ^= 1u << 1u;
    }

    /**
     * Get ADDRSEL0's REGENAB bit.
     */
    inline EBU_ADDRSEL0_REGENAB get_ADDRSEL0_REGENAB()
    {
        return EBU_ADDRSEL0_REGENAB(ADDRSEL0 & (1u << 0u));
    }

    /**
     * Set ADDRSEL0's REGENAB bit.
     */
    inline void set_ADDRSEL0_REGENAB()
    {
        ADDRSEL0 |= 1u << 0u;
    }

    /**
     * Clear ADDRSEL0's REGENAB bit.
     */
    inline void clear_ADDRSEL0_REGENAB()
    {
        ADDRSEL0 &= ~(1u << 0u);
    }

    /**
     * Toggle ADDRSEL0's REGENAB bit.
     */
    inline void toggle_ADDRSEL0_REGENAB()
    {
        ADDRSEL0 ^= 1u << 0u;
    }

    /**
     * Get all of ADDRSEL0's bit fields.
     */
    inline void get_ADDRSEL0(EBU_ADDRSEL0_WPROT &WPROT, EBU_ADDRSEL0_ALTENAB &ALTENAB, EBU_ADDRSEL0_REGENAB &REGENAB)
    {
        uint32_t curr = ADDRSEL0;

        WPROT = EBU_ADDRSEL0_WPROT(curr & (1u << 2u));
        ALTENAB = EBU_ADDRSEL0_ALTENAB(curr & (1u << 1u));
        REGENAB = EBU_ADDRSEL0_REGENAB(curr & (1u << 0u));
    }

    /**
     * Set all of ADDRSEL0's bit fields.
     */
    inline void set_ADDRSEL0(EBU_ADDRSEL0_WPROT WPROT, EBU_ADDRSEL0_ALTENAB ALTENAB, EBU_ADDRSEL0_REGENAB REGENAB)
    {
        uint32_t curr = ADDRSEL0;

        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(WPROT) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(ALTENAB) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(REGENAB) & 0b1u) << 0u;

        ADDRSEL0 = curr;
    }

    /**
     * Get ADDRSEL1's WPROT bit.
     */
    inline EBU_ADDRSEL1_WPROT get_ADDRSEL1_WPROT()
    {
        return EBU_ADDRSEL1_WPROT(ADDRSEL1 & (1u << 2u));
    }

    /**
     * Set ADDRSEL1's WPROT bit.
     */
    inline void set_ADDRSEL1_WPROT()
    {
        ADDRSEL1 |= 1u << 2u;
    }

    /**
     * Clear ADDRSEL1's WPROT bit.
     */
    inline void clear_ADDRSEL1_WPROT()
    {
        ADDRSEL1 &= ~(1u << 2u);
    }

    /**
     * Toggle ADDRSEL1's WPROT bit.
     */
    inline void toggle_ADDRSEL1_WPROT()
    {
        ADDRSEL1 ^= 1u << 2u;
    }

    /**
     * Get ADDRSEL1's ALTENAB bit.
     */
    inline EBU_ADDRSEL1_ALTENAB get_ADDRSEL1_ALTENAB()
    {
        return EBU_ADDRSEL1_ALTENAB(ADDRSEL1 & (1u << 1u));
    }

    /**
     * Set ADDRSEL1's ALTENAB bit.
     */
    inline void set_ADDRSEL1_ALTENAB()
    {
        ADDRSEL1 |= 1u << 1u;
    }

    /**
     * Clear ADDRSEL1's ALTENAB bit.
     */
    inline void clear_ADDRSEL1_ALTENAB()
    {
        ADDRSEL1 &= ~(1u << 1u);
    }

    /**
     * Toggle ADDRSEL1's ALTENAB bit.
     */
    inline void toggle_ADDRSEL1_ALTENAB()
    {
        ADDRSEL1 ^= 1u << 1u;
    }

    /**
     * Get ADDRSEL1's REGENAB bit.
     */
    inline EBU_ADDRSEL1_REGENAB get_ADDRSEL1_REGENAB()
    {
        return EBU_ADDRSEL1_REGENAB(ADDRSEL1 & (1u << 0u));
    }

    /**
     * Set ADDRSEL1's REGENAB bit.
     */
    inline void set_ADDRSEL1_REGENAB()
    {
        ADDRSEL1 |= 1u << 0u;
    }

    /**
     * Clear ADDRSEL1's REGENAB bit.
     */
    inline void clear_ADDRSEL1_REGENAB()
    {
        ADDRSEL1 &= ~(1u << 0u);
    }

    /**
     * Toggle ADDRSEL1's REGENAB bit.
     */
    inline void toggle_ADDRSEL1_REGENAB()
    {
        ADDRSEL1 ^= 1u << 0u;
    }

    /**
     * Get all of ADDRSEL1's bit fields.
     */
    inline void get_ADDRSEL1(EBU_ADDRSEL1_WPROT &WPROT, EBU_ADDRSEL1_ALTENAB &ALTENAB, EBU_ADDRSEL1_REGENAB &REGENAB)
    {
        uint32_t curr = ADDRSEL1;

        WPROT = EBU_ADDRSEL1_WPROT(curr & (1u << 2u));
        ALTENAB = EBU_ADDRSEL1_ALTENAB(curr & (1u << 1u));
        REGENAB = EBU_ADDRSEL1_REGENAB(curr & (1u << 0u));
    }

    /**
     * Set all of ADDRSEL1's bit fields.
     */
    inline void set_ADDRSEL1(EBU_ADDRSEL1_WPROT WPROT, EBU_ADDRSEL1_ALTENAB ALTENAB, EBU_ADDRSEL1_REGENAB REGENAB)
    {
        uint32_t curr = ADDRSEL1;

        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(WPROT) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(ALTENAB) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(REGENAB) & 0b1u) << 0u;

        ADDRSEL1 = curr;
    }

    /**
     * Get ADDRSEL2's WPROT bit.
     */
    inline EBU_ADDRSEL2_WPROT get_ADDRSEL2_WPROT()
    {
        return EBU_ADDRSEL2_WPROT(ADDRSEL2 & (1u << 2u));
    }

    /**
     * Set ADDRSEL2's WPROT bit.
     */
    inline void set_ADDRSEL2_WPROT()
    {
        ADDRSEL2 |= 1u << 2u;
    }

    /**
     * Clear ADDRSEL2's WPROT bit.
     */
    inline void clear_ADDRSEL2_WPROT()
    {
        ADDRSEL2 &= ~(1u << 2u);
    }

    /**
     * Toggle ADDRSEL2's WPROT bit.
     */
    inline void toggle_ADDRSEL2_WPROT()
    {
        ADDRSEL2 ^= 1u << 2u;
    }

    /**
     * Get ADDRSEL2's ALTENAB bit.
     */
    inline EBU_ADDRSEL2_ALTENAB get_ADDRSEL2_ALTENAB()
    {
        return EBU_ADDRSEL2_ALTENAB(ADDRSEL2 & (1u << 1u));
    }

    /**
     * Set ADDRSEL2's ALTENAB bit.
     */
    inline void set_ADDRSEL2_ALTENAB()
    {
        ADDRSEL2 |= 1u << 1u;
    }

    /**
     * Clear ADDRSEL2's ALTENAB bit.
     */
    inline void clear_ADDRSEL2_ALTENAB()
    {
        ADDRSEL2 &= ~(1u << 1u);
    }

    /**
     * Toggle ADDRSEL2's ALTENAB bit.
     */
    inline void toggle_ADDRSEL2_ALTENAB()
    {
        ADDRSEL2 ^= 1u << 1u;
    }

    /**
     * Get ADDRSEL2's REGENAB bit.
     */
    inline EBU_ADDRSEL2_REGENAB get_ADDRSEL2_REGENAB()
    {
        return EBU_ADDRSEL2_REGENAB(ADDRSEL2 & (1u << 0u));
    }

    /**
     * Set ADDRSEL2's REGENAB bit.
     */
    inline void set_ADDRSEL2_REGENAB()
    {
        ADDRSEL2 |= 1u << 0u;
    }

    /**
     * Clear ADDRSEL2's REGENAB bit.
     */
    inline void clear_ADDRSEL2_REGENAB()
    {
        ADDRSEL2 &= ~(1u << 0u);
    }

    /**
     * Toggle ADDRSEL2's REGENAB bit.
     */
    inline void toggle_ADDRSEL2_REGENAB()
    {
        ADDRSEL2 ^= 1u << 0u;
    }

    /**
     * Get all of ADDRSEL2's bit fields.
     */
    inline void get_ADDRSEL2(EBU_ADDRSEL2_WPROT &WPROT, EBU_ADDRSEL2_ALTENAB &ALTENAB, EBU_ADDRSEL2_REGENAB &REGENAB)
    {
        uint32_t curr = ADDRSEL2;

        WPROT = EBU_ADDRSEL2_WPROT(curr & (1u << 2u));
        ALTENAB = EBU_ADDRSEL2_ALTENAB(curr & (1u << 1u));
        REGENAB = EBU_ADDRSEL2_REGENAB(curr & (1u << 0u));
    }

    /**
     * Set all of ADDRSEL2's bit fields.
     */
    inline void set_ADDRSEL2(EBU_ADDRSEL2_WPROT WPROT, EBU_ADDRSEL2_ALTENAB ALTENAB, EBU_ADDRSEL2_REGENAB REGENAB)
    {
        uint32_t curr = ADDRSEL2;

        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(WPROT) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(ALTENAB) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(REGENAB) & 0b1u) << 0u;

        ADDRSEL2 = curr;
    }

    /**
     * Get ADDRSEL3's WPROT bit.
     */
    inline EBU_ADDRSEL3_WPROT get_ADDRSEL3_WPROT()
    {
        return EBU_ADDRSEL3_WPROT(ADDRSEL3 & (1u << 2u));
    }

    /**
     * Set ADDRSEL3's WPROT bit.
     */
    inline void set_ADDRSEL3_WPROT()
    {
        ADDRSEL3 |= 1u << 2u;
    }

    /**
     * Clear ADDRSEL3's WPROT bit.
     */
    inline void clear_ADDRSEL3_WPROT()
    {
        ADDRSEL3 &= ~(1u << 2u);
    }

    /**
     * Toggle ADDRSEL3's WPROT bit.
     */
    inline void toggle_ADDRSEL3_WPROT()
    {
        ADDRSEL3 ^= 1u << 2u;
    }

    /**
     * Get ADDRSEL3's ALTENAB bit.
     */
    inline EBU_ADDRSEL3_ALTENAB get_ADDRSEL3_ALTENAB()
    {
        return EBU_ADDRSEL3_ALTENAB(ADDRSEL3 & (1u << 1u));
    }

    /**
     * Set ADDRSEL3's ALTENAB bit.
     */
    inline void set_ADDRSEL3_ALTENAB()
    {
        ADDRSEL3 |= 1u << 1u;
    }

    /**
     * Clear ADDRSEL3's ALTENAB bit.
     */
    inline void clear_ADDRSEL3_ALTENAB()
    {
        ADDRSEL3 &= ~(1u << 1u);
    }

    /**
     * Toggle ADDRSEL3's ALTENAB bit.
     */
    inline void toggle_ADDRSEL3_ALTENAB()
    {
        ADDRSEL3 ^= 1u << 1u;
    }

    /**
     * Get ADDRSEL3's REGENAB bit.
     */
    inline EBU_ADDRSEL3_REGENAB get_ADDRSEL3_REGENAB()
    {
        return EBU_ADDRSEL3_REGENAB(ADDRSEL3 & (1u << 0u));
    }

    /**
     * Set ADDRSEL3's REGENAB bit.
     */
    inline void set_ADDRSEL3_REGENAB()
    {
        ADDRSEL3 |= 1u << 0u;
    }

    /**
     * Clear ADDRSEL3's REGENAB bit.
     */
    inline void clear_ADDRSEL3_REGENAB()
    {
        ADDRSEL3 &= ~(1u << 0u);
    }

    /**
     * Toggle ADDRSEL3's REGENAB bit.
     */
    inline void toggle_ADDRSEL3_REGENAB()
    {
        ADDRSEL3 ^= 1u << 0u;
    }

    /**
     * Get all of ADDRSEL3's bit fields.
     */
    inline void get_ADDRSEL3(EBU_ADDRSEL3_WPROT &WPROT, EBU_ADDRSEL3_ALTENAB &ALTENAB, EBU_ADDRSEL3_REGENAB &REGENAB)
    {
        uint32_t curr = ADDRSEL3;

        WPROT = EBU_ADDRSEL3_WPROT(curr & (1u << 2u));
        ALTENAB = EBU_ADDRSEL3_ALTENAB(curr & (1u << 1u));
        REGENAB = EBU_ADDRSEL3_REGENAB(curr & (1u << 0u));
    }

    /**
     * Set all of ADDRSEL3's bit fields.
     */
    inline void set_ADDRSEL3(EBU_ADDRSEL3_WPROT WPROT, EBU_ADDRSEL3_ALTENAB ALTENAB, EBU_ADDRSEL3_REGENAB REGENAB)
    {
        uint32_t curr = ADDRSEL3;

        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(WPROT) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(ALTENAB) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(REGENAB) & 0b1u) << 0u;

        ADDRSEL3 = curr;
    }

    /**
     * Get BUSRCON0's AGEN field.
     */
    inline uint8_t get_BUSRCON0_AGEN()
    {
        return (BUSRCON0 >> 28u) & 0b1111u;
    }

    /**
     * Set BUSRCON0's AGEN field.
     */
    inline void set_BUSRCON0_AGEN(uint8_t value)
    {
        uint32_t curr = BUSRCON0;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        BUSRCON0 = curr;
    }

    /**
     * Get BUSRCON0's AAP bit.
     */
    inline EBU_BUSRCON0_AAP get_BUSRCON0_AAP()
    {
        return EBU_BUSRCON0_AAP(BUSRCON0 & (1u << 26u));
    }

    /**
     * Set BUSRCON0's AAP bit.
     */
    inline void set_BUSRCON0_AAP()
    {
        BUSRCON0 |= 1u << 26u;
    }

    /**
     * Clear BUSRCON0's AAP bit.
     */
    inline void clear_BUSRCON0_AAP()
    {
        BUSRCON0 &= ~(1u << 26u);
    }

    /**
     * Toggle BUSRCON0's AAP bit.
     */
    inline void toggle_BUSRCON0_AAP()
    {
        BUSRCON0 ^= 1u << 26u;
    }

    /**
     * Get BUSRCON0's WAIT field.
     */
    inline uint8_t get_BUSRCON0_WAIT()
    {
        return (BUSRCON0 >> 24u) & 0b11u;
    }

    /**
     * Set BUSRCON0's WAIT field.
     */
    inline void set_BUSRCON0_WAIT(uint8_t value)
    {
        uint32_t curr = BUSRCON0;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        BUSRCON0 = curr;
    }

    /**
     * Get BUSRCON0's PORTW field.
     */
    inline uint8_t get_BUSRCON0_PORTW()
    {
        return (BUSRCON0 >> 22u) & 0b11u;
    }

    /**
     * Set BUSRCON0's PORTW field.
     */
    inline void set_BUSRCON0_PORTW(uint8_t value)
    {
        uint32_t curr = BUSRCON0;

        curr &= ~(0b11u << 22u);
        curr |= (value & 0b11u) << 22u;

        BUSRCON0 = curr;
    }

    /**
     * Get BUSRCON0's BCGEN field.
     */
    inline EBU_BUSRCON0_BCGEN get_BUSRCON0_BCGEN()
    {
        return EBU_BUSRCON0_BCGEN((BUSRCON0 >> 20u) & 0b11u);
    }

    /**
     * Set BUSRCON0's BCGEN field.
     */
    inline void set_BUSRCON0_BCGEN(EBU_BUSRCON0_BCGEN value)
    {
        uint32_t curr = BUSRCON0;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        BUSRCON0 = curr;
    }

    /**
     * Get BUSRCON0's WAITINV bit.
     */
    inline EBU_BUSRCON0_WAITINV get_BUSRCON0_WAITINV()
    {
        return EBU_BUSRCON0_WAITINV(BUSRCON0 & (1u << 19u));
    }

    /**
     * Set BUSRCON0's WAITINV bit.
     */
    inline void set_BUSRCON0_WAITINV()
    {
        BUSRCON0 |= 1u << 19u;
    }

    /**
     * Clear BUSRCON0's WAITINV bit.
     */
    inline void clear_BUSRCON0_WAITINV()
    {
        BUSRCON0 &= ~(1u << 19u);
    }

    /**
     * Toggle BUSRCON0's WAITINV bit.
     */
    inline void toggle_BUSRCON0_WAITINV()
    {
        BUSRCON0 ^= 1u << 19u;
    }

    /**
     * Get BUSRCON0's DBA bit.
     */
    inline EBU_BUSRCON0_DBA get_BUSRCON0_DBA()
    {
        return EBU_BUSRCON0_DBA(BUSRCON0 & (1u << 18u));
    }

    /**
     * Set BUSRCON0's DBA bit.
     */
    inline void set_BUSRCON0_DBA()
    {
        BUSRCON0 |= 1u << 18u;
    }

    /**
     * Clear BUSRCON0's DBA bit.
     */
    inline void clear_BUSRCON0_DBA()
    {
        BUSRCON0 &= ~(1u << 18u);
    }

    /**
     * Toggle BUSRCON0's DBA bit.
     */
    inline void toggle_BUSRCON0_DBA()
    {
        BUSRCON0 ^= 1u << 18u;
    }

    /**
     * Get BUSRCON0's EBSE bit.
     */
    inline EBU_BUSRCON0_EBSE get_BUSRCON0_EBSE()
    {
        return EBU_BUSRCON0_EBSE(BUSRCON0 & (1u << 17u));
    }

    /**
     * Set BUSRCON0's EBSE bit.
     */
    inline void set_BUSRCON0_EBSE()
    {
        BUSRCON0 |= 1u << 17u;
    }

    /**
     * Clear BUSRCON0's EBSE bit.
     */
    inline void clear_BUSRCON0_EBSE()
    {
        BUSRCON0 &= ~(1u << 17u);
    }

    /**
     * Toggle BUSRCON0's EBSE bit.
     */
    inline void toggle_BUSRCON0_EBSE()
    {
        BUSRCON0 ^= 1u << 17u;
    }

    /**
     * Get BUSRCON0's ECSE bit.
     */
    inline EBU_BUSRCON0_ECSE get_BUSRCON0_ECSE()
    {
        return EBU_BUSRCON0_ECSE(BUSRCON0 & (1u << 16u));
    }

    /**
     * Set BUSRCON0's ECSE bit.
     */
    inline void set_BUSRCON0_ECSE()
    {
        BUSRCON0 |= 1u << 16u;
    }

    /**
     * Clear BUSRCON0's ECSE bit.
     */
    inline void clear_BUSRCON0_ECSE()
    {
        BUSRCON0 &= ~(1u << 16u);
    }

    /**
     * Toggle BUSRCON0's ECSE bit.
     */
    inline void toggle_BUSRCON0_ECSE()
    {
        BUSRCON0 ^= 1u << 16u;
    }

    /**
     * Get BUSRCON0's NAA bit.
     */
    inline bool get_BUSRCON0_NAA()
    {
        return BUSRCON0 & (1u << 7u);
    }

    /**
     * Set BUSRCON0's NAA bit.
     */
    inline void set_BUSRCON0_NAA()
    {
        BUSRCON0 |= 1u << 7u;
    }

    /**
     * Clear BUSRCON0's NAA bit.
     */
    inline void clear_BUSRCON0_NAA()
    {
        BUSRCON0 &= ~(1u << 7u);
    }

    /**
     * Toggle BUSRCON0's NAA bit.
     */
    inline void toggle_BUSRCON0_NAA()
    {
        BUSRCON0 ^= 1u << 7u;
    }

    /**
     * Get BUSRCON0's BFCMSEL bit.
     */
    inline EBU_BUSRCON0_BFCMSEL get_BUSRCON0_BFCMSEL()
    {
        return EBU_BUSRCON0_BFCMSEL(BUSRCON0 & (1u << 6u));
    }

    /**
     * Set BUSRCON0's BFCMSEL bit.
     */
    inline void set_BUSRCON0_BFCMSEL()
    {
        BUSRCON0 |= 1u << 6u;
    }

    /**
     * Clear BUSRCON0's BFCMSEL bit.
     */
    inline void clear_BUSRCON0_BFCMSEL()
    {
        BUSRCON0 &= ~(1u << 6u);
    }

    /**
     * Toggle BUSRCON0's BFCMSEL bit.
     */
    inline void toggle_BUSRCON0_BFCMSEL()
    {
        BUSRCON0 ^= 1u << 6u;
    }

    /**
     * Get BUSRCON0's FDBKEN bit.
     */
    inline EBU_BUSRCON0_FDBKEN get_BUSRCON0_FDBKEN()
    {
        return EBU_BUSRCON0_FDBKEN(BUSRCON0 & (1u << 5u));
    }

    /**
     * Set BUSRCON0's FDBKEN bit.
     */
    inline void set_BUSRCON0_FDBKEN()
    {
        BUSRCON0 |= 1u << 5u;
    }

    /**
     * Clear BUSRCON0's FDBKEN bit.
     */
    inline void clear_BUSRCON0_FDBKEN()
    {
        BUSRCON0 &= ~(1u << 5u);
    }

    /**
     * Toggle BUSRCON0's FDBKEN bit.
     */
    inline void toggle_BUSRCON0_FDBKEN()
    {
        BUSRCON0 ^= 1u << 5u;
    }

    /**
     * Get BUSRCON0's BFSSS bit.
     */
    inline EBU_BUSRCON0_BFSSS get_BUSRCON0_BFSSS()
    {
        return EBU_BUSRCON0_BFSSS(BUSRCON0 & (1u << 4u));
    }

    /**
     * Set BUSRCON0's BFSSS bit.
     */
    inline void set_BUSRCON0_BFSSS()
    {
        BUSRCON0 |= 1u << 4u;
    }

    /**
     * Clear BUSRCON0's BFSSS bit.
     */
    inline void clear_BUSRCON0_BFSSS()
    {
        BUSRCON0 &= ~(1u << 4u);
    }

    /**
     * Toggle BUSRCON0's BFSSS bit.
     */
    inline void toggle_BUSRCON0_BFSSS()
    {
        BUSRCON0 ^= 1u << 4u;
    }

    /**
     * Get BUSRCON0's FBBMSEL bit.
     */
    inline EBU_BUSRCON0_FBBMSEL get_BUSRCON0_FBBMSEL()
    {
        return EBU_BUSRCON0_FBBMSEL(BUSRCON0 & (1u << 3u));
    }

    /**
     * Set BUSRCON0's FBBMSEL bit.
     */
    inline void set_BUSRCON0_FBBMSEL()
    {
        BUSRCON0 |= 1u << 3u;
    }

    /**
     * Clear BUSRCON0's FBBMSEL bit.
     */
    inline void clear_BUSRCON0_FBBMSEL()
    {
        BUSRCON0 &= ~(1u << 3u);
    }

    /**
     * Toggle BUSRCON0's FBBMSEL bit.
     */
    inline void toggle_BUSRCON0_FBBMSEL()
    {
        BUSRCON0 ^= 1u << 3u;
    }

    /**
     * Get BUSRCON0's FETBLEN field.
     */
    inline EBU_BUSRCON0_FETBLEN get_BUSRCON0_FETBLEN()
    {
        return EBU_BUSRCON0_FETBLEN((BUSRCON0 >> 0u) & 0b111u);
    }

    /**
     * Set BUSRCON0's FETBLEN field.
     */
    inline void set_BUSRCON0_FETBLEN(EBU_BUSRCON0_FETBLEN value)
    {
        uint32_t curr = BUSRCON0;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        BUSRCON0 = curr;
    }

    /**
     * Get all of BUSRCON0's bit fields.
     */
    inline void get_BUSRCON0(uint8_t &AGEN, EBU_BUSRCON0_AAP &AAP, uint8_t &WAIT, uint8_t &PORTW, EBU_BUSRCON0_BCGEN &BCGEN, EBU_BUSRCON0_WAITINV &WAITINV, EBU_BUSRCON0_DBA &DBA, EBU_BUSRCON0_EBSE &EBSE, EBU_BUSRCON0_ECSE &ECSE, bool &NAA, EBU_BUSRCON0_BFCMSEL &BFCMSEL, EBU_BUSRCON0_FDBKEN &FDBKEN, EBU_BUSRCON0_BFSSS &BFSSS, EBU_BUSRCON0_FBBMSEL &FBBMSEL, EBU_BUSRCON0_FETBLEN &FETBLEN)
    {
        uint32_t curr = BUSRCON0;

        AGEN = (curr >> 28u) & 0b1111u;
        AAP = EBU_BUSRCON0_AAP(curr & (1u << 26u));
        WAIT = (curr >> 24u) & 0b11u;
        PORTW = (curr >> 22u) & 0b11u;
        BCGEN = EBU_BUSRCON0_BCGEN((curr >> 20u) & 0b11u);
        WAITINV = EBU_BUSRCON0_WAITINV(curr & (1u << 19u));
        DBA = EBU_BUSRCON0_DBA(curr & (1u << 18u));
        EBSE = EBU_BUSRCON0_EBSE(curr & (1u << 17u));
        ECSE = EBU_BUSRCON0_ECSE(curr & (1u << 16u));
        NAA = curr & (1u << 7u);
        BFCMSEL = EBU_BUSRCON0_BFCMSEL(curr & (1u << 6u));
        FDBKEN = EBU_BUSRCON0_FDBKEN(curr & (1u << 5u));
        BFSSS = EBU_BUSRCON0_BFSSS(curr & (1u << 4u));
        FBBMSEL = EBU_BUSRCON0_FBBMSEL(curr & (1u << 3u));
        FETBLEN = EBU_BUSRCON0_FETBLEN((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of BUSRCON0's bit fields.
     */
    inline void set_BUSRCON0(uint8_t AGEN, EBU_BUSRCON0_AAP AAP, uint8_t WAIT, uint8_t PORTW, EBU_BUSRCON0_BCGEN BCGEN, EBU_BUSRCON0_WAITINV WAITINV, EBU_BUSRCON0_DBA DBA, EBU_BUSRCON0_EBSE EBSE, EBU_BUSRCON0_ECSE ECSE, bool NAA, EBU_BUSRCON0_BFCMSEL BFCMSEL, EBU_BUSRCON0_FDBKEN FDBKEN, EBU_BUSRCON0_BFSSS BFSSS, EBU_BUSRCON0_FBBMSEL FBBMSEL, EBU_BUSRCON0_FETBLEN FETBLEN)
    {
        uint32_t curr = BUSRCON0;

        curr &= ~(0b1111u << 28u);
        curr |= (AGEN & 0b1111u) << 28u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(AAP) & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (WAIT & 0b11u) << 24u;
        curr &= ~(0b11u << 22u);
        curr |= (PORTW & 0b11u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(BCGEN) & 0b11u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(WAITINV) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(DBA) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(EBSE) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ECSE) & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (NAA & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(BFCMSEL) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(FDBKEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(BFSSS) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(FBBMSEL) & 0b1u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(FETBLEN) & 0b111u) << 0u;

        BUSRCON0 = curr;
    }

    /**
     * Get BUSRAP0's ADDRC field.
     */
    inline EBU_BUSRAP0_ADDRC get_BUSRAP0_ADDRC()
    {
        return EBU_BUSRAP0_ADDRC((BUSRAP0 >> 28u) & 0b1111u);
    }

    /**
     * Set BUSRAP0's ADDRC field.
     */
    inline void set_BUSRAP0_ADDRC(EBU_BUSRAP0_ADDRC value)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        BUSRAP0 = curr;
    }

    /**
     * Get BUSRAP0's AHOLDC field.
     */
    inline EBU_BUSRAP0_AHOLDC get_BUSRAP0_AHOLDC()
    {
        return EBU_BUSRAP0_AHOLDC((BUSRAP0 >> 24u) & 0b1111u);
    }

    /**
     * Set BUSRAP0's AHOLDC field.
     */
    inline void set_BUSRAP0_AHOLDC(EBU_BUSRAP0_AHOLDC value)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        BUSRAP0 = curr;
    }

    /**
     * Get BUSRAP0's CMDDELAY field.
     */
    inline EBU_BUSRAP0_CMDDELAY get_BUSRAP0_CMDDELAY()
    {
        return EBU_BUSRAP0_CMDDELAY((BUSRAP0 >> 20u) & 0b1111u);
    }

    /**
     * Set BUSRAP0's CMDDELAY field.
     */
    inline void set_BUSRAP0_CMDDELAY(EBU_BUSRAP0_CMDDELAY value)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        BUSRAP0 = curr;
    }

    /**
     * Get BUSRAP0's EXTDATA field.
     */
    inline EBU_BUSRAP0_EXTDATA get_BUSRAP0_EXTDATA()
    {
        return EBU_BUSRAP0_EXTDATA((BUSRAP0 >> 18u) & 0b11u);
    }

    /**
     * Set BUSRAP0's EXTDATA field.
     */
    inline void set_BUSRAP0_EXTDATA(EBU_BUSRAP0_EXTDATA value)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        BUSRAP0 = curr;
    }

    /**
     * Get BUSRAP0's EXTCLOCK field.
     */
    inline EBU_BUSRAP0_EXTCLOCK get_BUSRAP0_EXTCLOCK()
    {
        return EBU_BUSRAP0_EXTCLOCK((BUSRAP0 >> 16u) & 0b11u);
    }

    /**
     * Set BUSRAP0's EXTCLOCK field.
     */
    inline void set_BUSRAP0_EXTCLOCK(EBU_BUSRAP0_EXTCLOCK value)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        BUSRAP0 = curr;
    }

    /**
     * Get BUSRAP0's DATAC field.
     */
    inline uint8_t get_BUSRAP0_DATAC()
    {
        return (BUSRAP0 >> 12u) & 0b1111u;
    }

    /**
     * Set BUSRAP0's DATAC field.
     */
    inline void set_BUSRAP0_DATAC(uint8_t value)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        BUSRAP0 = curr;
    }

    /**
     * Get BUSRAP0's WAITRDC field.
     */
    inline EBU_BUSRAP0_WAITRDC get_BUSRAP0_WAITRDC()
    {
        return EBU_BUSRAP0_WAITRDC((BUSRAP0 >> 7u) & 0b11111u);
    }

    /**
     * Set BUSRAP0's WAITRDC field.
     */
    inline void set_BUSRAP0_WAITRDC(EBU_BUSRAP0_WAITRDC value)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(value) & 0b11111u) << 7u;

        BUSRAP0 = curr;
    }

    /**
     * Get BUSRAP0's RDRECOVC field.
     */
    inline EBU_BUSRAP0_RDRECOVC get_BUSRAP0_RDRECOVC()
    {
        return EBU_BUSRAP0_RDRECOVC((BUSRAP0 >> 4u) & 0b111u);
    }

    /**
     * Set BUSRAP0's RDRECOVC field.
     */
    inline void set_BUSRAP0_RDRECOVC(EBU_BUSRAP0_RDRECOVC value)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        BUSRAP0 = curr;
    }

    /**
     * Get BUSRAP0's RDDTACS field.
     */
    inline EBU_BUSRAP0_RDDTACS get_BUSRAP0_RDDTACS()
    {
        return EBU_BUSRAP0_RDDTACS((BUSRAP0 >> 0u) & 0b1111u);
    }

    /**
     * Set BUSRAP0's RDDTACS field.
     */
    inline void set_BUSRAP0_RDDTACS(EBU_BUSRAP0_RDDTACS value)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BUSRAP0 = curr;
    }

    /**
     * Get all of BUSRAP0's bit fields.
     */
    inline void get_BUSRAP0(EBU_BUSRAP0_ADDRC &ADDRC, EBU_BUSRAP0_AHOLDC &AHOLDC, EBU_BUSRAP0_CMDDELAY &CMDDELAY, EBU_BUSRAP0_EXTDATA &EXTDATA, EBU_BUSRAP0_EXTCLOCK &EXTCLOCK, uint8_t &DATAC, EBU_BUSRAP0_WAITRDC &WAITRDC, EBU_BUSRAP0_RDRECOVC &RDRECOVC, EBU_BUSRAP0_RDDTACS &RDDTACS)
    {
        uint32_t curr = BUSRAP0;

        ADDRC = EBU_BUSRAP0_ADDRC((curr >> 28u) & 0b1111u);
        AHOLDC = EBU_BUSRAP0_AHOLDC((curr >> 24u) & 0b1111u);
        CMDDELAY = EBU_BUSRAP0_CMDDELAY((curr >> 20u) & 0b1111u);
        EXTDATA = EBU_BUSRAP0_EXTDATA((curr >> 18u) & 0b11u);
        EXTCLOCK = EBU_BUSRAP0_EXTCLOCK((curr >> 16u) & 0b11u);
        DATAC = (curr >> 12u) & 0b1111u;
        WAITRDC = EBU_BUSRAP0_WAITRDC((curr >> 7u) & 0b11111u);
        RDRECOVC = EBU_BUSRAP0_RDRECOVC((curr >> 4u) & 0b111u);
        RDDTACS = EBU_BUSRAP0_RDDTACS((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of BUSRAP0's bit fields.
     */
    inline void set_BUSRAP0(EBU_BUSRAP0_ADDRC ADDRC, EBU_BUSRAP0_AHOLDC AHOLDC, EBU_BUSRAP0_CMDDELAY CMDDELAY, EBU_BUSRAP0_EXTDATA EXTDATA, EBU_BUSRAP0_EXTCLOCK EXTCLOCK, uint8_t DATAC, EBU_BUSRAP0_WAITRDC WAITRDC, EBU_BUSRAP0_RDRECOVC RDRECOVC, EBU_BUSRAP0_RDDTACS RDDTACS)
    {
        uint32_t curr = BUSRAP0;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(ADDRC) & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(AHOLDC) & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(CMDDELAY) & 0b1111u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EXTDATA) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(EXTCLOCK) & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (DATAC & 0b1111u) << 12u;
        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(WAITRDC) & 0b11111u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(RDRECOVC) & 0b111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(RDDTACS) & 0b1111u) << 0u;

        BUSRAP0 = curr;
    }

    /**
     * Get BUSWCON0's AGEN field.
     */
    inline uint8_t get_BUSWCON0_AGEN()
    {
        return (BUSWCON0 >> 28u) & 0b1111u;
    }

    /**
     * Set BUSWCON0's AGEN field.
     */
    inline void set_BUSWCON0_AGEN(uint8_t value)
    {
        uint32_t curr = BUSWCON0;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        BUSWCON0 = curr;
    }

    /**
     * Get BUSWCON0's LOCKCS bit.
     */
    inline EBU_BUSWCON0_LOCKCS get_BUSWCON0_LOCKCS()
    {
        return EBU_BUSWCON0_LOCKCS(BUSWCON0 & (1u << 27u));
    }

    /**
     * Set BUSWCON0's LOCKCS bit.
     */
    inline void set_BUSWCON0_LOCKCS()
    {
        BUSWCON0 |= 1u << 27u;
    }

    /**
     * Clear BUSWCON0's LOCKCS bit.
     */
    inline void clear_BUSWCON0_LOCKCS()
    {
        BUSWCON0 &= ~(1u << 27u);
    }

    /**
     * Toggle BUSWCON0's LOCKCS bit.
     */
    inline void toggle_BUSWCON0_LOCKCS()
    {
        BUSWCON0 ^= 1u << 27u;
    }

    /**
     * Get BUSWCON0's AAP bit.
     */
    inline EBU_BUSWCON0_AAP get_BUSWCON0_AAP()
    {
        return EBU_BUSWCON0_AAP(BUSWCON0 & (1u << 26u));
    }

    /**
     * Set BUSWCON0's AAP bit.
     */
    inline void set_BUSWCON0_AAP()
    {
        BUSWCON0 |= 1u << 26u;
    }

    /**
     * Clear BUSWCON0's AAP bit.
     */
    inline void clear_BUSWCON0_AAP()
    {
        BUSWCON0 &= ~(1u << 26u);
    }

    /**
     * Toggle BUSWCON0's AAP bit.
     */
    inline void toggle_BUSWCON0_AAP()
    {
        BUSWCON0 ^= 1u << 26u;
    }

    /**
     * Get BUSWCON0's WAIT field.
     */
    inline uint8_t get_BUSWCON0_WAIT()
    {
        return (BUSWCON0 >> 24u) & 0b11u;
    }

    /**
     * Set BUSWCON0's WAIT field.
     */
    inline void set_BUSWCON0_WAIT(uint8_t value)
    {
        uint32_t curr = BUSWCON0;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        BUSWCON0 = curr;
    }

    /**
     * Get BUSWCON0's PORTW field.
     */
    inline uint8_t get_BUSWCON0_PORTW()
    {
        return (BUSWCON0 >> 22u) & 0b11u;
    }

    /**
     * Get BUSWCON0's BCGEN field.
     */
    inline EBU_BUSWCON0_BCGEN get_BUSWCON0_BCGEN()
    {
        return EBU_BUSWCON0_BCGEN((BUSWCON0 >> 20u) & 0b11u);
    }

    /**
     * Set BUSWCON0's BCGEN field.
     */
    inline void set_BUSWCON0_BCGEN(EBU_BUSWCON0_BCGEN value)
    {
        uint32_t curr = BUSWCON0;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        BUSWCON0 = curr;
    }

    /**
     * Get BUSWCON0's WAITINV bit.
     */
    inline EBU_BUSWCON0_WAITINV get_BUSWCON0_WAITINV()
    {
        return EBU_BUSWCON0_WAITINV(BUSWCON0 & (1u << 19u));
    }

    /**
     * Set BUSWCON0's WAITINV bit.
     */
    inline void set_BUSWCON0_WAITINV()
    {
        BUSWCON0 |= 1u << 19u;
    }

    /**
     * Clear BUSWCON0's WAITINV bit.
     */
    inline void clear_BUSWCON0_WAITINV()
    {
        BUSWCON0 &= ~(1u << 19u);
    }

    /**
     * Toggle BUSWCON0's WAITINV bit.
     */
    inline void toggle_BUSWCON0_WAITINV()
    {
        BUSWCON0 ^= 1u << 19u;
    }

    /**
     * Get BUSWCON0's EBSE bit.
     */
    inline EBU_BUSWCON0_EBSE get_BUSWCON0_EBSE()
    {
        return EBU_BUSWCON0_EBSE(BUSWCON0 & (1u << 17u));
    }

    /**
     * Set BUSWCON0's EBSE bit.
     */
    inline void set_BUSWCON0_EBSE()
    {
        BUSWCON0 |= 1u << 17u;
    }

    /**
     * Clear BUSWCON0's EBSE bit.
     */
    inline void clear_BUSWCON0_EBSE()
    {
        BUSWCON0 &= ~(1u << 17u);
    }

    /**
     * Toggle BUSWCON0's EBSE bit.
     */
    inline void toggle_BUSWCON0_EBSE()
    {
        BUSWCON0 ^= 1u << 17u;
    }

    /**
     * Get BUSWCON0's ECSE bit.
     */
    inline EBU_BUSWCON0_ECSE get_BUSWCON0_ECSE()
    {
        return EBU_BUSWCON0_ECSE(BUSWCON0 & (1u << 16u));
    }

    /**
     * Set BUSWCON0's ECSE bit.
     */
    inline void set_BUSWCON0_ECSE()
    {
        BUSWCON0 |= 1u << 16u;
    }

    /**
     * Clear BUSWCON0's ECSE bit.
     */
    inline void clear_BUSWCON0_ECSE()
    {
        BUSWCON0 &= ~(1u << 16u);
    }

    /**
     * Toggle BUSWCON0's ECSE bit.
     */
    inline void toggle_BUSWCON0_ECSE()
    {
        BUSWCON0 ^= 1u << 16u;
    }

    /**
     * Get BUSWCON0's NAA bit.
     */
    inline bool get_BUSWCON0_NAA()
    {
        return BUSWCON0 & (1u << 7u);
    }

    /**
     * Get BUSWCON0's FBBMSEL bit.
     */
    inline EBU_BUSWCON0_FBBMSEL get_BUSWCON0_FBBMSEL()
    {
        return EBU_BUSWCON0_FBBMSEL(BUSWCON0 & (1u << 3u));
    }

    /**
     * Set BUSWCON0's FBBMSEL bit.
     */
    inline void set_BUSWCON0_FBBMSEL()
    {
        BUSWCON0 |= 1u << 3u;
    }

    /**
     * Clear BUSWCON0's FBBMSEL bit.
     */
    inline void clear_BUSWCON0_FBBMSEL()
    {
        BUSWCON0 &= ~(1u << 3u);
    }

    /**
     * Toggle BUSWCON0's FBBMSEL bit.
     */
    inline void toggle_BUSWCON0_FBBMSEL()
    {
        BUSWCON0 ^= 1u << 3u;
    }

    /**
     * Get BUSWCON0's FETBLEN field.
     */
    inline EBU_BUSWCON0_FETBLEN get_BUSWCON0_FETBLEN()
    {
        return EBU_BUSWCON0_FETBLEN((BUSWCON0 >> 0u) & 0b111u);
    }

    /**
     * Set BUSWCON0's FETBLEN field.
     */
    inline void set_BUSWCON0_FETBLEN(EBU_BUSWCON0_FETBLEN value)
    {
        uint32_t curr = BUSWCON0;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        BUSWCON0 = curr;
    }

    /**
     * Get all of BUSWCON0's bit fields.
     */
    inline void get_BUSWCON0(uint8_t &AGEN, EBU_BUSWCON0_LOCKCS &LOCKCS, EBU_BUSWCON0_AAP &AAP, uint8_t &WAIT, uint8_t &PORTW, EBU_BUSWCON0_BCGEN &BCGEN, EBU_BUSWCON0_WAITINV &WAITINV, EBU_BUSWCON0_EBSE &EBSE, EBU_BUSWCON0_ECSE &ECSE, bool &NAA, EBU_BUSWCON0_FBBMSEL &FBBMSEL, EBU_BUSWCON0_FETBLEN &FETBLEN)
    {
        uint32_t curr = BUSWCON0;

        AGEN = (curr >> 28u) & 0b1111u;
        LOCKCS = EBU_BUSWCON0_LOCKCS(curr & (1u << 27u));
        AAP = EBU_BUSWCON0_AAP(curr & (1u << 26u));
        WAIT = (curr >> 24u) & 0b11u;
        PORTW = (curr >> 22u) & 0b11u;
        BCGEN = EBU_BUSWCON0_BCGEN((curr >> 20u) & 0b11u);
        WAITINV = EBU_BUSWCON0_WAITINV(curr & (1u << 19u));
        EBSE = EBU_BUSWCON0_EBSE(curr & (1u << 17u));
        ECSE = EBU_BUSWCON0_ECSE(curr & (1u << 16u));
        NAA = curr & (1u << 7u);
        FBBMSEL = EBU_BUSWCON0_FBBMSEL(curr & (1u << 3u));
        FETBLEN = EBU_BUSWCON0_FETBLEN((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of BUSWCON0's bit fields.
     */
    inline void set_BUSWCON0(uint8_t AGEN, EBU_BUSWCON0_LOCKCS LOCKCS, EBU_BUSWCON0_AAP AAP, uint8_t WAIT, EBU_BUSWCON0_BCGEN BCGEN, EBU_BUSWCON0_WAITINV WAITINV, EBU_BUSWCON0_EBSE EBSE, EBU_BUSWCON0_ECSE ECSE, EBU_BUSWCON0_FBBMSEL FBBMSEL, EBU_BUSWCON0_FETBLEN FETBLEN)
    {
        uint32_t curr = BUSWCON0;

        curr &= ~(0b1111u << 28u);
        curr |= (AGEN & 0b1111u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (std::to_underlying(LOCKCS) & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(AAP) & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (WAIT & 0b11u) << 24u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(BCGEN) & 0b11u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(WAITINV) & 0b1u) << 19u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(EBSE) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ECSE) & 0b1u) << 16u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(FBBMSEL) & 0b1u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(FETBLEN) & 0b111u) << 0u;

        BUSWCON0 = curr;
    }

    /**
     * Get BUSWAP0's ADDRC field.
     */
    inline EBU_BUSWAP0_ADDRC get_BUSWAP0_ADDRC()
    {
        return EBU_BUSWAP0_ADDRC((BUSWAP0 >> 28u) & 0b1111u);
    }

    /**
     * Set BUSWAP0's ADDRC field.
     */
    inline void set_BUSWAP0_ADDRC(EBU_BUSWAP0_ADDRC value)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        BUSWAP0 = curr;
    }

    /**
     * Get BUSWAP0's AHOLDC field.
     */
    inline EBU_BUSWAP0_AHOLDC get_BUSWAP0_AHOLDC()
    {
        return EBU_BUSWAP0_AHOLDC((BUSWAP0 >> 24u) & 0b1111u);
    }

    /**
     * Set BUSWAP0's AHOLDC field.
     */
    inline void set_BUSWAP0_AHOLDC(EBU_BUSWAP0_AHOLDC value)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        BUSWAP0 = curr;
    }

    /**
     * Get BUSWAP0's CMDDELAY field.
     */
    inline EBU_BUSWAP0_CMDDELAY get_BUSWAP0_CMDDELAY()
    {
        return EBU_BUSWAP0_CMDDELAY((BUSWAP0 >> 20u) & 0b1111u);
    }

    /**
     * Set BUSWAP0's CMDDELAY field.
     */
    inline void set_BUSWAP0_CMDDELAY(EBU_BUSWAP0_CMDDELAY value)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        BUSWAP0 = curr;
    }

    /**
     * Get BUSWAP0's EXTDATA field.
     */
    inline EBU_BUSWAP0_EXTDATA get_BUSWAP0_EXTDATA()
    {
        return EBU_BUSWAP0_EXTDATA((BUSWAP0 >> 18u) & 0b11u);
    }

    /**
     * Set BUSWAP0's EXTDATA field.
     */
    inline void set_BUSWAP0_EXTDATA(EBU_BUSWAP0_EXTDATA value)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        BUSWAP0 = curr;
    }

    /**
     * Get BUSWAP0's EXTCLOCK field.
     */
    inline EBU_BUSWAP0_EXTCLOCK get_BUSWAP0_EXTCLOCK()
    {
        return EBU_BUSWAP0_EXTCLOCK((BUSWAP0 >> 16u) & 0b11u);
    }

    /**
     * Set BUSWAP0's EXTCLOCK field.
     */
    inline void set_BUSWAP0_EXTCLOCK(EBU_BUSWAP0_EXTCLOCK value)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        BUSWAP0 = curr;
    }

    /**
     * Get BUSWAP0's DATAC field.
     */
    inline EBU_BUSWAP0_DATAC get_BUSWAP0_DATAC()
    {
        return EBU_BUSWAP0_DATAC((BUSWAP0 >> 12u) & 0b1111u);
    }

    /**
     * Set BUSWAP0's DATAC field.
     */
    inline void set_BUSWAP0_DATAC(EBU_BUSWAP0_DATAC value)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        BUSWAP0 = curr;
    }

    /**
     * Get BUSWAP0's WAITWRC field.
     */
    inline EBU_BUSWAP0_WAITWRC get_BUSWAP0_WAITWRC()
    {
        return EBU_BUSWAP0_WAITWRC((BUSWAP0 >> 7u) & 0b11111u);
    }

    /**
     * Set BUSWAP0's WAITWRC field.
     */
    inline void set_BUSWAP0_WAITWRC(EBU_BUSWAP0_WAITWRC value)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(value) & 0b11111u) << 7u;

        BUSWAP0 = curr;
    }

    /**
     * Get BUSWAP0's WRRECOVC field.
     */
    inline EBU_BUSWAP0_WRRECOVC get_BUSWAP0_WRRECOVC()
    {
        return EBU_BUSWAP0_WRRECOVC((BUSWAP0 >> 4u) & 0b111u);
    }

    /**
     * Set BUSWAP0's WRRECOVC field.
     */
    inline void set_BUSWAP0_WRRECOVC(EBU_BUSWAP0_WRRECOVC value)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        BUSWAP0 = curr;
    }

    /**
     * Get BUSWAP0's WRDTACS field.
     */
    inline EBU_BUSWAP0_WRDTACS get_BUSWAP0_WRDTACS()
    {
        return EBU_BUSWAP0_WRDTACS((BUSWAP0 >> 0u) & 0b1111u);
    }

    /**
     * Set BUSWAP0's WRDTACS field.
     */
    inline void set_BUSWAP0_WRDTACS(EBU_BUSWAP0_WRDTACS value)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BUSWAP0 = curr;
    }

    /**
     * Get all of BUSWAP0's bit fields.
     */
    inline void get_BUSWAP0(EBU_BUSWAP0_ADDRC &ADDRC, EBU_BUSWAP0_AHOLDC &AHOLDC, EBU_BUSWAP0_CMDDELAY &CMDDELAY, EBU_BUSWAP0_EXTDATA &EXTDATA, EBU_BUSWAP0_EXTCLOCK &EXTCLOCK, EBU_BUSWAP0_DATAC &DATAC, EBU_BUSWAP0_WAITWRC &WAITWRC, EBU_BUSWAP0_WRRECOVC &WRRECOVC, EBU_BUSWAP0_WRDTACS &WRDTACS)
    {
        uint32_t curr = BUSWAP0;

        ADDRC = EBU_BUSWAP0_ADDRC((curr >> 28u) & 0b1111u);
        AHOLDC = EBU_BUSWAP0_AHOLDC((curr >> 24u) & 0b1111u);
        CMDDELAY = EBU_BUSWAP0_CMDDELAY((curr >> 20u) & 0b1111u);
        EXTDATA = EBU_BUSWAP0_EXTDATA((curr >> 18u) & 0b11u);
        EXTCLOCK = EBU_BUSWAP0_EXTCLOCK((curr >> 16u) & 0b11u);
        DATAC = EBU_BUSWAP0_DATAC((curr >> 12u) & 0b1111u);
        WAITWRC = EBU_BUSWAP0_WAITWRC((curr >> 7u) & 0b11111u);
        WRRECOVC = EBU_BUSWAP0_WRRECOVC((curr >> 4u) & 0b111u);
        WRDTACS = EBU_BUSWAP0_WRDTACS((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of BUSWAP0's bit fields.
     */
    inline void set_BUSWAP0(EBU_BUSWAP0_ADDRC ADDRC, EBU_BUSWAP0_AHOLDC AHOLDC, EBU_BUSWAP0_CMDDELAY CMDDELAY, EBU_BUSWAP0_EXTDATA EXTDATA, EBU_BUSWAP0_EXTCLOCK EXTCLOCK, EBU_BUSWAP0_DATAC DATAC, EBU_BUSWAP0_WAITWRC WAITWRC, EBU_BUSWAP0_WRRECOVC WRRECOVC, EBU_BUSWAP0_WRDTACS WRDTACS)
    {
        uint32_t curr = BUSWAP0;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(ADDRC) & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(AHOLDC) & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(CMDDELAY) & 0b1111u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EXTDATA) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(EXTCLOCK) & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(DATAC) & 0b1111u) << 12u;
        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(WAITWRC) & 0b11111u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(WRRECOVC) & 0b111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(WRDTACS) & 0b1111u) << 0u;

        BUSWAP0 = curr;
    }

    /**
     * Get BUSRCON1's AGEN field.
     */
    inline uint8_t get_BUSRCON1_AGEN()
    {
        return (BUSRCON1 >> 28u) & 0b1111u;
    }

    /**
     * Set BUSRCON1's AGEN field.
     */
    inline void set_BUSRCON1_AGEN(uint8_t value)
    {
        uint32_t curr = BUSRCON1;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        BUSRCON1 = curr;
    }

    /**
     * Get BUSRCON1's AAP bit.
     */
    inline EBU_BUSRCON1_AAP get_BUSRCON1_AAP()
    {
        return EBU_BUSRCON1_AAP(BUSRCON1 & (1u << 26u));
    }

    /**
     * Set BUSRCON1's AAP bit.
     */
    inline void set_BUSRCON1_AAP()
    {
        BUSRCON1 |= 1u << 26u;
    }

    /**
     * Clear BUSRCON1's AAP bit.
     */
    inline void clear_BUSRCON1_AAP()
    {
        BUSRCON1 &= ~(1u << 26u);
    }

    /**
     * Toggle BUSRCON1's AAP bit.
     */
    inline void toggle_BUSRCON1_AAP()
    {
        BUSRCON1 ^= 1u << 26u;
    }

    /**
     * Get BUSRCON1's WAIT field.
     */
    inline uint8_t get_BUSRCON1_WAIT()
    {
        return (BUSRCON1 >> 24u) & 0b11u;
    }

    /**
     * Set BUSRCON1's WAIT field.
     */
    inline void set_BUSRCON1_WAIT(uint8_t value)
    {
        uint32_t curr = BUSRCON1;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        BUSRCON1 = curr;
    }

    /**
     * Get BUSRCON1's PORTW field.
     */
    inline uint8_t get_BUSRCON1_PORTW()
    {
        return (BUSRCON1 >> 22u) & 0b11u;
    }

    /**
     * Set BUSRCON1's PORTW field.
     */
    inline void set_BUSRCON1_PORTW(uint8_t value)
    {
        uint32_t curr = BUSRCON1;

        curr &= ~(0b11u << 22u);
        curr |= (value & 0b11u) << 22u;

        BUSRCON1 = curr;
    }

    /**
     * Get BUSRCON1's BCGEN field.
     */
    inline EBU_BUSRCON1_BCGEN get_BUSRCON1_BCGEN()
    {
        return EBU_BUSRCON1_BCGEN((BUSRCON1 >> 20u) & 0b11u);
    }

    /**
     * Set BUSRCON1's BCGEN field.
     */
    inline void set_BUSRCON1_BCGEN(EBU_BUSRCON1_BCGEN value)
    {
        uint32_t curr = BUSRCON1;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        BUSRCON1 = curr;
    }

    /**
     * Get BUSRCON1's WAITINV bit.
     */
    inline EBU_BUSRCON1_WAITINV get_BUSRCON1_WAITINV()
    {
        return EBU_BUSRCON1_WAITINV(BUSRCON1 & (1u << 19u));
    }

    /**
     * Set BUSRCON1's WAITINV bit.
     */
    inline void set_BUSRCON1_WAITINV()
    {
        BUSRCON1 |= 1u << 19u;
    }

    /**
     * Clear BUSRCON1's WAITINV bit.
     */
    inline void clear_BUSRCON1_WAITINV()
    {
        BUSRCON1 &= ~(1u << 19u);
    }

    /**
     * Toggle BUSRCON1's WAITINV bit.
     */
    inline void toggle_BUSRCON1_WAITINV()
    {
        BUSRCON1 ^= 1u << 19u;
    }

    /**
     * Get BUSRCON1's DBA bit.
     */
    inline EBU_BUSRCON1_DBA get_BUSRCON1_DBA()
    {
        return EBU_BUSRCON1_DBA(BUSRCON1 & (1u << 18u));
    }

    /**
     * Set BUSRCON1's DBA bit.
     */
    inline void set_BUSRCON1_DBA()
    {
        BUSRCON1 |= 1u << 18u;
    }

    /**
     * Clear BUSRCON1's DBA bit.
     */
    inline void clear_BUSRCON1_DBA()
    {
        BUSRCON1 &= ~(1u << 18u);
    }

    /**
     * Toggle BUSRCON1's DBA bit.
     */
    inline void toggle_BUSRCON1_DBA()
    {
        BUSRCON1 ^= 1u << 18u;
    }

    /**
     * Get BUSRCON1's EBSE bit.
     */
    inline EBU_BUSRCON1_EBSE get_BUSRCON1_EBSE()
    {
        return EBU_BUSRCON1_EBSE(BUSRCON1 & (1u << 17u));
    }

    /**
     * Set BUSRCON1's EBSE bit.
     */
    inline void set_BUSRCON1_EBSE()
    {
        BUSRCON1 |= 1u << 17u;
    }

    /**
     * Clear BUSRCON1's EBSE bit.
     */
    inline void clear_BUSRCON1_EBSE()
    {
        BUSRCON1 &= ~(1u << 17u);
    }

    /**
     * Toggle BUSRCON1's EBSE bit.
     */
    inline void toggle_BUSRCON1_EBSE()
    {
        BUSRCON1 ^= 1u << 17u;
    }

    /**
     * Get BUSRCON1's ECSE bit.
     */
    inline EBU_BUSRCON1_ECSE get_BUSRCON1_ECSE()
    {
        return EBU_BUSRCON1_ECSE(BUSRCON1 & (1u << 16u));
    }

    /**
     * Set BUSRCON1's ECSE bit.
     */
    inline void set_BUSRCON1_ECSE()
    {
        BUSRCON1 |= 1u << 16u;
    }

    /**
     * Clear BUSRCON1's ECSE bit.
     */
    inline void clear_BUSRCON1_ECSE()
    {
        BUSRCON1 &= ~(1u << 16u);
    }

    /**
     * Toggle BUSRCON1's ECSE bit.
     */
    inline void toggle_BUSRCON1_ECSE()
    {
        BUSRCON1 ^= 1u << 16u;
    }

    /**
     * Get BUSRCON1's NAA bit.
     */
    inline bool get_BUSRCON1_NAA()
    {
        return BUSRCON1 & (1u << 7u);
    }

    /**
     * Set BUSRCON1's NAA bit.
     */
    inline void set_BUSRCON1_NAA()
    {
        BUSRCON1 |= 1u << 7u;
    }

    /**
     * Clear BUSRCON1's NAA bit.
     */
    inline void clear_BUSRCON1_NAA()
    {
        BUSRCON1 &= ~(1u << 7u);
    }

    /**
     * Toggle BUSRCON1's NAA bit.
     */
    inline void toggle_BUSRCON1_NAA()
    {
        BUSRCON1 ^= 1u << 7u;
    }

    /**
     * Get BUSRCON1's BFCMSEL bit.
     */
    inline EBU_BUSRCON1_BFCMSEL get_BUSRCON1_BFCMSEL()
    {
        return EBU_BUSRCON1_BFCMSEL(BUSRCON1 & (1u << 6u));
    }

    /**
     * Set BUSRCON1's BFCMSEL bit.
     */
    inline void set_BUSRCON1_BFCMSEL()
    {
        BUSRCON1 |= 1u << 6u;
    }

    /**
     * Clear BUSRCON1's BFCMSEL bit.
     */
    inline void clear_BUSRCON1_BFCMSEL()
    {
        BUSRCON1 &= ~(1u << 6u);
    }

    /**
     * Toggle BUSRCON1's BFCMSEL bit.
     */
    inline void toggle_BUSRCON1_BFCMSEL()
    {
        BUSRCON1 ^= 1u << 6u;
    }

    /**
     * Get BUSRCON1's FDBKEN bit.
     */
    inline EBU_BUSRCON1_FDBKEN get_BUSRCON1_FDBKEN()
    {
        return EBU_BUSRCON1_FDBKEN(BUSRCON1 & (1u << 5u));
    }

    /**
     * Set BUSRCON1's FDBKEN bit.
     */
    inline void set_BUSRCON1_FDBKEN()
    {
        BUSRCON1 |= 1u << 5u;
    }

    /**
     * Clear BUSRCON1's FDBKEN bit.
     */
    inline void clear_BUSRCON1_FDBKEN()
    {
        BUSRCON1 &= ~(1u << 5u);
    }

    /**
     * Toggle BUSRCON1's FDBKEN bit.
     */
    inline void toggle_BUSRCON1_FDBKEN()
    {
        BUSRCON1 ^= 1u << 5u;
    }

    /**
     * Get BUSRCON1's BFSSS bit.
     */
    inline EBU_BUSRCON1_BFSSS get_BUSRCON1_BFSSS()
    {
        return EBU_BUSRCON1_BFSSS(BUSRCON1 & (1u << 4u));
    }

    /**
     * Set BUSRCON1's BFSSS bit.
     */
    inline void set_BUSRCON1_BFSSS()
    {
        BUSRCON1 |= 1u << 4u;
    }

    /**
     * Clear BUSRCON1's BFSSS bit.
     */
    inline void clear_BUSRCON1_BFSSS()
    {
        BUSRCON1 &= ~(1u << 4u);
    }

    /**
     * Toggle BUSRCON1's BFSSS bit.
     */
    inline void toggle_BUSRCON1_BFSSS()
    {
        BUSRCON1 ^= 1u << 4u;
    }

    /**
     * Get BUSRCON1's FBBMSEL bit.
     */
    inline EBU_BUSRCON1_FBBMSEL get_BUSRCON1_FBBMSEL()
    {
        return EBU_BUSRCON1_FBBMSEL(BUSRCON1 & (1u << 3u));
    }

    /**
     * Set BUSRCON1's FBBMSEL bit.
     */
    inline void set_BUSRCON1_FBBMSEL()
    {
        BUSRCON1 |= 1u << 3u;
    }

    /**
     * Clear BUSRCON1's FBBMSEL bit.
     */
    inline void clear_BUSRCON1_FBBMSEL()
    {
        BUSRCON1 &= ~(1u << 3u);
    }

    /**
     * Toggle BUSRCON1's FBBMSEL bit.
     */
    inline void toggle_BUSRCON1_FBBMSEL()
    {
        BUSRCON1 ^= 1u << 3u;
    }

    /**
     * Get BUSRCON1's FETBLEN field.
     */
    inline EBU_BUSRCON1_FETBLEN get_BUSRCON1_FETBLEN()
    {
        return EBU_BUSRCON1_FETBLEN((BUSRCON1 >> 0u) & 0b111u);
    }

    /**
     * Set BUSRCON1's FETBLEN field.
     */
    inline void set_BUSRCON1_FETBLEN(EBU_BUSRCON1_FETBLEN value)
    {
        uint32_t curr = BUSRCON1;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        BUSRCON1 = curr;
    }

    /**
     * Get all of BUSRCON1's bit fields.
     */
    inline void get_BUSRCON1(uint8_t &AGEN, EBU_BUSRCON1_AAP &AAP, uint8_t &WAIT, uint8_t &PORTW, EBU_BUSRCON1_BCGEN &BCGEN, EBU_BUSRCON1_WAITINV &WAITINV, EBU_BUSRCON1_DBA &DBA, EBU_BUSRCON1_EBSE &EBSE, EBU_BUSRCON1_ECSE &ECSE, bool &NAA, EBU_BUSRCON1_BFCMSEL &BFCMSEL, EBU_BUSRCON1_FDBKEN &FDBKEN, EBU_BUSRCON1_BFSSS &BFSSS, EBU_BUSRCON1_FBBMSEL &FBBMSEL, EBU_BUSRCON1_FETBLEN &FETBLEN)
    {
        uint32_t curr = BUSRCON1;

        AGEN = (curr >> 28u) & 0b1111u;
        AAP = EBU_BUSRCON1_AAP(curr & (1u << 26u));
        WAIT = (curr >> 24u) & 0b11u;
        PORTW = (curr >> 22u) & 0b11u;
        BCGEN = EBU_BUSRCON1_BCGEN((curr >> 20u) & 0b11u);
        WAITINV = EBU_BUSRCON1_WAITINV(curr & (1u << 19u));
        DBA = EBU_BUSRCON1_DBA(curr & (1u << 18u));
        EBSE = EBU_BUSRCON1_EBSE(curr & (1u << 17u));
        ECSE = EBU_BUSRCON1_ECSE(curr & (1u << 16u));
        NAA = curr & (1u << 7u);
        BFCMSEL = EBU_BUSRCON1_BFCMSEL(curr & (1u << 6u));
        FDBKEN = EBU_BUSRCON1_FDBKEN(curr & (1u << 5u));
        BFSSS = EBU_BUSRCON1_BFSSS(curr & (1u << 4u));
        FBBMSEL = EBU_BUSRCON1_FBBMSEL(curr & (1u << 3u));
        FETBLEN = EBU_BUSRCON1_FETBLEN((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of BUSRCON1's bit fields.
     */
    inline void set_BUSRCON1(uint8_t AGEN, EBU_BUSRCON1_AAP AAP, uint8_t WAIT, uint8_t PORTW, EBU_BUSRCON1_BCGEN BCGEN, EBU_BUSRCON1_WAITINV WAITINV, EBU_BUSRCON1_DBA DBA, EBU_BUSRCON1_EBSE EBSE, EBU_BUSRCON1_ECSE ECSE, bool NAA, EBU_BUSRCON1_BFCMSEL BFCMSEL, EBU_BUSRCON1_FDBKEN FDBKEN, EBU_BUSRCON1_BFSSS BFSSS, EBU_BUSRCON1_FBBMSEL FBBMSEL, EBU_BUSRCON1_FETBLEN FETBLEN)
    {
        uint32_t curr = BUSRCON1;

        curr &= ~(0b1111u << 28u);
        curr |= (AGEN & 0b1111u) << 28u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(AAP) & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (WAIT & 0b11u) << 24u;
        curr &= ~(0b11u << 22u);
        curr |= (PORTW & 0b11u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(BCGEN) & 0b11u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(WAITINV) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(DBA) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(EBSE) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ECSE) & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (NAA & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(BFCMSEL) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(FDBKEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(BFSSS) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(FBBMSEL) & 0b1u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(FETBLEN) & 0b111u) << 0u;

        BUSRCON1 = curr;
    }

    /**
     * Get BUSRAP1's ADDRC field.
     */
    inline EBU_BUSRAP1_ADDRC get_BUSRAP1_ADDRC()
    {
        return EBU_BUSRAP1_ADDRC((BUSRAP1 >> 28u) & 0b1111u);
    }

    /**
     * Set BUSRAP1's ADDRC field.
     */
    inline void set_BUSRAP1_ADDRC(EBU_BUSRAP1_ADDRC value)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        BUSRAP1 = curr;
    }

    /**
     * Get BUSRAP1's AHOLDC field.
     */
    inline EBU_BUSRAP1_AHOLDC get_BUSRAP1_AHOLDC()
    {
        return EBU_BUSRAP1_AHOLDC((BUSRAP1 >> 24u) & 0b1111u);
    }

    /**
     * Set BUSRAP1's AHOLDC field.
     */
    inline void set_BUSRAP1_AHOLDC(EBU_BUSRAP1_AHOLDC value)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        BUSRAP1 = curr;
    }

    /**
     * Get BUSRAP1's CMDDELAY field.
     */
    inline EBU_BUSRAP1_CMDDELAY get_BUSRAP1_CMDDELAY()
    {
        return EBU_BUSRAP1_CMDDELAY((BUSRAP1 >> 20u) & 0b1111u);
    }

    /**
     * Set BUSRAP1's CMDDELAY field.
     */
    inline void set_BUSRAP1_CMDDELAY(EBU_BUSRAP1_CMDDELAY value)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        BUSRAP1 = curr;
    }

    /**
     * Get BUSRAP1's EXTDATA field.
     */
    inline EBU_BUSRAP1_EXTDATA get_BUSRAP1_EXTDATA()
    {
        return EBU_BUSRAP1_EXTDATA((BUSRAP1 >> 18u) & 0b11u);
    }

    /**
     * Set BUSRAP1's EXTDATA field.
     */
    inline void set_BUSRAP1_EXTDATA(EBU_BUSRAP1_EXTDATA value)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        BUSRAP1 = curr;
    }

    /**
     * Get BUSRAP1's EXTCLOCK field.
     */
    inline EBU_BUSRAP1_EXTCLOCK get_BUSRAP1_EXTCLOCK()
    {
        return EBU_BUSRAP1_EXTCLOCK((BUSRAP1 >> 16u) & 0b11u);
    }

    /**
     * Set BUSRAP1's EXTCLOCK field.
     */
    inline void set_BUSRAP1_EXTCLOCK(EBU_BUSRAP1_EXTCLOCK value)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        BUSRAP1 = curr;
    }

    /**
     * Get BUSRAP1's DATAC field.
     */
    inline uint8_t get_BUSRAP1_DATAC()
    {
        return (BUSRAP1 >> 12u) & 0b1111u;
    }

    /**
     * Set BUSRAP1's DATAC field.
     */
    inline void set_BUSRAP1_DATAC(uint8_t value)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        BUSRAP1 = curr;
    }

    /**
     * Get BUSRAP1's WAITRDC field.
     */
    inline EBU_BUSRAP1_WAITRDC get_BUSRAP1_WAITRDC()
    {
        return EBU_BUSRAP1_WAITRDC((BUSRAP1 >> 7u) & 0b11111u);
    }

    /**
     * Set BUSRAP1's WAITRDC field.
     */
    inline void set_BUSRAP1_WAITRDC(EBU_BUSRAP1_WAITRDC value)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(value) & 0b11111u) << 7u;

        BUSRAP1 = curr;
    }

    /**
     * Get BUSRAP1's RDRECOVC field.
     */
    inline EBU_BUSRAP1_RDRECOVC get_BUSRAP1_RDRECOVC()
    {
        return EBU_BUSRAP1_RDRECOVC((BUSRAP1 >> 4u) & 0b111u);
    }

    /**
     * Set BUSRAP1's RDRECOVC field.
     */
    inline void set_BUSRAP1_RDRECOVC(EBU_BUSRAP1_RDRECOVC value)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        BUSRAP1 = curr;
    }

    /**
     * Get BUSRAP1's RDDTACS field.
     */
    inline EBU_BUSRAP1_RDDTACS get_BUSRAP1_RDDTACS()
    {
        return EBU_BUSRAP1_RDDTACS((BUSRAP1 >> 0u) & 0b1111u);
    }

    /**
     * Set BUSRAP1's RDDTACS field.
     */
    inline void set_BUSRAP1_RDDTACS(EBU_BUSRAP1_RDDTACS value)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BUSRAP1 = curr;
    }

    /**
     * Get all of BUSRAP1's bit fields.
     */
    inline void get_BUSRAP1(EBU_BUSRAP1_ADDRC &ADDRC, EBU_BUSRAP1_AHOLDC &AHOLDC, EBU_BUSRAP1_CMDDELAY &CMDDELAY, EBU_BUSRAP1_EXTDATA &EXTDATA, EBU_BUSRAP1_EXTCLOCK &EXTCLOCK, uint8_t &DATAC, EBU_BUSRAP1_WAITRDC &WAITRDC, EBU_BUSRAP1_RDRECOVC &RDRECOVC, EBU_BUSRAP1_RDDTACS &RDDTACS)
    {
        uint32_t curr = BUSRAP1;

        ADDRC = EBU_BUSRAP1_ADDRC((curr >> 28u) & 0b1111u);
        AHOLDC = EBU_BUSRAP1_AHOLDC((curr >> 24u) & 0b1111u);
        CMDDELAY = EBU_BUSRAP1_CMDDELAY((curr >> 20u) & 0b1111u);
        EXTDATA = EBU_BUSRAP1_EXTDATA((curr >> 18u) & 0b11u);
        EXTCLOCK = EBU_BUSRAP1_EXTCLOCK((curr >> 16u) & 0b11u);
        DATAC = (curr >> 12u) & 0b1111u;
        WAITRDC = EBU_BUSRAP1_WAITRDC((curr >> 7u) & 0b11111u);
        RDRECOVC = EBU_BUSRAP1_RDRECOVC((curr >> 4u) & 0b111u);
        RDDTACS = EBU_BUSRAP1_RDDTACS((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of BUSRAP1's bit fields.
     */
    inline void set_BUSRAP1(EBU_BUSRAP1_ADDRC ADDRC, EBU_BUSRAP1_AHOLDC AHOLDC, EBU_BUSRAP1_CMDDELAY CMDDELAY, EBU_BUSRAP1_EXTDATA EXTDATA, EBU_BUSRAP1_EXTCLOCK EXTCLOCK, uint8_t DATAC, EBU_BUSRAP1_WAITRDC WAITRDC, EBU_BUSRAP1_RDRECOVC RDRECOVC, EBU_BUSRAP1_RDDTACS RDDTACS)
    {
        uint32_t curr = BUSRAP1;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(ADDRC) & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(AHOLDC) & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(CMDDELAY) & 0b1111u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EXTDATA) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(EXTCLOCK) & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (DATAC & 0b1111u) << 12u;
        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(WAITRDC) & 0b11111u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(RDRECOVC) & 0b111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(RDDTACS) & 0b1111u) << 0u;

        BUSRAP1 = curr;
    }

    /**
     * Get BUSWCON1's AGEN field.
     */
    inline uint8_t get_BUSWCON1_AGEN()
    {
        return (BUSWCON1 >> 28u) & 0b1111u;
    }

    /**
     * Set BUSWCON1's AGEN field.
     */
    inline void set_BUSWCON1_AGEN(uint8_t value)
    {
        uint32_t curr = BUSWCON1;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        BUSWCON1 = curr;
    }

    /**
     * Get BUSWCON1's LOCKCS bit.
     */
    inline EBU_BUSWCON1_LOCKCS get_BUSWCON1_LOCKCS()
    {
        return EBU_BUSWCON1_LOCKCS(BUSWCON1 & (1u << 27u));
    }

    /**
     * Set BUSWCON1's LOCKCS bit.
     */
    inline void set_BUSWCON1_LOCKCS()
    {
        BUSWCON1 |= 1u << 27u;
    }

    /**
     * Clear BUSWCON1's LOCKCS bit.
     */
    inline void clear_BUSWCON1_LOCKCS()
    {
        BUSWCON1 &= ~(1u << 27u);
    }

    /**
     * Toggle BUSWCON1's LOCKCS bit.
     */
    inline void toggle_BUSWCON1_LOCKCS()
    {
        BUSWCON1 ^= 1u << 27u;
    }

    /**
     * Get BUSWCON1's AAP bit.
     */
    inline EBU_BUSWCON1_AAP get_BUSWCON1_AAP()
    {
        return EBU_BUSWCON1_AAP(BUSWCON1 & (1u << 26u));
    }

    /**
     * Set BUSWCON1's AAP bit.
     */
    inline void set_BUSWCON1_AAP()
    {
        BUSWCON1 |= 1u << 26u;
    }

    /**
     * Clear BUSWCON1's AAP bit.
     */
    inline void clear_BUSWCON1_AAP()
    {
        BUSWCON1 &= ~(1u << 26u);
    }

    /**
     * Toggle BUSWCON1's AAP bit.
     */
    inline void toggle_BUSWCON1_AAP()
    {
        BUSWCON1 ^= 1u << 26u;
    }

    /**
     * Get BUSWCON1's WAIT field.
     */
    inline uint8_t get_BUSWCON1_WAIT()
    {
        return (BUSWCON1 >> 24u) & 0b11u;
    }

    /**
     * Set BUSWCON1's WAIT field.
     */
    inline void set_BUSWCON1_WAIT(uint8_t value)
    {
        uint32_t curr = BUSWCON1;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        BUSWCON1 = curr;
    }

    /**
     * Get BUSWCON1's PORTW field.
     */
    inline uint8_t get_BUSWCON1_PORTW()
    {
        return (BUSWCON1 >> 22u) & 0b11u;
    }

    /**
     * Get BUSWCON1's BCGEN field.
     */
    inline EBU_BUSWCON1_BCGEN get_BUSWCON1_BCGEN()
    {
        return EBU_BUSWCON1_BCGEN((BUSWCON1 >> 20u) & 0b11u);
    }

    /**
     * Set BUSWCON1's BCGEN field.
     */
    inline void set_BUSWCON1_BCGEN(EBU_BUSWCON1_BCGEN value)
    {
        uint32_t curr = BUSWCON1;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        BUSWCON1 = curr;
    }

    /**
     * Get BUSWCON1's WAITINV bit.
     */
    inline EBU_BUSWCON1_WAITINV get_BUSWCON1_WAITINV()
    {
        return EBU_BUSWCON1_WAITINV(BUSWCON1 & (1u << 19u));
    }

    /**
     * Set BUSWCON1's WAITINV bit.
     */
    inline void set_BUSWCON1_WAITINV()
    {
        BUSWCON1 |= 1u << 19u;
    }

    /**
     * Clear BUSWCON1's WAITINV bit.
     */
    inline void clear_BUSWCON1_WAITINV()
    {
        BUSWCON1 &= ~(1u << 19u);
    }

    /**
     * Toggle BUSWCON1's WAITINV bit.
     */
    inline void toggle_BUSWCON1_WAITINV()
    {
        BUSWCON1 ^= 1u << 19u;
    }

    /**
     * Get BUSWCON1's EBSE bit.
     */
    inline EBU_BUSWCON1_EBSE get_BUSWCON1_EBSE()
    {
        return EBU_BUSWCON1_EBSE(BUSWCON1 & (1u << 17u));
    }

    /**
     * Set BUSWCON1's EBSE bit.
     */
    inline void set_BUSWCON1_EBSE()
    {
        BUSWCON1 |= 1u << 17u;
    }

    /**
     * Clear BUSWCON1's EBSE bit.
     */
    inline void clear_BUSWCON1_EBSE()
    {
        BUSWCON1 &= ~(1u << 17u);
    }

    /**
     * Toggle BUSWCON1's EBSE bit.
     */
    inline void toggle_BUSWCON1_EBSE()
    {
        BUSWCON1 ^= 1u << 17u;
    }

    /**
     * Get BUSWCON1's ECSE bit.
     */
    inline EBU_BUSWCON1_ECSE get_BUSWCON1_ECSE()
    {
        return EBU_BUSWCON1_ECSE(BUSWCON1 & (1u << 16u));
    }

    /**
     * Set BUSWCON1's ECSE bit.
     */
    inline void set_BUSWCON1_ECSE()
    {
        BUSWCON1 |= 1u << 16u;
    }

    /**
     * Clear BUSWCON1's ECSE bit.
     */
    inline void clear_BUSWCON1_ECSE()
    {
        BUSWCON1 &= ~(1u << 16u);
    }

    /**
     * Toggle BUSWCON1's ECSE bit.
     */
    inline void toggle_BUSWCON1_ECSE()
    {
        BUSWCON1 ^= 1u << 16u;
    }

    /**
     * Get BUSWCON1's NAA bit.
     */
    inline bool get_BUSWCON1_NAA()
    {
        return BUSWCON1 & (1u << 7u);
    }

    /**
     * Get BUSWCON1's FBBMSEL bit.
     */
    inline EBU_BUSWCON1_FBBMSEL get_BUSWCON1_FBBMSEL()
    {
        return EBU_BUSWCON1_FBBMSEL(BUSWCON1 & (1u << 3u));
    }

    /**
     * Set BUSWCON1's FBBMSEL bit.
     */
    inline void set_BUSWCON1_FBBMSEL()
    {
        BUSWCON1 |= 1u << 3u;
    }

    /**
     * Clear BUSWCON1's FBBMSEL bit.
     */
    inline void clear_BUSWCON1_FBBMSEL()
    {
        BUSWCON1 &= ~(1u << 3u);
    }

    /**
     * Toggle BUSWCON1's FBBMSEL bit.
     */
    inline void toggle_BUSWCON1_FBBMSEL()
    {
        BUSWCON1 ^= 1u << 3u;
    }

    /**
     * Get BUSWCON1's FETBLEN field.
     */
    inline EBU_BUSWCON1_FETBLEN get_BUSWCON1_FETBLEN()
    {
        return EBU_BUSWCON1_FETBLEN((BUSWCON1 >> 0u) & 0b111u);
    }

    /**
     * Set BUSWCON1's FETBLEN field.
     */
    inline void set_BUSWCON1_FETBLEN(EBU_BUSWCON1_FETBLEN value)
    {
        uint32_t curr = BUSWCON1;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        BUSWCON1 = curr;
    }

    /**
     * Get all of BUSWCON1's bit fields.
     */
    inline void get_BUSWCON1(uint8_t &AGEN, EBU_BUSWCON1_LOCKCS &LOCKCS, EBU_BUSWCON1_AAP &AAP, uint8_t &WAIT, uint8_t &PORTW, EBU_BUSWCON1_BCGEN &BCGEN, EBU_BUSWCON1_WAITINV &WAITINV, EBU_BUSWCON1_EBSE &EBSE, EBU_BUSWCON1_ECSE &ECSE, bool &NAA, EBU_BUSWCON1_FBBMSEL &FBBMSEL, EBU_BUSWCON1_FETBLEN &FETBLEN)
    {
        uint32_t curr = BUSWCON1;

        AGEN = (curr >> 28u) & 0b1111u;
        LOCKCS = EBU_BUSWCON1_LOCKCS(curr & (1u << 27u));
        AAP = EBU_BUSWCON1_AAP(curr & (1u << 26u));
        WAIT = (curr >> 24u) & 0b11u;
        PORTW = (curr >> 22u) & 0b11u;
        BCGEN = EBU_BUSWCON1_BCGEN((curr >> 20u) & 0b11u);
        WAITINV = EBU_BUSWCON1_WAITINV(curr & (1u << 19u));
        EBSE = EBU_BUSWCON1_EBSE(curr & (1u << 17u));
        ECSE = EBU_BUSWCON1_ECSE(curr & (1u << 16u));
        NAA = curr & (1u << 7u);
        FBBMSEL = EBU_BUSWCON1_FBBMSEL(curr & (1u << 3u));
        FETBLEN = EBU_BUSWCON1_FETBLEN((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of BUSWCON1's bit fields.
     */
    inline void set_BUSWCON1(uint8_t AGEN, EBU_BUSWCON1_LOCKCS LOCKCS, EBU_BUSWCON1_AAP AAP, uint8_t WAIT, EBU_BUSWCON1_BCGEN BCGEN, EBU_BUSWCON1_WAITINV WAITINV, EBU_BUSWCON1_EBSE EBSE, EBU_BUSWCON1_ECSE ECSE, EBU_BUSWCON1_FBBMSEL FBBMSEL, EBU_BUSWCON1_FETBLEN FETBLEN)
    {
        uint32_t curr = BUSWCON1;

        curr &= ~(0b1111u << 28u);
        curr |= (AGEN & 0b1111u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (std::to_underlying(LOCKCS) & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(AAP) & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (WAIT & 0b11u) << 24u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(BCGEN) & 0b11u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(WAITINV) & 0b1u) << 19u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(EBSE) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ECSE) & 0b1u) << 16u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(FBBMSEL) & 0b1u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(FETBLEN) & 0b111u) << 0u;

        BUSWCON1 = curr;
    }

    /**
     * Get BUSWAP1's ADDRC field.
     */
    inline EBU_BUSWAP1_ADDRC get_BUSWAP1_ADDRC()
    {
        return EBU_BUSWAP1_ADDRC((BUSWAP1 >> 28u) & 0b1111u);
    }

    /**
     * Set BUSWAP1's ADDRC field.
     */
    inline void set_BUSWAP1_ADDRC(EBU_BUSWAP1_ADDRC value)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        BUSWAP1 = curr;
    }

    /**
     * Get BUSWAP1's AHOLDC field.
     */
    inline EBU_BUSWAP1_AHOLDC get_BUSWAP1_AHOLDC()
    {
        return EBU_BUSWAP1_AHOLDC((BUSWAP1 >> 24u) & 0b1111u);
    }

    /**
     * Set BUSWAP1's AHOLDC field.
     */
    inline void set_BUSWAP1_AHOLDC(EBU_BUSWAP1_AHOLDC value)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        BUSWAP1 = curr;
    }

    /**
     * Get BUSWAP1's CMDDELAY field.
     */
    inline EBU_BUSWAP1_CMDDELAY get_BUSWAP1_CMDDELAY()
    {
        return EBU_BUSWAP1_CMDDELAY((BUSWAP1 >> 20u) & 0b1111u);
    }

    /**
     * Set BUSWAP1's CMDDELAY field.
     */
    inline void set_BUSWAP1_CMDDELAY(EBU_BUSWAP1_CMDDELAY value)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        BUSWAP1 = curr;
    }

    /**
     * Get BUSWAP1's EXTDATA field.
     */
    inline EBU_BUSWAP1_EXTDATA get_BUSWAP1_EXTDATA()
    {
        return EBU_BUSWAP1_EXTDATA((BUSWAP1 >> 18u) & 0b11u);
    }

    /**
     * Set BUSWAP1's EXTDATA field.
     */
    inline void set_BUSWAP1_EXTDATA(EBU_BUSWAP1_EXTDATA value)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        BUSWAP1 = curr;
    }

    /**
     * Get BUSWAP1's EXTCLOCK field.
     */
    inline EBU_BUSWAP1_EXTCLOCK get_BUSWAP1_EXTCLOCK()
    {
        return EBU_BUSWAP1_EXTCLOCK((BUSWAP1 >> 16u) & 0b11u);
    }

    /**
     * Set BUSWAP1's EXTCLOCK field.
     */
    inline void set_BUSWAP1_EXTCLOCK(EBU_BUSWAP1_EXTCLOCK value)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        BUSWAP1 = curr;
    }

    /**
     * Get BUSWAP1's DATAC field.
     */
    inline EBU_BUSWAP1_DATAC get_BUSWAP1_DATAC()
    {
        return EBU_BUSWAP1_DATAC((BUSWAP1 >> 12u) & 0b1111u);
    }

    /**
     * Set BUSWAP1's DATAC field.
     */
    inline void set_BUSWAP1_DATAC(EBU_BUSWAP1_DATAC value)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        BUSWAP1 = curr;
    }

    /**
     * Get BUSWAP1's WAITWRC field.
     */
    inline EBU_BUSWAP1_WAITWRC get_BUSWAP1_WAITWRC()
    {
        return EBU_BUSWAP1_WAITWRC((BUSWAP1 >> 7u) & 0b11111u);
    }

    /**
     * Set BUSWAP1's WAITWRC field.
     */
    inline void set_BUSWAP1_WAITWRC(EBU_BUSWAP1_WAITWRC value)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(value) & 0b11111u) << 7u;

        BUSWAP1 = curr;
    }

    /**
     * Get BUSWAP1's WRRECOVC field.
     */
    inline EBU_BUSWAP1_WRRECOVC get_BUSWAP1_WRRECOVC()
    {
        return EBU_BUSWAP1_WRRECOVC((BUSWAP1 >> 4u) & 0b111u);
    }

    /**
     * Set BUSWAP1's WRRECOVC field.
     */
    inline void set_BUSWAP1_WRRECOVC(EBU_BUSWAP1_WRRECOVC value)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        BUSWAP1 = curr;
    }

    /**
     * Get BUSWAP1's WRDTACS field.
     */
    inline EBU_BUSWAP1_WRDTACS get_BUSWAP1_WRDTACS()
    {
        return EBU_BUSWAP1_WRDTACS((BUSWAP1 >> 0u) & 0b1111u);
    }

    /**
     * Set BUSWAP1's WRDTACS field.
     */
    inline void set_BUSWAP1_WRDTACS(EBU_BUSWAP1_WRDTACS value)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BUSWAP1 = curr;
    }

    /**
     * Get all of BUSWAP1's bit fields.
     */
    inline void get_BUSWAP1(EBU_BUSWAP1_ADDRC &ADDRC, EBU_BUSWAP1_AHOLDC &AHOLDC, EBU_BUSWAP1_CMDDELAY &CMDDELAY, EBU_BUSWAP1_EXTDATA &EXTDATA, EBU_BUSWAP1_EXTCLOCK &EXTCLOCK, EBU_BUSWAP1_DATAC &DATAC, EBU_BUSWAP1_WAITWRC &WAITWRC, EBU_BUSWAP1_WRRECOVC &WRRECOVC, EBU_BUSWAP1_WRDTACS &WRDTACS)
    {
        uint32_t curr = BUSWAP1;

        ADDRC = EBU_BUSWAP1_ADDRC((curr >> 28u) & 0b1111u);
        AHOLDC = EBU_BUSWAP1_AHOLDC((curr >> 24u) & 0b1111u);
        CMDDELAY = EBU_BUSWAP1_CMDDELAY((curr >> 20u) & 0b1111u);
        EXTDATA = EBU_BUSWAP1_EXTDATA((curr >> 18u) & 0b11u);
        EXTCLOCK = EBU_BUSWAP1_EXTCLOCK((curr >> 16u) & 0b11u);
        DATAC = EBU_BUSWAP1_DATAC((curr >> 12u) & 0b1111u);
        WAITWRC = EBU_BUSWAP1_WAITWRC((curr >> 7u) & 0b11111u);
        WRRECOVC = EBU_BUSWAP1_WRRECOVC((curr >> 4u) & 0b111u);
        WRDTACS = EBU_BUSWAP1_WRDTACS((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of BUSWAP1's bit fields.
     */
    inline void set_BUSWAP1(EBU_BUSWAP1_ADDRC ADDRC, EBU_BUSWAP1_AHOLDC AHOLDC, EBU_BUSWAP1_CMDDELAY CMDDELAY, EBU_BUSWAP1_EXTDATA EXTDATA, EBU_BUSWAP1_EXTCLOCK EXTCLOCK, EBU_BUSWAP1_DATAC DATAC, EBU_BUSWAP1_WAITWRC WAITWRC, EBU_BUSWAP1_WRRECOVC WRRECOVC, EBU_BUSWAP1_WRDTACS WRDTACS)
    {
        uint32_t curr = BUSWAP1;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(ADDRC) & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(AHOLDC) & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(CMDDELAY) & 0b1111u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EXTDATA) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(EXTCLOCK) & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(DATAC) & 0b1111u) << 12u;
        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(WAITWRC) & 0b11111u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(WRRECOVC) & 0b111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(WRDTACS) & 0b1111u) << 0u;

        BUSWAP1 = curr;
    }

    /**
     * Get BUSRCON2's AGEN field.
     */
    inline uint8_t get_BUSRCON2_AGEN()
    {
        return (BUSRCON2 >> 28u) & 0b1111u;
    }

    /**
     * Set BUSRCON2's AGEN field.
     */
    inline void set_BUSRCON2_AGEN(uint8_t value)
    {
        uint32_t curr = BUSRCON2;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        BUSRCON2 = curr;
    }

    /**
     * Get BUSRCON2's AAP bit.
     */
    inline EBU_BUSRCON2_AAP get_BUSRCON2_AAP()
    {
        return EBU_BUSRCON2_AAP(BUSRCON2 & (1u << 26u));
    }

    /**
     * Set BUSRCON2's AAP bit.
     */
    inline void set_BUSRCON2_AAP()
    {
        BUSRCON2 |= 1u << 26u;
    }

    /**
     * Clear BUSRCON2's AAP bit.
     */
    inline void clear_BUSRCON2_AAP()
    {
        BUSRCON2 &= ~(1u << 26u);
    }

    /**
     * Toggle BUSRCON2's AAP bit.
     */
    inline void toggle_BUSRCON2_AAP()
    {
        BUSRCON2 ^= 1u << 26u;
    }

    /**
     * Get BUSRCON2's WAIT field.
     */
    inline uint8_t get_BUSRCON2_WAIT()
    {
        return (BUSRCON2 >> 24u) & 0b11u;
    }

    /**
     * Set BUSRCON2's WAIT field.
     */
    inline void set_BUSRCON2_WAIT(uint8_t value)
    {
        uint32_t curr = BUSRCON2;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        BUSRCON2 = curr;
    }

    /**
     * Get BUSRCON2's PORTW field.
     */
    inline uint8_t get_BUSRCON2_PORTW()
    {
        return (BUSRCON2 >> 22u) & 0b11u;
    }

    /**
     * Set BUSRCON2's PORTW field.
     */
    inline void set_BUSRCON2_PORTW(uint8_t value)
    {
        uint32_t curr = BUSRCON2;

        curr &= ~(0b11u << 22u);
        curr |= (value & 0b11u) << 22u;

        BUSRCON2 = curr;
    }

    /**
     * Get BUSRCON2's BCGEN field.
     */
    inline EBU_BUSRCON2_BCGEN get_BUSRCON2_BCGEN()
    {
        return EBU_BUSRCON2_BCGEN((BUSRCON2 >> 20u) & 0b11u);
    }

    /**
     * Set BUSRCON2's BCGEN field.
     */
    inline void set_BUSRCON2_BCGEN(EBU_BUSRCON2_BCGEN value)
    {
        uint32_t curr = BUSRCON2;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        BUSRCON2 = curr;
    }

    /**
     * Get BUSRCON2's WAITINV bit.
     */
    inline EBU_BUSRCON2_WAITINV get_BUSRCON2_WAITINV()
    {
        return EBU_BUSRCON2_WAITINV(BUSRCON2 & (1u << 19u));
    }

    /**
     * Set BUSRCON2's WAITINV bit.
     */
    inline void set_BUSRCON2_WAITINV()
    {
        BUSRCON2 |= 1u << 19u;
    }

    /**
     * Clear BUSRCON2's WAITINV bit.
     */
    inline void clear_BUSRCON2_WAITINV()
    {
        BUSRCON2 &= ~(1u << 19u);
    }

    /**
     * Toggle BUSRCON2's WAITINV bit.
     */
    inline void toggle_BUSRCON2_WAITINV()
    {
        BUSRCON2 ^= 1u << 19u;
    }

    /**
     * Get BUSRCON2's DBA bit.
     */
    inline EBU_BUSRCON2_DBA get_BUSRCON2_DBA()
    {
        return EBU_BUSRCON2_DBA(BUSRCON2 & (1u << 18u));
    }

    /**
     * Set BUSRCON2's DBA bit.
     */
    inline void set_BUSRCON2_DBA()
    {
        BUSRCON2 |= 1u << 18u;
    }

    /**
     * Clear BUSRCON2's DBA bit.
     */
    inline void clear_BUSRCON2_DBA()
    {
        BUSRCON2 &= ~(1u << 18u);
    }

    /**
     * Toggle BUSRCON2's DBA bit.
     */
    inline void toggle_BUSRCON2_DBA()
    {
        BUSRCON2 ^= 1u << 18u;
    }

    /**
     * Get BUSRCON2's EBSE bit.
     */
    inline EBU_BUSRCON2_EBSE get_BUSRCON2_EBSE()
    {
        return EBU_BUSRCON2_EBSE(BUSRCON2 & (1u << 17u));
    }

    /**
     * Set BUSRCON2's EBSE bit.
     */
    inline void set_BUSRCON2_EBSE()
    {
        BUSRCON2 |= 1u << 17u;
    }

    /**
     * Clear BUSRCON2's EBSE bit.
     */
    inline void clear_BUSRCON2_EBSE()
    {
        BUSRCON2 &= ~(1u << 17u);
    }

    /**
     * Toggle BUSRCON2's EBSE bit.
     */
    inline void toggle_BUSRCON2_EBSE()
    {
        BUSRCON2 ^= 1u << 17u;
    }

    /**
     * Get BUSRCON2's ECSE bit.
     */
    inline EBU_BUSRCON2_ECSE get_BUSRCON2_ECSE()
    {
        return EBU_BUSRCON2_ECSE(BUSRCON2 & (1u << 16u));
    }

    /**
     * Set BUSRCON2's ECSE bit.
     */
    inline void set_BUSRCON2_ECSE()
    {
        BUSRCON2 |= 1u << 16u;
    }

    /**
     * Clear BUSRCON2's ECSE bit.
     */
    inline void clear_BUSRCON2_ECSE()
    {
        BUSRCON2 &= ~(1u << 16u);
    }

    /**
     * Toggle BUSRCON2's ECSE bit.
     */
    inline void toggle_BUSRCON2_ECSE()
    {
        BUSRCON2 ^= 1u << 16u;
    }

    /**
     * Get BUSRCON2's NAA bit.
     */
    inline bool get_BUSRCON2_NAA()
    {
        return BUSRCON2 & (1u << 7u);
    }

    /**
     * Set BUSRCON2's NAA bit.
     */
    inline void set_BUSRCON2_NAA()
    {
        BUSRCON2 |= 1u << 7u;
    }

    /**
     * Clear BUSRCON2's NAA bit.
     */
    inline void clear_BUSRCON2_NAA()
    {
        BUSRCON2 &= ~(1u << 7u);
    }

    /**
     * Toggle BUSRCON2's NAA bit.
     */
    inline void toggle_BUSRCON2_NAA()
    {
        BUSRCON2 ^= 1u << 7u;
    }

    /**
     * Get BUSRCON2's BFCMSEL bit.
     */
    inline EBU_BUSRCON2_BFCMSEL get_BUSRCON2_BFCMSEL()
    {
        return EBU_BUSRCON2_BFCMSEL(BUSRCON2 & (1u << 6u));
    }

    /**
     * Set BUSRCON2's BFCMSEL bit.
     */
    inline void set_BUSRCON2_BFCMSEL()
    {
        BUSRCON2 |= 1u << 6u;
    }

    /**
     * Clear BUSRCON2's BFCMSEL bit.
     */
    inline void clear_BUSRCON2_BFCMSEL()
    {
        BUSRCON2 &= ~(1u << 6u);
    }

    /**
     * Toggle BUSRCON2's BFCMSEL bit.
     */
    inline void toggle_BUSRCON2_BFCMSEL()
    {
        BUSRCON2 ^= 1u << 6u;
    }

    /**
     * Get BUSRCON2's FDBKEN bit.
     */
    inline EBU_BUSRCON2_FDBKEN get_BUSRCON2_FDBKEN()
    {
        return EBU_BUSRCON2_FDBKEN(BUSRCON2 & (1u << 5u));
    }

    /**
     * Set BUSRCON2's FDBKEN bit.
     */
    inline void set_BUSRCON2_FDBKEN()
    {
        BUSRCON2 |= 1u << 5u;
    }

    /**
     * Clear BUSRCON2's FDBKEN bit.
     */
    inline void clear_BUSRCON2_FDBKEN()
    {
        BUSRCON2 &= ~(1u << 5u);
    }

    /**
     * Toggle BUSRCON2's FDBKEN bit.
     */
    inline void toggle_BUSRCON2_FDBKEN()
    {
        BUSRCON2 ^= 1u << 5u;
    }

    /**
     * Get BUSRCON2's BFSSS bit.
     */
    inline EBU_BUSRCON2_BFSSS get_BUSRCON2_BFSSS()
    {
        return EBU_BUSRCON2_BFSSS(BUSRCON2 & (1u << 4u));
    }

    /**
     * Set BUSRCON2's BFSSS bit.
     */
    inline void set_BUSRCON2_BFSSS()
    {
        BUSRCON2 |= 1u << 4u;
    }

    /**
     * Clear BUSRCON2's BFSSS bit.
     */
    inline void clear_BUSRCON2_BFSSS()
    {
        BUSRCON2 &= ~(1u << 4u);
    }

    /**
     * Toggle BUSRCON2's BFSSS bit.
     */
    inline void toggle_BUSRCON2_BFSSS()
    {
        BUSRCON2 ^= 1u << 4u;
    }

    /**
     * Get BUSRCON2's FBBMSEL bit.
     */
    inline EBU_BUSRCON2_FBBMSEL get_BUSRCON2_FBBMSEL()
    {
        return EBU_BUSRCON2_FBBMSEL(BUSRCON2 & (1u << 3u));
    }

    /**
     * Set BUSRCON2's FBBMSEL bit.
     */
    inline void set_BUSRCON2_FBBMSEL()
    {
        BUSRCON2 |= 1u << 3u;
    }

    /**
     * Clear BUSRCON2's FBBMSEL bit.
     */
    inline void clear_BUSRCON2_FBBMSEL()
    {
        BUSRCON2 &= ~(1u << 3u);
    }

    /**
     * Toggle BUSRCON2's FBBMSEL bit.
     */
    inline void toggle_BUSRCON2_FBBMSEL()
    {
        BUSRCON2 ^= 1u << 3u;
    }

    /**
     * Get BUSRCON2's FETBLEN field.
     */
    inline EBU_BUSRCON2_FETBLEN get_BUSRCON2_FETBLEN()
    {
        return EBU_BUSRCON2_FETBLEN((BUSRCON2 >> 0u) & 0b111u);
    }

    /**
     * Set BUSRCON2's FETBLEN field.
     */
    inline void set_BUSRCON2_FETBLEN(EBU_BUSRCON2_FETBLEN value)
    {
        uint32_t curr = BUSRCON2;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        BUSRCON2 = curr;
    }

    /**
     * Get all of BUSRCON2's bit fields.
     */
    inline void get_BUSRCON2(uint8_t &AGEN, EBU_BUSRCON2_AAP &AAP, uint8_t &WAIT, uint8_t &PORTW, EBU_BUSRCON2_BCGEN &BCGEN, EBU_BUSRCON2_WAITINV &WAITINV, EBU_BUSRCON2_DBA &DBA, EBU_BUSRCON2_EBSE &EBSE, EBU_BUSRCON2_ECSE &ECSE, bool &NAA, EBU_BUSRCON2_BFCMSEL &BFCMSEL, EBU_BUSRCON2_FDBKEN &FDBKEN, EBU_BUSRCON2_BFSSS &BFSSS, EBU_BUSRCON2_FBBMSEL &FBBMSEL, EBU_BUSRCON2_FETBLEN &FETBLEN)
    {
        uint32_t curr = BUSRCON2;

        AGEN = (curr >> 28u) & 0b1111u;
        AAP = EBU_BUSRCON2_AAP(curr & (1u << 26u));
        WAIT = (curr >> 24u) & 0b11u;
        PORTW = (curr >> 22u) & 0b11u;
        BCGEN = EBU_BUSRCON2_BCGEN((curr >> 20u) & 0b11u);
        WAITINV = EBU_BUSRCON2_WAITINV(curr & (1u << 19u));
        DBA = EBU_BUSRCON2_DBA(curr & (1u << 18u));
        EBSE = EBU_BUSRCON2_EBSE(curr & (1u << 17u));
        ECSE = EBU_BUSRCON2_ECSE(curr & (1u << 16u));
        NAA = curr & (1u << 7u);
        BFCMSEL = EBU_BUSRCON2_BFCMSEL(curr & (1u << 6u));
        FDBKEN = EBU_BUSRCON2_FDBKEN(curr & (1u << 5u));
        BFSSS = EBU_BUSRCON2_BFSSS(curr & (1u << 4u));
        FBBMSEL = EBU_BUSRCON2_FBBMSEL(curr & (1u << 3u));
        FETBLEN = EBU_BUSRCON2_FETBLEN((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of BUSRCON2's bit fields.
     */
    inline void set_BUSRCON2(uint8_t AGEN, EBU_BUSRCON2_AAP AAP, uint8_t WAIT, uint8_t PORTW, EBU_BUSRCON2_BCGEN BCGEN, EBU_BUSRCON2_WAITINV WAITINV, EBU_BUSRCON2_DBA DBA, EBU_BUSRCON2_EBSE EBSE, EBU_BUSRCON2_ECSE ECSE, bool NAA, EBU_BUSRCON2_BFCMSEL BFCMSEL, EBU_BUSRCON2_FDBKEN FDBKEN, EBU_BUSRCON2_BFSSS BFSSS, EBU_BUSRCON2_FBBMSEL FBBMSEL, EBU_BUSRCON2_FETBLEN FETBLEN)
    {
        uint32_t curr = BUSRCON2;

        curr &= ~(0b1111u << 28u);
        curr |= (AGEN & 0b1111u) << 28u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(AAP) & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (WAIT & 0b11u) << 24u;
        curr &= ~(0b11u << 22u);
        curr |= (PORTW & 0b11u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(BCGEN) & 0b11u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(WAITINV) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(DBA) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(EBSE) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ECSE) & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (NAA & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(BFCMSEL) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(FDBKEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(BFSSS) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(FBBMSEL) & 0b1u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(FETBLEN) & 0b111u) << 0u;

        BUSRCON2 = curr;
    }

    /**
     * Get BUSRAP2's ADDRC field.
     */
    inline EBU_BUSRAP2_ADDRC get_BUSRAP2_ADDRC()
    {
        return EBU_BUSRAP2_ADDRC((BUSRAP2 >> 28u) & 0b1111u);
    }

    /**
     * Set BUSRAP2's ADDRC field.
     */
    inline void set_BUSRAP2_ADDRC(EBU_BUSRAP2_ADDRC value)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        BUSRAP2 = curr;
    }

    /**
     * Get BUSRAP2's AHOLDC field.
     */
    inline EBU_BUSRAP2_AHOLDC get_BUSRAP2_AHOLDC()
    {
        return EBU_BUSRAP2_AHOLDC((BUSRAP2 >> 24u) & 0b1111u);
    }

    /**
     * Set BUSRAP2's AHOLDC field.
     */
    inline void set_BUSRAP2_AHOLDC(EBU_BUSRAP2_AHOLDC value)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        BUSRAP2 = curr;
    }

    /**
     * Get BUSRAP2's CMDDELAY field.
     */
    inline EBU_BUSRAP2_CMDDELAY get_BUSRAP2_CMDDELAY()
    {
        return EBU_BUSRAP2_CMDDELAY((BUSRAP2 >> 20u) & 0b1111u);
    }

    /**
     * Set BUSRAP2's CMDDELAY field.
     */
    inline void set_BUSRAP2_CMDDELAY(EBU_BUSRAP2_CMDDELAY value)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        BUSRAP2 = curr;
    }

    /**
     * Get BUSRAP2's EXTDATA field.
     */
    inline EBU_BUSRAP2_EXTDATA get_BUSRAP2_EXTDATA()
    {
        return EBU_BUSRAP2_EXTDATA((BUSRAP2 >> 18u) & 0b11u);
    }

    /**
     * Set BUSRAP2's EXTDATA field.
     */
    inline void set_BUSRAP2_EXTDATA(EBU_BUSRAP2_EXTDATA value)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        BUSRAP2 = curr;
    }

    /**
     * Get BUSRAP2's EXTCLOCK field.
     */
    inline EBU_BUSRAP2_EXTCLOCK get_BUSRAP2_EXTCLOCK()
    {
        return EBU_BUSRAP2_EXTCLOCK((BUSRAP2 >> 16u) & 0b11u);
    }

    /**
     * Set BUSRAP2's EXTCLOCK field.
     */
    inline void set_BUSRAP2_EXTCLOCK(EBU_BUSRAP2_EXTCLOCK value)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        BUSRAP2 = curr;
    }

    /**
     * Get BUSRAP2's DATAC field.
     */
    inline uint8_t get_BUSRAP2_DATAC()
    {
        return (BUSRAP2 >> 12u) & 0b1111u;
    }

    /**
     * Set BUSRAP2's DATAC field.
     */
    inline void set_BUSRAP2_DATAC(uint8_t value)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        BUSRAP2 = curr;
    }

    /**
     * Get BUSRAP2's WAITRDC field.
     */
    inline EBU_BUSRAP2_WAITRDC get_BUSRAP2_WAITRDC()
    {
        return EBU_BUSRAP2_WAITRDC((BUSRAP2 >> 7u) & 0b11111u);
    }

    /**
     * Set BUSRAP2's WAITRDC field.
     */
    inline void set_BUSRAP2_WAITRDC(EBU_BUSRAP2_WAITRDC value)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(value) & 0b11111u) << 7u;

        BUSRAP2 = curr;
    }

    /**
     * Get BUSRAP2's RDRECOVC field.
     */
    inline EBU_BUSRAP2_RDRECOVC get_BUSRAP2_RDRECOVC()
    {
        return EBU_BUSRAP2_RDRECOVC((BUSRAP2 >> 4u) & 0b111u);
    }

    /**
     * Set BUSRAP2's RDRECOVC field.
     */
    inline void set_BUSRAP2_RDRECOVC(EBU_BUSRAP2_RDRECOVC value)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        BUSRAP2 = curr;
    }

    /**
     * Get BUSRAP2's RDDTACS field.
     */
    inline EBU_BUSRAP2_RDDTACS get_BUSRAP2_RDDTACS()
    {
        return EBU_BUSRAP2_RDDTACS((BUSRAP2 >> 0u) & 0b1111u);
    }

    /**
     * Set BUSRAP2's RDDTACS field.
     */
    inline void set_BUSRAP2_RDDTACS(EBU_BUSRAP2_RDDTACS value)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BUSRAP2 = curr;
    }

    /**
     * Get all of BUSRAP2's bit fields.
     */
    inline void get_BUSRAP2(EBU_BUSRAP2_ADDRC &ADDRC, EBU_BUSRAP2_AHOLDC &AHOLDC, EBU_BUSRAP2_CMDDELAY &CMDDELAY, EBU_BUSRAP2_EXTDATA &EXTDATA, EBU_BUSRAP2_EXTCLOCK &EXTCLOCK, uint8_t &DATAC, EBU_BUSRAP2_WAITRDC &WAITRDC, EBU_BUSRAP2_RDRECOVC &RDRECOVC, EBU_BUSRAP2_RDDTACS &RDDTACS)
    {
        uint32_t curr = BUSRAP2;

        ADDRC = EBU_BUSRAP2_ADDRC((curr >> 28u) & 0b1111u);
        AHOLDC = EBU_BUSRAP2_AHOLDC((curr >> 24u) & 0b1111u);
        CMDDELAY = EBU_BUSRAP2_CMDDELAY((curr >> 20u) & 0b1111u);
        EXTDATA = EBU_BUSRAP2_EXTDATA((curr >> 18u) & 0b11u);
        EXTCLOCK = EBU_BUSRAP2_EXTCLOCK((curr >> 16u) & 0b11u);
        DATAC = (curr >> 12u) & 0b1111u;
        WAITRDC = EBU_BUSRAP2_WAITRDC((curr >> 7u) & 0b11111u);
        RDRECOVC = EBU_BUSRAP2_RDRECOVC((curr >> 4u) & 0b111u);
        RDDTACS = EBU_BUSRAP2_RDDTACS((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of BUSRAP2's bit fields.
     */
    inline void set_BUSRAP2(EBU_BUSRAP2_ADDRC ADDRC, EBU_BUSRAP2_AHOLDC AHOLDC, EBU_BUSRAP2_CMDDELAY CMDDELAY, EBU_BUSRAP2_EXTDATA EXTDATA, EBU_BUSRAP2_EXTCLOCK EXTCLOCK, uint8_t DATAC, EBU_BUSRAP2_WAITRDC WAITRDC, EBU_BUSRAP2_RDRECOVC RDRECOVC, EBU_BUSRAP2_RDDTACS RDDTACS)
    {
        uint32_t curr = BUSRAP2;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(ADDRC) & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(AHOLDC) & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(CMDDELAY) & 0b1111u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EXTDATA) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(EXTCLOCK) & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (DATAC & 0b1111u) << 12u;
        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(WAITRDC) & 0b11111u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(RDRECOVC) & 0b111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(RDDTACS) & 0b1111u) << 0u;

        BUSRAP2 = curr;
    }

    /**
     * Get BUSWCON2's AGEN field.
     */
    inline uint8_t get_BUSWCON2_AGEN()
    {
        return (BUSWCON2 >> 28u) & 0b1111u;
    }

    /**
     * Set BUSWCON2's AGEN field.
     */
    inline void set_BUSWCON2_AGEN(uint8_t value)
    {
        uint32_t curr = BUSWCON2;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        BUSWCON2 = curr;
    }

    /**
     * Get BUSWCON2's LOCKCS bit.
     */
    inline EBU_BUSWCON2_LOCKCS get_BUSWCON2_LOCKCS()
    {
        return EBU_BUSWCON2_LOCKCS(BUSWCON2 & (1u << 27u));
    }

    /**
     * Set BUSWCON2's LOCKCS bit.
     */
    inline void set_BUSWCON2_LOCKCS()
    {
        BUSWCON2 |= 1u << 27u;
    }

    /**
     * Clear BUSWCON2's LOCKCS bit.
     */
    inline void clear_BUSWCON2_LOCKCS()
    {
        BUSWCON2 &= ~(1u << 27u);
    }

    /**
     * Toggle BUSWCON2's LOCKCS bit.
     */
    inline void toggle_BUSWCON2_LOCKCS()
    {
        BUSWCON2 ^= 1u << 27u;
    }

    /**
     * Get BUSWCON2's AAP bit.
     */
    inline EBU_BUSWCON2_AAP get_BUSWCON2_AAP()
    {
        return EBU_BUSWCON2_AAP(BUSWCON2 & (1u << 26u));
    }

    /**
     * Set BUSWCON2's AAP bit.
     */
    inline void set_BUSWCON2_AAP()
    {
        BUSWCON2 |= 1u << 26u;
    }

    /**
     * Clear BUSWCON2's AAP bit.
     */
    inline void clear_BUSWCON2_AAP()
    {
        BUSWCON2 &= ~(1u << 26u);
    }

    /**
     * Toggle BUSWCON2's AAP bit.
     */
    inline void toggle_BUSWCON2_AAP()
    {
        BUSWCON2 ^= 1u << 26u;
    }

    /**
     * Get BUSWCON2's WAIT field.
     */
    inline uint8_t get_BUSWCON2_WAIT()
    {
        return (BUSWCON2 >> 24u) & 0b11u;
    }

    /**
     * Set BUSWCON2's WAIT field.
     */
    inline void set_BUSWCON2_WAIT(uint8_t value)
    {
        uint32_t curr = BUSWCON2;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        BUSWCON2 = curr;
    }

    /**
     * Get BUSWCON2's PORTW field.
     */
    inline uint8_t get_BUSWCON2_PORTW()
    {
        return (BUSWCON2 >> 22u) & 0b11u;
    }

    /**
     * Get BUSWCON2's BCGEN field.
     */
    inline EBU_BUSWCON2_BCGEN get_BUSWCON2_BCGEN()
    {
        return EBU_BUSWCON2_BCGEN((BUSWCON2 >> 20u) & 0b11u);
    }

    /**
     * Set BUSWCON2's BCGEN field.
     */
    inline void set_BUSWCON2_BCGEN(EBU_BUSWCON2_BCGEN value)
    {
        uint32_t curr = BUSWCON2;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        BUSWCON2 = curr;
    }

    /**
     * Get BUSWCON2's WAITINV bit.
     */
    inline EBU_BUSWCON2_WAITINV get_BUSWCON2_WAITINV()
    {
        return EBU_BUSWCON2_WAITINV(BUSWCON2 & (1u << 19u));
    }

    /**
     * Set BUSWCON2's WAITINV bit.
     */
    inline void set_BUSWCON2_WAITINV()
    {
        BUSWCON2 |= 1u << 19u;
    }

    /**
     * Clear BUSWCON2's WAITINV bit.
     */
    inline void clear_BUSWCON2_WAITINV()
    {
        BUSWCON2 &= ~(1u << 19u);
    }

    /**
     * Toggle BUSWCON2's WAITINV bit.
     */
    inline void toggle_BUSWCON2_WAITINV()
    {
        BUSWCON2 ^= 1u << 19u;
    }

    /**
     * Get BUSWCON2's EBSE bit.
     */
    inline EBU_BUSWCON2_EBSE get_BUSWCON2_EBSE()
    {
        return EBU_BUSWCON2_EBSE(BUSWCON2 & (1u << 17u));
    }

    /**
     * Set BUSWCON2's EBSE bit.
     */
    inline void set_BUSWCON2_EBSE()
    {
        BUSWCON2 |= 1u << 17u;
    }

    /**
     * Clear BUSWCON2's EBSE bit.
     */
    inline void clear_BUSWCON2_EBSE()
    {
        BUSWCON2 &= ~(1u << 17u);
    }

    /**
     * Toggle BUSWCON2's EBSE bit.
     */
    inline void toggle_BUSWCON2_EBSE()
    {
        BUSWCON2 ^= 1u << 17u;
    }

    /**
     * Get BUSWCON2's ECSE bit.
     */
    inline EBU_BUSWCON2_ECSE get_BUSWCON2_ECSE()
    {
        return EBU_BUSWCON2_ECSE(BUSWCON2 & (1u << 16u));
    }

    /**
     * Set BUSWCON2's ECSE bit.
     */
    inline void set_BUSWCON2_ECSE()
    {
        BUSWCON2 |= 1u << 16u;
    }

    /**
     * Clear BUSWCON2's ECSE bit.
     */
    inline void clear_BUSWCON2_ECSE()
    {
        BUSWCON2 &= ~(1u << 16u);
    }

    /**
     * Toggle BUSWCON2's ECSE bit.
     */
    inline void toggle_BUSWCON2_ECSE()
    {
        BUSWCON2 ^= 1u << 16u;
    }

    /**
     * Get BUSWCON2's NAA bit.
     */
    inline bool get_BUSWCON2_NAA()
    {
        return BUSWCON2 & (1u << 7u);
    }

    /**
     * Get BUSWCON2's FBBMSEL bit.
     */
    inline EBU_BUSWCON2_FBBMSEL get_BUSWCON2_FBBMSEL()
    {
        return EBU_BUSWCON2_FBBMSEL(BUSWCON2 & (1u << 3u));
    }

    /**
     * Set BUSWCON2's FBBMSEL bit.
     */
    inline void set_BUSWCON2_FBBMSEL()
    {
        BUSWCON2 |= 1u << 3u;
    }

    /**
     * Clear BUSWCON2's FBBMSEL bit.
     */
    inline void clear_BUSWCON2_FBBMSEL()
    {
        BUSWCON2 &= ~(1u << 3u);
    }

    /**
     * Toggle BUSWCON2's FBBMSEL bit.
     */
    inline void toggle_BUSWCON2_FBBMSEL()
    {
        BUSWCON2 ^= 1u << 3u;
    }

    /**
     * Get BUSWCON2's FETBLEN field.
     */
    inline EBU_BUSWCON2_FETBLEN get_BUSWCON2_FETBLEN()
    {
        return EBU_BUSWCON2_FETBLEN((BUSWCON2 >> 0u) & 0b111u);
    }

    /**
     * Set BUSWCON2's FETBLEN field.
     */
    inline void set_BUSWCON2_FETBLEN(EBU_BUSWCON2_FETBLEN value)
    {
        uint32_t curr = BUSWCON2;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        BUSWCON2 = curr;
    }

    /**
     * Get all of BUSWCON2's bit fields.
     */
    inline void get_BUSWCON2(uint8_t &AGEN, EBU_BUSWCON2_LOCKCS &LOCKCS, EBU_BUSWCON2_AAP &AAP, uint8_t &WAIT, uint8_t &PORTW, EBU_BUSWCON2_BCGEN &BCGEN, EBU_BUSWCON2_WAITINV &WAITINV, EBU_BUSWCON2_EBSE &EBSE, EBU_BUSWCON2_ECSE &ECSE, bool &NAA, EBU_BUSWCON2_FBBMSEL &FBBMSEL, EBU_BUSWCON2_FETBLEN &FETBLEN)
    {
        uint32_t curr = BUSWCON2;

        AGEN = (curr >> 28u) & 0b1111u;
        LOCKCS = EBU_BUSWCON2_LOCKCS(curr & (1u << 27u));
        AAP = EBU_BUSWCON2_AAP(curr & (1u << 26u));
        WAIT = (curr >> 24u) & 0b11u;
        PORTW = (curr >> 22u) & 0b11u;
        BCGEN = EBU_BUSWCON2_BCGEN((curr >> 20u) & 0b11u);
        WAITINV = EBU_BUSWCON2_WAITINV(curr & (1u << 19u));
        EBSE = EBU_BUSWCON2_EBSE(curr & (1u << 17u));
        ECSE = EBU_BUSWCON2_ECSE(curr & (1u << 16u));
        NAA = curr & (1u << 7u);
        FBBMSEL = EBU_BUSWCON2_FBBMSEL(curr & (1u << 3u));
        FETBLEN = EBU_BUSWCON2_FETBLEN((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of BUSWCON2's bit fields.
     */
    inline void set_BUSWCON2(uint8_t AGEN, EBU_BUSWCON2_LOCKCS LOCKCS, EBU_BUSWCON2_AAP AAP, uint8_t WAIT, EBU_BUSWCON2_BCGEN BCGEN, EBU_BUSWCON2_WAITINV WAITINV, EBU_BUSWCON2_EBSE EBSE, EBU_BUSWCON2_ECSE ECSE, EBU_BUSWCON2_FBBMSEL FBBMSEL, EBU_BUSWCON2_FETBLEN FETBLEN)
    {
        uint32_t curr = BUSWCON2;

        curr &= ~(0b1111u << 28u);
        curr |= (AGEN & 0b1111u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (std::to_underlying(LOCKCS) & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(AAP) & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (WAIT & 0b11u) << 24u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(BCGEN) & 0b11u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(WAITINV) & 0b1u) << 19u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(EBSE) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ECSE) & 0b1u) << 16u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(FBBMSEL) & 0b1u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(FETBLEN) & 0b111u) << 0u;

        BUSWCON2 = curr;
    }

    /**
     * Get BUSWAP2's ADDRC field.
     */
    inline EBU_BUSWAP2_ADDRC get_BUSWAP2_ADDRC()
    {
        return EBU_BUSWAP2_ADDRC((BUSWAP2 >> 28u) & 0b1111u);
    }

    /**
     * Set BUSWAP2's ADDRC field.
     */
    inline void set_BUSWAP2_ADDRC(EBU_BUSWAP2_ADDRC value)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        BUSWAP2 = curr;
    }

    /**
     * Get BUSWAP2's AHOLDC field.
     */
    inline EBU_BUSWAP2_AHOLDC get_BUSWAP2_AHOLDC()
    {
        return EBU_BUSWAP2_AHOLDC((BUSWAP2 >> 24u) & 0b1111u);
    }

    /**
     * Set BUSWAP2's AHOLDC field.
     */
    inline void set_BUSWAP2_AHOLDC(EBU_BUSWAP2_AHOLDC value)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        BUSWAP2 = curr;
    }

    /**
     * Get BUSWAP2's CMDDELAY field.
     */
    inline EBU_BUSWAP2_CMDDELAY get_BUSWAP2_CMDDELAY()
    {
        return EBU_BUSWAP2_CMDDELAY((BUSWAP2 >> 20u) & 0b1111u);
    }

    /**
     * Set BUSWAP2's CMDDELAY field.
     */
    inline void set_BUSWAP2_CMDDELAY(EBU_BUSWAP2_CMDDELAY value)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        BUSWAP2 = curr;
    }

    /**
     * Get BUSWAP2's EXTDATA field.
     */
    inline EBU_BUSWAP2_EXTDATA get_BUSWAP2_EXTDATA()
    {
        return EBU_BUSWAP2_EXTDATA((BUSWAP2 >> 18u) & 0b11u);
    }

    /**
     * Set BUSWAP2's EXTDATA field.
     */
    inline void set_BUSWAP2_EXTDATA(EBU_BUSWAP2_EXTDATA value)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        BUSWAP2 = curr;
    }

    /**
     * Get BUSWAP2's EXTCLOCK field.
     */
    inline EBU_BUSWAP2_EXTCLOCK get_BUSWAP2_EXTCLOCK()
    {
        return EBU_BUSWAP2_EXTCLOCK((BUSWAP2 >> 16u) & 0b11u);
    }

    /**
     * Set BUSWAP2's EXTCLOCK field.
     */
    inline void set_BUSWAP2_EXTCLOCK(EBU_BUSWAP2_EXTCLOCK value)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        BUSWAP2 = curr;
    }

    /**
     * Get BUSWAP2's DATAC field.
     */
    inline EBU_BUSWAP2_DATAC get_BUSWAP2_DATAC()
    {
        return EBU_BUSWAP2_DATAC((BUSWAP2 >> 12u) & 0b1111u);
    }

    /**
     * Set BUSWAP2's DATAC field.
     */
    inline void set_BUSWAP2_DATAC(EBU_BUSWAP2_DATAC value)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        BUSWAP2 = curr;
    }

    /**
     * Get BUSWAP2's WAITWRC field.
     */
    inline EBU_BUSWAP2_WAITWRC get_BUSWAP2_WAITWRC()
    {
        return EBU_BUSWAP2_WAITWRC((BUSWAP2 >> 7u) & 0b11111u);
    }

    /**
     * Set BUSWAP2's WAITWRC field.
     */
    inline void set_BUSWAP2_WAITWRC(EBU_BUSWAP2_WAITWRC value)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(value) & 0b11111u) << 7u;

        BUSWAP2 = curr;
    }

    /**
     * Get BUSWAP2's WRRECOVC field.
     */
    inline EBU_BUSWAP2_WRRECOVC get_BUSWAP2_WRRECOVC()
    {
        return EBU_BUSWAP2_WRRECOVC((BUSWAP2 >> 4u) & 0b111u);
    }

    /**
     * Set BUSWAP2's WRRECOVC field.
     */
    inline void set_BUSWAP2_WRRECOVC(EBU_BUSWAP2_WRRECOVC value)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        BUSWAP2 = curr;
    }

    /**
     * Get BUSWAP2's WRDTACS field.
     */
    inline EBU_BUSWAP2_WRDTACS get_BUSWAP2_WRDTACS()
    {
        return EBU_BUSWAP2_WRDTACS((BUSWAP2 >> 0u) & 0b1111u);
    }

    /**
     * Set BUSWAP2's WRDTACS field.
     */
    inline void set_BUSWAP2_WRDTACS(EBU_BUSWAP2_WRDTACS value)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BUSWAP2 = curr;
    }

    /**
     * Get all of BUSWAP2's bit fields.
     */
    inline void get_BUSWAP2(EBU_BUSWAP2_ADDRC &ADDRC, EBU_BUSWAP2_AHOLDC &AHOLDC, EBU_BUSWAP2_CMDDELAY &CMDDELAY, EBU_BUSWAP2_EXTDATA &EXTDATA, EBU_BUSWAP2_EXTCLOCK &EXTCLOCK, EBU_BUSWAP2_DATAC &DATAC, EBU_BUSWAP2_WAITWRC &WAITWRC, EBU_BUSWAP2_WRRECOVC &WRRECOVC, EBU_BUSWAP2_WRDTACS &WRDTACS)
    {
        uint32_t curr = BUSWAP2;

        ADDRC = EBU_BUSWAP2_ADDRC((curr >> 28u) & 0b1111u);
        AHOLDC = EBU_BUSWAP2_AHOLDC((curr >> 24u) & 0b1111u);
        CMDDELAY = EBU_BUSWAP2_CMDDELAY((curr >> 20u) & 0b1111u);
        EXTDATA = EBU_BUSWAP2_EXTDATA((curr >> 18u) & 0b11u);
        EXTCLOCK = EBU_BUSWAP2_EXTCLOCK((curr >> 16u) & 0b11u);
        DATAC = EBU_BUSWAP2_DATAC((curr >> 12u) & 0b1111u);
        WAITWRC = EBU_BUSWAP2_WAITWRC((curr >> 7u) & 0b11111u);
        WRRECOVC = EBU_BUSWAP2_WRRECOVC((curr >> 4u) & 0b111u);
        WRDTACS = EBU_BUSWAP2_WRDTACS((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of BUSWAP2's bit fields.
     */
    inline void set_BUSWAP2(EBU_BUSWAP2_ADDRC ADDRC, EBU_BUSWAP2_AHOLDC AHOLDC, EBU_BUSWAP2_CMDDELAY CMDDELAY, EBU_BUSWAP2_EXTDATA EXTDATA, EBU_BUSWAP2_EXTCLOCK EXTCLOCK, EBU_BUSWAP2_DATAC DATAC, EBU_BUSWAP2_WAITWRC WAITWRC, EBU_BUSWAP2_WRRECOVC WRRECOVC, EBU_BUSWAP2_WRDTACS WRDTACS)
    {
        uint32_t curr = BUSWAP2;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(ADDRC) & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(AHOLDC) & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(CMDDELAY) & 0b1111u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EXTDATA) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(EXTCLOCK) & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(DATAC) & 0b1111u) << 12u;
        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(WAITWRC) & 0b11111u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(WRRECOVC) & 0b111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(WRDTACS) & 0b1111u) << 0u;

        BUSWAP2 = curr;
    }

    /**
     * Get BUSRCON3's AGEN field.
     */
    inline uint8_t get_BUSRCON3_AGEN()
    {
        return (BUSRCON3 >> 28u) & 0b1111u;
    }

    /**
     * Set BUSRCON3's AGEN field.
     */
    inline void set_BUSRCON3_AGEN(uint8_t value)
    {
        uint32_t curr = BUSRCON3;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        BUSRCON3 = curr;
    }

    /**
     * Get BUSRCON3's AAP bit.
     */
    inline EBU_BUSRCON3_AAP get_BUSRCON3_AAP()
    {
        return EBU_BUSRCON3_AAP(BUSRCON3 & (1u << 26u));
    }

    /**
     * Set BUSRCON3's AAP bit.
     */
    inline void set_BUSRCON3_AAP()
    {
        BUSRCON3 |= 1u << 26u;
    }

    /**
     * Clear BUSRCON3's AAP bit.
     */
    inline void clear_BUSRCON3_AAP()
    {
        BUSRCON3 &= ~(1u << 26u);
    }

    /**
     * Toggle BUSRCON3's AAP bit.
     */
    inline void toggle_BUSRCON3_AAP()
    {
        BUSRCON3 ^= 1u << 26u;
    }

    /**
     * Get BUSRCON3's WAIT field.
     */
    inline uint8_t get_BUSRCON3_WAIT()
    {
        return (BUSRCON3 >> 24u) & 0b11u;
    }

    /**
     * Set BUSRCON3's WAIT field.
     */
    inline void set_BUSRCON3_WAIT(uint8_t value)
    {
        uint32_t curr = BUSRCON3;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        BUSRCON3 = curr;
    }

    /**
     * Get BUSRCON3's PORTW field.
     */
    inline uint8_t get_BUSRCON3_PORTW()
    {
        return (BUSRCON3 >> 22u) & 0b11u;
    }

    /**
     * Set BUSRCON3's PORTW field.
     */
    inline void set_BUSRCON3_PORTW(uint8_t value)
    {
        uint32_t curr = BUSRCON3;

        curr &= ~(0b11u << 22u);
        curr |= (value & 0b11u) << 22u;

        BUSRCON3 = curr;
    }

    /**
     * Get BUSRCON3's BCGEN field.
     */
    inline EBU_BUSRCON3_BCGEN get_BUSRCON3_BCGEN()
    {
        return EBU_BUSRCON3_BCGEN((BUSRCON3 >> 20u) & 0b11u);
    }

    /**
     * Set BUSRCON3's BCGEN field.
     */
    inline void set_BUSRCON3_BCGEN(EBU_BUSRCON3_BCGEN value)
    {
        uint32_t curr = BUSRCON3;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        BUSRCON3 = curr;
    }

    /**
     * Get BUSRCON3's WAITINV bit.
     */
    inline EBU_BUSRCON3_WAITINV get_BUSRCON3_WAITINV()
    {
        return EBU_BUSRCON3_WAITINV(BUSRCON3 & (1u << 19u));
    }

    /**
     * Set BUSRCON3's WAITINV bit.
     */
    inline void set_BUSRCON3_WAITINV()
    {
        BUSRCON3 |= 1u << 19u;
    }

    /**
     * Clear BUSRCON3's WAITINV bit.
     */
    inline void clear_BUSRCON3_WAITINV()
    {
        BUSRCON3 &= ~(1u << 19u);
    }

    /**
     * Toggle BUSRCON3's WAITINV bit.
     */
    inline void toggle_BUSRCON3_WAITINV()
    {
        BUSRCON3 ^= 1u << 19u;
    }

    /**
     * Get BUSRCON3's DBA bit.
     */
    inline EBU_BUSRCON3_DBA get_BUSRCON3_DBA()
    {
        return EBU_BUSRCON3_DBA(BUSRCON3 & (1u << 18u));
    }

    /**
     * Set BUSRCON3's DBA bit.
     */
    inline void set_BUSRCON3_DBA()
    {
        BUSRCON3 |= 1u << 18u;
    }

    /**
     * Clear BUSRCON3's DBA bit.
     */
    inline void clear_BUSRCON3_DBA()
    {
        BUSRCON3 &= ~(1u << 18u);
    }

    /**
     * Toggle BUSRCON3's DBA bit.
     */
    inline void toggle_BUSRCON3_DBA()
    {
        BUSRCON3 ^= 1u << 18u;
    }

    /**
     * Get BUSRCON3's EBSE bit.
     */
    inline EBU_BUSRCON3_EBSE get_BUSRCON3_EBSE()
    {
        return EBU_BUSRCON3_EBSE(BUSRCON3 & (1u << 17u));
    }

    /**
     * Set BUSRCON3's EBSE bit.
     */
    inline void set_BUSRCON3_EBSE()
    {
        BUSRCON3 |= 1u << 17u;
    }

    /**
     * Clear BUSRCON3's EBSE bit.
     */
    inline void clear_BUSRCON3_EBSE()
    {
        BUSRCON3 &= ~(1u << 17u);
    }

    /**
     * Toggle BUSRCON3's EBSE bit.
     */
    inline void toggle_BUSRCON3_EBSE()
    {
        BUSRCON3 ^= 1u << 17u;
    }

    /**
     * Get BUSRCON3's ECSE bit.
     */
    inline EBU_BUSRCON3_ECSE get_BUSRCON3_ECSE()
    {
        return EBU_BUSRCON3_ECSE(BUSRCON3 & (1u << 16u));
    }

    /**
     * Set BUSRCON3's ECSE bit.
     */
    inline void set_BUSRCON3_ECSE()
    {
        BUSRCON3 |= 1u << 16u;
    }

    /**
     * Clear BUSRCON3's ECSE bit.
     */
    inline void clear_BUSRCON3_ECSE()
    {
        BUSRCON3 &= ~(1u << 16u);
    }

    /**
     * Toggle BUSRCON3's ECSE bit.
     */
    inline void toggle_BUSRCON3_ECSE()
    {
        BUSRCON3 ^= 1u << 16u;
    }

    /**
     * Get BUSRCON3's NAA bit.
     */
    inline bool get_BUSRCON3_NAA()
    {
        return BUSRCON3 & (1u << 7u);
    }

    /**
     * Set BUSRCON3's NAA bit.
     */
    inline void set_BUSRCON3_NAA()
    {
        BUSRCON3 |= 1u << 7u;
    }

    /**
     * Clear BUSRCON3's NAA bit.
     */
    inline void clear_BUSRCON3_NAA()
    {
        BUSRCON3 &= ~(1u << 7u);
    }

    /**
     * Toggle BUSRCON3's NAA bit.
     */
    inline void toggle_BUSRCON3_NAA()
    {
        BUSRCON3 ^= 1u << 7u;
    }

    /**
     * Get BUSRCON3's BFCMSEL bit.
     */
    inline EBU_BUSRCON3_BFCMSEL get_BUSRCON3_BFCMSEL()
    {
        return EBU_BUSRCON3_BFCMSEL(BUSRCON3 & (1u << 6u));
    }

    /**
     * Set BUSRCON3's BFCMSEL bit.
     */
    inline void set_BUSRCON3_BFCMSEL()
    {
        BUSRCON3 |= 1u << 6u;
    }

    /**
     * Clear BUSRCON3's BFCMSEL bit.
     */
    inline void clear_BUSRCON3_BFCMSEL()
    {
        BUSRCON3 &= ~(1u << 6u);
    }

    /**
     * Toggle BUSRCON3's BFCMSEL bit.
     */
    inline void toggle_BUSRCON3_BFCMSEL()
    {
        BUSRCON3 ^= 1u << 6u;
    }

    /**
     * Get BUSRCON3's FDBKEN bit.
     */
    inline EBU_BUSRCON3_FDBKEN get_BUSRCON3_FDBKEN()
    {
        return EBU_BUSRCON3_FDBKEN(BUSRCON3 & (1u << 5u));
    }

    /**
     * Set BUSRCON3's FDBKEN bit.
     */
    inline void set_BUSRCON3_FDBKEN()
    {
        BUSRCON3 |= 1u << 5u;
    }

    /**
     * Clear BUSRCON3's FDBKEN bit.
     */
    inline void clear_BUSRCON3_FDBKEN()
    {
        BUSRCON3 &= ~(1u << 5u);
    }

    /**
     * Toggle BUSRCON3's FDBKEN bit.
     */
    inline void toggle_BUSRCON3_FDBKEN()
    {
        BUSRCON3 ^= 1u << 5u;
    }

    /**
     * Get BUSRCON3's BFSSS bit.
     */
    inline EBU_BUSRCON3_BFSSS get_BUSRCON3_BFSSS()
    {
        return EBU_BUSRCON3_BFSSS(BUSRCON3 & (1u << 4u));
    }

    /**
     * Set BUSRCON3's BFSSS bit.
     */
    inline void set_BUSRCON3_BFSSS()
    {
        BUSRCON3 |= 1u << 4u;
    }

    /**
     * Clear BUSRCON3's BFSSS bit.
     */
    inline void clear_BUSRCON3_BFSSS()
    {
        BUSRCON3 &= ~(1u << 4u);
    }

    /**
     * Toggle BUSRCON3's BFSSS bit.
     */
    inline void toggle_BUSRCON3_BFSSS()
    {
        BUSRCON3 ^= 1u << 4u;
    }

    /**
     * Get BUSRCON3's FBBMSEL bit.
     */
    inline EBU_BUSRCON3_FBBMSEL get_BUSRCON3_FBBMSEL()
    {
        return EBU_BUSRCON3_FBBMSEL(BUSRCON3 & (1u << 3u));
    }

    /**
     * Set BUSRCON3's FBBMSEL bit.
     */
    inline void set_BUSRCON3_FBBMSEL()
    {
        BUSRCON3 |= 1u << 3u;
    }

    /**
     * Clear BUSRCON3's FBBMSEL bit.
     */
    inline void clear_BUSRCON3_FBBMSEL()
    {
        BUSRCON3 &= ~(1u << 3u);
    }

    /**
     * Toggle BUSRCON3's FBBMSEL bit.
     */
    inline void toggle_BUSRCON3_FBBMSEL()
    {
        BUSRCON3 ^= 1u << 3u;
    }

    /**
     * Get BUSRCON3's FETBLEN field.
     */
    inline EBU_BUSRCON3_FETBLEN get_BUSRCON3_FETBLEN()
    {
        return EBU_BUSRCON3_FETBLEN((BUSRCON3 >> 0u) & 0b111u);
    }

    /**
     * Set BUSRCON3's FETBLEN field.
     */
    inline void set_BUSRCON3_FETBLEN(EBU_BUSRCON3_FETBLEN value)
    {
        uint32_t curr = BUSRCON3;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        BUSRCON3 = curr;
    }

    /**
     * Get all of BUSRCON3's bit fields.
     */
    inline void get_BUSRCON3(uint8_t &AGEN, EBU_BUSRCON3_AAP &AAP, uint8_t &WAIT, uint8_t &PORTW, EBU_BUSRCON3_BCGEN &BCGEN, EBU_BUSRCON3_WAITINV &WAITINV, EBU_BUSRCON3_DBA &DBA, EBU_BUSRCON3_EBSE &EBSE, EBU_BUSRCON3_ECSE &ECSE, bool &NAA, EBU_BUSRCON3_BFCMSEL &BFCMSEL, EBU_BUSRCON3_FDBKEN &FDBKEN, EBU_BUSRCON3_BFSSS &BFSSS, EBU_BUSRCON3_FBBMSEL &FBBMSEL, EBU_BUSRCON3_FETBLEN &FETBLEN)
    {
        uint32_t curr = BUSRCON3;

        AGEN = (curr >> 28u) & 0b1111u;
        AAP = EBU_BUSRCON3_AAP(curr & (1u << 26u));
        WAIT = (curr >> 24u) & 0b11u;
        PORTW = (curr >> 22u) & 0b11u;
        BCGEN = EBU_BUSRCON3_BCGEN((curr >> 20u) & 0b11u);
        WAITINV = EBU_BUSRCON3_WAITINV(curr & (1u << 19u));
        DBA = EBU_BUSRCON3_DBA(curr & (1u << 18u));
        EBSE = EBU_BUSRCON3_EBSE(curr & (1u << 17u));
        ECSE = EBU_BUSRCON3_ECSE(curr & (1u << 16u));
        NAA = curr & (1u << 7u);
        BFCMSEL = EBU_BUSRCON3_BFCMSEL(curr & (1u << 6u));
        FDBKEN = EBU_BUSRCON3_FDBKEN(curr & (1u << 5u));
        BFSSS = EBU_BUSRCON3_BFSSS(curr & (1u << 4u));
        FBBMSEL = EBU_BUSRCON3_FBBMSEL(curr & (1u << 3u));
        FETBLEN = EBU_BUSRCON3_FETBLEN((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of BUSRCON3's bit fields.
     */
    inline void set_BUSRCON3(uint8_t AGEN, EBU_BUSRCON3_AAP AAP, uint8_t WAIT, uint8_t PORTW, EBU_BUSRCON3_BCGEN BCGEN, EBU_BUSRCON3_WAITINV WAITINV, EBU_BUSRCON3_DBA DBA, EBU_BUSRCON3_EBSE EBSE, EBU_BUSRCON3_ECSE ECSE, bool NAA, EBU_BUSRCON3_BFCMSEL BFCMSEL, EBU_BUSRCON3_FDBKEN FDBKEN, EBU_BUSRCON3_BFSSS BFSSS, EBU_BUSRCON3_FBBMSEL FBBMSEL, EBU_BUSRCON3_FETBLEN FETBLEN)
    {
        uint32_t curr = BUSRCON3;

        curr &= ~(0b1111u << 28u);
        curr |= (AGEN & 0b1111u) << 28u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(AAP) & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (WAIT & 0b11u) << 24u;
        curr &= ~(0b11u << 22u);
        curr |= (PORTW & 0b11u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(BCGEN) & 0b11u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(WAITINV) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(DBA) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(EBSE) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ECSE) & 0b1u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (NAA & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(BFCMSEL) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(FDBKEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(BFSSS) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(FBBMSEL) & 0b1u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(FETBLEN) & 0b111u) << 0u;

        BUSRCON3 = curr;
    }

    /**
     * Get BUSRAP3's ADDRC field.
     */
    inline EBU_BUSRAP3_ADDRC get_BUSRAP3_ADDRC()
    {
        return EBU_BUSRAP3_ADDRC((BUSRAP3 >> 28u) & 0b1111u);
    }

    /**
     * Set BUSRAP3's ADDRC field.
     */
    inline void set_BUSRAP3_ADDRC(EBU_BUSRAP3_ADDRC value)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        BUSRAP3 = curr;
    }

    /**
     * Get BUSRAP3's AHOLDC field.
     */
    inline EBU_BUSRAP3_AHOLDC get_BUSRAP3_AHOLDC()
    {
        return EBU_BUSRAP3_AHOLDC((BUSRAP3 >> 24u) & 0b1111u);
    }

    /**
     * Set BUSRAP3's AHOLDC field.
     */
    inline void set_BUSRAP3_AHOLDC(EBU_BUSRAP3_AHOLDC value)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        BUSRAP3 = curr;
    }

    /**
     * Get BUSRAP3's CMDDELAY field.
     */
    inline EBU_BUSRAP3_CMDDELAY get_BUSRAP3_CMDDELAY()
    {
        return EBU_BUSRAP3_CMDDELAY((BUSRAP3 >> 20u) & 0b1111u);
    }

    /**
     * Set BUSRAP3's CMDDELAY field.
     */
    inline void set_BUSRAP3_CMDDELAY(EBU_BUSRAP3_CMDDELAY value)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        BUSRAP3 = curr;
    }

    /**
     * Get BUSRAP3's EXTDATA field.
     */
    inline EBU_BUSRAP3_EXTDATA get_BUSRAP3_EXTDATA()
    {
        return EBU_BUSRAP3_EXTDATA((BUSRAP3 >> 18u) & 0b11u);
    }

    /**
     * Set BUSRAP3's EXTDATA field.
     */
    inline void set_BUSRAP3_EXTDATA(EBU_BUSRAP3_EXTDATA value)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        BUSRAP3 = curr;
    }

    /**
     * Get BUSRAP3's EXTCLOCK field.
     */
    inline EBU_BUSRAP3_EXTCLOCK get_BUSRAP3_EXTCLOCK()
    {
        return EBU_BUSRAP3_EXTCLOCK((BUSRAP3 >> 16u) & 0b11u);
    }

    /**
     * Set BUSRAP3's EXTCLOCK field.
     */
    inline void set_BUSRAP3_EXTCLOCK(EBU_BUSRAP3_EXTCLOCK value)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        BUSRAP3 = curr;
    }

    /**
     * Get BUSRAP3's DATAC field.
     */
    inline uint8_t get_BUSRAP3_DATAC()
    {
        return (BUSRAP3 >> 12u) & 0b1111u;
    }

    /**
     * Set BUSRAP3's DATAC field.
     */
    inline void set_BUSRAP3_DATAC(uint8_t value)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        BUSRAP3 = curr;
    }

    /**
     * Get BUSRAP3's WAITRDC field.
     */
    inline EBU_BUSRAP3_WAITRDC get_BUSRAP3_WAITRDC()
    {
        return EBU_BUSRAP3_WAITRDC((BUSRAP3 >> 7u) & 0b11111u);
    }

    /**
     * Set BUSRAP3's WAITRDC field.
     */
    inline void set_BUSRAP3_WAITRDC(EBU_BUSRAP3_WAITRDC value)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(value) & 0b11111u) << 7u;

        BUSRAP3 = curr;
    }

    /**
     * Get BUSRAP3's RDRECOVC field.
     */
    inline EBU_BUSRAP3_RDRECOVC get_BUSRAP3_RDRECOVC()
    {
        return EBU_BUSRAP3_RDRECOVC((BUSRAP3 >> 4u) & 0b111u);
    }

    /**
     * Set BUSRAP3's RDRECOVC field.
     */
    inline void set_BUSRAP3_RDRECOVC(EBU_BUSRAP3_RDRECOVC value)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        BUSRAP3 = curr;
    }

    /**
     * Get BUSRAP3's RDDTACS field.
     */
    inline EBU_BUSRAP3_RDDTACS get_BUSRAP3_RDDTACS()
    {
        return EBU_BUSRAP3_RDDTACS((BUSRAP3 >> 0u) & 0b1111u);
    }

    /**
     * Set BUSRAP3's RDDTACS field.
     */
    inline void set_BUSRAP3_RDDTACS(EBU_BUSRAP3_RDDTACS value)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BUSRAP3 = curr;
    }

    /**
     * Get all of BUSRAP3's bit fields.
     */
    inline void get_BUSRAP3(EBU_BUSRAP3_ADDRC &ADDRC, EBU_BUSRAP3_AHOLDC &AHOLDC, EBU_BUSRAP3_CMDDELAY &CMDDELAY, EBU_BUSRAP3_EXTDATA &EXTDATA, EBU_BUSRAP3_EXTCLOCK &EXTCLOCK, uint8_t &DATAC, EBU_BUSRAP3_WAITRDC &WAITRDC, EBU_BUSRAP3_RDRECOVC &RDRECOVC, EBU_BUSRAP3_RDDTACS &RDDTACS)
    {
        uint32_t curr = BUSRAP3;

        ADDRC = EBU_BUSRAP3_ADDRC((curr >> 28u) & 0b1111u);
        AHOLDC = EBU_BUSRAP3_AHOLDC((curr >> 24u) & 0b1111u);
        CMDDELAY = EBU_BUSRAP3_CMDDELAY((curr >> 20u) & 0b1111u);
        EXTDATA = EBU_BUSRAP3_EXTDATA((curr >> 18u) & 0b11u);
        EXTCLOCK = EBU_BUSRAP3_EXTCLOCK((curr >> 16u) & 0b11u);
        DATAC = (curr >> 12u) & 0b1111u;
        WAITRDC = EBU_BUSRAP3_WAITRDC((curr >> 7u) & 0b11111u);
        RDRECOVC = EBU_BUSRAP3_RDRECOVC((curr >> 4u) & 0b111u);
        RDDTACS = EBU_BUSRAP3_RDDTACS((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of BUSRAP3's bit fields.
     */
    inline void set_BUSRAP3(EBU_BUSRAP3_ADDRC ADDRC, EBU_BUSRAP3_AHOLDC AHOLDC, EBU_BUSRAP3_CMDDELAY CMDDELAY, EBU_BUSRAP3_EXTDATA EXTDATA, EBU_BUSRAP3_EXTCLOCK EXTCLOCK, uint8_t DATAC, EBU_BUSRAP3_WAITRDC WAITRDC, EBU_BUSRAP3_RDRECOVC RDRECOVC, EBU_BUSRAP3_RDDTACS RDDTACS)
    {
        uint32_t curr = BUSRAP3;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(ADDRC) & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(AHOLDC) & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(CMDDELAY) & 0b1111u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EXTDATA) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(EXTCLOCK) & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (DATAC & 0b1111u) << 12u;
        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(WAITRDC) & 0b11111u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(RDRECOVC) & 0b111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(RDDTACS) & 0b1111u) << 0u;

        BUSRAP3 = curr;
    }

    /**
     * Get BUSWCON3's AGEN field.
     */
    inline uint8_t get_BUSWCON3_AGEN()
    {
        return (BUSWCON3 >> 28u) & 0b1111u;
    }

    /**
     * Set BUSWCON3's AGEN field.
     */
    inline void set_BUSWCON3_AGEN(uint8_t value)
    {
        uint32_t curr = BUSWCON3;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        BUSWCON3 = curr;
    }

    /**
     * Get BUSWCON3's LOCKCS bit.
     */
    inline EBU_BUSWCON3_LOCKCS get_BUSWCON3_LOCKCS()
    {
        return EBU_BUSWCON3_LOCKCS(BUSWCON3 & (1u << 27u));
    }

    /**
     * Set BUSWCON3's LOCKCS bit.
     */
    inline void set_BUSWCON3_LOCKCS()
    {
        BUSWCON3 |= 1u << 27u;
    }

    /**
     * Clear BUSWCON3's LOCKCS bit.
     */
    inline void clear_BUSWCON3_LOCKCS()
    {
        BUSWCON3 &= ~(1u << 27u);
    }

    /**
     * Toggle BUSWCON3's LOCKCS bit.
     */
    inline void toggle_BUSWCON3_LOCKCS()
    {
        BUSWCON3 ^= 1u << 27u;
    }

    /**
     * Get BUSWCON3's AAP bit.
     */
    inline EBU_BUSWCON3_AAP get_BUSWCON3_AAP()
    {
        return EBU_BUSWCON3_AAP(BUSWCON3 & (1u << 26u));
    }

    /**
     * Set BUSWCON3's AAP bit.
     */
    inline void set_BUSWCON3_AAP()
    {
        BUSWCON3 |= 1u << 26u;
    }

    /**
     * Clear BUSWCON3's AAP bit.
     */
    inline void clear_BUSWCON3_AAP()
    {
        BUSWCON3 &= ~(1u << 26u);
    }

    /**
     * Toggle BUSWCON3's AAP bit.
     */
    inline void toggle_BUSWCON3_AAP()
    {
        BUSWCON3 ^= 1u << 26u;
    }

    /**
     * Get BUSWCON3's WAIT field.
     */
    inline uint8_t get_BUSWCON3_WAIT()
    {
        return (BUSWCON3 >> 24u) & 0b11u;
    }

    /**
     * Set BUSWCON3's WAIT field.
     */
    inline void set_BUSWCON3_WAIT(uint8_t value)
    {
        uint32_t curr = BUSWCON3;

        curr &= ~(0b11u << 24u);
        curr |= (value & 0b11u) << 24u;

        BUSWCON3 = curr;
    }

    /**
     * Get BUSWCON3's PORTW field.
     */
    inline uint8_t get_BUSWCON3_PORTW()
    {
        return (BUSWCON3 >> 22u) & 0b11u;
    }

    /**
     * Get BUSWCON3's BCGEN field.
     */
    inline EBU_BUSWCON3_BCGEN get_BUSWCON3_BCGEN()
    {
        return EBU_BUSWCON3_BCGEN((BUSWCON3 >> 20u) & 0b11u);
    }

    /**
     * Set BUSWCON3's BCGEN field.
     */
    inline void set_BUSWCON3_BCGEN(EBU_BUSWCON3_BCGEN value)
    {
        uint32_t curr = BUSWCON3;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        BUSWCON3 = curr;
    }

    /**
     * Get BUSWCON3's WAITINV bit.
     */
    inline EBU_BUSWCON3_WAITINV get_BUSWCON3_WAITINV()
    {
        return EBU_BUSWCON3_WAITINV(BUSWCON3 & (1u << 19u));
    }

    /**
     * Set BUSWCON3's WAITINV bit.
     */
    inline void set_BUSWCON3_WAITINV()
    {
        BUSWCON3 |= 1u << 19u;
    }

    /**
     * Clear BUSWCON3's WAITINV bit.
     */
    inline void clear_BUSWCON3_WAITINV()
    {
        BUSWCON3 &= ~(1u << 19u);
    }

    /**
     * Toggle BUSWCON3's WAITINV bit.
     */
    inline void toggle_BUSWCON3_WAITINV()
    {
        BUSWCON3 ^= 1u << 19u;
    }

    /**
     * Get BUSWCON3's EBSE bit.
     */
    inline EBU_BUSWCON3_EBSE get_BUSWCON3_EBSE()
    {
        return EBU_BUSWCON3_EBSE(BUSWCON3 & (1u << 17u));
    }

    /**
     * Set BUSWCON3's EBSE bit.
     */
    inline void set_BUSWCON3_EBSE()
    {
        BUSWCON3 |= 1u << 17u;
    }

    /**
     * Clear BUSWCON3's EBSE bit.
     */
    inline void clear_BUSWCON3_EBSE()
    {
        BUSWCON3 &= ~(1u << 17u);
    }

    /**
     * Toggle BUSWCON3's EBSE bit.
     */
    inline void toggle_BUSWCON3_EBSE()
    {
        BUSWCON3 ^= 1u << 17u;
    }

    /**
     * Get BUSWCON3's ECSE bit.
     */
    inline EBU_BUSWCON3_ECSE get_BUSWCON3_ECSE()
    {
        return EBU_BUSWCON3_ECSE(BUSWCON3 & (1u << 16u));
    }

    /**
     * Set BUSWCON3's ECSE bit.
     */
    inline void set_BUSWCON3_ECSE()
    {
        BUSWCON3 |= 1u << 16u;
    }

    /**
     * Clear BUSWCON3's ECSE bit.
     */
    inline void clear_BUSWCON3_ECSE()
    {
        BUSWCON3 &= ~(1u << 16u);
    }

    /**
     * Toggle BUSWCON3's ECSE bit.
     */
    inline void toggle_BUSWCON3_ECSE()
    {
        BUSWCON3 ^= 1u << 16u;
    }

    /**
     * Get BUSWCON3's NAA bit.
     */
    inline bool get_BUSWCON3_NAA()
    {
        return BUSWCON3 & (1u << 7u);
    }

    /**
     * Get BUSWCON3's FBBMSEL bit.
     */
    inline EBU_BUSWCON3_FBBMSEL get_BUSWCON3_FBBMSEL()
    {
        return EBU_BUSWCON3_FBBMSEL(BUSWCON3 & (1u << 3u));
    }

    /**
     * Set BUSWCON3's FBBMSEL bit.
     */
    inline void set_BUSWCON3_FBBMSEL()
    {
        BUSWCON3 |= 1u << 3u;
    }

    /**
     * Clear BUSWCON3's FBBMSEL bit.
     */
    inline void clear_BUSWCON3_FBBMSEL()
    {
        BUSWCON3 &= ~(1u << 3u);
    }

    /**
     * Toggle BUSWCON3's FBBMSEL bit.
     */
    inline void toggle_BUSWCON3_FBBMSEL()
    {
        BUSWCON3 ^= 1u << 3u;
    }

    /**
     * Get BUSWCON3's FETBLEN field.
     */
    inline EBU_BUSWCON3_FETBLEN get_BUSWCON3_FETBLEN()
    {
        return EBU_BUSWCON3_FETBLEN((BUSWCON3 >> 0u) & 0b111u);
    }

    /**
     * Set BUSWCON3's FETBLEN field.
     */
    inline void set_BUSWCON3_FETBLEN(EBU_BUSWCON3_FETBLEN value)
    {
        uint32_t curr = BUSWCON3;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        BUSWCON3 = curr;
    }

    /**
     * Get all of BUSWCON3's bit fields.
     */
    inline void get_BUSWCON3(uint8_t &AGEN, EBU_BUSWCON3_LOCKCS &LOCKCS, EBU_BUSWCON3_AAP &AAP, uint8_t &WAIT, uint8_t &PORTW, EBU_BUSWCON3_BCGEN &BCGEN, EBU_BUSWCON3_WAITINV &WAITINV, EBU_BUSWCON3_EBSE &EBSE, EBU_BUSWCON3_ECSE &ECSE, bool &NAA, EBU_BUSWCON3_FBBMSEL &FBBMSEL, EBU_BUSWCON3_FETBLEN &FETBLEN)
    {
        uint32_t curr = BUSWCON3;

        AGEN = (curr >> 28u) & 0b1111u;
        LOCKCS = EBU_BUSWCON3_LOCKCS(curr & (1u << 27u));
        AAP = EBU_BUSWCON3_AAP(curr & (1u << 26u));
        WAIT = (curr >> 24u) & 0b11u;
        PORTW = (curr >> 22u) & 0b11u;
        BCGEN = EBU_BUSWCON3_BCGEN((curr >> 20u) & 0b11u);
        WAITINV = EBU_BUSWCON3_WAITINV(curr & (1u << 19u));
        EBSE = EBU_BUSWCON3_EBSE(curr & (1u << 17u));
        ECSE = EBU_BUSWCON3_ECSE(curr & (1u << 16u));
        NAA = curr & (1u << 7u);
        FBBMSEL = EBU_BUSWCON3_FBBMSEL(curr & (1u << 3u));
        FETBLEN = EBU_BUSWCON3_FETBLEN((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of BUSWCON3's bit fields.
     */
    inline void set_BUSWCON3(uint8_t AGEN, EBU_BUSWCON3_LOCKCS LOCKCS, EBU_BUSWCON3_AAP AAP, uint8_t WAIT, EBU_BUSWCON3_BCGEN BCGEN, EBU_BUSWCON3_WAITINV WAITINV, EBU_BUSWCON3_EBSE EBSE, EBU_BUSWCON3_ECSE ECSE, EBU_BUSWCON3_FBBMSEL FBBMSEL, EBU_BUSWCON3_FETBLEN FETBLEN)
    {
        uint32_t curr = BUSWCON3;

        curr &= ~(0b1111u << 28u);
        curr |= (AGEN & 0b1111u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (std::to_underlying(LOCKCS) & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(AAP) & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (WAIT & 0b11u) << 24u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(BCGEN) & 0b11u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(WAITINV) & 0b1u) << 19u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(EBSE) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ECSE) & 0b1u) << 16u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(FBBMSEL) & 0b1u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(FETBLEN) & 0b111u) << 0u;

        BUSWCON3 = curr;
    }

    /**
     * Get BUSWAP3's ADDRC field.
     */
    inline EBU_BUSWAP3_ADDRC get_BUSWAP3_ADDRC()
    {
        return EBU_BUSWAP3_ADDRC((BUSWAP3 >> 28u) & 0b1111u);
    }

    /**
     * Set BUSWAP3's ADDRC field.
     */
    inline void set_BUSWAP3_ADDRC(EBU_BUSWAP3_ADDRC value)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        BUSWAP3 = curr;
    }

    /**
     * Get BUSWAP3's AHOLDC field.
     */
    inline EBU_BUSWAP3_AHOLDC get_BUSWAP3_AHOLDC()
    {
        return EBU_BUSWAP3_AHOLDC((BUSWAP3 >> 24u) & 0b1111u);
    }

    /**
     * Set BUSWAP3's AHOLDC field.
     */
    inline void set_BUSWAP3_AHOLDC(EBU_BUSWAP3_AHOLDC value)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        BUSWAP3 = curr;
    }

    /**
     * Get BUSWAP3's CMDDELAY field.
     */
    inline EBU_BUSWAP3_CMDDELAY get_BUSWAP3_CMDDELAY()
    {
        return EBU_BUSWAP3_CMDDELAY((BUSWAP3 >> 20u) & 0b1111u);
    }

    /**
     * Set BUSWAP3's CMDDELAY field.
     */
    inline void set_BUSWAP3_CMDDELAY(EBU_BUSWAP3_CMDDELAY value)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        BUSWAP3 = curr;
    }

    /**
     * Get BUSWAP3's EXTDATA field.
     */
    inline EBU_BUSWAP3_EXTDATA get_BUSWAP3_EXTDATA()
    {
        return EBU_BUSWAP3_EXTDATA((BUSWAP3 >> 18u) & 0b11u);
    }

    /**
     * Set BUSWAP3's EXTDATA field.
     */
    inline void set_BUSWAP3_EXTDATA(EBU_BUSWAP3_EXTDATA value)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        BUSWAP3 = curr;
    }

    /**
     * Get BUSWAP3's EXTCLOCK field.
     */
    inline EBU_BUSWAP3_EXTCLOCK get_BUSWAP3_EXTCLOCK()
    {
        return EBU_BUSWAP3_EXTCLOCK((BUSWAP3 >> 16u) & 0b11u);
    }

    /**
     * Set BUSWAP3's EXTCLOCK field.
     */
    inline void set_BUSWAP3_EXTCLOCK(EBU_BUSWAP3_EXTCLOCK value)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        BUSWAP3 = curr;
    }

    /**
     * Get BUSWAP3's DATAC field.
     */
    inline EBU_BUSWAP3_DATAC get_BUSWAP3_DATAC()
    {
        return EBU_BUSWAP3_DATAC((BUSWAP3 >> 12u) & 0b1111u);
    }

    /**
     * Set BUSWAP3's DATAC field.
     */
    inline void set_BUSWAP3_DATAC(EBU_BUSWAP3_DATAC value)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        BUSWAP3 = curr;
    }

    /**
     * Get BUSWAP3's WAITWRC field.
     */
    inline EBU_BUSWAP3_WAITWRC get_BUSWAP3_WAITWRC()
    {
        return EBU_BUSWAP3_WAITWRC((BUSWAP3 >> 7u) & 0b11111u);
    }

    /**
     * Set BUSWAP3's WAITWRC field.
     */
    inline void set_BUSWAP3_WAITWRC(EBU_BUSWAP3_WAITWRC value)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(value) & 0b11111u) << 7u;

        BUSWAP3 = curr;
    }

    /**
     * Get BUSWAP3's WRRECOVC field.
     */
    inline EBU_BUSWAP3_WRRECOVC get_BUSWAP3_WRRECOVC()
    {
        return EBU_BUSWAP3_WRRECOVC((BUSWAP3 >> 4u) & 0b111u);
    }

    /**
     * Set BUSWAP3's WRRECOVC field.
     */
    inline void set_BUSWAP3_WRRECOVC(EBU_BUSWAP3_WRRECOVC value)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        BUSWAP3 = curr;
    }

    /**
     * Get BUSWAP3's WRDTACS field.
     */
    inline EBU_BUSWAP3_WRDTACS get_BUSWAP3_WRDTACS()
    {
        return EBU_BUSWAP3_WRDTACS((BUSWAP3 >> 0u) & 0b1111u);
    }

    /**
     * Set BUSWAP3's WRDTACS field.
     */
    inline void set_BUSWAP3_WRDTACS(EBU_BUSWAP3_WRDTACS value)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BUSWAP3 = curr;
    }

    /**
     * Get all of BUSWAP3's bit fields.
     */
    inline void get_BUSWAP3(EBU_BUSWAP3_ADDRC &ADDRC, EBU_BUSWAP3_AHOLDC &AHOLDC, EBU_BUSWAP3_CMDDELAY &CMDDELAY, EBU_BUSWAP3_EXTDATA &EXTDATA, EBU_BUSWAP3_EXTCLOCK &EXTCLOCK, EBU_BUSWAP3_DATAC &DATAC, EBU_BUSWAP3_WAITWRC &WAITWRC, EBU_BUSWAP3_WRRECOVC &WRRECOVC, EBU_BUSWAP3_WRDTACS &WRDTACS)
    {
        uint32_t curr = BUSWAP3;

        ADDRC = EBU_BUSWAP3_ADDRC((curr >> 28u) & 0b1111u);
        AHOLDC = EBU_BUSWAP3_AHOLDC((curr >> 24u) & 0b1111u);
        CMDDELAY = EBU_BUSWAP3_CMDDELAY((curr >> 20u) & 0b1111u);
        EXTDATA = EBU_BUSWAP3_EXTDATA((curr >> 18u) & 0b11u);
        EXTCLOCK = EBU_BUSWAP3_EXTCLOCK((curr >> 16u) & 0b11u);
        DATAC = EBU_BUSWAP3_DATAC((curr >> 12u) & 0b1111u);
        WAITWRC = EBU_BUSWAP3_WAITWRC((curr >> 7u) & 0b11111u);
        WRRECOVC = EBU_BUSWAP3_WRRECOVC((curr >> 4u) & 0b111u);
        WRDTACS = EBU_BUSWAP3_WRDTACS((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of BUSWAP3's bit fields.
     */
    inline void set_BUSWAP3(EBU_BUSWAP3_ADDRC ADDRC, EBU_BUSWAP3_AHOLDC AHOLDC, EBU_BUSWAP3_CMDDELAY CMDDELAY, EBU_BUSWAP3_EXTDATA EXTDATA, EBU_BUSWAP3_EXTCLOCK EXTCLOCK, EBU_BUSWAP3_DATAC DATAC, EBU_BUSWAP3_WAITWRC WAITWRC, EBU_BUSWAP3_WRRECOVC WRRECOVC, EBU_BUSWAP3_WRDTACS WRDTACS)
    {
        uint32_t curr = BUSWAP3;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(ADDRC) & 0b1111u) << 28u;
        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(AHOLDC) & 0b1111u) << 24u;
        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(CMDDELAY) & 0b1111u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EXTDATA) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(EXTCLOCK) & 0b11u) << 16u;
        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(DATAC) & 0b1111u) << 12u;
        curr &= ~(0b11111u << 7u);
        curr |= (std::to_underlying(WAITWRC) & 0b11111u) << 7u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(WRRECOVC) & 0b111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(WRDTACS) & 0b1111u) << 0u;

        BUSWAP3 = curr;
    }

    /**
     * Get SDRMCON's CRAS field.
     */
    inline uint8_t get_SDRMCON_CRAS()
    {
        return (SDRMCON >> 0u) & 0b1111u;
    }

    /**
     * Set SDRMCON's CRAS field.
     */
    inline void set_SDRMCON_CRAS(uint8_t value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's CRFSH field.
     */
    inline uint8_t get_SDRMCON_CRFSH()
    {
        return (SDRMCON >> 4u) & 0b1111u;
    }

    /**
     * Set SDRMCON's CRFSH field.
     */
    inline void set_SDRMCON_CRFSH(uint8_t value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's CRSC field.
     */
    inline uint8_t get_SDRMCON_CRSC()
    {
        return (SDRMCON >> 8u) & 0b11u;
    }

    /**
     * Set SDRMCON's CRSC field.
     */
    inline void set_SDRMCON_CRSC(uint8_t value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's CRP field.
     */
    inline uint8_t get_SDRMCON_CRP()
    {
        return (SDRMCON >> 10u) & 0b11u;
    }

    /**
     * Set SDRMCON's CRP field.
     */
    inline void set_SDRMCON_CRP(uint8_t value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b11u << 10u);
        curr |= (value & 0b11u) << 10u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's AWIDTH field.
     */
    inline EBU_SDRMCON_AWIDTH get_SDRMCON_AWIDTH()
    {
        return EBU_SDRMCON_AWIDTH((SDRMCON >> 12u) & 0b11u);
    }

    /**
     * Set SDRMCON's AWIDTH field.
     */
    inline void set_SDRMCON_AWIDTH(EBU_SDRMCON_AWIDTH value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's CRCD field.
     */
    inline uint8_t get_SDRMCON_CRCD()
    {
        return (SDRMCON >> 14u) & 0b11u;
    }

    /**
     * Set SDRMCON's CRCD field.
     */
    inline void set_SDRMCON_CRCD(uint8_t value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b11u << 14u);
        curr |= (value & 0b11u) << 14u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's CRC field.
     */
    inline uint8_t get_SDRMCON_CRC()
    {
        return (SDRMCON >> 16u) & 0b111u;
    }

    /**
     * Set SDRMCON's CRC field.
     */
    inline void set_SDRMCON_CRC(uint8_t value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b111u << 16u);
        curr |= (value & 0b111u) << 16u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's ROWM field.
     */
    inline EBU_SDRMCON_ROWM get_SDRMCON_ROWM()
    {
        return EBU_SDRMCON_ROWM((SDRMCON >> 19u) & 0b111u);
    }

    /**
     * Set SDRMCON's ROWM field.
     */
    inline void set_SDRMCON_ROWM(EBU_SDRMCON_ROWM value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b111u << 19u);
        curr |= (std::to_underlying(value) & 0b111u) << 19u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's BANKM field.
     */
    inline EBU_SDRMCON_BANKM get_SDRMCON_BANKM()
    {
        return EBU_SDRMCON_BANKM((SDRMCON >> 22u) & 0b111u);
    }

    /**
     * Set SDRMCON's BANKM field.
     */
    inline void set_SDRMCON_BANKM(EBU_SDRMCON_BANKM value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b111u << 22u);
        curr |= (std::to_underlying(value) & 0b111u) << 22u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's CRCE field.
     */
    inline uint8_t get_SDRMCON_CRCE()
    {
        return (SDRMCON >> 25u) & 0b111u;
    }

    /**
     * Set SDRMCON's CRCE field.
     */
    inline void set_SDRMCON_CRCE(uint8_t value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b111u << 25u);
        curr |= (value & 0b111u) << 25u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's CLKDIS bit.
     */
    inline EBU_SDRMCON_CLKDIS get_SDRMCON_CLKDIS()
    {
        return EBU_SDRMCON_CLKDIS(SDRMCON & (1u << 28u));
    }

    /**
     * Set SDRMCON's CLKDIS bit.
     */
    inline void set_SDRMCON_CLKDIS()
    {
        SDRMCON |= 1u << 28u;
    }

    /**
     * Clear SDRMCON's CLKDIS bit.
     */
    inline void clear_SDRMCON_CLKDIS()
    {
        SDRMCON &= ~(1u << 28u);
    }

    /**
     * Toggle SDRMCON's CLKDIS bit.
     */
    inline void toggle_SDRMCON_CLKDIS()
    {
        SDRMCON ^= 1u << 28u;
    }

    /**
     * Get SDRMCON's PWR_MODE field.
     */
    inline EBU_SDRMCON_PWR_MODE get_SDRMCON_PWR_MODE()
    {
        return EBU_SDRMCON_PWR_MODE((SDRMCON >> 29u) & 0b11u);
    }

    /**
     * Set SDRMCON's PWR_MODE field.
     */
    inline void set_SDRMCON_PWR_MODE(EBU_SDRMCON_PWR_MODE value)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMCON's SDCMSEL bit.
     */
    inline EBU_SDRMCON_SDCMSEL get_SDRMCON_SDCMSEL()
    {
        return EBU_SDRMCON_SDCMSEL(SDRMCON & (1u << 31u));
    }

    /**
     * Set SDRMCON's SDCMSEL bit.
     */
    inline void set_SDRMCON_SDCMSEL()
    {
        SDRMCON |= 1u << 31u;
    }

    /**
     * Clear SDRMCON's SDCMSEL bit.
     */
    inline void clear_SDRMCON_SDCMSEL()
    {
        SDRMCON &= ~(1u << 31u);
    }

    /**
     * Toggle SDRMCON's SDCMSEL bit.
     */
    inline void toggle_SDRMCON_SDCMSEL()
    {
        SDRMCON ^= 1u << 31u;
    }

    /**
     * Get all of SDRMCON's bit fields.
     */
    inline void get_SDRMCON(uint8_t &CRAS, uint8_t &CRFSH, uint8_t &CRSC, uint8_t &CRP, EBU_SDRMCON_AWIDTH &AWIDTH, uint8_t &CRCD, uint8_t &CRC, EBU_SDRMCON_ROWM &ROWM, EBU_SDRMCON_BANKM &BANKM, uint8_t &CRCE, EBU_SDRMCON_CLKDIS &CLKDIS, EBU_SDRMCON_PWR_MODE &PWR_MODE, EBU_SDRMCON_SDCMSEL &SDCMSEL)
    {
        uint32_t curr = SDRMCON;

        CRAS = (curr >> 0u) & 0b1111u;
        CRFSH = (curr >> 4u) & 0b1111u;
        CRSC = (curr >> 8u) & 0b11u;
        CRP = (curr >> 10u) & 0b11u;
        AWIDTH = EBU_SDRMCON_AWIDTH((curr >> 12u) & 0b11u);
        CRCD = (curr >> 14u) & 0b11u;
        CRC = (curr >> 16u) & 0b111u;
        ROWM = EBU_SDRMCON_ROWM((curr >> 19u) & 0b111u);
        BANKM = EBU_SDRMCON_BANKM((curr >> 22u) & 0b111u);
        CRCE = (curr >> 25u) & 0b111u;
        CLKDIS = EBU_SDRMCON_CLKDIS(curr & (1u << 28u));
        PWR_MODE = EBU_SDRMCON_PWR_MODE((curr >> 29u) & 0b11u);
        SDCMSEL = EBU_SDRMCON_SDCMSEL(curr & (1u << 31u));
    }

    /**
     * Set all of SDRMCON's bit fields.
     */
    inline void set_SDRMCON(uint8_t CRAS, uint8_t CRFSH, uint8_t CRSC, uint8_t CRP, EBU_SDRMCON_AWIDTH AWIDTH, uint8_t CRCD, uint8_t CRC, EBU_SDRMCON_ROWM ROWM, EBU_SDRMCON_BANKM BANKM, uint8_t CRCE, EBU_SDRMCON_CLKDIS CLKDIS, EBU_SDRMCON_PWR_MODE PWR_MODE, EBU_SDRMCON_SDCMSEL SDCMSEL)
    {
        uint32_t curr = SDRMCON;

        curr &= ~(0b1111u << 0u);
        curr |= (CRAS & 0b1111u) << 0u;
        curr &= ~(0b1111u << 4u);
        curr |= (CRFSH & 0b1111u) << 4u;
        curr &= ~(0b11u << 8u);
        curr |= (CRSC & 0b11u) << 8u;
        curr &= ~(0b11u << 10u);
        curr |= (CRP & 0b11u) << 10u;
        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(AWIDTH) & 0b11u) << 12u;
        curr &= ~(0b11u << 14u);
        curr |= (CRCD & 0b11u) << 14u;
        curr &= ~(0b111u << 16u);
        curr |= (CRC & 0b111u) << 16u;
        curr &= ~(0b111u << 19u);
        curr |= (std::to_underlying(ROWM) & 0b111u) << 19u;
        curr &= ~(0b111u << 22u);
        curr |= (std::to_underlying(BANKM) & 0b111u) << 22u;
        curr &= ~(0b111u << 25u);
        curr |= (CRCE & 0b111u) << 25u;
        curr &= ~(0b1u << 28u);
        curr |= (std::to_underlying(CLKDIS) & 0b1u) << 28u;
        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(PWR_MODE) & 0b11u) << 29u;
        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(SDCMSEL) & 0b1u) << 31u;

        SDRMCON = curr;
    }

    /**
     * Get SDRMOD's BURSTL field.
     */
    inline EBU_SDRMOD_BURSTL get_SDRMOD_BURSTL()
    {
        return EBU_SDRMOD_BURSTL((SDRMOD >> 0u) & 0b111u);
    }

    /**
     * Set SDRMOD's BURSTL field.
     */
    inline void set_SDRMOD_BURSTL(EBU_SDRMOD_BURSTL value)
    {
        uint32_t curr = SDRMOD;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        SDRMOD = curr;
    }

    /**
     * Get SDRMOD's BTYP bit.
     */
    inline EBU_SDRMOD_BTYP get_SDRMOD_BTYP()
    {
        return EBU_SDRMOD_BTYP(SDRMOD & (1u << 3u));
    }

    /**
     * Set SDRMOD's BTYP bit.
     */
    inline void set_SDRMOD_BTYP()
    {
        SDRMOD |= 1u << 3u;
    }

    /**
     * Clear SDRMOD's BTYP bit.
     */
    inline void clear_SDRMOD_BTYP()
    {
        SDRMOD &= ~(1u << 3u);
    }

    /**
     * Toggle SDRMOD's BTYP bit.
     */
    inline void toggle_SDRMOD_BTYP()
    {
        SDRMOD ^= 1u << 3u;
    }

    /**
     * Get SDRMOD's CASLAT field.
     */
    inline EBU_SDRMOD_CASLAT get_SDRMOD_CASLAT()
    {
        return EBU_SDRMOD_CASLAT((SDRMOD >> 4u) & 0b111u);
    }

    /**
     * Set SDRMOD's CASLAT field.
     */
    inline void set_SDRMOD_CASLAT(EBU_SDRMOD_CASLAT value)
    {
        uint32_t curr = SDRMOD;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        SDRMOD = curr;
    }

    /**
     * Get SDRMOD's OPMODE field.
     */
    inline EBU_SDRMOD_OPMODE get_SDRMOD_OPMODE()
    {
        return EBU_SDRMOD_OPMODE((SDRMOD >> 7u) & 0b1111111u);
    }

    /**
     * Set SDRMOD's OPMODE field.
     */
    inline void set_SDRMOD_OPMODE(EBU_SDRMOD_OPMODE value)
    {
        uint32_t curr = SDRMOD;

        curr &= ~(0b1111111u << 7u);
        curr |= (std::to_underlying(value) & 0b1111111u) << 7u;

        SDRMOD = curr;
    }

    /**
     * Set SDRMOD's COLDSTART bit.
     */
    inline void set_SDRMOD_COLDSTART()
    {
        SDRMOD |= 1u << 15u;
    }

    /**
     * Clear SDRMOD's COLDSTART bit.
     */
    inline void clear_SDRMOD_COLDSTART()
    {
        SDRMOD &= ~(1u << 15u);
    }

    /**
     * Toggle SDRMOD's COLDSTART bit.
     */
    inline void toggle_SDRMOD_COLDSTART()
    {
        SDRMOD ^= 1u << 15u;
    }

    /**
     * Get SDRMOD's XOPM field.
     */
    inline uint16_t get_SDRMOD_XOPM()
    {
        return (SDRMOD >> 16u) & 0b111111111111u;
    }

    /**
     * Set SDRMOD's XOPM field.
     */
    inline void set_SDRMOD_XOPM(uint16_t value)
    {
        uint32_t curr = SDRMOD;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        SDRMOD = curr;
    }

    /**
     * Get SDRMOD's XBA field.
     */
    inline uint8_t get_SDRMOD_XBA()
    {
        return (SDRMOD >> 28u) & 0b1111u;
    }

    /**
     * Set SDRMOD's XBA field.
     */
    inline void set_SDRMOD_XBA(uint8_t value)
    {
        uint32_t curr = SDRMOD;

        curr &= ~(0b1111u << 28u);
        curr |= (value & 0b1111u) << 28u;

        SDRMOD = curr;
    }

    /**
     * Get all of SDRMOD's bit fields.
     */
    inline void get_SDRMOD(EBU_SDRMOD_BURSTL &BURSTL, EBU_SDRMOD_BTYP &BTYP, EBU_SDRMOD_CASLAT &CASLAT, EBU_SDRMOD_OPMODE &OPMODE, uint16_t &XOPM, uint8_t &XBA)
    {
        uint32_t curr = SDRMOD;

        BURSTL = EBU_SDRMOD_BURSTL((curr >> 0u) & 0b111u);
        BTYP = EBU_SDRMOD_BTYP(curr & (1u << 3u));
        CASLAT = EBU_SDRMOD_CASLAT((curr >> 4u) & 0b111u);
        OPMODE = EBU_SDRMOD_OPMODE((curr >> 7u) & 0b1111111u);
        XOPM = (curr >> 16u) & 0b111111111111u;
        XBA = (curr >> 28u) & 0b1111u;
    }

    /**
     * Set all of SDRMOD's bit fields.
     */
    inline void set_SDRMOD(EBU_SDRMOD_BURSTL BURSTL, EBU_SDRMOD_BTYP BTYP, EBU_SDRMOD_CASLAT CASLAT, EBU_SDRMOD_OPMODE OPMODE, bool COLDSTART, uint16_t XOPM, uint8_t XBA)
    {
        uint32_t curr = SDRMOD;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(BURSTL) & 0b111u) << 0u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(BTYP) & 0b1u) << 3u;
        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(CASLAT) & 0b111u) << 4u;
        curr &= ~(0b1111111u << 7u);
        curr |= (std::to_underlying(OPMODE) & 0b1111111u) << 7u;
        curr &= ~(0b1u << 15u);
        curr |= (COLDSTART & 0b1u) << 15u;
        curr &= ~(0b111111111111u << 16u);
        curr |= (XOPM & 0b111111111111u) << 16u;
        curr &= ~(0b1111u << 28u);
        curr |= (XBA & 0b1111u) << 28u;

        SDRMOD = curr;
    }

    /**
     * Get SDRMREF's REFRESHC field.
     */
    inline uint8_t get_SDRMREF_REFRESHC()
    {
        return (SDRMREF >> 0u) & 0b111111u;
    }

    /**
     * Set SDRMREF's REFRESHC field.
     */
    inline void set_SDRMREF_REFRESHC(uint8_t value)
    {
        uint32_t curr = SDRMREF;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        SDRMREF = curr;
    }

    /**
     * Get SDRMREF's REFRESHR field.
     */
    inline uint8_t get_SDRMREF_REFRESHR()
    {
        return (SDRMREF >> 6u) & 0b111u;
    }

    /**
     * Set SDRMREF's REFRESHR field.
     */
    inline void set_SDRMREF_REFRESHR(uint8_t value)
    {
        uint32_t curr = SDRMREF;

        curr &= ~(0b111u << 6u);
        curr |= (value & 0b111u) << 6u;

        SDRMREF = curr;
    }

    /**
     * Get SDRMREF's SELFREXST bit.
     */
    inline bool get_SDRMREF_SELFREXST()
    {
        return SDRMREF & (1u << 9u);
    }

    /**
     * Get SDRMREF's SELFREX bit.
     */
    inline bool get_SDRMREF_SELFREX()
    {
        return SDRMREF & (1u << 10u);
    }

    /**
     * Set SDRMREF's SELFREX bit.
     */
    inline void set_SDRMREF_SELFREX()
    {
        SDRMREF |= 1u << 10u;
    }

    /**
     * Clear SDRMREF's SELFREX bit.
     */
    inline void clear_SDRMREF_SELFREX()
    {
        SDRMREF &= ~(1u << 10u);
    }

    /**
     * Toggle SDRMREF's SELFREX bit.
     */
    inline void toggle_SDRMREF_SELFREX()
    {
        SDRMREF ^= 1u << 10u;
    }

    /**
     * Get SDRMREF's SELFRENST bit.
     */
    inline bool get_SDRMREF_SELFRENST()
    {
        return SDRMREF & (1u << 11u);
    }

    /**
     * Get SDRMREF's SELFREN bit.
     */
    inline bool get_SDRMREF_SELFREN()
    {
        return SDRMREF & (1u << 12u);
    }

    /**
     * Set SDRMREF's SELFREN bit.
     */
    inline void set_SDRMREF_SELFREN()
    {
        SDRMREF |= 1u << 12u;
    }

    /**
     * Clear SDRMREF's SELFREN bit.
     */
    inline void clear_SDRMREF_SELFREN()
    {
        SDRMREF &= ~(1u << 12u);
    }

    /**
     * Toggle SDRMREF's SELFREN bit.
     */
    inline void toggle_SDRMREF_SELFREN()
    {
        SDRMREF ^= 1u << 12u;
    }

    /**
     * Get SDRMREF's AUTOSELFR bit.
     */
    inline bool get_SDRMREF_AUTOSELFR()
    {
        return SDRMREF & (1u << 13u);
    }

    /**
     * Set SDRMREF's AUTOSELFR bit.
     */
    inline void set_SDRMREF_AUTOSELFR()
    {
        SDRMREF |= 1u << 13u;
    }

    /**
     * Clear SDRMREF's AUTOSELFR bit.
     */
    inline void clear_SDRMREF_AUTOSELFR()
    {
        SDRMREF &= ~(1u << 13u);
    }

    /**
     * Toggle SDRMREF's AUTOSELFR bit.
     */
    inline void toggle_SDRMREF_AUTOSELFR()
    {
        SDRMREF ^= 1u << 13u;
    }

    /**
     * Get SDRMREF's ERFSHC field.
     */
    inline uint8_t get_SDRMREF_ERFSHC()
    {
        return (SDRMREF >> 14u) & 0b11u;
    }

    /**
     * Set SDRMREF's ERFSHC field.
     */
    inline void set_SDRMREF_ERFSHC(uint8_t value)
    {
        uint32_t curr = SDRMREF;

        curr &= ~(0b11u << 14u);
        curr |= (value & 0b11u) << 14u;

        SDRMREF = curr;
    }

    /**
     * Get SDRMREF's SELFREX_DLY field.
     */
    inline uint8_t get_SDRMREF_SELFREX_DLY()
    {
        return (SDRMREF >> 16u) & 0b11111111u;
    }

    /**
     * Set SDRMREF's SELFREX_DLY field.
     */
    inline void set_SDRMREF_SELFREX_DLY(uint8_t value)
    {
        uint32_t curr = SDRMREF;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        SDRMREF = curr;
    }

    /**
     * Get SDRMREF's ARFSH bit.
     */
    inline bool get_SDRMREF_ARFSH()
    {
        return SDRMREF & (1u << 24u);
    }

    /**
     * Set SDRMREF's ARFSH bit.
     */
    inline void set_SDRMREF_ARFSH()
    {
        SDRMREF |= 1u << 24u;
    }

    /**
     * Clear SDRMREF's ARFSH bit.
     */
    inline void clear_SDRMREF_ARFSH()
    {
        SDRMREF &= ~(1u << 24u);
    }

    /**
     * Toggle SDRMREF's ARFSH bit.
     */
    inline void toggle_SDRMREF_ARFSH()
    {
        SDRMREF ^= 1u << 24u;
    }

    /**
     * Get SDRMREF's RES_DLY field.
     */
    inline uint8_t get_SDRMREF_RES_DLY()
    {
        return (SDRMREF >> 25u) & 0b111u;
    }

    /**
     * Set SDRMREF's RES_DLY field.
     */
    inline void set_SDRMREF_RES_DLY(uint8_t value)
    {
        uint32_t curr = SDRMREF;

        curr &= ~(0b111u << 25u);
        curr |= (value & 0b111u) << 25u;

        SDRMREF = curr;
    }

    /**
     * Get all of SDRMREF's bit fields.
     */
    inline void get_SDRMREF(uint8_t &REFRESHC, uint8_t &REFRESHR, bool &SELFREXST, bool &SELFREX, bool &SELFRENST, bool &SELFREN, bool &AUTOSELFR, uint8_t &ERFSHC, uint8_t &SELFREX_DLY, bool &ARFSH, uint8_t &RES_DLY)
    {
        uint32_t curr = SDRMREF;

        REFRESHC = (curr >> 0u) & 0b111111u;
        REFRESHR = (curr >> 6u) & 0b111u;
        SELFREXST = curr & (1u << 9u);
        SELFREX = curr & (1u << 10u);
        SELFRENST = curr & (1u << 11u);
        SELFREN = curr & (1u << 12u);
        AUTOSELFR = curr & (1u << 13u);
        ERFSHC = (curr >> 14u) & 0b11u;
        SELFREX_DLY = (curr >> 16u) & 0b11111111u;
        ARFSH = curr & (1u << 24u);
        RES_DLY = (curr >> 25u) & 0b111u;
    }

    /**
     * Set all of SDRMREF's bit fields.
     */
    inline void set_SDRMREF(uint8_t REFRESHC, uint8_t REFRESHR, bool SELFREX, bool SELFREN, bool AUTOSELFR, uint8_t ERFSHC, uint8_t SELFREX_DLY, bool ARFSH, uint8_t RES_DLY)
    {
        uint32_t curr = SDRMREF;

        curr &= ~(0b111111u << 0u);
        curr |= (REFRESHC & 0b111111u) << 0u;
        curr &= ~(0b111u << 6u);
        curr |= (REFRESHR & 0b111u) << 6u;
        curr &= ~(0b1u << 10u);
        curr |= (SELFREX & 0b1u) << 10u;
        curr &= ~(0b1u << 12u);
        curr |= (SELFREN & 0b1u) << 12u;
        curr &= ~(0b1u << 13u);
        curr |= (AUTOSELFR & 0b1u) << 13u;
        curr &= ~(0b11u << 14u);
        curr |= (ERFSHC & 0b11u) << 14u;
        curr &= ~(0b11111111u << 16u);
        curr |= (SELFREX_DLY & 0b11111111u) << 16u;
        curr &= ~(0b1u << 24u);
        curr |= (ARFSH & 0b1u) << 24u;
        curr &= ~(0b111u << 25u);
        curr |= (RES_DLY & 0b111u) << 25u;

        SDRMREF = curr;
    }

    /**
     * Get SDRSTAT's REFERR bit.
     */
    inline EBU_SDRSTAT_REFERR get_SDRSTAT_REFERR()
    {
        return EBU_SDRSTAT_REFERR(SDRSTAT & (1u << 0u));
    }

    /**
     * Get SDRSTAT's SDRMBUSY bit.
     */
    inline EBU_SDRSTAT_SDRMBUSY get_SDRSTAT_SDRMBUSY()
    {
        return EBU_SDRSTAT_SDRMBUSY(SDRSTAT & (1u << 1u));
    }

    /**
     * Get SDRSTAT's SDERR bit.
     */
    inline EBU_SDRSTAT_SDERR get_SDRSTAT_SDERR()
    {
        return EBU_SDRSTAT_SDERR(SDRSTAT & (1u << 2u));
    }

    /**
     * Get all of SDRSTAT's bit fields.
     */
    inline void get_SDRSTAT(EBU_SDRSTAT_REFERR &REFERR, EBU_SDRSTAT_SDRMBUSY &SDRMBUSY, EBU_SDRSTAT_SDERR &SDERR)
    {
        uint32_t curr = SDRSTAT;

        REFERR = EBU_SDRSTAT_REFERR(curr & (1u << 0u));
        SDRMBUSY = EBU_SDRSTAT_SDRMBUSY(curr & (1u << 1u));
        SDERR = EBU_SDRSTAT_SDERR(curr & (1u << 2u));
    }
};

static_assert(sizeof(ebu) == ebu::size);

static volatile ebu *const EBU = reinterpret_cast<ebu *>(0x58008000);

}; // namespace XMC4700
