/**
 * \file
 * \brief Generated by ifgen (3.0.1).
 */
#pragma once

#include "../enums/VADC_G0_ARBCFG_ANONS.h"
#include "../enums/VADC_G0_ARBCFG_ARBM.h"
#include "../enums/VADC_G0_ARBCFG_ARBRND.h"
#include "../enums/VADC_G0_ARBCFG_BUSY.h"
#include "../enums/VADC_G0_ARBCFG_CAL.h"
#include "../enums/VADC_G0_ARBCFG_SAMPLE.h"
#include "../enums/VADC_G0_ARBPR_ASEN0.h"
#include "../enums/VADC_G0_ARBPR_ASEN1.h"
#include "../enums/VADC_G0_ARBPR_ASEN2.h"
#include "../enums/VADC_G0_ARBPR_CSM0.h"
#include "../enums/VADC_G0_ARBPR_CSM1.h"
#include "../enums/VADC_G0_ARBPR_CSM2.h"
#include "../enums/VADC_G0_ARBPR_PRIO0.h"
#include "../enums/VADC_G0_ARBPR_PRIO1.h"
#include "../enums/VADC_G0_ARBPR_PRIO2.h"
#include "../enums/VADC_G0_ASCTRL_GTWC.h"
#include "../enums/VADC_G0_ASCTRL_SRCRESREG.h"
#include "../enums/VADC_G0_ASCTRL_TMEN.h"
#include "../enums/VADC_G0_ASCTRL_TMWC.h"
#include "../enums/VADC_G0_ASCTRL_XTMODE.h"
#include "../enums/VADC_G0_ASCTRL_XTWC.h"
#include "../enums/VADC_G0_ASMR_CLRPND.h"
#include "../enums/VADC_G0_ASMR_ENGT.h"
#include "../enums/VADC_G0_ASMR_ENSI.h"
#include "../enums/VADC_G0_ASMR_ENTR.h"
#include "../enums/VADC_G0_ASMR_LDEV.h"
#include "../enums/VADC_G0_ASMR_LDM.h"
#include "../enums/VADC_G0_ASMR_REQGT.h"
#include "../enums/VADC_G0_ASMR_RPTDIS.h"
#include "../enums/VADC_G0_ASMR_SCAN.h"
#include "../enums/VADC_G0_ASPND_CHPND0.h"
#include "../enums/VADC_G0_ASPND_CHPND1.h"
#include "../enums/VADC_G0_ASPND_CHPND2.h"
#include "../enums/VADC_G0_ASPND_CHPND3.h"
#include "../enums/VADC_G0_ASPND_CHPND4.h"
#include "../enums/VADC_G0_ASPND_CHPND5.h"
#include "../enums/VADC_G0_ASPND_CHPND6.h"
#include "../enums/VADC_G0_ASPND_CHPND7.h"
#include "../enums/VADC_G0_ASSEL_CHSEL0.h"
#include "../enums/VADC_G0_ASSEL_CHSEL1.h"
#include "../enums/VADC_G0_ASSEL_CHSEL2.h"
#include "../enums/VADC_G0_ASSEL_CHSEL3.h"
#include "../enums/VADC_G0_ASSEL_CHSEL4.h"
#include "../enums/VADC_G0_ASSEL_CHSEL5.h"
#include "../enums/VADC_G0_ASSEL_CHSEL6.h"
#include "../enums/VADC_G0_ASSEL_CHSEL7.h"
#include "../enums/VADC_G0_BFLC_BFM0.h"
#include "../enums/VADC_G0_BFLC_BFM1.h"
#include "../enums/VADC_G0_BFLC_BFM2.h"
#include "../enums/VADC_G0_BFLC_BFM3.h"
#include "../enums/VADC_G0_BFLNP_BFL0NP.h"
#include "../enums/VADC_G0_BFLNP_BFL1NP.h"
#include "../enums/VADC_G0_BFLNP_BFL2NP.h"
#include "../enums/VADC_G0_BFLNP_BFL3NP.h"
#include "../enums/VADC_G0_BFLS_BFC0.h"
#include "../enums/VADC_G0_BFLS_BFC1.h"
#include "../enums/VADC_G0_BFLS_BFC2.h"
#include "../enums/VADC_G0_BFLS_BFC3.h"
#include "../enums/VADC_G0_BFLS_BFS0.h"
#include "../enums/VADC_G0_BFLS_BFS1.h"
#include "../enums/VADC_G0_BFLS_BFS2.h"
#include "../enums/VADC_G0_BFLS_BFS3.h"
#include "../enums/VADC_G0_BFL_BFA0.h"
#include "../enums/VADC_G0_BFL_BFA1.h"
#include "../enums/VADC_G0_BFL_BFA2.h"
#include "../enums/VADC_G0_BFL_BFA3.h"
#include "../enums/VADC_G0_BFL_BFI0.h"
#include "../enums/VADC_G0_BFL_BFI1.h"
#include "../enums/VADC_G0_BFL_BFI2.h"
#include "../enums/VADC_G0_BFL_BFI3.h"
#include "../enums/VADC_G0_BFL_BFL0.h"
#include "../enums/VADC_G0_BFL_BFL1.h"
#include "../enums/VADC_G0_BFL_BFL2.h"
#include "../enums/VADC_G0_BFL_BFL3.h"
#include "../enums/VADC_G0_CEFCLR_CEV0.h"
#include "../enums/VADC_G0_CEFCLR_CEV1.h"
#include "../enums/VADC_G0_CEFCLR_CEV2.h"
#include "../enums/VADC_G0_CEFCLR_CEV3.h"
#include "../enums/VADC_G0_CEFCLR_CEV4.h"
#include "../enums/VADC_G0_CEFCLR_CEV5.h"
#include "../enums/VADC_G0_CEFCLR_CEV6.h"
#include "../enums/VADC_G0_CEFCLR_CEV7.h"
#include "../enums/VADC_G0_CEFLAG_CEV0.h"
#include "../enums/VADC_G0_CEFLAG_CEV1.h"
#include "../enums/VADC_G0_CEFLAG_CEV2.h"
#include "../enums/VADC_G0_CEFLAG_CEV3.h"
#include "../enums/VADC_G0_CEFLAG_CEV4.h"
#include "../enums/VADC_G0_CEFLAG_CEV5.h"
#include "../enums/VADC_G0_CEFLAG_CEV6.h"
#include "../enums/VADC_G0_CEFLAG_CEV7.h"
#include "../enums/VADC_G0_CEVNP0_CEV0NP.h"
#include "../enums/VADC_G0_CEVNP0_CEV1NP.h"
#include "../enums/VADC_G0_CEVNP0_CEV2NP.h"
#include "../enums/VADC_G0_CEVNP0_CEV3NP.h"
#include "../enums/VADC_G0_CEVNP0_CEV4NP.h"
#include "../enums/VADC_G0_CEVNP0_CEV5NP.h"
#include "../enums/VADC_G0_CEVNP0_CEV6NP.h"
#include "../enums/VADC_G0_CEVNP0_CEV7NP.h"
#include "../enums/VADC_G0_CHASS_ASSCH0.h"
#include "../enums/VADC_G0_CHASS_ASSCH1.h"
#include "../enums/VADC_G0_CHASS_ASSCH2.h"
#include "../enums/VADC_G0_CHASS_ASSCH3.h"
#include "../enums/VADC_G0_CHASS_ASSCH4.h"
#include "../enums/VADC_G0_CHASS_ASSCH5.h"
#include "../enums/VADC_G0_CHASS_ASSCH6.h"
#include "../enums/VADC_G0_CHASS_ASSCH7.h"
#include "../enums/VADC_G0_CHCTR_BNDSELL.h"
#include "../enums/VADC_G0_CHCTR_BNDSELU.h"
#include "../enums/VADC_G0_CHCTR_BWDCH.h"
#include "../enums/VADC_G0_CHCTR_BWDEN.h"
#include "../enums/VADC_G0_CHCTR_CHEVMODE.h"
#include "../enums/VADC_G0_CHCTR_ICLSEL.h"
#include "../enums/VADC_G0_CHCTR_REFSEL.h"
#include "../enums/VADC_G0_CHCTR_RESPOS.h"
#include "../enums/VADC_G0_CHCTR_RESREG.h"
#include "../enums/VADC_G0_CHCTR_RESTBS.h"
#include "../enums/VADC_G0_CHCTR_SYNC.h"
#include "../enums/VADC_G0_EMUXCTR_EMUXMODE.h"
#include "../enums/VADC_G0_EMUXCTR_EMXCOD.h"
#include "../enums/VADC_G0_EMUXCTR_EMXCSS.h"
#include "../enums/VADC_G0_EMUXCTR_EMXST.h"
#include "../enums/VADC_G0_EMUXCTR_EMXWC.h"
#include "../enums/VADC_G0_ICLASS_CME.h"
#include "../enums/VADC_G0_ICLASS_CMS.h"
#include "../enums/VADC_G0_Q0R0_ENSI.h"
#include "../enums/VADC_G0_Q0R0_EXTR.h"
#include "../enums/VADC_G0_Q0R0_RF.h"
#include "../enums/VADC_G0_Q0R0_V.h"
#include "../enums/VADC_G0_QBUR0_V.h"
#include "../enums/VADC_G0_QCTRL0_GTWC.h"
#include "../enums/VADC_G0_QCTRL0_SRCRESREG.h"
#include "../enums/VADC_G0_QCTRL0_TMEN.h"
#include "../enums/VADC_G0_QCTRL0_TMWC.h"
#include "../enums/VADC_G0_QCTRL0_XTMODE.h"
#include "../enums/VADC_G0_QCTRL0_XTWC.h"
#include "../enums/VADC_G0_QINR0_ENSI.h"
#include "../enums/VADC_G0_QINR0_EXTR.h"
#include "../enums/VADC_G0_QINR0_RF.h"
#include "../enums/VADC_G0_QMR0_CEV.h"
#include "../enums/VADC_G0_QMR0_CLRV.h"
#include "../enums/VADC_G0_QMR0_ENGT.h"
#include "../enums/VADC_G0_QMR0_ENTR.h"
#include "../enums/VADC_G0_QMR0_FLUSH.h"
#include "../enums/VADC_G0_QMR0_RPTDIS.h"
#include "../enums/VADC_G0_QMR0_TREV.h"
#include "../enums/VADC_G0_QSR0_EMPTY.h"
#include "../enums/VADC_G0_QSR0_EV.h"
#include "../enums/VADC_G0_QSR0_FILL.h"
#include "../enums/VADC_G0_QSR0_REQGT.h"
#include "../enums/VADC_G0_RCR_DMM.h"
#include "../enums/VADC_G0_RCR_FEN.h"
#include "../enums/VADC_G0_RCR_SRGEN.h"
#include "../enums/VADC_G0_RCR_WFR.h"
#include "../enums/VADC_G0_REFCLR_REV0.h"
#include "../enums/VADC_G0_REFCLR_REV1.h"
#include "../enums/VADC_G0_REFCLR_REV10.h"
#include "../enums/VADC_G0_REFCLR_REV11.h"
#include "../enums/VADC_G0_REFCLR_REV12.h"
#include "../enums/VADC_G0_REFCLR_REV13.h"
#include "../enums/VADC_G0_REFCLR_REV14.h"
#include "../enums/VADC_G0_REFCLR_REV15.h"
#include "../enums/VADC_G0_REFCLR_REV2.h"
#include "../enums/VADC_G0_REFCLR_REV3.h"
#include "../enums/VADC_G0_REFCLR_REV4.h"
#include "../enums/VADC_G0_REFCLR_REV5.h"
#include "../enums/VADC_G0_REFCLR_REV6.h"
#include "../enums/VADC_G0_REFCLR_REV7.h"
#include "../enums/VADC_G0_REFCLR_REV8.h"
#include "../enums/VADC_G0_REFCLR_REV9.h"
#include "../enums/VADC_G0_REFLAG_REV0.h"
#include "../enums/VADC_G0_REFLAG_REV1.h"
#include "../enums/VADC_G0_REFLAG_REV10.h"
#include "../enums/VADC_G0_REFLAG_REV11.h"
#include "../enums/VADC_G0_REFLAG_REV12.h"
#include "../enums/VADC_G0_REFLAG_REV13.h"
#include "../enums/VADC_G0_REFLAG_REV14.h"
#include "../enums/VADC_G0_REFLAG_REV15.h"
#include "../enums/VADC_G0_REFLAG_REV2.h"
#include "../enums/VADC_G0_REFLAG_REV3.h"
#include "../enums/VADC_G0_REFLAG_REV4.h"
#include "../enums/VADC_G0_REFLAG_REV5.h"
#include "../enums/VADC_G0_REFLAG_REV6.h"
#include "../enums/VADC_G0_REFLAG_REV7.h"
#include "../enums/VADC_G0_REFLAG_REV8.h"
#include "../enums/VADC_G0_REFLAG_REV9.h"
#include "../enums/VADC_G0_RESD_CRS.h"
#include "../enums/VADC_G0_RESD_FCR.h"
#include "../enums/VADC_G0_RESD_VF.h"
#include "../enums/VADC_G0_RES_CRS.h"
#include "../enums/VADC_G0_RES_FCR.h"
#include "../enums/VADC_G0_RES_VF.h"
#include "../enums/VADC_G0_REVNP0_REV0NP.h"
#include "../enums/VADC_G0_REVNP0_REV1NP.h"
#include "../enums/VADC_G0_REVNP0_REV2NP.h"
#include "../enums/VADC_G0_REVNP0_REV3NP.h"
#include "../enums/VADC_G0_REVNP0_REV4NP.h"
#include "../enums/VADC_G0_REVNP0_REV5NP.h"
#include "../enums/VADC_G0_REVNP0_REV6NP.h"
#include "../enums/VADC_G0_REVNP0_REV7NP.h"
#include "../enums/VADC_G0_REVNP1_REV10NP.h"
#include "../enums/VADC_G0_REVNP1_REV11NP.h"
#include "../enums/VADC_G0_REVNP1_REV12NP.h"
#include "../enums/VADC_G0_REVNP1_REV13NP.h"
#include "../enums/VADC_G0_REVNP1_REV14NP.h"
#include "../enums/VADC_G0_REVNP1_REV15NP.h"
#include "../enums/VADC_G0_REVNP1_REV8NP.h"
#include "../enums/VADC_G0_REVNP1_REV9NP.h"
#include "../enums/VADC_G0_SEFCLR_SEV0.h"
#include "../enums/VADC_G0_SEFCLR_SEV1.h"
#include "../enums/VADC_G0_SEFLAG_SEV0.h"
#include "../enums/VADC_G0_SEFLAG_SEV1.h"
#include "../enums/VADC_G0_SEVNP_SEV0NP.h"
#include "../enums/VADC_G0_SEVNP_SEV1NP.h"
#include "../enums/VADC_G0_SRACT_AGSR0.h"
#include "../enums/VADC_G0_SRACT_AGSR1.h"
#include "../enums/VADC_G0_SRACT_AGSR2.h"
#include "../enums/VADC_G0_SRACT_AGSR3.h"
#include "../enums/VADC_G0_SRACT_ASSR0.h"
#include "../enums/VADC_G0_SRACT_ASSR1.h"
#include "../enums/VADC_G0_SRACT_ASSR2.h"
#include "../enums/VADC_G0_SRACT_ASSR3.h"
#include "../enums/VADC_G0_SYNCTR_EVALR1.h"
#include "../enums/VADC_G0_SYNCTR_EVALR2.h"
#include "../enums/VADC_G0_SYNCTR_EVALR3.h"
#include "../enums/VADC_G0_SYNCTR_STSEL.h"
#include "../enums/VADC_G0_VFR_VF0.h"
#include "../enums/VADC_G0_VFR_VF1.h"
#include "../enums/VADC_G0_VFR_VF10.h"
#include "../enums/VADC_G0_VFR_VF11.h"
#include "../enums/VADC_G0_VFR_VF12.h"
#include "../enums/VADC_G0_VFR_VF13.h"
#include "../enums/VADC_G0_VFR_VF14.h"
#include "../enums/VADC_G0_VFR_VF15.h"
#include "../enums/VADC_G0_VFR_VF2.h"
#include "../enums/VADC_G0_VFR_VF3.h"
#include "../enums/VADC_G0_VFR_VF4.h"
#include "../enums/VADC_G0_VFR_VF5.h"
#include "../enums/VADC_G0_VFR_VF6.h"
#include "../enums/VADC_G0_VFR_VF7.h"
#include "../enums/VADC_G0_VFR_VF8.h"
#include "../enums/VADC_G0_VFR_VF9.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Analog to Digital Converter
 */
struct [[gnu::packed]] vadc_g0
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< vadc_g0's identifier. */
    static constexpr std::size_t size = 960; /*!< vadc_g0's size in bytes. */

    /* Fields. */
    union
    {
        uint32_t QINR0; /* (write-only) Queue 0 Input Register */
        const uint32_t QBUR0 = {}; /* (read-only) Queue 0 Backup Register */
    };
    static constexpr std::size_t reserved_padding0_length = 32;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t ARBCFG;                                                   /*!< (read-write) Arbitration Configuration Register */
    uint32_t ARBPR;                                                    /*!< (read-write) Arbitration Priority Register */
    uint32_t CHASS;                                                    /*!< (read-write) Channel Assignment Register */
    static constexpr std::size_t reserved_padding1_length = 5;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    static constexpr std::size_t ICLASS_length = 2;
    uint32_t ICLASS[ICLASS_length];                                    /*!< (read-write) Input Class Register */
    static constexpr std::size_t reserved_padding2_length = 2;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t ALIAS;                                                    /*!< (read-write) Alias Register */
    const uint32_t reserved_padding3 = {};
    uint32_t BOUND;                                                    /*!< (read-write) Boundary Select Register */
    const uint32_t reserved_padding4 = {};
    uint32_t SYNCTR;                                                   /*!< (read-write) Synchronization Control Register */
    const uint32_t reserved_padding5 = {};
    uint32_t BFL;                                                      /*!< (read-write) Boundary Flag Register */
    uint32_t BFLS;                                                     /*!< (write-only) Boundary Flag Software Register */
    uint32_t BFLC;                                                     /*!< (read-write) Boundary Flag Control Register */
    uint32_t BFLNP;                                                    /*!< (read-write) Boundary Flag Node Pointer Register */
    static constexpr std::size_t reserved_padding6_length = 10;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t QCTRL0;                                                   /*!< (read-write) Queue 0 Source Control Register */
    uint32_t QMR0;                                                     /*!< (read-write) Queue 0 Mode Register */
    const uint32_t QSR0 = {};                                          /*!< (read-only) Queue 0 Status Register */
    const uint32_t Q0R0 = {};                                          /*!< (read-only) Queue 0 Register 0 */
    static constexpr std::size_t reserved_padding7_length = 3;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t ASCTRL;                                                   /*!< (read-write) Autoscan Source Control Register */
    uint32_t ASMR;                                                     /*!< (read-write) Autoscan Source Mode Register */
    uint32_t ASSEL;                                                    /*!< (read-write) Autoscan Source Channel Select Register */
    uint32_t ASPND;                                                    /*!< (read-write) Autoscan Source Pending Register */
    static constexpr std::size_t reserved_padding8_length = 20;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t CEFLAG;                                                   /*!< (read-write) Channel Event Flag Register */
    uint32_t REFLAG;                                                   /*!< (read-write) Result Event Flag Register */
    uint32_t SEFLAG;                                                   /*!< (read-write) Source Event Flag Register */
    const uint32_t reserved_padding9 = {};
    uint32_t CEFCLR;                                                   /*!< (write-only) Channel Event Flag Clear Register */
    uint32_t REFCLR;                                                   /*!< (write-only) Result Event Flag Clear Register */
    uint32_t SEFCLR;                                                   /*!< (write-only) Source Event Flag Clear Register */
    const uint32_t reserved_padding10 = {};
    uint32_t CEVNP0;                                                   /*!< (read-write) Channel Event Node Pointer Register 0 */
    static constexpr std::size_t reserved_padding11_length = 3;
    const uint32_t reserved_padding11[reserved_padding11_length] = {};
    uint32_t REVNP0;                                                   /*!< (read-write) Result Event Node Pointer Register 0 */
    uint32_t REVNP1;                                                   /*!< (read-write) Result Event Node Pointer Register 1 */
    static constexpr std::size_t reserved_padding12_length = 2;
    const uint32_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t SEVNP;                                                    /*!< (read-write) Source Event Node Pointer Register */
    const uint32_t reserved_padding13 = {};
    uint32_t SRACT;                                                    /*!< (write-only) Service Request Software Activation Trigger */
    static constexpr std::size_t reserved_padding14_length = 9;
    const uint32_t reserved_padding14[reserved_padding14_length] = {};
    uint32_t EMUXCTR;                                                  /*!< (read-write) E0ternal Multiplexer Control Register */
    const uint32_t reserved_padding15 = {};
    uint32_t VFR;                                                      /*!< (read-write) Valid Flag Register */
    const uint32_t reserved_padding16 = {};
    static constexpr std::size_t CHCTR_length = 8;
    uint32_t CHCTR[CHCTR_length];                                      /*!< (read-write) Channel Ctrl. Reg. */
    static constexpr std::size_t reserved_padding17_length = 24;
    const uint32_t reserved_padding17[reserved_padding17_length] = {};
    static constexpr std::size_t RCR_length = 16;
    uint32_t RCR[RCR_length];                                          /*!< (read-write) Result Control Register */
    static constexpr std::size_t reserved_padding18_length = 16;
    const uint32_t reserved_padding18[reserved_padding18_length] = {};
    static constexpr std::size_t RES_length = 16;
    uint32_t RES[RES_length];                                          /*!< (read-write) Result Register */
    static constexpr std::size_t reserved_padding19_length = 16;
    const uint32_t reserved_padding19[reserved_padding19_length] = {};
    static constexpr std::size_t RESD_length = 16;
    const uint32_t RESD[RESD_length] = {};                             /*!< (read-only) Result Register, Debug */

    /* Methods. */

    /**
     * Get ARBCFG's SAMPLE bit.
     */
    VADC_G0_ARBCFG_SAMPLE get_ARBCFG_SAMPLE()
    {
        return VADC_G0_ARBCFG_SAMPLE(ARBCFG & (1u << 31u));
    }

    /**
     * Get ARBCFG's BUSY bit.
     */
    VADC_G0_ARBCFG_BUSY get_ARBCFG_BUSY()
    {
        return VADC_G0_ARBCFG_BUSY(ARBCFG & (1u << 30u));
    }

    /**
     * Get ARBCFG's CAL bit.
     */
    VADC_G0_ARBCFG_CAL get_ARBCFG_CAL()
    {
        return VADC_G0_ARBCFG_CAL(ARBCFG & (1u << 28u));
    }

    /**
     * Get ARBCFG's ANONS field.
     */
    VADC_G0_ARBCFG_ANONS get_ARBCFG_ANONS()
    {
        return VADC_G0_ARBCFG_ANONS((ARBCFG >> 16u) & 0b11u);
    }

    /**
     * Get ARBCFG's ARBM bit.
     */
    VADC_G0_ARBCFG_ARBM get_ARBCFG_ARBM()
    {
        return VADC_G0_ARBCFG_ARBM(ARBCFG & (1u << 7u));
    }

    /**
     * Set ARBCFG's ARBM bit.
     */
    inline void set_ARBCFG_ARBM()
    {
        ARBCFG |= 1u << 7u;
    }

    /**
     * Clear ARBCFG's ARBM bit.
     */
    inline void clear_ARBCFG_ARBM()
    {
        ARBCFG &= ~(1u << 7u);
    }

    /**
     * Toggle ARBCFG's ARBM bit.
     */
    inline void toggle_ARBCFG_ARBM()
    {
        ARBCFG ^= 1u << 7u;
    }

    /**
     * Get ARBCFG's ARBRND field.
     */
    VADC_G0_ARBCFG_ARBRND get_ARBCFG_ARBRND()
    {
        return VADC_G0_ARBCFG_ARBRND((ARBCFG >> 4u) & 0b11u);
    }

    /**
     * Set ARBCFG's ARBRND field.
     */
    inline void set_ARBCFG_ARBRND(VADC_G0_ARBCFG_ARBRND value)
    {
        uint32_t curr = ARBCFG;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        ARBCFG = curr;
    }

    /**
     * Get ARBCFG's ANONC field.
     */
    uint8_t get_ARBCFG_ANONC()
    {
        return (ARBCFG >> 0u) & 0b11u;
    }

    /**
     * Set ARBCFG's ANONC field.
     */
    inline void set_ARBCFG_ANONC(uint8_t value)
    {
        uint32_t curr = ARBCFG;

        curr &= ~(0b11u << 0u);
        curr |= (value & 0b11u) << 0u;

        ARBCFG = curr;
    }

    /**
     * Get ARBPR's ASEN2 bit.
     */
    VADC_G0_ARBPR_ASEN2 get_ARBPR_ASEN2()
    {
        return VADC_G0_ARBPR_ASEN2(ARBPR & (1u << 26u));
    }

    /**
     * Set ARBPR's ASEN2 bit.
     */
    inline void set_ARBPR_ASEN2()
    {
        ARBPR |= 1u << 26u;
    }

    /**
     * Clear ARBPR's ASEN2 bit.
     */
    inline void clear_ARBPR_ASEN2()
    {
        ARBPR &= ~(1u << 26u);
    }

    /**
     * Toggle ARBPR's ASEN2 bit.
     */
    inline void toggle_ARBPR_ASEN2()
    {
        ARBPR ^= 1u << 26u;
    }

    /**
     * Get ARBPR's ASEN1 bit.
     */
    VADC_G0_ARBPR_ASEN1 get_ARBPR_ASEN1()
    {
        return VADC_G0_ARBPR_ASEN1(ARBPR & (1u << 25u));
    }

    /**
     * Set ARBPR's ASEN1 bit.
     */
    inline void set_ARBPR_ASEN1()
    {
        ARBPR |= 1u << 25u;
    }

    /**
     * Clear ARBPR's ASEN1 bit.
     */
    inline void clear_ARBPR_ASEN1()
    {
        ARBPR &= ~(1u << 25u);
    }

    /**
     * Toggle ARBPR's ASEN1 bit.
     */
    inline void toggle_ARBPR_ASEN1()
    {
        ARBPR ^= 1u << 25u;
    }

    /**
     * Get ARBPR's ASEN0 bit.
     */
    VADC_G0_ARBPR_ASEN0 get_ARBPR_ASEN0()
    {
        return VADC_G0_ARBPR_ASEN0(ARBPR & (1u << 24u));
    }

    /**
     * Set ARBPR's ASEN0 bit.
     */
    inline void set_ARBPR_ASEN0()
    {
        ARBPR |= 1u << 24u;
    }

    /**
     * Clear ARBPR's ASEN0 bit.
     */
    inline void clear_ARBPR_ASEN0()
    {
        ARBPR &= ~(1u << 24u);
    }

    /**
     * Toggle ARBPR's ASEN0 bit.
     */
    inline void toggle_ARBPR_ASEN0()
    {
        ARBPR ^= 1u << 24u;
    }

    /**
     * Get ARBPR's CSM2 bit.
     */
    VADC_G0_ARBPR_CSM2 get_ARBPR_CSM2()
    {
        return VADC_G0_ARBPR_CSM2(ARBPR & (1u << 11u));
    }

    /**
     * Set ARBPR's CSM2 bit.
     */
    inline void set_ARBPR_CSM2()
    {
        ARBPR |= 1u << 11u;
    }

    /**
     * Clear ARBPR's CSM2 bit.
     */
    inline void clear_ARBPR_CSM2()
    {
        ARBPR &= ~(1u << 11u);
    }

    /**
     * Toggle ARBPR's CSM2 bit.
     */
    inline void toggle_ARBPR_CSM2()
    {
        ARBPR ^= 1u << 11u;
    }

    /**
     * Get ARBPR's CSM1 bit.
     */
    VADC_G0_ARBPR_CSM1 get_ARBPR_CSM1()
    {
        return VADC_G0_ARBPR_CSM1(ARBPR & (1u << 7u));
    }

    /**
     * Set ARBPR's CSM1 bit.
     */
    inline void set_ARBPR_CSM1()
    {
        ARBPR |= 1u << 7u;
    }

    /**
     * Clear ARBPR's CSM1 bit.
     */
    inline void clear_ARBPR_CSM1()
    {
        ARBPR &= ~(1u << 7u);
    }

    /**
     * Toggle ARBPR's CSM1 bit.
     */
    inline void toggle_ARBPR_CSM1()
    {
        ARBPR ^= 1u << 7u;
    }

    /**
     * Get ARBPR's CSM0 bit.
     */
    VADC_G0_ARBPR_CSM0 get_ARBPR_CSM0()
    {
        return VADC_G0_ARBPR_CSM0(ARBPR & (1u << 3u));
    }

    /**
     * Set ARBPR's CSM0 bit.
     */
    inline void set_ARBPR_CSM0()
    {
        ARBPR |= 1u << 3u;
    }

    /**
     * Clear ARBPR's CSM0 bit.
     */
    inline void clear_ARBPR_CSM0()
    {
        ARBPR &= ~(1u << 3u);
    }

    /**
     * Toggle ARBPR's CSM0 bit.
     */
    inline void toggle_ARBPR_CSM0()
    {
        ARBPR ^= 1u << 3u;
    }

    /**
     * Get ARBPR's PRIO2 field.
     */
    VADC_G0_ARBPR_PRIO2 get_ARBPR_PRIO2()
    {
        return VADC_G0_ARBPR_PRIO2((ARBPR >> 8u) & 0b11u);
    }

    /**
     * Set ARBPR's PRIO2 field.
     */
    inline void set_ARBPR_PRIO2(VADC_G0_ARBPR_PRIO2 value)
    {
        uint32_t curr = ARBPR;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        ARBPR = curr;
    }

    /**
     * Get ARBPR's PRIO1 field.
     */
    VADC_G0_ARBPR_PRIO1 get_ARBPR_PRIO1()
    {
        return VADC_G0_ARBPR_PRIO1((ARBPR >> 4u) & 0b11u);
    }

    /**
     * Set ARBPR's PRIO1 field.
     */
    inline void set_ARBPR_PRIO1(VADC_G0_ARBPR_PRIO1 value)
    {
        uint32_t curr = ARBPR;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        ARBPR = curr;
    }

    /**
     * Get ARBPR's PRIO0 field.
     */
    VADC_G0_ARBPR_PRIO0 get_ARBPR_PRIO0()
    {
        return VADC_G0_ARBPR_PRIO0((ARBPR >> 0u) & 0b11u);
    }

    /**
     * Set ARBPR's PRIO0 field.
     */
    inline void set_ARBPR_PRIO0(VADC_G0_ARBPR_PRIO0 value)
    {
        uint32_t curr = ARBPR;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        ARBPR = curr;
    }

    /**
     * Get CHASS's ASSCH7 bit.
     */
    VADC_G0_CHASS_ASSCH7 get_CHASS_ASSCH7()
    {
        return VADC_G0_CHASS_ASSCH7(CHASS & (1u << 7u));
    }

    /**
     * Set CHASS's ASSCH7 bit.
     */
    inline void set_CHASS_ASSCH7()
    {
        CHASS |= 1u << 7u;
    }

    /**
     * Clear CHASS's ASSCH7 bit.
     */
    inline void clear_CHASS_ASSCH7()
    {
        CHASS &= ~(1u << 7u);
    }

    /**
     * Toggle CHASS's ASSCH7 bit.
     */
    inline void toggle_CHASS_ASSCH7()
    {
        CHASS ^= 1u << 7u;
    }

    /**
     * Get CHASS's ASSCH6 bit.
     */
    VADC_G0_CHASS_ASSCH6 get_CHASS_ASSCH6()
    {
        return VADC_G0_CHASS_ASSCH6(CHASS & (1u << 6u));
    }

    /**
     * Set CHASS's ASSCH6 bit.
     */
    inline void set_CHASS_ASSCH6()
    {
        CHASS |= 1u << 6u;
    }

    /**
     * Clear CHASS's ASSCH6 bit.
     */
    inline void clear_CHASS_ASSCH6()
    {
        CHASS &= ~(1u << 6u);
    }

    /**
     * Toggle CHASS's ASSCH6 bit.
     */
    inline void toggle_CHASS_ASSCH6()
    {
        CHASS ^= 1u << 6u;
    }

    /**
     * Get CHASS's ASSCH5 bit.
     */
    VADC_G0_CHASS_ASSCH5 get_CHASS_ASSCH5()
    {
        return VADC_G0_CHASS_ASSCH5(CHASS & (1u << 5u));
    }

    /**
     * Set CHASS's ASSCH5 bit.
     */
    inline void set_CHASS_ASSCH5()
    {
        CHASS |= 1u << 5u;
    }

    /**
     * Clear CHASS's ASSCH5 bit.
     */
    inline void clear_CHASS_ASSCH5()
    {
        CHASS &= ~(1u << 5u);
    }

    /**
     * Toggle CHASS's ASSCH5 bit.
     */
    inline void toggle_CHASS_ASSCH5()
    {
        CHASS ^= 1u << 5u;
    }

    /**
     * Get CHASS's ASSCH4 bit.
     */
    VADC_G0_CHASS_ASSCH4 get_CHASS_ASSCH4()
    {
        return VADC_G0_CHASS_ASSCH4(CHASS & (1u << 4u));
    }

    /**
     * Set CHASS's ASSCH4 bit.
     */
    inline void set_CHASS_ASSCH4()
    {
        CHASS |= 1u << 4u;
    }

    /**
     * Clear CHASS's ASSCH4 bit.
     */
    inline void clear_CHASS_ASSCH4()
    {
        CHASS &= ~(1u << 4u);
    }

    /**
     * Toggle CHASS's ASSCH4 bit.
     */
    inline void toggle_CHASS_ASSCH4()
    {
        CHASS ^= 1u << 4u;
    }

    /**
     * Get CHASS's ASSCH3 bit.
     */
    VADC_G0_CHASS_ASSCH3 get_CHASS_ASSCH3()
    {
        return VADC_G0_CHASS_ASSCH3(CHASS & (1u << 3u));
    }

    /**
     * Set CHASS's ASSCH3 bit.
     */
    inline void set_CHASS_ASSCH3()
    {
        CHASS |= 1u << 3u;
    }

    /**
     * Clear CHASS's ASSCH3 bit.
     */
    inline void clear_CHASS_ASSCH3()
    {
        CHASS &= ~(1u << 3u);
    }

    /**
     * Toggle CHASS's ASSCH3 bit.
     */
    inline void toggle_CHASS_ASSCH3()
    {
        CHASS ^= 1u << 3u;
    }

    /**
     * Get CHASS's ASSCH2 bit.
     */
    VADC_G0_CHASS_ASSCH2 get_CHASS_ASSCH2()
    {
        return VADC_G0_CHASS_ASSCH2(CHASS & (1u << 2u));
    }

    /**
     * Set CHASS's ASSCH2 bit.
     */
    inline void set_CHASS_ASSCH2()
    {
        CHASS |= 1u << 2u;
    }

    /**
     * Clear CHASS's ASSCH2 bit.
     */
    inline void clear_CHASS_ASSCH2()
    {
        CHASS &= ~(1u << 2u);
    }

    /**
     * Toggle CHASS's ASSCH2 bit.
     */
    inline void toggle_CHASS_ASSCH2()
    {
        CHASS ^= 1u << 2u;
    }

    /**
     * Get CHASS's ASSCH1 bit.
     */
    VADC_G0_CHASS_ASSCH1 get_CHASS_ASSCH1()
    {
        return VADC_G0_CHASS_ASSCH1(CHASS & (1u << 1u));
    }

    /**
     * Set CHASS's ASSCH1 bit.
     */
    inline void set_CHASS_ASSCH1()
    {
        CHASS |= 1u << 1u;
    }

    /**
     * Clear CHASS's ASSCH1 bit.
     */
    inline void clear_CHASS_ASSCH1()
    {
        CHASS &= ~(1u << 1u);
    }

    /**
     * Toggle CHASS's ASSCH1 bit.
     */
    inline void toggle_CHASS_ASSCH1()
    {
        CHASS ^= 1u << 1u;
    }

    /**
     * Get CHASS's ASSCH0 bit.
     */
    VADC_G0_CHASS_ASSCH0 get_CHASS_ASSCH0()
    {
        return VADC_G0_CHASS_ASSCH0(CHASS & (1u << 0u));
    }

    /**
     * Set CHASS's ASSCH0 bit.
     */
    inline void set_CHASS_ASSCH0()
    {
        CHASS |= 1u << 0u;
    }

    /**
     * Clear CHASS's ASSCH0 bit.
     */
    inline void clear_CHASS_ASSCH0()
    {
        CHASS &= ~(1u << 0u);
    }

    /**
     * Toggle CHASS's ASSCH0 bit.
     */
    inline void toggle_CHASS_ASSCH0()
    {
        CHASS ^= 1u << 0u;
    }

    /**
     * Get ICLASS's CME field.
     */
    VADC_G0_ICLASS_CME get_ICLASS_CME(std::size_t index)
    {
        return VADC_G0_ICLASS_CME((ICLASS[index] >> 24u) & 0b111u);
    }

    /**
     * Set ICLASS's CME field.
     */
    inline void set_ICLASS_CME(std::size_t index, VADC_G0_ICLASS_CME value)
    {
        uint32_t curr = ICLASS[index];

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        ICLASS[index] = curr;
    }

    /**
     * Get ICLASS's STCE field.
     */
    uint8_t get_ICLASS_STCE(std::size_t index)
    {
        return (ICLASS[index] >> 16u) & 0b11111u;
    }

    /**
     * Set ICLASS's STCE field.
     */
    inline void set_ICLASS_STCE(std::size_t index, uint8_t value)
    {
        uint32_t curr = ICLASS[index];

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        ICLASS[index] = curr;
    }

    /**
     * Get ICLASS's CMS field.
     */
    VADC_G0_ICLASS_CMS get_ICLASS_CMS(std::size_t index)
    {
        return VADC_G0_ICLASS_CMS((ICLASS[index] >> 8u) & 0b111u);
    }

    /**
     * Set ICLASS's CMS field.
     */
    inline void set_ICLASS_CMS(std::size_t index, VADC_G0_ICLASS_CMS value)
    {
        uint32_t curr = ICLASS[index];

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        ICLASS[index] = curr;
    }

    /**
     * Get ICLASS's STCS field.
     */
    uint8_t get_ICLASS_STCS(std::size_t index)
    {
        return (ICLASS[index] >> 0u) & 0b11111u;
    }

    /**
     * Set ICLASS's STCS field.
     */
    inline void set_ICLASS_STCS(std::size_t index, uint8_t value)
    {
        uint32_t curr = ICLASS[index];

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        ICLASS[index] = curr;
    }

    /**
     * Get ALIAS's ALIAS1 field.
     */
    uint8_t get_ALIAS_ALIAS1()
    {
        return (ALIAS >> 8u) & 0b11111u;
    }

    /**
     * Set ALIAS's ALIAS1 field.
     */
    inline void set_ALIAS_ALIAS1(uint8_t value)
    {
        uint32_t curr = ALIAS;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        ALIAS = curr;
    }

    /**
     * Get ALIAS's ALIAS0 field.
     */
    uint8_t get_ALIAS_ALIAS0()
    {
        return (ALIAS >> 0u) & 0b11111u;
    }

    /**
     * Set ALIAS's ALIAS0 field.
     */
    inline void set_ALIAS_ALIAS0(uint8_t value)
    {
        uint32_t curr = ALIAS;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        ALIAS = curr;
    }

    /**
     * Get BOUND's BOUNDARY1 field.
     */
    uint16_t get_BOUND_BOUNDARY1()
    {
        return (BOUND >> 16u) & 0b111111111111u;
    }

    /**
     * Set BOUND's BOUNDARY1 field.
     */
    inline void set_BOUND_BOUNDARY1(uint16_t value)
    {
        uint32_t curr = BOUND;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        BOUND = curr;
    }

    /**
     * Get BOUND's BOUNDARY0 field.
     */
    uint16_t get_BOUND_BOUNDARY0()
    {
        return (BOUND >> 0u) & 0b111111111111u;
    }

    /**
     * Set BOUND's BOUNDARY0 field.
     */
    inline void set_BOUND_BOUNDARY0(uint16_t value)
    {
        uint32_t curr = BOUND;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        BOUND = curr;
    }

    /**
     * Get SYNCTR's EVALR3 bit.
     */
    VADC_G0_SYNCTR_EVALR3 get_SYNCTR_EVALR3()
    {
        return VADC_G0_SYNCTR_EVALR3(SYNCTR & (1u << 6u));
    }

    /**
     * Set SYNCTR's EVALR3 bit.
     */
    inline void set_SYNCTR_EVALR3()
    {
        SYNCTR |= 1u << 6u;
    }

    /**
     * Clear SYNCTR's EVALR3 bit.
     */
    inline void clear_SYNCTR_EVALR3()
    {
        SYNCTR &= ~(1u << 6u);
    }

    /**
     * Toggle SYNCTR's EVALR3 bit.
     */
    inline void toggle_SYNCTR_EVALR3()
    {
        SYNCTR ^= 1u << 6u;
    }

    /**
     * Get SYNCTR's EVALR2 bit.
     */
    VADC_G0_SYNCTR_EVALR2 get_SYNCTR_EVALR2()
    {
        return VADC_G0_SYNCTR_EVALR2(SYNCTR & (1u << 5u));
    }

    /**
     * Set SYNCTR's EVALR2 bit.
     */
    inline void set_SYNCTR_EVALR2()
    {
        SYNCTR |= 1u << 5u;
    }

    /**
     * Clear SYNCTR's EVALR2 bit.
     */
    inline void clear_SYNCTR_EVALR2()
    {
        SYNCTR &= ~(1u << 5u);
    }

    /**
     * Toggle SYNCTR's EVALR2 bit.
     */
    inline void toggle_SYNCTR_EVALR2()
    {
        SYNCTR ^= 1u << 5u;
    }

    /**
     * Get SYNCTR's EVALR1 bit.
     */
    VADC_G0_SYNCTR_EVALR1 get_SYNCTR_EVALR1()
    {
        return VADC_G0_SYNCTR_EVALR1(SYNCTR & (1u << 4u));
    }

    /**
     * Set SYNCTR's EVALR1 bit.
     */
    inline void set_SYNCTR_EVALR1()
    {
        SYNCTR |= 1u << 4u;
    }

    /**
     * Clear SYNCTR's EVALR1 bit.
     */
    inline void clear_SYNCTR_EVALR1()
    {
        SYNCTR &= ~(1u << 4u);
    }

    /**
     * Toggle SYNCTR's EVALR1 bit.
     */
    inline void toggle_SYNCTR_EVALR1()
    {
        SYNCTR ^= 1u << 4u;
    }

    /**
     * Get SYNCTR's STSEL field.
     */
    VADC_G0_SYNCTR_STSEL get_SYNCTR_STSEL()
    {
        return VADC_G0_SYNCTR_STSEL((SYNCTR >> 0u) & 0b11u);
    }

    /**
     * Set SYNCTR's STSEL field.
     */
    inline void set_SYNCTR_STSEL(VADC_G0_SYNCTR_STSEL value)
    {
        uint32_t curr = SYNCTR;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        SYNCTR = curr;
    }

    /**
     * Get BFL's BFI3 bit.
     */
    VADC_G0_BFL_BFI3 get_BFL_BFI3()
    {
        return VADC_G0_BFL_BFI3(BFL & (1u << 19u));
    }

    /**
     * Set BFL's BFI3 bit.
     */
    inline void set_BFL_BFI3()
    {
        BFL |= 1u << 19u;
    }

    /**
     * Clear BFL's BFI3 bit.
     */
    inline void clear_BFL_BFI3()
    {
        BFL &= ~(1u << 19u);
    }

    /**
     * Toggle BFL's BFI3 bit.
     */
    inline void toggle_BFL_BFI3()
    {
        BFL ^= 1u << 19u;
    }

    /**
     * Get BFL's BFI2 bit.
     */
    VADC_G0_BFL_BFI2 get_BFL_BFI2()
    {
        return VADC_G0_BFL_BFI2(BFL & (1u << 18u));
    }

    /**
     * Set BFL's BFI2 bit.
     */
    inline void set_BFL_BFI2()
    {
        BFL |= 1u << 18u;
    }

    /**
     * Clear BFL's BFI2 bit.
     */
    inline void clear_BFL_BFI2()
    {
        BFL &= ~(1u << 18u);
    }

    /**
     * Toggle BFL's BFI2 bit.
     */
    inline void toggle_BFL_BFI2()
    {
        BFL ^= 1u << 18u;
    }

    /**
     * Get BFL's BFI1 bit.
     */
    VADC_G0_BFL_BFI1 get_BFL_BFI1()
    {
        return VADC_G0_BFL_BFI1(BFL & (1u << 17u));
    }

    /**
     * Set BFL's BFI1 bit.
     */
    inline void set_BFL_BFI1()
    {
        BFL |= 1u << 17u;
    }

    /**
     * Clear BFL's BFI1 bit.
     */
    inline void clear_BFL_BFI1()
    {
        BFL &= ~(1u << 17u);
    }

    /**
     * Toggle BFL's BFI1 bit.
     */
    inline void toggle_BFL_BFI1()
    {
        BFL ^= 1u << 17u;
    }

    /**
     * Get BFL's BFI0 bit.
     */
    VADC_G0_BFL_BFI0 get_BFL_BFI0()
    {
        return VADC_G0_BFL_BFI0(BFL & (1u << 16u));
    }

    /**
     * Set BFL's BFI0 bit.
     */
    inline void set_BFL_BFI0()
    {
        BFL |= 1u << 16u;
    }

    /**
     * Clear BFL's BFI0 bit.
     */
    inline void clear_BFL_BFI0()
    {
        BFL &= ~(1u << 16u);
    }

    /**
     * Toggle BFL's BFI0 bit.
     */
    inline void toggle_BFL_BFI0()
    {
        BFL ^= 1u << 16u;
    }

    /**
     * Get BFL's BFA3 bit.
     */
    VADC_G0_BFL_BFA3 get_BFL_BFA3()
    {
        return VADC_G0_BFL_BFA3(BFL & (1u << 11u));
    }

    /**
     * Set BFL's BFA3 bit.
     */
    inline void set_BFL_BFA3()
    {
        BFL |= 1u << 11u;
    }

    /**
     * Clear BFL's BFA3 bit.
     */
    inline void clear_BFL_BFA3()
    {
        BFL &= ~(1u << 11u);
    }

    /**
     * Toggle BFL's BFA3 bit.
     */
    inline void toggle_BFL_BFA3()
    {
        BFL ^= 1u << 11u;
    }

    /**
     * Get BFL's BFA2 bit.
     */
    VADC_G0_BFL_BFA2 get_BFL_BFA2()
    {
        return VADC_G0_BFL_BFA2(BFL & (1u << 10u));
    }

    /**
     * Set BFL's BFA2 bit.
     */
    inline void set_BFL_BFA2()
    {
        BFL |= 1u << 10u;
    }

    /**
     * Clear BFL's BFA2 bit.
     */
    inline void clear_BFL_BFA2()
    {
        BFL &= ~(1u << 10u);
    }

    /**
     * Toggle BFL's BFA2 bit.
     */
    inline void toggle_BFL_BFA2()
    {
        BFL ^= 1u << 10u;
    }

    /**
     * Get BFL's BFA1 bit.
     */
    VADC_G0_BFL_BFA1 get_BFL_BFA1()
    {
        return VADC_G0_BFL_BFA1(BFL & (1u << 9u));
    }

    /**
     * Set BFL's BFA1 bit.
     */
    inline void set_BFL_BFA1()
    {
        BFL |= 1u << 9u;
    }

    /**
     * Clear BFL's BFA1 bit.
     */
    inline void clear_BFL_BFA1()
    {
        BFL &= ~(1u << 9u);
    }

    /**
     * Toggle BFL's BFA1 bit.
     */
    inline void toggle_BFL_BFA1()
    {
        BFL ^= 1u << 9u;
    }

    /**
     * Get BFL's BFA0 bit.
     */
    VADC_G0_BFL_BFA0 get_BFL_BFA0()
    {
        return VADC_G0_BFL_BFA0(BFL & (1u << 8u));
    }

    /**
     * Set BFL's BFA0 bit.
     */
    inline void set_BFL_BFA0()
    {
        BFL |= 1u << 8u;
    }

    /**
     * Clear BFL's BFA0 bit.
     */
    inline void clear_BFL_BFA0()
    {
        BFL &= ~(1u << 8u);
    }

    /**
     * Toggle BFL's BFA0 bit.
     */
    inline void toggle_BFL_BFA0()
    {
        BFL ^= 1u << 8u;
    }

    /**
     * Get BFL's BFL3 bit.
     */
    VADC_G0_BFL_BFL3 get_BFL_BFL3()
    {
        return VADC_G0_BFL_BFL3(BFL & (1u << 3u));
    }

    /**
     * Get BFL's BFL2 bit.
     */
    VADC_G0_BFL_BFL2 get_BFL_BFL2()
    {
        return VADC_G0_BFL_BFL2(BFL & (1u << 2u));
    }

    /**
     * Get BFL's BFL1 bit.
     */
    VADC_G0_BFL_BFL1 get_BFL_BFL1()
    {
        return VADC_G0_BFL_BFL1(BFL & (1u << 1u));
    }

    /**
     * Get BFL's BFL0 bit.
     */
    VADC_G0_BFL_BFL0 get_BFL_BFL0()
    {
        return VADC_G0_BFL_BFL0(BFL & (1u << 0u));
    }

    /**
     * Set BFLS's BFS3 bit.
     */
    inline void set_BFLS_BFS3()
    {
        BFLS |= 1u << 19u;
    }

    /**
     * Clear BFLS's BFS3 bit.
     */
    inline void clear_BFLS_BFS3()
    {
        BFLS &= ~(1u << 19u);
    }

    /**
     * Toggle BFLS's BFS3 bit.
     */
    inline void toggle_BFLS_BFS3()
    {
        BFLS ^= 1u << 19u;
    }

    /**
     * Set BFLS's BFS2 bit.
     */
    inline void set_BFLS_BFS2()
    {
        BFLS |= 1u << 18u;
    }

    /**
     * Clear BFLS's BFS2 bit.
     */
    inline void clear_BFLS_BFS2()
    {
        BFLS &= ~(1u << 18u);
    }

    /**
     * Toggle BFLS's BFS2 bit.
     */
    inline void toggle_BFLS_BFS2()
    {
        BFLS ^= 1u << 18u;
    }

    /**
     * Set BFLS's BFS1 bit.
     */
    inline void set_BFLS_BFS1()
    {
        BFLS |= 1u << 17u;
    }

    /**
     * Clear BFLS's BFS1 bit.
     */
    inline void clear_BFLS_BFS1()
    {
        BFLS &= ~(1u << 17u);
    }

    /**
     * Toggle BFLS's BFS1 bit.
     */
    inline void toggle_BFLS_BFS1()
    {
        BFLS ^= 1u << 17u;
    }

    /**
     * Set BFLS's BFS0 bit.
     */
    inline void set_BFLS_BFS0()
    {
        BFLS |= 1u << 16u;
    }

    /**
     * Clear BFLS's BFS0 bit.
     */
    inline void clear_BFLS_BFS0()
    {
        BFLS &= ~(1u << 16u);
    }

    /**
     * Toggle BFLS's BFS0 bit.
     */
    inline void toggle_BFLS_BFS0()
    {
        BFLS ^= 1u << 16u;
    }

    /**
     * Set BFLS's BFC3 bit.
     */
    inline void set_BFLS_BFC3()
    {
        BFLS |= 1u << 3u;
    }

    /**
     * Clear BFLS's BFC3 bit.
     */
    inline void clear_BFLS_BFC3()
    {
        BFLS &= ~(1u << 3u);
    }

    /**
     * Toggle BFLS's BFC3 bit.
     */
    inline void toggle_BFLS_BFC3()
    {
        BFLS ^= 1u << 3u;
    }

    /**
     * Set BFLS's BFC2 bit.
     */
    inline void set_BFLS_BFC2()
    {
        BFLS |= 1u << 2u;
    }

    /**
     * Clear BFLS's BFC2 bit.
     */
    inline void clear_BFLS_BFC2()
    {
        BFLS &= ~(1u << 2u);
    }

    /**
     * Toggle BFLS's BFC2 bit.
     */
    inline void toggle_BFLS_BFC2()
    {
        BFLS ^= 1u << 2u;
    }

    /**
     * Set BFLS's BFC1 bit.
     */
    inline void set_BFLS_BFC1()
    {
        BFLS |= 1u << 1u;
    }

    /**
     * Clear BFLS's BFC1 bit.
     */
    inline void clear_BFLS_BFC1()
    {
        BFLS &= ~(1u << 1u);
    }

    /**
     * Toggle BFLS's BFC1 bit.
     */
    inline void toggle_BFLS_BFC1()
    {
        BFLS ^= 1u << 1u;
    }

    /**
     * Set BFLS's BFC0 bit.
     */
    inline void set_BFLS_BFC0()
    {
        BFLS |= 1u << 0u;
    }

    /**
     * Clear BFLS's BFC0 bit.
     */
    inline void clear_BFLS_BFC0()
    {
        BFLS &= ~(1u << 0u);
    }

    /**
     * Toggle BFLS's BFC0 bit.
     */
    inline void toggle_BFLS_BFC0()
    {
        BFLS ^= 1u << 0u;
    }

    /**
     * Get BFLC's BFM3 field.
     */
    VADC_G0_BFLC_BFM3 get_BFLC_BFM3()
    {
        return VADC_G0_BFLC_BFM3((BFLC >> 12u) & 0b1111u);
    }

    /**
     * Set BFLC's BFM3 field.
     */
    inline void set_BFLC_BFM3(VADC_G0_BFLC_BFM3 value)
    {
        uint32_t curr = BFLC;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        BFLC = curr;
    }

    /**
     * Get BFLC's BFM2 field.
     */
    VADC_G0_BFLC_BFM2 get_BFLC_BFM2()
    {
        return VADC_G0_BFLC_BFM2((BFLC >> 8u) & 0b1111u);
    }

    /**
     * Set BFLC's BFM2 field.
     */
    inline void set_BFLC_BFM2(VADC_G0_BFLC_BFM2 value)
    {
        uint32_t curr = BFLC;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        BFLC = curr;
    }

    /**
     * Get BFLC's BFM1 field.
     */
    VADC_G0_BFLC_BFM1 get_BFLC_BFM1()
    {
        return VADC_G0_BFLC_BFM1((BFLC >> 4u) & 0b1111u);
    }

    /**
     * Set BFLC's BFM1 field.
     */
    inline void set_BFLC_BFM1(VADC_G0_BFLC_BFM1 value)
    {
        uint32_t curr = BFLC;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        BFLC = curr;
    }

    /**
     * Get BFLC's BFM0 field.
     */
    VADC_G0_BFLC_BFM0 get_BFLC_BFM0()
    {
        return VADC_G0_BFLC_BFM0((BFLC >> 0u) & 0b1111u);
    }

    /**
     * Set BFLC's BFM0 field.
     */
    inline void set_BFLC_BFM0(VADC_G0_BFLC_BFM0 value)
    {
        uint32_t curr = BFLC;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BFLC = curr;
    }

    /**
     * Get BFLNP's BFL3NP field.
     */
    VADC_G0_BFLNP_BFL3NP get_BFLNP_BFL3NP()
    {
        return VADC_G0_BFLNP_BFL3NP((BFLNP >> 12u) & 0b1111u);
    }

    /**
     * Set BFLNP's BFL3NP field.
     */
    inline void set_BFLNP_BFL3NP(VADC_G0_BFLNP_BFL3NP value)
    {
        uint32_t curr = BFLNP;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        BFLNP = curr;
    }

    /**
     * Get BFLNP's BFL2NP field.
     */
    VADC_G0_BFLNP_BFL2NP get_BFLNP_BFL2NP()
    {
        return VADC_G0_BFLNP_BFL2NP((BFLNP >> 8u) & 0b1111u);
    }

    /**
     * Set BFLNP's BFL2NP field.
     */
    inline void set_BFLNP_BFL2NP(VADC_G0_BFLNP_BFL2NP value)
    {
        uint32_t curr = BFLNP;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        BFLNP = curr;
    }

    /**
     * Get BFLNP's BFL1NP field.
     */
    VADC_G0_BFLNP_BFL1NP get_BFLNP_BFL1NP()
    {
        return VADC_G0_BFLNP_BFL1NP((BFLNP >> 4u) & 0b1111u);
    }

    /**
     * Set BFLNP's BFL1NP field.
     */
    inline void set_BFLNP_BFL1NP(VADC_G0_BFLNP_BFL1NP value)
    {
        uint32_t curr = BFLNP;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        BFLNP = curr;
    }

    /**
     * Get BFLNP's BFL0NP field.
     */
    VADC_G0_BFLNP_BFL0NP get_BFLNP_BFL0NP()
    {
        return VADC_G0_BFLNP_BFL0NP((BFLNP >> 0u) & 0b1111u);
    }

    /**
     * Set BFLNP's BFL0NP field.
     */
    inline void set_BFLNP_BFL0NP(VADC_G0_BFLNP_BFL0NP value)
    {
        uint32_t curr = BFLNP;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BFLNP = curr;
    }

    /**
     * Set QCTRL0's TMWC bit.
     */
    inline void set_QCTRL0_TMWC()
    {
        QCTRL0 |= 1u << 31u;
    }

    /**
     * Clear QCTRL0's TMWC bit.
     */
    inline void clear_QCTRL0_TMWC()
    {
        QCTRL0 &= ~(1u << 31u);
    }

    /**
     * Toggle QCTRL0's TMWC bit.
     */
    inline void toggle_QCTRL0_TMWC()
    {
        QCTRL0 ^= 1u << 31u;
    }

    /**
     * Get QCTRL0's TMEN bit.
     */
    VADC_G0_QCTRL0_TMEN get_QCTRL0_TMEN()
    {
        return VADC_G0_QCTRL0_TMEN(QCTRL0 & (1u << 28u));
    }

    /**
     * Set QCTRL0's TMEN bit.
     */
    inline void set_QCTRL0_TMEN()
    {
        QCTRL0 |= 1u << 28u;
    }

    /**
     * Clear QCTRL0's TMEN bit.
     */
    inline void clear_QCTRL0_TMEN()
    {
        QCTRL0 &= ~(1u << 28u);
    }

    /**
     * Toggle QCTRL0's TMEN bit.
     */
    inline void toggle_QCTRL0_TMEN()
    {
        QCTRL0 ^= 1u << 28u;
    }

    /**
     * Set QCTRL0's GTWC bit.
     */
    inline void set_QCTRL0_GTWC()
    {
        QCTRL0 |= 1u << 23u;
    }

    /**
     * Clear QCTRL0's GTWC bit.
     */
    inline void clear_QCTRL0_GTWC()
    {
        QCTRL0 &= ~(1u << 23u);
    }

    /**
     * Toggle QCTRL0's GTWC bit.
     */
    inline void toggle_QCTRL0_GTWC()
    {
        QCTRL0 ^= 1u << 23u;
    }

    /**
     * Get QCTRL0's GTLVL bit.
     */
    bool get_QCTRL0_GTLVL()
    {
        return QCTRL0 & (1u << 20u);
    }

    /**
     * Get QCTRL0's GTSEL field.
     */
    uint8_t get_QCTRL0_GTSEL()
    {
        return (QCTRL0 >> 16u) & 0b1111u;
    }

    /**
     * Set QCTRL0's GTSEL field.
     */
    inline void set_QCTRL0_GTSEL(uint8_t value)
    {
        uint32_t curr = QCTRL0;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        QCTRL0 = curr;
    }

    /**
     * Set QCTRL0's XTWC bit.
     */
    inline void set_QCTRL0_XTWC()
    {
        QCTRL0 |= 1u << 15u;
    }

    /**
     * Clear QCTRL0's XTWC bit.
     */
    inline void clear_QCTRL0_XTWC()
    {
        QCTRL0 &= ~(1u << 15u);
    }

    /**
     * Toggle QCTRL0's XTWC bit.
     */
    inline void toggle_QCTRL0_XTWC()
    {
        QCTRL0 ^= 1u << 15u;
    }

    /**
     * Get QCTRL0's XTMODE field.
     */
    VADC_G0_QCTRL0_XTMODE get_QCTRL0_XTMODE()
    {
        return VADC_G0_QCTRL0_XTMODE((QCTRL0 >> 13u) & 0b11u);
    }

    /**
     * Set QCTRL0's XTMODE field.
     */
    inline void set_QCTRL0_XTMODE(VADC_G0_QCTRL0_XTMODE value)
    {
        uint32_t curr = QCTRL0;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        QCTRL0 = curr;
    }

    /**
     * Get QCTRL0's XTLVL bit.
     */
    bool get_QCTRL0_XTLVL()
    {
        return QCTRL0 & (1u << 12u);
    }

    /**
     * Get QCTRL0's XTSEL field.
     */
    uint8_t get_QCTRL0_XTSEL()
    {
        return (QCTRL0 >> 8u) & 0b1111u;
    }

    /**
     * Set QCTRL0's XTSEL field.
     */
    inline void set_QCTRL0_XTSEL(uint8_t value)
    {
        uint32_t curr = QCTRL0;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        QCTRL0 = curr;
    }

    /**
     * Get QCTRL0's SRCRESREG field.
     */
    VADC_G0_QCTRL0_SRCRESREG get_QCTRL0_SRCRESREG()
    {
        return VADC_G0_QCTRL0_SRCRESREG((QCTRL0 >> 0u) & 0b1111u);
    }

    /**
     * Set QCTRL0's SRCRESREG field.
     */
    inline void set_QCTRL0_SRCRESREG(VADC_G0_QCTRL0_SRCRESREG value)
    {
        uint32_t curr = QCTRL0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        QCTRL0 = curr;
    }

    /**
     * Get QMR0's RPTDIS bit.
     */
    VADC_G0_QMR0_RPTDIS get_QMR0_RPTDIS()
    {
        return VADC_G0_QMR0_RPTDIS(QMR0 & (1u << 16u));
    }

    /**
     * Set QMR0's RPTDIS bit.
     */
    inline void set_QMR0_RPTDIS()
    {
        QMR0 |= 1u << 16u;
    }

    /**
     * Clear QMR0's RPTDIS bit.
     */
    inline void clear_QMR0_RPTDIS()
    {
        QMR0 &= ~(1u << 16u);
    }

    /**
     * Toggle QMR0's RPTDIS bit.
     */
    inline void toggle_QMR0_RPTDIS()
    {
        QMR0 ^= 1u << 16u;
    }

    /**
     * Set QMR0's CEV bit.
     */
    inline void set_QMR0_CEV()
    {
        QMR0 |= 1u << 11u;
    }

    /**
     * Clear QMR0's CEV bit.
     */
    inline void clear_QMR0_CEV()
    {
        QMR0 &= ~(1u << 11u);
    }

    /**
     * Toggle QMR0's CEV bit.
     */
    inline void toggle_QMR0_CEV()
    {
        QMR0 ^= 1u << 11u;
    }

    /**
     * Set QMR0's FLUSH bit.
     */
    inline void set_QMR0_FLUSH()
    {
        QMR0 |= 1u << 10u;
    }

    /**
     * Clear QMR0's FLUSH bit.
     */
    inline void clear_QMR0_FLUSH()
    {
        QMR0 &= ~(1u << 10u);
    }

    /**
     * Toggle QMR0's FLUSH bit.
     */
    inline void toggle_QMR0_FLUSH()
    {
        QMR0 ^= 1u << 10u;
    }

    /**
     * Set QMR0's TREV bit.
     */
    inline void set_QMR0_TREV()
    {
        QMR0 |= 1u << 9u;
    }

    /**
     * Clear QMR0's TREV bit.
     */
    inline void clear_QMR0_TREV()
    {
        QMR0 &= ~(1u << 9u);
    }

    /**
     * Toggle QMR0's TREV bit.
     */
    inline void toggle_QMR0_TREV()
    {
        QMR0 ^= 1u << 9u;
    }

    /**
     * Set QMR0's CLRV bit.
     */
    inline void set_QMR0_CLRV()
    {
        QMR0 |= 1u << 8u;
    }

    /**
     * Clear QMR0's CLRV bit.
     */
    inline void clear_QMR0_CLRV()
    {
        QMR0 &= ~(1u << 8u);
    }

    /**
     * Toggle QMR0's CLRV bit.
     */
    inline void toggle_QMR0_CLRV()
    {
        QMR0 ^= 1u << 8u;
    }

    /**
     * Get QMR0's ENTR bit.
     */
    VADC_G0_QMR0_ENTR get_QMR0_ENTR()
    {
        return VADC_G0_QMR0_ENTR(QMR0 & (1u << 2u));
    }

    /**
     * Set QMR0's ENTR bit.
     */
    inline void set_QMR0_ENTR()
    {
        QMR0 |= 1u << 2u;
    }

    /**
     * Clear QMR0's ENTR bit.
     */
    inline void clear_QMR0_ENTR()
    {
        QMR0 &= ~(1u << 2u);
    }

    /**
     * Toggle QMR0's ENTR bit.
     */
    inline void toggle_QMR0_ENTR()
    {
        QMR0 ^= 1u << 2u;
    }

    /**
     * Get QMR0's ENGT field.
     */
    VADC_G0_QMR0_ENGT get_QMR0_ENGT()
    {
        return VADC_G0_QMR0_ENGT((QMR0 >> 0u) & 0b11u);
    }

    /**
     * Set QMR0's ENGT field.
     */
    inline void set_QMR0_ENGT(VADC_G0_QMR0_ENGT value)
    {
        uint32_t curr = QMR0;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        QMR0 = curr;
    }

    /**
     * Get QSR0's EV bit.
     */
    VADC_G0_QSR0_EV get_QSR0_EV()
    {
        return VADC_G0_QSR0_EV(QSR0 & (1u << 8u));
    }

    /**
     * Get QSR0's REQGT bit.
     */
    VADC_G0_QSR0_REQGT get_QSR0_REQGT()
    {
        return VADC_G0_QSR0_REQGT(QSR0 & (1u << 7u));
    }

    /**
     * Get QSR0's EMPTY bit.
     */
    VADC_G0_QSR0_EMPTY get_QSR0_EMPTY()
    {
        return VADC_G0_QSR0_EMPTY(QSR0 & (1u << 5u));
    }

    /**
     * Get QSR0's FILL field.
     */
    VADC_G0_QSR0_FILL get_QSR0_FILL()
    {
        return VADC_G0_QSR0_FILL((QSR0 >> 0u) & 0b1111u);
    }

    /**
     * Get Q0R0's V bit.
     */
    VADC_G0_Q0R0_V get_Q0R0_V()
    {
        return VADC_G0_Q0R0_V(Q0R0 & (1u << 8u));
    }

    /**
     * Get Q0R0's EXTR bit.
     */
    VADC_G0_Q0R0_EXTR get_Q0R0_EXTR()
    {
        return VADC_G0_Q0R0_EXTR(Q0R0 & (1u << 7u));
    }

    /**
     * Get Q0R0's ENSI bit.
     */
    VADC_G0_Q0R0_ENSI get_Q0R0_ENSI()
    {
        return VADC_G0_Q0R0_ENSI(Q0R0 & (1u << 6u));
    }

    /**
     * Get Q0R0's RF bit.
     */
    VADC_G0_Q0R0_RF get_Q0R0_RF()
    {
        return VADC_G0_Q0R0_RF(Q0R0 & (1u << 5u));
    }

    /**
     * Get Q0R0's REQCHNR field.
     */
    uint8_t get_Q0R0_REQCHNR()
    {
        return (Q0R0 >> 0u) & 0b11111u;
    }

    /**
     * Set QINR0's EXTR bit.
     */
    inline void set_QINR0_EXTR()
    {
        QINR0 |= 1u << 7u;
    }

    /**
     * Clear QINR0's EXTR bit.
     */
    inline void clear_QINR0_EXTR()
    {
        QINR0 &= ~(1u << 7u);
    }

    /**
     * Toggle QINR0's EXTR bit.
     */
    inline void toggle_QINR0_EXTR()
    {
        QINR0 ^= 1u << 7u;
    }

    /**
     * Set QINR0's ENSI bit.
     */
    inline void set_QINR0_ENSI()
    {
        QINR0 |= 1u << 6u;
    }

    /**
     * Clear QINR0's ENSI bit.
     */
    inline void clear_QINR0_ENSI()
    {
        QINR0 &= ~(1u << 6u);
    }

    /**
     * Toggle QINR0's ENSI bit.
     */
    inline void toggle_QINR0_ENSI()
    {
        QINR0 ^= 1u << 6u;
    }

    /**
     * Set QINR0's RF bit.
     */
    inline void set_QINR0_RF()
    {
        QINR0 |= 1u << 5u;
    }

    /**
     * Clear QINR0's RF bit.
     */
    inline void clear_QINR0_RF()
    {
        QINR0 &= ~(1u << 5u);
    }

    /**
     * Toggle QINR0's RF bit.
     */
    inline void toggle_QINR0_RF()
    {
        QINR0 ^= 1u << 5u;
    }

    /**
     * Set QINR0's REQCHNR field.
     */
    inline void set_QINR0_REQCHNR(uint8_t value)
    {
        uint32_t curr = QINR0;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        QINR0 = curr;
    }

    /**
     * Get QINR0's V bit.
     */
    VADC_G0_QBUR0_V get_QBUR0_V()
    {
        return VADC_G0_QBUR0_V(QBUR0 & (1u << 8u));
    }

    /**
     * Get QINR0's EXTR bit.
     */
    bool get_QBUR0_EXTR()
    {
        return QBUR0 & (1u << 7u);
    }

    /**
     * Get QINR0's ENSI bit.
     */
    bool get_QBUR0_ENSI()
    {
        return QBUR0 & (1u << 6u);
    }

    /**
     * Get QINR0's RF bit.
     */
    bool get_QBUR0_RF()
    {
        return QBUR0 & (1u << 5u);
    }

    /**
     * Get QINR0's REQCHNR field.
     */
    uint8_t get_QBUR0_REQCHNR()
    {
        return (QBUR0 >> 0u) & 0b11111u;
    }

    /**
     * Set ASCTRL's TMWC bit.
     */
    inline void set_ASCTRL_TMWC()
    {
        ASCTRL |= 1u << 31u;
    }

    /**
     * Clear ASCTRL's TMWC bit.
     */
    inline void clear_ASCTRL_TMWC()
    {
        ASCTRL &= ~(1u << 31u);
    }

    /**
     * Toggle ASCTRL's TMWC bit.
     */
    inline void toggle_ASCTRL_TMWC()
    {
        ASCTRL ^= 1u << 31u;
    }

    /**
     * Get ASCTRL's TMEN bit.
     */
    VADC_G0_ASCTRL_TMEN get_ASCTRL_TMEN()
    {
        return VADC_G0_ASCTRL_TMEN(ASCTRL & (1u << 28u));
    }

    /**
     * Set ASCTRL's TMEN bit.
     */
    inline void set_ASCTRL_TMEN()
    {
        ASCTRL |= 1u << 28u;
    }

    /**
     * Clear ASCTRL's TMEN bit.
     */
    inline void clear_ASCTRL_TMEN()
    {
        ASCTRL &= ~(1u << 28u);
    }

    /**
     * Toggle ASCTRL's TMEN bit.
     */
    inline void toggle_ASCTRL_TMEN()
    {
        ASCTRL ^= 1u << 28u;
    }

    /**
     * Set ASCTRL's GTWC bit.
     */
    inline void set_ASCTRL_GTWC()
    {
        ASCTRL |= 1u << 23u;
    }

    /**
     * Clear ASCTRL's GTWC bit.
     */
    inline void clear_ASCTRL_GTWC()
    {
        ASCTRL &= ~(1u << 23u);
    }

    /**
     * Toggle ASCTRL's GTWC bit.
     */
    inline void toggle_ASCTRL_GTWC()
    {
        ASCTRL ^= 1u << 23u;
    }

    /**
     * Get ASCTRL's GTLVL bit.
     */
    bool get_ASCTRL_GTLVL()
    {
        return ASCTRL & (1u << 20u);
    }

    /**
     * Get ASCTRL's GTSEL field.
     */
    uint8_t get_ASCTRL_GTSEL()
    {
        return (ASCTRL >> 16u) & 0b1111u;
    }

    /**
     * Set ASCTRL's GTSEL field.
     */
    inline void set_ASCTRL_GTSEL(uint8_t value)
    {
        uint32_t curr = ASCTRL;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ASCTRL = curr;
    }

    /**
     * Set ASCTRL's XTWC bit.
     */
    inline void set_ASCTRL_XTWC()
    {
        ASCTRL |= 1u << 15u;
    }

    /**
     * Clear ASCTRL's XTWC bit.
     */
    inline void clear_ASCTRL_XTWC()
    {
        ASCTRL &= ~(1u << 15u);
    }

    /**
     * Toggle ASCTRL's XTWC bit.
     */
    inline void toggle_ASCTRL_XTWC()
    {
        ASCTRL ^= 1u << 15u;
    }

    /**
     * Get ASCTRL's XTMODE field.
     */
    VADC_G0_ASCTRL_XTMODE get_ASCTRL_XTMODE()
    {
        return VADC_G0_ASCTRL_XTMODE((ASCTRL >> 13u) & 0b11u);
    }

    /**
     * Set ASCTRL's XTMODE field.
     */
    inline void set_ASCTRL_XTMODE(VADC_G0_ASCTRL_XTMODE value)
    {
        uint32_t curr = ASCTRL;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        ASCTRL = curr;
    }

    /**
     * Get ASCTRL's XTLVL bit.
     */
    bool get_ASCTRL_XTLVL()
    {
        return ASCTRL & (1u << 12u);
    }

    /**
     * Get ASCTRL's XTSEL field.
     */
    uint8_t get_ASCTRL_XTSEL()
    {
        return (ASCTRL >> 8u) & 0b1111u;
    }

    /**
     * Set ASCTRL's XTSEL field.
     */
    inline void set_ASCTRL_XTSEL(uint8_t value)
    {
        uint32_t curr = ASCTRL;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        ASCTRL = curr;
    }

    /**
     * Get ASCTRL's SRCRESREG field.
     */
    VADC_G0_ASCTRL_SRCRESREG get_ASCTRL_SRCRESREG()
    {
        return VADC_G0_ASCTRL_SRCRESREG((ASCTRL >> 0u) & 0b1111u);
    }

    /**
     * Set ASCTRL's SRCRESREG field.
     */
    inline void set_ASCTRL_SRCRESREG(VADC_G0_ASCTRL_SRCRESREG value)
    {
        uint32_t curr = ASCTRL;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        ASCTRL = curr;
    }

    /**
     * Get ASMR's RPTDIS bit.
     */
    VADC_G0_ASMR_RPTDIS get_ASMR_RPTDIS()
    {
        return VADC_G0_ASMR_RPTDIS(ASMR & (1u << 16u));
    }

    /**
     * Set ASMR's RPTDIS bit.
     */
    inline void set_ASMR_RPTDIS()
    {
        ASMR |= 1u << 16u;
    }

    /**
     * Clear ASMR's RPTDIS bit.
     */
    inline void clear_ASMR_RPTDIS()
    {
        ASMR &= ~(1u << 16u);
    }

    /**
     * Toggle ASMR's RPTDIS bit.
     */
    inline void toggle_ASMR_RPTDIS()
    {
        ASMR ^= 1u << 16u;
    }

    /**
     * Set ASMR's LDEV bit.
     */
    inline void set_ASMR_LDEV()
    {
        ASMR |= 1u << 9u;
    }

    /**
     * Clear ASMR's LDEV bit.
     */
    inline void clear_ASMR_LDEV()
    {
        ASMR &= ~(1u << 9u);
    }

    /**
     * Toggle ASMR's LDEV bit.
     */
    inline void toggle_ASMR_LDEV()
    {
        ASMR ^= 1u << 9u;
    }

    /**
     * Set ASMR's CLRPND bit.
     */
    inline void set_ASMR_CLRPND()
    {
        ASMR |= 1u << 8u;
    }

    /**
     * Clear ASMR's CLRPND bit.
     */
    inline void clear_ASMR_CLRPND()
    {
        ASMR &= ~(1u << 8u);
    }

    /**
     * Toggle ASMR's CLRPND bit.
     */
    inline void toggle_ASMR_CLRPND()
    {
        ASMR ^= 1u << 8u;
    }

    /**
     * Get ASMR's REQGT bit.
     */
    VADC_G0_ASMR_REQGT get_ASMR_REQGT()
    {
        return VADC_G0_ASMR_REQGT(ASMR & (1u << 7u));
    }

    /**
     * Get ASMR's LDM bit.
     */
    VADC_G0_ASMR_LDM get_ASMR_LDM()
    {
        return VADC_G0_ASMR_LDM(ASMR & (1u << 5u));
    }

    /**
     * Set ASMR's LDM bit.
     */
    inline void set_ASMR_LDM()
    {
        ASMR |= 1u << 5u;
    }

    /**
     * Clear ASMR's LDM bit.
     */
    inline void clear_ASMR_LDM()
    {
        ASMR &= ~(1u << 5u);
    }

    /**
     * Toggle ASMR's LDM bit.
     */
    inline void toggle_ASMR_LDM()
    {
        ASMR ^= 1u << 5u;
    }

    /**
     * Get ASMR's SCAN bit.
     */
    VADC_G0_ASMR_SCAN get_ASMR_SCAN()
    {
        return VADC_G0_ASMR_SCAN(ASMR & (1u << 4u));
    }

    /**
     * Set ASMR's SCAN bit.
     */
    inline void set_ASMR_SCAN()
    {
        ASMR |= 1u << 4u;
    }

    /**
     * Clear ASMR's SCAN bit.
     */
    inline void clear_ASMR_SCAN()
    {
        ASMR &= ~(1u << 4u);
    }

    /**
     * Toggle ASMR's SCAN bit.
     */
    inline void toggle_ASMR_SCAN()
    {
        ASMR ^= 1u << 4u;
    }

    /**
     * Get ASMR's ENSI bit.
     */
    VADC_G0_ASMR_ENSI get_ASMR_ENSI()
    {
        return VADC_G0_ASMR_ENSI(ASMR & (1u << 3u));
    }

    /**
     * Set ASMR's ENSI bit.
     */
    inline void set_ASMR_ENSI()
    {
        ASMR |= 1u << 3u;
    }

    /**
     * Clear ASMR's ENSI bit.
     */
    inline void clear_ASMR_ENSI()
    {
        ASMR &= ~(1u << 3u);
    }

    /**
     * Toggle ASMR's ENSI bit.
     */
    inline void toggle_ASMR_ENSI()
    {
        ASMR ^= 1u << 3u;
    }

    /**
     * Get ASMR's ENTR bit.
     */
    VADC_G0_ASMR_ENTR get_ASMR_ENTR()
    {
        return VADC_G0_ASMR_ENTR(ASMR & (1u << 2u));
    }

    /**
     * Set ASMR's ENTR bit.
     */
    inline void set_ASMR_ENTR()
    {
        ASMR |= 1u << 2u;
    }

    /**
     * Clear ASMR's ENTR bit.
     */
    inline void clear_ASMR_ENTR()
    {
        ASMR &= ~(1u << 2u);
    }

    /**
     * Toggle ASMR's ENTR bit.
     */
    inline void toggle_ASMR_ENTR()
    {
        ASMR ^= 1u << 2u;
    }

    /**
     * Get ASMR's ENGT field.
     */
    VADC_G0_ASMR_ENGT get_ASMR_ENGT()
    {
        return VADC_G0_ASMR_ENGT((ASMR >> 0u) & 0b11u);
    }

    /**
     * Set ASMR's ENGT field.
     */
    inline void set_ASMR_ENGT(VADC_G0_ASMR_ENGT value)
    {
        uint32_t curr = ASMR;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        ASMR = curr;
    }

    /**
     * Get ASSEL's CHSEL7 bit.
     */
    VADC_G0_ASSEL_CHSEL7 get_ASSEL_CHSEL7()
    {
        return VADC_G0_ASSEL_CHSEL7(ASSEL & (1u << 7u));
    }

    /**
     * Set ASSEL's CHSEL7 bit.
     */
    inline void set_ASSEL_CHSEL7()
    {
        ASSEL |= 1u << 7u;
    }

    /**
     * Clear ASSEL's CHSEL7 bit.
     */
    inline void clear_ASSEL_CHSEL7()
    {
        ASSEL &= ~(1u << 7u);
    }

    /**
     * Toggle ASSEL's CHSEL7 bit.
     */
    inline void toggle_ASSEL_CHSEL7()
    {
        ASSEL ^= 1u << 7u;
    }

    /**
     * Get ASSEL's CHSEL6 bit.
     */
    VADC_G0_ASSEL_CHSEL6 get_ASSEL_CHSEL6()
    {
        return VADC_G0_ASSEL_CHSEL6(ASSEL & (1u << 6u));
    }

    /**
     * Set ASSEL's CHSEL6 bit.
     */
    inline void set_ASSEL_CHSEL6()
    {
        ASSEL |= 1u << 6u;
    }

    /**
     * Clear ASSEL's CHSEL6 bit.
     */
    inline void clear_ASSEL_CHSEL6()
    {
        ASSEL &= ~(1u << 6u);
    }

    /**
     * Toggle ASSEL's CHSEL6 bit.
     */
    inline void toggle_ASSEL_CHSEL6()
    {
        ASSEL ^= 1u << 6u;
    }

    /**
     * Get ASSEL's CHSEL5 bit.
     */
    VADC_G0_ASSEL_CHSEL5 get_ASSEL_CHSEL5()
    {
        return VADC_G0_ASSEL_CHSEL5(ASSEL & (1u << 5u));
    }

    /**
     * Set ASSEL's CHSEL5 bit.
     */
    inline void set_ASSEL_CHSEL5()
    {
        ASSEL |= 1u << 5u;
    }

    /**
     * Clear ASSEL's CHSEL5 bit.
     */
    inline void clear_ASSEL_CHSEL5()
    {
        ASSEL &= ~(1u << 5u);
    }

    /**
     * Toggle ASSEL's CHSEL5 bit.
     */
    inline void toggle_ASSEL_CHSEL5()
    {
        ASSEL ^= 1u << 5u;
    }

    /**
     * Get ASSEL's CHSEL4 bit.
     */
    VADC_G0_ASSEL_CHSEL4 get_ASSEL_CHSEL4()
    {
        return VADC_G0_ASSEL_CHSEL4(ASSEL & (1u << 4u));
    }

    /**
     * Set ASSEL's CHSEL4 bit.
     */
    inline void set_ASSEL_CHSEL4()
    {
        ASSEL |= 1u << 4u;
    }

    /**
     * Clear ASSEL's CHSEL4 bit.
     */
    inline void clear_ASSEL_CHSEL4()
    {
        ASSEL &= ~(1u << 4u);
    }

    /**
     * Toggle ASSEL's CHSEL4 bit.
     */
    inline void toggle_ASSEL_CHSEL4()
    {
        ASSEL ^= 1u << 4u;
    }

    /**
     * Get ASSEL's CHSEL3 bit.
     */
    VADC_G0_ASSEL_CHSEL3 get_ASSEL_CHSEL3()
    {
        return VADC_G0_ASSEL_CHSEL3(ASSEL & (1u << 3u));
    }

    /**
     * Set ASSEL's CHSEL3 bit.
     */
    inline void set_ASSEL_CHSEL3()
    {
        ASSEL |= 1u << 3u;
    }

    /**
     * Clear ASSEL's CHSEL3 bit.
     */
    inline void clear_ASSEL_CHSEL3()
    {
        ASSEL &= ~(1u << 3u);
    }

    /**
     * Toggle ASSEL's CHSEL3 bit.
     */
    inline void toggle_ASSEL_CHSEL3()
    {
        ASSEL ^= 1u << 3u;
    }

    /**
     * Get ASSEL's CHSEL2 bit.
     */
    VADC_G0_ASSEL_CHSEL2 get_ASSEL_CHSEL2()
    {
        return VADC_G0_ASSEL_CHSEL2(ASSEL & (1u << 2u));
    }

    /**
     * Set ASSEL's CHSEL2 bit.
     */
    inline void set_ASSEL_CHSEL2()
    {
        ASSEL |= 1u << 2u;
    }

    /**
     * Clear ASSEL's CHSEL2 bit.
     */
    inline void clear_ASSEL_CHSEL2()
    {
        ASSEL &= ~(1u << 2u);
    }

    /**
     * Toggle ASSEL's CHSEL2 bit.
     */
    inline void toggle_ASSEL_CHSEL2()
    {
        ASSEL ^= 1u << 2u;
    }

    /**
     * Get ASSEL's CHSEL1 bit.
     */
    VADC_G0_ASSEL_CHSEL1 get_ASSEL_CHSEL1()
    {
        return VADC_G0_ASSEL_CHSEL1(ASSEL & (1u << 1u));
    }

    /**
     * Set ASSEL's CHSEL1 bit.
     */
    inline void set_ASSEL_CHSEL1()
    {
        ASSEL |= 1u << 1u;
    }

    /**
     * Clear ASSEL's CHSEL1 bit.
     */
    inline void clear_ASSEL_CHSEL1()
    {
        ASSEL &= ~(1u << 1u);
    }

    /**
     * Toggle ASSEL's CHSEL1 bit.
     */
    inline void toggle_ASSEL_CHSEL1()
    {
        ASSEL ^= 1u << 1u;
    }

    /**
     * Get ASSEL's CHSEL0 bit.
     */
    VADC_G0_ASSEL_CHSEL0 get_ASSEL_CHSEL0()
    {
        return VADC_G0_ASSEL_CHSEL0(ASSEL & (1u << 0u));
    }

    /**
     * Set ASSEL's CHSEL0 bit.
     */
    inline void set_ASSEL_CHSEL0()
    {
        ASSEL |= 1u << 0u;
    }

    /**
     * Clear ASSEL's CHSEL0 bit.
     */
    inline void clear_ASSEL_CHSEL0()
    {
        ASSEL &= ~(1u << 0u);
    }

    /**
     * Toggle ASSEL's CHSEL0 bit.
     */
    inline void toggle_ASSEL_CHSEL0()
    {
        ASSEL ^= 1u << 0u;
    }

    /**
     * Get ASPND's CHPND7 bit.
     */
    VADC_G0_ASPND_CHPND7 get_ASPND_CHPND7()
    {
        return VADC_G0_ASPND_CHPND7(ASPND & (1u << 7u));
    }

    /**
     * Set ASPND's CHPND7 bit.
     */
    inline void set_ASPND_CHPND7()
    {
        ASPND |= 1u << 7u;
    }

    /**
     * Clear ASPND's CHPND7 bit.
     */
    inline void clear_ASPND_CHPND7()
    {
        ASPND &= ~(1u << 7u);
    }

    /**
     * Toggle ASPND's CHPND7 bit.
     */
    inline void toggle_ASPND_CHPND7()
    {
        ASPND ^= 1u << 7u;
    }

    /**
     * Get ASPND's CHPND6 bit.
     */
    VADC_G0_ASPND_CHPND6 get_ASPND_CHPND6()
    {
        return VADC_G0_ASPND_CHPND6(ASPND & (1u << 6u));
    }

    /**
     * Set ASPND's CHPND6 bit.
     */
    inline void set_ASPND_CHPND6()
    {
        ASPND |= 1u << 6u;
    }

    /**
     * Clear ASPND's CHPND6 bit.
     */
    inline void clear_ASPND_CHPND6()
    {
        ASPND &= ~(1u << 6u);
    }

    /**
     * Toggle ASPND's CHPND6 bit.
     */
    inline void toggle_ASPND_CHPND6()
    {
        ASPND ^= 1u << 6u;
    }

    /**
     * Get ASPND's CHPND5 bit.
     */
    VADC_G0_ASPND_CHPND5 get_ASPND_CHPND5()
    {
        return VADC_G0_ASPND_CHPND5(ASPND & (1u << 5u));
    }

    /**
     * Set ASPND's CHPND5 bit.
     */
    inline void set_ASPND_CHPND5()
    {
        ASPND |= 1u << 5u;
    }

    /**
     * Clear ASPND's CHPND5 bit.
     */
    inline void clear_ASPND_CHPND5()
    {
        ASPND &= ~(1u << 5u);
    }

    /**
     * Toggle ASPND's CHPND5 bit.
     */
    inline void toggle_ASPND_CHPND5()
    {
        ASPND ^= 1u << 5u;
    }

    /**
     * Get ASPND's CHPND4 bit.
     */
    VADC_G0_ASPND_CHPND4 get_ASPND_CHPND4()
    {
        return VADC_G0_ASPND_CHPND4(ASPND & (1u << 4u));
    }

    /**
     * Set ASPND's CHPND4 bit.
     */
    inline void set_ASPND_CHPND4()
    {
        ASPND |= 1u << 4u;
    }

    /**
     * Clear ASPND's CHPND4 bit.
     */
    inline void clear_ASPND_CHPND4()
    {
        ASPND &= ~(1u << 4u);
    }

    /**
     * Toggle ASPND's CHPND4 bit.
     */
    inline void toggle_ASPND_CHPND4()
    {
        ASPND ^= 1u << 4u;
    }

    /**
     * Get ASPND's CHPND3 bit.
     */
    VADC_G0_ASPND_CHPND3 get_ASPND_CHPND3()
    {
        return VADC_G0_ASPND_CHPND3(ASPND & (1u << 3u));
    }

    /**
     * Set ASPND's CHPND3 bit.
     */
    inline void set_ASPND_CHPND3()
    {
        ASPND |= 1u << 3u;
    }

    /**
     * Clear ASPND's CHPND3 bit.
     */
    inline void clear_ASPND_CHPND3()
    {
        ASPND &= ~(1u << 3u);
    }

    /**
     * Toggle ASPND's CHPND3 bit.
     */
    inline void toggle_ASPND_CHPND3()
    {
        ASPND ^= 1u << 3u;
    }

    /**
     * Get ASPND's CHPND2 bit.
     */
    VADC_G0_ASPND_CHPND2 get_ASPND_CHPND2()
    {
        return VADC_G0_ASPND_CHPND2(ASPND & (1u << 2u));
    }

    /**
     * Set ASPND's CHPND2 bit.
     */
    inline void set_ASPND_CHPND2()
    {
        ASPND |= 1u << 2u;
    }

    /**
     * Clear ASPND's CHPND2 bit.
     */
    inline void clear_ASPND_CHPND2()
    {
        ASPND &= ~(1u << 2u);
    }

    /**
     * Toggle ASPND's CHPND2 bit.
     */
    inline void toggle_ASPND_CHPND2()
    {
        ASPND ^= 1u << 2u;
    }

    /**
     * Get ASPND's CHPND1 bit.
     */
    VADC_G0_ASPND_CHPND1 get_ASPND_CHPND1()
    {
        return VADC_G0_ASPND_CHPND1(ASPND & (1u << 1u));
    }

    /**
     * Set ASPND's CHPND1 bit.
     */
    inline void set_ASPND_CHPND1()
    {
        ASPND |= 1u << 1u;
    }

    /**
     * Clear ASPND's CHPND1 bit.
     */
    inline void clear_ASPND_CHPND1()
    {
        ASPND &= ~(1u << 1u);
    }

    /**
     * Toggle ASPND's CHPND1 bit.
     */
    inline void toggle_ASPND_CHPND1()
    {
        ASPND ^= 1u << 1u;
    }

    /**
     * Get ASPND's CHPND0 bit.
     */
    VADC_G0_ASPND_CHPND0 get_ASPND_CHPND0()
    {
        return VADC_G0_ASPND_CHPND0(ASPND & (1u << 0u));
    }

    /**
     * Set ASPND's CHPND0 bit.
     */
    inline void set_ASPND_CHPND0()
    {
        ASPND |= 1u << 0u;
    }

    /**
     * Clear ASPND's CHPND0 bit.
     */
    inline void clear_ASPND_CHPND0()
    {
        ASPND &= ~(1u << 0u);
    }

    /**
     * Toggle ASPND's CHPND0 bit.
     */
    inline void toggle_ASPND_CHPND0()
    {
        ASPND ^= 1u << 0u;
    }

    /**
     * Get CEFLAG's CEV7 bit.
     */
    VADC_G0_CEFLAG_CEV7 get_CEFLAG_CEV7()
    {
        return VADC_G0_CEFLAG_CEV7(CEFLAG & (1u << 7u));
    }

    /**
     * Set CEFLAG's CEV7 bit.
     */
    inline void set_CEFLAG_CEV7()
    {
        CEFLAG |= 1u << 7u;
    }

    /**
     * Clear CEFLAG's CEV7 bit.
     */
    inline void clear_CEFLAG_CEV7()
    {
        CEFLAG &= ~(1u << 7u);
    }

    /**
     * Toggle CEFLAG's CEV7 bit.
     */
    inline void toggle_CEFLAG_CEV7()
    {
        CEFLAG ^= 1u << 7u;
    }

    /**
     * Get CEFLAG's CEV6 bit.
     */
    VADC_G0_CEFLAG_CEV6 get_CEFLAG_CEV6()
    {
        return VADC_G0_CEFLAG_CEV6(CEFLAG & (1u << 6u));
    }

    /**
     * Set CEFLAG's CEV6 bit.
     */
    inline void set_CEFLAG_CEV6()
    {
        CEFLAG |= 1u << 6u;
    }

    /**
     * Clear CEFLAG's CEV6 bit.
     */
    inline void clear_CEFLAG_CEV6()
    {
        CEFLAG &= ~(1u << 6u);
    }

    /**
     * Toggle CEFLAG's CEV6 bit.
     */
    inline void toggle_CEFLAG_CEV6()
    {
        CEFLAG ^= 1u << 6u;
    }

    /**
     * Get CEFLAG's CEV5 bit.
     */
    VADC_G0_CEFLAG_CEV5 get_CEFLAG_CEV5()
    {
        return VADC_G0_CEFLAG_CEV5(CEFLAG & (1u << 5u));
    }

    /**
     * Set CEFLAG's CEV5 bit.
     */
    inline void set_CEFLAG_CEV5()
    {
        CEFLAG |= 1u << 5u;
    }

    /**
     * Clear CEFLAG's CEV5 bit.
     */
    inline void clear_CEFLAG_CEV5()
    {
        CEFLAG &= ~(1u << 5u);
    }

    /**
     * Toggle CEFLAG's CEV5 bit.
     */
    inline void toggle_CEFLAG_CEV5()
    {
        CEFLAG ^= 1u << 5u;
    }

    /**
     * Get CEFLAG's CEV4 bit.
     */
    VADC_G0_CEFLAG_CEV4 get_CEFLAG_CEV4()
    {
        return VADC_G0_CEFLAG_CEV4(CEFLAG & (1u << 4u));
    }

    /**
     * Set CEFLAG's CEV4 bit.
     */
    inline void set_CEFLAG_CEV4()
    {
        CEFLAG |= 1u << 4u;
    }

    /**
     * Clear CEFLAG's CEV4 bit.
     */
    inline void clear_CEFLAG_CEV4()
    {
        CEFLAG &= ~(1u << 4u);
    }

    /**
     * Toggle CEFLAG's CEV4 bit.
     */
    inline void toggle_CEFLAG_CEV4()
    {
        CEFLAG ^= 1u << 4u;
    }

    /**
     * Get CEFLAG's CEV3 bit.
     */
    VADC_G0_CEFLAG_CEV3 get_CEFLAG_CEV3()
    {
        return VADC_G0_CEFLAG_CEV3(CEFLAG & (1u << 3u));
    }

    /**
     * Set CEFLAG's CEV3 bit.
     */
    inline void set_CEFLAG_CEV3()
    {
        CEFLAG |= 1u << 3u;
    }

    /**
     * Clear CEFLAG's CEV3 bit.
     */
    inline void clear_CEFLAG_CEV3()
    {
        CEFLAG &= ~(1u << 3u);
    }

    /**
     * Toggle CEFLAG's CEV3 bit.
     */
    inline void toggle_CEFLAG_CEV3()
    {
        CEFLAG ^= 1u << 3u;
    }

    /**
     * Get CEFLAG's CEV2 bit.
     */
    VADC_G0_CEFLAG_CEV2 get_CEFLAG_CEV2()
    {
        return VADC_G0_CEFLAG_CEV2(CEFLAG & (1u << 2u));
    }

    /**
     * Set CEFLAG's CEV2 bit.
     */
    inline void set_CEFLAG_CEV2()
    {
        CEFLAG |= 1u << 2u;
    }

    /**
     * Clear CEFLAG's CEV2 bit.
     */
    inline void clear_CEFLAG_CEV2()
    {
        CEFLAG &= ~(1u << 2u);
    }

    /**
     * Toggle CEFLAG's CEV2 bit.
     */
    inline void toggle_CEFLAG_CEV2()
    {
        CEFLAG ^= 1u << 2u;
    }

    /**
     * Get CEFLAG's CEV1 bit.
     */
    VADC_G0_CEFLAG_CEV1 get_CEFLAG_CEV1()
    {
        return VADC_G0_CEFLAG_CEV1(CEFLAG & (1u << 1u));
    }

    /**
     * Set CEFLAG's CEV1 bit.
     */
    inline void set_CEFLAG_CEV1()
    {
        CEFLAG |= 1u << 1u;
    }

    /**
     * Clear CEFLAG's CEV1 bit.
     */
    inline void clear_CEFLAG_CEV1()
    {
        CEFLAG &= ~(1u << 1u);
    }

    /**
     * Toggle CEFLAG's CEV1 bit.
     */
    inline void toggle_CEFLAG_CEV1()
    {
        CEFLAG ^= 1u << 1u;
    }

    /**
     * Get CEFLAG's CEV0 bit.
     */
    VADC_G0_CEFLAG_CEV0 get_CEFLAG_CEV0()
    {
        return VADC_G0_CEFLAG_CEV0(CEFLAG & (1u << 0u));
    }

    /**
     * Set CEFLAG's CEV0 bit.
     */
    inline void set_CEFLAG_CEV0()
    {
        CEFLAG |= 1u << 0u;
    }

    /**
     * Clear CEFLAG's CEV0 bit.
     */
    inline void clear_CEFLAG_CEV0()
    {
        CEFLAG &= ~(1u << 0u);
    }

    /**
     * Toggle CEFLAG's CEV0 bit.
     */
    inline void toggle_CEFLAG_CEV0()
    {
        CEFLAG ^= 1u << 0u;
    }

    /**
     * Get REFLAG's REV15 bit.
     */
    VADC_G0_REFLAG_REV15 get_REFLAG_REV15()
    {
        return VADC_G0_REFLAG_REV15(REFLAG & (1u << 15u));
    }

    /**
     * Set REFLAG's REV15 bit.
     */
    inline void set_REFLAG_REV15()
    {
        REFLAG |= 1u << 15u;
    }

    /**
     * Clear REFLAG's REV15 bit.
     */
    inline void clear_REFLAG_REV15()
    {
        REFLAG &= ~(1u << 15u);
    }

    /**
     * Toggle REFLAG's REV15 bit.
     */
    inline void toggle_REFLAG_REV15()
    {
        REFLAG ^= 1u << 15u;
    }

    /**
     * Get REFLAG's REV14 bit.
     */
    VADC_G0_REFLAG_REV14 get_REFLAG_REV14()
    {
        return VADC_G0_REFLAG_REV14(REFLAG & (1u << 14u));
    }

    /**
     * Set REFLAG's REV14 bit.
     */
    inline void set_REFLAG_REV14()
    {
        REFLAG |= 1u << 14u;
    }

    /**
     * Clear REFLAG's REV14 bit.
     */
    inline void clear_REFLAG_REV14()
    {
        REFLAG &= ~(1u << 14u);
    }

    /**
     * Toggle REFLAG's REV14 bit.
     */
    inline void toggle_REFLAG_REV14()
    {
        REFLAG ^= 1u << 14u;
    }

    /**
     * Get REFLAG's REV13 bit.
     */
    VADC_G0_REFLAG_REV13 get_REFLAG_REV13()
    {
        return VADC_G0_REFLAG_REV13(REFLAG & (1u << 13u));
    }

    /**
     * Set REFLAG's REV13 bit.
     */
    inline void set_REFLAG_REV13()
    {
        REFLAG |= 1u << 13u;
    }

    /**
     * Clear REFLAG's REV13 bit.
     */
    inline void clear_REFLAG_REV13()
    {
        REFLAG &= ~(1u << 13u);
    }

    /**
     * Toggle REFLAG's REV13 bit.
     */
    inline void toggle_REFLAG_REV13()
    {
        REFLAG ^= 1u << 13u;
    }

    /**
     * Get REFLAG's REV12 bit.
     */
    VADC_G0_REFLAG_REV12 get_REFLAG_REV12()
    {
        return VADC_G0_REFLAG_REV12(REFLAG & (1u << 12u));
    }

    /**
     * Set REFLAG's REV12 bit.
     */
    inline void set_REFLAG_REV12()
    {
        REFLAG |= 1u << 12u;
    }

    /**
     * Clear REFLAG's REV12 bit.
     */
    inline void clear_REFLAG_REV12()
    {
        REFLAG &= ~(1u << 12u);
    }

    /**
     * Toggle REFLAG's REV12 bit.
     */
    inline void toggle_REFLAG_REV12()
    {
        REFLAG ^= 1u << 12u;
    }

    /**
     * Get REFLAG's REV11 bit.
     */
    VADC_G0_REFLAG_REV11 get_REFLAG_REV11()
    {
        return VADC_G0_REFLAG_REV11(REFLAG & (1u << 11u));
    }

    /**
     * Set REFLAG's REV11 bit.
     */
    inline void set_REFLAG_REV11()
    {
        REFLAG |= 1u << 11u;
    }

    /**
     * Clear REFLAG's REV11 bit.
     */
    inline void clear_REFLAG_REV11()
    {
        REFLAG &= ~(1u << 11u);
    }

    /**
     * Toggle REFLAG's REV11 bit.
     */
    inline void toggle_REFLAG_REV11()
    {
        REFLAG ^= 1u << 11u;
    }

    /**
     * Get REFLAG's REV10 bit.
     */
    VADC_G0_REFLAG_REV10 get_REFLAG_REV10()
    {
        return VADC_G0_REFLAG_REV10(REFLAG & (1u << 10u));
    }

    /**
     * Set REFLAG's REV10 bit.
     */
    inline void set_REFLAG_REV10()
    {
        REFLAG |= 1u << 10u;
    }

    /**
     * Clear REFLAG's REV10 bit.
     */
    inline void clear_REFLAG_REV10()
    {
        REFLAG &= ~(1u << 10u);
    }

    /**
     * Toggle REFLAG's REV10 bit.
     */
    inline void toggle_REFLAG_REV10()
    {
        REFLAG ^= 1u << 10u;
    }

    /**
     * Get REFLAG's REV9 bit.
     */
    VADC_G0_REFLAG_REV9 get_REFLAG_REV9()
    {
        return VADC_G0_REFLAG_REV9(REFLAG & (1u << 9u));
    }

    /**
     * Set REFLAG's REV9 bit.
     */
    inline void set_REFLAG_REV9()
    {
        REFLAG |= 1u << 9u;
    }

    /**
     * Clear REFLAG's REV9 bit.
     */
    inline void clear_REFLAG_REV9()
    {
        REFLAG &= ~(1u << 9u);
    }

    /**
     * Toggle REFLAG's REV9 bit.
     */
    inline void toggle_REFLAG_REV9()
    {
        REFLAG ^= 1u << 9u;
    }

    /**
     * Get REFLAG's REV8 bit.
     */
    VADC_G0_REFLAG_REV8 get_REFLAG_REV8()
    {
        return VADC_G0_REFLAG_REV8(REFLAG & (1u << 8u));
    }

    /**
     * Set REFLAG's REV8 bit.
     */
    inline void set_REFLAG_REV8()
    {
        REFLAG |= 1u << 8u;
    }

    /**
     * Clear REFLAG's REV8 bit.
     */
    inline void clear_REFLAG_REV8()
    {
        REFLAG &= ~(1u << 8u);
    }

    /**
     * Toggle REFLAG's REV8 bit.
     */
    inline void toggle_REFLAG_REV8()
    {
        REFLAG ^= 1u << 8u;
    }

    /**
     * Get REFLAG's REV7 bit.
     */
    VADC_G0_REFLAG_REV7 get_REFLAG_REV7()
    {
        return VADC_G0_REFLAG_REV7(REFLAG & (1u << 7u));
    }

    /**
     * Set REFLAG's REV7 bit.
     */
    inline void set_REFLAG_REV7()
    {
        REFLAG |= 1u << 7u;
    }

    /**
     * Clear REFLAG's REV7 bit.
     */
    inline void clear_REFLAG_REV7()
    {
        REFLAG &= ~(1u << 7u);
    }

    /**
     * Toggle REFLAG's REV7 bit.
     */
    inline void toggle_REFLAG_REV7()
    {
        REFLAG ^= 1u << 7u;
    }

    /**
     * Get REFLAG's REV6 bit.
     */
    VADC_G0_REFLAG_REV6 get_REFLAG_REV6()
    {
        return VADC_G0_REFLAG_REV6(REFLAG & (1u << 6u));
    }

    /**
     * Set REFLAG's REV6 bit.
     */
    inline void set_REFLAG_REV6()
    {
        REFLAG |= 1u << 6u;
    }

    /**
     * Clear REFLAG's REV6 bit.
     */
    inline void clear_REFLAG_REV6()
    {
        REFLAG &= ~(1u << 6u);
    }

    /**
     * Toggle REFLAG's REV6 bit.
     */
    inline void toggle_REFLAG_REV6()
    {
        REFLAG ^= 1u << 6u;
    }

    /**
     * Get REFLAG's REV5 bit.
     */
    VADC_G0_REFLAG_REV5 get_REFLAG_REV5()
    {
        return VADC_G0_REFLAG_REV5(REFLAG & (1u << 5u));
    }

    /**
     * Set REFLAG's REV5 bit.
     */
    inline void set_REFLAG_REV5()
    {
        REFLAG |= 1u << 5u;
    }

    /**
     * Clear REFLAG's REV5 bit.
     */
    inline void clear_REFLAG_REV5()
    {
        REFLAG &= ~(1u << 5u);
    }

    /**
     * Toggle REFLAG's REV5 bit.
     */
    inline void toggle_REFLAG_REV5()
    {
        REFLAG ^= 1u << 5u;
    }

    /**
     * Get REFLAG's REV4 bit.
     */
    VADC_G0_REFLAG_REV4 get_REFLAG_REV4()
    {
        return VADC_G0_REFLAG_REV4(REFLAG & (1u << 4u));
    }

    /**
     * Set REFLAG's REV4 bit.
     */
    inline void set_REFLAG_REV4()
    {
        REFLAG |= 1u << 4u;
    }

    /**
     * Clear REFLAG's REV4 bit.
     */
    inline void clear_REFLAG_REV4()
    {
        REFLAG &= ~(1u << 4u);
    }

    /**
     * Toggle REFLAG's REV4 bit.
     */
    inline void toggle_REFLAG_REV4()
    {
        REFLAG ^= 1u << 4u;
    }

    /**
     * Get REFLAG's REV3 bit.
     */
    VADC_G0_REFLAG_REV3 get_REFLAG_REV3()
    {
        return VADC_G0_REFLAG_REV3(REFLAG & (1u << 3u));
    }

    /**
     * Set REFLAG's REV3 bit.
     */
    inline void set_REFLAG_REV3()
    {
        REFLAG |= 1u << 3u;
    }

    /**
     * Clear REFLAG's REV3 bit.
     */
    inline void clear_REFLAG_REV3()
    {
        REFLAG &= ~(1u << 3u);
    }

    /**
     * Toggle REFLAG's REV3 bit.
     */
    inline void toggle_REFLAG_REV3()
    {
        REFLAG ^= 1u << 3u;
    }

    /**
     * Get REFLAG's REV2 bit.
     */
    VADC_G0_REFLAG_REV2 get_REFLAG_REV2()
    {
        return VADC_G0_REFLAG_REV2(REFLAG & (1u << 2u));
    }

    /**
     * Set REFLAG's REV2 bit.
     */
    inline void set_REFLAG_REV2()
    {
        REFLAG |= 1u << 2u;
    }

    /**
     * Clear REFLAG's REV2 bit.
     */
    inline void clear_REFLAG_REV2()
    {
        REFLAG &= ~(1u << 2u);
    }

    /**
     * Toggle REFLAG's REV2 bit.
     */
    inline void toggle_REFLAG_REV2()
    {
        REFLAG ^= 1u << 2u;
    }

    /**
     * Get REFLAG's REV1 bit.
     */
    VADC_G0_REFLAG_REV1 get_REFLAG_REV1()
    {
        return VADC_G0_REFLAG_REV1(REFLAG & (1u << 1u));
    }

    /**
     * Set REFLAG's REV1 bit.
     */
    inline void set_REFLAG_REV1()
    {
        REFLAG |= 1u << 1u;
    }

    /**
     * Clear REFLAG's REV1 bit.
     */
    inline void clear_REFLAG_REV1()
    {
        REFLAG &= ~(1u << 1u);
    }

    /**
     * Toggle REFLAG's REV1 bit.
     */
    inline void toggle_REFLAG_REV1()
    {
        REFLAG ^= 1u << 1u;
    }

    /**
     * Get REFLAG's REV0 bit.
     */
    VADC_G0_REFLAG_REV0 get_REFLAG_REV0()
    {
        return VADC_G0_REFLAG_REV0(REFLAG & (1u << 0u));
    }

    /**
     * Set REFLAG's REV0 bit.
     */
    inline void set_REFLAG_REV0()
    {
        REFLAG |= 1u << 0u;
    }

    /**
     * Clear REFLAG's REV0 bit.
     */
    inline void clear_REFLAG_REV0()
    {
        REFLAG &= ~(1u << 0u);
    }

    /**
     * Toggle REFLAG's REV0 bit.
     */
    inline void toggle_REFLAG_REV0()
    {
        REFLAG ^= 1u << 0u;
    }

    /**
     * Get SEFLAG's SEV1 bit.
     */
    VADC_G0_SEFLAG_SEV1 get_SEFLAG_SEV1()
    {
        return VADC_G0_SEFLAG_SEV1(SEFLAG & (1u << 1u));
    }

    /**
     * Set SEFLAG's SEV1 bit.
     */
    inline void set_SEFLAG_SEV1()
    {
        SEFLAG |= 1u << 1u;
    }

    /**
     * Clear SEFLAG's SEV1 bit.
     */
    inline void clear_SEFLAG_SEV1()
    {
        SEFLAG &= ~(1u << 1u);
    }

    /**
     * Toggle SEFLAG's SEV1 bit.
     */
    inline void toggle_SEFLAG_SEV1()
    {
        SEFLAG ^= 1u << 1u;
    }

    /**
     * Get SEFLAG's SEV0 bit.
     */
    VADC_G0_SEFLAG_SEV0 get_SEFLAG_SEV0()
    {
        return VADC_G0_SEFLAG_SEV0(SEFLAG & (1u << 0u));
    }

    /**
     * Set SEFLAG's SEV0 bit.
     */
    inline void set_SEFLAG_SEV0()
    {
        SEFLAG |= 1u << 0u;
    }

    /**
     * Clear SEFLAG's SEV0 bit.
     */
    inline void clear_SEFLAG_SEV0()
    {
        SEFLAG &= ~(1u << 0u);
    }

    /**
     * Toggle SEFLAG's SEV0 bit.
     */
    inline void toggle_SEFLAG_SEV0()
    {
        SEFLAG ^= 1u << 0u;
    }

    /**
     * Set CEFCLR's CEV7 bit.
     */
    inline void set_CEFCLR_CEV7()
    {
        CEFCLR |= 1u << 7u;
    }

    /**
     * Clear CEFCLR's CEV7 bit.
     */
    inline void clear_CEFCLR_CEV7()
    {
        CEFCLR &= ~(1u << 7u);
    }

    /**
     * Toggle CEFCLR's CEV7 bit.
     */
    inline void toggle_CEFCLR_CEV7()
    {
        CEFCLR ^= 1u << 7u;
    }

    /**
     * Set CEFCLR's CEV6 bit.
     */
    inline void set_CEFCLR_CEV6()
    {
        CEFCLR |= 1u << 6u;
    }

    /**
     * Clear CEFCLR's CEV6 bit.
     */
    inline void clear_CEFCLR_CEV6()
    {
        CEFCLR &= ~(1u << 6u);
    }

    /**
     * Toggle CEFCLR's CEV6 bit.
     */
    inline void toggle_CEFCLR_CEV6()
    {
        CEFCLR ^= 1u << 6u;
    }

    /**
     * Set CEFCLR's CEV5 bit.
     */
    inline void set_CEFCLR_CEV5()
    {
        CEFCLR |= 1u << 5u;
    }

    /**
     * Clear CEFCLR's CEV5 bit.
     */
    inline void clear_CEFCLR_CEV5()
    {
        CEFCLR &= ~(1u << 5u);
    }

    /**
     * Toggle CEFCLR's CEV5 bit.
     */
    inline void toggle_CEFCLR_CEV5()
    {
        CEFCLR ^= 1u << 5u;
    }

    /**
     * Set CEFCLR's CEV4 bit.
     */
    inline void set_CEFCLR_CEV4()
    {
        CEFCLR |= 1u << 4u;
    }

    /**
     * Clear CEFCLR's CEV4 bit.
     */
    inline void clear_CEFCLR_CEV4()
    {
        CEFCLR &= ~(1u << 4u);
    }

    /**
     * Toggle CEFCLR's CEV4 bit.
     */
    inline void toggle_CEFCLR_CEV4()
    {
        CEFCLR ^= 1u << 4u;
    }

    /**
     * Set CEFCLR's CEV3 bit.
     */
    inline void set_CEFCLR_CEV3()
    {
        CEFCLR |= 1u << 3u;
    }

    /**
     * Clear CEFCLR's CEV3 bit.
     */
    inline void clear_CEFCLR_CEV3()
    {
        CEFCLR &= ~(1u << 3u);
    }

    /**
     * Toggle CEFCLR's CEV3 bit.
     */
    inline void toggle_CEFCLR_CEV3()
    {
        CEFCLR ^= 1u << 3u;
    }

    /**
     * Set CEFCLR's CEV2 bit.
     */
    inline void set_CEFCLR_CEV2()
    {
        CEFCLR |= 1u << 2u;
    }

    /**
     * Clear CEFCLR's CEV2 bit.
     */
    inline void clear_CEFCLR_CEV2()
    {
        CEFCLR &= ~(1u << 2u);
    }

    /**
     * Toggle CEFCLR's CEV2 bit.
     */
    inline void toggle_CEFCLR_CEV2()
    {
        CEFCLR ^= 1u << 2u;
    }

    /**
     * Set CEFCLR's CEV1 bit.
     */
    inline void set_CEFCLR_CEV1()
    {
        CEFCLR |= 1u << 1u;
    }

    /**
     * Clear CEFCLR's CEV1 bit.
     */
    inline void clear_CEFCLR_CEV1()
    {
        CEFCLR &= ~(1u << 1u);
    }

    /**
     * Toggle CEFCLR's CEV1 bit.
     */
    inline void toggle_CEFCLR_CEV1()
    {
        CEFCLR ^= 1u << 1u;
    }

    /**
     * Set CEFCLR's CEV0 bit.
     */
    inline void set_CEFCLR_CEV0()
    {
        CEFCLR |= 1u << 0u;
    }

    /**
     * Clear CEFCLR's CEV0 bit.
     */
    inline void clear_CEFCLR_CEV0()
    {
        CEFCLR &= ~(1u << 0u);
    }

    /**
     * Toggle CEFCLR's CEV0 bit.
     */
    inline void toggle_CEFCLR_CEV0()
    {
        CEFCLR ^= 1u << 0u;
    }

    /**
     * Set REFCLR's REV15 bit.
     */
    inline void set_REFCLR_REV15()
    {
        REFCLR |= 1u << 15u;
    }

    /**
     * Clear REFCLR's REV15 bit.
     */
    inline void clear_REFCLR_REV15()
    {
        REFCLR &= ~(1u << 15u);
    }

    /**
     * Toggle REFCLR's REV15 bit.
     */
    inline void toggle_REFCLR_REV15()
    {
        REFCLR ^= 1u << 15u;
    }

    /**
     * Set REFCLR's REV14 bit.
     */
    inline void set_REFCLR_REV14()
    {
        REFCLR |= 1u << 14u;
    }

    /**
     * Clear REFCLR's REV14 bit.
     */
    inline void clear_REFCLR_REV14()
    {
        REFCLR &= ~(1u << 14u);
    }

    /**
     * Toggle REFCLR's REV14 bit.
     */
    inline void toggle_REFCLR_REV14()
    {
        REFCLR ^= 1u << 14u;
    }

    /**
     * Set REFCLR's REV13 bit.
     */
    inline void set_REFCLR_REV13()
    {
        REFCLR |= 1u << 13u;
    }

    /**
     * Clear REFCLR's REV13 bit.
     */
    inline void clear_REFCLR_REV13()
    {
        REFCLR &= ~(1u << 13u);
    }

    /**
     * Toggle REFCLR's REV13 bit.
     */
    inline void toggle_REFCLR_REV13()
    {
        REFCLR ^= 1u << 13u;
    }

    /**
     * Set REFCLR's REV12 bit.
     */
    inline void set_REFCLR_REV12()
    {
        REFCLR |= 1u << 12u;
    }

    /**
     * Clear REFCLR's REV12 bit.
     */
    inline void clear_REFCLR_REV12()
    {
        REFCLR &= ~(1u << 12u);
    }

    /**
     * Toggle REFCLR's REV12 bit.
     */
    inline void toggle_REFCLR_REV12()
    {
        REFCLR ^= 1u << 12u;
    }

    /**
     * Set REFCLR's REV11 bit.
     */
    inline void set_REFCLR_REV11()
    {
        REFCLR |= 1u << 11u;
    }

    /**
     * Clear REFCLR's REV11 bit.
     */
    inline void clear_REFCLR_REV11()
    {
        REFCLR &= ~(1u << 11u);
    }

    /**
     * Toggle REFCLR's REV11 bit.
     */
    inline void toggle_REFCLR_REV11()
    {
        REFCLR ^= 1u << 11u;
    }

    /**
     * Set REFCLR's REV10 bit.
     */
    inline void set_REFCLR_REV10()
    {
        REFCLR |= 1u << 10u;
    }

    /**
     * Clear REFCLR's REV10 bit.
     */
    inline void clear_REFCLR_REV10()
    {
        REFCLR &= ~(1u << 10u);
    }

    /**
     * Toggle REFCLR's REV10 bit.
     */
    inline void toggle_REFCLR_REV10()
    {
        REFCLR ^= 1u << 10u;
    }

    /**
     * Set REFCLR's REV9 bit.
     */
    inline void set_REFCLR_REV9()
    {
        REFCLR |= 1u << 9u;
    }

    /**
     * Clear REFCLR's REV9 bit.
     */
    inline void clear_REFCLR_REV9()
    {
        REFCLR &= ~(1u << 9u);
    }

    /**
     * Toggle REFCLR's REV9 bit.
     */
    inline void toggle_REFCLR_REV9()
    {
        REFCLR ^= 1u << 9u;
    }

    /**
     * Set REFCLR's REV8 bit.
     */
    inline void set_REFCLR_REV8()
    {
        REFCLR |= 1u << 8u;
    }

    /**
     * Clear REFCLR's REV8 bit.
     */
    inline void clear_REFCLR_REV8()
    {
        REFCLR &= ~(1u << 8u);
    }

    /**
     * Toggle REFCLR's REV8 bit.
     */
    inline void toggle_REFCLR_REV8()
    {
        REFCLR ^= 1u << 8u;
    }

    /**
     * Set REFCLR's REV7 bit.
     */
    inline void set_REFCLR_REV7()
    {
        REFCLR |= 1u << 7u;
    }

    /**
     * Clear REFCLR's REV7 bit.
     */
    inline void clear_REFCLR_REV7()
    {
        REFCLR &= ~(1u << 7u);
    }

    /**
     * Toggle REFCLR's REV7 bit.
     */
    inline void toggle_REFCLR_REV7()
    {
        REFCLR ^= 1u << 7u;
    }

    /**
     * Set REFCLR's REV6 bit.
     */
    inline void set_REFCLR_REV6()
    {
        REFCLR |= 1u << 6u;
    }

    /**
     * Clear REFCLR's REV6 bit.
     */
    inline void clear_REFCLR_REV6()
    {
        REFCLR &= ~(1u << 6u);
    }

    /**
     * Toggle REFCLR's REV6 bit.
     */
    inline void toggle_REFCLR_REV6()
    {
        REFCLR ^= 1u << 6u;
    }

    /**
     * Set REFCLR's REV5 bit.
     */
    inline void set_REFCLR_REV5()
    {
        REFCLR |= 1u << 5u;
    }

    /**
     * Clear REFCLR's REV5 bit.
     */
    inline void clear_REFCLR_REV5()
    {
        REFCLR &= ~(1u << 5u);
    }

    /**
     * Toggle REFCLR's REV5 bit.
     */
    inline void toggle_REFCLR_REV5()
    {
        REFCLR ^= 1u << 5u;
    }

    /**
     * Set REFCLR's REV4 bit.
     */
    inline void set_REFCLR_REV4()
    {
        REFCLR |= 1u << 4u;
    }

    /**
     * Clear REFCLR's REV4 bit.
     */
    inline void clear_REFCLR_REV4()
    {
        REFCLR &= ~(1u << 4u);
    }

    /**
     * Toggle REFCLR's REV4 bit.
     */
    inline void toggle_REFCLR_REV4()
    {
        REFCLR ^= 1u << 4u;
    }

    /**
     * Set REFCLR's REV3 bit.
     */
    inline void set_REFCLR_REV3()
    {
        REFCLR |= 1u << 3u;
    }

    /**
     * Clear REFCLR's REV3 bit.
     */
    inline void clear_REFCLR_REV3()
    {
        REFCLR &= ~(1u << 3u);
    }

    /**
     * Toggle REFCLR's REV3 bit.
     */
    inline void toggle_REFCLR_REV3()
    {
        REFCLR ^= 1u << 3u;
    }

    /**
     * Set REFCLR's REV2 bit.
     */
    inline void set_REFCLR_REV2()
    {
        REFCLR |= 1u << 2u;
    }

    /**
     * Clear REFCLR's REV2 bit.
     */
    inline void clear_REFCLR_REV2()
    {
        REFCLR &= ~(1u << 2u);
    }

    /**
     * Toggle REFCLR's REV2 bit.
     */
    inline void toggle_REFCLR_REV2()
    {
        REFCLR ^= 1u << 2u;
    }

    /**
     * Set REFCLR's REV1 bit.
     */
    inline void set_REFCLR_REV1()
    {
        REFCLR |= 1u << 1u;
    }

    /**
     * Clear REFCLR's REV1 bit.
     */
    inline void clear_REFCLR_REV1()
    {
        REFCLR &= ~(1u << 1u);
    }

    /**
     * Toggle REFCLR's REV1 bit.
     */
    inline void toggle_REFCLR_REV1()
    {
        REFCLR ^= 1u << 1u;
    }

    /**
     * Set REFCLR's REV0 bit.
     */
    inline void set_REFCLR_REV0()
    {
        REFCLR |= 1u << 0u;
    }

    /**
     * Clear REFCLR's REV0 bit.
     */
    inline void clear_REFCLR_REV0()
    {
        REFCLR &= ~(1u << 0u);
    }

    /**
     * Toggle REFCLR's REV0 bit.
     */
    inline void toggle_REFCLR_REV0()
    {
        REFCLR ^= 1u << 0u;
    }

    /**
     * Set SEFCLR's SEV1 bit.
     */
    inline void set_SEFCLR_SEV1()
    {
        SEFCLR |= 1u << 1u;
    }

    /**
     * Clear SEFCLR's SEV1 bit.
     */
    inline void clear_SEFCLR_SEV1()
    {
        SEFCLR &= ~(1u << 1u);
    }

    /**
     * Toggle SEFCLR's SEV1 bit.
     */
    inline void toggle_SEFCLR_SEV1()
    {
        SEFCLR ^= 1u << 1u;
    }

    /**
     * Set SEFCLR's SEV0 bit.
     */
    inline void set_SEFCLR_SEV0()
    {
        SEFCLR |= 1u << 0u;
    }

    /**
     * Clear SEFCLR's SEV0 bit.
     */
    inline void clear_SEFCLR_SEV0()
    {
        SEFCLR &= ~(1u << 0u);
    }

    /**
     * Toggle SEFCLR's SEV0 bit.
     */
    inline void toggle_SEFCLR_SEV0()
    {
        SEFCLR ^= 1u << 0u;
    }

    /**
     * Get CEVNP0's CEV7NP field.
     */
    VADC_G0_CEVNP0_CEV7NP get_CEVNP0_CEV7NP()
    {
        return VADC_G0_CEVNP0_CEV7NP((CEVNP0 >> 28u) & 0b1111u);
    }

    /**
     * Set CEVNP0's CEV7NP field.
     */
    inline void set_CEVNP0_CEV7NP(VADC_G0_CEVNP0_CEV7NP value)
    {
        uint32_t curr = CEVNP0;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        CEVNP0 = curr;
    }

    /**
     * Get CEVNP0's CEV6NP field.
     */
    VADC_G0_CEVNP0_CEV6NP get_CEVNP0_CEV6NP()
    {
        return VADC_G0_CEVNP0_CEV6NP((CEVNP0 >> 24u) & 0b1111u);
    }

    /**
     * Set CEVNP0's CEV6NP field.
     */
    inline void set_CEVNP0_CEV6NP(VADC_G0_CEVNP0_CEV6NP value)
    {
        uint32_t curr = CEVNP0;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        CEVNP0 = curr;
    }

    /**
     * Get CEVNP0's CEV5NP field.
     */
    VADC_G0_CEVNP0_CEV5NP get_CEVNP0_CEV5NP()
    {
        return VADC_G0_CEVNP0_CEV5NP((CEVNP0 >> 20u) & 0b1111u);
    }

    /**
     * Set CEVNP0's CEV5NP field.
     */
    inline void set_CEVNP0_CEV5NP(VADC_G0_CEVNP0_CEV5NP value)
    {
        uint32_t curr = CEVNP0;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        CEVNP0 = curr;
    }

    /**
     * Get CEVNP0's CEV4NP field.
     */
    VADC_G0_CEVNP0_CEV4NP get_CEVNP0_CEV4NP()
    {
        return VADC_G0_CEVNP0_CEV4NP((CEVNP0 >> 16u) & 0b1111u);
    }

    /**
     * Set CEVNP0's CEV4NP field.
     */
    inline void set_CEVNP0_CEV4NP(VADC_G0_CEVNP0_CEV4NP value)
    {
        uint32_t curr = CEVNP0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        CEVNP0 = curr;
    }

    /**
     * Get CEVNP0's CEV3NP field.
     */
    VADC_G0_CEVNP0_CEV3NP get_CEVNP0_CEV3NP()
    {
        return VADC_G0_CEVNP0_CEV3NP((CEVNP0 >> 12u) & 0b1111u);
    }

    /**
     * Set CEVNP0's CEV3NP field.
     */
    inline void set_CEVNP0_CEV3NP(VADC_G0_CEVNP0_CEV3NP value)
    {
        uint32_t curr = CEVNP0;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        CEVNP0 = curr;
    }

    /**
     * Get CEVNP0's CEV2NP field.
     */
    VADC_G0_CEVNP0_CEV2NP get_CEVNP0_CEV2NP()
    {
        return VADC_G0_CEVNP0_CEV2NP((CEVNP0 >> 8u) & 0b1111u);
    }

    /**
     * Set CEVNP0's CEV2NP field.
     */
    inline void set_CEVNP0_CEV2NP(VADC_G0_CEVNP0_CEV2NP value)
    {
        uint32_t curr = CEVNP0;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        CEVNP0 = curr;
    }

    /**
     * Get CEVNP0's CEV1NP field.
     */
    VADC_G0_CEVNP0_CEV1NP get_CEVNP0_CEV1NP()
    {
        return VADC_G0_CEVNP0_CEV1NP((CEVNP0 >> 4u) & 0b1111u);
    }

    /**
     * Set CEVNP0's CEV1NP field.
     */
    inline void set_CEVNP0_CEV1NP(VADC_G0_CEVNP0_CEV1NP value)
    {
        uint32_t curr = CEVNP0;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        CEVNP0 = curr;
    }

    /**
     * Get CEVNP0's CEV0NP field.
     */
    VADC_G0_CEVNP0_CEV0NP get_CEVNP0_CEV0NP()
    {
        return VADC_G0_CEVNP0_CEV0NP((CEVNP0 >> 0u) & 0b1111u);
    }

    /**
     * Set CEVNP0's CEV0NP field.
     */
    inline void set_CEVNP0_CEV0NP(VADC_G0_CEVNP0_CEV0NP value)
    {
        uint32_t curr = CEVNP0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CEVNP0 = curr;
    }

    /**
     * Get REVNP0's REV7NP field.
     */
    VADC_G0_REVNP0_REV7NP get_REVNP0_REV7NP()
    {
        return VADC_G0_REVNP0_REV7NP((REVNP0 >> 28u) & 0b1111u);
    }

    /**
     * Set REVNP0's REV7NP field.
     */
    inline void set_REVNP0_REV7NP(VADC_G0_REVNP0_REV7NP value)
    {
        uint32_t curr = REVNP0;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        REVNP0 = curr;
    }

    /**
     * Get REVNP0's REV6NP field.
     */
    VADC_G0_REVNP0_REV6NP get_REVNP0_REV6NP()
    {
        return VADC_G0_REVNP0_REV6NP((REVNP0 >> 24u) & 0b1111u);
    }

    /**
     * Set REVNP0's REV6NP field.
     */
    inline void set_REVNP0_REV6NP(VADC_G0_REVNP0_REV6NP value)
    {
        uint32_t curr = REVNP0;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        REVNP0 = curr;
    }

    /**
     * Get REVNP0's REV5NP field.
     */
    VADC_G0_REVNP0_REV5NP get_REVNP0_REV5NP()
    {
        return VADC_G0_REVNP0_REV5NP((REVNP0 >> 20u) & 0b1111u);
    }

    /**
     * Set REVNP0's REV5NP field.
     */
    inline void set_REVNP0_REV5NP(VADC_G0_REVNP0_REV5NP value)
    {
        uint32_t curr = REVNP0;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        REVNP0 = curr;
    }

    /**
     * Get REVNP0's REV4NP field.
     */
    VADC_G0_REVNP0_REV4NP get_REVNP0_REV4NP()
    {
        return VADC_G0_REVNP0_REV4NP((REVNP0 >> 16u) & 0b1111u);
    }

    /**
     * Set REVNP0's REV4NP field.
     */
    inline void set_REVNP0_REV4NP(VADC_G0_REVNP0_REV4NP value)
    {
        uint32_t curr = REVNP0;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        REVNP0 = curr;
    }

    /**
     * Get REVNP0's REV3NP field.
     */
    VADC_G0_REVNP0_REV3NP get_REVNP0_REV3NP()
    {
        return VADC_G0_REVNP0_REV3NP((REVNP0 >> 12u) & 0b1111u);
    }

    /**
     * Set REVNP0's REV3NP field.
     */
    inline void set_REVNP0_REV3NP(VADC_G0_REVNP0_REV3NP value)
    {
        uint32_t curr = REVNP0;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        REVNP0 = curr;
    }

    /**
     * Get REVNP0's REV2NP field.
     */
    VADC_G0_REVNP0_REV2NP get_REVNP0_REV2NP()
    {
        return VADC_G0_REVNP0_REV2NP((REVNP0 >> 8u) & 0b1111u);
    }

    /**
     * Set REVNP0's REV2NP field.
     */
    inline void set_REVNP0_REV2NP(VADC_G0_REVNP0_REV2NP value)
    {
        uint32_t curr = REVNP0;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        REVNP0 = curr;
    }

    /**
     * Get REVNP0's REV1NP field.
     */
    VADC_G0_REVNP0_REV1NP get_REVNP0_REV1NP()
    {
        return VADC_G0_REVNP0_REV1NP((REVNP0 >> 4u) & 0b1111u);
    }

    /**
     * Set REVNP0's REV1NP field.
     */
    inline void set_REVNP0_REV1NP(VADC_G0_REVNP0_REV1NP value)
    {
        uint32_t curr = REVNP0;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        REVNP0 = curr;
    }

    /**
     * Get REVNP0's REV0NP field.
     */
    VADC_G0_REVNP0_REV0NP get_REVNP0_REV0NP()
    {
        return VADC_G0_REVNP0_REV0NP((REVNP0 >> 0u) & 0b1111u);
    }

    /**
     * Set REVNP0's REV0NP field.
     */
    inline void set_REVNP0_REV0NP(VADC_G0_REVNP0_REV0NP value)
    {
        uint32_t curr = REVNP0;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        REVNP0 = curr;
    }

    /**
     * Get REVNP1's REV15NP field.
     */
    VADC_G0_REVNP1_REV15NP get_REVNP1_REV15NP()
    {
        return VADC_G0_REVNP1_REV15NP((REVNP1 >> 28u) & 0b1111u);
    }

    /**
     * Set REVNP1's REV15NP field.
     */
    inline void set_REVNP1_REV15NP(VADC_G0_REVNP1_REV15NP value)
    {
        uint32_t curr = REVNP1;

        curr &= ~(0b1111u << 28u);
        curr |= (std::to_underlying(value) & 0b1111u) << 28u;

        REVNP1 = curr;
    }

    /**
     * Get REVNP1's REV14NP field.
     */
    VADC_G0_REVNP1_REV14NP get_REVNP1_REV14NP()
    {
        return VADC_G0_REVNP1_REV14NP((REVNP1 >> 24u) & 0b1111u);
    }

    /**
     * Set REVNP1's REV14NP field.
     */
    inline void set_REVNP1_REV14NP(VADC_G0_REVNP1_REV14NP value)
    {
        uint32_t curr = REVNP1;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        REVNP1 = curr;
    }

    /**
     * Get REVNP1's REV13NP field.
     */
    VADC_G0_REVNP1_REV13NP get_REVNP1_REV13NP()
    {
        return VADC_G0_REVNP1_REV13NP((REVNP1 >> 20u) & 0b1111u);
    }

    /**
     * Set REVNP1's REV13NP field.
     */
    inline void set_REVNP1_REV13NP(VADC_G0_REVNP1_REV13NP value)
    {
        uint32_t curr = REVNP1;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        REVNP1 = curr;
    }

    /**
     * Get REVNP1's REV12NP field.
     */
    VADC_G0_REVNP1_REV12NP get_REVNP1_REV12NP()
    {
        return VADC_G0_REVNP1_REV12NP((REVNP1 >> 16u) & 0b1111u);
    }

    /**
     * Set REVNP1's REV12NP field.
     */
    inline void set_REVNP1_REV12NP(VADC_G0_REVNP1_REV12NP value)
    {
        uint32_t curr = REVNP1;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        REVNP1 = curr;
    }

    /**
     * Get REVNP1's REV11NP field.
     */
    VADC_G0_REVNP1_REV11NP get_REVNP1_REV11NP()
    {
        return VADC_G0_REVNP1_REV11NP((REVNP1 >> 12u) & 0b1111u);
    }

    /**
     * Set REVNP1's REV11NP field.
     */
    inline void set_REVNP1_REV11NP(VADC_G0_REVNP1_REV11NP value)
    {
        uint32_t curr = REVNP1;

        curr &= ~(0b1111u << 12u);
        curr |= (std::to_underlying(value) & 0b1111u) << 12u;

        REVNP1 = curr;
    }

    /**
     * Get REVNP1's REV10NP field.
     */
    VADC_G0_REVNP1_REV10NP get_REVNP1_REV10NP()
    {
        return VADC_G0_REVNP1_REV10NP((REVNP1 >> 8u) & 0b1111u);
    }

    /**
     * Set REVNP1's REV10NP field.
     */
    inline void set_REVNP1_REV10NP(VADC_G0_REVNP1_REV10NP value)
    {
        uint32_t curr = REVNP1;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        REVNP1 = curr;
    }

    /**
     * Get REVNP1's REV9NP field.
     */
    VADC_G0_REVNP1_REV9NP get_REVNP1_REV9NP()
    {
        return VADC_G0_REVNP1_REV9NP((REVNP1 >> 4u) & 0b1111u);
    }

    /**
     * Set REVNP1's REV9NP field.
     */
    inline void set_REVNP1_REV9NP(VADC_G0_REVNP1_REV9NP value)
    {
        uint32_t curr = REVNP1;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        REVNP1 = curr;
    }

    /**
     * Get REVNP1's REV8NP field.
     */
    VADC_G0_REVNP1_REV8NP get_REVNP1_REV8NP()
    {
        return VADC_G0_REVNP1_REV8NP((REVNP1 >> 0u) & 0b1111u);
    }

    /**
     * Set REVNP1's REV8NP field.
     */
    inline void set_REVNP1_REV8NP(VADC_G0_REVNP1_REV8NP value)
    {
        uint32_t curr = REVNP1;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        REVNP1 = curr;
    }

    /**
     * Get SEVNP's SEV1NP field.
     */
    VADC_G0_SEVNP_SEV1NP get_SEVNP_SEV1NP()
    {
        return VADC_G0_SEVNP_SEV1NP((SEVNP >> 4u) & 0b1111u);
    }

    /**
     * Set SEVNP's SEV1NP field.
     */
    inline void set_SEVNP_SEV1NP(VADC_G0_SEVNP_SEV1NP value)
    {
        uint32_t curr = SEVNP;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        SEVNP = curr;
    }

    /**
     * Get SEVNP's SEV0NP field.
     */
    VADC_G0_SEVNP_SEV0NP get_SEVNP_SEV0NP()
    {
        return VADC_G0_SEVNP_SEV0NP((SEVNP >> 0u) & 0b1111u);
    }

    /**
     * Set SEVNP's SEV0NP field.
     */
    inline void set_SEVNP_SEV0NP(VADC_G0_SEVNP_SEV0NP value)
    {
        uint32_t curr = SEVNP;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        SEVNP = curr;
    }

    /**
     * Set SRACT's ASSR3 bit.
     */
    inline void set_SRACT_ASSR3()
    {
        SRACT |= 1u << 11u;
    }

    /**
     * Clear SRACT's ASSR3 bit.
     */
    inline void clear_SRACT_ASSR3()
    {
        SRACT &= ~(1u << 11u);
    }

    /**
     * Toggle SRACT's ASSR3 bit.
     */
    inline void toggle_SRACT_ASSR3()
    {
        SRACT ^= 1u << 11u;
    }

    /**
     * Set SRACT's ASSR2 bit.
     */
    inline void set_SRACT_ASSR2()
    {
        SRACT |= 1u << 10u;
    }

    /**
     * Clear SRACT's ASSR2 bit.
     */
    inline void clear_SRACT_ASSR2()
    {
        SRACT &= ~(1u << 10u);
    }

    /**
     * Toggle SRACT's ASSR2 bit.
     */
    inline void toggle_SRACT_ASSR2()
    {
        SRACT ^= 1u << 10u;
    }

    /**
     * Set SRACT's ASSR1 bit.
     */
    inline void set_SRACT_ASSR1()
    {
        SRACT |= 1u << 9u;
    }

    /**
     * Clear SRACT's ASSR1 bit.
     */
    inline void clear_SRACT_ASSR1()
    {
        SRACT &= ~(1u << 9u);
    }

    /**
     * Toggle SRACT's ASSR1 bit.
     */
    inline void toggle_SRACT_ASSR1()
    {
        SRACT ^= 1u << 9u;
    }

    /**
     * Set SRACT's ASSR0 bit.
     */
    inline void set_SRACT_ASSR0()
    {
        SRACT |= 1u << 8u;
    }

    /**
     * Clear SRACT's ASSR0 bit.
     */
    inline void clear_SRACT_ASSR0()
    {
        SRACT &= ~(1u << 8u);
    }

    /**
     * Toggle SRACT's ASSR0 bit.
     */
    inline void toggle_SRACT_ASSR0()
    {
        SRACT ^= 1u << 8u;
    }

    /**
     * Set SRACT's AGSR3 bit.
     */
    inline void set_SRACT_AGSR3()
    {
        SRACT |= 1u << 3u;
    }

    /**
     * Clear SRACT's AGSR3 bit.
     */
    inline void clear_SRACT_AGSR3()
    {
        SRACT &= ~(1u << 3u);
    }

    /**
     * Toggle SRACT's AGSR3 bit.
     */
    inline void toggle_SRACT_AGSR3()
    {
        SRACT ^= 1u << 3u;
    }

    /**
     * Set SRACT's AGSR2 bit.
     */
    inline void set_SRACT_AGSR2()
    {
        SRACT |= 1u << 2u;
    }

    /**
     * Clear SRACT's AGSR2 bit.
     */
    inline void clear_SRACT_AGSR2()
    {
        SRACT &= ~(1u << 2u);
    }

    /**
     * Toggle SRACT's AGSR2 bit.
     */
    inline void toggle_SRACT_AGSR2()
    {
        SRACT ^= 1u << 2u;
    }

    /**
     * Set SRACT's AGSR1 bit.
     */
    inline void set_SRACT_AGSR1()
    {
        SRACT |= 1u << 1u;
    }

    /**
     * Clear SRACT's AGSR1 bit.
     */
    inline void clear_SRACT_AGSR1()
    {
        SRACT &= ~(1u << 1u);
    }

    /**
     * Toggle SRACT's AGSR1 bit.
     */
    inline void toggle_SRACT_AGSR1()
    {
        SRACT ^= 1u << 1u;
    }

    /**
     * Set SRACT's AGSR0 bit.
     */
    inline void set_SRACT_AGSR0()
    {
        SRACT |= 1u << 0u;
    }

    /**
     * Clear SRACT's AGSR0 bit.
     */
    inline void clear_SRACT_AGSR0()
    {
        SRACT &= ~(1u << 0u);
    }

    /**
     * Toggle SRACT's AGSR0 bit.
     */
    inline void toggle_SRACT_AGSR0()
    {
        SRACT ^= 1u << 0u;
    }

    /**
     * Set EMUXCTR's EMXWC bit.
     */
    inline void set_EMUXCTR_EMXWC()
    {
        EMUXCTR |= 1u << 31u;
    }

    /**
     * Clear EMUXCTR's EMXWC bit.
     */
    inline void clear_EMUXCTR_EMXWC()
    {
        EMUXCTR &= ~(1u << 31u);
    }

    /**
     * Toggle EMUXCTR's EMXWC bit.
     */
    inline void toggle_EMUXCTR_EMXWC()
    {
        EMUXCTR ^= 1u << 31u;
    }

    /**
     * Get EMUXCTR's EMXCSS bit.
     */
    VADC_G0_EMUXCTR_EMXCSS get_EMUXCTR_EMXCSS()
    {
        return VADC_G0_EMUXCTR_EMXCSS(EMUXCTR & (1u << 30u));
    }

    /**
     * Get EMUXCTR's EMXST bit.
     */
    VADC_G0_EMUXCTR_EMXST get_EMUXCTR_EMXST()
    {
        return VADC_G0_EMUXCTR_EMXST(EMUXCTR & (1u << 29u));
    }

    /**
     * Set EMUXCTR's EMXST bit.
     */
    inline void set_EMUXCTR_EMXST()
    {
        EMUXCTR |= 1u << 29u;
    }

    /**
     * Clear EMUXCTR's EMXST bit.
     */
    inline void clear_EMUXCTR_EMXST()
    {
        EMUXCTR &= ~(1u << 29u);
    }

    /**
     * Toggle EMUXCTR's EMXST bit.
     */
    inline void toggle_EMUXCTR_EMXST()
    {
        EMUXCTR ^= 1u << 29u;
    }

    /**
     * Get EMUXCTR's EMXCOD bit.
     */
    VADC_G0_EMUXCTR_EMXCOD get_EMUXCTR_EMXCOD()
    {
        return VADC_G0_EMUXCTR_EMXCOD(EMUXCTR & (1u << 28u));
    }

    /**
     * Set EMUXCTR's EMXCOD bit.
     */
    inline void set_EMUXCTR_EMXCOD()
    {
        EMUXCTR |= 1u << 28u;
    }

    /**
     * Clear EMUXCTR's EMXCOD bit.
     */
    inline void clear_EMUXCTR_EMXCOD()
    {
        EMUXCTR &= ~(1u << 28u);
    }

    /**
     * Toggle EMUXCTR's EMXCOD bit.
     */
    inline void toggle_EMUXCTR_EMXCOD()
    {
        EMUXCTR ^= 1u << 28u;
    }

    /**
     * Get EMUXCTR's EMUXMODE field.
     */
    VADC_G0_EMUXCTR_EMUXMODE get_EMUXCTR_EMUXMODE()
    {
        return VADC_G0_EMUXCTR_EMUXMODE((EMUXCTR >> 26u) & 0b11u);
    }

    /**
     * Set EMUXCTR's EMUXMODE field.
     */
    inline void set_EMUXCTR_EMUXMODE(VADC_G0_EMUXCTR_EMUXMODE value)
    {
        uint32_t curr = EMUXCTR;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EMUXCTR = curr;
    }

    /**
     * Get EMUXCTR's EMUXCH field.
     */
    uint16_t get_EMUXCTR_EMUXCH()
    {
        return (EMUXCTR >> 16u) & 0b1111111111u;
    }

    /**
     * Set EMUXCTR's EMUXCH field.
     */
    inline void set_EMUXCTR_EMUXCH(uint16_t value)
    {
        uint32_t curr = EMUXCTR;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EMUXCTR = curr;
    }

    /**
     * Get EMUXCTR's EMUXACT field.
     */
    uint8_t get_EMUXCTR_EMUXACT()
    {
        return (EMUXCTR >> 8u) & 0b111u;
    }

    /**
     * Get EMUXCTR's EMUXSET field.
     */
    uint8_t get_EMUXCTR_EMUXSET()
    {
        return (EMUXCTR >> 0u) & 0b111u;
    }

    /**
     * Set EMUXCTR's EMUXSET field.
     */
    inline void set_EMUXCTR_EMUXSET(uint8_t value)
    {
        uint32_t curr = EMUXCTR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        EMUXCTR = curr;
    }

    /**
     * Get VFR's VF15 bit.
     */
    VADC_G0_VFR_VF15 get_VFR_VF15()
    {
        return VADC_G0_VFR_VF15(VFR & (1u << 15u));
    }

    /**
     * Set VFR's VF15 bit.
     */
    inline void set_VFR_VF15()
    {
        VFR |= 1u << 15u;
    }

    /**
     * Clear VFR's VF15 bit.
     */
    inline void clear_VFR_VF15()
    {
        VFR &= ~(1u << 15u);
    }

    /**
     * Toggle VFR's VF15 bit.
     */
    inline void toggle_VFR_VF15()
    {
        VFR ^= 1u << 15u;
    }

    /**
     * Get VFR's VF14 bit.
     */
    VADC_G0_VFR_VF14 get_VFR_VF14()
    {
        return VADC_G0_VFR_VF14(VFR & (1u << 14u));
    }

    /**
     * Set VFR's VF14 bit.
     */
    inline void set_VFR_VF14()
    {
        VFR |= 1u << 14u;
    }

    /**
     * Clear VFR's VF14 bit.
     */
    inline void clear_VFR_VF14()
    {
        VFR &= ~(1u << 14u);
    }

    /**
     * Toggle VFR's VF14 bit.
     */
    inline void toggle_VFR_VF14()
    {
        VFR ^= 1u << 14u;
    }

    /**
     * Get VFR's VF13 bit.
     */
    VADC_G0_VFR_VF13 get_VFR_VF13()
    {
        return VADC_G0_VFR_VF13(VFR & (1u << 13u));
    }

    /**
     * Set VFR's VF13 bit.
     */
    inline void set_VFR_VF13()
    {
        VFR |= 1u << 13u;
    }

    /**
     * Clear VFR's VF13 bit.
     */
    inline void clear_VFR_VF13()
    {
        VFR &= ~(1u << 13u);
    }

    /**
     * Toggle VFR's VF13 bit.
     */
    inline void toggle_VFR_VF13()
    {
        VFR ^= 1u << 13u;
    }

    /**
     * Get VFR's VF12 bit.
     */
    VADC_G0_VFR_VF12 get_VFR_VF12()
    {
        return VADC_G0_VFR_VF12(VFR & (1u << 12u));
    }

    /**
     * Set VFR's VF12 bit.
     */
    inline void set_VFR_VF12()
    {
        VFR |= 1u << 12u;
    }

    /**
     * Clear VFR's VF12 bit.
     */
    inline void clear_VFR_VF12()
    {
        VFR &= ~(1u << 12u);
    }

    /**
     * Toggle VFR's VF12 bit.
     */
    inline void toggle_VFR_VF12()
    {
        VFR ^= 1u << 12u;
    }

    /**
     * Get VFR's VF11 bit.
     */
    VADC_G0_VFR_VF11 get_VFR_VF11()
    {
        return VADC_G0_VFR_VF11(VFR & (1u << 11u));
    }

    /**
     * Set VFR's VF11 bit.
     */
    inline void set_VFR_VF11()
    {
        VFR |= 1u << 11u;
    }

    /**
     * Clear VFR's VF11 bit.
     */
    inline void clear_VFR_VF11()
    {
        VFR &= ~(1u << 11u);
    }

    /**
     * Toggle VFR's VF11 bit.
     */
    inline void toggle_VFR_VF11()
    {
        VFR ^= 1u << 11u;
    }

    /**
     * Get VFR's VF10 bit.
     */
    VADC_G0_VFR_VF10 get_VFR_VF10()
    {
        return VADC_G0_VFR_VF10(VFR & (1u << 10u));
    }

    /**
     * Set VFR's VF10 bit.
     */
    inline void set_VFR_VF10()
    {
        VFR |= 1u << 10u;
    }

    /**
     * Clear VFR's VF10 bit.
     */
    inline void clear_VFR_VF10()
    {
        VFR &= ~(1u << 10u);
    }

    /**
     * Toggle VFR's VF10 bit.
     */
    inline void toggle_VFR_VF10()
    {
        VFR ^= 1u << 10u;
    }

    /**
     * Get VFR's VF9 bit.
     */
    VADC_G0_VFR_VF9 get_VFR_VF9()
    {
        return VADC_G0_VFR_VF9(VFR & (1u << 9u));
    }

    /**
     * Set VFR's VF9 bit.
     */
    inline void set_VFR_VF9()
    {
        VFR |= 1u << 9u;
    }

    /**
     * Clear VFR's VF9 bit.
     */
    inline void clear_VFR_VF9()
    {
        VFR &= ~(1u << 9u);
    }

    /**
     * Toggle VFR's VF9 bit.
     */
    inline void toggle_VFR_VF9()
    {
        VFR ^= 1u << 9u;
    }

    /**
     * Get VFR's VF8 bit.
     */
    VADC_G0_VFR_VF8 get_VFR_VF8()
    {
        return VADC_G0_VFR_VF8(VFR & (1u << 8u));
    }

    /**
     * Set VFR's VF8 bit.
     */
    inline void set_VFR_VF8()
    {
        VFR |= 1u << 8u;
    }

    /**
     * Clear VFR's VF8 bit.
     */
    inline void clear_VFR_VF8()
    {
        VFR &= ~(1u << 8u);
    }

    /**
     * Toggle VFR's VF8 bit.
     */
    inline void toggle_VFR_VF8()
    {
        VFR ^= 1u << 8u;
    }

    /**
     * Get VFR's VF7 bit.
     */
    VADC_G0_VFR_VF7 get_VFR_VF7()
    {
        return VADC_G0_VFR_VF7(VFR & (1u << 7u));
    }

    /**
     * Set VFR's VF7 bit.
     */
    inline void set_VFR_VF7()
    {
        VFR |= 1u << 7u;
    }

    /**
     * Clear VFR's VF7 bit.
     */
    inline void clear_VFR_VF7()
    {
        VFR &= ~(1u << 7u);
    }

    /**
     * Toggle VFR's VF7 bit.
     */
    inline void toggle_VFR_VF7()
    {
        VFR ^= 1u << 7u;
    }

    /**
     * Get VFR's VF6 bit.
     */
    VADC_G0_VFR_VF6 get_VFR_VF6()
    {
        return VADC_G0_VFR_VF6(VFR & (1u << 6u));
    }

    /**
     * Set VFR's VF6 bit.
     */
    inline void set_VFR_VF6()
    {
        VFR |= 1u << 6u;
    }

    /**
     * Clear VFR's VF6 bit.
     */
    inline void clear_VFR_VF6()
    {
        VFR &= ~(1u << 6u);
    }

    /**
     * Toggle VFR's VF6 bit.
     */
    inline void toggle_VFR_VF6()
    {
        VFR ^= 1u << 6u;
    }

    /**
     * Get VFR's VF5 bit.
     */
    VADC_G0_VFR_VF5 get_VFR_VF5()
    {
        return VADC_G0_VFR_VF5(VFR & (1u << 5u));
    }

    /**
     * Set VFR's VF5 bit.
     */
    inline void set_VFR_VF5()
    {
        VFR |= 1u << 5u;
    }

    /**
     * Clear VFR's VF5 bit.
     */
    inline void clear_VFR_VF5()
    {
        VFR &= ~(1u << 5u);
    }

    /**
     * Toggle VFR's VF5 bit.
     */
    inline void toggle_VFR_VF5()
    {
        VFR ^= 1u << 5u;
    }

    /**
     * Get VFR's VF4 bit.
     */
    VADC_G0_VFR_VF4 get_VFR_VF4()
    {
        return VADC_G0_VFR_VF4(VFR & (1u << 4u));
    }

    /**
     * Set VFR's VF4 bit.
     */
    inline void set_VFR_VF4()
    {
        VFR |= 1u << 4u;
    }

    /**
     * Clear VFR's VF4 bit.
     */
    inline void clear_VFR_VF4()
    {
        VFR &= ~(1u << 4u);
    }

    /**
     * Toggle VFR's VF4 bit.
     */
    inline void toggle_VFR_VF4()
    {
        VFR ^= 1u << 4u;
    }

    /**
     * Get VFR's VF3 bit.
     */
    VADC_G0_VFR_VF3 get_VFR_VF3()
    {
        return VADC_G0_VFR_VF3(VFR & (1u << 3u));
    }

    /**
     * Set VFR's VF3 bit.
     */
    inline void set_VFR_VF3()
    {
        VFR |= 1u << 3u;
    }

    /**
     * Clear VFR's VF3 bit.
     */
    inline void clear_VFR_VF3()
    {
        VFR &= ~(1u << 3u);
    }

    /**
     * Toggle VFR's VF3 bit.
     */
    inline void toggle_VFR_VF3()
    {
        VFR ^= 1u << 3u;
    }

    /**
     * Get VFR's VF2 bit.
     */
    VADC_G0_VFR_VF2 get_VFR_VF2()
    {
        return VADC_G0_VFR_VF2(VFR & (1u << 2u));
    }

    /**
     * Set VFR's VF2 bit.
     */
    inline void set_VFR_VF2()
    {
        VFR |= 1u << 2u;
    }

    /**
     * Clear VFR's VF2 bit.
     */
    inline void clear_VFR_VF2()
    {
        VFR &= ~(1u << 2u);
    }

    /**
     * Toggle VFR's VF2 bit.
     */
    inline void toggle_VFR_VF2()
    {
        VFR ^= 1u << 2u;
    }

    /**
     * Get VFR's VF1 bit.
     */
    VADC_G0_VFR_VF1 get_VFR_VF1()
    {
        return VADC_G0_VFR_VF1(VFR & (1u << 1u));
    }

    /**
     * Set VFR's VF1 bit.
     */
    inline void set_VFR_VF1()
    {
        VFR |= 1u << 1u;
    }

    /**
     * Clear VFR's VF1 bit.
     */
    inline void clear_VFR_VF1()
    {
        VFR &= ~(1u << 1u);
    }

    /**
     * Toggle VFR's VF1 bit.
     */
    inline void toggle_VFR_VF1()
    {
        VFR ^= 1u << 1u;
    }

    /**
     * Get VFR's VF0 bit.
     */
    VADC_G0_VFR_VF0 get_VFR_VF0()
    {
        return VADC_G0_VFR_VF0(VFR & (1u << 0u));
    }

    /**
     * Set VFR's VF0 bit.
     */
    inline void set_VFR_VF0()
    {
        VFR |= 1u << 0u;
    }

    /**
     * Clear VFR's VF0 bit.
     */
    inline void clear_VFR_VF0()
    {
        VFR &= ~(1u << 0u);
    }

    /**
     * Toggle VFR's VF0 bit.
     */
    inline void toggle_VFR_VF0()
    {
        VFR ^= 1u << 0u;
    }

    /**
     * Get CHCTR's BWDEN bit.
     */
    VADC_G0_CHCTR_BWDEN get_CHCTR_BWDEN(std::size_t index)
    {
        return VADC_G0_CHCTR_BWDEN(CHCTR[index] & (1u << 30u));
    }

    /**
     * Set CHCTR's BWDEN bit.
     */
    inline void set_CHCTR_BWDEN()
    {
        CHCTR |= 1u << 30u;
    }

    /**
     * Clear CHCTR's BWDEN bit.
     */
    inline void clear_CHCTR_BWDEN()
    {
        CHCTR &= ~(1u << 30u);
    }

    /**
     * Toggle CHCTR's BWDEN bit.
     */
    inline void toggle_CHCTR_BWDEN()
    {
        CHCTR ^= 1u << 30u;
    }

    /**
     * Get CHCTR's BWDCH field.
     */
    VADC_G0_CHCTR_BWDCH get_CHCTR_BWDCH(std::size_t index)
    {
        return VADC_G0_CHCTR_BWDCH((CHCTR[index] >> 28u) & 0b11u);
    }

    /**
     * Set CHCTR's BWDCH field.
     */
    inline void set_CHCTR_BWDCH(std::size_t index, VADC_G0_CHCTR_BWDCH value)
    {
        uint32_t curr = CHCTR[index];

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        CHCTR[index] = curr;
    }

    /**
     * Get CHCTR's RESPOS bit.
     */
    VADC_G0_CHCTR_RESPOS get_CHCTR_RESPOS(std::size_t index)
    {
        return VADC_G0_CHCTR_RESPOS(CHCTR[index] & (1u << 21u));
    }

    /**
     * Set CHCTR's RESPOS bit.
     */
    inline void set_CHCTR_RESPOS()
    {
        CHCTR |= 1u << 21u;
    }

    /**
     * Clear CHCTR's RESPOS bit.
     */
    inline void clear_CHCTR_RESPOS()
    {
        CHCTR &= ~(1u << 21u);
    }

    /**
     * Toggle CHCTR's RESPOS bit.
     */
    inline void toggle_CHCTR_RESPOS()
    {
        CHCTR ^= 1u << 21u;
    }

    /**
     * Get CHCTR's RESTBS bit.
     */
    VADC_G0_CHCTR_RESTBS get_CHCTR_RESTBS(std::size_t index)
    {
        return VADC_G0_CHCTR_RESTBS(CHCTR[index] & (1u << 20u));
    }

    /**
     * Set CHCTR's RESTBS bit.
     */
    inline void set_CHCTR_RESTBS()
    {
        CHCTR |= 1u << 20u;
    }

    /**
     * Clear CHCTR's RESTBS bit.
     */
    inline void clear_CHCTR_RESTBS()
    {
        CHCTR &= ~(1u << 20u);
    }

    /**
     * Toggle CHCTR's RESTBS bit.
     */
    inline void toggle_CHCTR_RESTBS()
    {
        CHCTR ^= 1u << 20u;
    }

    /**
     * Get CHCTR's RESREG field.
     */
    VADC_G0_CHCTR_RESREG get_CHCTR_RESREG(std::size_t index)
    {
        return VADC_G0_CHCTR_RESREG((CHCTR[index] >> 16u) & 0b1111u);
    }

    /**
     * Set CHCTR's RESREG field.
     */
    inline void set_CHCTR_RESREG(std::size_t index, VADC_G0_CHCTR_RESREG value)
    {
        uint32_t curr = CHCTR[index];

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        CHCTR[index] = curr;
    }

    /**
     * Get CHCTR's REFSEL bit.
     */
    VADC_G0_CHCTR_REFSEL get_CHCTR_REFSEL(std::size_t index)
    {
        return VADC_G0_CHCTR_REFSEL(CHCTR[index] & (1u << 11u));
    }

    /**
     * Set CHCTR's REFSEL bit.
     */
    inline void set_CHCTR_REFSEL()
    {
        CHCTR |= 1u << 11u;
    }

    /**
     * Clear CHCTR's REFSEL bit.
     */
    inline void clear_CHCTR_REFSEL()
    {
        CHCTR &= ~(1u << 11u);
    }

    /**
     * Toggle CHCTR's REFSEL bit.
     */
    inline void toggle_CHCTR_REFSEL()
    {
        CHCTR ^= 1u << 11u;
    }

    /**
     * Get CHCTR's SYNC bit.
     */
    VADC_G0_CHCTR_SYNC get_CHCTR_SYNC(std::size_t index)
    {
        return VADC_G0_CHCTR_SYNC(CHCTR[index] & (1u << 10u));
    }

    /**
     * Set CHCTR's SYNC bit.
     */
    inline void set_CHCTR_SYNC()
    {
        CHCTR |= 1u << 10u;
    }

    /**
     * Clear CHCTR's SYNC bit.
     */
    inline void clear_CHCTR_SYNC()
    {
        CHCTR &= ~(1u << 10u);
    }

    /**
     * Toggle CHCTR's SYNC bit.
     */
    inline void toggle_CHCTR_SYNC()
    {
        CHCTR ^= 1u << 10u;
    }

    /**
     * Get CHCTR's CHEVMODE field.
     */
    VADC_G0_CHCTR_CHEVMODE get_CHCTR_CHEVMODE(std::size_t index)
    {
        return VADC_G0_CHCTR_CHEVMODE((CHCTR[index] >> 8u) & 0b11u);
    }

    /**
     * Set CHCTR's CHEVMODE field.
     */
    inline void set_CHCTR_CHEVMODE(std::size_t index, VADC_G0_CHCTR_CHEVMODE value)
    {
        uint32_t curr = CHCTR[index];

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        CHCTR[index] = curr;
    }

    /**
     * Get CHCTR's BNDSELU field.
     */
    VADC_G0_CHCTR_BNDSELU get_CHCTR_BNDSELU(std::size_t index)
    {
        return VADC_G0_CHCTR_BNDSELU((CHCTR[index] >> 6u) & 0b11u);
    }

    /**
     * Set CHCTR's BNDSELU field.
     */
    inline void set_CHCTR_BNDSELU(std::size_t index, VADC_G0_CHCTR_BNDSELU value)
    {
        uint32_t curr = CHCTR[index];

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CHCTR[index] = curr;
    }

    /**
     * Get CHCTR's BNDSELL field.
     */
    VADC_G0_CHCTR_BNDSELL get_CHCTR_BNDSELL(std::size_t index)
    {
        return VADC_G0_CHCTR_BNDSELL((CHCTR[index] >> 4u) & 0b11u);
    }

    /**
     * Set CHCTR's BNDSELL field.
     */
    inline void set_CHCTR_BNDSELL(std::size_t index, VADC_G0_CHCTR_BNDSELL value)
    {
        uint32_t curr = CHCTR[index];

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CHCTR[index] = curr;
    }

    /**
     * Get CHCTR's ICLSEL field.
     */
    VADC_G0_CHCTR_ICLSEL get_CHCTR_ICLSEL(std::size_t index)
    {
        return VADC_G0_CHCTR_ICLSEL((CHCTR[index] >> 0u) & 0b11u);
    }

    /**
     * Set CHCTR's ICLSEL field.
     */
    inline void set_CHCTR_ICLSEL(std::size_t index, VADC_G0_CHCTR_ICLSEL value)
    {
        uint32_t curr = CHCTR[index];

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CHCTR[index] = curr;
    }

    /**
     * Get RCR's SRGEN bit.
     */
    VADC_G0_RCR_SRGEN get_RCR_SRGEN(std::size_t index)
    {
        return VADC_G0_RCR_SRGEN(RCR[index] & (1u << 31u));
    }

    /**
     * Set RCR's SRGEN bit.
     */
    inline void set_RCR_SRGEN()
    {
        RCR |= 1u << 31u;
    }

    /**
     * Clear RCR's SRGEN bit.
     */
    inline void clear_RCR_SRGEN()
    {
        RCR &= ~(1u << 31u);
    }

    /**
     * Toggle RCR's SRGEN bit.
     */
    inline void toggle_RCR_SRGEN()
    {
        RCR ^= 1u << 31u;
    }

    /**
     * Get RCR's FEN field.
     */
    VADC_G0_RCR_FEN get_RCR_FEN(std::size_t index)
    {
        return VADC_G0_RCR_FEN((RCR[index] >> 25u) & 0b11u);
    }

    /**
     * Set RCR's FEN field.
     */
    inline void set_RCR_FEN(std::size_t index, VADC_G0_RCR_FEN value)
    {
        uint32_t curr = RCR[index];

        curr &= ~(0b11u << 25u);
        curr |= (std::to_underlying(value) & 0b11u) << 25u;

        RCR[index] = curr;
    }

    /**
     * Get RCR's WFR bit.
     */
    VADC_G0_RCR_WFR get_RCR_WFR(std::size_t index)
    {
        return VADC_G0_RCR_WFR(RCR[index] & (1u << 24u));
    }

    /**
     * Set RCR's WFR bit.
     */
    inline void set_RCR_WFR()
    {
        RCR |= 1u << 24u;
    }

    /**
     * Clear RCR's WFR bit.
     */
    inline void clear_RCR_WFR()
    {
        RCR &= ~(1u << 24u);
    }

    /**
     * Toggle RCR's WFR bit.
     */
    inline void toggle_RCR_WFR()
    {
        RCR ^= 1u << 24u;
    }

    /**
     * Get RCR's DMM field.
     */
    VADC_G0_RCR_DMM get_RCR_DMM(std::size_t index)
    {
        return VADC_G0_RCR_DMM((RCR[index] >> 20u) & 0b11u);
    }

    /**
     * Set RCR's DMM field.
     */
    inline void set_RCR_DMM(std::size_t index, VADC_G0_RCR_DMM value)
    {
        uint32_t curr = RCR[index];

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        RCR[index] = curr;
    }

    /**
     * Get RCR's DRCTR field.
     */
    uint8_t get_RCR_DRCTR(std::size_t index)
    {
        return (RCR[index] >> 16u) & 0b1111u;
    }

    /**
     * Set RCR's DRCTR field.
     */
    inline void set_RCR_DRCTR(std::size_t index, uint8_t value)
    {
        uint32_t curr = RCR[index];

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        RCR[index] = curr;
    }

    /**
     * Get RES's VF bit.
     */
    VADC_G0_RES_VF get_RES_VF(std::size_t index)
    {
        return VADC_G0_RES_VF(RES[index] & (1u << 31u));
    }

    /**
     * Get RES's FCR bit.
     */
    VADC_G0_RES_FCR get_RES_FCR(std::size_t index)
    {
        return VADC_G0_RES_FCR(RES[index] & (1u << 30u));
    }

    /**
     * Get RES's CRS field.
     */
    VADC_G0_RES_CRS get_RES_CRS(std::size_t index)
    {
        return VADC_G0_RES_CRS((RES[index] >> 28u) & 0b11u);
    }

    /**
     * Get RES's EMUX field.
     */
    uint8_t get_RES_EMUX(std::size_t index)
    {
        return (RES[index] >> 25u) & 0b111u;
    }

    /**
     * Get RES's CHNR field.
     */
    uint8_t get_RES_CHNR(std::size_t index)
    {
        return (RES[index] >> 20u) & 0b11111u;
    }

    /**
     * Get RES's DRC field.
     */
    uint8_t get_RES_DRC(std::size_t index)
    {
        return (RES[index] >> 16u) & 0b1111u;
    }

    /**
     * Get RES's RESULT field.
     */
    uint16_t get_RES_RESULT(std::size_t index)
    {
        return (RES[index] >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set RES's RESULT field.
     */
    inline void set_RES_RESULT(std::size_t index, uint16_t value)
    {
        uint32_t curr = RES[index];

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        RES[index] = curr;
    }

    /**
     * Get RESD's VF bit.
     */
    VADC_G0_RESD_VF get_RESD_VF(std::size_t index)
    {
        return VADC_G0_RESD_VF(RESD[index] & (1u << 31u));
    }

    /**
     * Get RESD's FCR bit.
     */
    VADC_G0_RESD_FCR get_RESD_FCR(std::size_t index)
    {
        return VADC_G0_RESD_FCR(RESD[index] & (1u << 30u));
    }

    /**
     * Get RESD's CRS field.
     */
    VADC_G0_RESD_CRS get_RESD_CRS(std::size_t index)
    {
        return VADC_G0_RESD_CRS((RESD[index] >> 28u) & 0b11u);
    }

    /**
     * Get RESD's EMUX field.
     */
    uint8_t get_RESD_EMUX(std::size_t index)
    {
        return (RESD[index] >> 25u) & 0b111u;
    }

    /**
     * Get RESD's CHNR field.
     */
    uint8_t get_RESD_CHNR(std::size_t index)
    {
        return (RESD[index] >> 20u) & 0b11111u;
    }

    /**
     * Get RESD's DRC field.
     */
    uint8_t get_RESD_DRC(std::size_t index)
    {
        return (RESD[index] >> 16u) & 0b1111u;
    }

    /**
     * Get RESD's RESULT field.
     */
    uint16_t get_RESD_RESULT(std::size_t index)
    {
        return (RESD[index] >> 0u) & 0b1111111111111111u;
    }
};

static_assert(sizeof(vadc_g0) == vadc_g0::size);

static volatile vadc_g0 *const VADC_G0 = reinterpret_cast<vadc_g0 *>(0x40004400);

static volatile vadc_g0 *const VADC_G1 = reinterpret_cast<vadc_g0 *>(0x40004800);

static volatile vadc_g0 *const VADC_G2 = reinterpret_cast<vadc_g0 *>(0x40004C00);

static volatile vadc_g0 *const VADC_G3 = reinterpret_cast<vadc_g0 *>(0x40005000);

}; // namespace XMC4700
