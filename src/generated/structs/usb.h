/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/USB0_DCFG_DevSpd.h"
#include "../enums/USB0_DCFG_NZStsOUTHShk.h"
#include "../enums/USB0_DCFG_PerFrInt.h"
#include "../enums/USB0_DCFG_PerSchIntvl.h"
#include "../enums/USB0_DCTL_EnContOnBNA.h"
#include "../enums/USB0_DCTL_GMC.h"
#include "../enums/USB0_DCTL_GNPINNakSts.h"
#include "../enums/USB0_DCTL_GOUTNakSts.h"
#include "../enums/USB0_DCTL_IgnrFrmNum.h"
#include "../enums/USB0_DCTL_SftDiscon.h"
#include "../enums/USB0_DSTS_EnumSpd.h"
#include "../enums/USB0_GAHBCFG_AHBSingle.h"
#include "../enums/USB0_GAHBCFG_DMAEn.h"
#include "../enums/USB0_GAHBCFG_GlblIntrMsk.h"
#include "../enums/USB0_GAHBCFG_HBstLen.h"
#include "../enums/USB0_GAHBCFG_NPTxFEmpLvl.h"
#include "../enums/USB0_GAHBCFG_PTxFEmpLvl.h"
#include "../enums/USB0_GINTSTS_DEVICEMODE_CurMod.h"
#include "../enums/USB0_GINTSTS_HOSTMODE_CurMod.h"
#include "../enums/USB0_GNPTXSTS_NPTxFSpcAvail.h"
#include "../enums/USB0_GNPTXSTS_NPTxQSpcAvail.h"
#include "../enums/USB0_GNPTXSTS_NPTxQTop.h"
#include "../enums/USB0_GOTGCTL_ASesVId.h"
#include "../enums/USB0_GOTGCTL_AvalidOvEn.h"
#include "../enums/USB0_GOTGCTL_AvalidOvVal.h"
#include "../enums/USB0_GOTGCTL_BSesVld.h"
#include "../enums/USB0_GOTGCTL_BvalidOvEn.h"
#include "../enums/USB0_GOTGCTL_BvalidOvVal.h"
#include "../enums/USB0_GOTGCTL_ConlDSts.h"
#include "../enums/USB0_GOTGCTL_DbncTime.h"
#include "../enums/USB0_GOTGCTL_DevHNPEn.h"
#include "../enums/USB0_GOTGCTL_HNPReq.h"
#include "../enums/USB0_GOTGCTL_HstNegScs.h"
#include "../enums/USB0_GOTGCTL_HstSetHNPEn.h"
#include "../enums/USB0_GOTGCTL_OTGVer.h"
#include "../enums/USB0_GOTGCTL_SesReq.h"
#include "../enums/USB0_GOTGCTL_SesReqScs.h"
#include "../enums/USB0_GOTGCTL_VbvalidOvEn.h"
#include "../enums/USB0_GOTGCTL_VbvalidOvVal.h"
#include "../enums/USB0_GRSTCTL_TxFNum.h"
#include "../enums/USB0_GRXSTSP_DEVICEMODE_DPID.h"
#include "../enums/USB0_GRXSTSP_DEVICEMODE_PktSts.h"
#include "../enums/USB0_GRXSTSP_HOSTMODE_DPID.h"
#include "../enums/USB0_GRXSTSP_HOSTMODE_PktSts.h"
#include "../enums/USB0_GRXSTSR_DEVICEMODE_DPID.h"
#include "../enums/USB0_GRXSTSR_DEVICEMODE_PktSts.h"
#include "../enums/USB0_GRXSTSR_HOSTMODE_DPID.h"
#include "../enums/USB0_GRXSTSR_HOSTMODE_PktSts.h"
#include "../enums/USB0_GUSBCFG_ForceDevMode.h"
#include "../enums/USB0_GUSBCFG_ForceHstMode.h"
#include "../enums/USB0_GUSBCFG_HNPCap.h"
#include "../enums/USB0_GUSBCFG_OtgI2CSel.h"
#include "../enums/USB0_GUSBCFG_PHYSel.h"
#include "../enums/USB0_GUSBCFG_SRPCap.h"
#include "../enums/USB0_GUSBCFG_TxEndDelay.h"
#include "../enums/USB0_HCFG_FSLSPclkSel.h"
#include "../enums/USB0_HCFG_FSLSSupp.h"
#include "../enums/USB0_HCFG_FrListEn.h"
#include "../enums/USB0_HFIR_HFIRRldCtrl.h"
#include "../enums/USB0_HPRT_PrtConnSts.h"
#include "../enums/USB0_HPRT_PrtEna.h"
#include "../enums/USB0_HPRT_PrtOvrCurrAct.h"
#include "../enums/USB0_HPRT_PrtPwr.h"
#include "../enums/USB0_HPRT_PrtRes.h"
#include "../enums/USB0_HPRT_PrtRst.h"
#include "../enums/USB0_HPRT_PrtSpd.h"
#include "../enums/USB0_HPRT_PrtSusp.h"
#include "../enums/USB0_HPTXSTS_PTxFSpcAvail.h"
#include "../enums/USB0_HPTXSTS_PTxQSpcAvail.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Universal Serial Bus
 */
struct [[gnu::packed]] usb
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;         /*!< usb's identifier. */
    static constexpr std::size_t size = 3588; /*!< usb's size in bytes. */

    /* Fields. */
    union {
        uint32_t
            GINTSTS_HOSTMODE; /* (read-write) Interrupt Register [HOSTMODE] */
        uint32_t GINTSTS_DEVICEMODE; /* (read-write) Interrupt Register
                                        [DEVICEMODE] */
    };
    union {
        uint32_t GINTMSK_HOSTMODE;   /* (read-write) Interrupt Mask Register
                                        [HOSTMODE] */
        uint32_t GINTMSK_DEVICEMODE; /* (read-write) Interrupt Mask Register
                                        [DEVICEMODE] */
    };
    union {
        const uint32_t GRXSTSR_HOSTMODE =
            {}; /* (read-only) Receive Status Debug Read Register [HOSTMODE] */
        const uint32_t GRXSTSR_DEVICEMODE =
            {}; /* (read-only) Receive Status Debug Read Register [DEVICEMODE]
                 */
    };
    union {
        const uint32_t GRXSTSP_DEVICEMODE =
            {}; /* (read-only) Receive Status Read and Pop Register
                   [DEVICEMODE] */
        const uint32_t GRXSTSP_HOSTMODE =
            {}; /* (read-only) Receive Status Read and Pop Register [HOSTMODE]
                 */
    };
    union {
        uint32_t GNPTXFSIZ_HOSTMODE; /* (read-write) Non-Periodic Transmit FIFO
                                        Size Register [HOSTMODE] */
        uint32_t GNPTXFSIZ_DEVICEMODE; /* (read-write) Non-Periodic Transmit
                                          FIFO Size Register [DEVICEMODE] */
    };
    uint32_t GOTGCTL; /*!< (read-write) Control and Status Register */
    uint32_t GOTGINT; /*!< (read-write) OTG Interrupt Register */
    uint32_t GAHBCFG; /*!< (read-write) AHB Configuration Register */
    uint32_t GUSBCFG; /*!< (read-write) USB Configuration Register */
    uint32_t GRSTCTL; /*!< (read-write) Reset Register */
    uint32_t GRXFSIZ; /*!< (read-write) Receive FIFO Size Register */
    const uint32_t GNPTXSTS = {}; /*!< (read-only) Non-Periodic Transmit
                                     FIFO/Queue Status Register */
    static constexpr std::size_t reserved_padding0_length = 3;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t GUID; /*!< (read-write) USB Module Identification Register */
    static constexpr std::size_t reserved_padding1_length = 7;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t
        GDFIFOCFG; /*!< (read-write) Global DFIFO Software Config Register */
    static constexpr std::size_t reserved_padding2_length = 40;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t HPTXFSIZ; /*!< (read-write) Host Periodic Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF1; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF2; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF3; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF4; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF5; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF6; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    static constexpr std::size_t reserved_padding3_length = 185;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t HCFG;  /*!< (read-write) Host Configuration Register */
    uint32_t HFIR;  /*!< (read-write) Host Frame Interval Register */
    uint32_t HFNUM; /*!< (read-write) Host Frame Number/Frame Time Remaining
                       Register */
    const uint32_t reserved_padding4 = {};
    uint32_t HPTXSTS; /*!< (read-write) Host Periodic Transmit FIFO/ Queue
                         Status Register */
    const uint32_t HAINT =
        {};            /*!< (read-only) Host All Channels Interrupt Register */
    uint32_t HAINTMSK; /*!< (read-write) Host All Channels Interrupt Mask
                          Register */
    uint32_t
        HFLBADDR; /*!< (read-write) Host Frame List Base Address Register */
    static constexpr std::size_t reserved_padding5_length = 8;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t HPRT; /*!< (read-write) Host Port Control and Status Register */
    static constexpr std::size_t reserved_padding6_length = 239;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t DCFG; /*!< (read-write) Device Configuration Register */
    uint32_t DCTL; /*!< (read-write) Device Control Register */
    const uint32_t DSTS = {}; /*!< (read-only) Device Status Register */
    const uint32_t reserved_padding7 = {};
    uint32_t DIEPMSK; /*!< (read-write) Device IN Endpoint Common Interrupt
                         Mask Register */
    uint32_t DOEPMSK; /*!< (read-write) Device OUT Endpoint Common Interrupt
                         Mask Register */
    const uint32_t DAINT =
        {}; /*!< (read-only) Device All Endpoints Interrupt Register */
    uint32_t DAINTMSK; /*!< (read-write) Device All Endpoints Interrupt Mask
                          Register */
    static constexpr std::size_t reserved_padding8_length = 2;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t DVBUSDIS; /*!< (read-write) Device VBUS Discharge Time Register */
    uint32_t DVBUSPULSE; /*!< (read-write) Device VBUS Pulsing Time Register */
    const uint32_t reserved_padding9 = {};
    uint32_t DIEPEMPMSK; /*!< (read-write) Device IN Endpoint FIFO Empty
                            Interrupt Mask Register */
    static constexpr std::size_t reserved_padding10_length = 370;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t
        PCGCCTL; /*!< (read-write) Power and Clock Gating Control Register */

    /* Methods. */

    /**
     * Get GOTGCTL's OTGVer bit.
     */
    USB0_GOTGCTL_OTGVer get_GOTGCTL_OTGVer()
    {
        return USB0_GOTGCTL_OTGVer(GOTGCTL & (1u << 20u));
    }

    /**
     * Set GOTGCTL's OTGVer bit.
     */
    inline void set_GOTGCTL_OTGVer()
    {
        GOTGCTL |= 1u << 20u;
    }

    /**
     * Clear GOTGCTL's OTGVer bit.
     */
    inline void clear_GOTGCTL_OTGVer()
    {
        GOTGCTL &= ~(1u << 20u);
    }

    /**
     * Toggle GOTGCTL's OTGVer bit.
     */
    inline void toggle_GOTGCTL_OTGVer()
    {
        GOTGCTL ^= 1u << 20u;
    }

    /**
     * Get GOTGCTL's BSesVld bit.
     */
    USB0_GOTGCTL_BSesVld get_GOTGCTL_BSesVld()
    {
        return USB0_GOTGCTL_BSesVld(GOTGCTL & (1u << 19u));
    }

    /**
     * Get GOTGCTL's ASesVId bit.
     */
    USB0_GOTGCTL_ASesVId get_GOTGCTL_ASesVId()
    {
        return USB0_GOTGCTL_ASesVId(GOTGCTL & (1u << 18u));
    }

    /**
     * Get GOTGCTL's DbncTime bit.
     */
    USB0_GOTGCTL_DbncTime get_GOTGCTL_DbncTime()
    {
        return USB0_GOTGCTL_DbncTime(GOTGCTL & (1u << 17u));
    }

    /**
     * Get GOTGCTL's ConlDSts bit.
     */
    USB0_GOTGCTL_ConlDSts get_GOTGCTL_ConlDSts()
    {
        return USB0_GOTGCTL_ConlDSts(GOTGCTL & (1u << 16u));
    }

    /**
     * Get GOTGCTL's DevHNPEn bit.
     */
    USB0_GOTGCTL_DevHNPEn get_GOTGCTL_DevHNPEn()
    {
        return USB0_GOTGCTL_DevHNPEn(GOTGCTL & (1u << 11u));
    }

    /**
     * Set GOTGCTL's DevHNPEn bit.
     */
    inline void set_GOTGCTL_DevHNPEn()
    {
        GOTGCTL |= 1u << 11u;
    }

    /**
     * Clear GOTGCTL's DevHNPEn bit.
     */
    inline void clear_GOTGCTL_DevHNPEn()
    {
        GOTGCTL &= ~(1u << 11u);
    }

    /**
     * Toggle GOTGCTL's DevHNPEn bit.
     */
    inline void toggle_GOTGCTL_DevHNPEn()
    {
        GOTGCTL ^= 1u << 11u;
    }

    /**
     * Get GOTGCTL's HstSetHNPEn bit.
     */
    USB0_GOTGCTL_HstSetHNPEn get_GOTGCTL_HstSetHNPEn()
    {
        return USB0_GOTGCTL_HstSetHNPEn(GOTGCTL & (1u << 10u));
    }

    /**
     * Set GOTGCTL's HstSetHNPEn bit.
     */
    inline void set_GOTGCTL_HstSetHNPEn()
    {
        GOTGCTL |= 1u << 10u;
    }

    /**
     * Clear GOTGCTL's HstSetHNPEn bit.
     */
    inline void clear_GOTGCTL_HstSetHNPEn()
    {
        GOTGCTL &= ~(1u << 10u);
    }

    /**
     * Toggle GOTGCTL's HstSetHNPEn bit.
     */
    inline void toggle_GOTGCTL_HstSetHNPEn()
    {
        GOTGCTL ^= 1u << 10u;
    }

    /**
     * Get GOTGCTL's HNPReq bit.
     */
    USB0_GOTGCTL_HNPReq get_GOTGCTL_HNPReq()
    {
        return USB0_GOTGCTL_HNPReq(GOTGCTL & (1u << 9u));
    }

    /**
     * Set GOTGCTL's HNPReq bit.
     */
    inline void set_GOTGCTL_HNPReq()
    {
        GOTGCTL |= 1u << 9u;
    }

    /**
     * Clear GOTGCTL's HNPReq bit.
     */
    inline void clear_GOTGCTL_HNPReq()
    {
        GOTGCTL &= ~(1u << 9u);
    }

    /**
     * Toggle GOTGCTL's HNPReq bit.
     */
    inline void toggle_GOTGCTL_HNPReq()
    {
        GOTGCTL ^= 1u << 9u;
    }

    /**
     * Get GOTGCTL's HstNegScs bit.
     */
    USB0_GOTGCTL_HstNegScs get_GOTGCTL_HstNegScs()
    {
        return USB0_GOTGCTL_HstNegScs(GOTGCTL & (1u << 8u));
    }

    /**
     * Get GOTGCTL's BvalidOvVal bit.
     */
    USB0_GOTGCTL_BvalidOvVal get_GOTGCTL_BvalidOvVal()
    {
        return USB0_GOTGCTL_BvalidOvVal(GOTGCTL & (1u << 7u));
    }

    /**
     * Set GOTGCTL's BvalidOvVal bit.
     */
    inline void set_GOTGCTL_BvalidOvVal()
    {
        GOTGCTL |= 1u << 7u;
    }

    /**
     * Clear GOTGCTL's BvalidOvVal bit.
     */
    inline void clear_GOTGCTL_BvalidOvVal()
    {
        GOTGCTL &= ~(1u << 7u);
    }

    /**
     * Toggle GOTGCTL's BvalidOvVal bit.
     */
    inline void toggle_GOTGCTL_BvalidOvVal()
    {
        GOTGCTL ^= 1u << 7u;
    }

    /**
     * Get GOTGCTL's BvalidOvEn bit.
     */
    USB0_GOTGCTL_BvalidOvEn get_GOTGCTL_BvalidOvEn()
    {
        return USB0_GOTGCTL_BvalidOvEn(GOTGCTL & (1u << 6u));
    }

    /**
     * Set GOTGCTL's BvalidOvEn bit.
     */
    inline void set_GOTGCTL_BvalidOvEn()
    {
        GOTGCTL |= 1u << 6u;
    }

    /**
     * Clear GOTGCTL's BvalidOvEn bit.
     */
    inline void clear_GOTGCTL_BvalidOvEn()
    {
        GOTGCTL &= ~(1u << 6u);
    }

    /**
     * Toggle GOTGCTL's BvalidOvEn bit.
     */
    inline void toggle_GOTGCTL_BvalidOvEn()
    {
        GOTGCTL ^= 1u << 6u;
    }

    /**
     * Get GOTGCTL's AvalidOvVal bit.
     */
    USB0_GOTGCTL_AvalidOvVal get_GOTGCTL_AvalidOvVal()
    {
        return USB0_GOTGCTL_AvalidOvVal(GOTGCTL & (1u << 5u));
    }

    /**
     * Set GOTGCTL's AvalidOvVal bit.
     */
    inline void set_GOTGCTL_AvalidOvVal()
    {
        GOTGCTL |= 1u << 5u;
    }

    /**
     * Clear GOTGCTL's AvalidOvVal bit.
     */
    inline void clear_GOTGCTL_AvalidOvVal()
    {
        GOTGCTL &= ~(1u << 5u);
    }

    /**
     * Toggle GOTGCTL's AvalidOvVal bit.
     */
    inline void toggle_GOTGCTL_AvalidOvVal()
    {
        GOTGCTL ^= 1u << 5u;
    }

    /**
     * Get GOTGCTL's AvalidOvEn bit.
     */
    USB0_GOTGCTL_AvalidOvEn get_GOTGCTL_AvalidOvEn()
    {
        return USB0_GOTGCTL_AvalidOvEn(GOTGCTL & (1u << 4u));
    }

    /**
     * Set GOTGCTL's AvalidOvEn bit.
     */
    inline void set_GOTGCTL_AvalidOvEn()
    {
        GOTGCTL |= 1u << 4u;
    }

    /**
     * Clear GOTGCTL's AvalidOvEn bit.
     */
    inline void clear_GOTGCTL_AvalidOvEn()
    {
        GOTGCTL &= ~(1u << 4u);
    }

    /**
     * Toggle GOTGCTL's AvalidOvEn bit.
     */
    inline void toggle_GOTGCTL_AvalidOvEn()
    {
        GOTGCTL ^= 1u << 4u;
    }

    /**
     * Get GOTGCTL's VbvalidOvVal bit.
     */
    USB0_GOTGCTL_VbvalidOvVal get_GOTGCTL_VbvalidOvVal()
    {
        return USB0_GOTGCTL_VbvalidOvVal(GOTGCTL & (1u << 3u));
    }

    /**
     * Set GOTGCTL's VbvalidOvVal bit.
     */
    inline void set_GOTGCTL_VbvalidOvVal()
    {
        GOTGCTL |= 1u << 3u;
    }

    /**
     * Clear GOTGCTL's VbvalidOvVal bit.
     */
    inline void clear_GOTGCTL_VbvalidOvVal()
    {
        GOTGCTL &= ~(1u << 3u);
    }

    /**
     * Toggle GOTGCTL's VbvalidOvVal bit.
     */
    inline void toggle_GOTGCTL_VbvalidOvVal()
    {
        GOTGCTL ^= 1u << 3u;
    }

    /**
     * Get GOTGCTL's VbvalidOvEn bit.
     */
    USB0_GOTGCTL_VbvalidOvEn get_GOTGCTL_VbvalidOvEn()
    {
        return USB0_GOTGCTL_VbvalidOvEn(GOTGCTL & (1u << 2u));
    }

    /**
     * Set GOTGCTL's VbvalidOvEn bit.
     */
    inline void set_GOTGCTL_VbvalidOvEn()
    {
        GOTGCTL |= 1u << 2u;
    }

    /**
     * Clear GOTGCTL's VbvalidOvEn bit.
     */
    inline void clear_GOTGCTL_VbvalidOvEn()
    {
        GOTGCTL &= ~(1u << 2u);
    }

    /**
     * Toggle GOTGCTL's VbvalidOvEn bit.
     */
    inline void toggle_GOTGCTL_VbvalidOvEn()
    {
        GOTGCTL ^= 1u << 2u;
    }

    /**
     * Get GOTGCTL's SesReq bit.
     */
    USB0_GOTGCTL_SesReq get_GOTGCTL_SesReq()
    {
        return USB0_GOTGCTL_SesReq(GOTGCTL & (1u << 1u));
    }

    /**
     * Set GOTGCTL's SesReq bit.
     */
    inline void set_GOTGCTL_SesReq()
    {
        GOTGCTL |= 1u << 1u;
    }

    /**
     * Clear GOTGCTL's SesReq bit.
     */
    inline void clear_GOTGCTL_SesReq()
    {
        GOTGCTL &= ~(1u << 1u);
    }

    /**
     * Toggle GOTGCTL's SesReq bit.
     */
    inline void toggle_GOTGCTL_SesReq()
    {
        GOTGCTL ^= 1u << 1u;
    }

    /**
     * Get GOTGCTL's SesReqScs bit.
     */
    USB0_GOTGCTL_SesReqScs get_GOTGCTL_SesReqScs()
    {
        return USB0_GOTGCTL_SesReqScs(GOTGCTL & (1u << 0u));
    }

    /**
     * Get GOTGINT's DbnceDone bit.
     */
    bool get_GOTGINT_DbnceDone()
    {
        return GOTGINT & (1u << 19u);
    }

    /**
     * Set GOTGINT's DbnceDone bit.
     */
    inline void set_GOTGINT_DbnceDone()
    {
        GOTGINT |= 1u << 19u;
    }

    /**
     * Clear GOTGINT's DbnceDone bit.
     */
    inline void clear_GOTGINT_DbnceDone()
    {
        GOTGINT &= ~(1u << 19u);
    }

    /**
     * Toggle GOTGINT's DbnceDone bit.
     */
    inline void toggle_GOTGINT_DbnceDone()
    {
        GOTGINT ^= 1u << 19u;
    }

    /**
     * Get GOTGINT's ADevTOUTChg bit.
     */
    bool get_GOTGINT_ADevTOUTChg()
    {
        return GOTGINT & (1u << 18u);
    }

    /**
     * Set GOTGINT's ADevTOUTChg bit.
     */
    inline void set_GOTGINT_ADevTOUTChg()
    {
        GOTGINT |= 1u << 18u;
    }

    /**
     * Clear GOTGINT's ADevTOUTChg bit.
     */
    inline void clear_GOTGINT_ADevTOUTChg()
    {
        GOTGINT &= ~(1u << 18u);
    }

    /**
     * Toggle GOTGINT's ADevTOUTChg bit.
     */
    inline void toggle_GOTGINT_ADevTOUTChg()
    {
        GOTGINT ^= 1u << 18u;
    }

    /**
     * Get GOTGINT's HstNegDet bit.
     */
    bool get_GOTGINT_HstNegDet()
    {
        return GOTGINT & (1u << 17u);
    }

    /**
     * Set GOTGINT's HstNegDet bit.
     */
    inline void set_GOTGINT_HstNegDet()
    {
        GOTGINT |= 1u << 17u;
    }

    /**
     * Clear GOTGINT's HstNegDet bit.
     */
    inline void clear_GOTGINT_HstNegDet()
    {
        GOTGINT &= ~(1u << 17u);
    }

    /**
     * Toggle GOTGINT's HstNegDet bit.
     */
    inline void toggle_GOTGINT_HstNegDet()
    {
        GOTGINT ^= 1u << 17u;
    }

    /**
     * Get GOTGINT's HstNegSucStsChng bit.
     */
    bool get_GOTGINT_HstNegSucStsChng()
    {
        return GOTGINT & (1u << 9u);
    }

    /**
     * Set GOTGINT's HstNegSucStsChng bit.
     */
    inline void set_GOTGINT_HstNegSucStsChng()
    {
        GOTGINT |= 1u << 9u;
    }

    /**
     * Clear GOTGINT's HstNegSucStsChng bit.
     */
    inline void clear_GOTGINT_HstNegSucStsChng()
    {
        GOTGINT &= ~(1u << 9u);
    }

    /**
     * Toggle GOTGINT's HstNegSucStsChng bit.
     */
    inline void toggle_GOTGINT_HstNegSucStsChng()
    {
        GOTGINT ^= 1u << 9u;
    }

    /**
     * Get GOTGINT's SesReqSucStsChng bit.
     */
    bool get_GOTGINT_SesReqSucStsChng()
    {
        return GOTGINT & (1u << 8u);
    }

    /**
     * Set GOTGINT's SesReqSucStsChng bit.
     */
    inline void set_GOTGINT_SesReqSucStsChng()
    {
        GOTGINT |= 1u << 8u;
    }

    /**
     * Clear GOTGINT's SesReqSucStsChng bit.
     */
    inline void clear_GOTGINT_SesReqSucStsChng()
    {
        GOTGINT &= ~(1u << 8u);
    }

    /**
     * Toggle GOTGINT's SesReqSucStsChng bit.
     */
    inline void toggle_GOTGINT_SesReqSucStsChng()
    {
        GOTGINT ^= 1u << 8u;
    }

    /**
     * Get GOTGINT's SesEndDet bit.
     */
    bool get_GOTGINT_SesEndDet()
    {
        return GOTGINT & (1u << 2u);
    }

    /**
     * Set GOTGINT's SesEndDet bit.
     */
    inline void set_GOTGINT_SesEndDet()
    {
        GOTGINT |= 1u << 2u;
    }

    /**
     * Clear GOTGINT's SesEndDet bit.
     */
    inline void clear_GOTGINT_SesEndDet()
    {
        GOTGINT &= ~(1u << 2u);
    }

    /**
     * Toggle GOTGINT's SesEndDet bit.
     */
    inline void toggle_GOTGINT_SesEndDet()
    {
        GOTGINT ^= 1u << 2u;
    }

    /**
     * Get GAHBCFG's AHBSingle bit.
     */
    USB0_GAHBCFG_AHBSingle get_GAHBCFG_AHBSingle()
    {
        return USB0_GAHBCFG_AHBSingle(GAHBCFG & (1u << 23u));
    }

    /**
     * Set GAHBCFG's AHBSingle bit.
     */
    inline void set_GAHBCFG_AHBSingle()
    {
        GAHBCFG |= 1u << 23u;
    }

    /**
     * Clear GAHBCFG's AHBSingle bit.
     */
    inline void clear_GAHBCFG_AHBSingle()
    {
        GAHBCFG &= ~(1u << 23u);
    }

    /**
     * Toggle GAHBCFG's AHBSingle bit.
     */
    inline void toggle_GAHBCFG_AHBSingle()
    {
        GAHBCFG ^= 1u << 23u;
    }

    /**
     * Get GAHBCFG's PTxFEmpLvl bit.
     */
    USB0_GAHBCFG_PTxFEmpLvl get_GAHBCFG_PTxFEmpLvl()
    {
        return USB0_GAHBCFG_PTxFEmpLvl(GAHBCFG & (1u << 8u));
    }

    /**
     * Set GAHBCFG's PTxFEmpLvl bit.
     */
    inline void set_GAHBCFG_PTxFEmpLvl()
    {
        GAHBCFG |= 1u << 8u;
    }

    /**
     * Clear GAHBCFG's PTxFEmpLvl bit.
     */
    inline void clear_GAHBCFG_PTxFEmpLvl()
    {
        GAHBCFG &= ~(1u << 8u);
    }

    /**
     * Toggle GAHBCFG's PTxFEmpLvl bit.
     */
    inline void toggle_GAHBCFG_PTxFEmpLvl()
    {
        GAHBCFG ^= 1u << 8u;
    }

    /**
     * Get GAHBCFG's NPTxFEmpLvl bit.
     */
    USB0_GAHBCFG_NPTxFEmpLvl get_GAHBCFG_NPTxFEmpLvl()
    {
        return USB0_GAHBCFG_NPTxFEmpLvl(GAHBCFG & (1u << 7u));
    }

    /**
     * Set GAHBCFG's NPTxFEmpLvl bit.
     */
    inline void set_GAHBCFG_NPTxFEmpLvl()
    {
        GAHBCFG |= 1u << 7u;
    }

    /**
     * Clear GAHBCFG's NPTxFEmpLvl bit.
     */
    inline void clear_GAHBCFG_NPTxFEmpLvl()
    {
        GAHBCFG &= ~(1u << 7u);
    }

    /**
     * Toggle GAHBCFG's NPTxFEmpLvl bit.
     */
    inline void toggle_GAHBCFG_NPTxFEmpLvl()
    {
        GAHBCFG ^= 1u << 7u;
    }

    /**
     * Get GAHBCFG's DMAEn bit.
     */
    USB0_GAHBCFG_DMAEn get_GAHBCFG_DMAEn()
    {
        return USB0_GAHBCFG_DMAEn(GAHBCFG & (1u << 5u));
    }

    /**
     * Set GAHBCFG's DMAEn bit.
     */
    inline void set_GAHBCFG_DMAEn()
    {
        GAHBCFG |= 1u << 5u;
    }

    /**
     * Clear GAHBCFG's DMAEn bit.
     */
    inline void clear_GAHBCFG_DMAEn()
    {
        GAHBCFG &= ~(1u << 5u);
    }

    /**
     * Toggle GAHBCFG's DMAEn bit.
     */
    inline void toggle_GAHBCFG_DMAEn()
    {
        GAHBCFG ^= 1u << 5u;
    }

    /**
     * Get GAHBCFG's HBstLen field.
     */
    USB0_GAHBCFG_HBstLen get_GAHBCFG_HBstLen()
    {
        return USB0_GAHBCFG_HBstLen((GAHBCFG >> 1u) & 0b1111u);
    }

    /**
     * Set GAHBCFG's HBstLen field.
     */
    inline void set_GAHBCFG_HBstLen(USB0_GAHBCFG_HBstLen value)
    {
        uint32_t curr = GAHBCFG;

        curr &= ~(0b1111u << 1u);
        curr |= (std::to_underlying(value) & 0b1111u) << 1u;

        GAHBCFG = curr;
    }

    /**
     * Get GAHBCFG's GlblIntrMsk bit.
     */
    USB0_GAHBCFG_GlblIntrMsk get_GAHBCFG_GlblIntrMsk()
    {
        return USB0_GAHBCFG_GlblIntrMsk(GAHBCFG & (1u << 0u));
    }

    /**
     * Set GAHBCFG's GlblIntrMsk bit.
     */
    inline void set_GAHBCFG_GlblIntrMsk()
    {
        GAHBCFG |= 1u << 0u;
    }

    /**
     * Clear GAHBCFG's GlblIntrMsk bit.
     */
    inline void clear_GAHBCFG_GlblIntrMsk()
    {
        GAHBCFG &= ~(1u << 0u);
    }

    /**
     * Toggle GAHBCFG's GlblIntrMsk bit.
     */
    inline void toggle_GAHBCFG_GlblIntrMsk()
    {
        GAHBCFG ^= 1u << 0u;
    }

    /**
     * Get GUSBCFG's CTP bit.
     */
    bool get_GUSBCFG_CTP()
    {
        return GUSBCFG & (1u << 31u);
    }

    /**
     * Set GUSBCFG's CTP bit.
     */
    inline void set_GUSBCFG_CTP()
    {
        GUSBCFG |= 1u << 31u;
    }

    /**
     * Clear GUSBCFG's CTP bit.
     */
    inline void clear_GUSBCFG_CTP()
    {
        GUSBCFG &= ~(1u << 31u);
    }

    /**
     * Toggle GUSBCFG's CTP bit.
     */
    inline void toggle_GUSBCFG_CTP()
    {
        GUSBCFG ^= 1u << 31u;
    }

    /**
     * Get GUSBCFG's ForceDevMode bit.
     */
    USB0_GUSBCFG_ForceDevMode get_GUSBCFG_ForceDevMode()
    {
        return USB0_GUSBCFG_ForceDevMode(GUSBCFG & (1u << 30u));
    }

    /**
     * Set GUSBCFG's ForceDevMode bit.
     */
    inline void set_GUSBCFG_ForceDevMode()
    {
        GUSBCFG |= 1u << 30u;
    }

    /**
     * Clear GUSBCFG's ForceDevMode bit.
     */
    inline void clear_GUSBCFG_ForceDevMode()
    {
        GUSBCFG &= ~(1u << 30u);
    }

    /**
     * Toggle GUSBCFG's ForceDevMode bit.
     */
    inline void toggle_GUSBCFG_ForceDevMode()
    {
        GUSBCFG ^= 1u << 30u;
    }

    /**
     * Get GUSBCFG's ForceHstMode bit.
     */
    USB0_GUSBCFG_ForceHstMode get_GUSBCFG_ForceHstMode()
    {
        return USB0_GUSBCFG_ForceHstMode(GUSBCFG & (1u << 29u));
    }

    /**
     * Set GUSBCFG's ForceHstMode bit.
     */
    inline void set_GUSBCFG_ForceHstMode()
    {
        GUSBCFG |= 1u << 29u;
    }

    /**
     * Clear GUSBCFG's ForceHstMode bit.
     */
    inline void clear_GUSBCFG_ForceHstMode()
    {
        GUSBCFG &= ~(1u << 29u);
    }

    /**
     * Toggle GUSBCFG's ForceHstMode bit.
     */
    inline void toggle_GUSBCFG_ForceHstMode()
    {
        GUSBCFG ^= 1u << 29u;
    }

    /**
     * Get GUSBCFG's TxEndDelay bit.
     */
    USB0_GUSBCFG_TxEndDelay get_GUSBCFG_TxEndDelay()
    {
        return USB0_GUSBCFG_TxEndDelay(GUSBCFG & (1u << 28u));
    }

    /**
     * Set GUSBCFG's TxEndDelay bit.
     */
    inline void set_GUSBCFG_TxEndDelay()
    {
        GUSBCFG |= 1u << 28u;
    }

    /**
     * Clear GUSBCFG's TxEndDelay bit.
     */
    inline void clear_GUSBCFG_TxEndDelay()
    {
        GUSBCFG &= ~(1u << 28u);
    }

    /**
     * Toggle GUSBCFG's TxEndDelay bit.
     */
    inline void toggle_GUSBCFG_TxEndDelay()
    {
        GUSBCFG ^= 1u << 28u;
    }

    /**
     * Get GUSBCFG's OtgI2CSel bit.
     */
    USB0_GUSBCFG_OtgI2CSel get_GUSBCFG_OtgI2CSel()
    {
        return USB0_GUSBCFG_OtgI2CSel(GUSBCFG & (1u << 16u));
    }

    /**
     * Set GUSBCFG's OtgI2CSel bit.
     */
    inline void set_GUSBCFG_OtgI2CSel()
    {
        GUSBCFG |= 1u << 16u;
    }

    /**
     * Clear GUSBCFG's OtgI2CSel bit.
     */
    inline void clear_GUSBCFG_OtgI2CSel()
    {
        GUSBCFG &= ~(1u << 16u);
    }

    /**
     * Toggle GUSBCFG's OtgI2CSel bit.
     */
    inline void toggle_GUSBCFG_OtgI2CSel()
    {
        GUSBCFG ^= 1u << 16u;
    }

    /**
     * Get GUSBCFG's USBTrdTim field.
     */
    uint8_t get_GUSBCFG_USBTrdTim()
    {
        return (GUSBCFG >> 10u) & 0b1111u;
    }

    /**
     * Set GUSBCFG's USBTrdTim field.
     */
    inline void set_GUSBCFG_USBTrdTim(uint8_t value)
    {
        uint32_t curr = GUSBCFG;

        curr &= ~(0b1111u << 10u);
        curr |= (value & 0b1111u) << 10u;

        GUSBCFG = curr;
    }

    /**
     * Get GUSBCFG's HNPCap bit.
     */
    USB0_GUSBCFG_HNPCap get_GUSBCFG_HNPCap()
    {
        return USB0_GUSBCFG_HNPCap(GUSBCFG & (1u << 9u));
    }

    /**
     * Set GUSBCFG's HNPCap bit.
     */
    inline void set_GUSBCFG_HNPCap()
    {
        GUSBCFG |= 1u << 9u;
    }

    /**
     * Clear GUSBCFG's HNPCap bit.
     */
    inline void clear_GUSBCFG_HNPCap()
    {
        GUSBCFG &= ~(1u << 9u);
    }

    /**
     * Toggle GUSBCFG's HNPCap bit.
     */
    inline void toggle_GUSBCFG_HNPCap()
    {
        GUSBCFG ^= 1u << 9u;
    }

    /**
     * Get GUSBCFG's SRPCap bit.
     */
    USB0_GUSBCFG_SRPCap get_GUSBCFG_SRPCap()
    {
        return USB0_GUSBCFG_SRPCap(GUSBCFG & (1u << 8u));
    }

    /**
     * Set GUSBCFG's SRPCap bit.
     */
    inline void set_GUSBCFG_SRPCap()
    {
        GUSBCFG |= 1u << 8u;
    }

    /**
     * Clear GUSBCFG's SRPCap bit.
     */
    inline void clear_GUSBCFG_SRPCap()
    {
        GUSBCFG &= ~(1u << 8u);
    }

    /**
     * Toggle GUSBCFG's SRPCap bit.
     */
    inline void toggle_GUSBCFG_SRPCap()
    {
        GUSBCFG ^= 1u << 8u;
    }

    /**
     * Get GUSBCFG's PHYSel bit.
     */
    USB0_GUSBCFG_PHYSel get_GUSBCFG_PHYSel()
    {
        return USB0_GUSBCFG_PHYSel(GUSBCFG & (1u << 6u));
    }

    /**
     * Get GUSBCFG's TOutCal field.
     */
    uint8_t get_GUSBCFG_TOutCal()
    {
        return (GUSBCFG >> 0u) & 0b111u;
    }

    /**
     * Set GUSBCFG's TOutCal field.
     */
    inline void set_GUSBCFG_TOutCal(uint8_t value)
    {
        uint32_t curr = GUSBCFG;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        GUSBCFG = curr;
    }

    /**
     * Get GRSTCTL's AHBIdle bit.
     */
    bool get_GRSTCTL_AHBIdle()
    {
        return GRSTCTL & (1u << 31u);
    }

    /**
     * Get GRSTCTL's DMAReq bit.
     */
    bool get_GRSTCTL_DMAReq()
    {
        return GRSTCTL & (1u << 30u);
    }

    /**
     * Get GRSTCTL's TxFNum field.
     */
    USB0_GRSTCTL_TxFNum get_GRSTCTL_TxFNum()
    {
        return USB0_GRSTCTL_TxFNum((GRSTCTL >> 6u) & 0b11111u);
    }

    /**
     * Set GRSTCTL's TxFNum field.
     */
    inline void set_GRSTCTL_TxFNum(USB0_GRSTCTL_TxFNum value)
    {
        uint32_t curr = GRSTCTL;

        curr &= ~(0b11111u << 6u);
        curr |= (std::to_underlying(value) & 0b11111u) << 6u;

        GRSTCTL = curr;
    }

    /**
     * Get GRSTCTL's TxFFlsh bit.
     */
    bool get_GRSTCTL_TxFFlsh()
    {
        return GRSTCTL & (1u << 5u);
    }

    /**
     * Set GRSTCTL's TxFFlsh bit.
     */
    inline void set_GRSTCTL_TxFFlsh()
    {
        GRSTCTL |= 1u << 5u;
    }

    /**
     * Clear GRSTCTL's TxFFlsh bit.
     */
    inline void clear_GRSTCTL_TxFFlsh()
    {
        GRSTCTL &= ~(1u << 5u);
    }

    /**
     * Toggle GRSTCTL's TxFFlsh bit.
     */
    inline void toggle_GRSTCTL_TxFFlsh()
    {
        GRSTCTL ^= 1u << 5u;
    }

    /**
     * Get GRSTCTL's RxFFlsh bit.
     */
    bool get_GRSTCTL_RxFFlsh()
    {
        return GRSTCTL & (1u << 4u);
    }

    /**
     * Set GRSTCTL's RxFFlsh bit.
     */
    inline void set_GRSTCTL_RxFFlsh()
    {
        GRSTCTL |= 1u << 4u;
    }

    /**
     * Clear GRSTCTL's RxFFlsh bit.
     */
    inline void clear_GRSTCTL_RxFFlsh()
    {
        GRSTCTL &= ~(1u << 4u);
    }

    /**
     * Toggle GRSTCTL's RxFFlsh bit.
     */
    inline void toggle_GRSTCTL_RxFFlsh()
    {
        GRSTCTL ^= 1u << 4u;
    }

    /**
     * Get GRSTCTL's FrmCntrRst bit.
     */
    bool get_GRSTCTL_FrmCntrRst()
    {
        return GRSTCTL & (1u << 2u);
    }

    /**
     * Set GRSTCTL's FrmCntrRst bit.
     */
    inline void set_GRSTCTL_FrmCntrRst()
    {
        GRSTCTL |= 1u << 2u;
    }

    /**
     * Clear GRSTCTL's FrmCntrRst bit.
     */
    inline void clear_GRSTCTL_FrmCntrRst()
    {
        GRSTCTL &= ~(1u << 2u);
    }

    /**
     * Toggle GRSTCTL's FrmCntrRst bit.
     */
    inline void toggle_GRSTCTL_FrmCntrRst()
    {
        GRSTCTL ^= 1u << 2u;
    }

    /**
     * Get GRSTCTL's CSftRst bit.
     */
    bool get_GRSTCTL_CSftRst()
    {
        return GRSTCTL & (1u << 0u);
    }

    /**
     * Set GRSTCTL's CSftRst bit.
     */
    inline void set_GRSTCTL_CSftRst()
    {
        GRSTCTL |= 1u << 0u;
    }

    /**
     * Clear GRSTCTL's CSftRst bit.
     */
    inline void clear_GRSTCTL_CSftRst()
    {
        GRSTCTL &= ~(1u << 0u);
    }

    /**
     * Toggle GRSTCTL's CSftRst bit.
     */
    inline void toggle_GRSTCTL_CSftRst()
    {
        GRSTCTL ^= 1u << 0u;
    }

    /**
     * Get GINTSTS_HOSTMODE's WkUpInt bit.
     */
    bool get_GINTSTS_HOSTMODE_WkUpInt()
    {
        return GINTSTS_HOSTMODE & (1u << 31u);
    }

    /**
     * Set GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void set_GINTSTS_HOSTMODE_WkUpInt()
    {
        GINTSTS_HOSTMODE |= 1u << 31u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void clear_GINTSTS_HOSTMODE_WkUpInt()
    {
        GINTSTS_HOSTMODE &= ~(1u << 31u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_WkUpInt()
    {
        GINTSTS_HOSTMODE ^= 1u << 31u;
    }

    /**
     * Get GINTSTS_HOSTMODE's SessReqInt bit.
     */
    bool get_GINTSTS_HOSTMODE_SessReqInt()
    {
        return GINTSTS_HOSTMODE & (1u << 30u);
    }

    /**
     * Set GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void set_GINTSTS_HOSTMODE_SessReqInt()
    {
        GINTSTS_HOSTMODE |= 1u << 30u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void clear_GINTSTS_HOSTMODE_SessReqInt()
    {
        GINTSTS_HOSTMODE &= ~(1u << 30u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_SessReqInt()
    {
        GINTSTS_HOSTMODE ^= 1u << 30u;
    }

    /**
     * Get GINTSTS_HOSTMODE's DisconnInt bit.
     */
    bool get_GINTSTS_HOSTMODE_DisconnInt()
    {
        return GINTSTS_HOSTMODE & (1u << 29u);
    }

    /**
     * Set GINTSTS_HOSTMODE's DisconnInt bit.
     */
    inline void set_GINTSTS_HOSTMODE_DisconnInt()
    {
        GINTSTS_HOSTMODE |= 1u << 29u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's DisconnInt bit.
     */
    inline void clear_GINTSTS_HOSTMODE_DisconnInt()
    {
        GINTSTS_HOSTMODE &= ~(1u << 29u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's DisconnInt bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_DisconnInt()
    {
        GINTSTS_HOSTMODE ^= 1u << 29u;
    }

    /**
     * Get GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    bool get_GINTSTS_HOSTMODE_ConIDStsChng()
    {
        return GINTSTS_HOSTMODE & (1u << 28u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void set_GINTSTS_HOSTMODE_ConIDStsChng()
    {
        GINTSTS_HOSTMODE |= 1u << 28u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void clear_GINTSTS_HOSTMODE_ConIDStsChng()
    {
        GINTSTS_HOSTMODE &= ~(1u << 28u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_ConIDStsChng()
    {
        GINTSTS_HOSTMODE ^= 1u << 28u;
    }

    /**
     * Get GINTSTS_HOSTMODE's PTxFEmp bit.
     */
    bool get_GINTSTS_HOSTMODE_PTxFEmp()
    {
        return GINTSTS_HOSTMODE & (1u << 26u);
    }

    /**
     * Get GINTSTS_HOSTMODE's HChInt bit.
     */
    bool get_GINTSTS_HOSTMODE_HChInt()
    {
        return GINTSTS_HOSTMODE & (1u << 25u);
    }

    /**
     * Get GINTSTS_HOSTMODE's PrtInt bit.
     */
    bool get_GINTSTS_HOSTMODE_PrtInt()
    {
        return GINTSTS_HOSTMODE & (1u << 24u);
    }

    /**
     * Get GINTSTS_HOSTMODE's incomplP bit.
     */
    bool get_GINTSTS_HOSTMODE_incomplP()
    {
        return GINTSTS_HOSTMODE & (1u << 21u);
    }

    /**
     * Set GINTSTS_HOSTMODE's incomplP bit.
     */
    inline void set_GINTSTS_HOSTMODE_incomplP()
    {
        GINTSTS_HOSTMODE |= 1u << 21u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's incomplP bit.
     */
    inline void clear_GINTSTS_HOSTMODE_incomplP()
    {
        GINTSTS_HOSTMODE &= ~(1u << 21u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's incomplP bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_incomplP()
    {
        GINTSTS_HOSTMODE ^= 1u << 21u;
    }

    /**
     * Get GINTSTS_HOSTMODE's RxFLvl bit.
     */
    bool get_GINTSTS_HOSTMODE_RxFLvl()
    {
        return GINTSTS_HOSTMODE & (1u << 4u);
    }

    /**
     * Get GINTSTS_HOSTMODE's Sof bit.
     */
    bool get_GINTSTS_HOSTMODE_Sof()
    {
        return GINTSTS_HOSTMODE & (1u << 3u);
    }

    /**
     * Set GINTSTS_HOSTMODE's Sof bit.
     */
    inline void set_GINTSTS_HOSTMODE_Sof()
    {
        GINTSTS_HOSTMODE |= 1u << 3u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's Sof bit.
     */
    inline void clear_GINTSTS_HOSTMODE_Sof()
    {
        GINTSTS_HOSTMODE &= ~(1u << 3u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's Sof bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_Sof()
    {
        GINTSTS_HOSTMODE ^= 1u << 3u;
    }

    /**
     * Get GINTSTS_HOSTMODE's OTGInt bit.
     */
    bool get_GINTSTS_HOSTMODE_OTGInt()
    {
        return GINTSTS_HOSTMODE & (1u << 2u);
    }

    /**
     * Get GINTSTS_HOSTMODE's ModeMis bit.
     */
    bool get_GINTSTS_HOSTMODE_ModeMis()
    {
        return GINTSTS_HOSTMODE & (1u << 1u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void set_GINTSTS_HOSTMODE_ModeMis()
    {
        GINTSTS_HOSTMODE |= 1u << 1u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void clear_GINTSTS_HOSTMODE_ModeMis()
    {
        GINTSTS_HOSTMODE &= ~(1u << 1u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_ModeMis()
    {
        GINTSTS_HOSTMODE ^= 1u << 1u;
    }

    /**
     * Get GINTSTS_HOSTMODE's CurMod bit.
     */
    USB0_GINTSTS_HOSTMODE_CurMod get_GINTSTS_HOSTMODE_CurMod()
    {
        return USB0_GINTSTS_HOSTMODE_CurMod(GINTSTS_HOSTMODE & (1u << 0u));
    }

    /**
     * Get GINTSTS_HOSTMODE's WkUpInt bit.
     */
    bool get_GINTSTS_DEVICEMODE_WkUpInt()
    {
        return GINTSTS_DEVICEMODE & (1u << 31u);
    }

    /**
     * Set GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void set_GINTSTS_DEVICEMODE_WkUpInt()
    {
        GINTSTS_HOSTMODE |= 1u << 31u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_WkUpInt()
    {
        GINTSTS_HOSTMODE &= ~(1u << 31u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_WkUpInt()
    {
        GINTSTS_HOSTMODE ^= 1u << 31u;
    }

    /**
     * Get GINTSTS_HOSTMODE's SessReqInt bit.
     */
    bool get_GINTSTS_DEVICEMODE_SessReqInt()
    {
        return GINTSTS_DEVICEMODE & (1u << 30u);
    }

    /**
     * Set GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void set_GINTSTS_DEVICEMODE_SessReqInt()
    {
        GINTSTS_HOSTMODE |= 1u << 30u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_SessReqInt()
    {
        GINTSTS_HOSTMODE &= ~(1u << 30u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_SessReqInt()
    {
        GINTSTS_HOSTMODE ^= 1u << 30u;
    }

    /**
     * Get GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    bool get_GINTSTS_DEVICEMODE_ConIDStsChng()
    {
        return GINTSTS_DEVICEMODE & (1u << 28u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void set_GINTSTS_DEVICEMODE_ConIDStsChng()
    {
        GINTSTS_HOSTMODE |= 1u << 28u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_ConIDStsChng()
    {
        GINTSTS_HOSTMODE &= ~(1u << 28u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_ConIDStsChng()
    {
        GINTSTS_HOSTMODE ^= 1u << 28u;
    }

    /**
     * Get GINTSTS_HOSTMODE's incomplSOOUT bit.
     */
    bool get_GINTSTS_DEVICEMODE_incomplSOOUT()
    {
        return GINTSTS_DEVICEMODE & (1u << 21u);
    }

    /**
     * Set GINTSTS_HOSTMODE's incomplSOOUT bit.
     */
    inline void set_GINTSTS_DEVICEMODE_incomplSOOUT()
    {
        GINTSTS_HOSTMODE |= 1u << 21u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's incomplSOOUT bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_incomplSOOUT()
    {
        GINTSTS_HOSTMODE &= ~(1u << 21u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's incomplSOOUT bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_incomplSOOUT()
    {
        GINTSTS_HOSTMODE ^= 1u << 21u;
    }

    /**
     * Get GINTSTS_HOSTMODE's incompISOIN bit.
     */
    bool get_GINTSTS_DEVICEMODE_incompISOIN()
    {
        return GINTSTS_DEVICEMODE & (1u << 20u);
    }

    /**
     * Set GINTSTS_HOSTMODE's incompISOIN bit.
     */
    inline void set_GINTSTS_DEVICEMODE_incompISOIN()
    {
        GINTSTS_HOSTMODE |= 1u << 20u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's incompISOIN bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_incompISOIN()
    {
        GINTSTS_HOSTMODE &= ~(1u << 20u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's incompISOIN bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_incompISOIN()
    {
        GINTSTS_HOSTMODE ^= 1u << 20u;
    }

    /**
     * Get GINTSTS_HOSTMODE's OEPInt bit.
     */
    bool get_GINTSTS_DEVICEMODE_OEPInt()
    {
        return GINTSTS_DEVICEMODE & (1u << 19u);
    }

    /**
     * Get GINTSTS_HOSTMODE's IEPInt bit.
     */
    bool get_GINTSTS_DEVICEMODE_IEPInt()
    {
        return GINTSTS_DEVICEMODE & (1u << 18u);
    }

    /**
     * Get GINTSTS_HOSTMODE's EOPF bit.
     */
    bool get_GINTSTS_DEVICEMODE_EOPF()
    {
        return GINTSTS_DEVICEMODE & (1u << 15u);
    }

    /**
     * Set GINTSTS_HOSTMODE's EOPF bit.
     */
    inline void set_GINTSTS_DEVICEMODE_EOPF()
    {
        GINTSTS_HOSTMODE |= 1u << 15u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's EOPF bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_EOPF()
    {
        GINTSTS_HOSTMODE &= ~(1u << 15u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's EOPF bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_EOPF()
    {
        GINTSTS_HOSTMODE ^= 1u << 15u;
    }

    /**
     * Get GINTSTS_HOSTMODE's ISOOutDrop bit.
     */
    bool get_GINTSTS_DEVICEMODE_ISOOutDrop()
    {
        return GINTSTS_DEVICEMODE & (1u << 14u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ISOOutDrop bit.
     */
    inline void set_GINTSTS_DEVICEMODE_ISOOutDrop()
    {
        GINTSTS_HOSTMODE |= 1u << 14u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ISOOutDrop bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_ISOOutDrop()
    {
        GINTSTS_HOSTMODE &= ~(1u << 14u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ISOOutDrop bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_ISOOutDrop()
    {
        GINTSTS_HOSTMODE ^= 1u << 14u;
    }

    /**
     * Get GINTSTS_HOSTMODE's EnumDone bit.
     */
    bool get_GINTSTS_DEVICEMODE_EnumDone()
    {
        return GINTSTS_DEVICEMODE & (1u << 13u);
    }

    /**
     * Set GINTSTS_HOSTMODE's EnumDone bit.
     */
    inline void set_GINTSTS_DEVICEMODE_EnumDone()
    {
        GINTSTS_HOSTMODE |= 1u << 13u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's EnumDone bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_EnumDone()
    {
        GINTSTS_HOSTMODE &= ~(1u << 13u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's EnumDone bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_EnumDone()
    {
        GINTSTS_HOSTMODE ^= 1u << 13u;
    }

    /**
     * Get GINTSTS_HOSTMODE's USBRst bit.
     */
    bool get_GINTSTS_DEVICEMODE_USBRst()
    {
        return GINTSTS_DEVICEMODE & (1u << 12u);
    }

    /**
     * Set GINTSTS_HOSTMODE's USBRst bit.
     */
    inline void set_GINTSTS_DEVICEMODE_USBRst()
    {
        GINTSTS_HOSTMODE |= 1u << 12u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's USBRst bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_USBRst()
    {
        GINTSTS_HOSTMODE &= ~(1u << 12u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's USBRst bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_USBRst()
    {
        GINTSTS_HOSTMODE ^= 1u << 12u;
    }

    /**
     * Get GINTSTS_HOSTMODE's USBSusp bit.
     */
    bool get_GINTSTS_DEVICEMODE_USBSusp()
    {
        return GINTSTS_DEVICEMODE & (1u << 11u);
    }

    /**
     * Set GINTSTS_HOSTMODE's USBSusp bit.
     */
    inline void set_GINTSTS_DEVICEMODE_USBSusp()
    {
        GINTSTS_HOSTMODE |= 1u << 11u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's USBSusp bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_USBSusp()
    {
        GINTSTS_HOSTMODE &= ~(1u << 11u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's USBSusp bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_USBSusp()
    {
        GINTSTS_HOSTMODE ^= 1u << 11u;
    }

    /**
     * Get GINTSTS_HOSTMODE's ErlySusp bit.
     */
    bool get_GINTSTS_DEVICEMODE_ErlySusp()
    {
        return GINTSTS_DEVICEMODE & (1u << 10u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ErlySusp bit.
     */
    inline void set_GINTSTS_DEVICEMODE_ErlySusp()
    {
        GINTSTS_HOSTMODE |= 1u << 10u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ErlySusp bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_ErlySusp()
    {
        GINTSTS_HOSTMODE &= ~(1u << 10u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ErlySusp bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_ErlySusp()
    {
        GINTSTS_HOSTMODE ^= 1u << 10u;
    }

    /**
     * Get GINTSTS_HOSTMODE's GOUTNakEff bit.
     */
    bool get_GINTSTS_DEVICEMODE_GOUTNakEff()
    {
        return GINTSTS_DEVICEMODE & (1u << 7u);
    }

    /**
     * Get GINTSTS_HOSTMODE's GINNakEff bit.
     */
    bool get_GINTSTS_DEVICEMODE_GINNakEff()
    {
        return GINTSTS_DEVICEMODE & (1u << 6u);
    }

    /**
     * Get GINTSTS_HOSTMODE's RxFLvl bit.
     */
    bool get_GINTSTS_DEVICEMODE_RxFLvl()
    {
        return GINTSTS_DEVICEMODE & (1u << 4u);
    }

    /**
     * Get GINTSTS_HOSTMODE's Sof bit.
     */
    bool get_GINTSTS_DEVICEMODE_Sof()
    {
        return GINTSTS_DEVICEMODE & (1u << 3u);
    }

    /**
     * Set GINTSTS_HOSTMODE's Sof bit.
     */
    inline void set_GINTSTS_DEVICEMODE_Sof()
    {
        GINTSTS_HOSTMODE |= 1u << 3u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's Sof bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_Sof()
    {
        GINTSTS_HOSTMODE &= ~(1u << 3u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's Sof bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_Sof()
    {
        GINTSTS_HOSTMODE ^= 1u << 3u;
    }

    /**
     * Get GINTSTS_HOSTMODE's OTGInt bit.
     */
    bool get_GINTSTS_DEVICEMODE_OTGInt()
    {
        return GINTSTS_DEVICEMODE & (1u << 2u);
    }

    /**
     * Get GINTSTS_HOSTMODE's ModeMis bit.
     */
    bool get_GINTSTS_DEVICEMODE_ModeMis()
    {
        return GINTSTS_DEVICEMODE & (1u << 1u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void set_GINTSTS_DEVICEMODE_ModeMis()
    {
        GINTSTS_HOSTMODE |= 1u << 1u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_ModeMis()
    {
        GINTSTS_HOSTMODE &= ~(1u << 1u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_ModeMis()
    {
        GINTSTS_HOSTMODE ^= 1u << 1u;
    }

    /**
     * Get GINTSTS_HOSTMODE's CurMod bit.
     */
    USB0_GINTSTS_DEVICEMODE_CurMod get_GINTSTS_DEVICEMODE_CurMod()
    {
        return USB0_GINTSTS_DEVICEMODE_CurMod(GINTSTS_DEVICEMODE & (1u << 0u));
    }

    /**
     * Get GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_WkUpIntMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 31u);
    }

    /**
     * Set GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_WkUpIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 31u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_WkUpIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 31u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_WkUpIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 31u;
    }

    /**
     * Get GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_SessReqIntMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 30u);
    }

    /**
     * Set GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_SessReqIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 30u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_SessReqIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 30u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_SessReqIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 30u;
    }

    /**
     * Get GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_DisconnIntMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 29u);
    }

    /**
     * Set GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_DisconnIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 29u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_DisconnIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 29u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_DisconnIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 29u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_ConIDStsChngMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 28u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_ConIDStsChngMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 28u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_ConIDStsChngMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 28u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_ConIDStsChngMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 28u;
    }

    /**
     * Get GINTMSK_HOSTMODE's PTxFEmpMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_PTxFEmpMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 26u);
    }

    /**
     * Set GINTMSK_HOSTMODE's PTxFEmpMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_PTxFEmpMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 26u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's PTxFEmpMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_PTxFEmpMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 26u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's PTxFEmpMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_PTxFEmpMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 26u;
    }

    /**
     * Get GINTMSK_HOSTMODE's HChIntMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_HChIntMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 25u);
    }

    /**
     * Set GINTMSK_HOSTMODE's HChIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_HChIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 25u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's HChIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_HChIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 25u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's HChIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_HChIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 25u;
    }

    /**
     * Get GINTMSK_HOSTMODE's PrtIntMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_PrtIntMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 24u);
    }

    /**
     * Set GINTMSK_HOSTMODE's PrtIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_PrtIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 24u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's PrtIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_PrtIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 24u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's PrtIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_PrtIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 24u;
    }

    /**
     * Get GINTMSK_HOSTMODE's incomplPMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_incomplPMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 21u);
    }

    /**
     * Set GINTMSK_HOSTMODE's incomplPMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_incomplPMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 21u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's incomplPMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_incomplPMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 21u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's incomplPMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_incomplPMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 21u;
    }

    /**
     * Get GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_RxFLvlMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 4u);
    }

    /**
     * Set GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_RxFLvlMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 4u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_RxFLvlMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 4u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_RxFLvlMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 4u;
    }

    /**
     * Get GINTMSK_HOSTMODE's SofMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_SofMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 3u);
    }

    /**
     * Set GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_SofMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 3u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_SofMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 3u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_SofMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 3u;
    }

    /**
     * Get GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_OTGIntMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 2u);
    }

    /**
     * Set GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_OTGIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 2u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_OTGIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 2u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_OTGIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 2u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    bool get_GINTMSK_HOSTMODE_ModeMisMsk()
    {
        return GINTMSK_HOSTMODE & (1u << 1u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_ModeMisMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 1u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_ModeMisMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 1u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_ModeMisMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 1u;
    }

    /**
     * Get GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_WkUpIntMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 31u);
    }

    /**
     * Set GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_WkUpIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 31u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_WkUpIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 31u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_WkUpIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 31u;
    }

    /**
     * Get GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_SessReqIntMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 30u);
    }

    /**
     * Set GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_SessReqIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 30u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_SessReqIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 30u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_SessReqIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 30u;
    }

    /**
     * Get GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_DisconnIntMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 29u);
    }

    /**
     * Set GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_DisconnIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 29u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_DisconnIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 29u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_DisconnIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 29u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_ConIDStsChngMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 28u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_ConIDStsChngMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 28u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_ConIDStsChngMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 28u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_ConIDStsChngMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 28u;
    }

    /**
     * Get GINTMSK_HOSTMODE's incomplSOOUTMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_incomplSOOUTMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 21u);
    }

    /**
     * Set GINTMSK_HOSTMODE's incomplSOOUTMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_incomplSOOUTMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 21u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's incomplSOOUTMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_incomplSOOUTMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 21u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's incomplSOOUTMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_incomplSOOUTMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 21u;
    }

    /**
     * Get GINTMSK_HOSTMODE's incompISOINMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_incompISOINMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 20u);
    }

    /**
     * Set GINTMSK_HOSTMODE's incompISOINMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_incompISOINMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 20u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's incompISOINMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_incompISOINMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 20u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's incompISOINMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_incompISOINMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 20u;
    }

    /**
     * Get GINTMSK_HOSTMODE's OEPIntMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_OEPIntMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 19u);
    }

    /**
     * Set GINTMSK_HOSTMODE's OEPIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_OEPIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 19u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's OEPIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_OEPIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 19u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's OEPIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_OEPIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 19u;
    }

    /**
     * Get GINTMSK_HOSTMODE's IEPIntMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_IEPIntMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 18u);
    }

    /**
     * Set GINTMSK_HOSTMODE's IEPIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_IEPIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 18u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's IEPIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_IEPIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 18u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's IEPIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_IEPIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 18u;
    }

    /**
     * Get GINTMSK_HOSTMODE's EOPFMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_EOPFMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 15u);
    }

    /**
     * Set GINTMSK_HOSTMODE's EOPFMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_EOPFMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 15u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's EOPFMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_EOPFMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 15u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's EOPFMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_EOPFMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 15u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ISOOutDropMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_ISOOutDropMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 14u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ISOOutDropMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_ISOOutDropMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 14u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ISOOutDropMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_ISOOutDropMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 14u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ISOOutDropMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_ISOOutDropMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 14u;
    }

    /**
     * Get GINTMSK_HOSTMODE's EnumDoneMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_EnumDoneMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 13u);
    }

    /**
     * Set GINTMSK_HOSTMODE's EnumDoneMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_EnumDoneMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 13u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's EnumDoneMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_EnumDoneMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 13u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's EnumDoneMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_EnumDoneMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 13u;
    }

    /**
     * Get GINTMSK_HOSTMODE's USBRstMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_USBRstMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 12u);
    }

    /**
     * Set GINTMSK_HOSTMODE's USBRstMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_USBRstMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 12u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's USBRstMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_USBRstMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 12u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's USBRstMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_USBRstMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 12u;
    }

    /**
     * Get GINTMSK_HOSTMODE's USBSuspMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_USBSuspMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 11u);
    }

    /**
     * Set GINTMSK_HOSTMODE's USBSuspMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_USBSuspMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 11u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's USBSuspMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_USBSuspMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 11u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's USBSuspMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_USBSuspMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 11u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ErlySuspMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_ErlySuspMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 10u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ErlySuspMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_ErlySuspMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 10u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ErlySuspMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_ErlySuspMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 10u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ErlySuspMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_ErlySuspMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 10u;
    }

    /**
     * Get GINTMSK_HOSTMODE's GOUTNakEffMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_GOUTNakEffMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 7u);
    }

    /**
     * Set GINTMSK_HOSTMODE's GOUTNakEffMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_GOUTNakEffMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 7u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's GOUTNakEffMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_GOUTNakEffMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 7u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's GOUTNakEffMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_GOUTNakEffMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 7u;
    }

    /**
     * Get GINTMSK_HOSTMODE's GINNakEffMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_GINNakEffMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 6u);
    }

    /**
     * Set GINTMSK_HOSTMODE's GINNakEffMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_GINNakEffMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 6u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's GINNakEffMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_GINNakEffMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 6u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's GINNakEffMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_GINNakEffMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 6u;
    }

    /**
     * Get GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_RxFLvlMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 4u);
    }

    /**
     * Set GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_RxFLvlMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 4u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_RxFLvlMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 4u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_RxFLvlMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 4u;
    }

    /**
     * Get GINTMSK_HOSTMODE's SofMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_SofMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 3u);
    }

    /**
     * Set GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_SofMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 3u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_SofMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 3u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_SofMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 3u;
    }

    /**
     * Get GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_OTGIntMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 2u);
    }

    /**
     * Set GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_OTGIntMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 2u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_OTGIntMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 2u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_OTGIntMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 2u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    bool get_GINTMSK_DEVICEMODE_ModeMisMsk()
    {
        return GINTMSK_DEVICEMODE & (1u << 1u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_ModeMisMsk()
    {
        GINTMSK_HOSTMODE |= 1u << 1u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_ModeMisMsk()
    {
        GINTMSK_HOSTMODE &= ~(1u << 1u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_ModeMisMsk()
    {
        GINTMSK_HOSTMODE ^= 1u << 1u;
    }

    /**
     * Get GRXSTSR_HOSTMODE's PktSts field.
     */
    USB0_GRXSTSR_HOSTMODE_PktSts get_GRXSTSR_HOSTMODE_PktSts()
    {
        return USB0_GRXSTSR_HOSTMODE_PktSts((GRXSTSR_HOSTMODE >> 17u) &
                                            0b1111u);
    }

    /**
     * Get GRXSTSR_HOSTMODE's DPID field.
     */
    USB0_GRXSTSR_HOSTMODE_DPID get_GRXSTSR_HOSTMODE_DPID()
    {
        return USB0_GRXSTSR_HOSTMODE_DPID((GRXSTSR_HOSTMODE >> 15u) & 0b11u);
    }

    /**
     * Get GRXSTSR_HOSTMODE's BCnt field.
     */
    uint16_t get_GRXSTSR_HOSTMODE_BCnt()
    {
        return (GRXSTSR_HOSTMODE >> 4u) & 0b11111111111u;
    }

    /**
     * Get GRXSTSR_HOSTMODE's ChNum field.
     */
    uint8_t get_GRXSTSR_HOSTMODE_ChNum()
    {
        return (GRXSTSR_HOSTMODE >> 0u) & 0b1111u;
    }

    /**
     * Get GRXSTSR_HOSTMODE's FN field.
     */
    uint8_t get_GRXSTSR_DEVICEMODE_FN()
    {
        return (GRXSTSR_DEVICEMODE >> 21u) & 0b1111u;
    }

    /**
     * Get GRXSTSR_HOSTMODE's PktSts field.
     */
    USB0_GRXSTSR_DEVICEMODE_PktSts get_GRXSTSR_DEVICEMODE_PktSts()
    {
        return USB0_GRXSTSR_DEVICEMODE_PktSts((GRXSTSR_DEVICEMODE >> 17u) &
                                              0b1111u);
    }

    /**
     * Get GRXSTSR_HOSTMODE's DPID field.
     */
    USB0_GRXSTSR_DEVICEMODE_DPID get_GRXSTSR_DEVICEMODE_DPID()
    {
        return USB0_GRXSTSR_DEVICEMODE_DPID((GRXSTSR_DEVICEMODE >> 15u) &
                                            0b11u);
    }

    /**
     * Get GRXSTSR_HOSTMODE's BCnt field.
     */
    uint16_t get_GRXSTSR_DEVICEMODE_BCnt()
    {
        return (GRXSTSR_DEVICEMODE >> 4u) & 0b11111111111u;
    }

    /**
     * Get GRXSTSR_HOSTMODE's EPNum field.
     */
    uint8_t get_GRXSTSR_DEVICEMODE_EPNum()
    {
        return (GRXSTSR_DEVICEMODE >> 0u) & 0b1111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's FN field.
     */
    uint8_t get_GRXSTSP_DEVICEMODE_FN()
    {
        return (GRXSTSP_DEVICEMODE >> 21u) & 0b1111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's PktSts field.
     */
    USB0_GRXSTSP_DEVICEMODE_PktSts get_GRXSTSP_DEVICEMODE_PktSts()
    {
        return USB0_GRXSTSP_DEVICEMODE_PktSts((GRXSTSP_DEVICEMODE >> 17u) &
                                              0b1111u);
    }

    /**
     * Get GRXSTSP_DEVICEMODE's DPID field.
     */
    USB0_GRXSTSP_DEVICEMODE_DPID get_GRXSTSP_DEVICEMODE_DPID()
    {
        return USB0_GRXSTSP_DEVICEMODE_DPID((GRXSTSP_DEVICEMODE >> 15u) &
                                            0b11u);
    }

    /**
     * Get GRXSTSP_DEVICEMODE's BCnt field.
     */
    uint16_t get_GRXSTSP_DEVICEMODE_BCnt()
    {
        return (GRXSTSP_DEVICEMODE >> 4u) & 0b11111111111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's EPNum field.
     */
    uint8_t get_GRXSTSP_DEVICEMODE_EPNum()
    {
        return (GRXSTSP_DEVICEMODE >> 0u) & 0b1111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's PktSts field.
     */
    USB0_GRXSTSP_HOSTMODE_PktSts get_GRXSTSP_HOSTMODE_PktSts()
    {
        return USB0_GRXSTSP_HOSTMODE_PktSts((GRXSTSP_HOSTMODE >> 17u) &
                                            0b1111u);
    }

    /**
     * Get GRXSTSP_DEVICEMODE's DPID field.
     */
    USB0_GRXSTSP_HOSTMODE_DPID get_GRXSTSP_HOSTMODE_DPID()
    {
        return USB0_GRXSTSP_HOSTMODE_DPID((GRXSTSP_HOSTMODE >> 15u) & 0b11u);
    }

    /**
     * Get GRXSTSP_DEVICEMODE's BCnt field.
     */
    uint16_t get_GRXSTSP_HOSTMODE_BCnt()
    {
        return (GRXSTSP_HOSTMODE >> 4u) & 0b11111111111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's ChNum field.
     */
    uint8_t get_GRXSTSP_HOSTMODE_ChNum()
    {
        return (GRXSTSP_HOSTMODE >> 0u) & 0b1111u;
    }

    /**
     * Get GRXFSIZ's RxFDep field.
     */
    uint16_t get_GRXFSIZ_RxFDep()
    {
        return (GRXFSIZ >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GRXFSIZ's RxFDep field.
     */
    inline void set_GRXFSIZ_RxFDep(uint16_t value)
    {
        uint32_t curr = GRXFSIZ;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GRXFSIZ = curr;
    }

    /**
     * Get GNPTXFSIZ_HOSTMODE's NPTxFDep field.
     */
    uint16_t get_GNPTXFSIZ_HOSTMODE_NPTxFDep()
    {
        return (GNPTXFSIZ_HOSTMODE >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GNPTXFSIZ_HOSTMODE's NPTxFDep field.
     */
    inline void set_GNPTXFSIZ_HOSTMODE_NPTxFDep(uint16_t value)
    {
        uint32_t curr = GNPTXFSIZ_HOSTMODE;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GNPTXFSIZ_HOSTMODE = curr;
    }

    /**
     * Get GNPTXFSIZ_HOSTMODE's NPTxFStAddr field.
     */
    uint16_t get_GNPTXFSIZ_HOSTMODE_NPTxFStAddr()
    {
        return (GNPTXFSIZ_HOSTMODE >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GNPTXFSIZ_HOSTMODE's NPTxFStAddr field.
     */
    inline void set_GNPTXFSIZ_HOSTMODE_NPTxFStAddr(uint16_t value)
    {
        uint32_t curr = GNPTXFSIZ_HOSTMODE;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GNPTXFSIZ_HOSTMODE = curr;
    }

    /**
     * Get GNPTXFSIZ_HOSTMODE's INEPTxF0Dep field.
     */
    uint16_t get_GNPTXFSIZ_DEVICEMODE_INEPTxF0Dep()
    {
        return (GNPTXFSIZ_DEVICEMODE >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GNPTXFSIZ_HOSTMODE's INEPTxF0Dep field.
     */
    inline void set_GNPTXFSIZ_DEVICEMODE_INEPTxF0Dep(uint16_t value)
    {
        uint32_t curr = GNPTXFSIZ_DEVICEMODE;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GNPTXFSIZ_DEVICEMODE = curr;
    }

    /**
     * Get GNPTXFSIZ_HOSTMODE's INEPTxF0StAddr field.
     */
    uint16_t get_GNPTXFSIZ_DEVICEMODE_INEPTxF0StAddr()
    {
        return (GNPTXFSIZ_DEVICEMODE >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GNPTXFSIZ_HOSTMODE's INEPTxF0StAddr field.
     */
    inline void set_GNPTXFSIZ_DEVICEMODE_INEPTxF0StAddr(uint16_t value)
    {
        uint32_t curr = GNPTXFSIZ_DEVICEMODE;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GNPTXFSIZ_DEVICEMODE = curr;
    }

    /**
     * Get GNPTXSTS's NPTxQTop field.
     */
    USB0_GNPTXSTS_NPTxQTop get_GNPTXSTS_NPTxQTop()
    {
        return USB0_GNPTXSTS_NPTxQTop((GNPTXSTS >> 24u) & 0b1111111u);
    }

    /**
     * Get GNPTXSTS's NPTxQSpcAvail field.
     */
    USB0_GNPTXSTS_NPTxQSpcAvail get_GNPTXSTS_NPTxQSpcAvail()
    {
        return USB0_GNPTXSTS_NPTxQSpcAvail((GNPTXSTS >> 16u) & 0b11111111u);
    }

    /**
     * Get GNPTXSTS's NPTxFSpcAvail field.
     */
    USB0_GNPTXSTS_NPTxFSpcAvail get_GNPTXSTS_NPTxFSpcAvail()
    {
        return USB0_GNPTXSTS_NPTxFSpcAvail((GNPTXSTS >> 0u) &
                                           0b1111111111111111u);
    }

    /**
     * Get GUID's MOD_NUMBER field.
     */
    uint16_t get_GUID_MOD_NUMBER()
    {
        return (GUID >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GUID's MOD_NUMBER field.
     */
    inline void set_GUID_MOD_NUMBER(uint16_t value)
    {
        uint32_t curr = GUID;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GUID = curr;
    }

    /**
     * Get GUID's MOD_TYPE field.
     */
    uint8_t get_GUID_MOD_TYPE()
    {
        return (GUID >> 8u) & 0b11111111u;
    }

    /**
     * Set GUID's MOD_TYPE field.
     */
    inline void set_GUID_MOD_TYPE(uint8_t value)
    {
        uint32_t curr = GUID;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        GUID = curr;
    }

    /**
     * Get GUID's MOD_REV field.
     */
    uint8_t get_GUID_MOD_REV()
    {
        return (GUID >> 0u) & 0b11111111u;
    }

    /**
     * Set GUID's MOD_REV field.
     */
    inline void set_GUID_MOD_REV(uint8_t value)
    {
        uint32_t curr = GUID;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        GUID = curr;
    }

    /**
     * Get GDFIFOCFG's EPInfoBaseAddr field.
     */
    uint16_t get_GDFIFOCFG_EPInfoBaseAddr()
    {
        return (GDFIFOCFG >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GDFIFOCFG's EPInfoBaseAddr field.
     */
    inline void set_GDFIFOCFG_EPInfoBaseAddr(uint16_t value)
    {
        uint32_t curr = GDFIFOCFG;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GDFIFOCFG = curr;
    }

    /**
     * Get GDFIFOCFG's GDFIFOCfg field.
     */
    uint16_t get_GDFIFOCFG_GDFIFOCfg()
    {
        return (GDFIFOCFG >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GDFIFOCFG's GDFIFOCfg field.
     */
    inline void set_GDFIFOCFG_GDFIFOCfg(uint16_t value)
    {
        uint32_t curr = GDFIFOCFG;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GDFIFOCFG = curr;
    }

    /**
     * Get HPTXFSIZ's PTxFSize field.
     */
    uint16_t get_HPTXFSIZ_PTxFSize()
    {
        return (HPTXFSIZ >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set HPTXFSIZ's PTxFSize field.
     */
    inline void set_HPTXFSIZ_PTxFSize(uint16_t value)
    {
        uint32_t curr = HPTXFSIZ;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        HPTXFSIZ = curr;
    }

    /**
     * Get HPTXFSIZ's PTxFStAddr field.
     */
    uint16_t get_HPTXFSIZ_PTxFStAddr()
    {
        return (HPTXFSIZ >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set HPTXFSIZ's PTxFStAddr field.
     */
    inline void set_HPTXFSIZ_PTxFStAddr(uint16_t value)
    {
        uint32_t curr = HPTXFSIZ;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        HPTXFSIZ = curr;
    }

    /**
     * Get DIEPTXF1's INEPnTxFDep field.
     */
    uint16_t get_DIEPTXF1_INEPnTxFDep()
    {
        return (DIEPTXF1 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF1's INEPnTxFDep field.
     */
    inline void set_DIEPTXF1_INEPnTxFDep(uint16_t value)
    {
        uint32_t curr = DIEPTXF1;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF1 = curr;
    }

    /**
     * Get DIEPTXF1's INEPnTxFStAddr field.
     */
    uint16_t get_DIEPTXF1_INEPnTxFStAddr()
    {
        return (DIEPTXF1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF1's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF1_INEPnTxFStAddr(uint16_t value)
    {
        uint32_t curr = DIEPTXF1;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF1 = curr;
    }

    /**
     * Get DIEPTXF2's INEPnTxFDep field.
     */
    uint16_t get_DIEPTXF2_INEPnTxFDep()
    {
        return (DIEPTXF2 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF2's INEPnTxFDep field.
     */
    inline void set_DIEPTXF2_INEPnTxFDep(uint16_t value)
    {
        uint32_t curr = DIEPTXF2;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF2 = curr;
    }

    /**
     * Get DIEPTXF2's INEPnTxFStAddr field.
     */
    uint16_t get_DIEPTXF2_INEPnTxFStAddr()
    {
        return (DIEPTXF2 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF2's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF2_INEPnTxFStAddr(uint16_t value)
    {
        uint32_t curr = DIEPTXF2;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF2 = curr;
    }

    /**
     * Get DIEPTXF3's INEPnTxFDep field.
     */
    uint16_t get_DIEPTXF3_INEPnTxFDep()
    {
        return (DIEPTXF3 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF3's INEPnTxFDep field.
     */
    inline void set_DIEPTXF3_INEPnTxFDep(uint16_t value)
    {
        uint32_t curr = DIEPTXF3;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF3 = curr;
    }

    /**
     * Get DIEPTXF3's INEPnTxFStAddr field.
     */
    uint16_t get_DIEPTXF3_INEPnTxFStAddr()
    {
        return (DIEPTXF3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF3's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF3_INEPnTxFStAddr(uint16_t value)
    {
        uint32_t curr = DIEPTXF3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF3 = curr;
    }

    /**
     * Get DIEPTXF4's INEPnTxFDep field.
     */
    uint16_t get_DIEPTXF4_INEPnTxFDep()
    {
        return (DIEPTXF4 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF4's INEPnTxFDep field.
     */
    inline void set_DIEPTXF4_INEPnTxFDep(uint16_t value)
    {
        uint32_t curr = DIEPTXF4;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF4 = curr;
    }

    /**
     * Get DIEPTXF4's INEPnTxFStAddr field.
     */
    uint16_t get_DIEPTXF4_INEPnTxFStAddr()
    {
        return (DIEPTXF4 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF4's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF4_INEPnTxFStAddr(uint16_t value)
    {
        uint32_t curr = DIEPTXF4;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF4 = curr;
    }

    /**
     * Get DIEPTXF5's INEPnTxFDep field.
     */
    uint16_t get_DIEPTXF5_INEPnTxFDep()
    {
        return (DIEPTXF5 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF5's INEPnTxFDep field.
     */
    inline void set_DIEPTXF5_INEPnTxFDep(uint16_t value)
    {
        uint32_t curr = DIEPTXF5;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF5 = curr;
    }

    /**
     * Get DIEPTXF5's INEPnTxFStAddr field.
     */
    uint16_t get_DIEPTXF5_INEPnTxFStAddr()
    {
        return (DIEPTXF5 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF5's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF5_INEPnTxFStAddr(uint16_t value)
    {
        uint32_t curr = DIEPTXF5;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF5 = curr;
    }

    /**
     * Get DIEPTXF6's INEPnTxFDep field.
     */
    uint16_t get_DIEPTXF6_INEPnTxFDep()
    {
        return (DIEPTXF6 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF6's INEPnTxFDep field.
     */
    inline void set_DIEPTXF6_INEPnTxFDep(uint16_t value)
    {
        uint32_t curr = DIEPTXF6;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF6 = curr;
    }

    /**
     * Get DIEPTXF6's INEPnTxFStAddr field.
     */
    uint16_t get_DIEPTXF6_INEPnTxFStAddr()
    {
        return (DIEPTXF6 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF6's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF6_INEPnTxFStAddr(uint16_t value)
    {
        uint32_t curr = DIEPTXF6;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF6 = curr;
    }

    /**
     * Get HCFG's PerSchedEna bit.
     */
    bool get_HCFG_PerSchedEna()
    {
        return HCFG & (1u << 26u);
    }

    /**
     * Set HCFG's PerSchedEna bit.
     */
    inline void set_HCFG_PerSchedEna()
    {
        HCFG |= 1u << 26u;
    }

    /**
     * Clear HCFG's PerSchedEna bit.
     */
    inline void clear_HCFG_PerSchedEna()
    {
        HCFG &= ~(1u << 26u);
    }

    /**
     * Toggle HCFG's PerSchedEna bit.
     */
    inline void toggle_HCFG_PerSchedEna()
    {
        HCFG ^= 1u << 26u;
    }

    /**
     * Get HCFG's FrListEn field.
     */
    USB0_HCFG_FrListEn get_HCFG_FrListEn()
    {
        return USB0_HCFG_FrListEn((HCFG >> 24u) & 0b11u);
    }

    /**
     * Set HCFG's FrListEn field.
     */
    inline void set_HCFG_FrListEn(USB0_HCFG_FrListEn value)
    {
        uint32_t curr = HCFG;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        HCFG = curr;
    }

    /**
     * Get HCFG's DescDMA bit.
     */
    bool get_HCFG_DescDMA()
    {
        return HCFG & (1u << 23u);
    }

    /**
     * Set HCFG's DescDMA bit.
     */
    inline void set_HCFG_DescDMA()
    {
        HCFG |= 1u << 23u;
    }

    /**
     * Clear HCFG's DescDMA bit.
     */
    inline void clear_HCFG_DescDMA()
    {
        HCFG &= ~(1u << 23u);
    }

    /**
     * Toggle HCFG's DescDMA bit.
     */
    inline void toggle_HCFG_DescDMA()
    {
        HCFG ^= 1u << 23u;
    }

    /**
     * Get HCFG's FSLSSupp bit.
     */
    USB0_HCFG_FSLSSupp get_HCFG_FSLSSupp()
    {
        return USB0_HCFG_FSLSSupp(HCFG & (1u << 2u));
    }

    /**
     * Set HCFG's FSLSSupp bit.
     */
    inline void set_HCFG_FSLSSupp()
    {
        HCFG |= 1u << 2u;
    }

    /**
     * Clear HCFG's FSLSSupp bit.
     */
    inline void clear_HCFG_FSLSSupp()
    {
        HCFG &= ~(1u << 2u);
    }

    /**
     * Toggle HCFG's FSLSSupp bit.
     */
    inline void toggle_HCFG_FSLSSupp()
    {
        HCFG ^= 1u << 2u;
    }

    /**
     * Get HCFG's FSLSPclkSel field.
     */
    USB0_HCFG_FSLSPclkSel get_HCFG_FSLSPclkSel()
    {
        return USB0_HCFG_FSLSPclkSel((HCFG >> 0u) & 0b11u);
    }

    /**
     * Set HCFG's FSLSPclkSel field.
     */
    inline void set_HCFG_FSLSPclkSel(USB0_HCFG_FSLSPclkSel value)
    {
        uint32_t curr = HCFG;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        HCFG = curr;
    }

    /**
     * Get HFIR's HFIRRldCtrl bit.
     */
    USB0_HFIR_HFIRRldCtrl get_HFIR_HFIRRldCtrl()
    {
        return USB0_HFIR_HFIRRldCtrl(HFIR & (1u << 16u));
    }

    /**
     * Set HFIR's HFIRRldCtrl bit.
     */
    inline void set_HFIR_HFIRRldCtrl()
    {
        HFIR |= 1u << 16u;
    }

    /**
     * Clear HFIR's HFIRRldCtrl bit.
     */
    inline void clear_HFIR_HFIRRldCtrl()
    {
        HFIR &= ~(1u << 16u);
    }

    /**
     * Toggle HFIR's HFIRRldCtrl bit.
     */
    inline void toggle_HFIR_HFIRRldCtrl()
    {
        HFIR ^= 1u << 16u;
    }

    /**
     * Get HFIR's FrInt field.
     */
    uint16_t get_HFIR_FrInt()
    {
        return (HFIR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set HFIR's FrInt field.
     */
    inline void set_HFIR_FrInt(uint16_t value)
    {
        uint32_t curr = HFIR;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        HFIR = curr;
    }

    /**
     * Get HFNUM's FrRem field.
     */
    uint16_t get_HFNUM_FrRem()
    {
        return (HFNUM >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get HFNUM's FrNum field.
     */
    uint16_t get_HFNUM_FrNum()
    {
        return (HFNUM >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set HFNUM's FrNum field.
     */
    inline void set_HFNUM_FrNum(uint16_t value)
    {
        uint32_t curr = HFNUM;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        HFNUM = curr;
    }

    /**
     * Get HPTXSTS's PTxQTop field.
     */
    uint8_t get_HPTXSTS_PTxQTop()
    {
        return (HPTXSTS >> 24u) & 0b11111111u;
    }

    /**
     * Get HPTXSTS's PTxQSpcAvail field.
     */
    USB0_HPTXSTS_PTxQSpcAvail get_HPTXSTS_PTxQSpcAvail()
    {
        return USB0_HPTXSTS_PTxQSpcAvail((HPTXSTS >> 16u) & 0b11111111u);
    }

    /**
     * Get HPTXSTS's PTxFSpcAvail field.
     */
    USB0_HPTXSTS_PTxFSpcAvail get_HPTXSTS_PTxFSpcAvail()
    {
        return USB0_HPTXSTS_PTxFSpcAvail((HPTXSTS >> 0u) &
                                         0b1111111111111111u);
    }

    /**
     * Set HPTXSTS's PTxFSpcAvail field.
     */
    inline void set_HPTXSTS_PTxFSpcAvail(USB0_HPTXSTS_PTxFSpcAvail value)
    {
        uint32_t curr = HPTXSTS;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111111111111111u) << 0u;

        HPTXSTS = curr;
    }

    /**
     * Get HAINT's HAINT field.
     */
    uint16_t get_HAINT_HAINT()
    {
        return (HAINT >> 0u) & 0b11111111111111u;
    }

    /**
     * Get HAINTMSK's HAINTMsk field.
     */
    uint16_t get_HAINTMSK_HAINTMsk()
    {
        return (HAINTMSK >> 0u) & 0b11111111111111u;
    }

    /**
     * Set HAINTMSK's HAINTMsk field.
     */
    inline void set_HAINTMSK_HAINTMsk(uint16_t value)
    {
        uint32_t curr = HAINTMSK;

        curr &= ~(0b11111111111111u << 0u);
        curr |= (value & 0b11111111111111u) << 0u;

        HAINTMSK = curr;
    }

    /**
     * Get HFLBADDR's Starting_Address field.
     */
    uint32_t get_HFLBADDR_Starting_Address()
    {
        return (HFLBADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set HFLBADDR's Starting_Address field.
     */
    inline void set_HFLBADDR_Starting_Address(uint32_t value)
    {
        uint32_t curr = HFLBADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        HFLBADDR = curr;
    }

    /**
     * Get HPRT's PrtSpd field.
     */
    USB0_HPRT_PrtSpd get_HPRT_PrtSpd()
    {
        return USB0_HPRT_PrtSpd((HPRT >> 17u) & 0b11u);
    }

    /**
     * Get HPRT's PrtPwr bit.
     */
    USB0_HPRT_PrtPwr get_HPRT_PrtPwr()
    {
        return USB0_HPRT_PrtPwr(HPRT & (1u << 12u));
    }

    /**
     * Set HPRT's PrtPwr bit.
     */
    inline void set_HPRT_PrtPwr()
    {
        HPRT |= 1u << 12u;
    }

    /**
     * Clear HPRT's PrtPwr bit.
     */
    inline void clear_HPRT_PrtPwr()
    {
        HPRT &= ~(1u << 12u);
    }

    /**
     * Toggle HPRT's PrtPwr bit.
     */
    inline void toggle_HPRT_PrtPwr()
    {
        HPRT ^= 1u << 12u;
    }

    /**
     * Get HPRT's PrtLnSts field.
     */
    uint8_t get_HPRT_PrtLnSts()
    {
        return (HPRT >> 10u) & 0b11u;
    }

    /**
     * Get HPRT's PrtRst bit.
     */
    USB0_HPRT_PrtRst get_HPRT_PrtRst()
    {
        return USB0_HPRT_PrtRst(HPRT & (1u << 8u));
    }

    /**
     * Set HPRT's PrtRst bit.
     */
    inline void set_HPRT_PrtRst()
    {
        HPRT |= 1u << 8u;
    }

    /**
     * Clear HPRT's PrtRst bit.
     */
    inline void clear_HPRT_PrtRst()
    {
        HPRT &= ~(1u << 8u);
    }

    /**
     * Toggle HPRT's PrtRst bit.
     */
    inline void toggle_HPRT_PrtRst()
    {
        HPRT ^= 1u << 8u;
    }

    /**
     * Get HPRT's PrtSusp bit.
     */
    USB0_HPRT_PrtSusp get_HPRT_PrtSusp()
    {
        return USB0_HPRT_PrtSusp(HPRT & (1u << 7u));
    }

    /**
     * Set HPRT's PrtSusp bit.
     */
    inline void set_HPRT_PrtSusp()
    {
        HPRT |= 1u << 7u;
    }

    /**
     * Clear HPRT's PrtSusp bit.
     */
    inline void clear_HPRT_PrtSusp()
    {
        HPRT &= ~(1u << 7u);
    }

    /**
     * Toggle HPRT's PrtSusp bit.
     */
    inline void toggle_HPRT_PrtSusp()
    {
        HPRT ^= 1u << 7u;
    }

    /**
     * Get HPRT's PrtRes bit.
     */
    USB0_HPRT_PrtRes get_HPRT_PrtRes()
    {
        return USB0_HPRT_PrtRes(HPRT & (1u << 6u));
    }

    /**
     * Set HPRT's PrtRes bit.
     */
    inline void set_HPRT_PrtRes()
    {
        HPRT |= 1u << 6u;
    }

    /**
     * Clear HPRT's PrtRes bit.
     */
    inline void clear_HPRT_PrtRes()
    {
        HPRT &= ~(1u << 6u);
    }

    /**
     * Toggle HPRT's PrtRes bit.
     */
    inline void toggle_HPRT_PrtRes()
    {
        HPRT ^= 1u << 6u;
    }

    /**
     * Get HPRT's PrtOvrCurrChng bit.
     */
    bool get_HPRT_PrtOvrCurrChng()
    {
        return HPRT & (1u << 5u);
    }

    /**
     * Set HPRT's PrtOvrCurrChng bit.
     */
    inline void set_HPRT_PrtOvrCurrChng()
    {
        HPRT |= 1u << 5u;
    }

    /**
     * Clear HPRT's PrtOvrCurrChng bit.
     */
    inline void clear_HPRT_PrtOvrCurrChng()
    {
        HPRT &= ~(1u << 5u);
    }

    /**
     * Toggle HPRT's PrtOvrCurrChng bit.
     */
    inline void toggle_HPRT_PrtOvrCurrChng()
    {
        HPRT ^= 1u << 5u;
    }

    /**
     * Get HPRT's PrtOvrCurrAct bit.
     */
    USB0_HPRT_PrtOvrCurrAct get_HPRT_PrtOvrCurrAct()
    {
        return USB0_HPRT_PrtOvrCurrAct(HPRT & (1u << 4u));
    }

    /**
     * Get HPRT's PrtEnChng bit.
     */
    bool get_HPRT_PrtEnChng()
    {
        return HPRT & (1u << 3u);
    }

    /**
     * Set HPRT's PrtEnChng bit.
     */
    inline void set_HPRT_PrtEnChng()
    {
        HPRT |= 1u << 3u;
    }

    /**
     * Clear HPRT's PrtEnChng bit.
     */
    inline void clear_HPRT_PrtEnChng()
    {
        HPRT &= ~(1u << 3u);
    }

    /**
     * Toggle HPRT's PrtEnChng bit.
     */
    inline void toggle_HPRT_PrtEnChng()
    {
        HPRT ^= 1u << 3u;
    }

    /**
     * Get HPRT's PrtEna bit.
     */
    USB0_HPRT_PrtEna get_HPRT_PrtEna()
    {
        return USB0_HPRT_PrtEna(HPRT & (1u << 2u));
    }

    /**
     * Set HPRT's PrtEna bit.
     */
    inline void set_HPRT_PrtEna()
    {
        HPRT |= 1u << 2u;
    }

    /**
     * Clear HPRT's PrtEna bit.
     */
    inline void clear_HPRT_PrtEna()
    {
        HPRT &= ~(1u << 2u);
    }

    /**
     * Toggle HPRT's PrtEna bit.
     */
    inline void toggle_HPRT_PrtEna()
    {
        HPRT ^= 1u << 2u;
    }

    /**
     * Get HPRT's PrtConnDet bit.
     */
    bool get_HPRT_PrtConnDet()
    {
        return HPRT & (1u << 1u);
    }

    /**
     * Set HPRT's PrtConnDet bit.
     */
    inline void set_HPRT_PrtConnDet()
    {
        HPRT |= 1u << 1u;
    }

    /**
     * Clear HPRT's PrtConnDet bit.
     */
    inline void clear_HPRT_PrtConnDet()
    {
        HPRT &= ~(1u << 1u);
    }

    /**
     * Toggle HPRT's PrtConnDet bit.
     */
    inline void toggle_HPRT_PrtConnDet()
    {
        HPRT ^= 1u << 1u;
    }

    /**
     * Get HPRT's PrtConnSts bit.
     */
    USB0_HPRT_PrtConnSts get_HPRT_PrtConnSts()
    {
        return USB0_HPRT_PrtConnSts(HPRT & (1u << 0u));
    }

    /**
     * Get DCFG's PerSchIntvl field.
     */
    USB0_DCFG_PerSchIntvl get_DCFG_PerSchIntvl()
    {
        return USB0_DCFG_PerSchIntvl((DCFG >> 24u) & 0b11u);
    }

    /**
     * Set DCFG's PerSchIntvl field.
     */
    inline void set_DCFG_PerSchIntvl(USB0_DCFG_PerSchIntvl value)
    {
        uint32_t curr = DCFG;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        DCFG = curr;
    }

    /**
     * Get DCFG's DescDMA bit.
     */
    bool get_DCFG_DescDMA()
    {
        return DCFG & (1u << 23u);
    }

    /**
     * Set DCFG's DescDMA bit.
     */
    inline void set_DCFG_DescDMA()
    {
        DCFG |= 1u << 23u;
    }

    /**
     * Clear DCFG's DescDMA bit.
     */
    inline void clear_DCFG_DescDMA()
    {
        DCFG &= ~(1u << 23u);
    }

    /**
     * Toggle DCFG's DescDMA bit.
     */
    inline void toggle_DCFG_DescDMA()
    {
        DCFG ^= 1u << 23u;
    }

    /**
     * Get DCFG's PerFrInt field.
     */
    USB0_DCFG_PerFrInt get_DCFG_PerFrInt()
    {
        return USB0_DCFG_PerFrInt((DCFG >> 11u) & 0b11u);
    }

    /**
     * Set DCFG's PerFrInt field.
     */
    inline void set_DCFG_PerFrInt(USB0_DCFG_PerFrInt value)
    {
        uint32_t curr = DCFG;

        curr &= ~(0b11u << 11u);
        curr |= (std::to_underlying(value) & 0b11u) << 11u;

        DCFG = curr;
    }

    /**
     * Get DCFG's DevAddr field.
     */
    uint8_t get_DCFG_DevAddr()
    {
        return (DCFG >> 4u) & 0b1111111u;
    }

    /**
     * Set DCFG's DevAddr field.
     */
    inline void set_DCFG_DevAddr(uint8_t value)
    {
        uint32_t curr = DCFG;

        curr &= ~(0b1111111u << 4u);
        curr |= (value & 0b1111111u) << 4u;

        DCFG = curr;
    }

    /**
     * Get DCFG's NZStsOUTHShk bit.
     */
    USB0_DCFG_NZStsOUTHShk get_DCFG_NZStsOUTHShk()
    {
        return USB0_DCFG_NZStsOUTHShk(DCFG & (1u << 2u));
    }

    /**
     * Set DCFG's NZStsOUTHShk bit.
     */
    inline void set_DCFG_NZStsOUTHShk()
    {
        DCFG |= 1u << 2u;
    }

    /**
     * Clear DCFG's NZStsOUTHShk bit.
     */
    inline void clear_DCFG_NZStsOUTHShk()
    {
        DCFG &= ~(1u << 2u);
    }

    /**
     * Toggle DCFG's NZStsOUTHShk bit.
     */
    inline void toggle_DCFG_NZStsOUTHShk()
    {
        DCFG ^= 1u << 2u;
    }

    /**
     * Get DCFG's DevSpd field.
     */
    USB0_DCFG_DevSpd get_DCFG_DevSpd()
    {
        return USB0_DCFG_DevSpd((DCFG >> 0u) & 0b11u);
    }

    /**
     * Set DCFG's DevSpd field.
     */
    inline void set_DCFG_DevSpd(USB0_DCFG_DevSpd value)
    {
        uint32_t curr = DCFG;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        DCFG = curr;
    }

    /**
     * Get DCTL's EnContOnBNA bit.
     */
    USB0_DCTL_EnContOnBNA get_DCTL_EnContOnBNA()
    {
        return USB0_DCTL_EnContOnBNA(DCTL & (1u << 17u));
    }

    /**
     * Set DCTL's EnContOnBNA bit.
     */
    inline void set_DCTL_EnContOnBNA()
    {
        DCTL |= 1u << 17u;
    }

    /**
     * Clear DCTL's EnContOnBNA bit.
     */
    inline void clear_DCTL_EnContOnBNA()
    {
        DCTL &= ~(1u << 17u);
    }

    /**
     * Toggle DCTL's EnContOnBNA bit.
     */
    inline void toggle_DCTL_EnContOnBNA()
    {
        DCTL ^= 1u << 17u;
    }

    /**
     * Get DCTL's NakOnBble bit.
     */
    bool get_DCTL_NakOnBble()
    {
        return DCTL & (1u << 16u);
    }

    /**
     * Set DCTL's NakOnBble bit.
     */
    inline void set_DCTL_NakOnBble()
    {
        DCTL |= 1u << 16u;
    }

    /**
     * Clear DCTL's NakOnBble bit.
     */
    inline void clear_DCTL_NakOnBble()
    {
        DCTL &= ~(1u << 16u);
    }

    /**
     * Toggle DCTL's NakOnBble bit.
     */
    inline void toggle_DCTL_NakOnBble()
    {
        DCTL ^= 1u << 16u;
    }

    /**
     * Get DCTL's IgnrFrmNum bit.
     */
    USB0_DCTL_IgnrFrmNum get_DCTL_IgnrFrmNum()
    {
        return USB0_DCTL_IgnrFrmNum(DCTL & (1u << 15u));
    }

    /**
     * Set DCTL's IgnrFrmNum bit.
     */
    inline void set_DCTL_IgnrFrmNum()
    {
        DCTL |= 1u << 15u;
    }

    /**
     * Clear DCTL's IgnrFrmNum bit.
     */
    inline void clear_DCTL_IgnrFrmNum()
    {
        DCTL &= ~(1u << 15u);
    }

    /**
     * Toggle DCTL's IgnrFrmNum bit.
     */
    inline void toggle_DCTL_IgnrFrmNum()
    {
        DCTL ^= 1u << 15u;
    }

    /**
     * Get DCTL's GMC field.
     */
    USB0_DCTL_GMC get_DCTL_GMC()
    {
        return USB0_DCTL_GMC((DCTL >> 13u) & 0b11u);
    }

    /**
     * Set DCTL's GMC field.
     */
    inline void set_DCTL_GMC(USB0_DCTL_GMC value)
    {
        uint32_t curr = DCTL;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        DCTL = curr;
    }

    /**
     * Set DCTL's CGOUTNak bit.
     */
    inline void set_DCTL_CGOUTNak()
    {
        DCTL |= 1u << 10u;
    }

    /**
     * Clear DCTL's CGOUTNak bit.
     */
    inline void clear_DCTL_CGOUTNak()
    {
        DCTL &= ~(1u << 10u);
    }

    /**
     * Toggle DCTL's CGOUTNak bit.
     */
    inline void toggle_DCTL_CGOUTNak()
    {
        DCTL ^= 1u << 10u;
    }

    /**
     * Set DCTL's SGOUTNak bit.
     */
    inline void set_DCTL_SGOUTNak()
    {
        DCTL |= 1u << 9u;
    }

    /**
     * Clear DCTL's SGOUTNak bit.
     */
    inline void clear_DCTL_SGOUTNak()
    {
        DCTL &= ~(1u << 9u);
    }

    /**
     * Toggle DCTL's SGOUTNak bit.
     */
    inline void toggle_DCTL_SGOUTNak()
    {
        DCTL ^= 1u << 9u;
    }

    /**
     * Set DCTL's CGNPInNak bit.
     */
    inline void set_DCTL_CGNPInNak()
    {
        DCTL |= 1u << 8u;
    }

    /**
     * Clear DCTL's CGNPInNak bit.
     */
    inline void clear_DCTL_CGNPInNak()
    {
        DCTL &= ~(1u << 8u);
    }

    /**
     * Toggle DCTL's CGNPInNak bit.
     */
    inline void toggle_DCTL_CGNPInNak()
    {
        DCTL ^= 1u << 8u;
    }

    /**
     * Set DCTL's SGNPInNak bit.
     */
    inline void set_DCTL_SGNPInNak()
    {
        DCTL |= 1u << 7u;
    }

    /**
     * Clear DCTL's SGNPInNak bit.
     */
    inline void clear_DCTL_SGNPInNak()
    {
        DCTL &= ~(1u << 7u);
    }

    /**
     * Toggle DCTL's SGNPInNak bit.
     */
    inline void toggle_DCTL_SGNPInNak()
    {
        DCTL ^= 1u << 7u;
    }

    /**
     * Get DCTL's GOUTNakSts bit.
     */
    USB0_DCTL_GOUTNakSts get_DCTL_GOUTNakSts()
    {
        return USB0_DCTL_GOUTNakSts(DCTL & (1u << 3u));
    }

    /**
     * Get DCTL's GNPINNakSts bit.
     */
    USB0_DCTL_GNPINNakSts get_DCTL_GNPINNakSts()
    {
        return USB0_DCTL_GNPINNakSts(DCTL & (1u << 2u));
    }

    /**
     * Get DCTL's SftDiscon bit.
     */
    USB0_DCTL_SftDiscon get_DCTL_SftDiscon()
    {
        return USB0_DCTL_SftDiscon(DCTL & (1u << 1u));
    }

    /**
     * Set DCTL's SftDiscon bit.
     */
    inline void set_DCTL_SftDiscon()
    {
        DCTL |= 1u << 1u;
    }

    /**
     * Clear DCTL's SftDiscon bit.
     */
    inline void clear_DCTL_SftDiscon()
    {
        DCTL &= ~(1u << 1u);
    }

    /**
     * Toggle DCTL's SftDiscon bit.
     */
    inline void toggle_DCTL_SftDiscon()
    {
        DCTL ^= 1u << 1u;
    }

    /**
     * Get DCTL's RmtWkUpSig bit.
     */
    bool get_DCTL_RmtWkUpSig()
    {
        return DCTL & (1u << 0u);
    }

    /**
     * Set DCTL's RmtWkUpSig bit.
     */
    inline void set_DCTL_RmtWkUpSig()
    {
        DCTL |= 1u << 0u;
    }

    /**
     * Clear DCTL's RmtWkUpSig bit.
     */
    inline void clear_DCTL_RmtWkUpSig()
    {
        DCTL &= ~(1u << 0u);
    }

    /**
     * Toggle DCTL's RmtWkUpSig bit.
     */
    inline void toggle_DCTL_RmtWkUpSig()
    {
        DCTL ^= 1u << 0u;
    }

    /**
     * Get DSTS's SOFFN field.
     */
    uint16_t get_DSTS_SOFFN()
    {
        return (DSTS >> 8u) & 0b11111111111111u;
    }

    /**
     * Get DSTS's ErrticErr bit.
     */
    bool get_DSTS_ErrticErr()
    {
        return DSTS & (1u << 3u);
    }

    /**
     * Get DSTS's EnumSpd field.
     */
    USB0_DSTS_EnumSpd get_DSTS_EnumSpd()
    {
        return USB0_DSTS_EnumSpd((DSTS >> 1u) & 0b11u);
    }

    /**
     * Get DSTS's SuspSts bit.
     */
    bool get_DSTS_SuspSts()
    {
        return DSTS & (1u << 0u);
    }

    /**
     * Get DIEPMSK's NAKMsk bit.
     */
    bool get_DIEPMSK_NAKMsk()
    {
        return DIEPMSK & (1u << 13u);
    }

    /**
     * Set DIEPMSK's NAKMsk bit.
     */
    inline void set_DIEPMSK_NAKMsk()
    {
        DIEPMSK |= 1u << 13u;
    }

    /**
     * Clear DIEPMSK's NAKMsk bit.
     */
    inline void clear_DIEPMSK_NAKMsk()
    {
        DIEPMSK &= ~(1u << 13u);
    }

    /**
     * Toggle DIEPMSK's NAKMsk bit.
     */
    inline void toggle_DIEPMSK_NAKMsk()
    {
        DIEPMSK ^= 1u << 13u;
    }

    /**
     * Get DIEPMSK's BNAInIntrMsk bit.
     */
    bool get_DIEPMSK_BNAInIntrMsk()
    {
        return DIEPMSK & (1u << 9u);
    }

    /**
     * Set DIEPMSK's BNAInIntrMsk bit.
     */
    inline void set_DIEPMSK_BNAInIntrMsk()
    {
        DIEPMSK |= 1u << 9u;
    }

    /**
     * Clear DIEPMSK's BNAInIntrMsk bit.
     */
    inline void clear_DIEPMSK_BNAInIntrMsk()
    {
        DIEPMSK &= ~(1u << 9u);
    }

    /**
     * Toggle DIEPMSK's BNAInIntrMsk bit.
     */
    inline void toggle_DIEPMSK_BNAInIntrMsk()
    {
        DIEPMSK ^= 1u << 9u;
    }

    /**
     * Get DIEPMSK's TxfifoUndrnMsk bit.
     */
    bool get_DIEPMSK_TxfifoUndrnMsk()
    {
        return DIEPMSK & (1u << 8u);
    }

    /**
     * Set DIEPMSK's TxfifoUndrnMsk bit.
     */
    inline void set_DIEPMSK_TxfifoUndrnMsk()
    {
        DIEPMSK |= 1u << 8u;
    }

    /**
     * Clear DIEPMSK's TxfifoUndrnMsk bit.
     */
    inline void clear_DIEPMSK_TxfifoUndrnMsk()
    {
        DIEPMSK &= ~(1u << 8u);
    }

    /**
     * Toggle DIEPMSK's TxfifoUndrnMsk bit.
     */
    inline void toggle_DIEPMSK_TxfifoUndrnMsk()
    {
        DIEPMSK ^= 1u << 8u;
    }

    /**
     * Get DIEPMSK's INEPNakEffMsk bit.
     */
    bool get_DIEPMSK_INEPNakEffMsk()
    {
        return DIEPMSK & (1u << 6u);
    }

    /**
     * Set DIEPMSK's INEPNakEffMsk bit.
     */
    inline void set_DIEPMSK_INEPNakEffMsk()
    {
        DIEPMSK |= 1u << 6u;
    }

    /**
     * Clear DIEPMSK's INEPNakEffMsk bit.
     */
    inline void clear_DIEPMSK_INEPNakEffMsk()
    {
        DIEPMSK &= ~(1u << 6u);
    }

    /**
     * Toggle DIEPMSK's INEPNakEffMsk bit.
     */
    inline void toggle_DIEPMSK_INEPNakEffMsk()
    {
        DIEPMSK ^= 1u << 6u;
    }

    /**
     * Get DIEPMSK's INTknTXFEmpMsk bit.
     */
    bool get_DIEPMSK_INTknTXFEmpMsk()
    {
        return DIEPMSK & (1u << 4u);
    }

    /**
     * Set DIEPMSK's INTknTXFEmpMsk bit.
     */
    inline void set_DIEPMSK_INTknTXFEmpMsk()
    {
        DIEPMSK |= 1u << 4u;
    }

    /**
     * Clear DIEPMSK's INTknTXFEmpMsk bit.
     */
    inline void clear_DIEPMSK_INTknTXFEmpMsk()
    {
        DIEPMSK &= ~(1u << 4u);
    }

    /**
     * Toggle DIEPMSK's INTknTXFEmpMsk bit.
     */
    inline void toggle_DIEPMSK_INTknTXFEmpMsk()
    {
        DIEPMSK ^= 1u << 4u;
    }

    /**
     * Get DIEPMSK's TimeOUTMsk bit.
     */
    bool get_DIEPMSK_TimeOUTMsk()
    {
        return DIEPMSK & (1u << 3u);
    }

    /**
     * Set DIEPMSK's TimeOUTMsk bit.
     */
    inline void set_DIEPMSK_TimeOUTMsk()
    {
        DIEPMSK |= 1u << 3u;
    }

    /**
     * Clear DIEPMSK's TimeOUTMsk bit.
     */
    inline void clear_DIEPMSK_TimeOUTMsk()
    {
        DIEPMSK &= ~(1u << 3u);
    }

    /**
     * Toggle DIEPMSK's TimeOUTMsk bit.
     */
    inline void toggle_DIEPMSK_TimeOUTMsk()
    {
        DIEPMSK ^= 1u << 3u;
    }

    /**
     * Get DIEPMSK's AHBErrMsk bit.
     */
    bool get_DIEPMSK_AHBErrMsk()
    {
        return DIEPMSK & (1u << 2u);
    }

    /**
     * Set DIEPMSK's AHBErrMsk bit.
     */
    inline void set_DIEPMSK_AHBErrMsk()
    {
        DIEPMSK |= 1u << 2u;
    }

    /**
     * Clear DIEPMSK's AHBErrMsk bit.
     */
    inline void clear_DIEPMSK_AHBErrMsk()
    {
        DIEPMSK &= ~(1u << 2u);
    }

    /**
     * Toggle DIEPMSK's AHBErrMsk bit.
     */
    inline void toggle_DIEPMSK_AHBErrMsk()
    {
        DIEPMSK ^= 1u << 2u;
    }

    /**
     * Get DIEPMSK's EPDisbldMsk bit.
     */
    bool get_DIEPMSK_EPDisbldMsk()
    {
        return DIEPMSK & (1u << 1u);
    }

    /**
     * Set DIEPMSK's EPDisbldMsk bit.
     */
    inline void set_DIEPMSK_EPDisbldMsk()
    {
        DIEPMSK |= 1u << 1u;
    }

    /**
     * Clear DIEPMSK's EPDisbldMsk bit.
     */
    inline void clear_DIEPMSK_EPDisbldMsk()
    {
        DIEPMSK &= ~(1u << 1u);
    }

    /**
     * Toggle DIEPMSK's EPDisbldMsk bit.
     */
    inline void toggle_DIEPMSK_EPDisbldMsk()
    {
        DIEPMSK ^= 1u << 1u;
    }

    /**
     * Get DIEPMSK's XferComplMsk bit.
     */
    bool get_DIEPMSK_XferComplMsk()
    {
        return DIEPMSK & (1u << 0u);
    }

    /**
     * Set DIEPMSK's XferComplMsk bit.
     */
    inline void set_DIEPMSK_XferComplMsk()
    {
        DIEPMSK |= 1u << 0u;
    }

    /**
     * Clear DIEPMSK's XferComplMsk bit.
     */
    inline void clear_DIEPMSK_XferComplMsk()
    {
        DIEPMSK &= ~(1u << 0u);
    }

    /**
     * Toggle DIEPMSK's XferComplMsk bit.
     */
    inline void toggle_DIEPMSK_XferComplMsk()
    {
        DIEPMSK ^= 1u << 0u;
    }

    /**
     * Get DOEPMSK's NYETMsk bit.
     */
    bool get_DOEPMSK_NYETMsk()
    {
        return DOEPMSK & (1u << 14u);
    }

    /**
     * Set DOEPMSK's NYETMsk bit.
     */
    inline void set_DOEPMSK_NYETMsk()
    {
        DOEPMSK |= 1u << 14u;
    }

    /**
     * Clear DOEPMSK's NYETMsk bit.
     */
    inline void clear_DOEPMSK_NYETMsk()
    {
        DOEPMSK &= ~(1u << 14u);
    }

    /**
     * Toggle DOEPMSK's NYETMsk bit.
     */
    inline void toggle_DOEPMSK_NYETMsk()
    {
        DOEPMSK ^= 1u << 14u;
    }

    /**
     * Get DOEPMSK's NAKMsk bit.
     */
    bool get_DOEPMSK_NAKMsk()
    {
        return DOEPMSK & (1u << 13u);
    }

    /**
     * Set DOEPMSK's NAKMsk bit.
     */
    inline void set_DOEPMSK_NAKMsk()
    {
        DOEPMSK |= 1u << 13u;
    }

    /**
     * Clear DOEPMSK's NAKMsk bit.
     */
    inline void clear_DOEPMSK_NAKMsk()
    {
        DOEPMSK &= ~(1u << 13u);
    }

    /**
     * Toggle DOEPMSK's NAKMsk bit.
     */
    inline void toggle_DOEPMSK_NAKMsk()
    {
        DOEPMSK ^= 1u << 13u;
    }

    /**
     * Get DOEPMSK's BbleErrMsk bit.
     */
    bool get_DOEPMSK_BbleErrMsk()
    {
        return DOEPMSK & (1u << 12u);
    }

    /**
     * Set DOEPMSK's BbleErrMsk bit.
     */
    inline void set_DOEPMSK_BbleErrMsk()
    {
        DOEPMSK |= 1u << 12u;
    }

    /**
     * Clear DOEPMSK's BbleErrMsk bit.
     */
    inline void clear_DOEPMSK_BbleErrMsk()
    {
        DOEPMSK &= ~(1u << 12u);
    }

    /**
     * Toggle DOEPMSK's BbleErrMsk bit.
     */
    inline void toggle_DOEPMSK_BbleErrMsk()
    {
        DOEPMSK ^= 1u << 12u;
    }

    /**
     * Get DOEPMSK's BnaOutIntrMsk bit.
     */
    bool get_DOEPMSK_BnaOutIntrMsk()
    {
        return DOEPMSK & (1u << 9u);
    }

    /**
     * Set DOEPMSK's BnaOutIntrMsk bit.
     */
    inline void set_DOEPMSK_BnaOutIntrMsk()
    {
        DOEPMSK |= 1u << 9u;
    }

    /**
     * Clear DOEPMSK's BnaOutIntrMsk bit.
     */
    inline void clear_DOEPMSK_BnaOutIntrMsk()
    {
        DOEPMSK &= ~(1u << 9u);
    }

    /**
     * Toggle DOEPMSK's BnaOutIntrMsk bit.
     */
    inline void toggle_DOEPMSK_BnaOutIntrMsk()
    {
        DOEPMSK ^= 1u << 9u;
    }

    /**
     * Get DOEPMSK's OutPktErrMsk bit.
     */
    bool get_DOEPMSK_OutPktErrMsk()
    {
        return DOEPMSK & (1u << 8u);
    }

    /**
     * Set DOEPMSK's OutPktErrMsk bit.
     */
    inline void set_DOEPMSK_OutPktErrMsk()
    {
        DOEPMSK |= 1u << 8u;
    }

    /**
     * Clear DOEPMSK's OutPktErrMsk bit.
     */
    inline void clear_DOEPMSK_OutPktErrMsk()
    {
        DOEPMSK &= ~(1u << 8u);
    }

    /**
     * Toggle DOEPMSK's OutPktErrMsk bit.
     */
    inline void toggle_DOEPMSK_OutPktErrMsk()
    {
        DOEPMSK ^= 1u << 8u;
    }

    /**
     * Get DOEPMSK's Back2BackSETup bit.
     */
    bool get_DOEPMSK_Back2BackSETup()
    {
        return DOEPMSK & (1u << 6u);
    }

    /**
     * Set DOEPMSK's Back2BackSETup bit.
     */
    inline void set_DOEPMSK_Back2BackSETup()
    {
        DOEPMSK |= 1u << 6u;
    }

    /**
     * Clear DOEPMSK's Back2BackSETup bit.
     */
    inline void clear_DOEPMSK_Back2BackSETup()
    {
        DOEPMSK &= ~(1u << 6u);
    }

    /**
     * Toggle DOEPMSK's Back2BackSETup bit.
     */
    inline void toggle_DOEPMSK_Back2BackSETup()
    {
        DOEPMSK ^= 1u << 6u;
    }

    /**
     * Get DOEPMSK's OUTTknEPdisMsk bit.
     */
    bool get_DOEPMSK_OUTTknEPdisMsk()
    {
        return DOEPMSK & (1u << 4u);
    }

    /**
     * Set DOEPMSK's OUTTknEPdisMsk bit.
     */
    inline void set_DOEPMSK_OUTTknEPdisMsk()
    {
        DOEPMSK |= 1u << 4u;
    }

    /**
     * Clear DOEPMSK's OUTTknEPdisMsk bit.
     */
    inline void clear_DOEPMSK_OUTTknEPdisMsk()
    {
        DOEPMSK &= ~(1u << 4u);
    }

    /**
     * Toggle DOEPMSK's OUTTknEPdisMsk bit.
     */
    inline void toggle_DOEPMSK_OUTTknEPdisMsk()
    {
        DOEPMSK ^= 1u << 4u;
    }

    /**
     * Get DOEPMSK's SetUPMsk bit.
     */
    bool get_DOEPMSK_SetUPMsk()
    {
        return DOEPMSK & (1u << 3u);
    }

    /**
     * Set DOEPMSK's SetUPMsk bit.
     */
    inline void set_DOEPMSK_SetUPMsk()
    {
        DOEPMSK |= 1u << 3u;
    }

    /**
     * Clear DOEPMSK's SetUPMsk bit.
     */
    inline void clear_DOEPMSK_SetUPMsk()
    {
        DOEPMSK &= ~(1u << 3u);
    }

    /**
     * Toggle DOEPMSK's SetUPMsk bit.
     */
    inline void toggle_DOEPMSK_SetUPMsk()
    {
        DOEPMSK ^= 1u << 3u;
    }

    /**
     * Get DOEPMSK's AHBErrMsk bit.
     */
    bool get_DOEPMSK_AHBErrMsk()
    {
        return DOEPMSK & (1u << 2u);
    }

    /**
     * Set DOEPMSK's AHBErrMsk bit.
     */
    inline void set_DOEPMSK_AHBErrMsk()
    {
        DOEPMSK |= 1u << 2u;
    }

    /**
     * Clear DOEPMSK's AHBErrMsk bit.
     */
    inline void clear_DOEPMSK_AHBErrMsk()
    {
        DOEPMSK &= ~(1u << 2u);
    }

    /**
     * Toggle DOEPMSK's AHBErrMsk bit.
     */
    inline void toggle_DOEPMSK_AHBErrMsk()
    {
        DOEPMSK ^= 1u << 2u;
    }

    /**
     * Get DOEPMSK's EPDisbldMsk bit.
     */
    bool get_DOEPMSK_EPDisbldMsk()
    {
        return DOEPMSK & (1u << 1u);
    }

    /**
     * Set DOEPMSK's EPDisbldMsk bit.
     */
    inline void set_DOEPMSK_EPDisbldMsk()
    {
        DOEPMSK |= 1u << 1u;
    }

    /**
     * Clear DOEPMSK's EPDisbldMsk bit.
     */
    inline void clear_DOEPMSK_EPDisbldMsk()
    {
        DOEPMSK &= ~(1u << 1u);
    }

    /**
     * Toggle DOEPMSK's EPDisbldMsk bit.
     */
    inline void toggle_DOEPMSK_EPDisbldMsk()
    {
        DOEPMSK ^= 1u << 1u;
    }

    /**
     * Get DOEPMSK's XferComplMsk bit.
     */
    bool get_DOEPMSK_XferComplMsk()
    {
        return DOEPMSK & (1u << 0u);
    }

    /**
     * Set DOEPMSK's XferComplMsk bit.
     */
    inline void set_DOEPMSK_XferComplMsk()
    {
        DOEPMSK |= 1u << 0u;
    }

    /**
     * Clear DOEPMSK's XferComplMsk bit.
     */
    inline void clear_DOEPMSK_XferComplMsk()
    {
        DOEPMSK &= ~(1u << 0u);
    }

    /**
     * Toggle DOEPMSK's XferComplMsk bit.
     */
    inline void toggle_DOEPMSK_XferComplMsk()
    {
        DOEPMSK ^= 1u << 0u;
    }

    /**
     * Get DAINT's OutEPInt field.
     */
    uint16_t get_DAINT_OutEPInt()
    {
        return (DAINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get DAINT's InEpInt field.
     */
    uint16_t get_DAINT_InEpInt()
    {
        return (DAINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get DAINTMSK's OutEpMsk field.
     */
    uint16_t get_DAINTMSK_OutEpMsk()
    {
        return (DAINTMSK >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DAINTMSK's OutEpMsk field.
     */
    inline void set_DAINTMSK_OutEpMsk(uint16_t value)
    {
        uint32_t curr = DAINTMSK;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DAINTMSK = curr;
    }

    /**
     * Get DAINTMSK's InEpMsk field.
     */
    uint16_t get_DAINTMSK_InEpMsk()
    {
        return (DAINTMSK >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DAINTMSK's InEpMsk field.
     */
    inline void set_DAINTMSK_InEpMsk(uint16_t value)
    {
        uint32_t curr = DAINTMSK;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DAINTMSK = curr;
    }

    /**
     * Get DVBUSDIS's DVBUSDis field.
     */
    uint16_t get_DVBUSDIS_DVBUSDis()
    {
        return (DVBUSDIS >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DVBUSDIS's DVBUSDis field.
     */
    inline void set_DVBUSDIS_DVBUSDis(uint16_t value)
    {
        uint32_t curr = DVBUSDIS;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DVBUSDIS = curr;
    }

    /**
     * Get DVBUSPULSE's DVBUSPulse field.
     */
    uint16_t get_DVBUSPULSE_DVBUSPulse()
    {
        return (DVBUSPULSE >> 0u) & 0b111111111111u;
    }

    /**
     * Set DVBUSPULSE's DVBUSPulse field.
     */
    inline void set_DVBUSPULSE_DVBUSPulse(uint16_t value)
    {
        uint32_t curr = DVBUSPULSE;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        DVBUSPULSE = curr;
    }

    /**
     * Get DIEPEMPMSK's InEpTxfEmpMsk field.
     */
    uint16_t get_DIEPEMPMSK_InEpTxfEmpMsk()
    {
        return (DIEPEMPMSK >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPEMPMSK's InEpTxfEmpMsk field.
     */
    inline void set_DIEPEMPMSK_InEpTxfEmpMsk(uint16_t value)
    {
        uint32_t curr = DIEPEMPMSK;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPEMPMSK = curr;
    }

    /**
     * Get PCGCCTL's GateHclk bit.
     */
    bool get_PCGCCTL_GateHclk()
    {
        return PCGCCTL & (1u << 1u);
    }

    /**
     * Set PCGCCTL's GateHclk bit.
     */
    inline void set_PCGCCTL_GateHclk()
    {
        PCGCCTL |= 1u << 1u;
    }

    /**
     * Clear PCGCCTL's GateHclk bit.
     */
    inline void clear_PCGCCTL_GateHclk()
    {
        PCGCCTL &= ~(1u << 1u);
    }

    /**
     * Toggle PCGCCTL's GateHclk bit.
     */
    inline void toggle_PCGCCTL_GateHclk()
    {
        PCGCCTL ^= 1u << 1u;
    }

    /**
     * Get PCGCCTL's StopPclk bit.
     */
    bool get_PCGCCTL_StopPclk()
    {
        return PCGCCTL & (1u << 0u);
    }

    /**
     * Set PCGCCTL's StopPclk bit.
     */
    inline void set_PCGCCTL_StopPclk()
    {
        PCGCCTL |= 1u << 0u;
    }

    /**
     * Clear PCGCCTL's StopPclk bit.
     */
    inline void clear_PCGCCTL_StopPclk()
    {
        PCGCCTL &= ~(1u << 0u);
    }

    /**
     * Toggle PCGCCTL's StopPclk bit.
     */
    inline void toggle_PCGCCTL_StopPclk()
    {
        PCGCCTL ^= 1u << 0u;
    }
};

static_assert(sizeof(usb) == usb::size);

static volatile usb *const USB0 = reinterpret_cast<usb *>(0x50040000);

}; // namespace XMC4700
