/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include "../enums/SCU_PRCLR0_CCU40RS.h"
#include "../enums/SCU_PRCLR0_CCU41RS.h"
#include "../enums/SCU_PRCLR0_CCU42RS.h"
#include "../enums/SCU_PRCLR0_CCU80RS.h"
#include "../enums/SCU_PRCLR0_CCU81RS.h"
#include "../enums/SCU_PRCLR0_DSDRS.h"
#include "../enums/SCU_PRCLR0_ERU1RS.h"
#include "../enums/SCU_PRCLR0_POSIF0RS.h"
#include "../enums/SCU_PRCLR0_POSIF1RS.h"
#include "../enums/SCU_PRCLR0_USIC0RS.h"
#include "../enums/SCU_PRCLR0_VADCRS.h"
#include "../enums/SCU_PRCLR1_CCU43RS.h"
#include "../enums/SCU_PRCLR1_DACRS.h"
#include "../enums/SCU_PRCLR1_LEDTSCU0RS.h"
#include "../enums/SCU_PRCLR1_MCAN0RS.h"
#include "../enums/SCU_PRCLR1_MMCIRS.h"
#include "../enums/SCU_PRCLR1_PPORTSRS.h"
#include "../enums/SCU_PRCLR1_USIC1RS.h"
#include "../enums/SCU_PRCLR1_USIC2RS.h"
#include "../enums/SCU_PRCLR2_DMA0RS.h"
#include "../enums/SCU_PRCLR2_DMA1RS.h"
#include "../enums/SCU_PRCLR2_ETH0RS.h"
#include "../enums/SCU_PRCLR2_FCERS.h"
#include "../enums/SCU_PRCLR2_USBRS.h"
#include "../enums/SCU_PRCLR2_WDTRS.h"
#include "../enums/SCU_PRCLR3_EBURS.h"
#include "../enums/SCU_PRSET0_CCU40RS.h"
#include "../enums/SCU_PRSET0_CCU41RS.h"
#include "../enums/SCU_PRSET0_CCU42RS.h"
#include "../enums/SCU_PRSET0_CCU80RS.h"
#include "../enums/SCU_PRSET0_CCU81RS.h"
#include "../enums/SCU_PRSET0_DSDRS.h"
#include "../enums/SCU_PRSET0_ERU1RS.h"
#include "../enums/SCU_PRSET0_POSIF0RS.h"
#include "../enums/SCU_PRSET0_POSIF1RS.h"
#include "../enums/SCU_PRSET0_USIC0RS.h"
#include "../enums/SCU_PRSET0_VADCRS.h"
#include "../enums/SCU_PRSET1_CCU43RS.h"
#include "../enums/SCU_PRSET1_DACRS.h"
#include "../enums/SCU_PRSET1_LEDTSCU0RS.h"
#include "../enums/SCU_PRSET1_MCAN0RS.h"
#include "../enums/SCU_PRSET1_MMCIRS.h"
#include "../enums/SCU_PRSET1_PPORTSRS.h"
#include "../enums/SCU_PRSET1_USIC1RS.h"
#include "../enums/SCU_PRSET1_USIC2RS.h"
#include "../enums/SCU_PRSET2_DMA0RS.h"
#include "../enums/SCU_PRSET2_DMA1RS.h"
#include "../enums/SCU_PRSET2_ETH0RS.h"
#include "../enums/SCU_PRSET2_FCERS.h"
#include "../enums/SCU_PRSET2_USBRS.h"
#include "../enums/SCU_PRSET2_WDTRS.h"
#include "../enums/SCU_PRSET3_EBURS.h"
#include "../enums/SCU_PRSTAT0_CCU40RS.h"
#include "../enums/SCU_PRSTAT0_CCU41RS.h"
#include "../enums/SCU_PRSTAT0_CCU42RS.h"
#include "../enums/SCU_PRSTAT0_CCU80RS.h"
#include "../enums/SCU_PRSTAT0_CCU81RS.h"
#include "../enums/SCU_PRSTAT0_DSDRS.h"
#include "../enums/SCU_PRSTAT0_ERU1RS.h"
#include "../enums/SCU_PRSTAT0_POSIF0RS.h"
#include "../enums/SCU_PRSTAT0_POSIF1RS.h"
#include "../enums/SCU_PRSTAT0_USIC0RS.h"
#include "../enums/SCU_PRSTAT0_VADCRS.h"
#include "../enums/SCU_PRSTAT1_CCU43RS.h"
#include "../enums/SCU_PRSTAT1_DACRS.h"
#include "../enums/SCU_PRSTAT1_LEDTSCU0RS.h"
#include "../enums/SCU_PRSTAT1_MCAN0RS.h"
#include "../enums/SCU_PRSTAT1_MMCIRS.h"
#include "../enums/SCU_PRSTAT1_PPORTSRS.h"
#include "../enums/SCU_PRSTAT1_USIC1RS.h"
#include "../enums/SCU_PRSTAT1_USIC2RS.h"
#include "../enums/SCU_PRSTAT2_DMA0RS.h"
#include "../enums/SCU_PRSTAT2_DMA1RS.h"
#include "../enums/SCU_PRSTAT2_ETH0RS.h"
#include "../enums/SCU_PRSTAT2_FCERS.h"
#include "../enums/SCU_PRSTAT2_USBRS.h"
#include "../enums/SCU_PRSTAT2_WDTRS.h"
#include "../enums/SCU_PRSTAT3_EBURS.h"
#include "../enums/SCU_RSTCLR_HIBRS.h"
#include "../enums/SCU_RSTCLR_HIBWK.h"
#include "../enums/SCU_RSTCLR_LCKEN.h"
#include "../enums/SCU_RSTCLR_RSCLR.h"
#include "../enums/SCU_RSTSET_HIBRS.h"
#include "../enums/SCU_RSTSET_HIBWK.h"
#include "../enums/SCU_RSTSET_LCKEN.h"
#include "../enums/SCU_RSTSTAT_HIBRS.h"
#include "../enums/SCU_RSTSTAT_HIBWK.h"
#include "../enums/SCU_RSTSTAT_LCKEN.h"
#include "../enums/SCU_RSTSTAT_RSTSTAT.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * System Control Unit
 */
struct [[gnu::packed]] scu
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< scu's identifier. */
    static constexpr std::size_t size = 60; /*!< scu's size in bytes. */

    /* Fields. */
    const uint32_t RSTSTAT = {}; /*!< (read-only) RCU Reset Status */
    uint32_t RSTSET;             /*!< (write-only) RCU Reset Set Register */
    uint32_t RSTCLR;             /*!< (write-only) RCU Reset Clear Register */
    const uint32_t PRSTAT0 =
        {};          /*!< (read-only) RCU Peripheral 0 Reset Status */
    uint32_t PRSET0; /*!< (write-only) RCU Peripheral 0 Reset Set */
    uint32_t PRCLR0; /*!< (write-only) RCU Peripheral 0 Reset Clear */
    const uint32_t PRSTAT1 =
        {};          /*!< (read-only) RCU Peripheral 1 Reset Status */
    uint32_t PRSET1; /*!< (write-only) RCU Peripheral 1 Reset Set */
    uint32_t PRCLR1; /*!< (write-only) RCU Peripheral 1 Reset Clear */
    const uint32_t PRSTAT2 =
        {};          /*!< (read-only) RCU Peripheral 2 Reset Status */
    uint32_t PRSET2; /*!< (write-only) RCU Peripheral 2 Reset Set */
    uint32_t PRCLR2; /*!< (write-only) RCU Peripheral 2 Reset Clear */
    const uint32_t PRSTAT3 =
        {};          /*!< (read-only) RCU Peripheral 3 Reset Status */
    uint32_t PRSET3; /*!< (write-only) RCU Peripheral 3 Reset Set */
    uint32_t PRCLR3; /*!< (write-only) RCU Peripheral 3 Reset Clear */

    /* Methods. */

    /**
     * Get RSTSTAT's LCKEN bit.
     */
    SCU_RSTSTAT_LCKEN get_RSTSTAT_LCKEN()
    {
        return SCU_RSTSTAT_LCKEN(RSTSTAT & (1u << 10u));
    }

    /**
     * Get RSTSTAT's HIBRS bit.
     */
    SCU_RSTSTAT_HIBRS get_RSTSTAT_HIBRS()
    {
        return SCU_RSTSTAT_HIBRS(RSTSTAT & (1u << 9u));
    }

    /**
     * Get RSTSTAT's HIBWK bit.
     */
    SCU_RSTSTAT_HIBWK get_RSTSTAT_HIBWK()
    {
        return SCU_RSTSTAT_HIBWK(RSTSTAT & (1u << 8u));
    }

    /**
     * Get RSTSTAT's RSTSTAT field.
     */
    SCU_RSTSTAT_RSTSTAT get_RSTSTAT_RSTSTAT()
    {
        return SCU_RSTSTAT_RSTSTAT((RSTSTAT >> 0u) & 0b11111111u);
    }

    /**
     * Set RSTSET's LCKEN bit.
     */
    inline void set_RSTSET_LCKEN()
    {
        RSTSET |= 1u << 10u;
    }

    /**
     * Clear RSTSET's LCKEN bit.
     */
    inline void clear_RSTSET_LCKEN()
    {
        RSTSET &= ~(1u << 10u);
    }

    /**
     * Toggle RSTSET's LCKEN bit.
     */
    inline void toggle_RSTSET_LCKEN()
    {
        RSTSET ^= 1u << 10u;
    }

    /**
     * Set RSTSET's HIBRS bit.
     */
    inline void set_RSTSET_HIBRS()
    {
        RSTSET |= 1u << 9u;
    }

    /**
     * Clear RSTSET's HIBRS bit.
     */
    inline void clear_RSTSET_HIBRS()
    {
        RSTSET &= ~(1u << 9u);
    }

    /**
     * Toggle RSTSET's HIBRS bit.
     */
    inline void toggle_RSTSET_HIBRS()
    {
        RSTSET ^= 1u << 9u;
    }

    /**
     * Set RSTSET's HIBWK bit.
     */
    inline void set_RSTSET_HIBWK()
    {
        RSTSET |= 1u << 8u;
    }

    /**
     * Clear RSTSET's HIBWK bit.
     */
    inline void clear_RSTSET_HIBWK()
    {
        RSTSET &= ~(1u << 8u);
    }

    /**
     * Toggle RSTSET's HIBWK bit.
     */
    inline void toggle_RSTSET_HIBWK()
    {
        RSTSET ^= 1u << 8u;
    }

    /**
     * Set RSTCLR's LCKEN bit.
     */
    inline void set_RSTCLR_LCKEN()
    {
        RSTCLR |= 1u << 10u;
    }

    /**
     * Clear RSTCLR's LCKEN bit.
     */
    inline void clear_RSTCLR_LCKEN()
    {
        RSTCLR &= ~(1u << 10u);
    }

    /**
     * Toggle RSTCLR's LCKEN bit.
     */
    inline void toggle_RSTCLR_LCKEN()
    {
        RSTCLR ^= 1u << 10u;
    }

    /**
     * Set RSTCLR's HIBRS bit.
     */
    inline void set_RSTCLR_HIBRS()
    {
        RSTCLR |= 1u << 9u;
    }

    /**
     * Clear RSTCLR's HIBRS bit.
     */
    inline void clear_RSTCLR_HIBRS()
    {
        RSTCLR &= ~(1u << 9u);
    }

    /**
     * Toggle RSTCLR's HIBRS bit.
     */
    inline void toggle_RSTCLR_HIBRS()
    {
        RSTCLR ^= 1u << 9u;
    }

    /**
     * Set RSTCLR's HIBWK bit.
     */
    inline void set_RSTCLR_HIBWK()
    {
        RSTCLR |= 1u << 8u;
    }

    /**
     * Clear RSTCLR's HIBWK bit.
     */
    inline void clear_RSTCLR_HIBWK()
    {
        RSTCLR &= ~(1u << 8u);
    }

    /**
     * Toggle RSTCLR's HIBWK bit.
     */
    inline void toggle_RSTCLR_HIBWK()
    {
        RSTCLR ^= 1u << 8u;
    }

    /**
     * Set RSTCLR's RSCLR bit.
     */
    inline void set_RSTCLR_RSCLR()
    {
        RSTCLR |= 1u << 0u;
    }

    /**
     * Clear RSTCLR's RSCLR bit.
     */
    inline void clear_RSTCLR_RSCLR()
    {
        RSTCLR &= ~(1u << 0u);
    }

    /**
     * Toggle RSTCLR's RSCLR bit.
     */
    inline void toggle_RSTCLR_RSCLR()
    {
        RSTCLR ^= 1u << 0u;
    }

    /**
     * Get PRSTAT0's ERU1RS bit.
     */
    SCU_PRSTAT0_ERU1RS get_PRSTAT0_ERU1RS()
    {
        return SCU_PRSTAT0_ERU1RS(PRSTAT0 & (1u << 16u));
    }

    /**
     * Get PRSTAT0's USIC0RS bit.
     */
    SCU_PRSTAT0_USIC0RS get_PRSTAT0_USIC0RS()
    {
        return SCU_PRSTAT0_USIC0RS(PRSTAT0 & (1u << 11u));
    }

    /**
     * Get PRSTAT0's POSIF1RS bit.
     */
    SCU_PRSTAT0_POSIF1RS get_PRSTAT0_POSIF1RS()
    {
        return SCU_PRSTAT0_POSIF1RS(PRSTAT0 & (1u << 10u));
    }

    /**
     * Get PRSTAT0's POSIF0RS bit.
     */
    SCU_PRSTAT0_POSIF0RS get_PRSTAT0_POSIF0RS()
    {
        return SCU_PRSTAT0_POSIF0RS(PRSTAT0 & (1u << 9u));
    }

    /**
     * Get PRSTAT0's CCU81RS bit.
     */
    SCU_PRSTAT0_CCU81RS get_PRSTAT0_CCU81RS()
    {
        return SCU_PRSTAT0_CCU81RS(PRSTAT0 & (1u << 8u));
    }

    /**
     * Get PRSTAT0's CCU80RS bit.
     */
    SCU_PRSTAT0_CCU80RS get_PRSTAT0_CCU80RS()
    {
        return SCU_PRSTAT0_CCU80RS(PRSTAT0 & (1u << 7u));
    }

    /**
     * Get PRSTAT0's CCU42RS bit.
     */
    SCU_PRSTAT0_CCU42RS get_PRSTAT0_CCU42RS()
    {
        return SCU_PRSTAT0_CCU42RS(PRSTAT0 & (1u << 4u));
    }

    /**
     * Get PRSTAT0's CCU41RS bit.
     */
    SCU_PRSTAT0_CCU41RS get_PRSTAT0_CCU41RS()
    {
        return SCU_PRSTAT0_CCU41RS(PRSTAT0 & (1u << 3u));
    }

    /**
     * Get PRSTAT0's CCU40RS bit.
     */
    SCU_PRSTAT0_CCU40RS get_PRSTAT0_CCU40RS()
    {
        return SCU_PRSTAT0_CCU40RS(PRSTAT0 & (1u << 2u));
    }

    /**
     * Get PRSTAT0's DSDRS bit.
     */
    SCU_PRSTAT0_DSDRS get_PRSTAT0_DSDRS()
    {
        return SCU_PRSTAT0_DSDRS(PRSTAT0 & (1u << 1u));
    }

    /**
     * Get PRSTAT0's VADCRS bit.
     */
    SCU_PRSTAT0_VADCRS get_PRSTAT0_VADCRS()
    {
        return SCU_PRSTAT0_VADCRS(PRSTAT0 & (1u << 0u));
    }

    /**
     * Set PRSET0's ERU1RS bit.
     */
    inline void set_PRSET0_ERU1RS()
    {
        PRSET0 |= 1u << 16u;
    }

    /**
     * Clear PRSET0's ERU1RS bit.
     */
    inline void clear_PRSET0_ERU1RS()
    {
        PRSET0 &= ~(1u << 16u);
    }

    /**
     * Toggle PRSET0's ERU1RS bit.
     */
    inline void toggle_PRSET0_ERU1RS()
    {
        PRSET0 ^= 1u << 16u;
    }

    /**
     * Set PRSET0's USIC0RS bit.
     */
    inline void set_PRSET0_USIC0RS()
    {
        PRSET0 |= 1u << 11u;
    }

    /**
     * Clear PRSET0's USIC0RS bit.
     */
    inline void clear_PRSET0_USIC0RS()
    {
        PRSET0 &= ~(1u << 11u);
    }

    /**
     * Toggle PRSET0's USIC0RS bit.
     */
    inline void toggle_PRSET0_USIC0RS()
    {
        PRSET0 ^= 1u << 11u;
    }

    /**
     * Set PRSET0's POSIF1RS bit.
     */
    inline void set_PRSET0_POSIF1RS()
    {
        PRSET0 |= 1u << 10u;
    }

    /**
     * Clear PRSET0's POSIF1RS bit.
     */
    inline void clear_PRSET0_POSIF1RS()
    {
        PRSET0 &= ~(1u << 10u);
    }

    /**
     * Toggle PRSET0's POSIF1RS bit.
     */
    inline void toggle_PRSET0_POSIF1RS()
    {
        PRSET0 ^= 1u << 10u;
    }

    /**
     * Set PRSET0's POSIF0RS bit.
     */
    inline void set_PRSET0_POSIF0RS()
    {
        PRSET0 |= 1u << 9u;
    }

    /**
     * Clear PRSET0's POSIF0RS bit.
     */
    inline void clear_PRSET0_POSIF0RS()
    {
        PRSET0 &= ~(1u << 9u);
    }

    /**
     * Toggle PRSET0's POSIF0RS bit.
     */
    inline void toggle_PRSET0_POSIF0RS()
    {
        PRSET0 ^= 1u << 9u;
    }

    /**
     * Set PRSET0's CCU81RS bit.
     */
    inline void set_PRSET0_CCU81RS()
    {
        PRSET0 |= 1u << 8u;
    }

    /**
     * Clear PRSET0's CCU81RS bit.
     */
    inline void clear_PRSET0_CCU81RS()
    {
        PRSET0 &= ~(1u << 8u);
    }

    /**
     * Toggle PRSET0's CCU81RS bit.
     */
    inline void toggle_PRSET0_CCU81RS()
    {
        PRSET0 ^= 1u << 8u;
    }

    /**
     * Set PRSET0's CCU80RS bit.
     */
    inline void set_PRSET0_CCU80RS()
    {
        PRSET0 |= 1u << 7u;
    }

    /**
     * Clear PRSET0's CCU80RS bit.
     */
    inline void clear_PRSET0_CCU80RS()
    {
        PRSET0 &= ~(1u << 7u);
    }

    /**
     * Toggle PRSET0's CCU80RS bit.
     */
    inline void toggle_PRSET0_CCU80RS()
    {
        PRSET0 ^= 1u << 7u;
    }

    /**
     * Set PRSET0's CCU42RS bit.
     */
    inline void set_PRSET0_CCU42RS()
    {
        PRSET0 |= 1u << 4u;
    }

    /**
     * Clear PRSET0's CCU42RS bit.
     */
    inline void clear_PRSET0_CCU42RS()
    {
        PRSET0 &= ~(1u << 4u);
    }

    /**
     * Toggle PRSET0's CCU42RS bit.
     */
    inline void toggle_PRSET0_CCU42RS()
    {
        PRSET0 ^= 1u << 4u;
    }

    /**
     * Set PRSET0's CCU41RS bit.
     */
    inline void set_PRSET0_CCU41RS()
    {
        PRSET0 |= 1u << 3u;
    }

    /**
     * Clear PRSET0's CCU41RS bit.
     */
    inline void clear_PRSET0_CCU41RS()
    {
        PRSET0 &= ~(1u << 3u);
    }

    /**
     * Toggle PRSET0's CCU41RS bit.
     */
    inline void toggle_PRSET0_CCU41RS()
    {
        PRSET0 ^= 1u << 3u;
    }

    /**
     * Set PRSET0's CCU40RS bit.
     */
    inline void set_PRSET0_CCU40RS()
    {
        PRSET0 |= 1u << 2u;
    }

    /**
     * Clear PRSET0's CCU40RS bit.
     */
    inline void clear_PRSET0_CCU40RS()
    {
        PRSET0 &= ~(1u << 2u);
    }

    /**
     * Toggle PRSET0's CCU40RS bit.
     */
    inline void toggle_PRSET0_CCU40RS()
    {
        PRSET0 ^= 1u << 2u;
    }

    /**
     * Set PRSET0's DSDRS bit.
     */
    inline void set_PRSET0_DSDRS()
    {
        PRSET0 |= 1u << 1u;
    }

    /**
     * Clear PRSET0's DSDRS bit.
     */
    inline void clear_PRSET0_DSDRS()
    {
        PRSET0 &= ~(1u << 1u);
    }

    /**
     * Toggle PRSET0's DSDRS bit.
     */
    inline void toggle_PRSET0_DSDRS()
    {
        PRSET0 ^= 1u << 1u;
    }

    /**
     * Set PRSET0's VADCRS bit.
     */
    inline void set_PRSET0_VADCRS()
    {
        PRSET0 |= 1u << 0u;
    }

    /**
     * Clear PRSET0's VADCRS bit.
     */
    inline void clear_PRSET0_VADCRS()
    {
        PRSET0 &= ~(1u << 0u);
    }

    /**
     * Toggle PRSET0's VADCRS bit.
     */
    inline void toggle_PRSET0_VADCRS()
    {
        PRSET0 ^= 1u << 0u;
    }

    /**
     * Set PRCLR0's ERU1RS bit.
     */
    inline void set_PRCLR0_ERU1RS()
    {
        PRCLR0 |= 1u << 16u;
    }

    /**
     * Clear PRCLR0's ERU1RS bit.
     */
    inline void clear_PRCLR0_ERU1RS()
    {
        PRCLR0 &= ~(1u << 16u);
    }

    /**
     * Toggle PRCLR0's ERU1RS bit.
     */
    inline void toggle_PRCLR0_ERU1RS()
    {
        PRCLR0 ^= 1u << 16u;
    }

    /**
     * Set PRCLR0's USIC0RS bit.
     */
    inline void set_PRCLR0_USIC0RS()
    {
        PRCLR0 |= 1u << 11u;
    }

    /**
     * Clear PRCLR0's USIC0RS bit.
     */
    inline void clear_PRCLR0_USIC0RS()
    {
        PRCLR0 &= ~(1u << 11u);
    }

    /**
     * Toggle PRCLR0's USIC0RS bit.
     */
    inline void toggle_PRCLR0_USIC0RS()
    {
        PRCLR0 ^= 1u << 11u;
    }

    /**
     * Set PRCLR0's POSIF1RS bit.
     */
    inline void set_PRCLR0_POSIF1RS()
    {
        PRCLR0 |= 1u << 10u;
    }

    /**
     * Clear PRCLR0's POSIF1RS bit.
     */
    inline void clear_PRCLR0_POSIF1RS()
    {
        PRCLR0 &= ~(1u << 10u);
    }

    /**
     * Toggle PRCLR0's POSIF1RS bit.
     */
    inline void toggle_PRCLR0_POSIF1RS()
    {
        PRCLR0 ^= 1u << 10u;
    }

    /**
     * Set PRCLR0's POSIF0RS bit.
     */
    inline void set_PRCLR0_POSIF0RS()
    {
        PRCLR0 |= 1u << 9u;
    }

    /**
     * Clear PRCLR0's POSIF0RS bit.
     */
    inline void clear_PRCLR0_POSIF0RS()
    {
        PRCLR0 &= ~(1u << 9u);
    }

    /**
     * Toggle PRCLR0's POSIF0RS bit.
     */
    inline void toggle_PRCLR0_POSIF0RS()
    {
        PRCLR0 ^= 1u << 9u;
    }

    /**
     * Set PRCLR0's CCU81RS bit.
     */
    inline void set_PRCLR0_CCU81RS()
    {
        PRCLR0 |= 1u << 8u;
    }

    /**
     * Clear PRCLR0's CCU81RS bit.
     */
    inline void clear_PRCLR0_CCU81RS()
    {
        PRCLR0 &= ~(1u << 8u);
    }

    /**
     * Toggle PRCLR0's CCU81RS bit.
     */
    inline void toggle_PRCLR0_CCU81RS()
    {
        PRCLR0 ^= 1u << 8u;
    }

    /**
     * Set PRCLR0's CCU80RS bit.
     */
    inline void set_PRCLR0_CCU80RS()
    {
        PRCLR0 |= 1u << 7u;
    }

    /**
     * Clear PRCLR0's CCU80RS bit.
     */
    inline void clear_PRCLR0_CCU80RS()
    {
        PRCLR0 &= ~(1u << 7u);
    }

    /**
     * Toggle PRCLR0's CCU80RS bit.
     */
    inline void toggle_PRCLR0_CCU80RS()
    {
        PRCLR0 ^= 1u << 7u;
    }

    /**
     * Set PRCLR0's CCU42RS bit.
     */
    inline void set_PRCLR0_CCU42RS()
    {
        PRCLR0 |= 1u << 4u;
    }

    /**
     * Clear PRCLR0's CCU42RS bit.
     */
    inline void clear_PRCLR0_CCU42RS()
    {
        PRCLR0 &= ~(1u << 4u);
    }

    /**
     * Toggle PRCLR0's CCU42RS bit.
     */
    inline void toggle_PRCLR0_CCU42RS()
    {
        PRCLR0 ^= 1u << 4u;
    }

    /**
     * Set PRCLR0's CCU41RS bit.
     */
    inline void set_PRCLR0_CCU41RS()
    {
        PRCLR0 |= 1u << 3u;
    }

    /**
     * Clear PRCLR0's CCU41RS bit.
     */
    inline void clear_PRCLR0_CCU41RS()
    {
        PRCLR0 &= ~(1u << 3u);
    }

    /**
     * Toggle PRCLR0's CCU41RS bit.
     */
    inline void toggle_PRCLR0_CCU41RS()
    {
        PRCLR0 ^= 1u << 3u;
    }

    /**
     * Set PRCLR0's CCU40RS bit.
     */
    inline void set_PRCLR0_CCU40RS()
    {
        PRCLR0 |= 1u << 2u;
    }

    /**
     * Clear PRCLR0's CCU40RS bit.
     */
    inline void clear_PRCLR0_CCU40RS()
    {
        PRCLR0 &= ~(1u << 2u);
    }

    /**
     * Toggle PRCLR0's CCU40RS bit.
     */
    inline void toggle_PRCLR0_CCU40RS()
    {
        PRCLR0 ^= 1u << 2u;
    }

    /**
     * Set PRCLR0's DSDRS bit.
     */
    inline void set_PRCLR0_DSDRS()
    {
        PRCLR0 |= 1u << 1u;
    }

    /**
     * Clear PRCLR0's DSDRS bit.
     */
    inline void clear_PRCLR0_DSDRS()
    {
        PRCLR0 &= ~(1u << 1u);
    }

    /**
     * Toggle PRCLR0's DSDRS bit.
     */
    inline void toggle_PRCLR0_DSDRS()
    {
        PRCLR0 ^= 1u << 1u;
    }

    /**
     * Set PRCLR0's VADCRS bit.
     */
    inline void set_PRCLR0_VADCRS()
    {
        PRCLR0 |= 1u << 0u;
    }

    /**
     * Clear PRCLR0's VADCRS bit.
     */
    inline void clear_PRCLR0_VADCRS()
    {
        PRCLR0 &= ~(1u << 0u);
    }

    /**
     * Toggle PRCLR0's VADCRS bit.
     */
    inline void toggle_PRCLR0_VADCRS()
    {
        PRCLR0 ^= 1u << 0u;
    }

    /**
     * Get PRSTAT1's PPORTSRS bit.
     */
    SCU_PRSTAT1_PPORTSRS get_PRSTAT1_PPORTSRS()
    {
        return SCU_PRSTAT1_PPORTSRS(PRSTAT1 & (1u << 9u));
    }

    /**
     * Get PRSTAT1's USIC2RS bit.
     */
    SCU_PRSTAT1_USIC2RS get_PRSTAT1_USIC2RS()
    {
        return SCU_PRSTAT1_USIC2RS(PRSTAT1 & (1u << 8u));
    }

    /**
     * Get PRSTAT1's USIC1RS bit.
     */
    SCU_PRSTAT1_USIC1RS get_PRSTAT1_USIC1RS()
    {
        return SCU_PRSTAT1_USIC1RS(PRSTAT1 & (1u << 7u));
    }

    /**
     * Get PRSTAT1's MMCIRS bit.
     */
    SCU_PRSTAT1_MMCIRS get_PRSTAT1_MMCIRS()
    {
        return SCU_PRSTAT1_MMCIRS(PRSTAT1 & (1u << 6u));
    }

    /**
     * Get PRSTAT1's DACRS bit.
     */
    SCU_PRSTAT1_DACRS get_PRSTAT1_DACRS()
    {
        return SCU_PRSTAT1_DACRS(PRSTAT1 & (1u << 5u));
    }

    /**
     * Get PRSTAT1's MCAN0RS bit.
     */
    SCU_PRSTAT1_MCAN0RS get_PRSTAT1_MCAN0RS()
    {
        return SCU_PRSTAT1_MCAN0RS(PRSTAT1 & (1u << 4u));
    }

    /**
     * Get PRSTAT1's LEDTSCU0RS bit.
     */
    SCU_PRSTAT1_LEDTSCU0RS get_PRSTAT1_LEDTSCU0RS()
    {
        return SCU_PRSTAT1_LEDTSCU0RS(PRSTAT1 & (1u << 3u));
    }

    /**
     * Get PRSTAT1's CCU43RS bit.
     */
    SCU_PRSTAT1_CCU43RS get_PRSTAT1_CCU43RS()
    {
        return SCU_PRSTAT1_CCU43RS(PRSTAT1 & (1u << 0u));
    }

    /**
     * Set PRSET1's PPORTSRS bit.
     */
    inline void set_PRSET1_PPORTSRS()
    {
        PRSET1 |= 1u << 9u;
    }

    /**
     * Clear PRSET1's PPORTSRS bit.
     */
    inline void clear_PRSET1_PPORTSRS()
    {
        PRSET1 &= ~(1u << 9u);
    }

    /**
     * Toggle PRSET1's PPORTSRS bit.
     */
    inline void toggle_PRSET1_PPORTSRS()
    {
        PRSET1 ^= 1u << 9u;
    }

    /**
     * Set PRSET1's USIC2RS bit.
     */
    inline void set_PRSET1_USIC2RS()
    {
        PRSET1 |= 1u << 8u;
    }

    /**
     * Clear PRSET1's USIC2RS bit.
     */
    inline void clear_PRSET1_USIC2RS()
    {
        PRSET1 &= ~(1u << 8u);
    }

    /**
     * Toggle PRSET1's USIC2RS bit.
     */
    inline void toggle_PRSET1_USIC2RS()
    {
        PRSET1 ^= 1u << 8u;
    }

    /**
     * Set PRSET1's USIC1RS bit.
     */
    inline void set_PRSET1_USIC1RS()
    {
        PRSET1 |= 1u << 7u;
    }

    /**
     * Clear PRSET1's USIC1RS bit.
     */
    inline void clear_PRSET1_USIC1RS()
    {
        PRSET1 &= ~(1u << 7u);
    }

    /**
     * Toggle PRSET1's USIC1RS bit.
     */
    inline void toggle_PRSET1_USIC1RS()
    {
        PRSET1 ^= 1u << 7u;
    }

    /**
     * Set PRSET1's MMCIRS bit.
     */
    inline void set_PRSET1_MMCIRS()
    {
        PRSET1 |= 1u << 6u;
    }

    /**
     * Clear PRSET1's MMCIRS bit.
     */
    inline void clear_PRSET1_MMCIRS()
    {
        PRSET1 &= ~(1u << 6u);
    }

    /**
     * Toggle PRSET1's MMCIRS bit.
     */
    inline void toggle_PRSET1_MMCIRS()
    {
        PRSET1 ^= 1u << 6u;
    }

    /**
     * Set PRSET1's DACRS bit.
     */
    inline void set_PRSET1_DACRS()
    {
        PRSET1 |= 1u << 5u;
    }

    /**
     * Clear PRSET1's DACRS bit.
     */
    inline void clear_PRSET1_DACRS()
    {
        PRSET1 &= ~(1u << 5u);
    }

    /**
     * Toggle PRSET1's DACRS bit.
     */
    inline void toggle_PRSET1_DACRS()
    {
        PRSET1 ^= 1u << 5u;
    }

    /**
     * Set PRSET1's MCAN0RS bit.
     */
    inline void set_PRSET1_MCAN0RS()
    {
        PRSET1 |= 1u << 4u;
    }

    /**
     * Clear PRSET1's MCAN0RS bit.
     */
    inline void clear_PRSET1_MCAN0RS()
    {
        PRSET1 &= ~(1u << 4u);
    }

    /**
     * Toggle PRSET1's MCAN0RS bit.
     */
    inline void toggle_PRSET1_MCAN0RS()
    {
        PRSET1 ^= 1u << 4u;
    }

    /**
     * Set PRSET1's LEDTSCU0RS bit.
     */
    inline void set_PRSET1_LEDTSCU0RS()
    {
        PRSET1 |= 1u << 3u;
    }

    /**
     * Clear PRSET1's LEDTSCU0RS bit.
     */
    inline void clear_PRSET1_LEDTSCU0RS()
    {
        PRSET1 &= ~(1u << 3u);
    }

    /**
     * Toggle PRSET1's LEDTSCU0RS bit.
     */
    inline void toggle_PRSET1_LEDTSCU0RS()
    {
        PRSET1 ^= 1u << 3u;
    }

    /**
     * Set PRSET1's CCU43RS bit.
     */
    inline void set_PRSET1_CCU43RS()
    {
        PRSET1 |= 1u << 0u;
    }

    /**
     * Clear PRSET1's CCU43RS bit.
     */
    inline void clear_PRSET1_CCU43RS()
    {
        PRSET1 &= ~(1u << 0u);
    }

    /**
     * Toggle PRSET1's CCU43RS bit.
     */
    inline void toggle_PRSET1_CCU43RS()
    {
        PRSET1 ^= 1u << 0u;
    }

    /**
     * Set PRCLR1's PPORTSRS bit.
     */
    inline void set_PRCLR1_PPORTSRS()
    {
        PRCLR1 |= 1u << 9u;
    }

    /**
     * Clear PRCLR1's PPORTSRS bit.
     */
    inline void clear_PRCLR1_PPORTSRS()
    {
        PRCLR1 &= ~(1u << 9u);
    }

    /**
     * Toggle PRCLR1's PPORTSRS bit.
     */
    inline void toggle_PRCLR1_PPORTSRS()
    {
        PRCLR1 ^= 1u << 9u;
    }

    /**
     * Set PRCLR1's USIC2RS bit.
     */
    inline void set_PRCLR1_USIC2RS()
    {
        PRCLR1 |= 1u << 8u;
    }

    /**
     * Clear PRCLR1's USIC2RS bit.
     */
    inline void clear_PRCLR1_USIC2RS()
    {
        PRCLR1 &= ~(1u << 8u);
    }

    /**
     * Toggle PRCLR1's USIC2RS bit.
     */
    inline void toggle_PRCLR1_USIC2RS()
    {
        PRCLR1 ^= 1u << 8u;
    }

    /**
     * Set PRCLR1's USIC1RS bit.
     */
    inline void set_PRCLR1_USIC1RS()
    {
        PRCLR1 |= 1u << 7u;
    }

    /**
     * Clear PRCLR1's USIC1RS bit.
     */
    inline void clear_PRCLR1_USIC1RS()
    {
        PRCLR1 &= ~(1u << 7u);
    }

    /**
     * Toggle PRCLR1's USIC1RS bit.
     */
    inline void toggle_PRCLR1_USIC1RS()
    {
        PRCLR1 ^= 1u << 7u;
    }

    /**
     * Set PRCLR1's MMCIRS bit.
     */
    inline void set_PRCLR1_MMCIRS()
    {
        PRCLR1 |= 1u << 6u;
    }

    /**
     * Clear PRCLR1's MMCIRS bit.
     */
    inline void clear_PRCLR1_MMCIRS()
    {
        PRCLR1 &= ~(1u << 6u);
    }

    /**
     * Toggle PRCLR1's MMCIRS bit.
     */
    inline void toggle_PRCLR1_MMCIRS()
    {
        PRCLR1 ^= 1u << 6u;
    }

    /**
     * Set PRCLR1's DACRS bit.
     */
    inline void set_PRCLR1_DACRS()
    {
        PRCLR1 |= 1u << 5u;
    }

    /**
     * Clear PRCLR1's DACRS bit.
     */
    inline void clear_PRCLR1_DACRS()
    {
        PRCLR1 &= ~(1u << 5u);
    }

    /**
     * Toggle PRCLR1's DACRS bit.
     */
    inline void toggle_PRCLR1_DACRS()
    {
        PRCLR1 ^= 1u << 5u;
    }

    /**
     * Set PRCLR1's MCAN0RS bit.
     */
    inline void set_PRCLR1_MCAN0RS()
    {
        PRCLR1 |= 1u << 4u;
    }

    /**
     * Clear PRCLR1's MCAN0RS bit.
     */
    inline void clear_PRCLR1_MCAN0RS()
    {
        PRCLR1 &= ~(1u << 4u);
    }

    /**
     * Toggle PRCLR1's MCAN0RS bit.
     */
    inline void toggle_PRCLR1_MCAN0RS()
    {
        PRCLR1 ^= 1u << 4u;
    }

    /**
     * Set PRCLR1's LEDTSCU0RS bit.
     */
    inline void set_PRCLR1_LEDTSCU0RS()
    {
        PRCLR1 |= 1u << 3u;
    }

    /**
     * Clear PRCLR1's LEDTSCU0RS bit.
     */
    inline void clear_PRCLR1_LEDTSCU0RS()
    {
        PRCLR1 &= ~(1u << 3u);
    }

    /**
     * Toggle PRCLR1's LEDTSCU0RS bit.
     */
    inline void toggle_PRCLR1_LEDTSCU0RS()
    {
        PRCLR1 ^= 1u << 3u;
    }

    /**
     * Set PRCLR1's CCU43RS bit.
     */
    inline void set_PRCLR1_CCU43RS()
    {
        PRCLR1 |= 1u << 0u;
    }

    /**
     * Clear PRCLR1's CCU43RS bit.
     */
    inline void clear_PRCLR1_CCU43RS()
    {
        PRCLR1 &= ~(1u << 0u);
    }

    /**
     * Toggle PRCLR1's CCU43RS bit.
     */
    inline void toggle_PRCLR1_CCU43RS()
    {
        PRCLR1 ^= 1u << 0u;
    }

    /**
     * Get PRSTAT2's USBRS bit.
     */
    SCU_PRSTAT2_USBRS get_PRSTAT2_USBRS()
    {
        return SCU_PRSTAT2_USBRS(PRSTAT2 & (1u << 7u));
    }

    /**
     * Get PRSTAT2's FCERS bit.
     */
    SCU_PRSTAT2_FCERS get_PRSTAT2_FCERS()
    {
        return SCU_PRSTAT2_FCERS(PRSTAT2 & (1u << 6u));
    }

    /**
     * Get PRSTAT2's DMA1RS bit.
     */
    SCU_PRSTAT2_DMA1RS get_PRSTAT2_DMA1RS()
    {
        return SCU_PRSTAT2_DMA1RS(PRSTAT2 & (1u << 5u));
    }

    /**
     * Get PRSTAT2's DMA0RS bit.
     */
    SCU_PRSTAT2_DMA0RS get_PRSTAT2_DMA0RS()
    {
        return SCU_PRSTAT2_DMA0RS(PRSTAT2 & (1u << 4u));
    }

    /**
     * Get PRSTAT2's ETH0RS bit.
     */
    SCU_PRSTAT2_ETH0RS get_PRSTAT2_ETH0RS()
    {
        return SCU_PRSTAT2_ETH0RS(PRSTAT2 & (1u << 2u));
    }

    /**
     * Get PRSTAT2's WDTRS bit.
     */
    SCU_PRSTAT2_WDTRS get_PRSTAT2_WDTRS()
    {
        return SCU_PRSTAT2_WDTRS(PRSTAT2 & (1u << 1u));
    }

    /**
     * Set PRSET2's USBRS bit.
     */
    inline void set_PRSET2_USBRS()
    {
        PRSET2 |= 1u << 7u;
    }

    /**
     * Clear PRSET2's USBRS bit.
     */
    inline void clear_PRSET2_USBRS()
    {
        PRSET2 &= ~(1u << 7u);
    }

    /**
     * Toggle PRSET2's USBRS bit.
     */
    inline void toggle_PRSET2_USBRS()
    {
        PRSET2 ^= 1u << 7u;
    }

    /**
     * Set PRSET2's FCERS bit.
     */
    inline void set_PRSET2_FCERS()
    {
        PRSET2 |= 1u << 6u;
    }

    /**
     * Clear PRSET2's FCERS bit.
     */
    inline void clear_PRSET2_FCERS()
    {
        PRSET2 &= ~(1u << 6u);
    }

    /**
     * Toggle PRSET2's FCERS bit.
     */
    inline void toggle_PRSET2_FCERS()
    {
        PRSET2 ^= 1u << 6u;
    }

    /**
     * Set PRSET2's DMA1RS bit.
     */
    inline void set_PRSET2_DMA1RS()
    {
        PRSET2 |= 1u << 5u;
    }

    /**
     * Clear PRSET2's DMA1RS bit.
     */
    inline void clear_PRSET2_DMA1RS()
    {
        PRSET2 &= ~(1u << 5u);
    }

    /**
     * Toggle PRSET2's DMA1RS bit.
     */
    inline void toggle_PRSET2_DMA1RS()
    {
        PRSET2 ^= 1u << 5u;
    }

    /**
     * Set PRSET2's DMA0RS bit.
     */
    inline void set_PRSET2_DMA0RS()
    {
        PRSET2 |= 1u << 4u;
    }

    /**
     * Clear PRSET2's DMA0RS bit.
     */
    inline void clear_PRSET2_DMA0RS()
    {
        PRSET2 &= ~(1u << 4u);
    }

    /**
     * Toggle PRSET2's DMA0RS bit.
     */
    inline void toggle_PRSET2_DMA0RS()
    {
        PRSET2 ^= 1u << 4u;
    }

    /**
     * Set PRSET2's ETH0RS bit.
     */
    inline void set_PRSET2_ETH0RS()
    {
        PRSET2 |= 1u << 2u;
    }

    /**
     * Clear PRSET2's ETH0RS bit.
     */
    inline void clear_PRSET2_ETH0RS()
    {
        PRSET2 &= ~(1u << 2u);
    }

    /**
     * Toggle PRSET2's ETH0RS bit.
     */
    inline void toggle_PRSET2_ETH0RS()
    {
        PRSET2 ^= 1u << 2u;
    }

    /**
     * Set PRSET2's WDTRS bit.
     */
    inline void set_PRSET2_WDTRS()
    {
        PRSET2 |= 1u << 1u;
    }

    /**
     * Clear PRSET2's WDTRS bit.
     */
    inline void clear_PRSET2_WDTRS()
    {
        PRSET2 &= ~(1u << 1u);
    }

    /**
     * Toggle PRSET2's WDTRS bit.
     */
    inline void toggle_PRSET2_WDTRS()
    {
        PRSET2 ^= 1u << 1u;
    }

    /**
     * Set PRCLR2's USBRS bit.
     */
    inline void set_PRCLR2_USBRS()
    {
        PRCLR2 |= 1u << 7u;
    }

    /**
     * Clear PRCLR2's USBRS bit.
     */
    inline void clear_PRCLR2_USBRS()
    {
        PRCLR2 &= ~(1u << 7u);
    }

    /**
     * Toggle PRCLR2's USBRS bit.
     */
    inline void toggle_PRCLR2_USBRS()
    {
        PRCLR2 ^= 1u << 7u;
    }

    /**
     * Set PRCLR2's FCERS bit.
     */
    inline void set_PRCLR2_FCERS()
    {
        PRCLR2 |= 1u << 6u;
    }

    /**
     * Clear PRCLR2's FCERS bit.
     */
    inline void clear_PRCLR2_FCERS()
    {
        PRCLR2 &= ~(1u << 6u);
    }

    /**
     * Toggle PRCLR2's FCERS bit.
     */
    inline void toggle_PRCLR2_FCERS()
    {
        PRCLR2 ^= 1u << 6u;
    }

    /**
     * Set PRCLR2's DMA1RS bit.
     */
    inline void set_PRCLR2_DMA1RS()
    {
        PRCLR2 |= 1u << 5u;
    }

    /**
     * Clear PRCLR2's DMA1RS bit.
     */
    inline void clear_PRCLR2_DMA1RS()
    {
        PRCLR2 &= ~(1u << 5u);
    }

    /**
     * Toggle PRCLR2's DMA1RS bit.
     */
    inline void toggle_PRCLR2_DMA1RS()
    {
        PRCLR2 ^= 1u << 5u;
    }

    /**
     * Set PRCLR2's DMA0RS bit.
     */
    inline void set_PRCLR2_DMA0RS()
    {
        PRCLR2 |= 1u << 4u;
    }

    /**
     * Clear PRCLR2's DMA0RS bit.
     */
    inline void clear_PRCLR2_DMA0RS()
    {
        PRCLR2 &= ~(1u << 4u);
    }

    /**
     * Toggle PRCLR2's DMA0RS bit.
     */
    inline void toggle_PRCLR2_DMA0RS()
    {
        PRCLR2 ^= 1u << 4u;
    }

    /**
     * Set PRCLR2's ETH0RS bit.
     */
    inline void set_PRCLR2_ETH0RS()
    {
        PRCLR2 |= 1u << 2u;
    }

    /**
     * Clear PRCLR2's ETH0RS bit.
     */
    inline void clear_PRCLR2_ETH0RS()
    {
        PRCLR2 &= ~(1u << 2u);
    }

    /**
     * Toggle PRCLR2's ETH0RS bit.
     */
    inline void toggle_PRCLR2_ETH0RS()
    {
        PRCLR2 ^= 1u << 2u;
    }

    /**
     * Set PRCLR2's WDTRS bit.
     */
    inline void set_PRCLR2_WDTRS()
    {
        PRCLR2 |= 1u << 1u;
    }

    /**
     * Clear PRCLR2's WDTRS bit.
     */
    inline void clear_PRCLR2_WDTRS()
    {
        PRCLR2 &= ~(1u << 1u);
    }

    /**
     * Toggle PRCLR2's WDTRS bit.
     */
    inline void toggle_PRCLR2_WDTRS()
    {
        PRCLR2 ^= 1u << 1u;
    }

    /**
     * Get PRSTAT3's EBURS bit.
     */
    SCU_PRSTAT3_EBURS get_PRSTAT3_EBURS()
    {
        return SCU_PRSTAT3_EBURS(PRSTAT3 & (1u << 2u));
    }

    /**
     * Set PRSET3's EBURS bit.
     */
    inline void set_PRSET3_EBURS()
    {
        PRSET3 |= 1u << 2u;
    }

    /**
     * Clear PRSET3's EBURS bit.
     */
    inline void clear_PRSET3_EBURS()
    {
        PRSET3 &= ~(1u << 2u);
    }

    /**
     * Toggle PRSET3's EBURS bit.
     */
    inline void toggle_PRSET3_EBURS()
    {
        PRSET3 ^= 1u << 2u;
    }

    /**
     * Set PRCLR3's EBURS bit.
     */
    inline void set_PRCLR3_EBURS()
    {
        PRCLR3 |= 1u << 2u;
    }

    /**
     * Clear PRCLR3's EBURS bit.
     */
    inline void clear_PRCLR3_EBURS()
    {
        PRCLR3 &= ~(1u << 2u);
    }

    /**
     * Toggle PRCLR3's EBURS bit.
     */
    inline void toggle_PRCLR3_EBURS()
    {
        PRCLR3 ^= 1u << 2u;
    }
};

static_assert(sizeof(scu) == scu::size);

static volatile scu *const SCU_RESET = reinterpret_cast<scu *>(0x50004400);

static volatile scu *const SCU_POWER = reinterpret_cast<scu *>(0x50004200);

static volatile scu *const SCU_HIBERNATE = reinterpret_cast<scu *>(0x50004300);

static volatile scu *const SCU_TRAP = reinterpret_cast<scu *>(0x50004160);

static volatile scu *const SCU_PARITY = reinterpret_cast<scu *>(0x5000413C);

static volatile scu *const SCU_INTERRUPT = reinterpret_cast<scu *>(0x50004074);

static volatile scu *const SCU_GENERAL = reinterpret_cast<scu *>(0x50004000);

static volatile scu *const SCU_PLL = reinterpret_cast<scu *>(0x50004710);

static volatile scu *const SCU_OSC = reinterpret_cast<scu *>(0x50004700);

static volatile scu *const SCU_CLK = reinterpret_cast<scu *>(0x50004600);

}; // namespace XMC4700
