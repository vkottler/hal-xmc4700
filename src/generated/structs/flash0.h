/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include "../enums/FLASH0_FCON_DDF.h"
#include "../enums/FLASH0_FCON_EOBM.h"
#include "../enums/FLASH0_FCON_ESLDIS.h"
#include "../enums/FLASH0_FCON_IDLE.h"
#include "../enums/FLASH0_FCON_PFDBERM.h"
#include "../enums/FLASH0_FCON_PFSBERM.h"
#include "../enums/FLASH0_FCON_PROERM.h"
#include "../enums/FLASH0_FCON_RPA.h"
#include "../enums/FLASH0_FCON_SLEEP.h"
#include "../enums/FLASH0_FCON_SQERM.h"
#include "../enums/FLASH0_FCON_VOPERM.h"
#include "../enums/FLASH0_FCON_WSECPF.h"
#include "../enums/FLASH0_FCON_WSPFLASH.h"
#include "../enums/FLASH0_FSR_ERASE.h"
#include "../enums/FLASH0_FSR_PBUSY.h"
#include "../enums/FLASH0_FSR_PFDBER.h"
#include "../enums/FLASH0_FSR_PFOPER.h"
#include "../enums/FLASH0_FSR_PFPAGE.h"
#include "../enums/FLASH0_FSR_PFSBER.h"
#include "../enums/FLASH0_FSR_PROER.h"
#include "../enums/FLASH0_FSR_PROG.h"
#include "../enums/FLASH0_FSR_PROIN.h"
#include "../enums/FLASH0_FSR_RPRODIS.h"
#include "../enums/FLASH0_FSR_RPROIN.h"
#include "../enums/FLASH0_FSR_SLM.h"
#include "../enums/FLASH0_FSR_SQER.h"
#include "../enums/FLASH0_FSR_VER.h"
#include "../enums/FLASH0_FSR_WPRODIS0.h"
#include "../enums/FLASH0_FSR_WPRODIS1.h"
#include "../enums/FLASH0_FSR_WPROIN0.h"
#include "../enums/FLASH0_FSR_WPROIN1.h"
#include "../enums/FLASH0_FSR_WPROIN2.h"
#include "../enums/FLASH0_MARP_MARGIN.h"
#include "../enums/FLASH0_MARP_TRAPDIS.h"
#include "../enums/FLASH0_PROCON0_RPRO.h"
#include "../enums/FLASH0_PROCON0_S10_S11L.h"
#include "../enums/FLASH0_PROCON0_S12_S13L.h"
#include "../enums/FLASH0_PROCON0_S14_S15L.h"
#include "../enums/FLASH0_PROCON0_S9L.h"
#include "../enums/FLASH0_PROCON1_PSR.h"
#include "../enums/FLASH0_PROCON2_S10_S11ROM.h"
#include "../enums/FLASH0_PROCON2_S12_S13ROM.h"
#include "../enums/FLASH0_PROCON2_S14_S15ROM.h"
#include "../enums/FLASH0_PROCON2_S9ROM.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Flash Memory Controller
 */
struct [[gnu::packed]] flash0
{
    /* Constant attributes. */
    static constexpr std::size_t size = 4140; /*!< flash0's size in bytes. */

    /* Fields. */
    static constexpr std::size_t reserved_padding0_length = 1026;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    const uint32_t ID =
        {}; /*!< (read-only) Flash Module Identification Register */
    const uint32_t reserved_padding1 = {};
    const uint32_t FSR = {}; /*!< (read-only) Flash Status Register */
    uint32_t FCON;           /*!< (read-write) Flash Configuration Register */
    uint32_t MARP; /*!< (read-write) Margin Control Register PFLASH */
    const uint32_t reserved_padding2 = {};
    const uint32_t PROCON0 =
        {}; /*!< (read-only) Flash Protection Configuration Register User 0 */
    const uint32_t PROCON1 =
        {}; /*!< (read-only) Flash Protection Configuration Register User 1 */
    const uint32_t PROCON2 =
        {}; /*!< (read-only) Flash Protection Configuration Register User 2 */

    /* Methods. */

    /**
     * Get ID's MOD_NUMBER field.
     */
    inline uint16_t get_ID_MOD_NUMBER() volatile
    {
        return (ID >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get ID's MOD_TYPE field.
     */
    inline uint8_t get_ID_MOD_TYPE() volatile
    {
        return (ID >> 8u) & 0b11111111u;
    }

    /**
     * Get ID's MOD_REV field.
     */
    inline uint8_t get_ID_MOD_REV() volatile
    {
        return (ID >> 0u) & 0b11111111u;
    }

    /**
     * Get all of ID's bit fields.
     */
    inline void get_ID(uint16_t &MOD_NUMBER, uint8_t &MOD_TYPE,
                       uint8_t &MOD_REV) volatile
    {
        uint32_t curr = ID;

        MOD_NUMBER = (curr >> 16u) & 0b1111111111111111u;
        MOD_TYPE = (curr >> 8u) & 0b11111111u;
        MOD_REV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get FSR's VER bit.
     */
    inline FLASH0_FSR_VER get_FSR_VER() volatile
    {
        return FLASH0_FSR_VER(FSR & (1u << 31u));
    }

    /**
     * Get FSR's SLM bit.
     */
    inline FLASH0_FSR_SLM get_FSR_SLM() volatile
    {
        return FLASH0_FSR_SLM(FSR & (1u << 28u));
    }

    /**
     * Get FSR's WPRODIS1 bit.
     */
    inline FLASH0_FSR_WPRODIS1 get_FSR_WPRODIS1() volatile
    {
        return FLASH0_FSR_WPRODIS1(FSR & (1u << 26u));
    }

    /**
     * Get FSR's WPRODIS0 bit.
     */
    inline FLASH0_FSR_WPRODIS0 get_FSR_WPRODIS0() volatile
    {
        return FLASH0_FSR_WPRODIS0(FSR & (1u << 25u));
    }

    /**
     * Get FSR's WPROIN2 bit.
     */
    inline FLASH0_FSR_WPROIN2 get_FSR_WPROIN2() volatile
    {
        return FLASH0_FSR_WPROIN2(FSR & (1u << 23u));
    }

    /**
     * Get FSR's WPROIN1 bit.
     */
    inline FLASH0_FSR_WPROIN1 get_FSR_WPROIN1() volatile
    {
        return FLASH0_FSR_WPROIN1(FSR & (1u << 22u));
    }

    /**
     * Get FSR's WPROIN0 bit.
     */
    inline FLASH0_FSR_WPROIN0 get_FSR_WPROIN0() volatile
    {
        return FLASH0_FSR_WPROIN0(FSR & (1u << 21u));
    }

    /**
     * Get FSR's RPRODIS bit.
     */
    inline FLASH0_FSR_RPRODIS get_FSR_RPRODIS() volatile
    {
        return FLASH0_FSR_RPRODIS(FSR & (1u << 19u));
    }

    /**
     * Get FSR's RPROIN bit.
     */
    inline FLASH0_FSR_RPROIN get_FSR_RPROIN() volatile
    {
        return FLASH0_FSR_RPROIN(FSR & (1u << 18u));
    }

    /**
     * Get FSR's PROIN bit.
     */
    inline FLASH0_FSR_PROIN get_FSR_PROIN() volatile
    {
        return FLASH0_FSR_PROIN(FSR & (1u << 16u));
    }

    /**
     * Get FSR's PFDBER bit.
     */
    inline FLASH0_FSR_PFDBER get_FSR_PFDBER() volatile
    {
        return FLASH0_FSR_PFDBER(FSR & (1u << 14u));
    }

    /**
     * Get FSR's PFSBER bit.
     */
    inline FLASH0_FSR_PFSBER get_FSR_PFSBER() volatile
    {
        return FLASH0_FSR_PFSBER(FSR & (1u << 12u));
    }

    /**
     * Get FSR's PROER bit.
     */
    inline FLASH0_FSR_PROER get_FSR_PROER() volatile
    {
        return FLASH0_FSR_PROER(FSR & (1u << 11u));
    }

    /**
     * Get FSR's SQER bit.
     */
    inline FLASH0_FSR_SQER get_FSR_SQER() volatile
    {
        return FLASH0_FSR_SQER(FSR & (1u << 10u));
    }

    /**
     * Get FSR's PFOPER bit.
     */
    inline FLASH0_FSR_PFOPER get_FSR_PFOPER() volatile
    {
        return FLASH0_FSR_PFOPER(FSR & (1u << 8u));
    }

    /**
     * Get FSR's PFPAGE bit.
     */
    inline FLASH0_FSR_PFPAGE get_FSR_PFPAGE() volatile
    {
        return FLASH0_FSR_PFPAGE(FSR & (1u << 6u));
    }

    /**
     * Get FSR's ERASE bit.
     */
    inline FLASH0_FSR_ERASE get_FSR_ERASE() volatile
    {
        return FLASH0_FSR_ERASE(FSR & (1u << 5u));
    }

    /**
     * Get FSR's PROG bit.
     */
    inline FLASH0_FSR_PROG get_FSR_PROG() volatile
    {
        return FLASH0_FSR_PROG(FSR & (1u << 4u));
    }

    /**
     * Get FSR's FABUSY bit.
     */
    inline bool get_FSR_FABUSY() volatile
    {
        return FSR & (1u << 1u);
    }

    /**
     * Get FSR's PBUSY bit.
     */
    inline FLASH0_FSR_PBUSY get_FSR_PBUSY() volatile
    {
        return FLASH0_FSR_PBUSY(FSR & (1u << 0u));
    }

    /**
     * Get all of FSR's bit fields.
     */
    inline void get_FSR(FLASH0_FSR_VER &VER, FLASH0_FSR_SLM &SLM,
                        FLASH0_FSR_WPRODIS1 &WPRODIS1,
                        FLASH0_FSR_WPRODIS0 &WPRODIS0,
                        FLASH0_FSR_WPROIN2 &WPROIN2,
                        FLASH0_FSR_WPROIN1 &WPROIN1,
                        FLASH0_FSR_WPROIN0 &WPROIN0,
                        FLASH0_FSR_RPRODIS &RPRODIS, FLASH0_FSR_RPROIN &RPROIN,
                        FLASH0_FSR_PROIN &PROIN, FLASH0_FSR_PFDBER &PFDBER,
                        FLASH0_FSR_PFSBER &PFSBER, FLASH0_FSR_PROER &PROER,
                        FLASH0_FSR_SQER &SQER, FLASH0_FSR_PFOPER &PFOPER,
                        FLASH0_FSR_PFPAGE &PFPAGE, FLASH0_FSR_ERASE &ERASE,
                        FLASH0_FSR_PROG &PROG, bool &FABUSY,
                        FLASH0_FSR_PBUSY &PBUSY) volatile
    {
        uint32_t curr = FSR;

        VER = FLASH0_FSR_VER(curr & (1u << 31u));
        SLM = FLASH0_FSR_SLM(curr & (1u << 28u));
        WPRODIS1 = FLASH0_FSR_WPRODIS1(curr & (1u << 26u));
        WPRODIS0 = FLASH0_FSR_WPRODIS0(curr & (1u << 25u));
        WPROIN2 = FLASH0_FSR_WPROIN2(curr & (1u << 23u));
        WPROIN1 = FLASH0_FSR_WPROIN1(curr & (1u << 22u));
        WPROIN0 = FLASH0_FSR_WPROIN0(curr & (1u << 21u));
        RPRODIS = FLASH0_FSR_RPRODIS(curr & (1u << 19u));
        RPROIN = FLASH0_FSR_RPROIN(curr & (1u << 18u));
        PROIN = FLASH0_FSR_PROIN(curr & (1u << 16u));
        PFDBER = FLASH0_FSR_PFDBER(curr & (1u << 14u));
        PFSBER = FLASH0_FSR_PFSBER(curr & (1u << 12u));
        PROER = FLASH0_FSR_PROER(curr & (1u << 11u));
        SQER = FLASH0_FSR_SQER(curr & (1u << 10u));
        PFOPER = FLASH0_FSR_PFOPER(curr & (1u << 8u));
        PFPAGE = FLASH0_FSR_PFPAGE(curr & (1u << 6u));
        ERASE = FLASH0_FSR_ERASE(curr & (1u << 5u));
        PROG = FLASH0_FSR_PROG(curr & (1u << 4u));
        FABUSY = curr & (1u << 1u);
        PBUSY = FLASH0_FSR_PBUSY(curr & (1u << 0u));
    }

    /**
     * Get FCON's EOBM bit.
     */
    inline FLASH0_FCON_EOBM get_FCON_EOBM() volatile
    {
        return FLASH0_FCON_EOBM(FCON & (1u << 31u));
    }

    /**
     * Set FCON's EOBM bit.
     *
     * End of Busy Interrupt Mask
     */
    inline void set_FCON_EOBM() volatile
    {
        FCON |= 1u << 31u;
    }

    /**
     * Clear FCON's EOBM bit.
     *
     * End of Busy Interrupt Mask
     */
    inline void clear_FCON_EOBM() volatile
    {
        FCON &= ~(1u << 31u);
    }

    /**
     * Toggle FCON's EOBM bit.
     *
     * End of Busy Interrupt Mask
     */
    inline void toggle_FCON_EOBM() volatile
    {
        FCON ^= 1u << 31u;
    }

    /**
     * Get FCON's PFDBERM bit.
     */
    inline FLASH0_FCON_PFDBERM get_FCON_PFDBERM() volatile
    {
        return FLASH0_FCON_PFDBERM(FCON & (1u << 29u));
    }

    /**
     * Set FCON's PFDBERM bit.
     *
     * PFLASH Double-Bit Error Interrupt Mask
     */
    inline void set_FCON_PFDBERM() volatile
    {
        FCON |= 1u << 29u;
    }

    /**
     * Clear FCON's PFDBERM bit.
     *
     * PFLASH Double-Bit Error Interrupt Mask
     */
    inline void clear_FCON_PFDBERM() volatile
    {
        FCON &= ~(1u << 29u);
    }

    /**
     * Toggle FCON's PFDBERM bit.
     *
     * PFLASH Double-Bit Error Interrupt Mask
     */
    inline void toggle_FCON_PFDBERM() volatile
    {
        FCON ^= 1u << 29u;
    }

    /**
     * Get FCON's PFSBERM bit.
     */
    inline FLASH0_FCON_PFSBERM get_FCON_PFSBERM() volatile
    {
        return FLASH0_FCON_PFSBERM(FCON & (1u << 27u));
    }

    /**
     * Set FCON's PFSBERM bit.
     *
     * PFLASH Single-Bit Error Interrupt Mask
     */
    inline void set_FCON_PFSBERM() volatile
    {
        FCON |= 1u << 27u;
    }

    /**
     * Clear FCON's PFSBERM bit.
     *
     * PFLASH Single-Bit Error Interrupt Mask
     */
    inline void clear_FCON_PFSBERM() volatile
    {
        FCON &= ~(1u << 27u);
    }

    /**
     * Toggle FCON's PFSBERM bit.
     *
     * PFLASH Single-Bit Error Interrupt Mask
     */
    inline void toggle_FCON_PFSBERM() volatile
    {
        FCON ^= 1u << 27u;
    }

    /**
     * Get FCON's PROERM bit.
     */
    inline FLASH0_FCON_PROERM get_FCON_PROERM() volatile
    {
        return FLASH0_FCON_PROERM(FCON & (1u << 26u));
    }

    /**
     * Set FCON's PROERM bit.
     *
     * Protection Error Interrupt Mask
     */
    inline void set_FCON_PROERM() volatile
    {
        FCON |= 1u << 26u;
    }

    /**
     * Clear FCON's PROERM bit.
     *
     * Protection Error Interrupt Mask
     */
    inline void clear_FCON_PROERM() volatile
    {
        FCON &= ~(1u << 26u);
    }

    /**
     * Toggle FCON's PROERM bit.
     *
     * Protection Error Interrupt Mask
     */
    inline void toggle_FCON_PROERM() volatile
    {
        FCON ^= 1u << 26u;
    }

    /**
     * Get FCON's SQERM bit.
     */
    inline FLASH0_FCON_SQERM get_FCON_SQERM() volatile
    {
        return FLASH0_FCON_SQERM(FCON & (1u << 25u));
    }

    /**
     * Set FCON's SQERM bit.
     *
     * Command Sequence Error Interrupt Mask
     */
    inline void set_FCON_SQERM() volatile
    {
        FCON |= 1u << 25u;
    }

    /**
     * Clear FCON's SQERM bit.
     *
     * Command Sequence Error Interrupt Mask
     */
    inline void clear_FCON_SQERM() volatile
    {
        FCON &= ~(1u << 25u);
    }

    /**
     * Toggle FCON's SQERM bit.
     *
     * Command Sequence Error Interrupt Mask
     */
    inline void toggle_FCON_SQERM() volatile
    {
        FCON ^= 1u << 25u;
    }

    /**
     * Get FCON's VOPERM bit.
     */
    inline FLASH0_FCON_VOPERM get_FCON_VOPERM() volatile
    {
        return FLASH0_FCON_VOPERM(FCON & (1u << 24u));
    }

    /**
     * Set FCON's VOPERM bit.
     *
     * Verify and Operation Error Interrupt Mask
     */
    inline void set_FCON_VOPERM() volatile
    {
        FCON |= 1u << 24u;
    }

    /**
     * Clear FCON's VOPERM bit.
     *
     * Verify and Operation Error Interrupt Mask
     */
    inline void clear_FCON_VOPERM() volatile
    {
        FCON &= ~(1u << 24u);
    }

    /**
     * Toggle FCON's VOPERM bit.
     *
     * Verify and Operation Error Interrupt Mask
     */
    inline void toggle_FCON_VOPERM() volatile
    {
        FCON ^= 1u << 24u;
    }

    /**
     * Get FCON's DDF bit.
     */
    inline FLASH0_FCON_DDF get_FCON_DDF() volatile
    {
        return FLASH0_FCON_DDF(FCON & (1u << 18u));
    }

    /**
     * Set FCON's DDF bit.
     *
     * Disable Any Data Fetch from Flash
     */
    inline void set_FCON_DDF() volatile
    {
        FCON |= 1u << 18u;
    }

    /**
     * Clear FCON's DDF bit.
     *
     * Disable Any Data Fetch from Flash
     */
    inline void clear_FCON_DDF() volatile
    {
        FCON &= ~(1u << 18u);
    }

    /**
     * Toggle FCON's DDF bit.
     *
     * Disable Any Data Fetch from Flash
     */
    inline void toggle_FCON_DDF() volatile
    {
        FCON ^= 1u << 18u;
    }

    /**
     * Get FCON's DCF bit.
     */
    inline FLASH0_FCON_DDF get_FCON_DCF() volatile
    {
        return FLASH0_FCON_DDF(FCON & (1u << 17u));
    }

    /**
     * Set FCON's DCF bit.
     *
     * Disable Code Fetch from Flash Memory
     */
    inline void set_FCON_DCF() volatile
    {
        FCON |= 1u << 17u;
    }

    /**
     * Clear FCON's DCF bit.
     *
     * Disable Code Fetch from Flash Memory
     */
    inline void clear_FCON_DCF() volatile
    {
        FCON &= ~(1u << 17u);
    }

    /**
     * Toggle FCON's DCF bit.
     *
     * Disable Code Fetch from Flash Memory
     */
    inline void toggle_FCON_DCF() volatile
    {
        FCON ^= 1u << 17u;
    }

    /**
     * Get FCON's RPA bit.
     */
    inline FLASH0_FCON_RPA get_FCON_RPA() volatile
    {
        return FLASH0_FCON_RPA(FCON & (1u << 16u));
    }

    /**
     * Get FCON's SLEEP bit.
     */
    inline FLASH0_FCON_SLEEP get_FCON_SLEEP() volatile
    {
        return FLASH0_FCON_SLEEP(FCON & (1u << 15u));
    }

    /**
     * Set FCON's SLEEP bit.
     *
     * Flash SLEEP
     */
    inline void set_FCON_SLEEP() volatile
    {
        FCON |= 1u << 15u;
    }

    /**
     * Clear FCON's SLEEP bit.
     *
     * Flash SLEEP
     */
    inline void clear_FCON_SLEEP() volatile
    {
        FCON &= ~(1u << 15u);
    }

    /**
     * Toggle FCON's SLEEP bit.
     *
     * Flash SLEEP
     */
    inline void toggle_FCON_SLEEP() volatile
    {
        FCON ^= 1u << 15u;
    }

    /**
     * Get FCON's ESLDIS bit.
     */
    inline FLASH0_FCON_ESLDIS get_FCON_ESLDIS() volatile
    {
        return FLASH0_FCON_ESLDIS(FCON & (1u << 14u));
    }

    /**
     * Set FCON's ESLDIS bit.
     *
     * External Sleep Request Disable
     */
    inline void set_FCON_ESLDIS() volatile
    {
        FCON |= 1u << 14u;
    }

    /**
     * Clear FCON's ESLDIS bit.
     *
     * External Sleep Request Disable
     */
    inline void clear_FCON_ESLDIS() volatile
    {
        FCON &= ~(1u << 14u);
    }

    /**
     * Toggle FCON's ESLDIS bit.
     *
     * External Sleep Request Disable
     */
    inline void toggle_FCON_ESLDIS() volatile
    {
        FCON ^= 1u << 14u;
    }

    /**
     * Get FCON's IDLE bit.
     */
    inline FLASH0_FCON_IDLE get_FCON_IDLE() volatile
    {
        return FLASH0_FCON_IDLE(FCON & (1u << 13u));
    }

    /**
     * Set FCON's IDLE bit.
     *
     * Dynamic Flash Idle
     */
    inline void set_FCON_IDLE() volatile
    {
        FCON |= 1u << 13u;
    }

    /**
     * Clear FCON's IDLE bit.
     *
     * Dynamic Flash Idle
     */
    inline void clear_FCON_IDLE() volatile
    {
        FCON &= ~(1u << 13u);
    }

    /**
     * Toggle FCON's IDLE bit.
     *
     * Dynamic Flash Idle
     */
    inline void toggle_FCON_IDLE() volatile
    {
        FCON ^= 1u << 13u;
    }

    /**
     * Get FCON's WSECPF bit.
     */
    inline FLASH0_FCON_WSECPF get_FCON_WSECPF() volatile
    {
        return FLASH0_FCON_WSECPF(FCON & (1u << 4u));
    }

    /**
     * Set FCON's WSECPF bit.
     *
     * Wait State for Error Correction of PFLASH
     */
    inline void set_FCON_WSECPF() volatile
    {
        FCON |= 1u << 4u;
    }

    /**
     * Clear FCON's WSECPF bit.
     *
     * Wait State for Error Correction of PFLASH
     */
    inline void clear_FCON_WSECPF() volatile
    {
        FCON &= ~(1u << 4u);
    }

    /**
     * Toggle FCON's WSECPF bit.
     *
     * Wait State for Error Correction of PFLASH
     */
    inline void toggle_FCON_WSECPF() volatile
    {
        FCON ^= 1u << 4u;
    }

    /**
     * Get FCON's WSPFLASH field.
     */
    inline FLASH0_FCON_WSPFLASH get_FCON_WSPFLASH() volatile
    {
        return FLASH0_FCON_WSPFLASH((FCON >> 0u) & 0b1111u);
    }

    /**
     * Set FCON's WSPFLASH field.
     *
     * Wait States for read access to PFLASH
     */
    inline void set_FCON_WSPFLASH(FLASH0_FCON_WSPFLASH value) volatile
    {
        uint32_t curr = FCON;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        FCON = curr;
    }

    /**
     * Get all of FCON's bit fields.
     */
    inline void get_FCON(FLASH0_FCON_EOBM &EOBM, FLASH0_FCON_PFDBERM &PFDBERM,
                         FLASH0_FCON_PFSBERM &PFSBERM,
                         FLASH0_FCON_PROERM &PROERM, FLASH0_FCON_SQERM &SQERM,
                         FLASH0_FCON_VOPERM &VOPERM, FLASH0_FCON_DDF &DDF,
                         FLASH0_FCON_DDF &DCF, FLASH0_FCON_RPA &RPA,
                         FLASH0_FCON_SLEEP &SLEEP, FLASH0_FCON_ESLDIS &ESLDIS,
                         FLASH0_FCON_IDLE &IDLE, FLASH0_FCON_WSECPF &WSECPF,
                         FLASH0_FCON_WSPFLASH &WSPFLASH) volatile
    {
        uint32_t curr = FCON;

        EOBM = FLASH0_FCON_EOBM(curr & (1u << 31u));
        PFDBERM = FLASH0_FCON_PFDBERM(curr & (1u << 29u));
        PFSBERM = FLASH0_FCON_PFSBERM(curr & (1u << 27u));
        PROERM = FLASH0_FCON_PROERM(curr & (1u << 26u));
        SQERM = FLASH0_FCON_SQERM(curr & (1u << 25u));
        VOPERM = FLASH0_FCON_VOPERM(curr & (1u << 24u));
        DDF = FLASH0_FCON_DDF(curr & (1u << 18u));
        DCF = FLASH0_FCON_DDF(curr & (1u << 17u));
        RPA = FLASH0_FCON_RPA(curr & (1u << 16u));
        SLEEP = FLASH0_FCON_SLEEP(curr & (1u << 15u));
        ESLDIS = FLASH0_FCON_ESLDIS(curr & (1u << 14u));
        IDLE = FLASH0_FCON_IDLE(curr & (1u << 13u));
        WSECPF = FLASH0_FCON_WSECPF(curr & (1u << 4u));
        WSPFLASH = FLASH0_FCON_WSPFLASH((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of FCON's bit fields.
     *
     * (read-write) Flash Configuration Register
     */
    inline void set_FCON(FLASH0_FCON_EOBM EOBM, FLASH0_FCON_PFDBERM PFDBERM,
                         FLASH0_FCON_PFSBERM PFSBERM,
                         FLASH0_FCON_PROERM PROERM, FLASH0_FCON_SQERM SQERM,
                         FLASH0_FCON_VOPERM VOPERM, FLASH0_FCON_DDF DDF,
                         FLASH0_FCON_DDF DCF, FLASH0_FCON_SLEEP SLEEP,
                         FLASH0_FCON_ESLDIS ESLDIS, FLASH0_FCON_IDLE IDLE,
                         FLASH0_FCON_WSECPF WSECPF,
                         FLASH0_FCON_WSPFLASH WSPFLASH) volatile
    {
        uint32_t curr = FCON;

        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(EOBM) & 0b1u) << 31u;
        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(PFDBERM) & 0b1u) << 29u;
        curr &= ~(0b1u << 27u);
        curr |= (std::to_underlying(PFSBERM) & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(PROERM) & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (std::to_underlying(SQERM) & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (std::to_underlying(VOPERM) & 0b1u) << 24u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(DDF) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(DCF) & 0b1u) << 17u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(SLEEP) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(ESLDIS) & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(IDLE) & 0b1u) << 13u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(WSECPF) & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(WSPFLASH) & 0b1111u) << 0u;

        FCON = curr;
    }

    /**
     * Get MARP's TRAPDIS bit.
     */
    inline FLASH0_MARP_TRAPDIS get_MARP_TRAPDIS() volatile
    {
        return FLASH0_MARP_TRAPDIS(MARP & (1u << 15u));
    }

    /**
     * Set MARP's TRAPDIS bit.
     *
     * PFLASH Double-Bit Error Trap Disable
     */
    inline void set_MARP_TRAPDIS() volatile
    {
        MARP |= 1u << 15u;
    }

    /**
     * Clear MARP's TRAPDIS bit.
     *
     * PFLASH Double-Bit Error Trap Disable
     */
    inline void clear_MARP_TRAPDIS() volatile
    {
        MARP &= ~(1u << 15u);
    }

    /**
     * Toggle MARP's TRAPDIS bit.
     *
     * PFLASH Double-Bit Error Trap Disable
     */
    inline void toggle_MARP_TRAPDIS() volatile
    {
        MARP ^= 1u << 15u;
    }

    /**
     * Get MARP's MARGIN field.
     */
    inline FLASH0_MARP_MARGIN get_MARP_MARGIN() volatile
    {
        return FLASH0_MARP_MARGIN((MARP >> 0u) & 0b1111u);
    }

    /**
     * Set MARP's MARGIN field.
     *
     * PFLASH Margin Selection
     */
    inline void set_MARP_MARGIN(FLASH0_MARP_MARGIN value) volatile
    {
        uint32_t curr = MARP;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        MARP = curr;
    }

    /**
     * Get all of MARP's bit fields.
     */
    inline void get_MARP(FLASH0_MARP_TRAPDIS &TRAPDIS,
                         FLASH0_MARP_MARGIN &MARGIN) volatile
    {
        uint32_t curr = MARP;

        TRAPDIS = FLASH0_MARP_TRAPDIS(curr & (1u << 15u));
        MARGIN = FLASH0_MARP_MARGIN((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of MARP's bit fields.
     *
     * (read-write) Margin Control Register PFLASH
     */
    inline void set_MARP(FLASH0_MARP_TRAPDIS TRAPDIS,
                         FLASH0_MARP_MARGIN MARGIN) volatile
    {
        uint32_t curr = MARP;

        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(TRAPDIS) & 0b1u) << 15u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MARGIN) & 0b1111u) << 0u;

        MARP = curr;
    }

    /**
     * Get PROCON0's RPRO bit.
     */
    inline FLASH0_PROCON0_RPRO get_PROCON0_RPRO() volatile
    {
        return FLASH0_PROCON0_RPRO(PROCON0 & (1u << 15u));
    }

    /**
     * Get PROCON0's S14_S15L bit.
     */
    inline FLASH0_PROCON0_S14_S15L get_PROCON0_S14_S15L() volatile
    {
        return FLASH0_PROCON0_S14_S15L(PROCON0 & (1u << 12u));
    }

    /**
     * Get PROCON0's S12_S13L bit.
     */
    inline FLASH0_PROCON0_S12_S13L get_PROCON0_S12_S13L() volatile
    {
        return FLASH0_PROCON0_S12_S13L(PROCON0 & (1u << 11u));
    }

    /**
     * Get PROCON0's S10_S11L bit.
     */
    inline FLASH0_PROCON0_S10_S11L get_PROCON0_S10_S11L() volatile
    {
        return FLASH0_PROCON0_S10_S11L(PROCON0 & (1u << 10u));
    }

    /**
     * Get PROCON0's S9L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S9L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 9u));
    }

    /**
     * Get PROCON0's S8L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S8L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 8u));
    }

    /**
     * Get PROCON0's S7L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S7L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 7u));
    }

    /**
     * Get PROCON0's S6L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S6L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 6u));
    }

    /**
     * Get PROCON0's S5L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S5L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 5u));
    }

    /**
     * Get PROCON0's S4L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S4L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 4u));
    }

    /**
     * Get PROCON0's S3L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S3L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 3u));
    }

    /**
     * Get PROCON0's S2L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S2L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 2u));
    }

    /**
     * Get PROCON0's S1L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S1L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 1u));
    }

    /**
     * Get PROCON0's S0L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON0_S0L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON0 & (1u << 0u));
    }

    /**
     * Get all of PROCON0's bit fields.
     */
    inline void get_PROCON0(FLASH0_PROCON0_RPRO &RPRO,
                            FLASH0_PROCON0_S14_S15L &S14_S15L,
                            FLASH0_PROCON0_S12_S13L &S12_S13L,
                            FLASH0_PROCON0_S10_S11L &S10_S11L,
                            FLASH0_PROCON0_S9L &S9L, FLASH0_PROCON0_S9L &S8L,
                            FLASH0_PROCON0_S9L &S7L, FLASH0_PROCON0_S9L &S6L,
                            FLASH0_PROCON0_S9L &S5L, FLASH0_PROCON0_S9L &S4L,
                            FLASH0_PROCON0_S9L &S3L, FLASH0_PROCON0_S9L &S2L,
                            FLASH0_PROCON0_S9L &S1L,
                            FLASH0_PROCON0_S9L &S0L) volatile
    {
        uint32_t curr = PROCON0;

        RPRO = FLASH0_PROCON0_RPRO(curr & (1u << 15u));
        S14_S15L = FLASH0_PROCON0_S14_S15L(curr & (1u << 12u));
        S12_S13L = FLASH0_PROCON0_S12_S13L(curr & (1u << 11u));
        S10_S11L = FLASH0_PROCON0_S10_S11L(curr & (1u << 10u));
        S9L = FLASH0_PROCON0_S9L(curr & (1u << 9u));
        S8L = FLASH0_PROCON0_S9L(curr & (1u << 8u));
        S7L = FLASH0_PROCON0_S9L(curr & (1u << 7u));
        S6L = FLASH0_PROCON0_S9L(curr & (1u << 6u));
        S5L = FLASH0_PROCON0_S9L(curr & (1u << 5u));
        S4L = FLASH0_PROCON0_S9L(curr & (1u << 4u));
        S3L = FLASH0_PROCON0_S9L(curr & (1u << 3u));
        S2L = FLASH0_PROCON0_S9L(curr & (1u << 2u));
        S1L = FLASH0_PROCON0_S9L(curr & (1u << 1u));
        S0L = FLASH0_PROCON0_S9L(curr & (1u << 0u));
    }

    /**
     * Get PROCON1's PSR bit.
     */
    inline FLASH0_PROCON1_PSR get_PROCON1_PSR() volatile
    {
        return FLASH0_PROCON1_PSR(PROCON1 & (1u << 16u));
    }

    /**
     * Get PROCON1's S14_S15L bit.
     */
    inline FLASH0_PROCON0_S14_S15L get_PROCON1_S14_S15L() volatile
    {
        return FLASH0_PROCON0_S14_S15L(PROCON1 & (1u << 12u));
    }

    /**
     * Get PROCON1's S12_S13L bit.
     */
    inline FLASH0_PROCON0_S12_S13L get_PROCON1_S12_S13L() volatile
    {
        return FLASH0_PROCON0_S12_S13L(PROCON1 & (1u << 11u));
    }

    /**
     * Get PROCON1's S10_S11L bit.
     */
    inline FLASH0_PROCON0_S10_S11L get_PROCON1_S10_S11L() volatile
    {
        return FLASH0_PROCON0_S10_S11L(PROCON1 & (1u << 10u));
    }

    /**
     * Get PROCON1's S9L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S9L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 9u));
    }

    /**
     * Get PROCON1's S8L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S8L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 8u));
    }

    /**
     * Get PROCON1's S7L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S7L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 7u));
    }

    /**
     * Get PROCON1's S6L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S6L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 6u));
    }

    /**
     * Get PROCON1's S5L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S5L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 5u));
    }

    /**
     * Get PROCON1's S4L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S4L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 4u));
    }

    /**
     * Get PROCON1's S3L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S3L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 3u));
    }

    /**
     * Get PROCON1's S2L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S2L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 2u));
    }

    /**
     * Get PROCON1's S1L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S1L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 1u));
    }

    /**
     * Get PROCON1's S0L bit.
     */
    inline FLASH0_PROCON0_S9L get_PROCON1_S0L() volatile
    {
        return FLASH0_PROCON0_S9L(PROCON1 & (1u << 0u));
    }

    /**
     * Get all of PROCON1's bit fields.
     */
    inline void get_PROCON1(FLASH0_PROCON1_PSR &PSR,
                            FLASH0_PROCON0_S14_S15L &S14_S15L,
                            FLASH0_PROCON0_S12_S13L &S12_S13L,
                            FLASH0_PROCON0_S10_S11L &S10_S11L,
                            FLASH0_PROCON0_S9L &S9L, FLASH0_PROCON0_S9L &S8L,
                            FLASH0_PROCON0_S9L &S7L, FLASH0_PROCON0_S9L &S6L,
                            FLASH0_PROCON0_S9L &S5L, FLASH0_PROCON0_S9L &S4L,
                            FLASH0_PROCON0_S9L &S3L, FLASH0_PROCON0_S9L &S2L,
                            FLASH0_PROCON0_S9L &S1L,
                            FLASH0_PROCON0_S9L &S0L) volatile
    {
        uint32_t curr = PROCON1;

        PSR = FLASH0_PROCON1_PSR(curr & (1u << 16u));
        S14_S15L = FLASH0_PROCON0_S14_S15L(curr & (1u << 12u));
        S12_S13L = FLASH0_PROCON0_S12_S13L(curr & (1u << 11u));
        S10_S11L = FLASH0_PROCON0_S10_S11L(curr & (1u << 10u));
        S9L = FLASH0_PROCON0_S9L(curr & (1u << 9u));
        S8L = FLASH0_PROCON0_S9L(curr & (1u << 8u));
        S7L = FLASH0_PROCON0_S9L(curr & (1u << 7u));
        S6L = FLASH0_PROCON0_S9L(curr & (1u << 6u));
        S5L = FLASH0_PROCON0_S9L(curr & (1u << 5u));
        S4L = FLASH0_PROCON0_S9L(curr & (1u << 4u));
        S3L = FLASH0_PROCON0_S9L(curr & (1u << 3u));
        S2L = FLASH0_PROCON0_S9L(curr & (1u << 2u));
        S1L = FLASH0_PROCON0_S9L(curr & (1u << 1u));
        S0L = FLASH0_PROCON0_S9L(curr & (1u << 0u));
    }

    /**
     * Get PROCON2's S14_S15ROM bit.
     */
    inline FLASH0_PROCON2_S14_S15ROM get_PROCON2_S14_S15ROM() volatile
    {
        return FLASH0_PROCON2_S14_S15ROM(PROCON2 & (1u << 12u));
    }

    /**
     * Get PROCON2's S12_S13ROM bit.
     */
    inline FLASH0_PROCON2_S12_S13ROM get_PROCON2_S12_S13ROM() volatile
    {
        return FLASH0_PROCON2_S12_S13ROM(PROCON2 & (1u << 11u));
    }

    /**
     * Get PROCON2's S10_S11ROM bit.
     */
    inline FLASH0_PROCON2_S10_S11ROM get_PROCON2_S10_S11ROM() volatile
    {
        return FLASH0_PROCON2_S10_S11ROM(PROCON2 & (1u << 10u));
    }

    /**
     * Get PROCON2's S9ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S9ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 9u));
    }

    /**
     * Get PROCON2's S8ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S8ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 8u));
    }

    /**
     * Get PROCON2's S7ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S7ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 7u));
    }

    /**
     * Get PROCON2's S6ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S6ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 6u));
    }

    /**
     * Get PROCON2's S5ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S5ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 5u));
    }

    /**
     * Get PROCON2's S4ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S4ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 4u));
    }

    /**
     * Get PROCON2's S3ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S3ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 3u));
    }

    /**
     * Get PROCON2's S2ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S2ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 2u));
    }

    /**
     * Get PROCON2's S1ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S1ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 1u));
    }

    /**
     * Get PROCON2's S0ROM bit.
     */
    inline FLASH0_PROCON2_S9ROM get_PROCON2_S0ROM() volatile
    {
        return FLASH0_PROCON2_S9ROM(PROCON2 & (1u << 0u));
    }

    /**
     * Get all of PROCON2's bit fields.
     */
    inline void get_PROCON2(
        FLASH0_PROCON2_S14_S15ROM &S14_S15ROM,
        FLASH0_PROCON2_S12_S13ROM &S12_S13ROM,
        FLASH0_PROCON2_S10_S11ROM &S10_S11ROM, FLASH0_PROCON2_S9ROM &S9ROM,
        FLASH0_PROCON2_S9ROM &S8ROM, FLASH0_PROCON2_S9ROM &S7ROM,
        FLASH0_PROCON2_S9ROM &S6ROM, FLASH0_PROCON2_S9ROM &S5ROM,
        FLASH0_PROCON2_S9ROM &S4ROM, FLASH0_PROCON2_S9ROM &S3ROM,
        FLASH0_PROCON2_S9ROM &S2ROM, FLASH0_PROCON2_S9ROM &S1ROM,
        FLASH0_PROCON2_S9ROM &S0ROM) volatile
    {
        uint32_t curr = PROCON2;

        S14_S15ROM = FLASH0_PROCON2_S14_S15ROM(curr & (1u << 12u));
        S12_S13ROM = FLASH0_PROCON2_S12_S13ROM(curr & (1u << 11u));
        S10_S11ROM = FLASH0_PROCON2_S10_S11ROM(curr & (1u << 10u));
        S9ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 9u));
        S8ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 8u));
        S7ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 7u));
        S6ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 6u));
        S5ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 5u));
        S4ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 4u));
        S3ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 3u));
        S2ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 2u));
        S1ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 1u));
        S0ROM = FLASH0_PROCON2_S9ROM(curr & (1u << 0u));
    }
};

static_assert(sizeof(flash0) == flash0::size);

static volatile flash0 *const FLASH0 = reinterpret_cast<flash0 *>(0x58001000);

static volatile flash0 *const PMU0 = reinterpret_cast<flash0 *>(0x58000508);

static volatile flash0 *const USIC0 = reinterpret_cast<flash0 *>(0x40030008);

}; // namespace XMC4700
