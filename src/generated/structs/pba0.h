/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include "../enums/PBA0_STS_WERR.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Peripheral Bridge AHB 0
 */
struct [[gnu::packed]] pba0
{
    /* Constant attributes. */
    static constexpr std::size_t size = 8; /*!< pba0's size in bytes. */

    /* Fields. */
    uint32_t STS;              /*!< (read-write) Peripheral Bridge Status Register */
    const uint32_t WADDR = {}; /*!< (read-only) PBA Write Error Address Register */

    /* Methods. */

    /**
     * Get STS's WERR bit.
     */
    inline PBA0_STS_WERR get_STS_WERR()
    {
        return PBA0_STS_WERR(STS & (1u << 0u));
    }

    /**
     * Set STS's WERR bit.
     */
    inline void set_STS_WERR()
    {
        STS |= 1u << 0u;
    }

    /**
     * Clear STS's WERR bit.
     */
    inline void clear_STS_WERR()
    {
        STS &= ~(1u << 0u);
    }

    /**
     * Toggle STS's WERR bit.
     */
    inline void toggle_STS_WERR()
    {
        STS ^= 1u << 0u;
    }

    /**
     * Get WADDR's WADDR field.
     */
    inline uint32_t get_WADDR_WADDR()
    {
        return (WADDR >> 0u) & 0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(pba0) == pba0::size);

static volatile pba0 *const PBA0 = reinterpret_cast<pba0 *>(0x40000000);

static volatile pba0 *const PBA1 = reinterpret_cast<pba0 *>(0x48000000);

}; // namespace XMC4700
