/**
 * \file
 * \brief Generated by ifgen (3.0.1).
 */
#pragma once

#include "../enums/PORT9_HWSEL_HW0.h"
#include "../enums/PORT9_HWSEL_HW1.h"
#include "../enums/PORT9_HWSEL_HW10.h"
#include "../enums/PORT9_HWSEL_HW11.h"
#include "../enums/PORT9_HWSEL_HW12.h"
#include "../enums/PORT9_HWSEL_HW13.h"
#include "../enums/PORT9_HWSEL_HW14.h"
#include "../enums/PORT9_HWSEL_HW15.h"
#include "../enums/PORT9_HWSEL_HW2.h"
#include "../enums/PORT9_HWSEL_HW3.h"
#include "../enums/PORT9_HWSEL_HW4.h"
#include "../enums/PORT9_HWSEL_HW5.h"
#include "../enums/PORT9_HWSEL_HW6.h"
#include "../enums/PORT9_HWSEL_HW7.h"
#include "../enums/PORT9_HWSEL_HW8.h"
#include "../enums/PORT9_HWSEL_HW9.h"
#include "../enums/PORT9_IN_P0.h"
#include "../enums/PORT9_IN_P1.h"
#include "../enums/PORT9_IN_P10.h"
#include "../enums/PORT9_IN_P11.h"
#include "../enums/PORT9_IN_P12.h"
#include "../enums/PORT9_IN_P13.h"
#include "../enums/PORT9_IN_P14.h"
#include "../enums/PORT9_IN_P15.h"
#include "../enums/PORT9_IN_P2.h"
#include "../enums/PORT9_IN_P3.h"
#include "../enums/PORT9_IN_P4.h"
#include "../enums/PORT9_IN_P5.h"
#include "../enums/PORT9_IN_P6.h"
#include "../enums/PORT9_IN_P7.h"
#include "../enums/PORT9_IN_P8.h"
#include "../enums/PORT9_IN_P9.h"
#include "../enums/PORT9_IOCR0_PC0.h"
#include "../enums/PORT9_IOCR0_PC1.h"
#include "../enums/PORT9_IOCR0_PC2.h"
#include "../enums/PORT9_IOCR0_PC3.h"
#include "../enums/PORT9_IOCR4_PC4.h"
#include "../enums/PORT9_IOCR4_PC5.h"
#include "../enums/PORT9_IOCR4_PC6.h"
#include "../enums/PORT9_IOCR4_PC7.h"
#include "../enums/PORT9_IOCR8_PC10.h"
#include "../enums/PORT9_IOCR8_PC11.h"
#include "../enums/PORT9_IOCR8_PC8.h"
#include "../enums/PORT9_IOCR8_PC9.h"
#include "../enums/PORT9_OUT_P0.h"
#include "../enums/PORT9_OUT_P1.h"
#include "../enums/PORT9_OUT_P10.h"
#include "../enums/PORT9_OUT_P11.h"
#include "../enums/PORT9_OUT_P12.h"
#include "../enums/PORT9_OUT_P13.h"
#include "../enums/PORT9_OUT_P14.h"
#include "../enums/PORT9_OUT_P15.h"
#include "../enums/PORT9_OUT_P2.h"
#include "../enums/PORT9_OUT_P3.h"
#include "../enums/PORT9_OUT_P4.h"
#include "../enums/PORT9_OUT_P5.h"
#include "../enums/PORT9_OUT_P6.h"
#include "../enums/PORT9_OUT_P7.h"
#include "../enums/PORT9_OUT_P8.h"
#include "../enums/PORT9_OUT_P9.h"
#include "../enums/PORT9_PDISC_PDIS0.h"
#include "../enums/PORT9_PDISC_PDIS1.h"
#include "../enums/PORT9_PDISC_PDIS10.h"
#include "../enums/PORT9_PDISC_PDIS11.h"
#include "../enums/PORT9_PDISC_PDIS12.h"
#include "../enums/PORT9_PDISC_PDIS13.h"
#include "../enums/PORT9_PDISC_PDIS14.h"
#include "../enums/PORT9_PDISC_PDIS15.h"
#include "../enums/PORT9_PDISC_PDIS2.h"
#include "../enums/PORT9_PDISC_PDIS3.h"
#include "../enums/PORT9_PDISC_PDIS4.h"
#include "../enums/PORT9_PDISC_PDIS5.h"
#include "../enums/PORT9_PDISC_PDIS6.h"
#include "../enums/PORT9_PDISC_PDIS7.h"
#include "../enums/PORT9_PDISC_PDIS8.h"
#include "../enums/PORT9_PDISC_PDIS9.h"
#include "../enums/PORT9_PDR0_PD0.h"
#include "../enums/PORT9_PDR0_PD1.h"
#include "../enums/PORT9_PDR0_PD2.h"
#include "../enums/PORT9_PDR0_PD3.h"
#include "../enums/PORT9_PDR0_PD4.h"
#include "../enums/PORT9_PDR0_PD5.h"
#include "../enums/PORT9_PDR0_PD6.h"
#include "../enums/PORT9_PDR0_PD7.h"
#include "../enums/PORT9_PDR1_PD10.h"
#include "../enums/PORT9_PDR1_PD11.h"
#include "../enums/PORT9_PDR1_PD12.h"
#include "../enums/PORT9_PDR1_PD13.h"
#include "../enums/PORT9_PDR1_PD14.h"
#include "../enums/PORT9_PDR1_PD15.h"
#include "../enums/PORT9_PDR1_PD8.h"
#include "../enums/PORT9_PDR1_PD9.h"
#include "../enums/PORT9_PPS_PPS0.h"
#include "../enums/PORT9_PPS_PPS1.h"
#include "../enums/PORT9_PPS_PPS10.h"
#include "../enums/PORT9_PPS_PPS11.h"
#include "../enums/PORT9_PPS_PPS12.h"
#include "../enums/PORT9_PPS_PPS13.h"
#include "../enums/PORT9_PPS_PPS14.h"
#include "../enums/PORT9_PPS_PPS15.h"
#include "../enums/PORT9_PPS_PPS2.h"
#include "../enums/PORT9_PPS_PPS3.h"
#include "../enums/PORT9_PPS_PPS4.h"
#include "../enums/PORT9_PPS_PPS5.h"
#include "../enums/PORT9_PPS_PPS6.h"
#include "../enums/PORT9_PPS_PPS7.h"
#include "../enums/PORT9_PPS_PPS8.h"
#include "../enums/PORT9_PPS_PPS9.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Port 9
 */
struct [[gnu::packed]] port9
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< port9's identifier. */
    static constexpr std::size_t size = 120; /*!< port9's size in bytes. */

    /* Fields. */
    uint32_t OUT;                                                    /*!< (read-write) Port 9 Output Register */
    uint32_t OMR;                                                    /*!< (write-only) Port 9 Output Modification Register */
    static constexpr std::size_t reserved_padding0_length = 2;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t IOCR0;                                                  /*!< (read-write) Port 9 Input/Output Control Register 0 */
    uint32_t IOCR4;                                                  /*!< (read-write) Port 5 Input/Output Control Register 4 */
    uint32_t IOCR8;                                                  /*!< (read-write) Port 9 Input/Output Control Register 8 */
    static constexpr std::size_t reserved_padding1_length = 2;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    const uint32_t IN = {};                                          /*!< (read-only) Port 9 Input Register */
    static constexpr std::size_t reserved_padding2_length = 6;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t PDR0;                                                   /*!< (read-write) Port 9 Pad Driver Mode 0 Register */
    uint32_t PDR1;                                                   /*!< (read-write) Port 9 Pad Driver Mode 1 Register */
    static constexpr std::size_t reserved_padding3_length = 6;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    const uint32_t PDISC = {};                                       /*!< (read-only) Port 9 Pin Function Decision Control Register */
    static constexpr std::size_t reserved_padding4_length = 3;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t PPS;                                                    /*!< (read-write) Port 9 Pin Power Save Register */
    uint32_t HWSEL;                                                  /*!< (read-write) Port 9 Pin Hardware Select Register */

    /* Methods. */

    /**
     * Get OUT's P15 bit.
     */
    PORT9_OUT_P15 get_OUT_P15()
    {
        return PORT9_OUT_P15(OUT & (1u << 15u));
    }

    /**
     * Set OUT's P15 bit.
     */
    inline void set_OUT_P15()
    {
        OUT |= 1u << 15u;
    }

    /**
     * Clear OUT's P15 bit.
     */
    inline void clear_OUT_P15()
    {
        OUT &= ~(1u << 15u);
    }

    /**
     * Toggle OUT's P15 bit.
     */
    inline void toggle_OUT_P15()
    {
        OUT ^= 1u << 15u;
    }

    /**
     * Get OUT's P14 bit.
     */
    PORT9_OUT_P14 get_OUT_P14()
    {
        return PORT9_OUT_P14(OUT & (1u << 14u));
    }

    /**
     * Set OUT's P14 bit.
     */
    inline void set_OUT_P14()
    {
        OUT |= 1u << 14u;
    }

    /**
     * Clear OUT's P14 bit.
     */
    inline void clear_OUT_P14()
    {
        OUT &= ~(1u << 14u);
    }

    /**
     * Toggle OUT's P14 bit.
     */
    inline void toggle_OUT_P14()
    {
        OUT ^= 1u << 14u;
    }

    /**
     * Get OUT's P13 bit.
     */
    PORT9_OUT_P13 get_OUT_P13()
    {
        return PORT9_OUT_P13(OUT & (1u << 13u));
    }

    /**
     * Set OUT's P13 bit.
     */
    inline void set_OUT_P13()
    {
        OUT |= 1u << 13u;
    }

    /**
     * Clear OUT's P13 bit.
     */
    inline void clear_OUT_P13()
    {
        OUT &= ~(1u << 13u);
    }

    /**
     * Toggle OUT's P13 bit.
     */
    inline void toggle_OUT_P13()
    {
        OUT ^= 1u << 13u;
    }

    /**
     * Get OUT's P12 bit.
     */
    PORT9_OUT_P12 get_OUT_P12()
    {
        return PORT9_OUT_P12(OUT & (1u << 12u));
    }

    /**
     * Set OUT's P12 bit.
     */
    inline void set_OUT_P12()
    {
        OUT |= 1u << 12u;
    }

    /**
     * Clear OUT's P12 bit.
     */
    inline void clear_OUT_P12()
    {
        OUT &= ~(1u << 12u);
    }

    /**
     * Toggle OUT's P12 bit.
     */
    inline void toggle_OUT_P12()
    {
        OUT ^= 1u << 12u;
    }

    /**
     * Get OUT's P11 bit.
     */
    PORT9_OUT_P11 get_OUT_P11()
    {
        return PORT9_OUT_P11(OUT & (1u << 11u));
    }

    /**
     * Set OUT's P11 bit.
     */
    inline void set_OUT_P11()
    {
        OUT |= 1u << 11u;
    }

    /**
     * Clear OUT's P11 bit.
     */
    inline void clear_OUT_P11()
    {
        OUT &= ~(1u << 11u);
    }

    /**
     * Toggle OUT's P11 bit.
     */
    inline void toggle_OUT_P11()
    {
        OUT ^= 1u << 11u;
    }

    /**
     * Get OUT's P10 bit.
     */
    PORT9_OUT_P10 get_OUT_P10()
    {
        return PORT9_OUT_P10(OUT & (1u << 10u));
    }

    /**
     * Set OUT's P10 bit.
     */
    inline void set_OUT_P10()
    {
        OUT |= 1u << 10u;
    }

    /**
     * Clear OUT's P10 bit.
     */
    inline void clear_OUT_P10()
    {
        OUT &= ~(1u << 10u);
    }

    /**
     * Toggle OUT's P10 bit.
     */
    inline void toggle_OUT_P10()
    {
        OUT ^= 1u << 10u;
    }

    /**
     * Get OUT's P9 bit.
     */
    PORT9_OUT_P9 get_OUT_P9()
    {
        return PORT9_OUT_P9(OUT & (1u << 9u));
    }

    /**
     * Set OUT's P9 bit.
     */
    inline void set_OUT_P9()
    {
        OUT |= 1u << 9u;
    }

    /**
     * Clear OUT's P9 bit.
     */
    inline void clear_OUT_P9()
    {
        OUT &= ~(1u << 9u);
    }

    /**
     * Toggle OUT's P9 bit.
     */
    inline void toggle_OUT_P9()
    {
        OUT ^= 1u << 9u;
    }

    /**
     * Get OUT's P8 bit.
     */
    PORT9_OUT_P8 get_OUT_P8()
    {
        return PORT9_OUT_P8(OUT & (1u << 8u));
    }

    /**
     * Set OUT's P8 bit.
     */
    inline void set_OUT_P8()
    {
        OUT |= 1u << 8u;
    }

    /**
     * Clear OUT's P8 bit.
     */
    inline void clear_OUT_P8()
    {
        OUT &= ~(1u << 8u);
    }

    /**
     * Toggle OUT's P8 bit.
     */
    inline void toggle_OUT_P8()
    {
        OUT ^= 1u << 8u;
    }

    /**
     * Get OUT's P7 bit.
     */
    PORT9_OUT_P7 get_OUT_P7()
    {
        return PORT9_OUT_P7(OUT & (1u << 7u));
    }

    /**
     * Set OUT's P7 bit.
     */
    inline void set_OUT_P7()
    {
        OUT |= 1u << 7u;
    }

    /**
     * Clear OUT's P7 bit.
     */
    inline void clear_OUT_P7()
    {
        OUT &= ~(1u << 7u);
    }

    /**
     * Toggle OUT's P7 bit.
     */
    inline void toggle_OUT_P7()
    {
        OUT ^= 1u << 7u;
    }

    /**
     * Get OUT's P6 bit.
     */
    PORT9_OUT_P6 get_OUT_P6()
    {
        return PORT9_OUT_P6(OUT & (1u << 6u));
    }

    /**
     * Set OUT's P6 bit.
     */
    inline void set_OUT_P6()
    {
        OUT |= 1u << 6u;
    }

    /**
     * Clear OUT's P6 bit.
     */
    inline void clear_OUT_P6()
    {
        OUT &= ~(1u << 6u);
    }

    /**
     * Toggle OUT's P6 bit.
     */
    inline void toggle_OUT_P6()
    {
        OUT ^= 1u << 6u;
    }

    /**
     * Get OUT's P5 bit.
     */
    PORT9_OUT_P5 get_OUT_P5()
    {
        return PORT9_OUT_P5(OUT & (1u << 5u));
    }

    /**
     * Set OUT's P5 bit.
     */
    inline void set_OUT_P5()
    {
        OUT |= 1u << 5u;
    }

    /**
     * Clear OUT's P5 bit.
     */
    inline void clear_OUT_P5()
    {
        OUT &= ~(1u << 5u);
    }

    /**
     * Toggle OUT's P5 bit.
     */
    inline void toggle_OUT_P5()
    {
        OUT ^= 1u << 5u;
    }

    /**
     * Get OUT's P4 bit.
     */
    PORT9_OUT_P4 get_OUT_P4()
    {
        return PORT9_OUT_P4(OUT & (1u << 4u));
    }

    /**
     * Set OUT's P4 bit.
     */
    inline void set_OUT_P4()
    {
        OUT |= 1u << 4u;
    }

    /**
     * Clear OUT's P4 bit.
     */
    inline void clear_OUT_P4()
    {
        OUT &= ~(1u << 4u);
    }

    /**
     * Toggle OUT's P4 bit.
     */
    inline void toggle_OUT_P4()
    {
        OUT ^= 1u << 4u;
    }

    /**
     * Get OUT's P3 bit.
     */
    PORT9_OUT_P3 get_OUT_P3()
    {
        return PORT9_OUT_P3(OUT & (1u << 3u));
    }

    /**
     * Set OUT's P3 bit.
     */
    inline void set_OUT_P3()
    {
        OUT |= 1u << 3u;
    }

    /**
     * Clear OUT's P3 bit.
     */
    inline void clear_OUT_P3()
    {
        OUT &= ~(1u << 3u);
    }

    /**
     * Toggle OUT's P3 bit.
     */
    inline void toggle_OUT_P3()
    {
        OUT ^= 1u << 3u;
    }

    /**
     * Get OUT's P2 bit.
     */
    PORT9_OUT_P2 get_OUT_P2()
    {
        return PORT9_OUT_P2(OUT & (1u << 2u));
    }

    /**
     * Set OUT's P2 bit.
     */
    inline void set_OUT_P2()
    {
        OUT |= 1u << 2u;
    }

    /**
     * Clear OUT's P2 bit.
     */
    inline void clear_OUT_P2()
    {
        OUT &= ~(1u << 2u);
    }

    /**
     * Toggle OUT's P2 bit.
     */
    inline void toggle_OUT_P2()
    {
        OUT ^= 1u << 2u;
    }

    /**
     * Get OUT's P1 bit.
     */
    PORT9_OUT_P1 get_OUT_P1()
    {
        return PORT9_OUT_P1(OUT & (1u << 1u));
    }

    /**
     * Set OUT's P1 bit.
     */
    inline void set_OUT_P1()
    {
        OUT |= 1u << 1u;
    }

    /**
     * Clear OUT's P1 bit.
     */
    inline void clear_OUT_P1()
    {
        OUT &= ~(1u << 1u);
    }

    /**
     * Toggle OUT's P1 bit.
     */
    inline void toggle_OUT_P1()
    {
        OUT ^= 1u << 1u;
    }

    /**
     * Get OUT's P0 bit.
     */
    PORT9_OUT_P0 get_OUT_P0()
    {
        return PORT9_OUT_P0(OUT & (1u << 0u));
    }

    /**
     * Set OUT's P0 bit.
     */
    inline void set_OUT_P0()
    {
        OUT |= 1u << 0u;
    }

    /**
     * Clear OUT's P0 bit.
     */
    inline void clear_OUT_P0()
    {
        OUT &= ~(1u << 0u);
    }

    /**
     * Toggle OUT's P0 bit.
     */
    inline void toggle_OUT_P0()
    {
        OUT ^= 1u << 0u;
    }

    /**
     * Set OMR's PR15 bit.
     */
    inline void set_OMR_PR15()
    {
        OMR |= 1u << 31u;
    }

    /**
     * Clear OMR's PR15 bit.
     */
    inline void clear_OMR_PR15()
    {
        OMR &= ~(1u << 31u);
    }

    /**
     * Toggle OMR's PR15 bit.
     */
    inline void toggle_OMR_PR15()
    {
        OMR ^= 1u << 31u;
    }

    /**
     * Set OMR's PR14 bit.
     */
    inline void set_OMR_PR14()
    {
        OMR |= 1u << 30u;
    }

    /**
     * Clear OMR's PR14 bit.
     */
    inline void clear_OMR_PR14()
    {
        OMR &= ~(1u << 30u);
    }

    /**
     * Toggle OMR's PR14 bit.
     */
    inline void toggle_OMR_PR14()
    {
        OMR ^= 1u << 30u;
    }

    /**
     * Set OMR's PR13 bit.
     */
    inline void set_OMR_PR13()
    {
        OMR |= 1u << 29u;
    }

    /**
     * Clear OMR's PR13 bit.
     */
    inline void clear_OMR_PR13()
    {
        OMR &= ~(1u << 29u);
    }

    /**
     * Toggle OMR's PR13 bit.
     */
    inline void toggle_OMR_PR13()
    {
        OMR ^= 1u << 29u;
    }

    /**
     * Set OMR's PR12 bit.
     */
    inline void set_OMR_PR12()
    {
        OMR |= 1u << 28u;
    }

    /**
     * Clear OMR's PR12 bit.
     */
    inline void clear_OMR_PR12()
    {
        OMR &= ~(1u << 28u);
    }

    /**
     * Toggle OMR's PR12 bit.
     */
    inline void toggle_OMR_PR12()
    {
        OMR ^= 1u << 28u;
    }

    /**
     * Set OMR's PR11 bit.
     */
    inline void set_OMR_PR11()
    {
        OMR |= 1u << 27u;
    }

    /**
     * Clear OMR's PR11 bit.
     */
    inline void clear_OMR_PR11()
    {
        OMR &= ~(1u << 27u);
    }

    /**
     * Toggle OMR's PR11 bit.
     */
    inline void toggle_OMR_PR11()
    {
        OMR ^= 1u << 27u;
    }

    /**
     * Set OMR's PR10 bit.
     */
    inline void set_OMR_PR10()
    {
        OMR |= 1u << 26u;
    }

    /**
     * Clear OMR's PR10 bit.
     */
    inline void clear_OMR_PR10()
    {
        OMR &= ~(1u << 26u);
    }

    /**
     * Toggle OMR's PR10 bit.
     */
    inline void toggle_OMR_PR10()
    {
        OMR ^= 1u << 26u;
    }

    /**
     * Set OMR's PR9 bit.
     */
    inline void set_OMR_PR9()
    {
        OMR |= 1u << 25u;
    }

    /**
     * Clear OMR's PR9 bit.
     */
    inline void clear_OMR_PR9()
    {
        OMR &= ~(1u << 25u);
    }

    /**
     * Toggle OMR's PR9 bit.
     */
    inline void toggle_OMR_PR9()
    {
        OMR ^= 1u << 25u;
    }

    /**
     * Set OMR's PR8 bit.
     */
    inline void set_OMR_PR8()
    {
        OMR |= 1u << 24u;
    }

    /**
     * Clear OMR's PR8 bit.
     */
    inline void clear_OMR_PR8()
    {
        OMR &= ~(1u << 24u);
    }

    /**
     * Toggle OMR's PR8 bit.
     */
    inline void toggle_OMR_PR8()
    {
        OMR ^= 1u << 24u;
    }

    /**
     * Set OMR's PR7 bit.
     */
    inline void set_OMR_PR7()
    {
        OMR |= 1u << 23u;
    }

    /**
     * Clear OMR's PR7 bit.
     */
    inline void clear_OMR_PR7()
    {
        OMR &= ~(1u << 23u);
    }

    /**
     * Toggle OMR's PR7 bit.
     */
    inline void toggle_OMR_PR7()
    {
        OMR ^= 1u << 23u;
    }

    /**
     * Set OMR's PR6 bit.
     */
    inline void set_OMR_PR6()
    {
        OMR |= 1u << 22u;
    }

    /**
     * Clear OMR's PR6 bit.
     */
    inline void clear_OMR_PR6()
    {
        OMR &= ~(1u << 22u);
    }

    /**
     * Toggle OMR's PR6 bit.
     */
    inline void toggle_OMR_PR6()
    {
        OMR ^= 1u << 22u;
    }

    /**
     * Set OMR's PR5 bit.
     */
    inline void set_OMR_PR5()
    {
        OMR |= 1u << 21u;
    }

    /**
     * Clear OMR's PR5 bit.
     */
    inline void clear_OMR_PR5()
    {
        OMR &= ~(1u << 21u);
    }

    /**
     * Toggle OMR's PR5 bit.
     */
    inline void toggle_OMR_PR5()
    {
        OMR ^= 1u << 21u;
    }

    /**
     * Set OMR's PR4 bit.
     */
    inline void set_OMR_PR4()
    {
        OMR |= 1u << 20u;
    }

    /**
     * Clear OMR's PR4 bit.
     */
    inline void clear_OMR_PR4()
    {
        OMR &= ~(1u << 20u);
    }

    /**
     * Toggle OMR's PR4 bit.
     */
    inline void toggle_OMR_PR4()
    {
        OMR ^= 1u << 20u;
    }

    /**
     * Set OMR's PR3 bit.
     */
    inline void set_OMR_PR3()
    {
        OMR |= 1u << 19u;
    }

    /**
     * Clear OMR's PR3 bit.
     */
    inline void clear_OMR_PR3()
    {
        OMR &= ~(1u << 19u);
    }

    /**
     * Toggle OMR's PR3 bit.
     */
    inline void toggle_OMR_PR3()
    {
        OMR ^= 1u << 19u;
    }

    /**
     * Set OMR's PR2 bit.
     */
    inline void set_OMR_PR2()
    {
        OMR |= 1u << 18u;
    }

    /**
     * Clear OMR's PR2 bit.
     */
    inline void clear_OMR_PR2()
    {
        OMR &= ~(1u << 18u);
    }

    /**
     * Toggle OMR's PR2 bit.
     */
    inline void toggle_OMR_PR2()
    {
        OMR ^= 1u << 18u;
    }

    /**
     * Set OMR's PR1 bit.
     */
    inline void set_OMR_PR1()
    {
        OMR |= 1u << 17u;
    }

    /**
     * Clear OMR's PR1 bit.
     */
    inline void clear_OMR_PR1()
    {
        OMR &= ~(1u << 17u);
    }

    /**
     * Toggle OMR's PR1 bit.
     */
    inline void toggle_OMR_PR1()
    {
        OMR ^= 1u << 17u;
    }

    /**
     * Set OMR's PR0 bit.
     */
    inline void set_OMR_PR0()
    {
        OMR |= 1u << 16u;
    }

    /**
     * Clear OMR's PR0 bit.
     */
    inline void clear_OMR_PR0()
    {
        OMR &= ~(1u << 16u);
    }

    /**
     * Toggle OMR's PR0 bit.
     */
    inline void toggle_OMR_PR0()
    {
        OMR ^= 1u << 16u;
    }

    /**
     * Set OMR's PS15 bit.
     */
    inline void set_OMR_PS15()
    {
        OMR |= 1u << 15u;
    }

    /**
     * Clear OMR's PS15 bit.
     */
    inline void clear_OMR_PS15()
    {
        OMR &= ~(1u << 15u);
    }

    /**
     * Toggle OMR's PS15 bit.
     */
    inline void toggle_OMR_PS15()
    {
        OMR ^= 1u << 15u;
    }

    /**
     * Set OMR's PS14 bit.
     */
    inline void set_OMR_PS14()
    {
        OMR |= 1u << 14u;
    }

    /**
     * Clear OMR's PS14 bit.
     */
    inline void clear_OMR_PS14()
    {
        OMR &= ~(1u << 14u);
    }

    /**
     * Toggle OMR's PS14 bit.
     */
    inline void toggle_OMR_PS14()
    {
        OMR ^= 1u << 14u;
    }

    /**
     * Set OMR's PS13 bit.
     */
    inline void set_OMR_PS13()
    {
        OMR |= 1u << 13u;
    }

    /**
     * Clear OMR's PS13 bit.
     */
    inline void clear_OMR_PS13()
    {
        OMR &= ~(1u << 13u);
    }

    /**
     * Toggle OMR's PS13 bit.
     */
    inline void toggle_OMR_PS13()
    {
        OMR ^= 1u << 13u;
    }

    /**
     * Set OMR's PS12 bit.
     */
    inline void set_OMR_PS12()
    {
        OMR |= 1u << 12u;
    }

    /**
     * Clear OMR's PS12 bit.
     */
    inline void clear_OMR_PS12()
    {
        OMR &= ~(1u << 12u);
    }

    /**
     * Toggle OMR's PS12 bit.
     */
    inline void toggle_OMR_PS12()
    {
        OMR ^= 1u << 12u;
    }

    /**
     * Set OMR's PS11 bit.
     */
    inline void set_OMR_PS11()
    {
        OMR |= 1u << 11u;
    }

    /**
     * Clear OMR's PS11 bit.
     */
    inline void clear_OMR_PS11()
    {
        OMR &= ~(1u << 11u);
    }

    /**
     * Toggle OMR's PS11 bit.
     */
    inline void toggle_OMR_PS11()
    {
        OMR ^= 1u << 11u;
    }

    /**
     * Set OMR's PS10 bit.
     */
    inline void set_OMR_PS10()
    {
        OMR |= 1u << 10u;
    }

    /**
     * Clear OMR's PS10 bit.
     */
    inline void clear_OMR_PS10()
    {
        OMR &= ~(1u << 10u);
    }

    /**
     * Toggle OMR's PS10 bit.
     */
    inline void toggle_OMR_PS10()
    {
        OMR ^= 1u << 10u;
    }

    /**
     * Set OMR's PS9 bit.
     */
    inline void set_OMR_PS9()
    {
        OMR |= 1u << 9u;
    }

    /**
     * Clear OMR's PS9 bit.
     */
    inline void clear_OMR_PS9()
    {
        OMR &= ~(1u << 9u);
    }

    /**
     * Toggle OMR's PS9 bit.
     */
    inline void toggle_OMR_PS9()
    {
        OMR ^= 1u << 9u;
    }

    /**
     * Set OMR's PS8 bit.
     */
    inline void set_OMR_PS8()
    {
        OMR |= 1u << 8u;
    }

    /**
     * Clear OMR's PS8 bit.
     */
    inline void clear_OMR_PS8()
    {
        OMR &= ~(1u << 8u);
    }

    /**
     * Toggle OMR's PS8 bit.
     */
    inline void toggle_OMR_PS8()
    {
        OMR ^= 1u << 8u;
    }

    /**
     * Set OMR's PS7 bit.
     */
    inline void set_OMR_PS7()
    {
        OMR |= 1u << 7u;
    }

    /**
     * Clear OMR's PS7 bit.
     */
    inline void clear_OMR_PS7()
    {
        OMR &= ~(1u << 7u);
    }

    /**
     * Toggle OMR's PS7 bit.
     */
    inline void toggle_OMR_PS7()
    {
        OMR ^= 1u << 7u;
    }

    /**
     * Set OMR's PS6 bit.
     */
    inline void set_OMR_PS6()
    {
        OMR |= 1u << 6u;
    }

    /**
     * Clear OMR's PS6 bit.
     */
    inline void clear_OMR_PS6()
    {
        OMR &= ~(1u << 6u);
    }

    /**
     * Toggle OMR's PS6 bit.
     */
    inline void toggle_OMR_PS6()
    {
        OMR ^= 1u << 6u;
    }

    /**
     * Set OMR's PS5 bit.
     */
    inline void set_OMR_PS5()
    {
        OMR |= 1u << 5u;
    }

    /**
     * Clear OMR's PS5 bit.
     */
    inline void clear_OMR_PS5()
    {
        OMR &= ~(1u << 5u);
    }

    /**
     * Toggle OMR's PS5 bit.
     */
    inline void toggle_OMR_PS5()
    {
        OMR ^= 1u << 5u;
    }

    /**
     * Set OMR's PS4 bit.
     */
    inline void set_OMR_PS4()
    {
        OMR |= 1u << 4u;
    }

    /**
     * Clear OMR's PS4 bit.
     */
    inline void clear_OMR_PS4()
    {
        OMR &= ~(1u << 4u);
    }

    /**
     * Toggle OMR's PS4 bit.
     */
    inline void toggle_OMR_PS4()
    {
        OMR ^= 1u << 4u;
    }

    /**
     * Set OMR's PS3 bit.
     */
    inline void set_OMR_PS3()
    {
        OMR |= 1u << 3u;
    }

    /**
     * Clear OMR's PS3 bit.
     */
    inline void clear_OMR_PS3()
    {
        OMR &= ~(1u << 3u);
    }

    /**
     * Toggle OMR's PS3 bit.
     */
    inline void toggle_OMR_PS3()
    {
        OMR ^= 1u << 3u;
    }

    /**
     * Set OMR's PS2 bit.
     */
    inline void set_OMR_PS2()
    {
        OMR |= 1u << 2u;
    }

    /**
     * Clear OMR's PS2 bit.
     */
    inline void clear_OMR_PS2()
    {
        OMR &= ~(1u << 2u);
    }

    /**
     * Toggle OMR's PS2 bit.
     */
    inline void toggle_OMR_PS2()
    {
        OMR ^= 1u << 2u;
    }

    /**
     * Set OMR's PS1 bit.
     */
    inline void set_OMR_PS1()
    {
        OMR |= 1u << 1u;
    }

    /**
     * Clear OMR's PS1 bit.
     */
    inline void clear_OMR_PS1()
    {
        OMR &= ~(1u << 1u);
    }

    /**
     * Toggle OMR's PS1 bit.
     */
    inline void toggle_OMR_PS1()
    {
        OMR ^= 1u << 1u;
    }

    /**
     * Set OMR's PS0 bit.
     */
    inline void set_OMR_PS0()
    {
        OMR |= 1u << 0u;
    }

    /**
     * Clear OMR's PS0 bit.
     */
    inline void clear_OMR_PS0()
    {
        OMR &= ~(1u << 0u);
    }

    /**
     * Toggle OMR's PS0 bit.
     */
    inline void toggle_OMR_PS0()
    {
        OMR ^= 1u << 0u;
    }

    /**
     * Get IOCR0's PC3 field.
     */
    PORT9_IOCR0_PC3 get_IOCR0_PC3()
    {
        return PORT9_IOCR0_PC3((IOCR0 >> 27u) & 0b11111u);
    }

    /**
     * Set IOCR0's PC3 field.
     */
    inline void set_IOCR0_PC3(PORT9_IOCR0_PC3 value)
    {
        uint32_t curr = IOCR0;

        curr &= ~(0b11111u << 27u);
        curr |= (std::to_underlying(value) & 0b11111u) << 27u;

        IOCR0 = curr;
    }

    /**
     * Get IOCR0's PC2 field.
     */
    PORT9_IOCR0_PC2 get_IOCR0_PC2()
    {
        return PORT9_IOCR0_PC2((IOCR0 >> 19u) & 0b11111u);
    }

    /**
     * Set IOCR0's PC2 field.
     */
    inline void set_IOCR0_PC2(PORT9_IOCR0_PC2 value)
    {
        uint32_t curr = IOCR0;

        curr &= ~(0b11111u << 19u);
        curr |= (std::to_underlying(value) & 0b11111u) << 19u;

        IOCR0 = curr;
    }

    /**
     * Get IOCR0's PC1 field.
     */
    PORT9_IOCR0_PC1 get_IOCR0_PC1()
    {
        return PORT9_IOCR0_PC1((IOCR0 >> 11u) & 0b11111u);
    }

    /**
     * Set IOCR0's PC1 field.
     */
    inline void set_IOCR0_PC1(PORT9_IOCR0_PC1 value)
    {
        uint32_t curr = IOCR0;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        IOCR0 = curr;
    }

    /**
     * Get IOCR0's PC0 field.
     */
    PORT9_IOCR0_PC0 get_IOCR0_PC0()
    {
        return PORT9_IOCR0_PC0((IOCR0 >> 3u) & 0b11111u);
    }

    /**
     * Set IOCR0's PC0 field.
     */
    inline void set_IOCR0_PC0(PORT9_IOCR0_PC0 value)
    {
        uint32_t curr = IOCR0;

        curr &= ~(0b11111u << 3u);
        curr |= (std::to_underlying(value) & 0b11111u) << 3u;

        IOCR0 = curr;
    }

    /**
     * Get IOCR4's PC7 field.
     */
    PORT9_IOCR4_PC7 get_IOCR4_PC7()
    {
        return PORT9_IOCR4_PC7((IOCR4 >> 27u) & 0b11111u);
    }

    /**
     * Set IOCR4's PC7 field.
     */
    inline void set_IOCR4_PC7(PORT9_IOCR4_PC7 value)
    {
        uint32_t curr = IOCR4;

        curr &= ~(0b11111u << 27u);
        curr |= (std::to_underlying(value) & 0b11111u) << 27u;

        IOCR4 = curr;
    }

    /**
     * Get IOCR4's PC6 field.
     */
    PORT9_IOCR4_PC6 get_IOCR4_PC6()
    {
        return PORT9_IOCR4_PC6((IOCR4 >> 19u) & 0b11111u);
    }

    /**
     * Set IOCR4's PC6 field.
     */
    inline void set_IOCR4_PC6(PORT9_IOCR4_PC6 value)
    {
        uint32_t curr = IOCR4;

        curr &= ~(0b11111u << 19u);
        curr |= (std::to_underlying(value) & 0b11111u) << 19u;

        IOCR4 = curr;
    }

    /**
     * Get IOCR4's PC5 field.
     */
    PORT9_IOCR4_PC5 get_IOCR4_PC5()
    {
        return PORT9_IOCR4_PC5((IOCR4 >> 11u) & 0b11111u);
    }

    /**
     * Set IOCR4's PC5 field.
     */
    inline void set_IOCR4_PC5(PORT9_IOCR4_PC5 value)
    {
        uint32_t curr = IOCR4;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        IOCR4 = curr;
    }

    /**
     * Get IOCR4's PC4 field.
     */
    PORT9_IOCR4_PC4 get_IOCR4_PC4()
    {
        return PORT9_IOCR4_PC4((IOCR4 >> 3u) & 0b11111u);
    }

    /**
     * Set IOCR4's PC4 field.
     */
    inline void set_IOCR4_PC4(PORT9_IOCR4_PC4 value)
    {
        uint32_t curr = IOCR4;

        curr &= ~(0b11111u << 3u);
        curr |= (std::to_underlying(value) & 0b11111u) << 3u;

        IOCR4 = curr;
    }

    /**
     * Get IOCR8's PC11 field.
     */
    PORT9_IOCR8_PC11 get_IOCR8_PC11()
    {
        return PORT9_IOCR8_PC11((IOCR8 >> 27u) & 0b11111u);
    }

    /**
     * Set IOCR8's PC11 field.
     */
    inline void set_IOCR8_PC11(PORT9_IOCR8_PC11 value)
    {
        uint32_t curr = IOCR8;

        curr &= ~(0b11111u << 27u);
        curr |= (std::to_underlying(value) & 0b11111u) << 27u;

        IOCR8 = curr;
    }

    /**
     * Get IOCR8's PC10 field.
     */
    PORT9_IOCR8_PC10 get_IOCR8_PC10()
    {
        return PORT9_IOCR8_PC10((IOCR8 >> 19u) & 0b11111u);
    }

    /**
     * Set IOCR8's PC10 field.
     */
    inline void set_IOCR8_PC10(PORT9_IOCR8_PC10 value)
    {
        uint32_t curr = IOCR8;

        curr &= ~(0b11111u << 19u);
        curr |= (std::to_underlying(value) & 0b11111u) << 19u;

        IOCR8 = curr;
    }

    /**
     * Get IOCR8's PC9 field.
     */
    PORT9_IOCR8_PC9 get_IOCR8_PC9()
    {
        return PORT9_IOCR8_PC9((IOCR8 >> 11u) & 0b11111u);
    }

    /**
     * Set IOCR8's PC9 field.
     */
    inline void set_IOCR8_PC9(PORT9_IOCR8_PC9 value)
    {
        uint32_t curr = IOCR8;

        curr &= ~(0b11111u << 11u);
        curr |= (std::to_underlying(value) & 0b11111u) << 11u;

        IOCR8 = curr;
    }

    /**
     * Get IOCR8's PC8 field.
     */
    PORT9_IOCR8_PC8 get_IOCR8_PC8()
    {
        return PORT9_IOCR8_PC8((IOCR8 >> 3u) & 0b11111u);
    }

    /**
     * Set IOCR8's PC8 field.
     */
    inline void set_IOCR8_PC8(PORT9_IOCR8_PC8 value)
    {
        uint32_t curr = IOCR8;

        curr &= ~(0b11111u << 3u);
        curr |= (std::to_underlying(value) & 0b11111u) << 3u;

        IOCR8 = curr;
    }

    /**
     * Get IN's P15 bit.
     */
    PORT9_IN_P15 get_IN_P15()
    {
        return PORT9_IN_P15(IN & (1u << 15u));
    }

    /**
     * Get IN's P14 bit.
     */
    PORT9_IN_P14 get_IN_P14()
    {
        return PORT9_IN_P14(IN & (1u << 14u));
    }

    /**
     * Get IN's P13 bit.
     */
    PORT9_IN_P13 get_IN_P13()
    {
        return PORT9_IN_P13(IN & (1u << 13u));
    }

    /**
     * Get IN's P12 bit.
     */
    PORT9_IN_P12 get_IN_P12()
    {
        return PORT9_IN_P12(IN & (1u << 12u));
    }

    /**
     * Get IN's P11 bit.
     */
    PORT9_IN_P11 get_IN_P11()
    {
        return PORT9_IN_P11(IN & (1u << 11u));
    }

    /**
     * Get IN's P10 bit.
     */
    PORT9_IN_P10 get_IN_P10()
    {
        return PORT9_IN_P10(IN & (1u << 10u));
    }

    /**
     * Get IN's P9 bit.
     */
    PORT9_IN_P9 get_IN_P9()
    {
        return PORT9_IN_P9(IN & (1u << 9u));
    }

    /**
     * Get IN's P8 bit.
     */
    PORT9_IN_P8 get_IN_P8()
    {
        return PORT9_IN_P8(IN & (1u << 8u));
    }

    /**
     * Get IN's P7 bit.
     */
    PORT9_IN_P7 get_IN_P7()
    {
        return PORT9_IN_P7(IN & (1u << 7u));
    }

    /**
     * Get IN's P6 bit.
     */
    PORT9_IN_P6 get_IN_P6()
    {
        return PORT9_IN_P6(IN & (1u << 6u));
    }

    /**
     * Get IN's P5 bit.
     */
    PORT9_IN_P5 get_IN_P5()
    {
        return PORT9_IN_P5(IN & (1u << 5u));
    }

    /**
     * Get IN's P4 bit.
     */
    PORT9_IN_P4 get_IN_P4()
    {
        return PORT9_IN_P4(IN & (1u << 4u));
    }

    /**
     * Get IN's P3 bit.
     */
    PORT9_IN_P3 get_IN_P3()
    {
        return PORT9_IN_P3(IN & (1u << 3u));
    }

    /**
     * Get IN's P2 bit.
     */
    PORT9_IN_P2 get_IN_P2()
    {
        return PORT9_IN_P2(IN & (1u << 2u));
    }

    /**
     * Get IN's P1 bit.
     */
    PORT9_IN_P1 get_IN_P1()
    {
        return PORT9_IN_P1(IN & (1u << 1u));
    }

    /**
     * Get IN's P0 bit.
     */
    PORT9_IN_P0 get_IN_P0()
    {
        return PORT9_IN_P0(IN & (1u << 0u));
    }

    /**
     * Get PDR0's PD7 field.
     */
    PORT9_PDR0_PD7 get_PDR0_PD7()
    {
        return PORT9_PDR0_PD7((PDR0 >> 28u) & 0b111u);
    }

    /**
     * Set PDR0's PD7 field.
     */
    inline void set_PDR0_PD7(PORT9_PDR0_PD7 value)
    {
        uint32_t curr = PDR0;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        PDR0 = curr;
    }

    /**
     * Get PDR0's PD6 field.
     */
    PORT9_PDR0_PD6 get_PDR0_PD6()
    {
        return PORT9_PDR0_PD6((PDR0 >> 24u) & 0b111u);
    }

    /**
     * Set PDR0's PD6 field.
     */
    inline void set_PDR0_PD6(PORT9_PDR0_PD6 value)
    {
        uint32_t curr = PDR0;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        PDR0 = curr;
    }

    /**
     * Get PDR0's PD5 field.
     */
    PORT9_PDR0_PD5 get_PDR0_PD5()
    {
        return PORT9_PDR0_PD5((PDR0 >> 20u) & 0b111u);
    }

    /**
     * Set PDR0's PD5 field.
     */
    inline void set_PDR0_PD5(PORT9_PDR0_PD5 value)
    {
        uint32_t curr = PDR0;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        PDR0 = curr;
    }

    /**
     * Get PDR0's PD4 field.
     */
    PORT9_PDR0_PD4 get_PDR0_PD4()
    {
        return PORT9_PDR0_PD4((PDR0 >> 16u) & 0b111u);
    }

    /**
     * Set PDR0's PD4 field.
     */
    inline void set_PDR0_PD4(PORT9_PDR0_PD4 value)
    {
        uint32_t curr = PDR0;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        PDR0 = curr;
    }

    /**
     * Get PDR0's PD3 field.
     */
    PORT9_PDR0_PD3 get_PDR0_PD3()
    {
        return PORT9_PDR0_PD3((PDR0 >> 12u) & 0b111u);
    }

    /**
     * Set PDR0's PD3 field.
     */
    inline void set_PDR0_PD3(PORT9_PDR0_PD3 value)
    {
        uint32_t curr = PDR0;

        curr &= ~(0b111u << 12u);
        curr |= (std::to_underlying(value) & 0b111u) << 12u;

        PDR0 = curr;
    }

    /**
     * Get PDR0's PD2 field.
     */
    PORT9_PDR0_PD2 get_PDR0_PD2()
    {
        return PORT9_PDR0_PD2((PDR0 >> 8u) & 0b111u);
    }

    /**
     * Set PDR0's PD2 field.
     */
    inline void set_PDR0_PD2(PORT9_PDR0_PD2 value)
    {
        uint32_t curr = PDR0;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        PDR0 = curr;
    }

    /**
     * Get PDR0's PD1 field.
     */
    PORT9_PDR0_PD1 get_PDR0_PD1()
    {
        return PORT9_PDR0_PD1((PDR0 >> 4u) & 0b111u);
    }

    /**
     * Set PDR0's PD1 field.
     */
    inline void set_PDR0_PD1(PORT9_PDR0_PD1 value)
    {
        uint32_t curr = PDR0;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        PDR0 = curr;
    }

    /**
     * Get PDR0's PD0 field.
     */
    PORT9_PDR0_PD0 get_PDR0_PD0()
    {
        return PORT9_PDR0_PD0((PDR0 >> 0u) & 0b111u);
    }

    /**
     * Set PDR0's PD0 field.
     */
    inline void set_PDR0_PD0(PORT9_PDR0_PD0 value)
    {
        uint32_t curr = PDR0;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        PDR0 = curr;
    }

    /**
     * Get PDR1's PD15 field.
     */
    PORT9_PDR1_PD15 get_PDR1_PD15()
    {
        return PORT9_PDR1_PD15((PDR1 >> 28u) & 0b111u);
    }

    /**
     * Set PDR1's PD15 field.
     */
    inline void set_PDR1_PD15(PORT9_PDR1_PD15 value)
    {
        uint32_t curr = PDR1;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        PDR1 = curr;
    }

    /**
     * Get PDR1's PD14 field.
     */
    PORT9_PDR1_PD14 get_PDR1_PD14()
    {
        return PORT9_PDR1_PD14((PDR1 >> 24u) & 0b111u);
    }

    /**
     * Set PDR1's PD14 field.
     */
    inline void set_PDR1_PD14(PORT9_PDR1_PD14 value)
    {
        uint32_t curr = PDR1;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        PDR1 = curr;
    }

    /**
     * Get PDR1's PD13 field.
     */
    PORT9_PDR1_PD13 get_PDR1_PD13()
    {
        return PORT9_PDR1_PD13((PDR1 >> 20u) & 0b111u);
    }

    /**
     * Set PDR1's PD13 field.
     */
    inline void set_PDR1_PD13(PORT9_PDR1_PD13 value)
    {
        uint32_t curr = PDR1;

        curr &= ~(0b111u << 20u);
        curr |= (std::to_underlying(value) & 0b111u) << 20u;

        PDR1 = curr;
    }

    /**
     * Get PDR1's PD12 field.
     */
    PORT9_PDR1_PD12 get_PDR1_PD12()
    {
        return PORT9_PDR1_PD12((PDR1 >> 16u) & 0b111u);
    }

    /**
     * Set PDR1's PD12 field.
     */
    inline void set_PDR1_PD12(PORT9_PDR1_PD12 value)
    {
        uint32_t curr = PDR1;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        PDR1 = curr;
    }

    /**
     * Get PDR1's PD11 field.
     */
    PORT9_PDR1_PD11 get_PDR1_PD11()
    {
        return PORT9_PDR1_PD11((PDR1 >> 12u) & 0b111u);
    }

    /**
     * Set PDR1's PD11 field.
     */
    inline void set_PDR1_PD11(PORT9_PDR1_PD11 value)
    {
        uint32_t curr = PDR1;

        curr &= ~(0b111u << 12u);
        curr |= (std::to_underlying(value) & 0b111u) << 12u;

        PDR1 = curr;
    }

    /**
     * Get PDR1's PD10 field.
     */
    PORT9_PDR1_PD10 get_PDR1_PD10()
    {
        return PORT9_PDR1_PD10((PDR1 >> 8u) & 0b111u);
    }

    /**
     * Set PDR1's PD10 field.
     */
    inline void set_PDR1_PD10(PORT9_PDR1_PD10 value)
    {
        uint32_t curr = PDR1;

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        PDR1 = curr;
    }

    /**
     * Get PDR1's PD9 field.
     */
    PORT9_PDR1_PD9 get_PDR1_PD9()
    {
        return PORT9_PDR1_PD9((PDR1 >> 4u) & 0b111u);
    }

    /**
     * Set PDR1's PD9 field.
     */
    inline void set_PDR1_PD9(PORT9_PDR1_PD9 value)
    {
        uint32_t curr = PDR1;

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        PDR1 = curr;
    }

    /**
     * Get PDR1's PD8 field.
     */
    PORT9_PDR1_PD8 get_PDR1_PD8()
    {
        return PORT9_PDR1_PD8((PDR1 >> 0u) & 0b111u);
    }

    /**
     * Set PDR1's PD8 field.
     */
    inline void set_PDR1_PD8(PORT9_PDR1_PD8 value)
    {
        uint32_t curr = PDR1;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        PDR1 = curr;
    }

    /**
     * Get PDISC's PDIS15 bit.
     */
    PORT9_PDISC_PDIS15 get_PDISC_PDIS15()
    {
        return PORT9_PDISC_PDIS15(PDISC & (1u << 15u));
    }

    /**
     * Get PDISC's PDIS14 bit.
     */
    PORT9_PDISC_PDIS14 get_PDISC_PDIS14()
    {
        return PORT9_PDISC_PDIS14(PDISC & (1u << 14u));
    }

    /**
     * Get PDISC's PDIS13 bit.
     */
    PORT9_PDISC_PDIS13 get_PDISC_PDIS13()
    {
        return PORT9_PDISC_PDIS13(PDISC & (1u << 13u));
    }

    /**
     * Get PDISC's PDIS12 bit.
     */
    PORT9_PDISC_PDIS12 get_PDISC_PDIS12()
    {
        return PORT9_PDISC_PDIS12(PDISC & (1u << 12u));
    }

    /**
     * Get PDISC's PDIS11 bit.
     */
    PORT9_PDISC_PDIS11 get_PDISC_PDIS11()
    {
        return PORT9_PDISC_PDIS11(PDISC & (1u << 11u));
    }

    /**
     * Get PDISC's PDIS10 bit.
     */
    PORT9_PDISC_PDIS10 get_PDISC_PDIS10()
    {
        return PORT9_PDISC_PDIS10(PDISC & (1u << 10u));
    }

    /**
     * Get PDISC's PDIS9 bit.
     */
    PORT9_PDISC_PDIS9 get_PDISC_PDIS9()
    {
        return PORT9_PDISC_PDIS9(PDISC & (1u << 9u));
    }

    /**
     * Get PDISC's PDIS8 bit.
     */
    PORT9_PDISC_PDIS8 get_PDISC_PDIS8()
    {
        return PORT9_PDISC_PDIS8(PDISC & (1u << 8u));
    }

    /**
     * Get PDISC's PDIS7 bit.
     */
    PORT9_PDISC_PDIS7 get_PDISC_PDIS7()
    {
        return PORT9_PDISC_PDIS7(PDISC & (1u << 7u));
    }

    /**
     * Get PDISC's PDIS6 bit.
     */
    PORT9_PDISC_PDIS6 get_PDISC_PDIS6()
    {
        return PORT9_PDISC_PDIS6(PDISC & (1u << 6u));
    }

    /**
     * Get PDISC's PDIS5 bit.
     */
    PORT9_PDISC_PDIS5 get_PDISC_PDIS5()
    {
        return PORT9_PDISC_PDIS5(PDISC & (1u << 5u));
    }

    /**
     * Get PDISC's PDIS4 bit.
     */
    PORT9_PDISC_PDIS4 get_PDISC_PDIS4()
    {
        return PORT9_PDISC_PDIS4(PDISC & (1u << 4u));
    }

    /**
     * Get PDISC's PDIS3 bit.
     */
    PORT9_PDISC_PDIS3 get_PDISC_PDIS3()
    {
        return PORT9_PDISC_PDIS3(PDISC & (1u << 3u));
    }

    /**
     * Get PDISC's PDIS2 bit.
     */
    PORT9_PDISC_PDIS2 get_PDISC_PDIS2()
    {
        return PORT9_PDISC_PDIS2(PDISC & (1u << 2u));
    }

    /**
     * Get PDISC's PDIS1 bit.
     */
    PORT9_PDISC_PDIS1 get_PDISC_PDIS1()
    {
        return PORT9_PDISC_PDIS1(PDISC & (1u << 1u));
    }

    /**
     * Get PDISC's PDIS0 bit.
     */
    PORT9_PDISC_PDIS0 get_PDISC_PDIS0()
    {
        return PORT9_PDISC_PDIS0(PDISC & (1u << 0u));
    }

    /**
     * Get PPS's PPS15 bit.
     */
    PORT9_PPS_PPS15 get_PPS_PPS15()
    {
        return PORT9_PPS_PPS15(PPS & (1u << 15u));
    }

    /**
     * Set PPS's PPS15 bit.
     */
    inline void set_PPS_PPS15()
    {
        PPS |= 1u << 15u;
    }

    /**
     * Clear PPS's PPS15 bit.
     */
    inline void clear_PPS_PPS15()
    {
        PPS &= ~(1u << 15u);
    }

    /**
     * Toggle PPS's PPS15 bit.
     */
    inline void toggle_PPS_PPS15()
    {
        PPS ^= 1u << 15u;
    }

    /**
     * Get PPS's PPS14 bit.
     */
    PORT9_PPS_PPS14 get_PPS_PPS14()
    {
        return PORT9_PPS_PPS14(PPS & (1u << 14u));
    }

    /**
     * Set PPS's PPS14 bit.
     */
    inline void set_PPS_PPS14()
    {
        PPS |= 1u << 14u;
    }

    /**
     * Clear PPS's PPS14 bit.
     */
    inline void clear_PPS_PPS14()
    {
        PPS &= ~(1u << 14u);
    }

    /**
     * Toggle PPS's PPS14 bit.
     */
    inline void toggle_PPS_PPS14()
    {
        PPS ^= 1u << 14u;
    }

    /**
     * Get PPS's PPS13 bit.
     */
    PORT9_PPS_PPS13 get_PPS_PPS13()
    {
        return PORT9_PPS_PPS13(PPS & (1u << 13u));
    }

    /**
     * Set PPS's PPS13 bit.
     */
    inline void set_PPS_PPS13()
    {
        PPS |= 1u << 13u;
    }

    /**
     * Clear PPS's PPS13 bit.
     */
    inline void clear_PPS_PPS13()
    {
        PPS &= ~(1u << 13u);
    }

    /**
     * Toggle PPS's PPS13 bit.
     */
    inline void toggle_PPS_PPS13()
    {
        PPS ^= 1u << 13u;
    }

    /**
     * Get PPS's PPS12 bit.
     */
    PORT9_PPS_PPS12 get_PPS_PPS12()
    {
        return PORT9_PPS_PPS12(PPS & (1u << 12u));
    }

    /**
     * Set PPS's PPS12 bit.
     */
    inline void set_PPS_PPS12()
    {
        PPS |= 1u << 12u;
    }

    /**
     * Clear PPS's PPS12 bit.
     */
    inline void clear_PPS_PPS12()
    {
        PPS &= ~(1u << 12u);
    }

    /**
     * Toggle PPS's PPS12 bit.
     */
    inline void toggle_PPS_PPS12()
    {
        PPS ^= 1u << 12u;
    }

    /**
     * Get PPS's PPS11 bit.
     */
    PORT9_PPS_PPS11 get_PPS_PPS11()
    {
        return PORT9_PPS_PPS11(PPS & (1u << 11u));
    }

    /**
     * Set PPS's PPS11 bit.
     */
    inline void set_PPS_PPS11()
    {
        PPS |= 1u << 11u;
    }

    /**
     * Clear PPS's PPS11 bit.
     */
    inline void clear_PPS_PPS11()
    {
        PPS &= ~(1u << 11u);
    }

    /**
     * Toggle PPS's PPS11 bit.
     */
    inline void toggle_PPS_PPS11()
    {
        PPS ^= 1u << 11u;
    }

    /**
     * Get PPS's PPS10 bit.
     */
    PORT9_PPS_PPS10 get_PPS_PPS10()
    {
        return PORT9_PPS_PPS10(PPS & (1u << 10u));
    }

    /**
     * Set PPS's PPS10 bit.
     */
    inline void set_PPS_PPS10()
    {
        PPS |= 1u << 10u;
    }

    /**
     * Clear PPS's PPS10 bit.
     */
    inline void clear_PPS_PPS10()
    {
        PPS &= ~(1u << 10u);
    }

    /**
     * Toggle PPS's PPS10 bit.
     */
    inline void toggle_PPS_PPS10()
    {
        PPS ^= 1u << 10u;
    }

    /**
     * Get PPS's PPS9 bit.
     */
    PORT9_PPS_PPS9 get_PPS_PPS9()
    {
        return PORT9_PPS_PPS9(PPS & (1u << 9u));
    }

    /**
     * Set PPS's PPS9 bit.
     */
    inline void set_PPS_PPS9()
    {
        PPS |= 1u << 9u;
    }

    /**
     * Clear PPS's PPS9 bit.
     */
    inline void clear_PPS_PPS9()
    {
        PPS &= ~(1u << 9u);
    }

    /**
     * Toggle PPS's PPS9 bit.
     */
    inline void toggle_PPS_PPS9()
    {
        PPS ^= 1u << 9u;
    }

    /**
     * Get PPS's PPS8 bit.
     */
    PORT9_PPS_PPS8 get_PPS_PPS8()
    {
        return PORT9_PPS_PPS8(PPS & (1u << 8u));
    }

    /**
     * Set PPS's PPS8 bit.
     */
    inline void set_PPS_PPS8()
    {
        PPS |= 1u << 8u;
    }

    /**
     * Clear PPS's PPS8 bit.
     */
    inline void clear_PPS_PPS8()
    {
        PPS &= ~(1u << 8u);
    }

    /**
     * Toggle PPS's PPS8 bit.
     */
    inline void toggle_PPS_PPS8()
    {
        PPS ^= 1u << 8u;
    }

    /**
     * Get PPS's PPS7 bit.
     */
    PORT9_PPS_PPS7 get_PPS_PPS7()
    {
        return PORT9_PPS_PPS7(PPS & (1u << 7u));
    }

    /**
     * Set PPS's PPS7 bit.
     */
    inline void set_PPS_PPS7()
    {
        PPS |= 1u << 7u;
    }

    /**
     * Clear PPS's PPS7 bit.
     */
    inline void clear_PPS_PPS7()
    {
        PPS &= ~(1u << 7u);
    }

    /**
     * Toggle PPS's PPS7 bit.
     */
    inline void toggle_PPS_PPS7()
    {
        PPS ^= 1u << 7u;
    }

    /**
     * Get PPS's PPS6 bit.
     */
    PORT9_PPS_PPS6 get_PPS_PPS6()
    {
        return PORT9_PPS_PPS6(PPS & (1u << 6u));
    }

    /**
     * Set PPS's PPS6 bit.
     */
    inline void set_PPS_PPS6()
    {
        PPS |= 1u << 6u;
    }

    /**
     * Clear PPS's PPS6 bit.
     */
    inline void clear_PPS_PPS6()
    {
        PPS &= ~(1u << 6u);
    }

    /**
     * Toggle PPS's PPS6 bit.
     */
    inline void toggle_PPS_PPS6()
    {
        PPS ^= 1u << 6u;
    }

    /**
     * Get PPS's PPS5 bit.
     */
    PORT9_PPS_PPS5 get_PPS_PPS5()
    {
        return PORT9_PPS_PPS5(PPS & (1u << 5u));
    }

    /**
     * Set PPS's PPS5 bit.
     */
    inline void set_PPS_PPS5()
    {
        PPS |= 1u << 5u;
    }

    /**
     * Clear PPS's PPS5 bit.
     */
    inline void clear_PPS_PPS5()
    {
        PPS &= ~(1u << 5u);
    }

    /**
     * Toggle PPS's PPS5 bit.
     */
    inline void toggle_PPS_PPS5()
    {
        PPS ^= 1u << 5u;
    }

    /**
     * Get PPS's PPS4 bit.
     */
    PORT9_PPS_PPS4 get_PPS_PPS4()
    {
        return PORT9_PPS_PPS4(PPS & (1u << 4u));
    }

    /**
     * Set PPS's PPS4 bit.
     */
    inline void set_PPS_PPS4()
    {
        PPS |= 1u << 4u;
    }

    /**
     * Clear PPS's PPS4 bit.
     */
    inline void clear_PPS_PPS4()
    {
        PPS &= ~(1u << 4u);
    }

    /**
     * Toggle PPS's PPS4 bit.
     */
    inline void toggle_PPS_PPS4()
    {
        PPS ^= 1u << 4u;
    }

    /**
     * Get PPS's PPS3 bit.
     */
    PORT9_PPS_PPS3 get_PPS_PPS3()
    {
        return PORT9_PPS_PPS3(PPS & (1u << 3u));
    }

    /**
     * Set PPS's PPS3 bit.
     */
    inline void set_PPS_PPS3()
    {
        PPS |= 1u << 3u;
    }

    /**
     * Clear PPS's PPS3 bit.
     */
    inline void clear_PPS_PPS3()
    {
        PPS &= ~(1u << 3u);
    }

    /**
     * Toggle PPS's PPS3 bit.
     */
    inline void toggle_PPS_PPS3()
    {
        PPS ^= 1u << 3u;
    }

    /**
     * Get PPS's PPS2 bit.
     */
    PORT9_PPS_PPS2 get_PPS_PPS2()
    {
        return PORT9_PPS_PPS2(PPS & (1u << 2u));
    }

    /**
     * Set PPS's PPS2 bit.
     */
    inline void set_PPS_PPS2()
    {
        PPS |= 1u << 2u;
    }

    /**
     * Clear PPS's PPS2 bit.
     */
    inline void clear_PPS_PPS2()
    {
        PPS &= ~(1u << 2u);
    }

    /**
     * Toggle PPS's PPS2 bit.
     */
    inline void toggle_PPS_PPS2()
    {
        PPS ^= 1u << 2u;
    }

    /**
     * Get PPS's PPS1 bit.
     */
    PORT9_PPS_PPS1 get_PPS_PPS1()
    {
        return PORT9_PPS_PPS1(PPS & (1u << 1u));
    }

    /**
     * Set PPS's PPS1 bit.
     */
    inline void set_PPS_PPS1()
    {
        PPS |= 1u << 1u;
    }

    /**
     * Clear PPS's PPS1 bit.
     */
    inline void clear_PPS_PPS1()
    {
        PPS &= ~(1u << 1u);
    }

    /**
     * Toggle PPS's PPS1 bit.
     */
    inline void toggle_PPS_PPS1()
    {
        PPS ^= 1u << 1u;
    }

    /**
     * Get PPS's PPS0 bit.
     */
    PORT9_PPS_PPS0 get_PPS_PPS0()
    {
        return PORT9_PPS_PPS0(PPS & (1u << 0u));
    }

    /**
     * Set PPS's PPS0 bit.
     */
    inline void set_PPS_PPS0()
    {
        PPS |= 1u << 0u;
    }

    /**
     * Clear PPS's PPS0 bit.
     */
    inline void clear_PPS_PPS0()
    {
        PPS &= ~(1u << 0u);
    }

    /**
     * Toggle PPS's PPS0 bit.
     */
    inline void toggle_PPS_PPS0()
    {
        PPS ^= 1u << 0u;
    }

    /**
     * Get HWSEL's HW15 field.
     */
    PORT9_HWSEL_HW15 get_HWSEL_HW15()
    {
        return PORT9_HWSEL_HW15((HWSEL >> 30u) & 0b11u);
    }

    /**
     * Set HWSEL's HW15 field.
     */
    inline void set_HWSEL_HW15(PORT9_HWSEL_HW15 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW14 field.
     */
    PORT9_HWSEL_HW14 get_HWSEL_HW14()
    {
        return PORT9_HWSEL_HW14((HWSEL >> 28u) & 0b11u);
    }

    /**
     * Set HWSEL's HW14 field.
     */
    inline void set_HWSEL_HW14(PORT9_HWSEL_HW14 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW13 field.
     */
    PORT9_HWSEL_HW13 get_HWSEL_HW13()
    {
        return PORT9_HWSEL_HW13((HWSEL >> 26u) & 0b11u);
    }

    /**
     * Set HWSEL's HW13 field.
     */
    inline void set_HWSEL_HW13(PORT9_HWSEL_HW13 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW12 field.
     */
    PORT9_HWSEL_HW12 get_HWSEL_HW12()
    {
        return PORT9_HWSEL_HW12((HWSEL >> 24u) & 0b11u);
    }

    /**
     * Set HWSEL's HW12 field.
     */
    inline void set_HWSEL_HW12(PORT9_HWSEL_HW12 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW11 field.
     */
    PORT9_HWSEL_HW11 get_HWSEL_HW11()
    {
        return PORT9_HWSEL_HW11((HWSEL >> 22u) & 0b11u);
    }

    /**
     * Set HWSEL's HW11 field.
     */
    inline void set_HWSEL_HW11(PORT9_HWSEL_HW11 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(value) & 0b11u) << 22u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW10 field.
     */
    PORT9_HWSEL_HW10 get_HWSEL_HW10()
    {
        return PORT9_HWSEL_HW10((HWSEL >> 20u) & 0b11u);
    }

    /**
     * Set HWSEL's HW10 field.
     */
    inline void set_HWSEL_HW10(PORT9_HWSEL_HW10 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW9 field.
     */
    PORT9_HWSEL_HW9 get_HWSEL_HW9()
    {
        return PORT9_HWSEL_HW9((HWSEL >> 18u) & 0b11u);
    }

    /**
     * Set HWSEL's HW9 field.
     */
    inline void set_HWSEL_HW9(PORT9_HWSEL_HW9 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW8 field.
     */
    PORT9_HWSEL_HW8 get_HWSEL_HW8()
    {
        return PORT9_HWSEL_HW8((HWSEL >> 16u) & 0b11u);
    }

    /**
     * Set HWSEL's HW8 field.
     */
    inline void set_HWSEL_HW8(PORT9_HWSEL_HW8 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW7 field.
     */
    PORT9_HWSEL_HW7 get_HWSEL_HW7()
    {
        return PORT9_HWSEL_HW7((HWSEL >> 14u) & 0b11u);
    }

    /**
     * Set HWSEL's HW7 field.
     */
    inline void set_HWSEL_HW7(PORT9_HWSEL_HW7 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW6 field.
     */
    PORT9_HWSEL_HW6 get_HWSEL_HW6()
    {
        return PORT9_HWSEL_HW6((HWSEL >> 12u) & 0b11u);
    }

    /**
     * Set HWSEL's HW6 field.
     */
    inline void set_HWSEL_HW6(PORT9_HWSEL_HW6 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW5 field.
     */
    PORT9_HWSEL_HW5 get_HWSEL_HW5()
    {
        return PORT9_HWSEL_HW5((HWSEL >> 10u) & 0b11u);
    }

    /**
     * Set HWSEL's HW5 field.
     */
    inline void set_HWSEL_HW5(PORT9_HWSEL_HW5 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW4 field.
     */
    PORT9_HWSEL_HW4 get_HWSEL_HW4()
    {
        return PORT9_HWSEL_HW4((HWSEL >> 8u) & 0b11u);
    }

    /**
     * Set HWSEL's HW4 field.
     */
    inline void set_HWSEL_HW4(PORT9_HWSEL_HW4 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW3 field.
     */
    PORT9_HWSEL_HW3 get_HWSEL_HW3()
    {
        return PORT9_HWSEL_HW3((HWSEL >> 6u) & 0b11u);
    }

    /**
     * Set HWSEL's HW3 field.
     */
    inline void set_HWSEL_HW3(PORT9_HWSEL_HW3 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW2 field.
     */
    PORT9_HWSEL_HW2 get_HWSEL_HW2()
    {
        return PORT9_HWSEL_HW2((HWSEL >> 4u) & 0b11u);
    }

    /**
     * Set HWSEL's HW2 field.
     */
    inline void set_HWSEL_HW2(PORT9_HWSEL_HW2 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW1 field.
     */
    PORT9_HWSEL_HW1 get_HWSEL_HW1()
    {
        return PORT9_HWSEL_HW1((HWSEL >> 2u) & 0b11u);
    }

    /**
     * Set HWSEL's HW1 field.
     */
    inline void set_HWSEL_HW1(PORT9_HWSEL_HW1 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        HWSEL = curr;
    }

    /**
     * Get HWSEL's HW0 field.
     */
    PORT9_HWSEL_HW0 get_HWSEL_HW0()
    {
        return PORT9_HWSEL_HW0((HWSEL >> 0u) & 0b11u);
    }

    /**
     * Set HWSEL's HW0 field.
     */
    inline void set_HWSEL_HW0(PORT9_HWSEL_HW0 value)
    {
        uint32_t curr = HWSEL;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        HWSEL = curr;
    }
};

static_assert(sizeof(port9) == port9::size);

static volatile port9 *const PORT9 = reinterpret_cast<port9 *>(0x48028900);

}; // namespace XMC4700
