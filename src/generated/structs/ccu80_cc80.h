/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include "../enums/CCU80_CC80_C0V_FFL.h"
#include "../enums/CCU80_CC80_C1V_FFL.h"
#include "../enums/CCU80_CC80_C2V_FFL.h"
#include "../enums/CCU80_CC80_C3V_FFL.h"
#include "../enums/CCU80_CC80_CHC_ASE.h"
#include "../enums/CCU80_CC80_CHC_OCS1.h"
#include "../enums/CCU80_CC80_CHC_OCS2.h"
#include "../enums/CCU80_CC80_CHC_OCS3.h"
#include "../enums/CCU80_CC80_CHC_OCS4.h"
#include "../enums/CCU80_CC80_CMC_CAP0S.h"
#include "../enums/CCU80_CC80_CMC_CAP1S.h"
#include "../enums/CCU80_CC80_CMC_CNTS.h"
#include "../enums/CCU80_CC80_CMC_ENDS.h"
#include "../enums/CCU80_CC80_CMC_GATES.h"
#include "../enums/CCU80_CC80_CMC_OFS.h"
#include "../enums/CCU80_CC80_CMC_STRTS.h"
#include "../enums/CCU80_CC80_CMC_TCE.h"
#include "../enums/CCU80_CC80_CMC_TS.h"
#include "../enums/CCU80_CC80_CMC_UDS.h"
#include "../enums/CCU80_CC80_DTC_DCEN1.h"
#include "../enums/CCU80_CC80_DTC_DCEN2.h"
#include "../enums/CCU80_CC80_DTC_DCEN3.h"
#include "../enums/CCU80_CC80_DTC_DCEN4.h"
#include "../enums/CCU80_CC80_DTC_DTCC.h"
#include "../enums/CCU80_CC80_DTC_DTE1.h"
#include "../enums/CCU80_CC80_DTC_DTE2.h"
#include "../enums/CCU80_CC80_ECRD0_FFL.h"
#include "../enums/CCU80_CC80_ECRD0_LCV.h"
#include "../enums/CCU80_CC80_ECRD0_SPTR.h"
#include "../enums/CCU80_CC80_ECRD0_VPTR.h"
#include "../enums/CCU80_CC80_ECRD1_FFL.h"
#include "../enums/CCU80_CC80_ECRD1_LCV.h"
#include "../enums/CCU80_CC80_ECRD1_SPTR.h"
#include "../enums/CCU80_CC80_ECRD1_VPTR.h"
#include "../enums/CCU80_CC80_INS_EV0EM.h"
#include "../enums/CCU80_CC80_INS_EV0IS.h"
#include "../enums/CCU80_CC80_INS_EV0LM.h"
#include "../enums/CCU80_CC80_INS_EV1EM.h"
#include "../enums/CCU80_CC80_INS_EV1IS.h"
#include "../enums/CCU80_CC80_INS_EV1LM.h"
#include "../enums/CCU80_CC80_INS_EV2EM.h"
#include "../enums/CCU80_CC80_INS_EV2IS.h"
#include "../enums/CCU80_CC80_INS_EV2LM.h"
#include "../enums/CCU80_CC80_INS_LPF0M.h"
#include "../enums/CCU80_CC80_INS_LPF1M.h"
#include "../enums/CCU80_CC80_INS_LPF2M.h"
#include "../enums/CCU80_CC80_INTE_CMD1E.h"
#include "../enums/CCU80_CC80_INTE_CMD2E.h"
#include "../enums/CCU80_CC80_INTE_CMU1E.h"
#include "../enums/CCU80_CC80_INTE_CMU2E.h"
#include "../enums/CCU80_CC80_INTE_E0AE.h"
#include "../enums/CCU80_CC80_INTE_E1AE.h"
#include "../enums/CCU80_CC80_INTE_E2AE.h"
#include "../enums/CCU80_CC80_INTE_OME.h"
#include "../enums/CCU80_CC80_INTE_PME.h"
#include "../enums/CCU80_CC80_INTS_CMD1S.h"
#include "../enums/CCU80_CC80_INTS_CMD2S.h"
#include "../enums/CCU80_CC80_INTS_CMU1S.h"
#include "../enums/CCU80_CC80_INTS_CMU2S.h"
#include "../enums/CCU80_CC80_INTS_E0AS.h"
#include "../enums/CCU80_CC80_INTS_E1AS.h"
#include "../enums/CCU80_CC80_INTS_E2AS.h"
#include "../enums/CCU80_CC80_INTS_OMDS.h"
#include "../enums/CCU80_CC80_INTS_PMUS.h"
#include "../enums/CCU80_CC80_PSL_PSL11.h"
#include "../enums/CCU80_CC80_PSL_PSL12.h"
#include "../enums/CCU80_CC80_PSL_PSL21.h"
#include "../enums/CCU80_CC80_PSL_PSL22.h"
#include "../enums/CCU80_CC80_SRS_CM1SR.h"
#include "../enums/CCU80_CC80_SRS_CM2SR.h"
#include "../enums/CCU80_CC80_SRS_E0SR.h"
#include "../enums/CCU80_CC80_SRS_E1SR.h"
#include "../enums/CCU80_CC80_SRS_E2SR.h"
#include "../enums/CCU80_CC80_SRS_POSR.h"
#include "../enums/CCU80_CC80_STC_CSE.h"
#include "../enums/CCU80_CC80_STC_STM.h"
#include "../enums/CCU80_CC80_TCST_CDIR.h"
#include "../enums/CCU80_CC80_TCST_DTR1.h"
#include "../enums/CCU80_CC80_TCST_DTR2.h"
#include "../enums/CCU80_CC80_TCST_TRB.h"
#include "../enums/CCU80_CC80_TC_CAPC.h"
#include "../enums/CCU80_CC80_TC_CCS.h"
#include "../enums/CCU80_CC80_TC_CMOD.h"
#include "../enums/CCU80_CC80_TC_DIM.h"
#include "../enums/CCU80_CC80_TC_DITHE.h"
#include "../enums/CCU80_CC80_TC_ECM.h"
#include "../enums/CCU80_CC80_TC_EME.h"
#include "../enums/CCU80_CC80_TC_EMS.h"
#include "../enums/CCU80_CC80_TC_EMT.h"
#include "../enums/CCU80_CC80_TC_ENDM.h"
#include "../enums/CCU80_CC80_TC_FPE.h"
#include "../enums/CCU80_CC80_TC_MCME1.h"
#include "../enums/CCU80_CC80_TC_MCME2.h"
#include "../enums/CCU80_CC80_TC_SCE.h"
#include "../enums/CCU80_CC80_TC_STOS.h"
#include "../enums/CCU80_CC80_TC_STRM.h"
#include "../enums/CCU80_CC80_TC_TCM.h"
#include "../enums/CCU80_CC80_TC_TLS.h"
#include "../enums/CCU80_CC80_TC_TRAPE0.h"
#include "../enums/CCU80_CC80_TC_TRPSE.h"
#include "../enums/CCU80_CC80_TC_TRPSW.h"
#include "../enums/CCU80_CC80_TC_TSSM.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Capture Compare Unit 8 - Unit 0
 */
struct [[gnu::packed]] ccu80_cc80
{
    /* Constant attributes. */
    static constexpr std::size_t size = 192; /*!< ccu80_cc80's size in bytes. */

    /* Fields. */
    uint32_t INS;                                                    /*!< (read-write) Input Selector Configuration */
    uint32_t CMC;                                                    /*!< (read-write) Connection Matrix Control */
    const uint32_t TCST = {};                                        /*!< (read-only) Slice Timer Status */
    uint32_t TCSET;                                                  /*!< (write-only) Slice Timer Run Set */
    uint32_t TCCLR;                                                  /*!< (write-only) Slice Timer Clear */
    uint32_t TC;                                                     /*!< (read-write) Slice Timer Control */
    uint32_t PSL;                                                    /*!< (read-write) Passive Level Config */
    const uint32_t DIT = {};                                         /*!< (read-only) Dither Config */
    uint32_t DITS;                                                   /*!< (read-write) Dither Shadow Register */
    uint32_t PSC;                                                    /*!< (read-write) Prescaler Control */
    uint32_t FPC;                                                    /*!< (read-write) Floating Prescaler Control */
    uint32_t FPCS;                                                   /*!< (read-write) Floating Prescaler Shadow */
    const uint32_t PR = {};                                          /*!< (read-only) Timer Period Value */
    uint32_t PRS;                                                    /*!< (read-write) Timer Shadow Period Value */
    const uint32_t CR1 = {};                                         /*!< (read-only) Channel 1 Compare Value */
    uint32_t CR1S;                                                   /*!< (read-write) Channel 1 Compare Shadow Value */
    const uint32_t CR2 = {};                                         /*!< (read-only) Channel 2 Compare Value */
    uint32_t CR2S;                                                   /*!< (read-write) Channel 2 Compare Shadow Value */
    uint32_t CHC;                                                    /*!< (read-write) Channel Control */
    uint32_t DTC;                                                    /*!< (read-write) Dead Time Control */
    uint32_t DC1R;                                                   /*!< (read-write) Channel 1 Dead Time Values */
    uint32_t DC2R;                                                   /*!< (read-write) Channel 2 Dead Time Values */
    static constexpr std::size_t reserved_padding0_length = 6;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t TIMER;                                                  /*!< (read-write) Timer Value */
    const uint32_t C0V = {};                                         /*!< (read-only) Capture Register 0 */
    const uint32_t C1V = {};                                         /*!< (read-only) Capture Register 1 */
    const uint32_t C2V = {};                                         /*!< (read-only) Capture Register 2 */
    const uint32_t C3V = {};                                         /*!< (read-only) Capture Register 3 */
    static constexpr std::size_t reserved_padding1_length = 7;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    const uint32_t INTS = {};                                        /*!< (read-only) Interrupt Status */
    uint32_t INTE;                                                   /*!< (read-write) Interrupt Enable Control */
    uint32_t SRS;                                                    /*!< (read-write) Service Request Selector */
    uint32_t SWS;                                                    /*!< (write-only) Interrupt Status Set */
    uint32_t SWR;                                                    /*!< (write-only) Interrupt Status Clear */
    uint32_t STC;                                                    /*!< (read-write) Shadow transfer control */
    const uint32_t ECRD0 = {};                                       /*!< (read-only) Extended Read Back 0 */
    const uint32_t ECRD1 = {};                                       /*!< (read-only) Extended Read Back 1 */

    /* Methods. */

    /**
     * Get INS's LPF2M field.
     */
    inline CCU80_CC80_INS_LPF2M get_INS_LPF2M()
    {
        return CCU80_CC80_INS_LPF2M((INS >> 29u) & 0b11u);
    }

    /**
     * Set INS's LPF2M field.
     */
    inline void set_INS_LPF2M(CCU80_CC80_INS_LPF2M value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        INS = curr;
    }

    /**
     * Get INS's LPF1M field.
     */
    inline CCU80_CC80_INS_LPF1M get_INS_LPF1M()
    {
        return CCU80_CC80_INS_LPF1M((INS >> 27u) & 0b11u);
    }

    /**
     * Set INS's LPF1M field.
     */
    inline void set_INS_LPF1M(CCU80_CC80_INS_LPF1M value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        INS = curr;
    }

    /**
     * Get INS's LPF0M field.
     */
    inline CCU80_CC80_INS_LPF0M get_INS_LPF0M()
    {
        return CCU80_CC80_INS_LPF0M((INS >> 25u) & 0b11u);
    }

    /**
     * Set INS's LPF0M field.
     */
    inline void set_INS_LPF0M(CCU80_CC80_INS_LPF0M value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 25u);
        curr |= (std::to_underlying(value) & 0b11u) << 25u;

        INS = curr;
    }

    /**
     * Get INS's EV2LM bit.
     */
    inline CCU80_CC80_INS_EV2LM get_INS_EV2LM()
    {
        return CCU80_CC80_INS_EV2LM(INS & (1u << 24u));
    }

    /**
     * Set INS's EV2LM bit.
     */
    inline void set_INS_EV2LM()
    {
        INS |= 1u << 24u;
    }

    /**
     * Clear INS's EV2LM bit.
     */
    inline void clear_INS_EV2LM()
    {
        INS &= ~(1u << 24u);
    }

    /**
     * Toggle INS's EV2LM bit.
     */
    inline void toggle_INS_EV2LM()
    {
        INS ^= 1u << 24u;
    }

    /**
     * Get INS's EV1LM bit.
     */
    inline CCU80_CC80_INS_EV1LM get_INS_EV1LM()
    {
        return CCU80_CC80_INS_EV1LM(INS & (1u << 23u));
    }

    /**
     * Set INS's EV1LM bit.
     */
    inline void set_INS_EV1LM()
    {
        INS |= 1u << 23u;
    }

    /**
     * Clear INS's EV1LM bit.
     */
    inline void clear_INS_EV1LM()
    {
        INS &= ~(1u << 23u);
    }

    /**
     * Toggle INS's EV1LM bit.
     */
    inline void toggle_INS_EV1LM()
    {
        INS ^= 1u << 23u;
    }

    /**
     * Get INS's EV0LM bit.
     */
    inline CCU80_CC80_INS_EV0LM get_INS_EV0LM()
    {
        return CCU80_CC80_INS_EV0LM(INS & (1u << 22u));
    }

    /**
     * Set INS's EV0LM bit.
     */
    inline void set_INS_EV0LM()
    {
        INS |= 1u << 22u;
    }

    /**
     * Clear INS's EV0LM bit.
     */
    inline void clear_INS_EV0LM()
    {
        INS &= ~(1u << 22u);
    }

    /**
     * Toggle INS's EV0LM bit.
     */
    inline void toggle_INS_EV0LM()
    {
        INS ^= 1u << 22u;
    }

    /**
     * Get INS's EV2EM field.
     */
    inline CCU80_CC80_INS_EV2EM get_INS_EV2EM()
    {
        return CCU80_CC80_INS_EV2EM((INS >> 20u) & 0b11u);
    }

    /**
     * Set INS's EV2EM field.
     */
    inline void set_INS_EV2EM(CCU80_CC80_INS_EV2EM value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        INS = curr;
    }

    /**
     * Get INS's EV1EM field.
     */
    inline CCU80_CC80_INS_EV1EM get_INS_EV1EM()
    {
        return CCU80_CC80_INS_EV1EM((INS >> 18u) & 0b11u);
    }

    /**
     * Set INS's EV1EM field.
     */
    inline void set_INS_EV1EM(CCU80_CC80_INS_EV1EM value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        INS = curr;
    }

    /**
     * Get INS's EV0EM field.
     */
    inline CCU80_CC80_INS_EV0EM get_INS_EV0EM()
    {
        return CCU80_CC80_INS_EV0EM((INS >> 16u) & 0b11u);
    }

    /**
     * Set INS's EV0EM field.
     */
    inline void set_INS_EV0EM(CCU80_CC80_INS_EV0EM value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        INS = curr;
    }

    /**
     * Get INS's EV2IS field.
     */
    inline CCU80_CC80_INS_EV2IS get_INS_EV2IS()
    {
        return CCU80_CC80_INS_EV2IS((INS >> 8u) & 0b1111u);
    }

    /**
     * Set INS's EV2IS field.
     */
    inline void set_INS_EV2IS(CCU80_CC80_INS_EV2IS value)
    {
        uint32_t curr = INS;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        INS = curr;
    }

    /**
     * Get INS's EV1IS field.
     */
    inline CCU80_CC80_INS_EV1IS get_INS_EV1IS()
    {
        return CCU80_CC80_INS_EV1IS((INS >> 4u) & 0b1111u);
    }

    /**
     * Set INS's EV1IS field.
     */
    inline void set_INS_EV1IS(CCU80_CC80_INS_EV1IS value)
    {
        uint32_t curr = INS;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        INS = curr;
    }

    /**
     * Get INS's EV0IS field.
     */
    inline CCU80_CC80_INS_EV0IS get_INS_EV0IS()
    {
        return CCU80_CC80_INS_EV0IS((INS >> 0u) & 0b1111u);
    }

    /**
     * Set INS's EV0IS field.
     */
    inline void set_INS_EV0IS(CCU80_CC80_INS_EV0IS value)
    {
        uint32_t curr = INS;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        INS = curr;
    }

    /**
     * Get all of INS's bit fields.
     */
    inline void get_INS(CCU80_CC80_INS_LPF2M &LPF2M, CCU80_CC80_INS_LPF1M &LPF1M, CCU80_CC80_INS_LPF0M &LPF0M, CCU80_CC80_INS_EV2LM &EV2LM, CCU80_CC80_INS_EV1LM &EV1LM, CCU80_CC80_INS_EV0LM &EV0LM, CCU80_CC80_INS_EV2EM &EV2EM, CCU80_CC80_INS_EV1EM &EV1EM, CCU80_CC80_INS_EV0EM &EV0EM, CCU80_CC80_INS_EV2IS &EV2IS, CCU80_CC80_INS_EV1IS &EV1IS, CCU80_CC80_INS_EV0IS &EV0IS)
    {
        uint32_t curr = INS;

        LPF2M = CCU80_CC80_INS_LPF2M((curr >> 29u) & 0b11u);
        LPF1M = CCU80_CC80_INS_LPF1M((curr >> 27u) & 0b11u);
        LPF0M = CCU80_CC80_INS_LPF0M((curr >> 25u) & 0b11u);
        EV2LM = CCU80_CC80_INS_EV2LM(curr & (1u << 24u));
        EV1LM = CCU80_CC80_INS_EV1LM(curr & (1u << 23u));
        EV0LM = CCU80_CC80_INS_EV0LM(curr & (1u << 22u));
        EV2EM = CCU80_CC80_INS_EV2EM((curr >> 20u) & 0b11u);
        EV1EM = CCU80_CC80_INS_EV1EM((curr >> 18u) & 0b11u);
        EV0EM = CCU80_CC80_INS_EV0EM((curr >> 16u) & 0b11u);
        EV2IS = CCU80_CC80_INS_EV2IS((curr >> 8u) & 0b1111u);
        EV1IS = CCU80_CC80_INS_EV1IS((curr >> 4u) & 0b1111u);
        EV0IS = CCU80_CC80_INS_EV0IS((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of INS's bit fields.
     */
    inline void set_INS(CCU80_CC80_INS_LPF2M LPF2M, CCU80_CC80_INS_LPF1M LPF1M, CCU80_CC80_INS_LPF0M LPF0M, CCU80_CC80_INS_EV2LM EV2LM, CCU80_CC80_INS_EV1LM EV1LM, CCU80_CC80_INS_EV0LM EV0LM, CCU80_CC80_INS_EV2EM EV2EM, CCU80_CC80_INS_EV1EM EV1EM, CCU80_CC80_INS_EV0EM EV0EM, CCU80_CC80_INS_EV2IS EV2IS, CCU80_CC80_INS_EV1IS EV1IS, CCU80_CC80_INS_EV0IS EV0IS)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(LPF2M) & 0b11u) << 29u;
        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(LPF1M) & 0b11u) << 27u;
        curr &= ~(0b11u << 25u);
        curr |= (std::to_underlying(LPF0M) & 0b11u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (std::to_underlying(EV2LM) & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (std::to_underlying(EV1LM) & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (std::to_underlying(EV0LM) & 0b1u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(EV2EM) & 0b11u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EV1EM) & 0b11u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(EV0EM) & 0b11u) << 16u;
        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(EV2IS) & 0b1111u) << 8u;
        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(EV1IS) & 0b1111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(EV0IS) & 0b1111u) << 0u;

        INS = curr;
    }

    /**
     * Get CMC's TCE bit.
     */
    inline CCU80_CC80_CMC_TCE get_CMC_TCE()
    {
        return CCU80_CC80_CMC_TCE(CMC & (1u << 20u));
    }

    /**
     * Set CMC's TCE bit.
     */
    inline void set_CMC_TCE()
    {
        CMC |= 1u << 20u;
    }

    /**
     * Clear CMC's TCE bit.
     */
    inline void clear_CMC_TCE()
    {
        CMC &= ~(1u << 20u);
    }

    /**
     * Toggle CMC's TCE bit.
     */
    inline void toggle_CMC_TCE()
    {
        CMC ^= 1u << 20u;
    }

    /**
     * Get CMC's MOS field.
     */
    inline uint8_t get_CMC_MOS()
    {
        return (CMC >> 18u) & 0b11u;
    }

    /**
     * Set CMC's MOS field.
     */
    inline void set_CMC_MOS(uint8_t value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        CMC = curr;
    }

    /**
     * Get CMC's TS bit.
     */
    inline CCU80_CC80_CMC_TS get_CMC_TS()
    {
        return CCU80_CC80_CMC_TS(CMC & (1u << 17u));
    }

    /**
     * Set CMC's TS bit.
     */
    inline void set_CMC_TS()
    {
        CMC |= 1u << 17u;
    }

    /**
     * Clear CMC's TS bit.
     */
    inline void clear_CMC_TS()
    {
        CMC &= ~(1u << 17u);
    }

    /**
     * Toggle CMC's TS bit.
     */
    inline void toggle_CMC_TS()
    {
        CMC ^= 1u << 17u;
    }

    /**
     * Get CMC's OFS bit.
     */
    inline CCU80_CC80_CMC_OFS get_CMC_OFS()
    {
        return CCU80_CC80_CMC_OFS(CMC & (1u << 16u));
    }

    /**
     * Set CMC's OFS bit.
     */
    inline void set_CMC_OFS()
    {
        CMC |= 1u << 16u;
    }

    /**
     * Clear CMC's OFS bit.
     */
    inline void clear_CMC_OFS()
    {
        CMC &= ~(1u << 16u);
    }

    /**
     * Toggle CMC's OFS bit.
     */
    inline void toggle_CMC_OFS()
    {
        CMC ^= 1u << 16u;
    }

    /**
     * Get CMC's CNTS field.
     */
    inline CCU80_CC80_CMC_CNTS get_CMC_CNTS()
    {
        return CCU80_CC80_CMC_CNTS((CMC >> 14u) & 0b11u);
    }

    /**
     * Set CMC's CNTS field.
     */
    inline void set_CMC_CNTS(CCU80_CC80_CMC_CNTS value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CMC = curr;
    }

    /**
     * Get CMC's LDS field.
     */
    inline uint8_t get_CMC_LDS()
    {
        return (CMC >> 12u) & 0b11u;
    }

    /**
     * Set CMC's LDS field.
     */
    inline void set_CMC_LDS(uint8_t value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 12u);
        curr |= (value & 0b11u) << 12u;

        CMC = curr;
    }

    /**
     * Get CMC's UDS field.
     */
    inline CCU80_CC80_CMC_UDS get_CMC_UDS()
    {
        return CCU80_CC80_CMC_UDS((CMC >> 10u) & 0b11u);
    }

    /**
     * Set CMC's UDS field.
     */
    inline void set_CMC_UDS(CCU80_CC80_CMC_UDS value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        CMC = curr;
    }

    /**
     * Get CMC's GATES field.
     */
    inline CCU80_CC80_CMC_GATES get_CMC_GATES()
    {
        return CCU80_CC80_CMC_GATES((CMC >> 8u) & 0b11u);
    }

    /**
     * Set CMC's GATES field.
     */
    inline void set_CMC_GATES(CCU80_CC80_CMC_GATES value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        CMC = curr;
    }

    /**
     * Get CMC's CAP1S field.
     */
    inline CCU80_CC80_CMC_CAP1S get_CMC_CAP1S()
    {
        return CCU80_CC80_CMC_CAP1S((CMC >> 6u) & 0b11u);
    }

    /**
     * Set CMC's CAP1S field.
     */
    inline void set_CMC_CAP1S(CCU80_CC80_CMC_CAP1S value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CMC = curr;
    }

    /**
     * Get CMC's CAP0S field.
     */
    inline CCU80_CC80_CMC_CAP0S get_CMC_CAP0S()
    {
        return CCU80_CC80_CMC_CAP0S((CMC >> 4u) & 0b11u);
    }

    /**
     * Set CMC's CAP0S field.
     */
    inline void set_CMC_CAP0S(CCU80_CC80_CMC_CAP0S value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CMC = curr;
    }

    /**
     * Get CMC's ENDS field.
     */
    inline CCU80_CC80_CMC_ENDS get_CMC_ENDS()
    {
        return CCU80_CC80_CMC_ENDS((CMC >> 2u) & 0b11u);
    }

    /**
     * Set CMC's ENDS field.
     */
    inline void set_CMC_ENDS(CCU80_CC80_CMC_ENDS value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        CMC = curr;
    }

    /**
     * Get CMC's STRTS field.
     */
    inline CCU80_CC80_CMC_STRTS get_CMC_STRTS()
    {
        return CCU80_CC80_CMC_STRTS((CMC >> 0u) & 0b11u);
    }

    /**
     * Set CMC's STRTS field.
     */
    inline void set_CMC_STRTS(CCU80_CC80_CMC_STRTS value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CMC = curr;
    }

    /**
     * Get all of CMC's bit fields.
     */
    inline void get_CMC(CCU80_CC80_CMC_TCE &TCE, uint8_t &MOS, CCU80_CC80_CMC_TS &TS, CCU80_CC80_CMC_OFS &OFS, CCU80_CC80_CMC_CNTS &CNTS, uint8_t &LDS, CCU80_CC80_CMC_UDS &UDS, CCU80_CC80_CMC_GATES &GATES, CCU80_CC80_CMC_CAP1S &CAP1S, CCU80_CC80_CMC_CAP0S &CAP0S, CCU80_CC80_CMC_ENDS &ENDS, CCU80_CC80_CMC_STRTS &STRTS)
    {
        uint32_t curr = CMC;

        TCE = CCU80_CC80_CMC_TCE(curr & (1u << 20u));
        MOS = (curr >> 18u) & 0b11u;
        TS = CCU80_CC80_CMC_TS(curr & (1u << 17u));
        OFS = CCU80_CC80_CMC_OFS(curr & (1u << 16u));
        CNTS = CCU80_CC80_CMC_CNTS((curr >> 14u) & 0b11u);
        LDS = (curr >> 12u) & 0b11u;
        UDS = CCU80_CC80_CMC_UDS((curr >> 10u) & 0b11u);
        GATES = CCU80_CC80_CMC_GATES((curr >> 8u) & 0b11u);
        CAP1S = CCU80_CC80_CMC_CAP1S((curr >> 6u) & 0b11u);
        CAP0S = CCU80_CC80_CMC_CAP0S((curr >> 4u) & 0b11u);
        ENDS = CCU80_CC80_CMC_ENDS((curr >> 2u) & 0b11u);
        STRTS = CCU80_CC80_CMC_STRTS((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of CMC's bit fields.
     */
    inline void set_CMC(CCU80_CC80_CMC_TCE TCE, uint8_t MOS, CCU80_CC80_CMC_TS TS, CCU80_CC80_CMC_OFS OFS, CCU80_CC80_CMC_CNTS CNTS, uint8_t LDS, CCU80_CC80_CMC_UDS UDS, CCU80_CC80_CMC_GATES GATES, CCU80_CC80_CMC_CAP1S CAP1S, CCU80_CC80_CMC_CAP0S CAP0S, CCU80_CC80_CMC_ENDS ENDS, CCU80_CC80_CMC_STRTS STRTS)
    {
        uint32_t curr = CMC;

        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(TCE) & 0b1u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (MOS & 0b11u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(TS) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(OFS) & 0b1u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(CNTS) & 0b11u) << 14u;
        curr &= ~(0b11u << 12u);
        curr |= (LDS & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(UDS) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(GATES) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(CAP1S) & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(CAP0S) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(ENDS) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(STRTS) & 0b11u) << 0u;

        CMC = curr;
    }

    /**
     * Get TCST's DTR2 bit.
     */
    inline CCU80_CC80_TCST_DTR2 get_TCST_DTR2()
    {
        return CCU80_CC80_TCST_DTR2(TCST & (1u << 4u));
    }

    /**
     * Get TCST's DTR1 bit.
     */
    inline CCU80_CC80_TCST_DTR1 get_TCST_DTR1()
    {
        return CCU80_CC80_TCST_DTR1(TCST & (1u << 3u));
    }

    /**
     * Get TCST's CDIR bit.
     */
    inline CCU80_CC80_TCST_CDIR get_TCST_CDIR()
    {
        return CCU80_CC80_TCST_CDIR(TCST & (1u << 1u));
    }

    /**
     * Get TCST's TRB bit.
     */
    inline CCU80_CC80_TCST_TRB get_TCST_TRB()
    {
        return CCU80_CC80_TCST_TRB(TCST & (1u << 0u));
    }

    /**
     * Get all of TCST's bit fields.
     */
    inline void get_TCST(CCU80_CC80_TCST_DTR2 &DTR2, CCU80_CC80_TCST_DTR1 &DTR1, CCU80_CC80_TCST_CDIR &CDIR, CCU80_CC80_TCST_TRB &TRB)
    {
        uint32_t curr = TCST;

        DTR2 = CCU80_CC80_TCST_DTR2(curr & (1u << 4u));
        DTR1 = CCU80_CC80_TCST_DTR1(curr & (1u << 3u));
        CDIR = CCU80_CC80_TCST_CDIR(curr & (1u << 1u));
        TRB = CCU80_CC80_TCST_TRB(curr & (1u << 0u));
    }

    /**
     * Set TCSET's TRBS bit.
     */
    inline void set_TCSET_TRBS()
    {
        TCSET |= 1u << 0u;
    }

    /**
     * Clear TCSET's TRBS bit.
     */
    inline void clear_TCSET_TRBS()
    {
        TCSET &= ~(1u << 0u);
    }

    /**
     * Toggle TCSET's TRBS bit.
     */
    inline void toggle_TCSET_TRBS()
    {
        TCSET ^= 1u << 0u;
    }

    /**
     * Set TCCLR's DTC2C bit.
     */
    inline void set_TCCLR_DTC2C()
    {
        TCCLR |= 1u << 4u;
    }

    /**
     * Clear TCCLR's DTC2C bit.
     */
    inline void clear_TCCLR_DTC2C()
    {
        TCCLR &= ~(1u << 4u);
    }

    /**
     * Toggle TCCLR's DTC2C bit.
     */
    inline void toggle_TCCLR_DTC2C()
    {
        TCCLR ^= 1u << 4u;
    }

    /**
     * Set TCCLR's DTC1C bit.
     */
    inline void set_TCCLR_DTC1C()
    {
        TCCLR |= 1u << 3u;
    }

    /**
     * Clear TCCLR's DTC1C bit.
     */
    inline void clear_TCCLR_DTC1C()
    {
        TCCLR &= ~(1u << 3u);
    }

    /**
     * Toggle TCCLR's DTC1C bit.
     */
    inline void toggle_TCCLR_DTC1C()
    {
        TCCLR ^= 1u << 3u;
    }

    /**
     * Set TCCLR's DITC bit.
     */
    inline void set_TCCLR_DITC()
    {
        TCCLR |= 1u << 2u;
    }

    /**
     * Clear TCCLR's DITC bit.
     */
    inline void clear_TCCLR_DITC()
    {
        TCCLR &= ~(1u << 2u);
    }

    /**
     * Toggle TCCLR's DITC bit.
     */
    inline void toggle_TCCLR_DITC()
    {
        TCCLR ^= 1u << 2u;
    }

    /**
     * Set TCCLR's TCC bit.
     */
    inline void set_TCCLR_TCC()
    {
        TCCLR |= 1u << 1u;
    }

    /**
     * Clear TCCLR's TCC bit.
     */
    inline void clear_TCCLR_TCC()
    {
        TCCLR &= ~(1u << 1u);
    }

    /**
     * Toggle TCCLR's TCC bit.
     */
    inline void toggle_TCCLR_TCC()
    {
        TCCLR ^= 1u << 1u;
    }

    /**
     * Set TCCLR's TRBC bit.
     */
    inline void set_TCCLR_TRBC()
    {
        TCCLR |= 1u << 0u;
    }

    /**
     * Clear TCCLR's TRBC bit.
     */
    inline void clear_TCCLR_TRBC()
    {
        TCCLR &= ~(1u << 0u);
    }

    /**
     * Toggle TCCLR's TRBC bit.
     */
    inline void toggle_TCCLR_TRBC()
    {
        TCCLR ^= 1u << 0u;
    }

    /**
     * Set all of TCCLR's bit fields.
     */
    inline void set_TCCLR(bool DTC2C, bool DTC1C, bool DITC, bool TCC, bool TRBC)
    {
        uint32_t curr = TCCLR;

        curr &= ~(0b1u << 4u);
        curr |= (DTC2C & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DTC1C & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (DITC & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TCC & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TRBC & 0b1u) << 0u;

        TCCLR = curr;
    }

    /**
     * Get TC's STOS field.
     */
    inline CCU80_CC80_TC_STOS get_TC_STOS()
    {
        return CCU80_CC80_TC_STOS((TC >> 29u) & 0b11u);
    }

    /**
     * Set TC's STOS field.
     */
    inline void set_TC_STOS(CCU80_CC80_TC_STOS value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TC = curr;
    }

    /**
     * Get TC's EME field.
     */
    inline CCU80_CC80_TC_EME get_TC_EME()
    {
        return CCU80_CC80_TC_EME((TC >> 27u) & 0b11u);
    }

    /**
     * Set TC's EME field.
     */
    inline void set_TC_EME(CCU80_CC80_TC_EME value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        TC = curr;
    }

    /**
     * Get TC's MCME2 bit.
     */
    inline CCU80_CC80_TC_MCME2 get_TC_MCME2()
    {
        return CCU80_CC80_TC_MCME2(TC & (1u << 26u));
    }

    /**
     * Set TC's MCME2 bit.
     */
    inline void set_TC_MCME2()
    {
        TC |= 1u << 26u;
    }

    /**
     * Clear TC's MCME2 bit.
     */
    inline void clear_TC_MCME2()
    {
        TC &= ~(1u << 26u);
    }

    /**
     * Toggle TC's MCME2 bit.
     */
    inline void toggle_TC_MCME2()
    {
        TC ^= 1u << 26u;
    }

    /**
     * Get TC's MCME1 bit.
     */
    inline CCU80_CC80_TC_MCME1 get_TC_MCME1()
    {
        return CCU80_CC80_TC_MCME1(TC & (1u << 25u));
    }

    /**
     * Set TC's MCME1 bit.
     */
    inline void set_TC_MCME1()
    {
        TC |= 1u << 25u;
    }

    /**
     * Clear TC's MCME1 bit.
     */
    inline void clear_TC_MCME1()
    {
        TC &= ~(1u << 25u);
    }

    /**
     * Toggle TC's MCME1 bit.
     */
    inline void toggle_TC_MCME1()
    {
        TC ^= 1u << 25u;
    }

    /**
     * Get TC's EMT bit.
     */
    inline CCU80_CC80_TC_EMT get_TC_EMT()
    {
        return CCU80_CC80_TC_EMT(TC & (1u << 24u));
    }

    /**
     * Set TC's EMT bit.
     */
    inline void set_TC_EMT()
    {
        TC |= 1u << 24u;
    }

    /**
     * Clear TC's EMT bit.
     */
    inline void clear_TC_EMT()
    {
        TC &= ~(1u << 24u);
    }

    /**
     * Toggle TC's EMT bit.
     */
    inline void toggle_TC_EMT()
    {
        TC ^= 1u << 24u;
    }

    /**
     * Get TC's EMS bit.
     */
    inline CCU80_CC80_TC_EMS get_TC_EMS()
    {
        return CCU80_CC80_TC_EMS(TC & (1u << 23u));
    }

    /**
     * Set TC's EMS bit.
     */
    inline void set_TC_EMS()
    {
        TC |= 1u << 23u;
    }

    /**
     * Clear TC's EMS bit.
     */
    inline void clear_TC_EMS()
    {
        TC &= ~(1u << 23u);
    }

    /**
     * Toggle TC's EMS bit.
     */
    inline void toggle_TC_EMS()
    {
        TC ^= 1u << 23u;
    }

    /**
     * Get TC's TRPSW bit.
     */
    inline CCU80_CC80_TC_TRPSW get_TC_TRPSW()
    {
        return CCU80_CC80_TC_TRPSW(TC & (1u << 22u));
    }

    /**
     * Set TC's TRPSW bit.
     */
    inline void set_TC_TRPSW()
    {
        TC |= 1u << 22u;
    }

    /**
     * Clear TC's TRPSW bit.
     */
    inline void clear_TC_TRPSW()
    {
        TC &= ~(1u << 22u);
    }

    /**
     * Toggle TC's TRPSW bit.
     */
    inline void toggle_TC_TRPSW()
    {
        TC ^= 1u << 22u;
    }

    /**
     * Get TC's TRPSE bit.
     */
    inline CCU80_CC80_TC_TRPSE get_TC_TRPSE()
    {
        return CCU80_CC80_TC_TRPSE(TC & (1u << 21u));
    }

    /**
     * Set TC's TRPSE bit.
     */
    inline void set_TC_TRPSE()
    {
        TC |= 1u << 21u;
    }

    /**
     * Clear TC's TRPSE bit.
     */
    inline void clear_TC_TRPSE()
    {
        TC &= ~(1u << 21u);
    }

    /**
     * Toggle TC's TRPSE bit.
     */
    inline void toggle_TC_TRPSE()
    {
        TC ^= 1u << 21u;
    }

    /**
     * Get TC's TRAPE3 bit.
     */
    inline bool get_TC_TRAPE3()
    {
        return TC & (1u << 20u);
    }

    /**
     * Set TC's TRAPE3 bit.
     */
    inline void set_TC_TRAPE3()
    {
        TC |= 1u << 20u;
    }

    /**
     * Clear TC's TRAPE3 bit.
     */
    inline void clear_TC_TRAPE3()
    {
        TC &= ~(1u << 20u);
    }

    /**
     * Toggle TC's TRAPE3 bit.
     */
    inline void toggle_TC_TRAPE3()
    {
        TC ^= 1u << 20u;
    }

    /**
     * Get TC's TRAPE2 bit.
     */
    inline bool get_TC_TRAPE2()
    {
        return TC & (1u << 19u);
    }

    /**
     * Set TC's TRAPE2 bit.
     */
    inline void set_TC_TRAPE2()
    {
        TC |= 1u << 19u;
    }

    /**
     * Clear TC's TRAPE2 bit.
     */
    inline void clear_TC_TRAPE2()
    {
        TC &= ~(1u << 19u);
    }

    /**
     * Toggle TC's TRAPE2 bit.
     */
    inline void toggle_TC_TRAPE2()
    {
        TC ^= 1u << 19u;
    }

    /**
     * Get TC's TRAPE1 bit.
     */
    inline bool get_TC_TRAPE1()
    {
        return TC & (1u << 18u);
    }

    /**
     * Set TC's TRAPE1 bit.
     */
    inline void set_TC_TRAPE1()
    {
        TC |= 1u << 18u;
    }

    /**
     * Clear TC's TRAPE1 bit.
     */
    inline void clear_TC_TRAPE1()
    {
        TC &= ~(1u << 18u);
    }

    /**
     * Toggle TC's TRAPE1 bit.
     */
    inline void toggle_TC_TRAPE1()
    {
        TC ^= 1u << 18u;
    }

    /**
     * Get TC's TRAPE0 bit.
     */
    inline CCU80_CC80_TC_TRAPE0 get_TC_TRAPE0()
    {
        return CCU80_CC80_TC_TRAPE0(TC & (1u << 17u));
    }

    /**
     * Set TC's TRAPE0 bit.
     */
    inline void set_TC_TRAPE0()
    {
        TC |= 1u << 17u;
    }

    /**
     * Clear TC's TRAPE0 bit.
     */
    inline void clear_TC_TRAPE0()
    {
        TC &= ~(1u << 17u);
    }

    /**
     * Toggle TC's TRAPE0 bit.
     */
    inline void toggle_TC_TRAPE0()
    {
        TC ^= 1u << 17u;
    }

    /**
     * Get TC's FPE bit.
     */
    inline CCU80_CC80_TC_FPE get_TC_FPE()
    {
        return CCU80_CC80_TC_FPE(TC & (1u << 16u));
    }

    /**
     * Set TC's FPE bit.
     */
    inline void set_TC_FPE()
    {
        TC |= 1u << 16u;
    }

    /**
     * Clear TC's FPE bit.
     */
    inline void clear_TC_FPE()
    {
        TC &= ~(1u << 16u);
    }

    /**
     * Toggle TC's FPE bit.
     */
    inline void toggle_TC_FPE()
    {
        TC ^= 1u << 16u;
    }

    /**
     * Get TC's DIM bit.
     */
    inline CCU80_CC80_TC_DIM get_TC_DIM()
    {
        return CCU80_CC80_TC_DIM(TC & (1u << 15u));
    }

    /**
     * Set TC's DIM bit.
     */
    inline void set_TC_DIM()
    {
        TC |= 1u << 15u;
    }

    /**
     * Clear TC's DIM bit.
     */
    inline void clear_TC_DIM()
    {
        TC &= ~(1u << 15u);
    }

    /**
     * Toggle TC's DIM bit.
     */
    inline void toggle_TC_DIM()
    {
        TC ^= 1u << 15u;
    }

    /**
     * Get TC's DITHE field.
     */
    inline CCU80_CC80_TC_DITHE get_TC_DITHE()
    {
        return CCU80_CC80_TC_DITHE((TC >> 13u) & 0b11u);
    }

    /**
     * Set TC's DITHE field.
     */
    inline void set_TC_DITHE(CCU80_CC80_TC_DITHE value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TC = curr;
    }

    /**
     * Get TC's CCS bit.
     */
    inline CCU80_CC80_TC_CCS get_TC_CCS()
    {
        return CCU80_CC80_TC_CCS(TC & (1u << 12u));
    }

    /**
     * Set TC's CCS bit.
     */
    inline void set_TC_CCS()
    {
        TC |= 1u << 12u;
    }

    /**
     * Clear TC's CCS bit.
     */
    inline void clear_TC_CCS()
    {
        TC &= ~(1u << 12u);
    }

    /**
     * Toggle TC's CCS bit.
     */
    inline void toggle_TC_CCS()
    {
        TC ^= 1u << 12u;
    }

    /**
     * Get TC's SCE bit.
     */
    inline CCU80_CC80_TC_SCE get_TC_SCE()
    {
        return CCU80_CC80_TC_SCE(TC & (1u << 11u));
    }

    /**
     * Set TC's SCE bit.
     */
    inline void set_TC_SCE()
    {
        TC |= 1u << 11u;
    }

    /**
     * Clear TC's SCE bit.
     */
    inline void clear_TC_SCE()
    {
        TC &= ~(1u << 11u);
    }

    /**
     * Toggle TC's SCE bit.
     */
    inline void toggle_TC_SCE()
    {
        TC ^= 1u << 11u;
    }

    /**
     * Get TC's STRM bit.
     */
    inline CCU80_CC80_TC_STRM get_TC_STRM()
    {
        return CCU80_CC80_TC_STRM(TC & (1u << 10u));
    }

    /**
     * Set TC's STRM bit.
     */
    inline void set_TC_STRM()
    {
        TC |= 1u << 10u;
    }

    /**
     * Clear TC's STRM bit.
     */
    inline void clear_TC_STRM()
    {
        TC &= ~(1u << 10u);
    }

    /**
     * Toggle TC's STRM bit.
     */
    inline void toggle_TC_STRM()
    {
        TC ^= 1u << 10u;
    }

    /**
     * Get TC's ENDM field.
     */
    inline CCU80_CC80_TC_ENDM get_TC_ENDM()
    {
        return CCU80_CC80_TC_ENDM((TC >> 8u) & 0b11u);
    }

    /**
     * Set TC's ENDM field.
     */
    inline void set_TC_ENDM(CCU80_CC80_TC_ENDM value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        TC = curr;
    }

    /**
     * Get TC's TLS bit.
     */
    inline CCU80_CC80_TC_TLS get_TC_TLS()
    {
        return CCU80_CC80_TC_TLS(TC & (1u << 7u));
    }

    /**
     * Set TC's TLS bit.
     */
    inline void set_TC_TLS()
    {
        TC |= 1u << 7u;
    }

    /**
     * Clear TC's TLS bit.
     */
    inline void clear_TC_TLS()
    {
        TC &= ~(1u << 7u);
    }

    /**
     * Toggle TC's TLS bit.
     */
    inline void toggle_TC_TLS()
    {
        TC ^= 1u << 7u;
    }

    /**
     * Get TC's CAPC field.
     */
    inline CCU80_CC80_TC_CAPC get_TC_CAPC()
    {
        return CCU80_CC80_TC_CAPC((TC >> 5u) & 0b11u);
    }

    /**
     * Set TC's CAPC field.
     */
    inline void set_TC_CAPC(CCU80_CC80_TC_CAPC value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 5u);
        curr |= (std::to_underlying(value) & 0b11u) << 5u;

        TC = curr;
    }

    /**
     * Get TC's ECM bit.
     */
    inline CCU80_CC80_TC_ECM get_TC_ECM()
    {
        return CCU80_CC80_TC_ECM(TC & (1u << 4u));
    }

    /**
     * Set TC's ECM bit.
     */
    inline void set_TC_ECM()
    {
        TC |= 1u << 4u;
    }

    /**
     * Clear TC's ECM bit.
     */
    inline void clear_TC_ECM()
    {
        TC &= ~(1u << 4u);
    }

    /**
     * Toggle TC's ECM bit.
     */
    inline void toggle_TC_ECM()
    {
        TC ^= 1u << 4u;
    }

    /**
     * Get TC's CMOD bit.
     */
    inline CCU80_CC80_TC_CMOD get_TC_CMOD()
    {
        return CCU80_CC80_TC_CMOD(TC & (1u << 3u));
    }

    /**
     * Get TC's CLST bit.
     */
    inline bool get_TC_CLST()
    {
        return TC & (1u << 2u);
    }

    /**
     * Set TC's CLST bit.
     */
    inline void set_TC_CLST()
    {
        TC |= 1u << 2u;
    }

    /**
     * Clear TC's CLST bit.
     */
    inline void clear_TC_CLST()
    {
        TC &= ~(1u << 2u);
    }

    /**
     * Toggle TC's CLST bit.
     */
    inline void toggle_TC_CLST()
    {
        TC ^= 1u << 2u;
    }

    /**
     * Get TC's TSSM bit.
     */
    inline CCU80_CC80_TC_TSSM get_TC_TSSM()
    {
        return CCU80_CC80_TC_TSSM(TC & (1u << 1u));
    }

    /**
     * Set TC's TSSM bit.
     */
    inline void set_TC_TSSM()
    {
        TC |= 1u << 1u;
    }

    /**
     * Clear TC's TSSM bit.
     */
    inline void clear_TC_TSSM()
    {
        TC &= ~(1u << 1u);
    }

    /**
     * Toggle TC's TSSM bit.
     */
    inline void toggle_TC_TSSM()
    {
        TC ^= 1u << 1u;
    }

    /**
     * Get TC's TCM bit.
     */
    inline CCU80_CC80_TC_TCM get_TC_TCM()
    {
        return CCU80_CC80_TC_TCM(TC & (1u << 0u));
    }

    /**
     * Set TC's TCM bit.
     */
    inline void set_TC_TCM()
    {
        TC |= 1u << 0u;
    }

    /**
     * Clear TC's TCM bit.
     */
    inline void clear_TC_TCM()
    {
        TC &= ~(1u << 0u);
    }

    /**
     * Toggle TC's TCM bit.
     */
    inline void toggle_TC_TCM()
    {
        TC ^= 1u << 0u;
    }

    /**
     * Get all of TC's bit fields.
     */
    inline void get_TC(CCU80_CC80_TC_STOS &STOS, CCU80_CC80_TC_EME &EME, CCU80_CC80_TC_MCME2 &MCME2, CCU80_CC80_TC_MCME1 &MCME1, CCU80_CC80_TC_EMT &EMT, CCU80_CC80_TC_EMS &EMS, CCU80_CC80_TC_TRPSW &TRPSW, CCU80_CC80_TC_TRPSE &TRPSE, bool &TRAPE3, bool &TRAPE2, bool &TRAPE1, CCU80_CC80_TC_TRAPE0 &TRAPE0, CCU80_CC80_TC_FPE &FPE, CCU80_CC80_TC_DIM &DIM, CCU80_CC80_TC_DITHE &DITHE, CCU80_CC80_TC_CCS &CCS, CCU80_CC80_TC_SCE &SCE, CCU80_CC80_TC_STRM &STRM, CCU80_CC80_TC_ENDM &ENDM, CCU80_CC80_TC_TLS &TLS, CCU80_CC80_TC_CAPC &CAPC, CCU80_CC80_TC_ECM &ECM, CCU80_CC80_TC_CMOD &CMOD, bool &CLST, CCU80_CC80_TC_TSSM &TSSM, CCU80_CC80_TC_TCM &TCM)
    {
        uint32_t curr = TC;

        STOS = CCU80_CC80_TC_STOS((curr >> 29u) & 0b11u);
        EME = CCU80_CC80_TC_EME((curr >> 27u) & 0b11u);
        MCME2 = CCU80_CC80_TC_MCME2(curr & (1u << 26u));
        MCME1 = CCU80_CC80_TC_MCME1(curr & (1u << 25u));
        EMT = CCU80_CC80_TC_EMT(curr & (1u << 24u));
        EMS = CCU80_CC80_TC_EMS(curr & (1u << 23u));
        TRPSW = CCU80_CC80_TC_TRPSW(curr & (1u << 22u));
        TRPSE = CCU80_CC80_TC_TRPSE(curr & (1u << 21u));
        TRAPE3 = curr & (1u << 20u);
        TRAPE2 = curr & (1u << 19u);
        TRAPE1 = curr & (1u << 18u);
        TRAPE0 = CCU80_CC80_TC_TRAPE0(curr & (1u << 17u));
        FPE = CCU80_CC80_TC_FPE(curr & (1u << 16u));
        DIM = CCU80_CC80_TC_DIM(curr & (1u << 15u));
        DITHE = CCU80_CC80_TC_DITHE((curr >> 13u) & 0b11u);
        CCS = CCU80_CC80_TC_CCS(curr & (1u << 12u));
        SCE = CCU80_CC80_TC_SCE(curr & (1u << 11u));
        STRM = CCU80_CC80_TC_STRM(curr & (1u << 10u));
        ENDM = CCU80_CC80_TC_ENDM((curr >> 8u) & 0b11u);
        TLS = CCU80_CC80_TC_TLS(curr & (1u << 7u));
        CAPC = CCU80_CC80_TC_CAPC((curr >> 5u) & 0b11u);
        ECM = CCU80_CC80_TC_ECM(curr & (1u << 4u));
        CMOD = CCU80_CC80_TC_CMOD(curr & (1u << 3u));
        CLST = curr & (1u << 2u);
        TSSM = CCU80_CC80_TC_TSSM(curr & (1u << 1u));
        TCM = CCU80_CC80_TC_TCM(curr & (1u << 0u));
    }

    /**
     * Set all of TC's bit fields.
     */
    inline void set_TC(CCU80_CC80_TC_STOS STOS, CCU80_CC80_TC_EME EME, CCU80_CC80_TC_MCME2 MCME2, CCU80_CC80_TC_MCME1 MCME1, CCU80_CC80_TC_EMT EMT, CCU80_CC80_TC_EMS EMS, CCU80_CC80_TC_TRPSW TRPSW, CCU80_CC80_TC_TRPSE TRPSE, bool TRAPE3, bool TRAPE2, bool TRAPE1, CCU80_CC80_TC_TRAPE0 TRAPE0, CCU80_CC80_TC_FPE FPE, CCU80_CC80_TC_DIM DIM, CCU80_CC80_TC_DITHE DITHE, CCU80_CC80_TC_CCS CCS, CCU80_CC80_TC_SCE SCE, CCU80_CC80_TC_STRM STRM, CCU80_CC80_TC_ENDM ENDM, CCU80_CC80_TC_TLS TLS, CCU80_CC80_TC_CAPC CAPC, CCU80_CC80_TC_ECM ECM, bool CLST, CCU80_CC80_TC_TSSM TSSM, CCU80_CC80_TC_TCM TCM)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(STOS) & 0b11u) << 29u;
        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(EME) & 0b11u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (std::to_underlying(MCME2) & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (std::to_underlying(MCME1) & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (std::to_underlying(EMT) & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (std::to_underlying(EMS) & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (std::to_underlying(TRPSW) & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (std::to_underlying(TRPSE) & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (TRAPE3 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (TRAPE2 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (TRAPE1 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(TRAPE0) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(FPE) & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(DIM) & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(DITHE) & 0b11u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(CCS) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(SCE) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(STRM) & 0b1u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(ENDM) & 0b11u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(TLS) & 0b1u) << 7u;
        curr &= ~(0b11u << 5u);
        curr |= (std::to_underlying(CAPC) & 0b11u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(ECM) & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (CLST & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(TSSM) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(TCM) & 0b1u) << 0u;

        TC = curr;
    }

    /**
     * Get PSL's PSL22 bit.
     */
    inline CCU80_CC80_PSL_PSL22 get_PSL_PSL22()
    {
        return CCU80_CC80_PSL_PSL22(PSL & (1u << 3u));
    }

    /**
     * Set PSL's PSL22 bit.
     */
    inline void set_PSL_PSL22()
    {
        PSL |= 1u << 3u;
    }

    /**
     * Clear PSL's PSL22 bit.
     */
    inline void clear_PSL_PSL22()
    {
        PSL &= ~(1u << 3u);
    }

    /**
     * Toggle PSL's PSL22 bit.
     */
    inline void toggle_PSL_PSL22()
    {
        PSL ^= 1u << 3u;
    }

    /**
     * Get PSL's PSL21 bit.
     */
    inline CCU80_CC80_PSL_PSL21 get_PSL_PSL21()
    {
        return CCU80_CC80_PSL_PSL21(PSL & (1u << 2u));
    }

    /**
     * Set PSL's PSL21 bit.
     */
    inline void set_PSL_PSL21()
    {
        PSL |= 1u << 2u;
    }

    /**
     * Clear PSL's PSL21 bit.
     */
    inline void clear_PSL_PSL21()
    {
        PSL &= ~(1u << 2u);
    }

    /**
     * Toggle PSL's PSL21 bit.
     */
    inline void toggle_PSL_PSL21()
    {
        PSL ^= 1u << 2u;
    }

    /**
     * Get PSL's PSL12 bit.
     */
    inline CCU80_CC80_PSL_PSL12 get_PSL_PSL12()
    {
        return CCU80_CC80_PSL_PSL12(PSL & (1u << 1u));
    }

    /**
     * Set PSL's PSL12 bit.
     */
    inline void set_PSL_PSL12()
    {
        PSL |= 1u << 1u;
    }

    /**
     * Clear PSL's PSL12 bit.
     */
    inline void clear_PSL_PSL12()
    {
        PSL &= ~(1u << 1u);
    }

    /**
     * Toggle PSL's PSL12 bit.
     */
    inline void toggle_PSL_PSL12()
    {
        PSL ^= 1u << 1u;
    }

    /**
     * Get PSL's PSL11 bit.
     */
    inline CCU80_CC80_PSL_PSL11 get_PSL_PSL11()
    {
        return CCU80_CC80_PSL_PSL11(PSL & (1u << 0u));
    }

    /**
     * Set PSL's PSL11 bit.
     */
    inline void set_PSL_PSL11()
    {
        PSL |= 1u << 0u;
    }

    /**
     * Clear PSL's PSL11 bit.
     */
    inline void clear_PSL_PSL11()
    {
        PSL &= ~(1u << 0u);
    }

    /**
     * Toggle PSL's PSL11 bit.
     */
    inline void toggle_PSL_PSL11()
    {
        PSL ^= 1u << 0u;
    }

    /**
     * Get all of PSL's bit fields.
     */
    inline void get_PSL(CCU80_CC80_PSL_PSL22 &PSL22, CCU80_CC80_PSL_PSL21 &PSL21, CCU80_CC80_PSL_PSL12 &PSL12, CCU80_CC80_PSL_PSL11 &PSL11)
    {
        uint32_t curr = PSL;

        PSL22 = CCU80_CC80_PSL_PSL22(curr & (1u << 3u));
        PSL21 = CCU80_CC80_PSL_PSL21(curr & (1u << 2u));
        PSL12 = CCU80_CC80_PSL_PSL12(curr & (1u << 1u));
        PSL11 = CCU80_CC80_PSL_PSL11(curr & (1u << 0u));
    }

    /**
     * Set all of PSL's bit fields.
     */
    inline void set_PSL(CCU80_CC80_PSL_PSL22 PSL22, CCU80_CC80_PSL_PSL21 PSL21, CCU80_CC80_PSL_PSL12 PSL12, CCU80_CC80_PSL_PSL11 PSL11)
    {
        uint32_t curr = PSL;

        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(PSL22) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(PSL21) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(PSL12) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PSL11) & 0b1u) << 0u;

        PSL = curr;
    }

    /**
     * Get DIT's DCNT field.
     */
    inline uint8_t get_DIT_DCNT()
    {
        return (DIT >> 8u) & 0b1111u;
    }

    /**
     * Get DIT's DCV field.
     */
    inline uint8_t get_DIT_DCV()
    {
        return (DIT >> 0u) & 0b1111u;
    }

    /**
     * Get all of DIT's bit fields.
     */
    inline void get_DIT(uint8_t &DCNT, uint8_t &DCV)
    {
        uint32_t curr = DIT;

        DCNT = (curr >> 8u) & 0b1111u;
        DCV = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get DITS's DCVS field.
     */
    inline uint8_t get_DITS_DCVS()
    {
        return (DITS >> 0u) & 0b1111u;
    }

    /**
     * Set DITS's DCVS field.
     */
    inline void set_DITS_DCVS(uint8_t value)
    {
        uint32_t curr = DITS;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DITS = curr;
    }

    /**
     * Get PSC's PSIV field.
     */
    inline uint8_t get_PSC_PSIV()
    {
        return (PSC >> 0u) & 0b1111u;
    }

    /**
     * Set PSC's PSIV field.
     */
    inline void set_PSC_PSIV(uint8_t value)
    {
        uint32_t curr = PSC;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        PSC = curr;
    }

    /**
     * Get FPC's PVAL field.
     */
    inline uint8_t get_FPC_PVAL()
    {
        return (FPC >> 8u) & 0b1111u;
    }

    /**
     * Set FPC's PVAL field.
     */
    inline void set_FPC_PVAL(uint8_t value)
    {
        uint32_t curr = FPC;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        FPC = curr;
    }

    /**
     * Get FPC's PCMP field.
     */
    inline uint8_t get_FPC_PCMP()
    {
        return (FPC >> 0u) & 0b1111u;
    }

    /**
     * Get all of FPC's bit fields.
     */
    inline void get_FPC(uint8_t &PVAL, uint8_t &PCMP)
    {
        uint32_t curr = FPC;

        PVAL = (curr >> 8u) & 0b1111u;
        PCMP = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get FPCS's PCMP field.
     */
    inline uint8_t get_FPCS_PCMP()
    {
        return (FPCS >> 0u) & 0b1111u;
    }

    /**
     * Set FPCS's PCMP field.
     */
    inline void set_FPCS_PCMP(uint8_t value)
    {
        uint32_t curr = FPCS;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        FPCS = curr;
    }

    /**
     * Get PR's PR field.
     */
    inline uint16_t get_PR_PR()
    {
        return (PR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get PRS's PRS field.
     */
    inline uint16_t get_PRS_PRS()
    {
        return (PRS >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set PRS's PRS field.
     */
    inline void set_PRS_PRS(uint16_t value)
    {
        uint32_t curr = PRS;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        PRS = curr;
    }

    /**
     * Get CR1's CR1 field.
     */
    inline uint16_t get_CR1_CR1()
    {
        return (CR1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get CR1S's CR1S field.
     */
    inline uint16_t get_CR1S_CR1S()
    {
        return (CR1S >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CR1S's CR1S field.
     */
    inline void set_CR1S_CR1S(uint16_t value)
    {
        uint32_t curr = CR1S;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CR1S = curr;
    }

    /**
     * Get CR2's CR2 field.
     */
    inline uint16_t get_CR2_CR2()
    {
        return (CR2 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get CR2S's CR2S field.
     */
    inline uint16_t get_CR2S_CR2S()
    {
        return (CR2S >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CR2S's CR2S field.
     */
    inline void set_CR2S_CR2S(uint16_t value)
    {
        uint32_t curr = CR2S;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CR2S = curr;
    }

    /**
     * Get CHC's OCS4 bit.
     */
    inline CCU80_CC80_CHC_OCS4 get_CHC_OCS4()
    {
        return CCU80_CC80_CHC_OCS4(CHC & (1u << 4u));
    }

    /**
     * Set CHC's OCS4 bit.
     */
    inline void set_CHC_OCS4()
    {
        CHC |= 1u << 4u;
    }

    /**
     * Clear CHC's OCS4 bit.
     */
    inline void clear_CHC_OCS4()
    {
        CHC &= ~(1u << 4u);
    }

    /**
     * Toggle CHC's OCS4 bit.
     */
    inline void toggle_CHC_OCS4()
    {
        CHC ^= 1u << 4u;
    }

    /**
     * Get CHC's OCS3 bit.
     */
    inline CCU80_CC80_CHC_OCS3 get_CHC_OCS3()
    {
        return CCU80_CC80_CHC_OCS3(CHC & (1u << 3u));
    }

    /**
     * Set CHC's OCS3 bit.
     */
    inline void set_CHC_OCS3()
    {
        CHC |= 1u << 3u;
    }

    /**
     * Clear CHC's OCS3 bit.
     */
    inline void clear_CHC_OCS3()
    {
        CHC &= ~(1u << 3u);
    }

    /**
     * Toggle CHC's OCS3 bit.
     */
    inline void toggle_CHC_OCS3()
    {
        CHC ^= 1u << 3u;
    }

    /**
     * Get CHC's OCS2 bit.
     */
    inline CCU80_CC80_CHC_OCS2 get_CHC_OCS2()
    {
        return CCU80_CC80_CHC_OCS2(CHC & (1u << 2u));
    }

    /**
     * Set CHC's OCS2 bit.
     */
    inline void set_CHC_OCS2()
    {
        CHC |= 1u << 2u;
    }

    /**
     * Clear CHC's OCS2 bit.
     */
    inline void clear_CHC_OCS2()
    {
        CHC &= ~(1u << 2u);
    }

    /**
     * Toggle CHC's OCS2 bit.
     */
    inline void toggle_CHC_OCS2()
    {
        CHC ^= 1u << 2u;
    }

    /**
     * Get CHC's OCS1 bit.
     */
    inline CCU80_CC80_CHC_OCS1 get_CHC_OCS1()
    {
        return CCU80_CC80_CHC_OCS1(CHC & (1u << 1u));
    }

    /**
     * Set CHC's OCS1 bit.
     */
    inline void set_CHC_OCS1()
    {
        CHC |= 1u << 1u;
    }

    /**
     * Clear CHC's OCS1 bit.
     */
    inline void clear_CHC_OCS1()
    {
        CHC &= ~(1u << 1u);
    }

    /**
     * Toggle CHC's OCS1 bit.
     */
    inline void toggle_CHC_OCS1()
    {
        CHC ^= 1u << 1u;
    }

    /**
     * Get CHC's ASE bit.
     */
    inline CCU80_CC80_CHC_ASE get_CHC_ASE()
    {
        return CCU80_CC80_CHC_ASE(CHC & (1u << 0u));
    }

    /**
     * Set CHC's ASE bit.
     */
    inline void set_CHC_ASE()
    {
        CHC |= 1u << 0u;
    }

    /**
     * Clear CHC's ASE bit.
     */
    inline void clear_CHC_ASE()
    {
        CHC &= ~(1u << 0u);
    }

    /**
     * Toggle CHC's ASE bit.
     */
    inline void toggle_CHC_ASE()
    {
        CHC ^= 1u << 0u;
    }

    /**
     * Get all of CHC's bit fields.
     */
    inline void get_CHC(CCU80_CC80_CHC_OCS4 &OCS4, CCU80_CC80_CHC_OCS3 &OCS3, CCU80_CC80_CHC_OCS2 &OCS2, CCU80_CC80_CHC_OCS1 &OCS1, CCU80_CC80_CHC_ASE &ASE)
    {
        uint32_t curr = CHC;

        OCS4 = CCU80_CC80_CHC_OCS4(curr & (1u << 4u));
        OCS3 = CCU80_CC80_CHC_OCS3(curr & (1u << 3u));
        OCS2 = CCU80_CC80_CHC_OCS2(curr & (1u << 2u));
        OCS1 = CCU80_CC80_CHC_OCS1(curr & (1u << 1u));
        ASE = CCU80_CC80_CHC_ASE(curr & (1u << 0u));
    }

    /**
     * Set all of CHC's bit fields.
     */
    inline void set_CHC(CCU80_CC80_CHC_OCS4 OCS4, CCU80_CC80_CHC_OCS3 OCS3, CCU80_CC80_CHC_OCS2 OCS2, CCU80_CC80_CHC_OCS1 OCS1, CCU80_CC80_CHC_ASE ASE)
    {
        uint32_t curr = CHC;

        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(OCS4) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(OCS3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(OCS2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(OCS1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(ASE) & 0b1u) << 0u;

        CHC = curr;
    }

    /**
     * Get DTC's DTCC field.
     */
    inline CCU80_CC80_DTC_DTCC get_DTC_DTCC()
    {
        return CCU80_CC80_DTC_DTCC((DTC >> 6u) & 0b11u);
    }

    /**
     * Set DTC's DTCC field.
     */
    inline void set_DTC_DTCC(CCU80_CC80_DTC_DTCC value)
    {
        uint32_t curr = DTC;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        DTC = curr;
    }

    /**
     * Get DTC's DCEN4 bit.
     */
    inline CCU80_CC80_DTC_DCEN4 get_DTC_DCEN4()
    {
        return CCU80_CC80_DTC_DCEN4(DTC & (1u << 5u));
    }

    /**
     * Set DTC's DCEN4 bit.
     */
    inline void set_DTC_DCEN4()
    {
        DTC |= 1u << 5u;
    }

    /**
     * Clear DTC's DCEN4 bit.
     */
    inline void clear_DTC_DCEN4()
    {
        DTC &= ~(1u << 5u);
    }

    /**
     * Toggle DTC's DCEN4 bit.
     */
    inline void toggle_DTC_DCEN4()
    {
        DTC ^= 1u << 5u;
    }

    /**
     * Get DTC's DCEN3 bit.
     */
    inline CCU80_CC80_DTC_DCEN3 get_DTC_DCEN3()
    {
        return CCU80_CC80_DTC_DCEN3(DTC & (1u << 4u));
    }

    /**
     * Set DTC's DCEN3 bit.
     */
    inline void set_DTC_DCEN3()
    {
        DTC |= 1u << 4u;
    }

    /**
     * Clear DTC's DCEN3 bit.
     */
    inline void clear_DTC_DCEN3()
    {
        DTC &= ~(1u << 4u);
    }

    /**
     * Toggle DTC's DCEN3 bit.
     */
    inline void toggle_DTC_DCEN3()
    {
        DTC ^= 1u << 4u;
    }

    /**
     * Get DTC's DCEN2 bit.
     */
    inline CCU80_CC80_DTC_DCEN2 get_DTC_DCEN2()
    {
        return CCU80_CC80_DTC_DCEN2(DTC & (1u << 3u));
    }

    /**
     * Set DTC's DCEN2 bit.
     */
    inline void set_DTC_DCEN2()
    {
        DTC |= 1u << 3u;
    }

    /**
     * Clear DTC's DCEN2 bit.
     */
    inline void clear_DTC_DCEN2()
    {
        DTC &= ~(1u << 3u);
    }

    /**
     * Toggle DTC's DCEN2 bit.
     */
    inline void toggle_DTC_DCEN2()
    {
        DTC ^= 1u << 3u;
    }

    /**
     * Get DTC's DCEN1 bit.
     */
    inline CCU80_CC80_DTC_DCEN1 get_DTC_DCEN1()
    {
        return CCU80_CC80_DTC_DCEN1(DTC & (1u << 2u));
    }

    /**
     * Set DTC's DCEN1 bit.
     */
    inline void set_DTC_DCEN1()
    {
        DTC |= 1u << 2u;
    }

    /**
     * Clear DTC's DCEN1 bit.
     */
    inline void clear_DTC_DCEN1()
    {
        DTC &= ~(1u << 2u);
    }

    /**
     * Toggle DTC's DCEN1 bit.
     */
    inline void toggle_DTC_DCEN1()
    {
        DTC ^= 1u << 2u;
    }

    /**
     * Get DTC's DTE2 bit.
     */
    inline CCU80_CC80_DTC_DTE2 get_DTC_DTE2()
    {
        return CCU80_CC80_DTC_DTE2(DTC & (1u << 1u));
    }

    /**
     * Set DTC's DTE2 bit.
     */
    inline void set_DTC_DTE2()
    {
        DTC |= 1u << 1u;
    }

    /**
     * Clear DTC's DTE2 bit.
     */
    inline void clear_DTC_DTE2()
    {
        DTC &= ~(1u << 1u);
    }

    /**
     * Toggle DTC's DTE2 bit.
     */
    inline void toggle_DTC_DTE2()
    {
        DTC ^= 1u << 1u;
    }

    /**
     * Get DTC's DTE1 bit.
     */
    inline CCU80_CC80_DTC_DTE1 get_DTC_DTE1()
    {
        return CCU80_CC80_DTC_DTE1(DTC & (1u << 0u));
    }

    /**
     * Set DTC's DTE1 bit.
     */
    inline void set_DTC_DTE1()
    {
        DTC |= 1u << 0u;
    }

    /**
     * Clear DTC's DTE1 bit.
     */
    inline void clear_DTC_DTE1()
    {
        DTC &= ~(1u << 0u);
    }

    /**
     * Toggle DTC's DTE1 bit.
     */
    inline void toggle_DTC_DTE1()
    {
        DTC ^= 1u << 0u;
    }

    /**
     * Get all of DTC's bit fields.
     */
    inline void get_DTC(CCU80_CC80_DTC_DTCC &DTCC, CCU80_CC80_DTC_DCEN4 &DCEN4, CCU80_CC80_DTC_DCEN3 &DCEN3, CCU80_CC80_DTC_DCEN2 &DCEN2, CCU80_CC80_DTC_DCEN1 &DCEN1, CCU80_CC80_DTC_DTE2 &DTE2, CCU80_CC80_DTC_DTE1 &DTE1)
    {
        uint32_t curr = DTC;

        DTCC = CCU80_CC80_DTC_DTCC((curr >> 6u) & 0b11u);
        DCEN4 = CCU80_CC80_DTC_DCEN4(curr & (1u << 5u));
        DCEN3 = CCU80_CC80_DTC_DCEN3(curr & (1u << 4u));
        DCEN2 = CCU80_CC80_DTC_DCEN2(curr & (1u << 3u));
        DCEN1 = CCU80_CC80_DTC_DCEN1(curr & (1u << 2u));
        DTE2 = CCU80_CC80_DTC_DTE2(curr & (1u << 1u));
        DTE1 = CCU80_CC80_DTC_DTE1(curr & (1u << 0u));
    }

    /**
     * Set all of DTC's bit fields.
     */
    inline void set_DTC(CCU80_CC80_DTC_DTCC DTCC, CCU80_CC80_DTC_DCEN4 DCEN4, CCU80_CC80_DTC_DCEN3 DCEN3, CCU80_CC80_DTC_DCEN2 DCEN2, CCU80_CC80_DTC_DCEN1 DCEN1, CCU80_CC80_DTC_DTE2 DTE2, CCU80_CC80_DTC_DTE1 DTE1)
    {
        uint32_t curr = DTC;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(DTCC) & 0b11u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DCEN4) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(DCEN3) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(DCEN2) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(DCEN1) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(DTE2) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(DTE1) & 0b1u) << 0u;

        DTC = curr;
    }

    /**
     * Get DC1R's DT1F field.
     */
    inline uint8_t get_DC1R_DT1F()
    {
        return (DC1R >> 8u) & 0b11111111u;
    }

    /**
     * Set DC1R's DT1F field.
     */
    inline void set_DC1R_DT1F(uint8_t value)
    {
        uint32_t curr = DC1R;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        DC1R = curr;
    }

    /**
     * Get DC1R's DT1R field.
     */
    inline uint8_t get_DC1R_DT1R()
    {
        return (DC1R >> 0u) & 0b11111111u;
    }

    /**
     * Set DC1R's DT1R field.
     */
    inline void set_DC1R_DT1R(uint8_t value)
    {
        uint32_t curr = DC1R;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        DC1R = curr;
    }

    /**
     * Get all of DC1R's bit fields.
     */
    inline void get_DC1R(uint8_t &DT1F, uint8_t &DT1R)
    {
        uint32_t curr = DC1R;

        DT1F = (curr >> 8u) & 0b11111111u;
        DT1R = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of DC1R's bit fields.
     */
    inline void set_DC1R(uint8_t DT1F, uint8_t DT1R)
    {
        uint32_t curr = DC1R;

        curr &= ~(0b11111111u << 8u);
        curr |= (DT1F & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (DT1R & 0b11111111u) << 0u;

        DC1R = curr;
    }

    /**
     * Get DC2R's DT2F field.
     */
    inline uint8_t get_DC2R_DT2F()
    {
        return (DC2R >> 8u) & 0b11111111u;
    }

    /**
     * Set DC2R's DT2F field.
     */
    inline void set_DC2R_DT2F(uint8_t value)
    {
        uint32_t curr = DC2R;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        DC2R = curr;
    }

    /**
     * Get DC2R's DT2R field.
     */
    inline uint8_t get_DC2R_DT2R()
    {
        return (DC2R >> 0u) & 0b11111111u;
    }

    /**
     * Set DC2R's DT2R field.
     */
    inline void set_DC2R_DT2R(uint8_t value)
    {
        uint32_t curr = DC2R;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        DC2R = curr;
    }

    /**
     * Get all of DC2R's bit fields.
     */
    inline void get_DC2R(uint8_t &DT2F, uint8_t &DT2R)
    {
        uint32_t curr = DC2R;

        DT2F = (curr >> 8u) & 0b11111111u;
        DT2R = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of DC2R's bit fields.
     */
    inline void set_DC2R(uint8_t DT2F, uint8_t DT2R)
    {
        uint32_t curr = DC2R;

        curr &= ~(0b11111111u << 8u);
        curr |= (DT2F & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (DT2R & 0b11111111u) << 0u;

        DC2R = curr;
    }

    /**
     * Get TIMER's TVAL field.
     */
    inline uint16_t get_TIMER_TVAL()
    {
        return (TIMER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TIMER's TVAL field.
     */
    inline void set_TIMER_TVAL(uint16_t value)
    {
        uint32_t curr = TIMER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TIMER = curr;
    }

    /**
     * Get C0V's FFL bit.
     */
    inline CCU80_CC80_C0V_FFL get_C0V_FFL()
    {
        return CCU80_CC80_C0V_FFL(C0V & (1u << 20u));
    }

    /**
     * Get C0V's FPCV field.
     */
    inline uint8_t get_C0V_FPCV()
    {
        return (C0V >> 16u) & 0b1111u;
    }

    /**
     * Get C0V's CAPTV field.
     */
    inline uint16_t get_C0V_CAPTV()
    {
        return (C0V >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of C0V's bit fields.
     */
    inline void get_C0V(CCU80_CC80_C0V_FFL &FFL, uint8_t &FPCV, uint16_t &CAPTV)
    {
        uint32_t curr = C0V;

        FFL = CCU80_CC80_C0V_FFL(curr & (1u << 20u));
        FPCV = (curr >> 16u) & 0b1111u;
        CAPTV = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get C1V's FFL bit.
     */
    inline CCU80_CC80_C1V_FFL get_C1V_FFL()
    {
        return CCU80_CC80_C1V_FFL(C1V & (1u << 20u));
    }

    /**
     * Get C1V's FPCV field.
     */
    inline uint8_t get_C1V_FPCV()
    {
        return (C1V >> 16u) & 0b1111u;
    }

    /**
     * Get C1V's CAPTV field.
     */
    inline uint16_t get_C1V_CAPTV()
    {
        return (C1V >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of C1V's bit fields.
     */
    inline void get_C1V(CCU80_CC80_C1V_FFL &FFL, uint8_t &FPCV, uint16_t &CAPTV)
    {
        uint32_t curr = C1V;

        FFL = CCU80_CC80_C1V_FFL(curr & (1u << 20u));
        FPCV = (curr >> 16u) & 0b1111u;
        CAPTV = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get C2V's FFL bit.
     */
    inline CCU80_CC80_C2V_FFL get_C2V_FFL()
    {
        return CCU80_CC80_C2V_FFL(C2V & (1u << 20u));
    }

    /**
     * Get C2V's FPCV field.
     */
    inline uint8_t get_C2V_FPCV()
    {
        return (C2V >> 16u) & 0b1111u;
    }

    /**
     * Get C2V's CAPTV field.
     */
    inline uint16_t get_C2V_CAPTV()
    {
        return (C2V >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of C2V's bit fields.
     */
    inline void get_C2V(CCU80_CC80_C2V_FFL &FFL, uint8_t &FPCV, uint16_t &CAPTV)
    {
        uint32_t curr = C2V;

        FFL = CCU80_CC80_C2V_FFL(curr & (1u << 20u));
        FPCV = (curr >> 16u) & 0b1111u;
        CAPTV = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get C3V's FFL bit.
     */
    inline CCU80_CC80_C3V_FFL get_C3V_FFL()
    {
        return CCU80_CC80_C3V_FFL(C3V & (1u << 20u));
    }

    /**
     * Get C3V's FPCV field.
     */
    inline uint8_t get_C3V_FPCV()
    {
        return (C3V >> 16u) & 0b1111u;
    }

    /**
     * Get C3V's CAPTV field.
     */
    inline uint16_t get_C3V_CAPTV()
    {
        return (C3V >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of C3V's bit fields.
     */
    inline void get_C3V(CCU80_CC80_C3V_FFL &FFL, uint8_t &FPCV, uint16_t &CAPTV)
    {
        uint32_t curr = C3V;

        FFL = CCU80_CC80_C3V_FFL(curr & (1u << 20u));
        FPCV = (curr >> 16u) & 0b1111u;
        CAPTV = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get INTS's TRPF bit.
     */
    inline bool get_INTS_TRPF()
    {
        return INTS & (1u << 11u);
    }

    /**
     * Get INTS's E2AS bit.
     */
    inline CCU80_CC80_INTS_E2AS get_INTS_E2AS()
    {
        return CCU80_CC80_INTS_E2AS(INTS & (1u << 10u));
    }

    /**
     * Get INTS's E1AS bit.
     */
    inline CCU80_CC80_INTS_E1AS get_INTS_E1AS()
    {
        return CCU80_CC80_INTS_E1AS(INTS & (1u << 9u));
    }

    /**
     * Get INTS's E0AS bit.
     */
    inline CCU80_CC80_INTS_E0AS get_INTS_E0AS()
    {
        return CCU80_CC80_INTS_E0AS(INTS & (1u << 8u));
    }

    /**
     * Get INTS's CMD2S bit.
     */
    inline CCU80_CC80_INTS_CMD2S get_INTS_CMD2S()
    {
        return CCU80_CC80_INTS_CMD2S(INTS & (1u << 5u));
    }

    /**
     * Get INTS's CMU2S bit.
     */
    inline CCU80_CC80_INTS_CMU2S get_INTS_CMU2S()
    {
        return CCU80_CC80_INTS_CMU2S(INTS & (1u << 4u));
    }

    /**
     * Get INTS's CMD1S bit.
     */
    inline CCU80_CC80_INTS_CMD1S get_INTS_CMD1S()
    {
        return CCU80_CC80_INTS_CMD1S(INTS & (1u << 3u));
    }

    /**
     * Get INTS's CMU1S bit.
     */
    inline CCU80_CC80_INTS_CMU1S get_INTS_CMU1S()
    {
        return CCU80_CC80_INTS_CMU1S(INTS & (1u << 2u));
    }

    /**
     * Get INTS's OMDS bit.
     */
    inline CCU80_CC80_INTS_OMDS get_INTS_OMDS()
    {
        return CCU80_CC80_INTS_OMDS(INTS & (1u << 1u));
    }

    /**
     * Get INTS's PMUS bit.
     */
    inline CCU80_CC80_INTS_PMUS get_INTS_PMUS()
    {
        return CCU80_CC80_INTS_PMUS(INTS & (1u << 0u));
    }

    /**
     * Get all of INTS's bit fields.
     */
    inline void get_INTS(bool &TRPF, CCU80_CC80_INTS_E2AS &E2AS, CCU80_CC80_INTS_E1AS &E1AS, CCU80_CC80_INTS_E0AS &E0AS, CCU80_CC80_INTS_CMD2S &CMD2S, CCU80_CC80_INTS_CMU2S &CMU2S, CCU80_CC80_INTS_CMD1S &CMD1S, CCU80_CC80_INTS_CMU1S &CMU1S, CCU80_CC80_INTS_OMDS &OMDS, CCU80_CC80_INTS_PMUS &PMUS)
    {
        uint32_t curr = INTS;

        TRPF = curr & (1u << 11u);
        E2AS = CCU80_CC80_INTS_E2AS(curr & (1u << 10u));
        E1AS = CCU80_CC80_INTS_E1AS(curr & (1u << 9u));
        E0AS = CCU80_CC80_INTS_E0AS(curr & (1u << 8u));
        CMD2S = CCU80_CC80_INTS_CMD2S(curr & (1u << 5u));
        CMU2S = CCU80_CC80_INTS_CMU2S(curr & (1u << 4u));
        CMD1S = CCU80_CC80_INTS_CMD1S(curr & (1u << 3u));
        CMU1S = CCU80_CC80_INTS_CMU1S(curr & (1u << 2u));
        OMDS = CCU80_CC80_INTS_OMDS(curr & (1u << 1u));
        PMUS = CCU80_CC80_INTS_PMUS(curr & (1u << 0u));
    }

    /**
     * Get INTE's E2AE bit.
     */
    inline CCU80_CC80_INTE_E2AE get_INTE_E2AE()
    {
        return CCU80_CC80_INTE_E2AE(INTE & (1u << 10u));
    }

    /**
     * Set INTE's E2AE bit.
     */
    inline void set_INTE_E2AE()
    {
        INTE |= 1u << 10u;
    }

    /**
     * Clear INTE's E2AE bit.
     */
    inline void clear_INTE_E2AE()
    {
        INTE &= ~(1u << 10u);
    }

    /**
     * Toggle INTE's E2AE bit.
     */
    inline void toggle_INTE_E2AE()
    {
        INTE ^= 1u << 10u;
    }

    /**
     * Get INTE's E1AE bit.
     */
    inline CCU80_CC80_INTE_E1AE get_INTE_E1AE()
    {
        return CCU80_CC80_INTE_E1AE(INTE & (1u << 9u));
    }

    /**
     * Set INTE's E1AE bit.
     */
    inline void set_INTE_E1AE()
    {
        INTE |= 1u << 9u;
    }

    /**
     * Clear INTE's E1AE bit.
     */
    inline void clear_INTE_E1AE()
    {
        INTE &= ~(1u << 9u);
    }

    /**
     * Toggle INTE's E1AE bit.
     */
    inline void toggle_INTE_E1AE()
    {
        INTE ^= 1u << 9u;
    }

    /**
     * Get INTE's E0AE bit.
     */
    inline CCU80_CC80_INTE_E0AE get_INTE_E0AE()
    {
        return CCU80_CC80_INTE_E0AE(INTE & (1u << 8u));
    }

    /**
     * Set INTE's E0AE bit.
     */
    inline void set_INTE_E0AE()
    {
        INTE |= 1u << 8u;
    }

    /**
     * Clear INTE's E0AE bit.
     */
    inline void clear_INTE_E0AE()
    {
        INTE &= ~(1u << 8u);
    }

    /**
     * Toggle INTE's E0AE bit.
     */
    inline void toggle_INTE_E0AE()
    {
        INTE ^= 1u << 8u;
    }

    /**
     * Get INTE's CMD2E bit.
     */
    inline CCU80_CC80_INTE_CMD2E get_INTE_CMD2E()
    {
        return CCU80_CC80_INTE_CMD2E(INTE & (1u << 5u));
    }

    /**
     * Set INTE's CMD2E bit.
     */
    inline void set_INTE_CMD2E()
    {
        INTE |= 1u << 5u;
    }

    /**
     * Clear INTE's CMD2E bit.
     */
    inline void clear_INTE_CMD2E()
    {
        INTE &= ~(1u << 5u);
    }

    /**
     * Toggle INTE's CMD2E bit.
     */
    inline void toggle_INTE_CMD2E()
    {
        INTE ^= 1u << 5u;
    }

    /**
     * Get INTE's CMU2E bit.
     */
    inline CCU80_CC80_INTE_CMU2E get_INTE_CMU2E()
    {
        return CCU80_CC80_INTE_CMU2E(INTE & (1u << 4u));
    }

    /**
     * Set INTE's CMU2E bit.
     */
    inline void set_INTE_CMU2E()
    {
        INTE |= 1u << 4u;
    }

    /**
     * Clear INTE's CMU2E bit.
     */
    inline void clear_INTE_CMU2E()
    {
        INTE &= ~(1u << 4u);
    }

    /**
     * Toggle INTE's CMU2E bit.
     */
    inline void toggle_INTE_CMU2E()
    {
        INTE ^= 1u << 4u;
    }

    /**
     * Get INTE's CMD1E bit.
     */
    inline CCU80_CC80_INTE_CMD1E get_INTE_CMD1E()
    {
        return CCU80_CC80_INTE_CMD1E(INTE & (1u << 3u));
    }

    /**
     * Set INTE's CMD1E bit.
     */
    inline void set_INTE_CMD1E()
    {
        INTE |= 1u << 3u;
    }

    /**
     * Clear INTE's CMD1E bit.
     */
    inline void clear_INTE_CMD1E()
    {
        INTE &= ~(1u << 3u);
    }

    /**
     * Toggle INTE's CMD1E bit.
     */
    inline void toggle_INTE_CMD1E()
    {
        INTE ^= 1u << 3u;
    }

    /**
     * Get INTE's CMU1E bit.
     */
    inline CCU80_CC80_INTE_CMU1E get_INTE_CMU1E()
    {
        return CCU80_CC80_INTE_CMU1E(INTE & (1u << 2u));
    }

    /**
     * Set INTE's CMU1E bit.
     */
    inline void set_INTE_CMU1E()
    {
        INTE |= 1u << 2u;
    }

    /**
     * Clear INTE's CMU1E bit.
     */
    inline void clear_INTE_CMU1E()
    {
        INTE &= ~(1u << 2u);
    }

    /**
     * Toggle INTE's CMU1E bit.
     */
    inline void toggle_INTE_CMU1E()
    {
        INTE ^= 1u << 2u;
    }

    /**
     * Get INTE's OME bit.
     */
    inline CCU80_CC80_INTE_OME get_INTE_OME()
    {
        return CCU80_CC80_INTE_OME(INTE & (1u << 1u));
    }

    /**
     * Set INTE's OME bit.
     */
    inline void set_INTE_OME()
    {
        INTE |= 1u << 1u;
    }

    /**
     * Clear INTE's OME bit.
     */
    inline void clear_INTE_OME()
    {
        INTE &= ~(1u << 1u);
    }

    /**
     * Toggle INTE's OME bit.
     */
    inline void toggle_INTE_OME()
    {
        INTE ^= 1u << 1u;
    }

    /**
     * Get INTE's PME bit.
     */
    inline CCU80_CC80_INTE_PME get_INTE_PME()
    {
        return CCU80_CC80_INTE_PME(INTE & (1u << 0u));
    }

    /**
     * Set INTE's PME bit.
     */
    inline void set_INTE_PME()
    {
        INTE |= 1u << 0u;
    }

    /**
     * Clear INTE's PME bit.
     */
    inline void clear_INTE_PME()
    {
        INTE &= ~(1u << 0u);
    }

    /**
     * Toggle INTE's PME bit.
     */
    inline void toggle_INTE_PME()
    {
        INTE ^= 1u << 0u;
    }

    /**
     * Get all of INTE's bit fields.
     */
    inline void get_INTE(CCU80_CC80_INTE_E2AE &E2AE, CCU80_CC80_INTE_E1AE &E1AE, CCU80_CC80_INTE_E0AE &E0AE, CCU80_CC80_INTE_CMD2E &CMD2E, CCU80_CC80_INTE_CMU2E &CMU2E, CCU80_CC80_INTE_CMD1E &CMD1E, CCU80_CC80_INTE_CMU1E &CMU1E, CCU80_CC80_INTE_OME &OME, CCU80_CC80_INTE_PME &PME)
    {
        uint32_t curr = INTE;

        E2AE = CCU80_CC80_INTE_E2AE(curr & (1u << 10u));
        E1AE = CCU80_CC80_INTE_E1AE(curr & (1u << 9u));
        E0AE = CCU80_CC80_INTE_E0AE(curr & (1u << 8u));
        CMD2E = CCU80_CC80_INTE_CMD2E(curr & (1u << 5u));
        CMU2E = CCU80_CC80_INTE_CMU2E(curr & (1u << 4u));
        CMD1E = CCU80_CC80_INTE_CMD1E(curr & (1u << 3u));
        CMU1E = CCU80_CC80_INTE_CMU1E(curr & (1u << 2u));
        OME = CCU80_CC80_INTE_OME(curr & (1u << 1u));
        PME = CCU80_CC80_INTE_PME(curr & (1u << 0u));
    }

    /**
     * Set all of INTE's bit fields.
     */
    inline void set_INTE(CCU80_CC80_INTE_E2AE E2AE, CCU80_CC80_INTE_E1AE E1AE, CCU80_CC80_INTE_E0AE E0AE, CCU80_CC80_INTE_CMD2E CMD2E, CCU80_CC80_INTE_CMU2E CMU2E, CCU80_CC80_INTE_CMD1E CMD1E, CCU80_CC80_INTE_CMU1E CMU1E, CCU80_CC80_INTE_OME OME, CCU80_CC80_INTE_PME PME)
    {
        uint32_t curr = INTE;

        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(E2AE) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(E1AE) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(E0AE) & 0b1u) << 8u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(CMD2E) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(CMU2E) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CMD1E) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CMU1E) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(OME) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PME) & 0b1u) << 0u;

        INTE = curr;
    }

    /**
     * Get SRS's E2SR field.
     */
    inline CCU80_CC80_SRS_E2SR get_SRS_E2SR()
    {
        return CCU80_CC80_SRS_E2SR((SRS >> 12u) & 0b11u);
    }

    /**
     * Set SRS's E2SR field.
     */
    inline void set_SRS_E2SR(CCU80_CC80_SRS_E2SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        SRS = curr;
    }

    /**
     * Get SRS's E1SR field.
     */
    inline CCU80_CC80_SRS_E1SR get_SRS_E1SR()
    {
        return CCU80_CC80_SRS_E1SR((SRS >> 10u) & 0b11u);
    }

    /**
     * Set SRS's E1SR field.
     */
    inline void set_SRS_E1SR(CCU80_CC80_SRS_E1SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        SRS = curr;
    }

    /**
     * Get SRS's E0SR field.
     */
    inline CCU80_CC80_SRS_E0SR get_SRS_E0SR()
    {
        return CCU80_CC80_SRS_E0SR((SRS >> 8u) & 0b11u);
    }

    /**
     * Set SRS's E0SR field.
     */
    inline void set_SRS_E0SR(CCU80_CC80_SRS_E0SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        SRS = curr;
    }

    /**
     * Get SRS's CM2SR field.
     */
    inline CCU80_CC80_SRS_CM2SR get_SRS_CM2SR()
    {
        return CCU80_CC80_SRS_CM2SR((SRS >> 4u) & 0b11u);
    }

    /**
     * Set SRS's CM2SR field.
     */
    inline void set_SRS_CM2SR(CCU80_CC80_SRS_CM2SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        SRS = curr;
    }

    /**
     * Get SRS's CM1SR field.
     */
    inline CCU80_CC80_SRS_CM1SR get_SRS_CM1SR()
    {
        return CCU80_CC80_SRS_CM1SR((SRS >> 2u) & 0b11u);
    }

    /**
     * Set SRS's CM1SR field.
     */
    inline void set_SRS_CM1SR(CCU80_CC80_SRS_CM1SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        SRS = curr;
    }

    /**
     * Get SRS's POSR field.
     */
    inline CCU80_CC80_SRS_POSR get_SRS_POSR()
    {
        return CCU80_CC80_SRS_POSR((SRS >> 0u) & 0b11u);
    }

    /**
     * Set SRS's POSR field.
     */
    inline void set_SRS_POSR(CCU80_CC80_SRS_POSR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        SRS = curr;
    }

    /**
     * Get all of SRS's bit fields.
     */
    inline void get_SRS(CCU80_CC80_SRS_E2SR &E2SR, CCU80_CC80_SRS_E1SR &E1SR, CCU80_CC80_SRS_E0SR &E0SR, CCU80_CC80_SRS_CM2SR &CM2SR, CCU80_CC80_SRS_CM1SR &CM1SR, CCU80_CC80_SRS_POSR &POSR)
    {
        uint32_t curr = SRS;

        E2SR = CCU80_CC80_SRS_E2SR((curr >> 12u) & 0b11u);
        E1SR = CCU80_CC80_SRS_E1SR((curr >> 10u) & 0b11u);
        E0SR = CCU80_CC80_SRS_E0SR((curr >> 8u) & 0b11u);
        CM2SR = CCU80_CC80_SRS_CM2SR((curr >> 4u) & 0b11u);
        CM1SR = CCU80_CC80_SRS_CM1SR((curr >> 2u) & 0b11u);
        POSR = CCU80_CC80_SRS_POSR((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of SRS's bit fields.
     */
    inline void set_SRS(CCU80_CC80_SRS_E2SR E2SR, CCU80_CC80_SRS_E1SR E1SR, CCU80_CC80_SRS_E0SR E0SR, CCU80_CC80_SRS_CM2SR CM2SR, CCU80_CC80_SRS_CM1SR CM1SR, CCU80_CC80_SRS_POSR POSR)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(E2SR) & 0b11u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(E1SR) & 0b11u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(E0SR) & 0b11u) << 8u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(CM2SR) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(CM1SR) & 0b11u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(POSR) & 0b11u) << 0u;

        SRS = curr;
    }

    /**
     * Set SWS's STRPF bit.
     */
    inline void set_SWS_STRPF()
    {
        SWS |= 1u << 11u;
    }

    /**
     * Clear SWS's STRPF bit.
     */
    inline void clear_SWS_STRPF()
    {
        SWS &= ~(1u << 11u);
    }

    /**
     * Toggle SWS's STRPF bit.
     */
    inline void toggle_SWS_STRPF()
    {
        SWS ^= 1u << 11u;
    }

    /**
     * Set SWS's SE2A bit.
     */
    inline void set_SWS_SE2A()
    {
        SWS |= 1u << 10u;
    }

    /**
     * Clear SWS's SE2A bit.
     */
    inline void clear_SWS_SE2A()
    {
        SWS &= ~(1u << 10u);
    }

    /**
     * Toggle SWS's SE2A bit.
     */
    inline void toggle_SWS_SE2A()
    {
        SWS ^= 1u << 10u;
    }

    /**
     * Set SWS's SE1A bit.
     */
    inline void set_SWS_SE1A()
    {
        SWS |= 1u << 9u;
    }

    /**
     * Clear SWS's SE1A bit.
     */
    inline void clear_SWS_SE1A()
    {
        SWS &= ~(1u << 9u);
    }

    /**
     * Toggle SWS's SE1A bit.
     */
    inline void toggle_SWS_SE1A()
    {
        SWS ^= 1u << 9u;
    }

    /**
     * Set SWS's SE0A bit.
     */
    inline void set_SWS_SE0A()
    {
        SWS |= 1u << 8u;
    }

    /**
     * Clear SWS's SE0A bit.
     */
    inline void clear_SWS_SE0A()
    {
        SWS &= ~(1u << 8u);
    }

    /**
     * Toggle SWS's SE0A bit.
     */
    inline void toggle_SWS_SE0A()
    {
        SWS ^= 1u << 8u;
    }

    /**
     * Set SWS's SCM2D bit.
     */
    inline void set_SWS_SCM2D()
    {
        SWS |= 1u << 5u;
    }

    /**
     * Clear SWS's SCM2D bit.
     */
    inline void clear_SWS_SCM2D()
    {
        SWS &= ~(1u << 5u);
    }

    /**
     * Toggle SWS's SCM2D bit.
     */
    inline void toggle_SWS_SCM2D()
    {
        SWS ^= 1u << 5u;
    }

    /**
     * Set SWS's SCM2U bit.
     */
    inline void set_SWS_SCM2U()
    {
        SWS |= 1u << 4u;
    }

    /**
     * Clear SWS's SCM2U bit.
     */
    inline void clear_SWS_SCM2U()
    {
        SWS &= ~(1u << 4u);
    }

    /**
     * Toggle SWS's SCM2U bit.
     */
    inline void toggle_SWS_SCM2U()
    {
        SWS ^= 1u << 4u;
    }

    /**
     * Set SWS's SCM1D bit.
     */
    inline void set_SWS_SCM1D()
    {
        SWS |= 1u << 3u;
    }

    /**
     * Clear SWS's SCM1D bit.
     */
    inline void clear_SWS_SCM1D()
    {
        SWS &= ~(1u << 3u);
    }

    /**
     * Toggle SWS's SCM1D bit.
     */
    inline void toggle_SWS_SCM1D()
    {
        SWS ^= 1u << 3u;
    }

    /**
     * Set SWS's SCM1U bit.
     */
    inline void set_SWS_SCM1U()
    {
        SWS |= 1u << 2u;
    }

    /**
     * Clear SWS's SCM1U bit.
     */
    inline void clear_SWS_SCM1U()
    {
        SWS &= ~(1u << 2u);
    }

    /**
     * Toggle SWS's SCM1U bit.
     */
    inline void toggle_SWS_SCM1U()
    {
        SWS ^= 1u << 2u;
    }

    /**
     * Set SWS's SOM bit.
     */
    inline void set_SWS_SOM()
    {
        SWS |= 1u << 1u;
    }

    /**
     * Clear SWS's SOM bit.
     */
    inline void clear_SWS_SOM()
    {
        SWS &= ~(1u << 1u);
    }

    /**
     * Toggle SWS's SOM bit.
     */
    inline void toggle_SWS_SOM()
    {
        SWS ^= 1u << 1u;
    }

    /**
     * Set SWS's SPM bit.
     */
    inline void set_SWS_SPM()
    {
        SWS |= 1u << 0u;
    }

    /**
     * Clear SWS's SPM bit.
     */
    inline void clear_SWS_SPM()
    {
        SWS &= ~(1u << 0u);
    }

    /**
     * Toggle SWS's SPM bit.
     */
    inline void toggle_SWS_SPM()
    {
        SWS ^= 1u << 0u;
    }

    /**
     * Set all of SWS's bit fields.
     */
    inline void set_SWS(bool STRPF, bool SE2A, bool SE1A, bool SE0A, bool SCM2D, bool SCM2U, bool SCM1D, bool SCM1U, bool SOM, bool SPM)
    {
        uint32_t curr = SWS;

        curr &= ~(0b1u << 11u);
        curr |= (STRPF & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (SE2A & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SE1A & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SE0A & 0b1u) << 8u;
        curr &= ~(0b1u << 5u);
        curr |= (SCM2D & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (SCM2U & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SCM1D & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SCM1U & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SOM & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SPM & 0b1u) << 0u;

        SWS = curr;
    }

    /**
     * Set SWR's RTRPF bit.
     */
    inline void set_SWR_RTRPF()
    {
        SWR |= 1u << 11u;
    }

    /**
     * Clear SWR's RTRPF bit.
     */
    inline void clear_SWR_RTRPF()
    {
        SWR &= ~(1u << 11u);
    }

    /**
     * Toggle SWR's RTRPF bit.
     */
    inline void toggle_SWR_RTRPF()
    {
        SWR ^= 1u << 11u;
    }

    /**
     * Set SWR's RE2A bit.
     */
    inline void set_SWR_RE2A()
    {
        SWR |= 1u << 10u;
    }

    /**
     * Clear SWR's RE2A bit.
     */
    inline void clear_SWR_RE2A()
    {
        SWR &= ~(1u << 10u);
    }

    /**
     * Toggle SWR's RE2A bit.
     */
    inline void toggle_SWR_RE2A()
    {
        SWR ^= 1u << 10u;
    }

    /**
     * Set SWR's RE1A bit.
     */
    inline void set_SWR_RE1A()
    {
        SWR |= 1u << 9u;
    }

    /**
     * Clear SWR's RE1A bit.
     */
    inline void clear_SWR_RE1A()
    {
        SWR &= ~(1u << 9u);
    }

    /**
     * Toggle SWR's RE1A bit.
     */
    inline void toggle_SWR_RE1A()
    {
        SWR ^= 1u << 9u;
    }

    /**
     * Set SWR's RE0A bit.
     */
    inline void set_SWR_RE0A()
    {
        SWR |= 1u << 8u;
    }

    /**
     * Clear SWR's RE0A bit.
     */
    inline void clear_SWR_RE0A()
    {
        SWR &= ~(1u << 8u);
    }

    /**
     * Toggle SWR's RE0A bit.
     */
    inline void toggle_SWR_RE0A()
    {
        SWR ^= 1u << 8u;
    }

    /**
     * Set SWR's RCM2D bit.
     */
    inline void set_SWR_RCM2D()
    {
        SWR |= 1u << 5u;
    }

    /**
     * Clear SWR's RCM2D bit.
     */
    inline void clear_SWR_RCM2D()
    {
        SWR &= ~(1u << 5u);
    }

    /**
     * Toggle SWR's RCM2D bit.
     */
    inline void toggle_SWR_RCM2D()
    {
        SWR ^= 1u << 5u;
    }

    /**
     * Set SWR's RCM2U bit.
     */
    inline void set_SWR_RCM2U()
    {
        SWR |= 1u << 4u;
    }

    /**
     * Clear SWR's RCM2U bit.
     */
    inline void clear_SWR_RCM2U()
    {
        SWR &= ~(1u << 4u);
    }

    /**
     * Toggle SWR's RCM2U bit.
     */
    inline void toggle_SWR_RCM2U()
    {
        SWR ^= 1u << 4u;
    }

    /**
     * Set SWR's RCM1D bit.
     */
    inline void set_SWR_RCM1D()
    {
        SWR |= 1u << 3u;
    }

    /**
     * Clear SWR's RCM1D bit.
     */
    inline void clear_SWR_RCM1D()
    {
        SWR &= ~(1u << 3u);
    }

    /**
     * Toggle SWR's RCM1D bit.
     */
    inline void toggle_SWR_RCM1D()
    {
        SWR ^= 1u << 3u;
    }

    /**
     * Set SWR's RCM1U bit.
     */
    inline void set_SWR_RCM1U()
    {
        SWR |= 1u << 2u;
    }

    /**
     * Clear SWR's RCM1U bit.
     */
    inline void clear_SWR_RCM1U()
    {
        SWR &= ~(1u << 2u);
    }

    /**
     * Toggle SWR's RCM1U bit.
     */
    inline void toggle_SWR_RCM1U()
    {
        SWR ^= 1u << 2u;
    }

    /**
     * Set SWR's ROM bit.
     */
    inline void set_SWR_ROM()
    {
        SWR |= 1u << 1u;
    }

    /**
     * Clear SWR's ROM bit.
     */
    inline void clear_SWR_ROM()
    {
        SWR &= ~(1u << 1u);
    }

    /**
     * Toggle SWR's ROM bit.
     */
    inline void toggle_SWR_ROM()
    {
        SWR ^= 1u << 1u;
    }

    /**
     * Set SWR's RPM bit.
     */
    inline void set_SWR_RPM()
    {
        SWR |= 1u << 0u;
    }

    /**
     * Clear SWR's RPM bit.
     */
    inline void clear_SWR_RPM()
    {
        SWR &= ~(1u << 0u);
    }

    /**
     * Toggle SWR's RPM bit.
     */
    inline void toggle_SWR_RPM()
    {
        SWR ^= 1u << 0u;
    }

    /**
     * Set all of SWR's bit fields.
     */
    inline void set_SWR(bool RTRPF, bool RE2A, bool RE1A, bool RE0A, bool RCM2D, bool RCM2U, bool RCM1D, bool RCM1U, bool ROM, bool RPM)
    {
        uint32_t curr = SWR;

        curr &= ~(0b1u << 11u);
        curr |= (RTRPF & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (RE2A & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (RE1A & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (RE0A & 0b1u) << 8u;
        curr &= ~(0b1u << 5u);
        curr |= (RCM2D & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (RCM2U & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (RCM1D & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RCM1U & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ROM & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RPM & 0b1u) << 0u;

        SWR = curr;
    }

    /**
     * Get STC's STM field.
     */
    inline CCU80_CC80_STC_STM get_STC_STM()
    {
        return CCU80_CC80_STC_STM((STC >> 1u) & 0b11u);
    }

    /**
     * Set STC's STM field.
     */
    inline void set_STC_STM(CCU80_CC80_STC_STM value)
    {
        uint32_t curr = STC;

        curr &= ~(0b11u << 1u);
        curr |= (std::to_underlying(value) & 0b11u) << 1u;

        STC = curr;
    }

    /**
     * Get STC's CSE bit.
     */
    inline CCU80_CC80_STC_CSE get_STC_CSE()
    {
        return CCU80_CC80_STC_CSE(STC & (1u << 0u));
    }

    /**
     * Set STC's CSE bit.
     */
    inline void set_STC_CSE()
    {
        STC |= 1u << 0u;
    }

    /**
     * Clear STC's CSE bit.
     */
    inline void clear_STC_CSE()
    {
        STC &= ~(1u << 0u);
    }

    /**
     * Toggle STC's CSE bit.
     */
    inline void toggle_STC_CSE()
    {
        STC ^= 1u << 0u;
    }

    /**
     * Get all of STC's bit fields.
     */
    inline void get_STC(CCU80_CC80_STC_STM &STM, CCU80_CC80_STC_CSE &CSE)
    {
        uint32_t curr = STC;

        STM = CCU80_CC80_STC_STM((curr >> 1u) & 0b11u);
        CSE = CCU80_CC80_STC_CSE(curr & (1u << 0u));
    }

    /**
     * Set all of STC's bit fields.
     */
    inline void set_STC(CCU80_CC80_STC_STM STM, CCU80_CC80_STC_CSE CSE)
    {
        uint32_t curr = STC;

        curr &= ~(0b11u << 1u);
        curr |= (std::to_underlying(STM) & 0b11u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CSE) & 0b1u) << 0u;

        STC = curr;
    }

    /**
     * Get ECRD0's LCV bit.
     */
    inline CCU80_CC80_ECRD0_LCV get_ECRD0_LCV()
    {
        return CCU80_CC80_ECRD0_LCV(ECRD0 & (1u << 25u));
    }

    /**
     * Get ECRD0's FFL bit.
     */
    inline CCU80_CC80_ECRD0_FFL get_ECRD0_FFL()
    {
        return CCU80_CC80_ECRD0_FFL(ECRD0 & (1u << 24u));
    }

    /**
     * Get ECRD0's VPTR field.
     */
    inline CCU80_CC80_ECRD0_VPTR get_ECRD0_VPTR()
    {
        return CCU80_CC80_ECRD0_VPTR((ECRD0 >> 22u) & 0b11u);
    }

    /**
     * Get ECRD0's SPTR field.
     */
    inline CCU80_CC80_ECRD0_SPTR get_ECRD0_SPTR()
    {
        return CCU80_CC80_ECRD0_SPTR((ECRD0 >> 20u) & 0b11u);
    }

    /**
     * Get ECRD0's FPCV field.
     */
    inline uint8_t get_ECRD0_FPCV()
    {
        return (ECRD0 >> 16u) & 0b1111u;
    }

    /**
     * Get ECRD0's CAPV field.
     */
    inline uint16_t get_ECRD0_CAPV()
    {
        return (ECRD0 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of ECRD0's bit fields.
     */
    inline void get_ECRD0(CCU80_CC80_ECRD0_LCV &LCV, CCU80_CC80_ECRD0_FFL &FFL, CCU80_CC80_ECRD0_VPTR &VPTR, CCU80_CC80_ECRD0_SPTR &SPTR, uint8_t &FPCV, uint16_t &CAPV)
    {
        uint32_t curr = ECRD0;

        LCV = CCU80_CC80_ECRD0_LCV(curr & (1u << 25u));
        FFL = CCU80_CC80_ECRD0_FFL(curr & (1u << 24u));
        VPTR = CCU80_CC80_ECRD0_VPTR((curr >> 22u) & 0b11u);
        SPTR = CCU80_CC80_ECRD0_SPTR((curr >> 20u) & 0b11u);
        FPCV = (curr >> 16u) & 0b1111u;
        CAPV = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get ECRD1's LCV bit.
     */
    inline CCU80_CC80_ECRD1_LCV get_ECRD1_LCV()
    {
        return CCU80_CC80_ECRD1_LCV(ECRD1 & (1u << 25u));
    }

    /**
     * Get ECRD1's FFL bit.
     */
    inline CCU80_CC80_ECRD1_FFL get_ECRD1_FFL()
    {
        return CCU80_CC80_ECRD1_FFL(ECRD1 & (1u << 24u));
    }

    /**
     * Get ECRD1's VPTR field.
     */
    inline CCU80_CC80_ECRD1_VPTR get_ECRD1_VPTR()
    {
        return CCU80_CC80_ECRD1_VPTR((ECRD1 >> 22u) & 0b11u);
    }

    /**
     * Get ECRD1's SPTR field.
     */
    inline CCU80_CC80_ECRD1_SPTR get_ECRD1_SPTR()
    {
        return CCU80_CC80_ECRD1_SPTR((ECRD1 >> 20u) & 0b11u);
    }

    /**
     * Get ECRD1's FPCV field.
     */
    inline uint8_t get_ECRD1_FPCV()
    {
        return (ECRD1 >> 16u) & 0b1111u;
    }

    /**
     * Get ECRD1's CAPV field.
     */
    inline uint16_t get_ECRD1_CAPV()
    {
        return (ECRD1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of ECRD1's bit fields.
     */
    inline void get_ECRD1(CCU80_CC80_ECRD1_LCV &LCV, CCU80_CC80_ECRD1_FFL &FFL, CCU80_CC80_ECRD1_VPTR &VPTR, CCU80_CC80_ECRD1_SPTR &SPTR, uint8_t &FPCV, uint16_t &CAPV)
    {
        uint32_t curr = ECRD1;

        LCV = CCU80_CC80_ECRD1_LCV(curr & (1u << 25u));
        FFL = CCU80_CC80_ECRD1_FFL(curr & (1u << 24u));
        VPTR = CCU80_CC80_ECRD1_VPTR((curr >> 22u) & 0b11u);
        SPTR = CCU80_CC80_ECRD1_SPTR((curr >> 20u) & 0b11u);
        FPCV = (curr >> 16u) & 0b1111u;
        CAPV = (curr >> 0u) & 0b1111111111111111u;
    }
};

static_assert(sizeof(ccu80_cc80) == ccu80_cc80::size);

static volatile ccu80_cc80 *const CCU80_CC80 = reinterpret_cast<ccu80_cc80 *>(0x40020100);

static volatile ccu80_cc80 *const CCU80_CC81 = reinterpret_cast<ccu80_cc80 *>(0x40020200);

static volatile ccu80_cc80 *const CCU80_CC82 = reinterpret_cast<ccu80_cc80 *>(0x40020300);

static volatile ccu80_cc80 *const CCU80_CC83 = reinterpret_cast<ccu80_cc80 *>(0x40020400);

static volatile ccu80_cc80 *const CCU81_CC80 = reinterpret_cast<ccu80_cc80 *>(0x40024100);

static volatile ccu80_cc80 *const CCU81_CC81 = reinterpret_cast<ccu80_cc80 *>(0x40024200);

static volatile ccu80_cc80 *const CCU81_CC82 = reinterpret_cast<ccu80_cc80 *>(0x40024300);

static volatile ccu80_cc80 *const CCU81_CC83 = reinterpret_cast<ccu80_cc80 *>(0x40024400);

}; // namespace XMC4700
