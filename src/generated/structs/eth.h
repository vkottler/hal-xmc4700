/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Ethernet Unit 0
 */
struct [[gnu::packed]] eth
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;         /*!< eth's identifier. */
    static constexpr std::size_t size = 4188; /*!< eth's size in bytes. */

    /* Fields. */
    uint32_t MAC_CONFIGURATION; /*!< (read-write) MAC Configuration Register */
    uint32_t MAC_FRAME_FILTER;  /*!< (read-write) MAC Frame Filter */
    uint32_t HASH_TABLE_HIGH;   /*!< (read-write) Hash Table High Register */
    uint32_t HASH_TABLE_LOW;    /*!< (read-write) Hash Table Low Register */
    uint32_t GMII_ADDRESS;      /*!< (read-write) MII Address Register */
    uint32_t GMII_DATA;         /*!< (read-write) MII Data Register */
    uint32_t FLOW_CONTROL;      /*!< (read-write) Flow Control Register */
    uint32_t VLAN_TAG;          /*!< (read-write) VLAN Tag Register */
    const uint32_t VERSION = {};          /*!< (read-only) Version Register */
    const uint32_t DEBUG = {};            /*!< (read-only) Debug Register */
    uint32_t REMOTE_WAKE_UP_FRAME_FILTER; /*!< (read-write) Remote Wake Up
                                             Frame Filter Register */
    uint32_t PMT_CONTROL_STATUS; /*!< (read-write) PMT Control and Status
                                    Register */
    static constexpr std::size_t reserved_padding0_length = 2;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    const uint32_t INTERRUPT_STATUS =
        {};                     /*!< (read-only) Interrupt Register */
    uint32_t INTERRUPT_MASK;    /*!< (read-write) Interrupt Mask Register */
    uint32_t MAC_ADDRESS0_HIGH; /*!< (read-write) MAC Address0 High Register */
    uint32_t MAC_ADDRESS0_LOW;  /*!< (read-write) MAC Address0 Low Register */
    uint32_t MAC_ADDRESS1_HIGH; /*!< (read-write) MAC Address1 High Register */
    uint32_t MAC_ADDRESS1_LOW;  /*!< (read-write) MAC Address1 Low Register */
    uint32_t MAC_ADDRESS2_HIGH; /*!< (read-write) MAC Address2 High Register */
    uint32_t MAC_ADDRESS2_LOW;  /*!< (read-write) MAC Address2 Low Register */
    uint32_t MAC_ADDRESS3_HIGH; /*!< (read-write) MAC Address3 High Register */
    uint32_t MAC_ADDRESS3_LOW;  /*!< (read-write) MAC Address3 Low Register */
    static constexpr std::size_t reserved_padding1_length = 40;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t MMC_CONTROL; /*!< (read-write) MMC Control Register */
    const uint32_t MMC_RECEIVE_INTERRUPT =
        {}; /*!< (read-only) MMC Receive Interrupt Register */
    const uint32_t MMC_TRANSMIT_INTERRUPT =
        {}; /*!< (read-only) MMC Transmit Interrupt Register */
    uint32_t MMC_RECEIVE_INTERRUPT_MASK;  /*!< (read-write) MMC Reveive
                                             Interrupt Mask Register */
    uint32_t MMC_TRANSMIT_INTERRUPT_MASK; /*!< (read-write) MMC Transmit
                                             Interrupt Mask Register */
    const uint32_t TX_OCTET_COUNT_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad Frames
               Register */
    const uint32_t TX_FRAME_COUNT_GOOD_BAD =
        {}; /*!< (read-only) Transmit Frame Count for Goodand Bad Frames
               Register */
    const uint32_t TX_BROADCAST_FRAMES_GOOD =
        {}; /*!< (read-only) Transmit Frame Count for Good Broadcast Frames */
    const uint32_t TX_MULTICAST_FRAMES_GOOD =
        {}; /*!< (read-only) Transmit Frame Count for Good Multicast Frames */
    const uint32_t TX_64OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 64 Byte
               Frames */
    const uint32_t TX_65TO127OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 65 to 127
               Bytes Frames */
    const uint32_t TX_128TO255OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 128 to 255
               Bytes Frames */
    const uint32_t TX_256TO511OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 256 to 511
               Bytes Frames */
    const uint32_t TX_512TO1023OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 512 to 1023
               Bytes Frames */
    const uint32_t TX_1024TOMAXOCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 1024 to
               Maxsize Bytes Frames */
    const uint32_t TX_UNICAST_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Frame Count for Good and Bad Unicast
               Frames */
    const uint32_t TX_MULTICAST_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Frame Count for Good and Bad Multicast
               Frames */
    const uint32_t TX_BROADCAST_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Frame Count for Good and Bad Broadcast
               Frames */
    const uint32_t TX_UNDERFLOW_ERROR_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Underflow Error Frames */
    const uint32_t TX_SINGLE_COLLISION_GOOD_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Frames Transmitted after
               Single Collision */
    const uint32_t TX_MULTIPLE_COLLISION_GOOD_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Frames Transmitted after
               Multiple Collision */
    const uint32_t TX_DEFERRED_FRAMES =
        {}; /*!< (read-only) Tx Deferred Frames Register */
    const uint32_t TX_LATE_COLLISION_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Late Collision Error
               Frames */
    const uint32_t TX_EXCESSIVE_COLLISION_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Excessive Collision Error
               Frames */
    const uint32_t TX_CARRIER_ERROR_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Carrier Sense Error
               Frames */
    const uint32_t TX_OCTET_COUNT_GOOD =
        {}; /*!< (read-only) Tx Octet Count Good Register */
    const uint32_t TX_FRAME_COUNT_GOOD =
        {}; /*!< (read-only) Tx Frame Count Good Register */
    const uint32_t TX_EXCESSIVE_DEFERRAL_ERROR =
        {}; /*!< (read-only) Transmit Frame Count for Excessive Deferral Error
               Frames */
    const uint32_t TX_PAUSE_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Good PAUSE Frames */
    const uint32_t TX_VLAN_FRAMES_GOOD =
        {}; /*!< (read-only) Transmit Frame Count for Good VLAN Frames */
    const uint32_t TX_OSIZE_FRAMES_GOOD =
        {}; /*!< (read-only) Transmit Frame Count for Good Oversize Frames */
    const uint32_t reserved_padding2 = {};
    const uint32_t RX_FRAMES_COUNT_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad Frames */
    const uint32_t RX_OCTET_COUNT_GOOD_BAD =
        {}; /*!< (read-only) Receive Octet Count for Good and Bad Frames */
    const uint32_t RX_OCTET_COUNT_GOOD =
        {}; /*!< (read-only) Rx Octet Count Good Register */
    const uint32_t RX_BROADCAST_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Good Broadcast Frames */
    const uint32_t RX_MULTICAST_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Good Multicast Frames */
    const uint32_t RX_CRC_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for CRC Error Frames */
    const uint32_t RX_ALIGNMENT_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Alignment Error Frames */
    const uint32_t RX_RUNT_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Runt Error Frames */
    const uint32_t RX_JABBER_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Jabber Error Frames */
    const uint32_t RX_UNDERSIZE_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Undersize Frames */
    const uint32_t RX_OVERSIZE_FRAMES_GOOD =
        {}; /*!< (read-only) Rx Oversize Frames Good Register */
    const uint32_t RX_64OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 64 Byte
               Frames */
    const uint32_t RX_65TO127OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 65 to 127
               Bytes Frames */
    const uint32_t RX_128TO255OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 128 to 255
               Bytes Frames */
    const uint32_t RX_256TO511OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 256 to 511
               Bytes Frames */
    const uint32_t RX_512TO1023OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 512 to 1,023
               Bytes Frames */
    const uint32_t RX_1024TOMAXOCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 1,024 to
               Maxsize Bytes Frames */
    const uint32_t RX_UNICAST_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Good Unicast Frames */
    const uint32_t RX_LENGTH_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Length Error Frames */
    const uint32_t RX_OUT_OF_RANGE_TYPE_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Out of Range Frames */
    const uint32_t RX_PAUSE_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for PAUSE Frames */
    const uint32_t RX_FIFO_OVERFLOW_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for FIFO Overflow Frames */
    const uint32_t RX_VLAN_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad VLAN Frames
             */
    const uint32_t RX_WATCHDOG_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Watchdog Error Frames */
    const uint32_t RX_RECEIVE_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Receive Error Frames */
    const uint32_t RX_CONTROL_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Good Control Frames Frames
             */
    static constexpr std::size_t reserved_padding3_length = 6;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t
        MMC_IPC_RECEIVE_INTERRUPT_MASK; /*!< (read-write) MMC Receive Checksum
                                           Offload Interrupt Mask Register */
    const uint32_t reserved_padding4 = {};
    const uint32_t MMC_IPC_RECEIVE_INTERRUPT =
        {}; /*!< (read-only) MMC Receive Checksum Offload Interrupt Register */
    const uint32_t reserved_padding5 = {};
    const uint32_t RXIPV4_GOOD_FRAMES =
        {}; /*!< (read-only) RxIPv4 Good Frames Register */
    const uint32_t RXIPV4_HEADER_ERROR_FRAMES =
        {}; /*!< (read-only) Receive IPV4 Header Error Frame Counter Register
             */
    const uint32_t RXIPV4_NO_PAYLOAD_FRAMES =
        {}; /*!< (read-only) Receive IPV4 No Payload Frame Counter Register */
    const uint32_t RXIPV4_FRAGMENTED_FRAMES =
        {}; /*!< (read-only) Receive IPV4 Fragmented Frame Counter Register */
    const uint32_t RXIPV4_UDP_CHECKSUM_DISABLED_FRAMES =
        {}; /*!< (read-only) Receive IPV4 UDP Checksum Disabled Frame Counter
               Register */
    const uint32_t RXIPV6_GOOD_FRAMES =
        {}; /*!< (read-only) RxIPv6 Good Frames Register */
    const uint32_t RXIPV6_HEADER_ERROR_FRAMES =
        {}; /*!< (read-only) Receive IPV6 Header Error Frame Counter Register
             */
    const uint32_t RXIPV6_NO_PAYLOAD_FRAMES =
        {}; /*!< (read-only) Receive IPV6 No Payload Frame Counter Register */
    const uint32_t RXUDP_GOOD_FRAMES =
        {}; /*!< (read-only) RxUDP Good Frames Register */
    const uint32_t RXUDP_ERROR_FRAMES =
        {}; /*!< (read-only) RxUDP Error Frames Register */
    const uint32_t RXTCP_GOOD_FRAMES =
        {}; /*!< (read-only) RxTCP Good Frames Register */
    const uint32_t RXTCP_ERROR_FRAMES =
        {}; /*!< (read-only) RxTCP Error Frames Register */
    const uint32_t RXICMP_GOOD_FRAMES =
        {}; /*!< (read-only) RxICMP Good Frames Register */
    const uint32_t RXICMP_ERROR_FRAMES =
        {}; /*!< (read-only) RxICMP Error Frames Register */
    static constexpr std::size_t reserved_padding6_length = 2;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    const uint32_t RXIPV4_GOOD_OCTETS =
        {}; /*!< (read-only) RxIPv4 Good Octets Register */
    const uint32_t RXIPV4_HEADER_ERROR_OCTETS =
        {}; /*!< (read-only) Receive IPV4 Header Error Octet Counter Register
             */
    const uint32_t RXIPV4_NO_PAYLOAD_OCTETS =
        {}; /*!< (read-only) Receive IPV4 No Payload Octet Counter Register */
    const uint32_t RXIPV4_FRAGMENTED_OCTETS =
        {}; /*!< (read-only) Receive IPV4 Fragmented Octet Counter Register */
    const uint32_t RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS =
        {}; /*!< (read-only) Receive IPV4 Fragmented Octet Counter Register */
    const uint32_t RXIPV6_GOOD_OCTETS =
        {}; /*!< (read-only) RxIPv6 Good Octets Register */
    const uint32_t RXIPV6_HEADER_ERROR_OCTETS =
        {}; /*!< (read-only) Receive IPV6 Header Error Octet Counter Register
             */
    const uint32_t RXIPV6_NO_PAYLOAD_OCTETS =
        {}; /*!< (read-only) Receive IPV6 No Payload Octet Counter Register */
    const uint32_t RXUDP_GOOD_OCTETS =
        {}; /*!< (read-only) Receive UDP Good Octets Register */
    const uint32_t RXUDP_ERROR_OCTETS =
        {}; /*!< (read-only) Receive UDP Error Octets Register */
    const uint32_t RXTCP_GOOD_OCTETS =
        {}; /*!< (read-only) Receive TCP Good Octets Register */
    const uint32_t RXTCP_ERROR_OCTETS =
        {}; /*!< (read-only) Receive TCP Error Octets Register */
    const uint32_t RXICMP_GOOD_OCTETS =
        {}; /*!< (read-only) Receive ICMP Good Octets Register */
    const uint32_t RXICMP_ERROR_OCTETS =
        {}; /*!< (read-only) Receive ICMP Error Octets Register */
    static constexpr std::size_t reserved_padding7_length = 286;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t TIMESTAMP_CONTROL; /*!< (read-write) Timestamp Control Register */
    uint32_t SUB_SECOND_INCREMENT; /*!< (read-write) Sub-Second Increment
                                      Register */
    const uint32_t SYSTEM_TIME_SECONDS =
        {}; /*!< (read-only) System Time - Seconds Register */
    const uint32_t SYSTEM_TIME_NANOSECONDS =
        {}; /*!< (read-only) System Time Nanoseconds Register */
    uint32_t SYSTEM_TIME_SECONDS_UPDATE;     /*!< (read-write) System Time -
                                                Seconds Update Register */
    uint32_t SYSTEM_TIME_NANOSECONDS_UPDATE; /*!< (read-write) System Time
                                                Nanoseconds Update Register */
    uint32_t TIMESTAMP_ADDEND; /*!< (read-write) Timestamp Addend Register */
    uint32_t
        TARGET_TIME_SECONDS; /*!< (read-write) Target Time Seconds Register */
    uint32_t TARGET_TIME_NANOSECONDS; /*!< (read-write) Target Time Nanoseconds
                                         Register */
    uint32_t
        SYSTEM_TIME_HIGHER_WORD_SECONDS; /*!< (read-write) System Time - Higher
                                            Word Seconds Register */
    const uint32_t TIMESTAMP_STATUS =
        {}; /*!< (read-only) Timestamp Status Register */
    static constexpr std::size_t reserved_padding8_length = 565;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t BUS_MODE;             /*!< (read-write) Bus Mode Register */
    uint32_t TRANSMIT_POLL_DEMAND; /*!< (read-write) Transmit Poll Demand
                                      Register */
    uint32_t
        RECEIVE_POLL_DEMAND; /*!< (read-write) Receive Poll Demand Register */
    uint32_t RECEIVE_DESCRIPTOR_LIST_ADDRESS; /*!< (read-write) Receive
                                                 Descriptor Address Register */
    uint32_t
        TRANSMIT_DESCRIPTOR_LIST_ADDRESS; /*!< (read-write) Transmit descripter
                                             Address Register */
    uint32_t STATUS;                      /*!< (read-write) Status Register */
    uint32_t OPERATION_MODE;   /*!< (read-write) Operation Mode Register */
    uint32_t INTERRUPT_ENABLE; /*!< (read-write) Interrupt Enable Register */
    const uint32_t MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER =
        {}; /*!< (read-only) Missed Frame and Buffer Overflow Counter Register
             */
    uint32_t
        RECEIVE_INTERRUPT_WATCHDOG_TIMER; /*!< (read-write) Receive Interrupt
                                             Watchdog Timer Register */
    const uint32_t reserved_padding9 = {};
    const uint32_t AHB_STATUS = {}; /*!< (read-only) AHB Status Register */
    static constexpr std::size_t reserved_padding10_length = 6;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    const uint32_t CURRENT_HOST_TRANSMIT_DESCRIPTOR =
        {}; /*!< (read-only) Current Host Transmit Descriptor Register */
    const uint32_t CURRENT_HOST_RECEIVE_DESCRIPTOR =
        {}; /*!< (read-only) Current Host Receive Descriptor Register */
    const uint32_t CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS =
        {}; /*!< (read-only) Current Host Transmit Buffer Address Register */
    const uint32_t CURRENT_HOST_RECEIVE_BUFFER_ADDRESS =
        {}; /*!< (read-only) Current Host Receive Buffer Address Register */
    uint32_t HW_FEATURE; /*!< (read-write) HW Feature Register */

    /* Methods. */

    /**
     * Get MAC_CONFIGURATION's SARC field.
     */
    uint8_t get_MAC_CONFIGURATION_SARC()
    {
        return (MAC_CONFIGURATION >> 28u) & 0b111u;
    }

    /**
     * Get MAC_CONFIGURATION's TWOKPE bit.
     */
    bool get_MAC_CONFIGURATION_TWOKPE()
    {
        return MAC_CONFIGURATION & (1u << 27u);
    }

    /**
     * Set MAC_CONFIGURATION's TWOKPE bit.
     */
    inline void set_MAC_CONFIGURATION_TWOKPE()
    {
        MAC_CONFIGURATION |= 1u << 27u;
    }

    /**
     * Clear MAC_CONFIGURATION's TWOKPE bit.
     */
    inline void clear_MAC_CONFIGURATION_TWOKPE()
    {
        MAC_CONFIGURATION &= ~(1u << 27u);
    }

    /**
     * Toggle MAC_CONFIGURATION's TWOKPE bit.
     */
    inline void toggle_MAC_CONFIGURATION_TWOKPE()
    {
        MAC_CONFIGURATION ^= 1u << 27u;
    }

    /**
     * Get MAC_CONFIGURATION's CST bit.
     */
    bool get_MAC_CONFIGURATION_CST()
    {
        return MAC_CONFIGURATION & (1u << 25u);
    }

    /**
     * Set MAC_CONFIGURATION's CST bit.
     */
    inline void set_MAC_CONFIGURATION_CST()
    {
        MAC_CONFIGURATION |= 1u << 25u;
    }

    /**
     * Clear MAC_CONFIGURATION's CST bit.
     */
    inline void clear_MAC_CONFIGURATION_CST()
    {
        MAC_CONFIGURATION &= ~(1u << 25u);
    }

    /**
     * Toggle MAC_CONFIGURATION's CST bit.
     */
    inline void toggle_MAC_CONFIGURATION_CST()
    {
        MAC_CONFIGURATION ^= 1u << 25u;
    }

    /**
     * Get MAC_CONFIGURATION's TC bit.
     */
    bool get_MAC_CONFIGURATION_TC()
    {
        return MAC_CONFIGURATION & (1u << 24u);
    }

    /**
     * Get MAC_CONFIGURATION's WD bit.
     */
    bool get_MAC_CONFIGURATION_WD()
    {
        return MAC_CONFIGURATION & (1u << 23u);
    }

    /**
     * Set MAC_CONFIGURATION's WD bit.
     */
    inline void set_MAC_CONFIGURATION_WD()
    {
        MAC_CONFIGURATION |= 1u << 23u;
    }

    /**
     * Clear MAC_CONFIGURATION's WD bit.
     */
    inline void clear_MAC_CONFIGURATION_WD()
    {
        MAC_CONFIGURATION &= ~(1u << 23u);
    }

    /**
     * Toggle MAC_CONFIGURATION's WD bit.
     */
    inline void toggle_MAC_CONFIGURATION_WD()
    {
        MAC_CONFIGURATION ^= 1u << 23u;
    }

    /**
     * Get MAC_CONFIGURATION's JD bit.
     */
    bool get_MAC_CONFIGURATION_JD()
    {
        return MAC_CONFIGURATION & (1u << 22u);
    }

    /**
     * Set MAC_CONFIGURATION's JD bit.
     */
    inline void set_MAC_CONFIGURATION_JD()
    {
        MAC_CONFIGURATION |= 1u << 22u;
    }

    /**
     * Clear MAC_CONFIGURATION's JD bit.
     */
    inline void clear_MAC_CONFIGURATION_JD()
    {
        MAC_CONFIGURATION &= ~(1u << 22u);
    }

    /**
     * Toggle MAC_CONFIGURATION's JD bit.
     */
    inline void toggle_MAC_CONFIGURATION_JD()
    {
        MAC_CONFIGURATION ^= 1u << 22u;
    }

    /**
     * Get MAC_CONFIGURATION's BE bit.
     */
    bool get_MAC_CONFIGURATION_BE()
    {
        return MAC_CONFIGURATION & (1u << 21u);
    }

    /**
     * Get MAC_CONFIGURATION's JE bit.
     */
    bool get_MAC_CONFIGURATION_JE()
    {
        return MAC_CONFIGURATION & (1u << 20u);
    }

    /**
     * Set MAC_CONFIGURATION's JE bit.
     */
    inline void set_MAC_CONFIGURATION_JE()
    {
        MAC_CONFIGURATION |= 1u << 20u;
    }

    /**
     * Clear MAC_CONFIGURATION's JE bit.
     */
    inline void clear_MAC_CONFIGURATION_JE()
    {
        MAC_CONFIGURATION &= ~(1u << 20u);
    }

    /**
     * Toggle MAC_CONFIGURATION's JE bit.
     */
    inline void toggle_MAC_CONFIGURATION_JE()
    {
        MAC_CONFIGURATION ^= 1u << 20u;
    }

    /**
     * Get MAC_CONFIGURATION's IFG field.
     */
    uint8_t get_MAC_CONFIGURATION_IFG()
    {
        return (MAC_CONFIGURATION >> 17u) & 0b111u;
    }

    /**
     * Set MAC_CONFIGURATION's IFG field.
     */
    inline void set_MAC_CONFIGURATION_IFG(uint8_t value)
    {
        uint32_t curr = MAC_CONFIGURATION;

        curr &= ~(0b111u << 17u);
        curr |= (value & 0b111u) << 17u;

        MAC_CONFIGURATION = curr;
    }

    /**
     * Get MAC_CONFIGURATION's DCRS bit.
     */
    bool get_MAC_CONFIGURATION_DCRS()
    {
        return MAC_CONFIGURATION & (1u << 16u);
    }

    /**
     * Set MAC_CONFIGURATION's DCRS bit.
     */
    inline void set_MAC_CONFIGURATION_DCRS()
    {
        MAC_CONFIGURATION |= 1u << 16u;
    }

    /**
     * Clear MAC_CONFIGURATION's DCRS bit.
     */
    inline void clear_MAC_CONFIGURATION_DCRS()
    {
        MAC_CONFIGURATION &= ~(1u << 16u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DCRS bit.
     */
    inline void toggle_MAC_CONFIGURATION_DCRS()
    {
        MAC_CONFIGURATION ^= 1u << 16u;
    }

    /**
     * Get MAC_CONFIGURATION's FES bit.
     */
    bool get_MAC_CONFIGURATION_FES()
    {
        return MAC_CONFIGURATION & (1u << 14u);
    }

    /**
     * Set MAC_CONFIGURATION's FES bit.
     */
    inline void set_MAC_CONFIGURATION_FES()
    {
        MAC_CONFIGURATION |= 1u << 14u;
    }

    /**
     * Clear MAC_CONFIGURATION's FES bit.
     */
    inline void clear_MAC_CONFIGURATION_FES()
    {
        MAC_CONFIGURATION &= ~(1u << 14u);
    }

    /**
     * Toggle MAC_CONFIGURATION's FES bit.
     */
    inline void toggle_MAC_CONFIGURATION_FES()
    {
        MAC_CONFIGURATION ^= 1u << 14u;
    }

    /**
     * Get MAC_CONFIGURATION's DO bit.
     */
    bool get_MAC_CONFIGURATION_DO()
    {
        return MAC_CONFIGURATION & (1u << 13u);
    }

    /**
     * Set MAC_CONFIGURATION's DO bit.
     */
    inline void set_MAC_CONFIGURATION_DO()
    {
        MAC_CONFIGURATION |= 1u << 13u;
    }

    /**
     * Clear MAC_CONFIGURATION's DO bit.
     */
    inline void clear_MAC_CONFIGURATION_DO()
    {
        MAC_CONFIGURATION &= ~(1u << 13u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DO bit.
     */
    inline void toggle_MAC_CONFIGURATION_DO()
    {
        MAC_CONFIGURATION ^= 1u << 13u;
    }

    /**
     * Get MAC_CONFIGURATION's LM bit.
     */
    bool get_MAC_CONFIGURATION_LM()
    {
        return MAC_CONFIGURATION & (1u << 12u);
    }

    /**
     * Set MAC_CONFIGURATION's LM bit.
     */
    inline void set_MAC_CONFIGURATION_LM()
    {
        MAC_CONFIGURATION |= 1u << 12u;
    }

    /**
     * Clear MAC_CONFIGURATION's LM bit.
     */
    inline void clear_MAC_CONFIGURATION_LM()
    {
        MAC_CONFIGURATION &= ~(1u << 12u);
    }

    /**
     * Toggle MAC_CONFIGURATION's LM bit.
     */
    inline void toggle_MAC_CONFIGURATION_LM()
    {
        MAC_CONFIGURATION ^= 1u << 12u;
    }

    /**
     * Get MAC_CONFIGURATION's DM bit.
     */
    bool get_MAC_CONFIGURATION_DM()
    {
        return MAC_CONFIGURATION & (1u << 11u);
    }

    /**
     * Set MAC_CONFIGURATION's DM bit.
     */
    inline void set_MAC_CONFIGURATION_DM()
    {
        MAC_CONFIGURATION |= 1u << 11u;
    }

    /**
     * Clear MAC_CONFIGURATION's DM bit.
     */
    inline void clear_MAC_CONFIGURATION_DM()
    {
        MAC_CONFIGURATION &= ~(1u << 11u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DM bit.
     */
    inline void toggle_MAC_CONFIGURATION_DM()
    {
        MAC_CONFIGURATION ^= 1u << 11u;
    }

    /**
     * Get MAC_CONFIGURATION's IPC bit.
     */
    bool get_MAC_CONFIGURATION_IPC()
    {
        return MAC_CONFIGURATION & (1u << 10u);
    }

    /**
     * Set MAC_CONFIGURATION's IPC bit.
     */
    inline void set_MAC_CONFIGURATION_IPC()
    {
        MAC_CONFIGURATION |= 1u << 10u;
    }

    /**
     * Clear MAC_CONFIGURATION's IPC bit.
     */
    inline void clear_MAC_CONFIGURATION_IPC()
    {
        MAC_CONFIGURATION &= ~(1u << 10u);
    }

    /**
     * Toggle MAC_CONFIGURATION's IPC bit.
     */
    inline void toggle_MAC_CONFIGURATION_IPC()
    {
        MAC_CONFIGURATION ^= 1u << 10u;
    }

    /**
     * Get MAC_CONFIGURATION's DR bit.
     */
    bool get_MAC_CONFIGURATION_DR()
    {
        return MAC_CONFIGURATION & (1u << 9u);
    }

    /**
     * Set MAC_CONFIGURATION's DR bit.
     */
    inline void set_MAC_CONFIGURATION_DR()
    {
        MAC_CONFIGURATION |= 1u << 9u;
    }

    /**
     * Clear MAC_CONFIGURATION's DR bit.
     */
    inline void clear_MAC_CONFIGURATION_DR()
    {
        MAC_CONFIGURATION &= ~(1u << 9u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DR bit.
     */
    inline void toggle_MAC_CONFIGURATION_DR()
    {
        MAC_CONFIGURATION ^= 1u << 9u;
    }

    /**
     * Get MAC_CONFIGURATION's ACS bit.
     */
    bool get_MAC_CONFIGURATION_ACS()
    {
        return MAC_CONFIGURATION & (1u << 7u);
    }

    /**
     * Set MAC_CONFIGURATION's ACS bit.
     */
    inline void set_MAC_CONFIGURATION_ACS()
    {
        MAC_CONFIGURATION |= 1u << 7u;
    }

    /**
     * Clear MAC_CONFIGURATION's ACS bit.
     */
    inline void clear_MAC_CONFIGURATION_ACS()
    {
        MAC_CONFIGURATION &= ~(1u << 7u);
    }

    /**
     * Toggle MAC_CONFIGURATION's ACS bit.
     */
    inline void toggle_MAC_CONFIGURATION_ACS()
    {
        MAC_CONFIGURATION ^= 1u << 7u;
    }

    /**
     * Get MAC_CONFIGURATION's BL field.
     */
    uint8_t get_MAC_CONFIGURATION_BL()
    {
        return (MAC_CONFIGURATION >> 5u) & 0b11u;
    }

    /**
     * Set MAC_CONFIGURATION's BL field.
     */
    inline void set_MAC_CONFIGURATION_BL(uint8_t value)
    {
        uint32_t curr = MAC_CONFIGURATION;

        curr &= ~(0b11u << 5u);
        curr |= (value & 0b11u) << 5u;

        MAC_CONFIGURATION = curr;
    }

    /**
     * Get MAC_CONFIGURATION's DC bit.
     */
    bool get_MAC_CONFIGURATION_DC()
    {
        return MAC_CONFIGURATION & (1u << 4u);
    }

    /**
     * Set MAC_CONFIGURATION's DC bit.
     */
    inline void set_MAC_CONFIGURATION_DC()
    {
        MAC_CONFIGURATION |= 1u << 4u;
    }

    /**
     * Clear MAC_CONFIGURATION's DC bit.
     */
    inline void clear_MAC_CONFIGURATION_DC()
    {
        MAC_CONFIGURATION &= ~(1u << 4u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DC bit.
     */
    inline void toggle_MAC_CONFIGURATION_DC()
    {
        MAC_CONFIGURATION ^= 1u << 4u;
    }

    /**
     * Get MAC_CONFIGURATION's TE bit.
     */
    bool get_MAC_CONFIGURATION_TE()
    {
        return MAC_CONFIGURATION & (1u << 3u);
    }

    /**
     * Set MAC_CONFIGURATION's TE bit.
     */
    inline void set_MAC_CONFIGURATION_TE()
    {
        MAC_CONFIGURATION |= 1u << 3u;
    }

    /**
     * Clear MAC_CONFIGURATION's TE bit.
     */
    inline void clear_MAC_CONFIGURATION_TE()
    {
        MAC_CONFIGURATION &= ~(1u << 3u);
    }

    /**
     * Toggle MAC_CONFIGURATION's TE bit.
     */
    inline void toggle_MAC_CONFIGURATION_TE()
    {
        MAC_CONFIGURATION ^= 1u << 3u;
    }

    /**
     * Get MAC_CONFIGURATION's RE bit.
     */
    bool get_MAC_CONFIGURATION_RE()
    {
        return MAC_CONFIGURATION & (1u << 2u);
    }

    /**
     * Set MAC_CONFIGURATION's RE bit.
     */
    inline void set_MAC_CONFIGURATION_RE()
    {
        MAC_CONFIGURATION |= 1u << 2u;
    }

    /**
     * Clear MAC_CONFIGURATION's RE bit.
     */
    inline void clear_MAC_CONFIGURATION_RE()
    {
        MAC_CONFIGURATION &= ~(1u << 2u);
    }

    /**
     * Toggle MAC_CONFIGURATION's RE bit.
     */
    inline void toggle_MAC_CONFIGURATION_RE()
    {
        MAC_CONFIGURATION ^= 1u << 2u;
    }

    /**
     * Get MAC_CONFIGURATION's PRELEN field.
     */
    uint8_t get_MAC_CONFIGURATION_PRELEN()
    {
        return (MAC_CONFIGURATION >> 0u) & 0b11u;
    }

    /**
     * Set MAC_CONFIGURATION's PRELEN field.
     */
    inline void set_MAC_CONFIGURATION_PRELEN(uint8_t value)
    {
        uint32_t curr = MAC_CONFIGURATION;

        curr &= ~(0b11u << 0u);
        curr |= (value & 0b11u) << 0u;

        MAC_CONFIGURATION = curr;
    }

    /**
     * Get MAC_FRAME_FILTER's RA bit.
     */
    bool get_MAC_FRAME_FILTER_RA()
    {
        return MAC_FRAME_FILTER & (1u << 31u);
    }

    /**
     * Set MAC_FRAME_FILTER's RA bit.
     */
    inline void set_MAC_FRAME_FILTER_RA()
    {
        MAC_FRAME_FILTER |= 1u << 31u;
    }

    /**
     * Clear MAC_FRAME_FILTER's RA bit.
     */
    inline void clear_MAC_FRAME_FILTER_RA()
    {
        MAC_FRAME_FILTER &= ~(1u << 31u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's RA bit.
     */
    inline void toggle_MAC_FRAME_FILTER_RA()
    {
        MAC_FRAME_FILTER ^= 1u << 31u;
    }

    /**
     * Get MAC_FRAME_FILTER's DNTU bit.
     */
    bool get_MAC_FRAME_FILTER_DNTU()
    {
        return MAC_FRAME_FILTER & (1u << 21u);
    }

    /**
     * Get MAC_FRAME_FILTER's IPFE bit.
     */
    bool get_MAC_FRAME_FILTER_IPFE()
    {
        return MAC_FRAME_FILTER & (1u << 20u);
    }

    /**
     * Get MAC_FRAME_FILTER's VTFE bit.
     */
    bool get_MAC_FRAME_FILTER_VTFE()
    {
        return MAC_FRAME_FILTER & (1u << 16u);
    }

    /**
     * Set MAC_FRAME_FILTER's VTFE bit.
     */
    inline void set_MAC_FRAME_FILTER_VTFE()
    {
        MAC_FRAME_FILTER |= 1u << 16u;
    }

    /**
     * Clear MAC_FRAME_FILTER's VTFE bit.
     */
    inline void clear_MAC_FRAME_FILTER_VTFE()
    {
        MAC_FRAME_FILTER &= ~(1u << 16u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's VTFE bit.
     */
    inline void toggle_MAC_FRAME_FILTER_VTFE()
    {
        MAC_FRAME_FILTER ^= 1u << 16u;
    }

    /**
     * Get MAC_FRAME_FILTER's HPF bit.
     */
    bool get_MAC_FRAME_FILTER_HPF()
    {
        return MAC_FRAME_FILTER & (1u << 10u);
    }

    /**
     * Set MAC_FRAME_FILTER's HPF bit.
     */
    inline void set_MAC_FRAME_FILTER_HPF()
    {
        MAC_FRAME_FILTER |= 1u << 10u;
    }

    /**
     * Clear MAC_FRAME_FILTER's HPF bit.
     */
    inline void clear_MAC_FRAME_FILTER_HPF()
    {
        MAC_FRAME_FILTER &= ~(1u << 10u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's HPF bit.
     */
    inline void toggle_MAC_FRAME_FILTER_HPF()
    {
        MAC_FRAME_FILTER ^= 1u << 10u;
    }

    /**
     * Get MAC_FRAME_FILTER's SAF bit.
     */
    bool get_MAC_FRAME_FILTER_SAF()
    {
        return MAC_FRAME_FILTER & (1u << 9u);
    }

    /**
     * Set MAC_FRAME_FILTER's SAF bit.
     */
    inline void set_MAC_FRAME_FILTER_SAF()
    {
        MAC_FRAME_FILTER |= 1u << 9u;
    }

    /**
     * Clear MAC_FRAME_FILTER's SAF bit.
     */
    inline void clear_MAC_FRAME_FILTER_SAF()
    {
        MAC_FRAME_FILTER &= ~(1u << 9u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's SAF bit.
     */
    inline void toggle_MAC_FRAME_FILTER_SAF()
    {
        MAC_FRAME_FILTER ^= 1u << 9u;
    }

    /**
     * Get MAC_FRAME_FILTER's SAIF bit.
     */
    bool get_MAC_FRAME_FILTER_SAIF()
    {
        return MAC_FRAME_FILTER & (1u << 8u);
    }

    /**
     * Set MAC_FRAME_FILTER's SAIF bit.
     */
    inline void set_MAC_FRAME_FILTER_SAIF()
    {
        MAC_FRAME_FILTER |= 1u << 8u;
    }

    /**
     * Clear MAC_FRAME_FILTER's SAIF bit.
     */
    inline void clear_MAC_FRAME_FILTER_SAIF()
    {
        MAC_FRAME_FILTER &= ~(1u << 8u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's SAIF bit.
     */
    inline void toggle_MAC_FRAME_FILTER_SAIF()
    {
        MAC_FRAME_FILTER ^= 1u << 8u;
    }

    /**
     * Get MAC_FRAME_FILTER's PCF field.
     */
    uint8_t get_MAC_FRAME_FILTER_PCF()
    {
        return (MAC_FRAME_FILTER >> 6u) & 0b11u;
    }

    /**
     * Set MAC_FRAME_FILTER's PCF field.
     */
    inline void set_MAC_FRAME_FILTER_PCF(uint8_t value)
    {
        uint32_t curr = MAC_FRAME_FILTER;

        curr &= ~(0b11u << 6u);
        curr |= (value & 0b11u) << 6u;

        MAC_FRAME_FILTER = curr;
    }

    /**
     * Get MAC_FRAME_FILTER's DBF bit.
     */
    bool get_MAC_FRAME_FILTER_DBF()
    {
        return MAC_FRAME_FILTER & (1u << 5u);
    }

    /**
     * Set MAC_FRAME_FILTER's DBF bit.
     */
    inline void set_MAC_FRAME_FILTER_DBF()
    {
        MAC_FRAME_FILTER |= 1u << 5u;
    }

    /**
     * Clear MAC_FRAME_FILTER's DBF bit.
     */
    inline void clear_MAC_FRAME_FILTER_DBF()
    {
        MAC_FRAME_FILTER &= ~(1u << 5u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's DBF bit.
     */
    inline void toggle_MAC_FRAME_FILTER_DBF()
    {
        MAC_FRAME_FILTER ^= 1u << 5u;
    }

    /**
     * Get MAC_FRAME_FILTER's PM bit.
     */
    bool get_MAC_FRAME_FILTER_PM()
    {
        return MAC_FRAME_FILTER & (1u << 4u);
    }

    /**
     * Set MAC_FRAME_FILTER's PM bit.
     */
    inline void set_MAC_FRAME_FILTER_PM()
    {
        MAC_FRAME_FILTER |= 1u << 4u;
    }

    /**
     * Clear MAC_FRAME_FILTER's PM bit.
     */
    inline void clear_MAC_FRAME_FILTER_PM()
    {
        MAC_FRAME_FILTER &= ~(1u << 4u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's PM bit.
     */
    inline void toggle_MAC_FRAME_FILTER_PM()
    {
        MAC_FRAME_FILTER ^= 1u << 4u;
    }

    /**
     * Get MAC_FRAME_FILTER's DAIF bit.
     */
    bool get_MAC_FRAME_FILTER_DAIF()
    {
        return MAC_FRAME_FILTER & (1u << 3u);
    }

    /**
     * Set MAC_FRAME_FILTER's DAIF bit.
     */
    inline void set_MAC_FRAME_FILTER_DAIF()
    {
        MAC_FRAME_FILTER |= 1u << 3u;
    }

    /**
     * Clear MAC_FRAME_FILTER's DAIF bit.
     */
    inline void clear_MAC_FRAME_FILTER_DAIF()
    {
        MAC_FRAME_FILTER &= ~(1u << 3u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's DAIF bit.
     */
    inline void toggle_MAC_FRAME_FILTER_DAIF()
    {
        MAC_FRAME_FILTER ^= 1u << 3u;
    }

    /**
     * Get MAC_FRAME_FILTER's HMC bit.
     */
    bool get_MAC_FRAME_FILTER_HMC()
    {
        return MAC_FRAME_FILTER & (1u << 2u);
    }

    /**
     * Set MAC_FRAME_FILTER's HMC bit.
     */
    inline void set_MAC_FRAME_FILTER_HMC()
    {
        MAC_FRAME_FILTER |= 1u << 2u;
    }

    /**
     * Clear MAC_FRAME_FILTER's HMC bit.
     */
    inline void clear_MAC_FRAME_FILTER_HMC()
    {
        MAC_FRAME_FILTER &= ~(1u << 2u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's HMC bit.
     */
    inline void toggle_MAC_FRAME_FILTER_HMC()
    {
        MAC_FRAME_FILTER ^= 1u << 2u;
    }

    /**
     * Get MAC_FRAME_FILTER's HUC bit.
     */
    bool get_MAC_FRAME_FILTER_HUC()
    {
        return MAC_FRAME_FILTER & (1u << 1u);
    }

    /**
     * Set MAC_FRAME_FILTER's HUC bit.
     */
    inline void set_MAC_FRAME_FILTER_HUC()
    {
        MAC_FRAME_FILTER |= 1u << 1u;
    }

    /**
     * Clear MAC_FRAME_FILTER's HUC bit.
     */
    inline void clear_MAC_FRAME_FILTER_HUC()
    {
        MAC_FRAME_FILTER &= ~(1u << 1u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's HUC bit.
     */
    inline void toggle_MAC_FRAME_FILTER_HUC()
    {
        MAC_FRAME_FILTER ^= 1u << 1u;
    }

    /**
     * Get MAC_FRAME_FILTER's PR bit.
     */
    bool get_MAC_FRAME_FILTER_PR()
    {
        return MAC_FRAME_FILTER & (1u << 0u);
    }

    /**
     * Set MAC_FRAME_FILTER's PR bit.
     */
    inline void set_MAC_FRAME_FILTER_PR()
    {
        MAC_FRAME_FILTER |= 1u << 0u;
    }

    /**
     * Clear MAC_FRAME_FILTER's PR bit.
     */
    inline void clear_MAC_FRAME_FILTER_PR()
    {
        MAC_FRAME_FILTER &= ~(1u << 0u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's PR bit.
     */
    inline void toggle_MAC_FRAME_FILTER_PR()
    {
        MAC_FRAME_FILTER ^= 1u << 0u;
    }

    /**
     * Get HASH_TABLE_HIGH's HTH field.
     */
    uint32_t get_HASH_TABLE_HIGH_HTH()
    {
        return (HASH_TABLE_HIGH >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set HASH_TABLE_HIGH's HTH field.
     */
    inline void set_HASH_TABLE_HIGH_HTH(uint32_t value)
    {
        uint32_t curr = HASH_TABLE_HIGH;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        HASH_TABLE_HIGH = curr;
    }

    /**
     * Get HASH_TABLE_LOW's HTL field.
     */
    uint32_t get_HASH_TABLE_LOW_HTL()
    {
        return (HASH_TABLE_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set HASH_TABLE_LOW's HTL field.
     */
    inline void set_HASH_TABLE_LOW_HTL(uint32_t value)
    {
        uint32_t curr = HASH_TABLE_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        HASH_TABLE_LOW = curr;
    }

    /**
     * Get GMII_ADDRESS's PA field.
     */
    uint8_t get_GMII_ADDRESS_PA()
    {
        return (GMII_ADDRESS >> 11u) & 0b11111u;
    }

    /**
     * Set GMII_ADDRESS's PA field.
     */
    inline void set_GMII_ADDRESS_PA(uint8_t value)
    {
        uint32_t curr = GMII_ADDRESS;

        curr &= ~(0b11111u << 11u);
        curr |= (value & 0b11111u) << 11u;

        GMII_ADDRESS = curr;
    }

    /**
     * Get GMII_ADDRESS's MR field.
     */
    uint8_t get_GMII_ADDRESS_MR()
    {
        return (GMII_ADDRESS >> 6u) & 0b11111u;
    }

    /**
     * Set GMII_ADDRESS's MR field.
     */
    inline void set_GMII_ADDRESS_MR(uint8_t value)
    {
        uint32_t curr = GMII_ADDRESS;

        curr &= ~(0b11111u << 6u);
        curr |= (value & 0b11111u) << 6u;

        GMII_ADDRESS = curr;
    }

    /**
     * Get GMII_ADDRESS's CR field.
     */
    uint8_t get_GMII_ADDRESS_CR()
    {
        return (GMII_ADDRESS >> 2u) & 0b1111u;
    }

    /**
     * Set GMII_ADDRESS's CR field.
     */
    inline void set_GMII_ADDRESS_CR(uint8_t value)
    {
        uint32_t curr = GMII_ADDRESS;

        curr &= ~(0b1111u << 2u);
        curr |= (value & 0b1111u) << 2u;

        GMII_ADDRESS = curr;
    }

    /**
     * Get GMII_ADDRESS's MW bit.
     */
    bool get_GMII_ADDRESS_MW()
    {
        return GMII_ADDRESS & (1u << 1u);
    }

    /**
     * Set GMII_ADDRESS's MW bit.
     */
    inline void set_GMII_ADDRESS_MW()
    {
        GMII_ADDRESS |= 1u << 1u;
    }

    /**
     * Clear GMII_ADDRESS's MW bit.
     */
    inline void clear_GMII_ADDRESS_MW()
    {
        GMII_ADDRESS &= ~(1u << 1u);
    }

    /**
     * Toggle GMII_ADDRESS's MW bit.
     */
    inline void toggle_GMII_ADDRESS_MW()
    {
        GMII_ADDRESS ^= 1u << 1u;
    }

    /**
     * Get GMII_ADDRESS's MB bit.
     */
    bool get_GMII_ADDRESS_MB()
    {
        return GMII_ADDRESS & (1u << 0u);
    }

    /**
     * Set GMII_ADDRESS's MB bit.
     */
    inline void set_GMII_ADDRESS_MB()
    {
        GMII_ADDRESS |= 1u << 0u;
    }

    /**
     * Clear GMII_ADDRESS's MB bit.
     */
    inline void clear_GMII_ADDRESS_MB()
    {
        GMII_ADDRESS &= ~(1u << 0u);
    }

    /**
     * Toggle GMII_ADDRESS's MB bit.
     */
    inline void toggle_GMII_ADDRESS_MB()
    {
        GMII_ADDRESS ^= 1u << 0u;
    }

    /**
     * Get GMII_DATA's MD field.
     */
    uint16_t get_GMII_DATA_MD()
    {
        return (GMII_DATA >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GMII_DATA's MD field.
     */
    inline void set_GMII_DATA_MD(uint16_t value)
    {
        uint32_t curr = GMII_DATA;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GMII_DATA = curr;
    }

    /**
     * Get FLOW_CONTROL's PT field.
     */
    uint16_t get_FLOW_CONTROL_PT()
    {
        return (FLOW_CONTROL >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set FLOW_CONTROL's PT field.
     */
    inline void set_FLOW_CONTROL_PT(uint16_t value)
    {
        uint32_t curr = FLOW_CONTROL;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        FLOW_CONTROL = curr;
    }

    /**
     * Get FLOW_CONTROL's DZPQ bit.
     */
    bool get_FLOW_CONTROL_DZPQ()
    {
        return FLOW_CONTROL & (1u << 7u);
    }

    /**
     * Set FLOW_CONTROL's DZPQ bit.
     */
    inline void set_FLOW_CONTROL_DZPQ()
    {
        FLOW_CONTROL |= 1u << 7u;
    }

    /**
     * Clear FLOW_CONTROL's DZPQ bit.
     */
    inline void clear_FLOW_CONTROL_DZPQ()
    {
        FLOW_CONTROL &= ~(1u << 7u);
    }

    /**
     * Toggle FLOW_CONTROL's DZPQ bit.
     */
    inline void toggle_FLOW_CONTROL_DZPQ()
    {
        FLOW_CONTROL ^= 1u << 7u;
    }

    /**
     * Get FLOW_CONTROL's PLT field.
     */
    uint8_t get_FLOW_CONTROL_PLT()
    {
        return (FLOW_CONTROL >> 4u) & 0b11u;
    }

    /**
     * Set FLOW_CONTROL's PLT field.
     */
    inline void set_FLOW_CONTROL_PLT(uint8_t value)
    {
        uint32_t curr = FLOW_CONTROL;

        curr &= ~(0b11u << 4u);
        curr |= (value & 0b11u) << 4u;

        FLOW_CONTROL = curr;
    }

    /**
     * Get FLOW_CONTROL's UP bit.
     */
    bool get_FLOW_CONTROL_UP()
    {
        return FLOW_CONTROL & (1u << 3u);
    }

    /**
     * Set FLOW_CONTROL's UP bit.
     */
    inline void set_FLOW_CONTROL_UP()
    {
        FLOW_CONTROL |= 1u << 3u;
    }

    /**
     * Clear FLOW_CONTROL's UP bit.
     */
    inline void clear_FLOW_CONTROL_UP()
    {
        FLOW_CONTROL &= ~(1u << 3u);
    }

    /**
     * Toggle FLOW_CONTROL's UP bit.
     */
    inline void toggle_FLOW_CONTROL_UP()
    {
        FLOW_CONTROL ^= 1u << 3u;
    }

    /**
     * Get FLOW_CONTROL's RFE bit.
     */
    bool get_FLOW_CONTROL_RFE()
    {
        return FLOW_CONTROL & (1u << 2u);
    }

    /**
     * Set FLOW_CONTROL's RFE bit.
     */
    inline void set_FLOW_CONTROL_RFE()
    {
        FLOW_CONTROL |= 1u << 2u;
    }

    /**
     * Clear FLOW_CONTROL's RFE bit.
     */
    inline void clear_FLOW_CONTROL_RFE()
    {
        FLOW_CONTROL &= ~(1u << 2u);
    }

    /**
     * Toggle FLOW_CONTROL's RFE bit.
     */
    inline void toggle_FLOW_CONTROL_RFE()
    {
        FLOW_CONTROL ^= 1u << 2u;
    }

    /**
     * Get FLOW_CONTROL's TFE bit.
     */
    bool get_FLOW_CONTROL_TFE()
    {
        return FLOW_CONTROL & (1u << 1u);
    }

    /**
     * Set FLOW_CONTROL's TFE bit.
     */
    inline void set_FLOW_CONTROL_TFE()
    {
        FLOW_CONTROL |= 1u << 1u;
    }

    /**
     * Clear FLOW_CONTROL's TFE bit.
     */
    inline void clear_FLOW_CONTROL_TFE()
    {
        FLOW_CONTROL &= ~(1u << 1u);
    }

    /**
     * Toggle FLOW_CONTROL's TFE bit.
     */
    inline void toggle_FLOW_CONTROL_TFE()
    {
        FLOW_CONTROL ^= 1u << 1u;
    }

    /**
     * Get FLOW_CONTROL's FCA_BPA bit.
     */
    bool get_FLOW_CONTROL_FCA_BPA()
    {
        return FLOW_CONTROL & (1u << 0u);
    }

    /**
     * Set FLOW_CONTROL's FCA_BPA bit.
     */
    inline void set_FLOW_CONTROL_FCA_BPA()
    {
        FLOW_CONTROL |= 1u << 0u;
    }

    /**
     * Clear FLOW_CONTROL's FCA_BPA bit.
     */
    inline void clear_FLOW_CONTROL_FCA_BPA()
    {
        FLOW_CONTROL &= ~(1u << 0u);
    }

    /**
     * Toggle FLOW_CONTROL's FCA_BPA bit.
     */
    inline void toggle_FLOW_CONTROL_FCA_BPA()
    {
        FLOW_CONTROL ^= 1u << 0u;
    }

    /**
     * Get VLAN_TAG's VTHM bit.
     */
    bool get_VLAN_TAG_VTHM()
    {
        return VLAN_TAG & (1u << 19u);
    }

    /**
     * Get VLAN_TAG's ESVL bit.
     */
    bool get_VLAN_TAG_ESVL()
    {
        return VLAN_TAG & (1u << 18u);
    }

    /**
     * Set VLAN_TAG's ESVL bit.
     */
    inline void set_VLAN_TAG_ESVL()
    {
        VLAN_TAG |= 1u << 18u;
    }

    /**
     * Clear VLAN_TAG's ESVL bit.
     */
    inline void clear_VLAN_TAG_ESVL()
    {
        VLAN_TAG &= ~(1u << 18u);
    }

    /**
     * Toggle VLAN_TAG's ESVL bit.
     */
    inline void toggle_VLAN_TAG_ESVL()
    {
        VLAN_TAG ^= 1u << 18u;
    }

    /**
     * Get VLAN_TAG's VTIM bit.
     */
    bool get_VLAN_TAG_VTIM()
    {
        return VLAN_TAG & (1u << 17u);
    }

    /**
     * Set VLAN_TAG's VTIM bit.
     */
    inline void set_VLAN_TAG_VTIM()
    {
        VLAN_TAG |= 1u << 17u;
    }

    /**
     * Clear VLAN_TAG's VTIM bit.
     */
    inline void clear_VLAN_TAG_VTIM()
    {
        VLAN_TAG &= ~(1u << 17u);
    }

    /**
     * Toggle VLAN_TAG's VTIM bit.
     */
    inline void toggle_VLAN_TAG_VTIM()
    {
        VLAN_TAG ^= 1u << 17u;
    }

    /**
     * Get VLAN_TAG's ETV bit.
     */
    bool get_VLAN_TAG_ETV()
    {
        return VLAN_TAG & (1u << 16u);
    }

    /**
     * Set VLAN_TAG's ETV bit.
     */
    inline void set_VLAN_TAG_ETV()
    {
        VLAN_TAG |= 1u << 16u;
    }

    /**
     * Clear VLAN_TAG's ETV bit.
     */
    inline void clear_VLAN_TAG_ETV()
    {
        VLAN_TAG &= ~(1u << 16u);
    }

    /**
     * Toggle VLAN_TAG's ETV bit.
     */
    inline void toggle_VLAN_TAG_ETV()
    {
        VLAN_TAG ^= 1u << 16u;
    }

    /**
     * Get VLAN_TAG's VL field.
     */
    uint16_t get_VLAN_TAG_VL()
    {
        return (VLAN_TAG >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set VLAN_TAG's VL field.
     */
    inline void set_VLAN_TAG_VL(uint16_t value)
    {
        uint32_t curr = VLAN_TAG;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        VLAN_TAG = curr;
    }

    /**
     * Get VERSION's USERVER field.
     */
    uint8_t get_VERSION_USERVER()
    {
        return (VERSION >> 8u) & 0b11111111u;
    }

    /**
     * Get VERSION's SNPSVER field.
     */
    uint8_t get_VERSION_SNPSVER()
    {
        return (VERSION >> 0u) & 0b11111111u;
    }

    /**
     * Get DEBUG's TXSTSFSTS bit.
     */
    bool get_DEBUG_TXSTSFSTS()
    {
        return DEBUG & (1u << 25u);
    }

    /**
     * Get DEBUG's TXFSTS bit.
     */
    bool get_DEBUG_TXFSTS()
    {
        return DEBUG & (1u << 24u);
    }

    /**
     * Get DEBUG's TWCSTS bit.
     */
    bool get_DEBUG_TWCSTS()
    {
        return DEBUG & (1u << 22u);
    }

    /**
     * Get DEBUG's TRCSTS field.
     */
    uint8_t get_DEBUG_TRCSTS()
    {
        return (DEBUG >> 20u) & 0b11u;
    }

    /**
     * Get DEBUG's TXPAUSED bit.
     */
    bool get_DEBUG_TXPAUSED()
    {
        return DEBUG & (1u << 19u);
    }

    /**
     * Get DEBUG's TFCSTS field.
     */
    uint8_t get_DEBUG_TFCSTS()
    {
        return (DEBUG >> 17u) & 0b11u;
    }

    /**
     * Get DEBUG's TPESTS bit.
     */
    bool get_DEBUG_TPESTS()
    {
        return DEBUG & (1u << 16u);
    }

    /**
     * Get DEBUG's RXFSTS field.
     */
    uint8_t get_DEBUG_RXFSTS()
    {
        return (DEBUG >> 8u) & 0b11u;
    }

    /**
     * Get DEBUG's RRCSTS field.
     */
    uint8_t get_DEBUG_RRCSTS()
    {
        return (DEBUG >> 5u) & 0b11u;
    }

    /**
     * Get DEBUG's RWCSTS bit.
     */
    bool get_DEBUG_RWCSTS()
    {
        return DEBUG & (1u << 4u);
    }

    /**
     * Get DEBUG's RFCFCSTS field.
     */
    uint8_t get_DEBUG_RFCFCSTS()
    {
        return (DEBUG >> 1u) & 0b11u;
    }

    /**
     * Get DEBUG's RPESTS bit.
     */
    bool get_DEBUG_RPESTS()
    {
        return DEBUG & (1u << 0u);
    }

    /**
     * Get REMOTE_WAKE_UP_FRAME_FILTER's WKUPFRMFTR field.
     */
    uint32_t get_REMOTE_WAKE_UP_FRAME_FILTER_WKUPFRMFTR()
    {
        return (REMOTE_WAKE_UP_FRAME_FILTER >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set REMOTE_WAKE_UP_FRAME_FILTER's WKUPFRMFTR field.
     */
    inline void set_REMOTE_WAKE_UP_FRAME_FILTER_WKUPFRMFTR(uint32_t value)
    {
        uint32_t curr = REMOTE_WAKE_UP_FRAME_FILTER;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        REMOTE_WAKE_UP_FRAME_FILTER = curr;
    }

    /**
     * Get PMT_CONTROL_STATUS's RWKFILTRST bit.
     */
    bool get_PMT_CONTROL_STATUS_RWKFILTRST()
    {
        return PMT_CONTROL_STATUS & (1u << 31u);
    }

    /**
     * Set PMT_CONTROL_STATUS's RWKFILTRST bit.
     */
    inline void set_PMT_CONTROL_STATUS_RWKFILTRST()
    {
        PMT_CONTROL_STATUS |= 1u << 31u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's RWKFILTRST bit.
     */
    inline void clear_PMT_CONTROL_STATUS_RWKFILTRST()
    {
        PMT_CONTROL_STATUS &= ~(1u << 31u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's RWKFILTRST bit.
     */
    inline void toggle_PMT_CONTROL_STATUS_RWKFILTRST()
    {
        PMT_CONTROL_STATUS ^= 1u << 31u;
    }

    /**
     * Get PMT_CONTROL_STATUS's GLBLUCAST bit.
     */
    bool get_PMT_CONTROL_STATUS_GLBLUCAST()
    {
        return PMT_CONTROL_STATUS & (1u << 9u);
    }

    /**
     * Set PMT_CONTROL_STATUS's GLBLUCAST bit.
     */
    inline void set_PMT_CONTROL_STATUS_GLBLUCAST()
    {
        PMT_CONTROL_STATUS |= 1u << 9u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's GLBLUCAST bit.
     */
    inline void clear_PMT_CONTROL_STATUS_GLBLUCAST()
    {
        PMT_CONTROL_STATUS &= ~(1u << 9u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's GLBLUCAST bit.
     */
    inline void toggle_PMT_CONTROL_STATUS_GLBLUCAST()
    {
        PMT_CONTROL_STATUS ^= 1u << 9u;
    }

    /**
     * Get PMT_CONTROL_STATUS's RWKPRCVD bit.
     */
    bool get_PMT_CONTROL_STATUS_RWKPRCVD()
    {
        return PMT_CONTROL_STATUS & (1u << 6u);
    }

    /**
     * Get PMT_CONTROL_STATUS's MGKPRCVD bit.
     */
    bool get_PMT_CONTROL_STATUS_MGKPRCVD()
    {
        return PMT_CONTROL_STATUS & (1u << 5u);
    }

    /**
     * Get PMT_CONTROL_STATUS's RWKPKTEN bit.
     */
    bool get_PMT_CONTROL_STATUS_RWKPKTEN()
    {
        return PMT_CONTROL_STATUS & (1u << 2u);
    }

    /**
     * Set PMT_CONTROL_STATUS's RWKPKTEN bit.
     */
    inline void set_PMT_CONTROL_STATUS_RWKPKTEN()
    {
        PMT_CONTROL_STATUS |= 1u << 2u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's RWKPKTEN bit.
     */
    inline void clear_PMT_CONTROL_STATUS_RWKPKTEN()
    {
        PMT_CONTROL_STATUS &= ~(1u << 2u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's RWKPKTEN bit.
     */
    inline void toggle_PMT_CONTROL_STATUS_RWKPKTEN()
    {
        PMT_CONTROL_STATUS ^= 1u << 2u;
    }

    /**
     * Get PMT_CONTROL_STATUS's MGKPKTEN bit.
     */
    bool get_PMT_CONTROL_STATUS_MGKPKTEN()
    {
        return PMT_CONTROL_STATUS & (1u << 1u);
    }

    /**
     * Set PMT_CONTROL_STATUS's MGKPKTEN bit.
     */
    inline void set_PMT_CONTROL_STATUS_MGKPKTEN()
    {
        PMT_CONTROL_STATUS |= 1u << 1u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's MGKPKTEN bit.
     */
    inline void clear_PMT_CONTROL_STATUS_MGKPKTEN()
    {
        PMT_CONTROL_STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's MGKPKTEN bit.
     */
    inline void toggle_PMT_CONTROL_STATUS_MGKPKTEN()
    {
        PMT_CONTROL_STATUS ^= 1u << 1u;
    }

    /**
     * Get PMT_CONTROL_STATUS's PWRDWN bit.
     */
    bool get_PMT_CONTROL_STATUS_PWRDWN()
    {
        return PMT_CONTROL_STATUS & (1u << 0u);
    }

    /**
     * Set PMT_CONTROL_STATUS's PWRDWN bit.
     */
    inline void set_PMT_CONTROL_STATUS_PWRDWN()
    {
        PMT_CONTROL_STATUS |= 1u << 0u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's PWRDWN bit.
     */
    inline void clear_PMT_CONTROL_STATUS_PWRDWN()
    {
        PMT_CONTROL_STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's PWRDWN bit.
     */
    inline void toggle_PMT_CONTROL_STATUS_PWRDWN()
    {
        PMT_CONTROL_STATUS ^= 1u << 0u;
    }

    /**
     * Get INTERRUPT_STATUS's TSIS bit.
     */
    bool get_INTERRUPT_STATUS_TSIS()
    {
        return INTERRUPT_STATUS & (1u << 9u);
    }

    /**
     * Get INTERRUPT_STATUS's MMCRXIPIS bit.
     */
    bool get_INTERRUPT_STATUS_MMCRXIPIS()
    {
        return INTERRUPT_STATUS & (1u << 7u);
    }

    /**
     * Get INTERRUPT_STATUS's MMCTXIS bit.
     */
    bool get_INTERRUPT_STATUS_MMCTXIS()
    {
        return INTERRUPT_STATUS & (1u << 6u);
    }

    /**
     * Get INTERRUPT_STATUS's MMCRXIS bit.
     */
    bool get_INTERRUPT_STATUS_MMCRXIS()
    {
        return INTERRUPT_STATUS & (1u << 5u);
    }

    /**
     * Get INTERRUPT_STATUS's MMCIS bit.
     */
    bool get_INTERRUPT_STATUS_MMCIS()
    {
        return INTERRUPT_STATUS & (1u << 4u);
    }

    /**
     * Get INTERRUPT_STATUS's PMTIS bit.
     */
    bool get_INTERRUPT_STATUS_PMTIS()
    {
        return INTERRUPT_STATUS & (1u << 3u);
    }

    /**
     * Get INTERRUPT_MASK's TSIM bit.
     */
    bool get_INTERRUPT_MASK_TSIM()
    {
        return INTERRUPT_MASK & (1u << 9u);
    }

    /**
     * Set INTERRUPT_MASK's TSIM bit.
     */
    inline void set_INTERRUPT_MASK_TSIM()
    {
        INTERRUPT_MASK |= 1u << 9u;
    }

    /**
     * Clear INTERRUPT_MASK's TSIM bit.
     */
    inline void clear_INTERRUPT_MASK_TSIM()
    {
        INTERRUPT_MASK &= ~(1u << 9u);
    }

    /**
     * Toggle INTERRUPT_MASK's TSIM bit.
     */
    inline void toggle_INTERRUPT_MASK_TSIM()
    {
        INTERRUPT_MASK ^= 1u << 9u;
    }

    /**
     * Get INTERRUPT_MASK's PMTIM bit.
     */
    bool get_INTERRUPT_MASK_PMTIM()
    {
        return INTERRUPT_MASK & (1u << 3u);
    }

    /**
     * Set INTERRUPT_MASK's PMTIM bit.
     */
    inline void set_INTERRUPT_MASK_PMTIM()
    {
        INTERRUPT_MASK |= 1u << 3u;
    }

    /**
     * Clear INTERRUPT_MASK's PMTIM bit.
     */
    inline void clear_INTERRUPT_MASK_PMTIM()
    {
        INTERRUPT_MASK &= ~(1u << 3u);
    }

    /**
     * Toggle INTERRUPT_MASK's PMTIM bit.
     */
    inline void toggle_INTERRUPT_MASK_PMTIM()
    {
        INTERRUPT_MASK ^= 1u << 3u;
    }

    /**
     * Get MAC_ADDRESS0_HIGH's AE bit.
     */
    bool get_MAC_ADDRESS0_HIGH_AE()
    {
        return MAC_ADDRESS0_HIGH & (1u << 31u);
    }

    /**
     * Get MAC_ADDRESS0_HIGH's ADDRHI field.
     */
    uint16_t get_MAC_ADDRESS0_HIGH_ADDRHI()
    {
        return (MAC_ADDRESS0_HIGH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MAC_ADDRESS0_HIGH's ADDRHI field.
     */
    inline void set_MAC_ADDRESS0_HIGH_ADDRHI(uint16_t value)
    {
        uint32_t curr = MAC_ADDRESS0_HIGH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MAC_ADDRESS0_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS0_LOW's ADDRLO field.
     */
    uint32_t get_MAC_ADDRESS0_LOW_ADDRLO()
    {
        return (MAC_ADDRESS0_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set MAC_ADDRESS0_LOW's ADDRLO field.
     */
    inline void set_MAC_ADDRESS0_LOW_ADDRLO(uint32_t value)
    {
        uint32_t curr = MAC_ADDRESS0_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        MAC_ADDRESS0_LOW = curr;
    }

    /**
     * Get MAC_ADDRESS1_HIGH's AE bit.
     */
    bool get_MAC_ADDRESS1_HIGH_AE()
    {
        return MAC_ADDRESS1_HIGH & (1u << 31u);
    }

    /**
     * Set MAC_ADDRESS1_HIGH's AE bit.
     */
    inline void set_MAC_ADDRESS1_HIGH_AE()
    {
        MAC_ADDRESS1_HIGH |= 1u << 31u;
    }

    /**
     * Clear MAC_ADDRESS1_HIGH's AE bit.
     */
    inline void clear_MAC_ADDRESS1_HIGH_AE()
    {
        MAC_ADDRESS1_HIGH &= ~(1u << 31u);
    }

    /**
     * Toggle MAC_ADDRESS1_HIGH's AE bit.
     */
    inline void toggle_MAC_ADDRESS1_HIGH_AE()
    {
        MAC_ADDRESS1_HIGH ^= 1u << 31u;
    }

    /**
     * Get MAC_ADDRESS1_HIGH's SA bit.
     */
    bool get_MAC_ADDRESS1_HIGH_SA()
    {
        return MAC_ADDRESS1_HIGH & (1u << 30u);
    }

    /**
     * Set MAC_ADDRESS1_HIGH's SA bit.
     */
    inline void set_MAC_ADDRESS1_HIGH_SA()
    {
        MAC_ADDRESS1_HIGH |= 1u << 30u;
    }

    /**
     * Clear MAC_ADDRESS1_HIGH's SA bit.
     */
    inline void clear_MAC_ADDRESS1_HIGH_SA()
    {
        MAC_ADDRESS1_HIGH &= ~(1u << 30u);
    }

    /**
     * Toggle MAC_ADDRESS1_HIGH's SA bit.
     */
    inline void toggle_MAC_ADDRESS1_HIGH_SA()
    {
        MAC_ADDRESS1_HIGH ^= 1u << 30u;
    }

    /**
     * Get MAC_ADDRESS1_HIGH's MBC field.
     */
    uint8_t get_MAC_ADDRESS1_HIGH_MBC()
    {
        return (MAC_ADDRESS1_HIGH >> 24u) & 0b111111u;
    }

    /**
     * Set MAC_ADDRESS1_HIGH's MBC field.
     */
    inline void set_MAC_ADDRESS1_HIGH_MBC(uint8_t value)
    {
        uint32_t curr = MAC_ADDRESS1_HIGH;

        curr &= ~(0b111111u << 24u);
        curr |= (value & 0b111111u) << 24u;

        MAC_ADDRESS1_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS1_HIGH's ADDRHI field.
     */
    uint16_t get_MAC_ADDRESS1_HIGH_ADDRHI()
    {
        return (MAC_ADDRESS1_HIGH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MAC_ADDRESS1_HIGH's ADDRHI field.
     */
    inline void set_MAC_ADDRESS1_HIGH_ADDRHI(uint16_t value)
    {
        uint32_t curr = MAC_ADDRESS1_HIGH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MAC_ADDRESS1_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS1_LOW's ADDRLO field.
     */
    uint32_t get_MAC_ADDRESS1_LOW_ADDRLO()
    {
        return (MAC_ADDRESS1_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set MAC_ADDRESS1_LOW's ADDRLO field.
     */
    inline void set_MAC_ADDRESS1_LOW_ADDRLO(uint32_t value)
    {
        uint32_t curr = MAC_ADDRESS1_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        MAC_ADDRESS1_LOW = curr;
    }

    /**
     * Get MAC_ADDRESS2_HIGH's AE bit.
     */
    bool get_MAC_ADDRESS2_HIGH_AE()
    {
        return MAC_ADDRESS2_HIGH & (1u << 31u);
    }

    /**
     * Set MAC_ADDRESS2_HIGH's AE bit.
     */
    inline void set_MAC_ADDRESS2_HIGH_AE()
    {
        MAC_ADDRESS2_HIGH |= 1u << 31u;
    }

    /**
     * Clear MAC_ADDRESS2_HIGH's AE bit.
     */
    inline void clear_MAC_ADDRESS2_HIGH_AE()
    {
        MAC_ADDRESS2_HIGH &= ~(1u << 31u);
    }

    /**
     * Toggle MAC_ADDRESS2_HIGH's AE bit.
     */
    inline void toggle_MAC_ADDRESS2_HIGH_AE()
    {
        MAC_ADDRESS2_HIGH ^= 1u << 31u;
    }

    /**
     * Get MAC_ADDRESS2_HIGH's SA bit.
     */
    bool get_MAC_ADDRESS2_HIGH_SA()
    {
        return MAC_ADDRESS2_HIGH & (1u << 30u);
    }

    /**
     * Set MAC_ADDRESS2_HIGH's SA bit.
     */
    inline void set_MAC_ADDRESS2_HIGH_SA()
    {
        MAC_ADDRESS2_HIGH |= 1u << 30u;
    }

    /**
     * Clear MAC_ADDRESS2_HIGH's SA bit.
     */
    inline void clear_MAC_ADDRESS2_HIGH_SA()
    {
        MAC_ADDRESS2_HIGH &= ~(1u << 30u);
    }

    /**
     * Toggle MAC_ADDRESS2_HIGH's SA bit.
     */
    inline void toggle_MAC_ADDRESS2_HIGH_SA()
    {
        MAC_ADDRESS2_HIGH ^= 1u << 30u;
    }

    /**
     * Get MAC_ADDRESS2_HIGH's MBC field.
     */
    uint8_t get_MAC_ADDRESS2_HIGH_MBC()
    {
        return (MAC_ADDRESS2_HIGH >> 24u) & 0b111111u;
    }

    /**
     * Set MAC_ADDRESS2_HIGH's MBC field.
     */
    inline void set_MAC_ADDRESS2_HIGH_MBC(uint8_t value)
    {
        uint32_t curr = MAC_ADDRESS2_HIGH;

        curr &= ~(0b111111u << 24u);
        curr |= (value & 0b111111u) << 24u;

        MAC_ADDRESS2_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS2_HIGH's ADDRHI field.
     */
    uint16_t get_MAC_ADDRESS2_HIGH_ADDRHI()
    {
        return (MAC_ADDRESS2_HIGH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MAC_ADDRESS2_HIGH's ADDRHI field.
     */
    inline void set_MAC_ADDRESS2_HIGH_ADDRHI(uint16_t value)
    {
        uint32_t curr = MAC_ADDRESS2_HIGH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MAC_ADDRESS2_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS2_LOW's ADDRLO field.
     */
    uint32_t get_MAC_ADDRESS2_LOW_ADDRLO()
    {
        return (MAC_ADDRESS2_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set MAC_ADDRESS2_LOW's ADDRLO field.
     */
    inline void set_MAC_ADDRESS2_LOW_ADDRLO(uint32_t value)
    {
        uint32_t curr = MAC_ADDRESS2_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        MAC_ADDRESS2_LOW = curr;
    }

    /**
     * Get MAC_ADDRESS3_HIGH's AE bit.
     */
    bool get_MAC_ADDRESS3_HIGH_AE()
    {
        return MAC_ADDRESS3_HIGH & (1u << 31u);
    }

    /**
     * Set MAC_ADDRESS3_HIGH's AE bit.
     */
    inline void set_MAC_ADDRESS3_HIGH_AE()
    {
        MAC_ADDRESS3_HIGH |= 1u << 31u;
    }

    /**
     * Clear MAC_ADDRESS3_HIGH's AE bit.
     */
    inline void clear_MAC_ADDRESS3_HIGH_AE()
    {
        MAC_ADDRESS3_HIGH &= ~(1u << 31u);
    }

    /**
     * Toggle MAC_ADDRESS3_HIGH's AE bit.
     */
    inline void toggle_MAC_ADDRESS3_HIGH_AE()
    {
        MAC_ADDRESS3_HIGH ^= 1u << 31u;
    }

    /**
     * Get MAC_ADDRESS3_HIGH's SA bit.
     */
    bool get_MAC_ADDRESS3_HIGH_SA()
    {
        return MAC_ADDRESS3_HIGH & (1u << 30u);
    }

    /**
     * Set MAC_ADDRESS3_HIGH's SA bit.
     */
    inline void set_MAC_ADDRESS3_HIGH_SA()
    {
        MAC_ADDRESS3_HIGH |= 1u << 30u;
    }

    /**
     * Clear MAC_ADDRESS3_HIGH's SA bit.
     */
    inline void clear_MAC_ADDRESS3_HIGH_SA()
    {
        MAC_ADDRESS3_HIGH &= ~(1u << 30u);
    }

    /**
     * Toggle MAC_ADDRESS3_HIGH's SA bit.
     */
    inline void toggle_MAC_ADDRESS3_HIGH_SA()
    {
        MAC_ADDRESS3_HIGH ^= 1u << 30u;
    }

    /**
     * Get MAC_ADDRESS3_HIGH's MBC field.
     */
    uint8_t get_MAC_ADDRESS3_HIGH_MBC()
    {
        return (MAC_ADDRESS3_HIGH >> 24u) & 0b111111u;
    }

    /**
     * Set MAC_ADDRESS3_HIGH's MBC field.
     */
    inline void set_MAC_ADDRESS3_HIGH_MBC(uint8_t value)
    {
        uint32_t curr = MAC_ADDRESS3_HIGH;

        curr &= ~(0b111111u << 24u);
        curr |= (value & 0b111111u) << 24u;

        MAC_ADDRESS3_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS3_HIGH's ADDRHI field.
     */
    uint16_t get_MAC_ADDRESS3_HIGH_ADDRHI()
    {
        return (MAC_ADDRESS3_HIGH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MAC_ADDRESS3_HIGH's ADDRHI field.
     */
    inline void set_MAC_ADDRESS3_HIGH_ADDRHI(uint16_t value)
    {
        uint32_t curr = MAC_ADDRESS3_HIGH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MAC_ADDRESS3_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS3_LOW's ADDRLO field.
     */
    uint32_t get_MAC_ADDRESS3_LOW_ADDRLO()
    {
        return (MAC_ADDRESS3_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set MAC_ADDRESS3_LOW's ADDRLO field.
     */
    inline void set_MAC_ADDRESS3_LOW_ADDRLO(uint32_t value)
    {
        uint32_t curr = MAC_ADDRESS3_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        MAC_ADDRESS3_LOW = curr;
    }

    /**
     * Get MMC_CONTROL's UCDBC bit.
     */
    bool get_MMC_CONTROL_UCDBC()
    {
        return MMC_CONTROL & (1u << 8u);
    }

    /**
     * Set MMC_CONTROL's UCDBC bit.
     */
    inline void set_MMC_CONTROL_UCDBC()
    {
        MMC_CONTROL |= 1u << 8u;
    }

    /**
     * Clear MMC_CONTROL's UCDBC bit.
     */
    inline void clear_MMC_CONTROL_UCDBC()
    {
        MMC_CONTROL &= ~(1u << 8u);
    }

    /**
     * Toggle MMC_CONTROL's UCDBC bit.
     */
    inline void toggle_MMC_CONTROL_UCDBC()
    {
        MMC_CONTROL ^= 1u << 8u;
    }

    /**
     * Get MMC_CONTROL's CNTPRSTLVL bit.
     */
    bool get_MMC_CONTROL_CNTPRSTLVL()
    {
        return MMC_CONTROL & (1u << 5u);
    }

    /**
     * Set MMC_CONTROL's CNTPRSTLVL bit.
     */
    inline void set_MMC_CONTROL_CNTPRSTLVL()
    {
        MMC_CONTROL |= 1u << 5u;
    }

    /**
     * Clear MMC_CONTROL's CNTPRSTLVL bit.
     */
    inline void clear_MMC_CONTROL_CNTPRSTLVL()
    {
        MMC_CONTROL &= ~(1u << 5u);
    }

    /**
     * Toggle MMC_CONTROL's CNTPRSTLVL bit.
     */
    inline void toggle_MMC_CONTROL_CNTPRSTLVL()
    {
        MMC_CONTROL ^= 1u << 5u;
    }

    /**
     * Get MMC_CONTROL's CNTPRST bit.
     */
    bool get_MMC_CONTROL_CNTPRST()
    {
        return MMC_CONTROL & (1u << 4u);
    }

    /**
     * Set MMC_CONTROL's CNTPRST bit.
     */
    inline void set_MMC_CONTROL_CNTPRST()
    {
        MMC_CONTROL |= 1u << 4u;
    }

    /**
     * Clear MMC_CONTROL's CNTPRST bit.
     */
    inline void clear_MMC_CONTROL_CNTPRST()
    {
        MMC_CONTROL &= ~(1u << 4u);
    }

    /**
     * Toggle MMC_CONTROL's CNTPRST bit.
     */
    inline void toggle_MMC_CONTROL_CNTPRST()
    {
        MMC_CONTROL ^= 1u << 4u;
    }

    /**
     * Get MMC_CONTROL's CNTFREEZ bit.
     */
    bool get_MMC_CONTROL_CNTFREEZ()
    {
        return MMC_CONTROL & (1u << 3u);
    }

    /**
     * Set MMC_CONTROL's CNTFREEZ bit.
     */
    inline void set_MMC_CONTROL_CNTFREEZ()
    {
        MMC_CONTROL |= 1u << 3u;
    }

    /**
     * Clear MMC_CONTROL's CNTFREEZ bit.
     */
    inline void clear_MMC_CONTROL_CNTFREEZ()
    {
        MMC_CONTROL &= ~(1u << 3u);
    }

    /**
     * Toggle MMC_CONTROL's CNTFREEZ bit.
     */
    inline void toggle_MMC_CONTROL_CNTFREEZ()
    {
        MMC_CONTROL ^= 1u << 3u;
    }

    /**
     * Get MMC_CONTROL's RSTONRD bit.
     */
    bool get_MMC_CONTROL_RSTONRD()
    {
        return MMC_CONTROL & (1u << 2u);
    }

    /**
     * Set MMC_CONTROL's RSTONRD bit.
     */
    inline void set_MMC_CONTROL_RSTONRD()
    {
        MMC_CONTROL |= 1u << 2u;
    }

    /**
     * Clear MMC_CONTROL's RSTONRD bit.
     */
    inline void clear_MMC_CONTROL_RSTONRD()
    {
        MMC_CONTROL &= ~(1u << 2u);
    }

    /**
     * Toggle MMC_CONTROL's RSTONRD bit.
     */
    inline void toggle_MMC_CONTROL_RSTONRD()
    {
        MMC_CONTROL ^= 1u << 2u;
    }

    /**
     * Get MMC_CONTROL's CNTSTOPRO bit.
     */
    bool get_MMC_CONTROL_CNTSTOPRO()
    {
        return MMC_CONTROL & (1u << 1u);
    }

    /**
     * Set MMC_CONTROL's CNTSTOPRO bit.
     */
    inline void set_MMC_CONTROL_CNTSTOPRO()
    {
        MMC_CONTROL |= 1u << 1u;
    }

    /**
     * Clear MMC_CONTROL's CNTSTOPRO bit.
     */
    inline void clear_MMC_CONTROL_CNTSTOPRO()
    {
        MMC_CONTROL &= ~(1u << 1u);
    }

    /**
     * Toggle MMC_CONTROL's CNTSTOPRO bit.
     */
    inline void toggle_MMC_CONTROL_CNTSTOPRO()
    {
        MMC_CONTROL ^= 1u << 1u;
    }

    /**
     * Get MMC_CONTROL's CNTRST bit.
     */
    bool get_MMC_CONTROL_CNTRST()
    {
        return MMC_CONTROL & (1u << 0u);
    }

    /**
     * Set MMC_CONTROL's CNTRST bit.
     */
    inline void set_MMC_CONTROL_CNTRST()
    {
        MMC_CONTROL |= 1u << 0u;
    }

    /**
     * Clear MMC_CONTROL's CNTRST bit.
     */
    inline void clear_MMC_CONTROL_CNTRST()
    {
        MMC_CONTROL &= ~(1u << 0u);
    }

    /**
     * Toggle MMC_CONTROL's CNTRST bit.
     */
    inline void toggle_MMC_CONTROL_CNTRST()
    {
        MMC_CONTROL ^= 1u << 0u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXCTRLFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXCTRLFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 25u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXRCVERRFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 24u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXWDOGFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXWDOGFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 23u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXVLANGBFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 22u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXFOVFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXFOVFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 21u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXPAUSFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXPAUSFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 20u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXORANGEFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXORANGEFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 19u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXLENERFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXLENERFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 18u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXUCGFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXUCGFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 17u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX1024TMAXOCTGBFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 16u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX512T1023OCTGBFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 15u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX256T511OCTGBFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 14u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX128T255OCTGBFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 13u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX65T127OCTGBFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 12u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX64OCTGBFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 11u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXOSIZEGFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 10u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXUSIZEGFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 9u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXJABERFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXJABERFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 8u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXRUNTFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXRUNTFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 7u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXALGNERFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXALGNERFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 6u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXCRCERFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXCRCERFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 5u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXMCGFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXMCGFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 4u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXBCGFIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXBCGFIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 3u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXGOCTIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXGOCTIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 2u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXGBOCTIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXGBOCTIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 1u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXGBFRMIS bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_RXGBFRMIS()
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 0u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXOSIZEGFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 25u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXVLANGFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 24u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXPAUSFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 23u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXEXDEFFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 22u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXGFRMIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXGFRMIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 21u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXGOCTIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXGOCTIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 20u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXCARERFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXCARERFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 19u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXEXCOLFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 18u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXLATCOLFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 17u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXDEFFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXDEFFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 16u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXMCOLGFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 15u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXSCOLGFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 14u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXUFLOWERFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 13u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXBCGBFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 12u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXMCGBFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 11u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXUCGBFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 10u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX1024TMAXOCTGBFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 9u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX512T1023OCTGBFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 8u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX256T511OCTGBFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 7u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX128T255OCTGBFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 6u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX65T127OCTGBFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 5u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX64OCTGBFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 4u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXMCGFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXMCGFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 3u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXBCGFIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXBCGFIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 2u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXGBFRMIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 1u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXGBOCTIS bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS()
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 0u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXCTRLFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 25u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXCTRLFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 25u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXCTRLFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 25u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXCTRLFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 25u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXRCVERRFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 24u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXRCVERRFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 24u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXRCVERRFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 24u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXRCVERRFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 24u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXWDOGFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 23u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXWDOGFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 23u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXWDOGFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 23u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXWDOGFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 23u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXVLANGBFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 22u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXVLANGBFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 22u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXVLANGBFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 22u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXVLANGBFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 22u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXFOVFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 21u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXFOVFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 21u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXFOVFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 21u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXFOVFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 21u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXPAUSFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 20u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXPAUSFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 20u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXPAUSFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 20u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXPAUSFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 20u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXORANGEFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 19u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXORANGEFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 19u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXORANGEFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 19u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXORANGEFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 19u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXLENERFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 18u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXLENERFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 18u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXLENERFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 18u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXLENERFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 18u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXUCGFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 17u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXUCGFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 17u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXUCGFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 17u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXUCGFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 17u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX1024TMAXOCTGBFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 16u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX1024TMAXOCTGBFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 16u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX1024TMAXOCTGBFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 16u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX1024TMAXOCTGBFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 16u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX512T1023OCTGBFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 15u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX512T1023OCTGBFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 15u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX512T1023OCTGBFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 15u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX512T1023OCTGBFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 15u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX256T511OCTGBFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 14u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX256T511OCTGBFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 14u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX256T511OCTGBFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 14u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX256T511OCTGBFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 14u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX128T255OCTGBFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 13u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX128T255OCTGBFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 13u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX128T255OCTGBFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 13u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX128T255OCTGBFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 13u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX65T127OCTGBFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 12u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX65T127OCTGBFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 12u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX65T127OCTGBFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 12u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX65T127OCTGBFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 12u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX64OCTGBFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 11u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX64OCTGBFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 11u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX64OCTGBFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 11u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX64OCTGBFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 11u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXOSIZEGFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 10u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXOSIZEGFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 10u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXOSIZEGFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 10u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXOSIZEGFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 10u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXUSIZEGFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 9u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXUSIZEGFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 9u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXUSIZEGFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 9u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXUSIZEGFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 9u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXJABERFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 8u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXJABERFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 8u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXJABERFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 8u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXJABERFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 8u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXRUNTFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 7u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXRUNTFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 7u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXRUNTFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 7u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXRUNTFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 7u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXALGNERFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 6u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXALGNERFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 6u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXALGNERFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 6u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXALGNERFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 6u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXCRCERFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 5u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXCRCERFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 5u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXCRCERFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 5u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXCRCERFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 5u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXMCGFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 4u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXMCGFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 4u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXMCGFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 4u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXMCGFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 4u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXBCGFIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 3u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXBCGFIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 3u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXBCGFIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 3u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXBCGFIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 3u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXGOCTIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 2u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXGOCTIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 2u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXGOCTIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 2u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXGOCTIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 2u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXGBOCTIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 1u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXGBOCTIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 1u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXGBOCTIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 1u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXGBOCTIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 1u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXGBFRMIM bit.
     */
    bool get_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM()
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 0u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXGBFRMIM bit.
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 0u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXGBFRMIM bit.
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 0u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXGBFRMIM bit.
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM()
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 0u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXOSIZEGFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 25u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXOSIZEGFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 25u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXOSIZEGFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 25u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXOSIZEGFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 25u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXVLANGFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 24u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXVLANGFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 24u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXVLANGFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 24u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXVLANGFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 24u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXPAUSFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 23u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXPAUSFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 23u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXPAUSFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 23u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXPAUSFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 23u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXEXDEFFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 22u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXEXDEFFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 22u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXEXDEFFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 22u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXEXDEFFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 22u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXGFRMIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 21u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXGFRMIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 21u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXGFRMIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 21u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXGFRMIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 21u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXGOCTIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 20u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXGOCTIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 20u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXGOCTIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 20u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXGOCTIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 20u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXCARERFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 19u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXCARERFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 19u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXCARERFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 19u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXCARERFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 19u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXEXCOLFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 18u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXEXCOLFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 18u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXEXCOLFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 18u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXEXCOLFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 18u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXLATCOLFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 17u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXLATCOLFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 17u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXLATCOLFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 17u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXLATCOLFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 17u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXDEFFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 16u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXDEFFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 16u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXDEFFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 16u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXDEFFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 16u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXMCOLGFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 15u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXMCOLGFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 15u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXMCOLGFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 15u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXMCOLGFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 15u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXSCOLGFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 14u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXSCOLGFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 14u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXSCOLGFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 14u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXSCOLGFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 14u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXUFLOWERFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 13u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXUFLOWERFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 13u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXUFLOWERFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 13u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXUFLOWERFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 13u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXBCGBFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 12u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXBCGBFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 12u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXBCGBFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 12u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXBCGBFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 12u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXMCGBFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 11u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXMCGBFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 11u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXMCGBFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 11u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXMCGBFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 11u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXUCGBFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 10u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXUCGBFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 10u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXUCGBFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 10u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXUCGBFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 10u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX1024TMAXOCTGBFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 9u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX1024TMAXOCTGBFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 9u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX1024TMAXOCTGBFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 9u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX1024TMAXOCTGBFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 9u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX512T1023OCTGBFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 8u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX512T1023OCTGBFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 8u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX512T1023OCTGBFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 8u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX512T1023OCTGBFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 8u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX256T511OCTGBFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 7u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX256T511OCTGBFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 7u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX256T511OCTGBFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 7u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX256T511OCTGBFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 7u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX128T255OCTGBFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 6u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX128T255OCTGBFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 6u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX128T255OCTGBFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 6u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX128T255OCTGBFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 6u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX65T127OCTGBFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 5u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX65T127OCTGBFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 5u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX65T127OCTGBFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 5u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX65T127OCTGBFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 5u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX64OCTGBFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 4u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX64OCTGBFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 4u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX64OCTGBFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 4u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX64OCTGBFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 4u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXMCGFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 3u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXMCGFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 3u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXMCGFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 3u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXMCGFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 3u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXBCGFIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 2u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXBCGFIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 2u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXBCGFIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 2u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXBCGFIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 2u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXGBFRMIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 1u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXGBFRMIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 1u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXGBFRMIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 1u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXGBFRMIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 1u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXGBOCTIM bit.
     */
    bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM()
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 0u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXGBOCTIM bit.
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 0u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXGBOCTIM bit.
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 0u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXGBOCTIM bit.
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM()
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 0u;
    }

    /**
     * Get TX_OCTET_COUNT_GOOD_BAD's TXOCTGB field.
     */
    uint32_t get_TX_OCTET_COUNT_GOOD_BAD_TXOCTGB()
    {
        return (TX_OCTET_COUNT_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_FRAME_COUNT_GOOD_BAD's TXFRMGB field.
     */
    uint32_t get_TX_FRAME_COUNT_GOOD_BAD_TXFRMGB()
    {
        return (TX_FRAME_COUNT_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_BROADCAST_FRAMES_GOOD's TXBCASTG field.
     */
    uint32_t get_TX_BROADCAST_FRAMES_GOOD_TXBCASTG()
    {
        return (TX_BROADCAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_MULTICAST_FRAMES_GOOD's TXMCASTG field.
     */
    uint32_t get_TX_MULTICAST_FRAMES_GOOD_TXMCASTG()
    {
        return (TX_MULTICAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_64OCTETS_FRAMES_GOOD_BAD's TX64OCTGB field.
     */
    uint32_t get_TX_64OCTETS_FRAMES_GOOD_BAD_TX64OCTGB()
    {
        return (TX_64OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_65TO127OCTETS_FRAMES_GOOD_BAD's TX65_127OCTGB field.
     */
    uint32_t get_TX_65TO127OCTETS_FRAMES_GOOD_BAD_TX65_127OCTGB()
    {
        return (TX_65TO127OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_128TO255OCTETS_FRAMES_GOOD_BAD's TX128_255OCTGB field.
     */
    uint32_t get_TX_128TO255OCTETS_FRAMES_GOOD_BAD_TX128_255OCTGB()
    {
        return (TX_128TO255OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_256TO511OCTETS_FRAMES_GOOD_BAD's TX256_511OCTGB field.
     */
    uint32_t get_TX_256TO511OCTETS_FRAMES_GOOD_BAD_TX256_511OCTGB()
    {
        return (TX_256TO511OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_512TO1023OCTETS_FRAMES_GOOD_BAD's TX512_1023OCTGB field.
     */
    uint32_t get_TX_512TO1023OCTETS_FRAMES_GOOD_BAD_TX512_1023OCTGB()
    {
        return (TX_512TO1023OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_1024TOMAXOCTETS_FRAMES_GOOD_BAD's TX1024_MAXOCTGB field.
     */
    uint32_t get_TX_1024TOMAXOCTETS_FRAMES_GOOD_BAD_TX1024_MAXOCTGB()
    {
        return (TX_1024TOMAXOCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_UNICAST_FRAMES_GOOD_BAD's TXUCASTGB field.
     */
    uint32_t get_TX_UNICAST_FRAMES_GOOD_BAD_TXUCASTGB()
    {
        return (TX_UNICAST_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_MULTICAST_FRAMES_GOOD_BAD's TXMCASTGB field.
     */
    uint32_t get_TX_MULTICAST_FRAMES_GOOD_BAD_TXMCASTGB()
    {
        return (TX_MULTICAST_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_BROADCAST_FRAMES_GOOD_BAD's TXBCASTGB field.
     */
    uint32_t get_TX_BROADCAST_FRAMES_GOOD_BAD_TXBCASTGB()
    {
        return (TX_BROADCAST_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_UNDERFLOW_ERROR_FRAMES's TXUNDRFLW field.
     */
    uint32_t get_TX_UNDERFLOW_ERROR_FRAMES_TXUNDRFLW()
    {
        return (TX_UNDERFLOW_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_SINGLE_COLLISION_GOOD_FRAMES's TXSNGLCOLG field.
     */
    uint32_t get_TX_SINGLE_COLLISION_GOOD_FRAMES_TXSNGLCOLG()
    {
        return (TX_SINGLE_COLLISION_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_MULTIPLE_COLLISION_GOOD_FRAMES's TXMULTCOLG field.
     */
    uint32_t get_TX_MULTIPLE_COLLISION_GOOD_FRAMES_TXMULTCOLG()
    {
        return (TX_MULTIPLE_COLLISION_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_DEFERRED_FRAMES's TXDEFRD field.
     */
    uint32_t get_TX_DEFERRED_FRAMES_TXDEFRD()
    {
        return (TX_DEFERRED_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_LATE_COLLISION_FRAMES's TXLATECOL field.
     */
    uint32_t get_TX_LATE_COLLISION_FRAMES_TXLATECOL()
    {
        return (TX_LATE_COLLISION_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_EXCESSIVE_COLLISION_FRAMES's TXEXSCOL field.
     */
    uint32_t get_TX_EXCESSIVE_COLLISION_FRAMES_TXEXSCOL()
    {
        return (TX_EXCESSIVE_COLLISION_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_CARRIER_ERROR_FRAMES's TXCARR field.
     */
    uint32_t get_TX_CARRIER_ERROR_FRAMES_TXCARR()
    {
        return (TX_CARRIER_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_OCTET_COUNT_GOOD's TXOCTG field.
     */
    uint32_t get_TX_OCTET_COUNT_GOOD_TXOCTG()
    {
        return (TX_OCTET_COUNT_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_FRAME_COUNT_GOOD's TXFRMG field.
     */
    uint32_t get_TX_FRAME_COUNT_GOOD_TXFRMG()
    {
        return (TX_FRAME_COUNT_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_EXCESSIVE_DEFERRAL_ERROR's TXEXSDEF field.
     */
    uint32_t get_TX_EXCESSIVE_DEFERRAL_ERROR_TXEXSDEF()
    {
        return (TX_EXCESSIVE_DEFERRAL_ERROR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_PAUSE_FRAMES's TXPAUSE field.
     */
    uint32_t get_TX_PAUSE_FRAMES_TXPAUSE()
    {
        return (TX_PAUSE_FRAMES >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_VLAN_FRAMES_GOOD's TXVLANG field.
     */
    uint32_t get_TX_VLAN_FRAMES_GOOD_TXVLANG()
    {
        return (TX_VLAN_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_OSIZE_FRAMES_GOOD's TXOSIZG field.
     */
    uint32_t get_TX_OSIZE_FRAMES_GOOD_TXOSIZG()
    {
        return (TX_OSIZE_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_FRAMES_COUNT_GOOD_BAD's RXFRMGB field.
     */
    uint32_t get_RX_FRAMES_COUNT_GOOD_BAD_RXFRMGB()
    {
        return (RX_FRAMES_COUNT_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_OCTET_COUNT_GOOD_BAD's RXOCTGB field.
     */
    uint32_t get_RX_OCTET_COUNT_GOOD_BAD_RXOCTGB()
    {
        return (RX_OCTET_COUNT_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_OCTET_COUNT_GOOD's RXOCTG field.
     */
    uint32_t get_RX_OCTET_COUNT_GOOD_RXOCTG()
    {
        return (RX_OCTET_COUNT_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_BROADCAST_FRAMES_GOOD's RXBCASTG field.
     */
    uint32_t get_RX_BROADCAST_FRAMES_GOOD_RXBCASTG()
    {
        return (RX_BROADCAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_MULTICAST_FRAMES_GOOD's RXMCASTG field.
     */
    uint32_t get_RX_MULTICAST_FRAMES_GOOD_RXMCASTG()
    {
        return (RX_MULTICAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_CRC_ERROR_FRAMES's RXCRCERR field.
     */
    uint32_t get_RX_CRC_ERROR_FRAMES_RXCRCERR()
    {
        return (RX_CRC_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_ALIGNMENT_ERROR_FRAMES's RXALGNERR field.
     */
    uint32_t get_RX_ALIGNMENT_ERROR_FRAMES_RXALGNERR()
    {
        return (RX_ALIGNMENT_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_RUNT_ERROR_FRAMES's RXRUNTERR field.
     */
    uint32_t get_RX_RUNT_ERROR_FRAMES_RXRUNTERR()
    {
        return (RX_RUNT_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_JABBER_ERROR_FRAMES's RXJABERR field.
     */
    uint32_t get_RX_JABBER_ERROR_FRAMES_RXJABERR()
    {
        return (RX_JABBER_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_UNDERSIZE_FRAMES_GOOD's RXUNDERSZG field.
     */
    uint32_t get_RX_UNDERSIZE_FRAMES_GOOD_RXUNDERSZG()
    {
        return (RX_UNDERSIZE_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_OVERSIZE_FRAMES_GOOD's RXOVERSZG field.
     */
    uint32_t get_RX_OVERSIZE_FRAMES_GOOD_RXOVERSZG()
    {
        return (RX_OVERSIZE_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_64OCTETS_FRAMES_GOOD_BAD's RX64OCTGB field.
     */
    uint32_t get_RX_64OCTETS_FRAMES_GOOD_BAD_RX64OCTGB()
    {
        return (RX_64OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_65TO127OCTETS_FRAMES_GOOD_BAD's RX65_127OCTGB field.
     */
    uint32_t get_RX_65TO127OCTETS_FRAMES_GOOD_BAD_RX65_127OCTGB()
    {
        return (RX_65TO127OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_128TO255OCTETS_FRAMES_GOOD_BAD's RX128_255OCTGB field.
     */
    uint32_t get_RX_128TO255OCTETS_FRAMES_GOOD_BAD_RX128_255OCTGB()
    {
        return (RX_128TO255OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_256TO511OCTETS_FRAMES_GOOD_BAD's RX256_511OCTGB field.
     */
    uint32_t get_RX_256TO511OCTETS_FRAMES_GOOD_BAD_RX256_511OCTGB()
    {
        return (RX_256TO511OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_512TO1023OCTETS_FRAMES_GOOD_BAD's RX512_1023OCTGB field.
     */
    uint32_t get_RX_512TO1023OCTETS_FRAMES_GOOD_BAD_RX512_1023OCTGB()
    {
        return (RX_512TO1023OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_1024TOMAXOCTETS_FRAMES_GOOD_BAD's RX1024_MAXOCTGB field.
     */
    uint32_t get_RX_1024TOMAXOCTETS_FRAMES_GOOD_BAD_RX1024_MAXOCTGB()
    {
        return (RX_1024TOMAXOCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_UNICAST_FRAMES_GOOD's RXUCASTG field.
     */
    uint32_t get_RX_UNICAST_FRAMES_GOOD_RXUCASTG()
    {
        return (RX_UNICAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_LENGTH_ERROR_FRAMES's RXLENERR field.
     */
    uint32_t get_RX_LENGTH_ERROR_FRAMES_RXLENERR()
    {
        return (RX_LENGTH_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_OUT_OF_RANGE_TYPE_FRAMES's RXOUTOFRNG field.
     */
    uint32_t get_RX_OUT_OF_RANGE_TYPE_FRAMES_RXOUTOFRNG()
    {
        return (RX_OUT_OF_RANGE_TYPE_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_PAUSE_FRAMES's RXPAUSEFRM field.
     */
    uint32_t get_RX_PAUSE_FRAMES_RXPAUSEFRM()
    {
        return (RX_PAUSE_FRAMES >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_FIFO_OVERFLOW_FRAMES's RXFIFOOVFL field.
     */
    uint32_t get_RX_FIFO_OVERFLOW_FRAMES_RXFIFOOVFL()
    {
        return (RX_FIFO_OVERFLOW_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_VLAN_FRAMES_GOOD_BAD's RXVLANFRGB field.
     */
    uint32_t get_RX_VLAN_FRAMES_GOOD_BAD_RXVLANFRGB()
    {
        return (RX_VLAN_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_WATCHDOG_ERROR_FRAMES's RXWDGERR field.
     */
    uint32_t get_RX_WATCHDOG_ERROR_FRAMES_RXWDGERR()
    {
        return (RX_WATCHDOG_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_RECEIVE_ERROR_FRAMES's RXRCVERR field.
     */
    uint32_t get_RX_RECEIVE_ERROR_FRAMES_RXRCVERR()
    {
        return (RX_RECEIVE_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_CONTROL_FRAMES_GOOD's RXCTRLG field.
     */
    uint32_t get_RX_CONTROL_FRAMES_GOOD_RXCTRLG()
    {
        return (RX_CONTROL_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPEROIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 29u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPEROIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 29u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPEROIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 29u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPEROIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 29u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGOIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 28u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGOIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 28u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGOIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 28u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGOIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 28u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPEROIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 27u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPEROIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 27u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPEROIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 27u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPEROIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 27u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGOIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 26u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGOIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 26u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGOIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 26u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGOIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 26u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPEROIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 25u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPEROIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 25u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPEROIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 25u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPEROIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 25u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGOIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 24u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGOIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 24u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGOIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 24u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGOIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 24u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYOIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 23u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYOIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 23u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYOIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 23u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYOIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 23u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HEROIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 22u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HEROIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 22u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HEROIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 22u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HEROIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 22u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GOIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 21u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GOIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 21u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GOIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 21u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GOIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 21u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLOIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 20u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLOIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 20u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLOIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 20u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLOIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 20u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGOIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 19u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGOIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 19u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGOIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 19u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGOIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 19u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYOIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 18u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYOIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 18u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYOIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 18u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYOIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 18u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HEROIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 17u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HEROIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 17u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HEROIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 17u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HEROIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 17u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GOIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 16u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GOIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 16u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GOIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 16u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GOIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 16u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPERFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 13u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPERFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 13u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPERFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 13u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPERFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 13u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 12u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 12u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 12u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 12u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPERFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 11u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPERFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 11u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPERFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 11u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPERFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 11u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 10u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 10u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 10u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 10u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPERFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 9u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPERFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 9u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPERFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 9u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPERFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 9u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 8u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 8u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 8u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 8u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 7u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 7u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 7u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 7u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HERFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 6u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HERFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 6u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HERFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 6u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HERFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 6u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 5u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 5u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 5u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 5u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 4u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 4u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 4u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 4u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 3u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 3u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 3u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 3u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 2u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 2u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 2u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 2u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HERFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 1u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HERFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 1u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HERFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 1u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HERFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 1u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GFIM bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM()
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 0u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GFIM bit.
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 0u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GFIM bit.
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 0u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GFIM bit.
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM()
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 0u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXICMPEROIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 29u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXICMPGOIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 28u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXTCPEROIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 27u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXTCPGOIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 26u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXUDPEROIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 25u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXUDPGOIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 24u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6NOPAYOIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 23u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6HEROIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 22u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6GOIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 21u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4UDSBLOIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 20u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4FRAGOIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 19u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4NOPAYOIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 18u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4HEROIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 17u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4GOIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 16u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXICMPERFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 13u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXICMPGFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 12u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXTCPERFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 11u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXTCPGFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 10u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXUDPERFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 9u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXUDPGFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 8u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6NOPAYFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 7u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6HERFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 6u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6GFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 5u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4UDSBLFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 4u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4FRAGFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 3u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4NOPAYFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 2u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4HERFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 1u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4GFIS bit.
     */
    bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS()
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 0u);
    }

    /**
     * Get RXIPV4_GOOD_FRAMES's RXIPV4GDFRM field.
     */
    uint32_t get_RXIPV4_GOOD_FRAMES_RXIPV4GDFRM()
    {
        return (RXIPV4_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_HEADER_ERROR_FRAMES's RXIPV4HDRERRFRM field.
     */
    uint32_t get_RXIPV4_HEADER_ERROR_FRAMES_RXIPV4HDRERRFRM()
    {
        return (RXIPV4_HEADER_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_NO_PAYLOAD_FRAMES's RXIPV4NOPAYFRM field.
     */
    uint32_t get_RXIPV4_NO_PAYLOAD_FRAMES_RXIPV4NOPAYFRM()
    {
        return (RXIPV4_NO_PAYLOAD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_FRAGMENTED_FRAMES's RXIPV4FRAGFRM field.
     */
    uint32_t get_RXIPV4_FRAGMENTED_FRAMES_RXIPV4FRAGFRM()
    {
        return (RXIPV4_FRAGMENTED_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_UDP_CHECKSUM_DISABLED_FRAMES's RXIPV4UDSBLFRM field.
     */
    uint32_t get_RXIPV4_UDP_CHECKSUM_DISABLED_FRAMES_RXIPV4UDSBLFRM()
    {
        return (RXIPV4_UDP_CHECKSUM_DISABLED_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_GOOD_FRAMES's RXIPV6GDFRM field.
     */
    uint32_t get_RXIPV6_GOOD_FRAMES_RXIPV6GDFRM()
    {
        return (RXIPV6_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_HEADER_ERROR_FRAMES's RXIPV6HDRERRFRM field.
     */
    uint32_t get_RXIPV6_HEADER_ERROR_FRAMES_RXIPV6HDRERRFRM()
    {
        return (RXIPV6_HEADER_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_NO_PAYLOAD_FRAMES's RXIPV6NOPAYFRM field.
     */
    uint32_t get_RXIPV6_NO_PAYLOAD_FRAMES_RXIPV6NOPAYFRM()
    {
        return (RXIPV6_NO_PAYLOAD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXUDP_GOOD_FRAMES's RXUDPGDFRM field.
     */
    uint32_t get_RXUDP_GOOD_FRAMES_RXUDPGDFRM()
    {
        return (RXUDP_GOOD_FRAMES >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RXUDP_ERROR_FRAMES's RXUDPERRFRM field.
     */
    uint32_t get_RXUDP_ERROR_FRAMES_RXUDPERRFRM()
    {
        return (RXUDP_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXTCP_GOOD_FRAMES's RXTCPGDFRM field.
     */
    uint32_t get_RXTCP_GOOD_FRAMES_RXTCPGDFRM()
    {
        return (RXTCP_GOOD_FRAMES >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RXTCP_ERROR_FRAMES's RXTCPERRFRM field.
     */
    uint32_t get_RXTCP_ERROR_FRAMES_RXTCPERRFRM()
    {
        return (RXTCP_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXICMP_GOOD_FRAMES's RXICMPGDFRM field.
     */
    uint32_t get_RXICMP_GOOD_FRAMES_RXICMPGDFRM()
    {
        return (RXICMP_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXICMP_ERROR_FRAMES's RXICMPERRFRM field.
     */
    uint32_t get_RXICMP_ERROR_FRAMES_RXICMPERRFRM()
    {
        return (RXICMP_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_GOOD_OCTETS's RXIPV4GDOCT field.
     */
    uint32_t get_RXIPV4_GOOD_OCTETS_RXIPV4GDOCT()
    {
        return (RXIPV4_GOOD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_HEADER_ERROR_OCTETS's RXIPV4HDRERROCT field.
     */
    uint32_t get_RXIPV4_HEADER_ERROR_OCTETS_RXIPV4HDRERROCT()
    {
        return (RXIPV4_HEADER_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_NO_PAYLOAD_OCTETS's RXIPV4NOPAYOCT field.
     */
    uint32_t get_RXIPV4_NO_PAYLOAD_OCTETS_RXIPV4NOPAYOCT()
    {
        return (RXIPV4_NO_PAYLOAD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_FRAGMENTED_OCTETS's RXIPV4FRAGOCT field.
     */
    uint32_t get_RXIPV4_FRAGMENTED_OCTETS_RXIPV4FRAGOCT()
    {
        return (RXIPV4_FRAGMENTED_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS's RXIPV4UDSBLOCT field.
     */
    uint32_t get_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_RXIPV4UDSBLOCT()
    {
        return (RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_GOOD_OCTETS's RXIPV6GDOCT field.
     */
    uint32_t get_RXIPV6_GOOD_OCTETS_RXIPV6GDOCT()
    {
        return (RXIPV6_GOOD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_HEADER_ERROR_OCTETS's RXIPV6HDRERROCT field.
     */
    uint32_t get_RXIPV6_HEADER_ERROR_OCTETS_RXIPV6HDRERROCT()
    {
        return (RXIPV6_HEADER_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_NO_PAYLOAD_OCTETS's RXIPV6NOPAYOCT field.
     */
    uint32_t get_RXIPV6_NO_PAYLOAD_OCTETS_RXIPV6NOPAYOCT()
    {
        return (RXIPV6_NO_PAYLOAD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXUDP_GOOD_OCTETS's RXUDPGDOCT field.
     */
    uint32_t get_RXUDP_GOOD_OCTETS_RXUDPGDOCT()
    {
        return (RXUDP_GOOD_OCTETS >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RXUDP_ERROR_OCTETS's RXUDPERROCT field.
     */
    uint32_t get_RXUDP_ERROR_OCTETS_RXUDPERROCT()
    {
        return (RXUDP_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXTCP_GOOD_OCTETS's RXTCPGDOCT field.
     */
    uint32_t get_RXTCP_GOOD_OCTETS_RXTCPGDOCT()
    {
        return (RXTCP_GOOD_OCTETS >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RXTCP_ERROR_OCTETS's RXTCPERROCT field.
     */
    uint32_t get_RXTCP_ERROR_OCTETS_RXTCPERROCT()
    {
        return (RXTCP_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXICMP_GOOD_OCTETS's RXICMPGDOCT field.
     */
    uint32_t get_RXICMP_GOOD_OCTETS_RXICMPGDOCT()
    {
        return (RXICMP_GOOD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXICMP_ERROR_OCTETS's RXICMPERROCT field.
     */
    uint32_t get_RXICMP_ERROR_OCTETS_RXICMPERROCT()
    {
        return (RXICMP_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSENMACADDR bit.
     */
    bool get_TIMESTAMP_CONTROL_TSENMACADDR()
    {
        return TIMESTAMP_CONTROL & (1u << 18u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSENMACADDR bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSENMACADDR()
    {
        TIMESTAMP_CONTROL |= 1u << 18u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSENMACADDR bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSENMACADDR()
    {
        TIMESTAMP_CONTROL &= ~(1u << 18u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSENMACADDR bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSENMACADDR()
    {
        TIMESTAMP_CONTROL ^= 1u << 18u;
    }

    /**
     * Get TIMESTAMP_CONTROL's SNAPTYPSEL field.
     */
    uint8_t get_TIMESTAMP_CONTROL_SNAPTYPSEL()
    {
        return (TIMESTAMP_CONTROL >> 16u) & 0b11u;
    }

    /**
     * Set TIMESTAMP_CONTROL's SNAPTYPSEL field.
     */
    inline void set_TIMESTAMP_CONTROL_SNAPTYPSEL(uint8_t value)
    {
        uint32_t curr = TIMESTAMP_CONTROL;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        TIMESTAMP_CONTROL = curr;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSMSTRENA bit.
     */
    bool get_TIMESTAMP_CONTROL_TSMSTRENA()
    {
        return TIMESTAMP_CONTROL & (1u << 15u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSMSTRENA bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSMSTRENA()
    {
        TIMESTAMP_CONTROL |= 1u << 15u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSMSTRENA bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSMSTRENA()
    {
        TIMESTAMP_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSMSTRENA bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSMSTRENA()
    {
        TIMESTAMP_CONTROL ^= 1u << 15u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSEVNTENA bit.
     */
    bool get_TIMESTAMP_CONTROL_TSEVNTENA()
    {
        return TIMESTAMP_CONTROL & (1u << 14u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSEVNTENA bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSEVNTENA()
    {
        TIMESTAMP_CONTROL |= 1u << 14u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSEVNTENA bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSEVNTENA()
    {
        TIMESTAMP_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSEVNTENA bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSEVNTENA()
    {
        TIMESTAMP_CONTROL ^= 1u << 14u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSIPV4ENA bit.
     */
    bool get_TIMESTAMP_CONTROL_TSIPV4ENA()
    {
        return TIMESTAMP_CONTROL & (1u << 13u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSIPV4ENA bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSIPV4ENA()
    {
        TIMESTAMP_CONTROL |= 1u << 13u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSIPV4ENA bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSIPV4ENA()
    {
        TIMESTAMP_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSIPV4ENA bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSIPV4ENA()
    {
        TIMESTAMP_CONTROL ^= 1u << 13u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSIPV6ENA bit.
     */
    bool get_TIMESTAMP_CONTROL_TSIPV6ENA()
    {
        return TIMESTAMP_CONTROL & (1u << 12u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSIPV6ENA bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSIPV6ENA()
    {
        TIMESTAMP_CONTROL |= 1u << 12u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSIPV6ENA bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSIPV6ENA()
    {
        TIMESTAMP_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSIPV6ENA bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSIPV6ENA()
    {
        TIMESTAMP_CONTROL ^= 1u << 12u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSIPENA bit.
     */
    bool get_TIMESTAMP_CONTROL_TSIPENA()
    {
        return TIMESTAMP_CONTROL & (1u << 11u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSIPENA bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSIPENA()
    {
        TIMESTAMP_CONTROL |= 1u << 11u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSIPENA bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSIPENA()
    {
        TIMESTAMP_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSIPENA bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSIPENA()
    {
        TIMESTAMP_CONTROL ^= 1u << 11u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSVER2ENA bit.
     */
    bool get_TIMESTAMP_CONTROL_TSVER2ENA()
    {
        return TIMESTAMP_CONTROL & (1u << 10u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSVER2ENA bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSVER2ENA()
    {
        TIMESTAMP_CONTROL |= 1u << 10u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSVER2ENA bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSVER2ENA()
    {
        TIMESTAMP_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSVER2ENA bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSVER2ENA()
    {
        TIMESTAMP_CONTROL ^= 1u << 10u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSCTRLSSR bit.
     */
    bool get_TIMESTAMP_CONTROL_TSCTRLSSR()
    {
        return TIMESTAMP_CONTROL & (1u << 9u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSCTRLSSR bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSCTRLSSR()
    {
        TIMESTAMP_CONTROL |= 1u << 9u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSCTRLSSR bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSCTRLSSR()
    {
        TIMESTAMP_CONTROL &= ~(1u << 9u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSCTRLSSR bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSCTRLSSR()
    {
        TIMESTAMP_CONTROL ^= 1u << 9u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSENALL bit.
     */
    bool get_TIMESTAMP_CONTROL_TSENALL()
    {
        return TIMESTAMP_CONTROL & (1u << 8u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSENALL bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSENALL()
    {
        TIMESTAMP_CONTROL |= 1u << 8u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSENALL bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSENALL()
    {
        TIMESTAMP_CONTROL &= ~(1u << 8u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSENALL bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSENALL()
    {
        TIMESTAMP_CONTROL ^= 1u << 8u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSADDREG bit.
     */
    bool get_TIMESTAMP_CONTROL_TSADDREG()
    {
        return TIMESTAMP_CONTROL & (1u << 5u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSADDREG bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSADDREG()
    {
        TIMESTAMP_CONTROL |= 1u << 5u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSADDREG bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSADDREG()
    {
        TIMESTAMP_CONTROL &= ~(1u << 5u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSADDREG bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSADDREG()
    {
        TIMESTAMP_CONTROL ^= 1u << 5u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSTRIG bit.
     */
    bool get_TIMESTAMP_CONTROL_TSTRIG()
    {
        return TIMESTAMP_CONTROL & (1u << 4u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSTRIG bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSTRIG()
    {
        TIMESTAMP_CONTROL |= 1u << 4u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSTRIG bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSTRIG()
    {
        TIMESTAMP_CONTROL &= ~(1u << 4u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSTRIG bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSTRIG()
    {
        TIMESTAMP_CONTROL ^= 1u << 4u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSUPDT bit.
     */
    bool get_TIMESTAMP_CONTROL_TSUPDT()
    {
        return TIMESTAMP_CONTROL & (1u << 3u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSUPDT bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSUPDT()
    {
        TIMESTAMP_CONTROL |= 1u << 3u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSUPDT bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSUPDT()
    {
        TIMESTAMP_CONTROL &= ~(1u << 3u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSUPDT bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSUPDT()
    {
        TIMESTAMP_CONTROL ^= 1u << 3u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSINIT bit.
     */
    bool get_TIMESTAMP_CONTROL_TSINIT()
    {
        return TIMESTAMP_CONTROL & (1u << 2u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSINIT bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSINIT()
    {
        TIMESTAMP_CONTROL |= 1u << 2u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSINIT bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSINIT()
    {
        TIMESTAMP_CONTROL &= ~(1u << 2u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSINIT bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSINIT()
    {
        TIMESTAMP_CONTROL ^= 1u << 2u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSCFUPDT bit.
     */
    bool get_TIMESTAMP_CONTROL_TSCFUPDT()
    {
        return TIMESTAMP_CONTROL & (1u << 1u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSCFUPDT bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSCFUPDT()
    {
        TIMESTAMP_CONTROL |= 1u << 1u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSCFUPDT bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSCFUPDT()
    {
        TIMESTAMP_CONTROL &= ~(1u << 1u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSCFUPDT bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSCFUPDT()
    {
        TIMESTAMP_CONTROL ^= 1u << 1u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSENA bit.
     */
    bool get_TIMESTAMP_CONTROL_TSENA()
    {
        return TIMESTAMP_CONTROL & (1u << 0u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSENA bit.
     */
    inline void set_TIMESTAMP_CONTROL_TSENA()
    {
        TIMESTAMP_CONTROL |= 1u << 0u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSENA bit.
     */
    inline void clear_TIMESTAMP_CONTROL_TSENA()
    {
        TIMESTAMP_CONTROL &= ~(1u << 0u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSENA bit.
     */
    inline void toggle_TIMESTAMP_CONTROL_TSENA()
    {
        TIMESTAMP_CONTROL ^= 1u << 0u;
    }

    /**
     * Get SUB_SECOND_INCREMENT's SSINC field.
     */
    uint8_t get_SUB_SECOND_INCREMENT_SSINC()
    {
        return (SUB_SECOND_INCREMENT >> 0u) & 0b11111111u;
    }

    /**
     * Set SUB_SECOND_INCREMENT's SSINC field.
     */
    inline void set_SUB_SECOND_INCREMENT_SSINC(uint8_t value)
    {
        uint32_t curr = SUB_SECOND_INCREMENT;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SUB_SECOND_INCREMENT = curr;
    }

    /**
     * Get SYSTEM_TIME_SECONDS's TSS field.
     */
    uint32_t get_SYSTEM_TIME_SECONDS_TSS()
    {
        return (SYSTEM_TIME_SECONDS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SYSTEM_TIME_NANOSECONDS's TSSS field.
     */
    uint32_t get_SYSTEM_TIME_NANOSECONDS_TSSS()
    {
        return (SYSTEM_TIME_NANOSECONDS >> 0u) &
               0b1111111111111111111111111111111u;
    }

    /**
     * Get SYSTEM_TIME_SECONDS_UPDATE's TSS field.
     */
    uint32_t get_SYSTEM_TIME_SECONDS_UPDATE_TSS()
    {
        return (SYSTEM_TIME_SECONDS_UPDATE >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set SYSTEM_TIME_SECONDS_UPDATE's TSS field.
     */
    inline void set_SYSTEM_TIME_SECONDS_UPDATE_TSS(uint32_t value)
    {
        uint32_t curr = SYSTEM_TIME_SECONDS_UPDATE;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        SYSTEM_TIME_SECONDS_UPDATE = curr;
    }

    /**
     * Get SYSTEM_TIME_NANOSECONDS_UPDATE's ADDSUB bit.
     */
    bool get_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB()
    {
        return SYSTEM_TIME_NANOSECONDS_UPDATE & (1u << 31u);
    }

    /**
     * Set SYSTEM_TIME_NANOSECONDS_UPDATE's ADDSUB bit.
     */
    inline void set_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB()
    {
        SYSTEM_TIME_NANOSECONDS_UPDATE |= 1u << 31u;
    }

    /**
     * Clear SYSTEM_TIME_NANOSECONDS_UPDATE's ADDSUB bit.
     */
    inline void clear_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB()
    {
        SYSTEM_TIME_NANOSECONDS_UPDATE &= ~(1u << 31u);
    }

    /**
     * Toggle SYSTEM_TIME_NANOSECONDS_UPDATE's ADDSUB bit.
     */
    inline void toggle_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB()
    {
        SYSTEM_TIME_NANOSECONDS_UPDATE ^= 1u << 31u;
    }

    /**
     * Get SYSTEM_TIME_NANOSECONDS_UPDATE's TSSS field.
     */
    uint32_t get_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS()
    {
        return (SYSTEM_TIME_NANOSECONDS_UPDATE >> 0u) &
               0b1111111111111111111111111111111u;
    }

    /**
     * Set SYSTEM_TIME_NANOSECONDS_UPDATE's TSSS field.
     */
    inline void set_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS(uint32_t value)
    {
        uint32_t curr = SYSTEM_TIME_NANOSECONDS_UPDATE;

        curr &= ~(0b1111111111111111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111111111111111u) << 0u;

        SYSTEM_TIME_NANOSECONDS_UPDATE = curr;
    }

    /**
     * Get TIMESTAMP_ADDEND's TSAR field.
     */
    uint32_t get_TIMESTAMP_ADDEND_TSAR()
    {
        return (TIMESTAMP_ADDEND >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TIMESTAMP_ADDEND's TSAR field.
     */
    inline void set_TIMESTAMP_ADDEND_TSAR(uint32_t value)
    {
        uint32_t curr = TIMESTAMP_ADDEND;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TIMESTAMP_ADDEND = curr;
    }

    /**
     * Get TARGET_TIME_SECONDS's TSTR field.
     */
    uint32_t get_TARGET_TIME_SECONDS_TSTR()
    {
        return (TARGET_TIME_SECONDS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set TARGET_TIME_SECONDS's TSTR field.
     */
    inline void set_TARGET_TIME_SECONDS_TSTR(uint32_t value)
    {
        uint32_t curr = TARGET_TIME_SECONDS;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TARGET_TIME_SECONDS = curr;
    }

    /**
     * Get TARGET_TIME_NANOSECONDS's TRGTBUSY bit.
     */
    bool get_TARGET_TIME_NANOSECONDS_TRGTBUSY()
    {
        return TARGET_TIME_NANOSECONDS & (1u << 31u);
    }

    /**
     * Get TARGET_TIME_NANOSECONDS's TTSLO field.
     */
    uint32_t get_TARGET_TIME_NANOSECONDS_TTSLO()
    {
        return (TARGET_TIME_NANOSECONDS >> 0u) &
               0b1111111111111111111111111111111u;
    }

    /**
     * Set TARGET_TIME_NANOSECONDS's TTSLO field.
     */
    inline void set_TARGET_TIME_NANOSECONDS_TTSLO(uint32_t value)
    {
        uint32_t curr = TARGET_TIME_NANOSECONDS;

        curr &= ~(0b1111111111111111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111111111111111u) << 0u;

        TARGET_TIME_NANOSECONDS = curr;
    }

    /**
     * Get SYSTEM_TIME_HIGHER_WORD_SECONDS's TSHWR field.
     */
    uint16_t get_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR()
    {
        return (SYSTEM_TIME_HIGHER_WORD_SECONDS >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SYSTEM_TIME_HIGHER_WORD_SECONDS's TSHWR field.
     */
    inline void set_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR(uint16_t value)
    {
        uint32_t curr = SYSTEM_TIME_HIGHER_WORD_SECONDS;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SYSTEM_TIME_HIGHER_WORD_SECONDS = curr;
    }

    /**
     * Get TIMESTAMP_STATUS's TSTRGTERR3 bit.
     */
    bool get_TIMESTAMP_STATUS_TSTRGTERR3()
    {
        return TIMESTAMP_STATUS & (1u << 9u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTARGT3 bit.
     */
    bool get_TIMESTAMP_STATUS_TSTARGT3()
    {
        return TIMESTAMP_STATUS & (1u << 8u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTRGTERR2 bit.
     */
    bool get_TIMESTAMP_STATUS_TSTRGTERR2()
    {
        return TIMESTAMP_STATUS & (1u << 7u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTARGT2 bit.
     */
    bool get_TIMESTAMP_STATUS_TSTARGT2()
    {
        return TIMESTAMP_STATUS & (1u << 6u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTRGTERR1 bit.
     */
    bool get_TIMESTAMP_STATUS_TSTRGTERR1()
    {
        return TIMESTAMP_STATUS & (1u << 5u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTARGT1 bit.
     */
    bool get_TIMESTAMP_STATUS_TSTARGT1()
    {
        return TIMESTAMP_STATUS & (1u << 4u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTRGTERR bit.
     */
    bool get_TIMESTAMP_STATUS_TSTRGTERR()
    {
        return TIMESTAMP_STATUS & (1u << 3u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTARGT bit.
     */
    bool get_TIMESTAMP_STATUS_TSTARGT()
    {
        return TIMESTAMP_STATUS & (1u << 1u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSSOVF bit.
     */
    bool get_TIMESTAMP_STATUS_TSSOVF()
    {
        return TIMESTAMP_STATUS & (1u << 0u);
    }

    /**
     * Get BUS_MODE's PRWG field.
     */
    uint8_t get_BUS_MODE_PRWG()
    {
        return (BUS_MODE >> 28u) & 0b11u;
    }

    /**
     * Get BUS_MODE's TXPR bit.
     */
    bool get_BUS_MODE_TXPR()
    {
        return BUS_MODE & (1u << 27u);
    }

    /**
     * Set BUS_MODE's TXPR bit.
     */
    inline void set_BUS_MODE_TXPR()
    {
        BUS_MODE |= 1u << 27u;
    }

    /**
     * Clear BUS_MODE's TXPR bit.
     */
    inline void clear_BUS_MODE_TXPR()
    {
        BUS_MODE &= ~(1u << 27u);
    }

    /**
     * Toggle BUS_MODE's TXPR bit.
     */
    inline void toggle_BUS_MODE_TXPR()
    {
        BUS_MODE ^= 1u << 27u;
    }

    /**
     * Get BUS_MODE's MB bit.
     */
    bool get_BUS_MODE_MB()
    {
        return BUS_MODE & (1u << 26u);
    }

    /**
     * Set BUS_MODE's MB bit.
     */
    inline void set_BUS_MODE_MB()
    {
        BUS_MODE |= 1u << 26u;
    }

    /**
     * Clear BUS_MODE's MB bit.
     */
    inline void clear_BUS_MODE_MB()
    {
        BUS_MODE &= ~(1u << 26u);
    }

    /**
     * Toggle BUS_MODE's MB bit.
     */
    inline void toggle_BUS_MODE_MB()
    {
        BUS_MODE ^= 1u << 26u;
    }

    /**
     * Get BUS_MODE's AAL bit.
     */
    bool get_BUS_MODE_AAL()
    {
        return BUS_MODE & (1u << 25u);
    }

    /**
     * Set BUS_MODE's AAL bit.
     */
    inline void set_BUS_MODE_AAL()
    {
        BUS_MODE |= 1u << 25u;
    }

    /**
     * Clear BUS_MODE's AAL bit.
     */
    inline void clear_BUS_MODE_AAL()
    {
        BUS_MODE &= ~(1u << 25u);
    }

    /**
     * Toggle BUS_MODE's AAL bit.
     */
    inline void toggle_BUS_MODE_AAL()
    {
        BUS_MODE ^= 1u << 25u;
    }

    /**
     * Get BUS_MODE's PBLX8 bit.
     */
    bool get_BUS_MODE_PBLX8()
    {
        return BUS_MODE & (1u << 24u);
    }

    /**
     * Set BUS_MODE's PBLX8 bit.
     */
    inline void set_BUS_MODE_PBLX8()
    {
        BUS_MODE |= 1u << 24u;
    }

    /**
     * Clear BUS_MODE's PBLX8 bit.
     */
    inline void clear_BUS_MODE_PBLX8()
    {
        BUS_MODE &= ~(1u << 24u);
    }

    /**
     * Toggle BUS_MODE's PBLX8 bit.
     */
    inline void toggle_BUS_MODE_PBLX8()
    {
        BUS_MODE ^= 1u << 24u;
    }

    /**
     * Get BUS_MODE's USP bit.
     */
    bool get_BUS_MODE_USP()
    {
        return BUS_MODE & (1u << 23u);
    }

    /**
     * Set BUS_MODE's USP bit.
     */
    inline void set_BUS_MODE_USP()
    {
        BUS_MODE |= 1u << 23u;
    }

    /**
     * Clear BUS_MODE's USP bit.
     */
    inline void clear_BUS_MODE_USP()
    {
        BUS_MODE &= ~(1u << 23u);
    }

    /**
     * Toggle BUS_MODE's USP bit.
     */
    inline void toggle_BUS_MODE_USP()
    {
        BUS_MODE ^= 1u << 23u;
    }

    /**
     * Get BUS_MODE's RPBL field.
     */
    uint8_t get_BUS_MODE_RPBL()
    {
        return (BUS_MODE >> 17u) & 0b111111u;
    }

    /**
     * Set BUS_MODE's RPBL field.
     */
    inline void set_BUS_MODE_RPBL(uint8_t value)
    {
        uint32_t curr = BUS_MODE;

        curr &= ~(0b111111u << 17u);
        curr |= (value & 0b111111u) << 17u;

        BUS_MODE = curr;
    }

    /**
     * Get BUS_MODE's FB bit.
     */
    bool get_BUS_MODE_FB()
    {
        return BUS_MODE & (1u << 16u);
    }

    /**
     * Set BUS_MODE's FB bit.
     */
    inline void set_BUS_MODE_FB()
    {
        BUS_MODE |= 1u << 16u;
    }

    /**
     * Clear BUS_MODE's FB bit.
     */
    inline void clear_BUS_MODE_FB()
    {
        BUS_MODE &= ~(1u << 16u);
    }

    /**
     * Toggle BUS_MODE's FB bit.
     */
    inline void toggle_BUS_MODE_FB()
    {
        BUS_MODE ^= 1u << 16u;
    }

    /**
     * Get BUS_MODE's PR field.
     */
    uint8_t get_BUS_MODE_PR()
    {
        return (BUS_MODE >> 14u) & 0b11u;
    }

    /**
     * Set BUS_MODE's PR field.
     */
    inline void set_BUS_MODE_PR(uint8_t value)
    {
        uint32_t curr = BUS_MODE;

        curr &= ~(0b11u << 14u);
        curr |= (value & 0b11u) << 14u;

        BUS_MODE = curr;
    }

    /**
     * Get BUS_MODE's PBL field.
     */
    uint8_t get_BUS_MODE_PBL()
    {
        return (BUS_MODE >> 8u) & 0b111111u;
    }

    /**
     * Set BUS_MODE's PBL field.
     */
    inline void set_BUS_MODE_PBL(uint8_t value)
    {
        uint32_t curr = BUS_MODE;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        BUS_MODE = curr;
    }

    /**
     * Get BUS_MODE's ATDS bit.
     */
    bool get_BUS_MODE_ATDS()
    {
        return BUS_MODE & (1u << 7u);
    }

    /**
     * Set BUS_MODE's ATDS bit.
     */
    inline void set_BUS_MODE_ATDS()
    {
        BUS_MODE |= 1u << 7u;
    }

    /**
     * Clear BUS_MODE's ATDS bit.
     */
    inline void clear_BUS_MODE_ATDS()
    {
        BUS_MODE &= ~(1u << 7u);
    }

    /**
     * Toggle BUS_MODE's ATDS bit.
     */
    inline void toggle_BUS_MODE_ATDS()
    {
        BUS_MODE ^= 1u << 7u;
    }

    /**
     * Get BUS_MODE's DSL field.
     */
    uint8_t get_BUS_MODE_DSL()
    {
        return (BUS_MODE >> 2u) & 0b11111u;
    }

    /**
     * Set BUS_MODE's DSL field.
     */
    inline void set_BUS_MODE_DSL(uint8_t value)
    {
        uint32_t curr = BUS_MODE;

        curr &= ~(0b11111u << 2u);
        curr |= (value & 0b11111u) << 2u;

        BUS_MODE = curr;
    }

    /**
     * Get BUS_MODE's DA bit.
     */
    bool get_BUS_MODE_DA()
    {
        return BUS_MODE & (1u << 1u);
    }

    /**
     * Set BUS_MODE's DA bit.
     */
    inline void set_BUS_MODE_DA()
    {
        BUS_MODE |= 1u << 1u;
    }

    /**
     * Clear BUS_MODE's DA bit.
     */
    inline void clear_BUS_MODE_DA()
    {
        BUS_MODE &= ~(1u << 1u);
    }

    /**
     * Toggle BUS_MODE's DA bit.
     */
    inline void toggle_BUS_MODE_DA()
    {
        BUS_MODE ^= 1u << 1u;
    }

    /**
     * Get BUS_MODE's SWR bit.
     */
    bool get_BUS_MODE_SWR()
    {
        return BUS_MODE & (1u << 0u);
    }

    /**
     * Set BUS_MODE's SWR bit.
     */
    inline void set_BUS_MODE_SWR()
    {
        BUS_MODE |= 1u << 0u;
    }

    /**
     * Clear BUS_MODE's SWR bit.
     */
    inline void clear_BUS_MODE_SWR()
    {
        BUS_MODE &= ~(1u << 0u);
    }

    /**
     * Toggle BUS_MODE's SWR bit.
     */
    inline void toggle_BUS_MODE_SWR()
    {
        BUS_MODE ^= 1u << 0u;
    }

    /**
     * Get TRANSMIT_POLL_DEMAND's TPD field.
     */
    uint32_t get_TRANSMIT_POLL_DEMAND_TPD()
    {
        return (TRANSMIT_POLL_DEMAND >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set TRANSMIT_POLL_DEMAND's TPD field.
     */
    inline void set_TRANSMIT_POLL_DEMAND_TPD(uint32_t value)
    {
        uint32_t curr = TRANSMIT_POLL_DEMAND;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TRANSMIT_POLL_DEMAND = curr;
    }

    /**
     * Get RECEIVE_POLL_DEMAND's RPD field.
     */
    uint32_t get_RECEIVE_POLL_DEMAND_RPD()
    {
        return (RECEIVE_POLL_DEMAND >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set RECEIVE_POLL_DEMAND's RPD field.
     */
    inline void set_RECEIVE_POLL_DEMAND_RPD(uint32_t value)
    {
        uint32_t curr = RECEIVE_POLL_DEMAND;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        RECEIVE_POLL_DEMAND = curr;
    }

    /**
     * Get RECEIVE_DESCRIPTOR_LIST_ADDRESS's RDESLA_32bit field.
     */
    uint32_t get_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32bit()
    {
        return (RECEIVE_DESCRIPTOR_LIST_ADDRESS >> 2u) &
               0b111111111111111111111111111111u;
    }

    /**
     * Set RECEIVE_DESCRIPTOR_LIST_ADDRESS's RDESLA_32bit field.
     */
    inline void set_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32bit(
        uint32_t value)
    {
        uint32_t curr = RECEIVE_DESCRIPTOR_LIST_ADDRESS;

        curr &= ~(0b111111111111111111111111111111u << 2u);
        curr |= (value & 0b111111111111111111111111111111u) << 2u;

        RECEIVE_DESCRIPTOR_LIST_ADDRESS = curr;
    }

    /**
     * Get TRANSMIT_DESCRIPTOR_LIST_ADDRESS's TDESLA_32bit field.
     */
    uint32_t get_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32bit()
    {
        return (TRANSMIT_DESCRIPTOR_LIST_ADDRESS >> 2u) &
               0b111111111111111111111111111111u;
    }

    /**
     * Set TRANSMIT_DESCRIPTOR_LIST_ADDRESS's TDESLA_32bit field.
     */
    inline void set_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32bit(
        uint32_t value)
    {
        uint32_t curr = TRANSMIT_DESCRIPTOR_LIST_ADDRESS;

        curr &= ~(0b111111111111111111111111111111u << 2u);
        curr |= (value & 0b111111111111111111111111111111u) << 2u;

        TRANSMIT_DESCRIPTOR_LIST_ADDRESS = curr;
    }

    /**
     * Get STATUS's TTI bit.
     */
    bool get_STATUS_TTI()
    {
        return STATUS & (1u << 29u);
    }

    /**
     * Get STATUS's EPI bit.
     */
    bool get_STATUS_EPI()
    {
        return STATUS & (1u << 28u);
    }

    /**
     * Get STATUS's EMI bit.
     */
    bool get_STATUS_EMI()
    {
        return STATUS & (1u << 27u);
    }

    /**
     * Get STATUS's EB field.
     */
    uint8_t get_STATUS_EB()
    {
        return (STATUS >> 23u) & 0b111u;
    }

    /**
     * Get STATUS's TS field.
     */
    uint8_t get_STATUS_TS()
    {
        return (STATUS >> 20u) & 0b111u;
    }

    /**
     * Get STATUS's RS field.
     */
    uint8_t get_STATUS_RS()
    {
        return (STATUS >> 17u) & 0b111u;
    }

    /**
     * Get STATUS's NIS bit.
     */
    bool get_STATUS_NIS()
    {
        return STATUS & (1u << 16u);
    }

    /**
     * Set STATUS's NIS bit.
     */
    inline void set_STATUS_NIS()
    {
        STATUS |= 1u << 16u;
    }

    /**
     * Clear STATUS's NIS bit.
     */
    inline void clear_STATUS_NIS()
    {
        STATUS &= ~(1u << 16u);
    }

    /**
     * Toggle STATUS's NIS bit.
     */
    inline void toggle_STATUS_NIS()
    {
        STATUS ^= 1u << 16u;
    }

    /**
     * Get STATUS's AIS bit.
     */
    bool get_STATUS_AIS()
    {
        return STATUS & (1u << 15u);
    }

    /**
     * Set STATUS's AIS bit.
     */
    inline void set_STATUS_AIS()
    {
        STATUS |= 1u << 15u;
    }

    /**
     * Clear STATUS's AIS bit.
     */
    inline void clear_STATUS_AIS()
    {
        STATUS &= ~(1u << 15u);
    }

    /**
     * Toggle STATUS's AIS bit.
     */
    inline void toggle_STATUS_AIS()
    {
        STATUS ^= 1u << 15u;
    }

    /**
     * Get STATUS's ERI bit.
     */
    bool get_STATUS_ERI()
    {
        return STATUS & (1u << 14u);
    }

    /**
     * Set STATUS's ERI bit.
     */
    inline void set_STATUS_ERI()
    {
        STATUS |= 1u << 14u;
    }

    /**
     * Clear STATUS's ERI bit.
     */
    inline void clear_STATUS_ERI()
    {
        STATUS &= ~(1u << 14u);
    }

    /**
     * Toggle STATUS's ERI bit.
     */
    inline void toggle_STATUS_ERI()
    {
        STATUS ^= 1u << 14u;
    }

    /**
     * Get STATUS's FBI bit.
     */
    bool get_STATUS_FBI()
    {
        return STATUS & (1u << 13u);
    }

    /**
     * Set STATUS's FBI bit.
     */
    inline void set_STATUS_FBI()
    {
        STATUS |= 1u << 13u;
    }

    /**
     * Clear STATUS's FBI bit.
     */
    inline void clear_STATUS_FBI()
    {
        STATUS &= ~(1u << 13u);
    }

    /**
     * Toggle STATUS's FBI bit.
     */
    inline void toggle_STATUS_FBI()
    {
        STATUS ^= 1u << 13u;
    }

    /**
     * Get STATUS's ETI bit.
     */
    bool get_STATUS_ETI()
    {
        return STATUS & (1u << 10u);
    }

    /**
     * Set STATUS's ETI bit.
     */
    inline void set_STATUS_ETI()
    {
        STATUS |= 1u << 10u;
    }

    /**
     * Clear STATUS's ETI bit.
     */
    inline void clear_STATUS_ETI()
    {
        STATUS &= ~(1u << 10u);
    }

    /**
     * Toggle STATUS's ETI bit.
     */
    inline void toggle_STATUS_ETI()
    {
        STATUS ^= 1u << 10u;
    }

    /**
     * Get STATUS's RWT bit.
     */
    bool get_STATUS_RWT()
    {
        return STATUS & (1u << 9u);
    }

    /**
     * Set STATUS's RWT bit.
     */
    inline void set_STATUS_RWT()
    {
        STATUS |= 1u << 9u;
    }

    /**
     * Clear STATUS's RWT bit.
     */
    inline void clear_STATUS_RWT()
    {
        STATUS &= ~(1u << 9u);
    }

    /**
     * Toggle STATUS's RWT bit.
     */
    inline void toggle_STATUS_RWT()
    {
        STATUS ^= 1u << 9u;
    }

    /**
     * Get STATUS's RPS bit.
     */
    bool get_STATUS_RPS()
    {
        return STATUS & (1u << 8u);
    }

    /**
     * Set STATUS's RPS bit.
     */
    inline void set_STATUS_RPS()
    {
        STATUS |= 1u << 8u;
    }

    /**
     * Clear STATUS's RPS bit.
     */
    inline void clear_STATUS_RPS()
    {
        STATUS &= ~(1u << 8u);
    }

    /**
     * Toggle STATUS's RPS bit.
     */
    inline void toggle_STATUS_RPS()
    {
        STATUS ^= 1u << 8u;
    }

    /**
     * Get STATUS's RU bit.
     */
    bool get_STATUS_RU()
    {
        return STATUS & (1u << 7u);
    }

    /**
     * Set STATUS's RU bit.
     */
    inline void set_STATUS_RU()
    {
        STATUS |= 1u << 7u;
    }

    /**
     * Clear STATUS's RU bit.
     */
    inline void clear_STATUS_RU()
    {
        STATUS &= ~(1u << 7u);
    }

    /**
     * Toggle STATUS's RU bit.
     */
    inline void toggle_STATUS_RU()
    {
        STATUS ^= 1u << 7u;
    }

    /**
     * Get STATUS's RI bit.
     */
    bool get_STATUS_RI()
    {
        return STATUS & (1u << 6u);
    }

    /**
     * Set STATUS's RI bit.
     */
    inline void set_STATUS_RI()
    {
        STATUS |= 1u << 6u;
    }

    /**
     * Clear STATUS's RI bit.
     */
    inline void clear_STATUS_RI()
    {
        STATUS &= ~(1u << 6u);
    }

    /**
     * Toggle STATUS's RI bit.
     */
    inline void toggle_STATUS_RI()
    {
        STATUS ^= 1u << 6u;
    }

    /**
     * Get STATUS's UNF bit.
     */
    bool get_STATUS_UNF()
    {
        return STATUS & (1u << 5u);
    }

    /**
     * Set STATUS's UNF bit.
     */
    inline void set_STATUS_UNF()
    {
        STATUS |= 1u << 5u;
    }

    /**
     * Clear STATUS's UNF bit.
     */
    inline void clear_STATUS_UNF()
    {
        STATUS &= ~(1u << 5u);
    }

    /**
     * Toggle STATUS's UNF bit.
     */
    inline void toggle_STATUS_UNF()
    {
        STATUS ^= 1u << 5u;
    }

    /**
     * Get STATUS's OVF bit.
     */
    bool get_STATUS_OVF()
    {
        return STATUS & (1u << 4u);
    }

    /**
     * Set STATUS's OVF bit.
     */
    inline void set_STATUS_OVF()
    {
        STATUS |= 1u << 4u;
    }

    /**
     * Clear STATUS's OVF bit.
     */
    inline void clear_STATUS_OVF()
    {
        STATUS &= ~(1u << 4u);
    }

    /**
     * Toggle STATUS's OVF bit.
     */
    inline void toggle_STATUS_OVF()
    {
        STATUS ^= 1u << 4u;
    }

    /**
     * Get STATUS's TJT bit.
     */
    bool get_STATUS_TJT()
    {
        return STATUS & (1u << 3u);
    }

    /**
     * Set STATUS's TJT bit.
     */
    inline void set_STATUS_TJT()
    {
        STATUS |= 1u << 3u;
    }

    /**
     * Clear STATUS's TJT bit.
     */
    inline void clear_STATUS_TJT()
    {
        STATUS &= ~(1u << 3u);
    }

    /**
     * Toggle STATUS's TJT bit.
     */
    inline void toggle_STATUS_TJT()
    {
        STATUS ^= 1u << 3u;
    }

    /**
     * Get STATUS's TU bit.
     */
    bool get_STATUS_TU()
    {
        return STATUS & (1u << 2u);
    }

    /**
     * Set STATUS's TU bit.
     */
    inline void set_STATUS_TU()
    {
        STATUS |= 1u << 2u;
    }

    /**
     * Clear STATUS's TU bit.
     */
    inline void clear_STATUS_TU()
    {
        STATUS &= ~(1u << 2u);
    }

    /**
     * Toggle STATUS's TU bit.
     */
    inline void toggle_STATUS_TU()
    {
        STATUS ^= 1u << 2u;
    }

    /**
     * Get STATUS's TPS bit.
     */
    bool get_STATUS_TPS()
    {
        return STATUS & (1u << 1u);
    }

    /**
     * Set STATUS's TPS bit.
     */
    inline void set_STATUS_TPS()
    {
        STATUS |= 1u << 1u;
    }

    /**
     * Clear STATUS's TPS bit.
     */
    inline void clear_STATUS_TPS()
    {
        STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle STATUS's TPS bit.
     */
    inline void toggle_STATUS_TPS()
    {
        STATUS ^= 1u << 1u;
    }

    /**
     * Get STATUS's TI bit.
     */
    bool get_STATUS_TI()
    {
        return STATUS & (1u << 0u);
    }

    /**
     * Set STATUS's TI bit.
     */
    inline void set_STATUS_TI()
    {
        STATUS |= 1u << 0u;
    }

    /**
     * Clear STATUS's TI bit.
     */
    inline void clear_STATUS_TI()
    {
        STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle STATUS's TI bit.
     */
    inline void toggle_STATUS_TI()
    {
        STATUS ^= 1u << 0u;
    }

    /**
     * Get OPERATION_MODE's DT bit.
     */
    bool get_OPERATION_MODE_DT()
    {
        return OPERATION_MODE & (1u << 26u);
    }

    /**
     * Set OPERATION_MODE's DT bit.
     */
    inline void set_OPERATION_MODE_DT()
    {
        OPERATION_MODE |= 1u << 26u;
    }

    /**
     * Clear OPERATION_MODE's DT bit.
     */
    inline void clear_OPERATION_MODE_DT()
    {
        OPERATION_MODE &= ~(1u << 26u);
    }

    /**
     * Toggle OPERATION_MODE's DT bit.
     */
    inline void toggle_OPERATION_MODE_DT()
    {
        OPERATION_MODE ^= 1u << 26u;
    }

    /**
     * Get OPERATION_MODE's RSF bit.
     */
    bool get_OPERATION_MODE_RSF()
    {
        return OPERATION_MODE & (1u << 25u);
    }

    /**
     * Set OPERATION_MODE's RSF bit.
     */
    inline void set_OPERATION_MODE_RSF()
    {
        OPERATION_MODE |= 1u << 25u;
    }

    /**
     * Clear OPERATION_MODE's RSF bit.
     */
    inline void clear_OPERATION_MODE_RSF()
    {
        OPERATION_MODE &= ~(1u << 25u);
    }

    /**
     * Toggle OPERATION_MODE's RSF bit.
     */
    inline void toggle_OPERATION_MODE_RSF()
    {
        OPERATION_MODE ^= 1u << 25u;
    }

    /**
     * Get OPERATION_MODE's DFF bit.
     */
    bool get_OPERATION_MODE_DFF()
    {
        return OPERATION_MODE & (1u << 24u);
    }

    /**
     * Set OPERATION_MODE's DFF bit.
     */
    inline void set_OPERATION_MODE_DFF()
    {
        OPERATION_MODE |= 1u << 24u;
    }

    /**
     * Clear OPERATION_MODE's DFF bit.
     */
    inline void clear_OPERATION_MODE_DFF()
    {
        OPERATION_MODE &= ~(1u << 24u);
    }

    /**
     * Toggle OPERATION_MODE's DFF bit.
     */
    inline void toggle_OPERATION_MODE_DFF()
    {
        OPERATION_MODE ^= 1u << 24u;
    }

    /**
     * Get OPERATION_MODE's TSF bit.
     */
    bool get_OPERATION_MODE_TSF()
    {
        return OPERATION_MODE & (1u << 21u);
    }

    /**
     * Set OPERATION_MODE's TSF bit.
     */
    inline void set_OPERATION_MODE_TSF()
    {
        OPERATION_MODE |= 1u << 21u;
    }

    /**
     * Clear OPERATION_MODE's TSF bit.
     */
    inline void clear_OPERATION_MODE_TSF()
    {
        OPERATION_MODE &= ~(1u << 21u);
    }

    /**
     * Toggle OPERATION_MODE's TSF bit.
     */
    inline void toggle_OPERATION_MODE_TSF()
    {
        OPERATION_MODE ^= 1u << 21u;
    }

    /**
     * Get OPERATION_MODE's FTF bit.
     */
    bool get_OPERATION_MODE_FTF()
    {
        return OPERATION_MODE & (1u << 20u);
    }

    /**
     * Set OPERATION_MODE's FTF bit.
     */
    inline void set_OPERATION_MODE_FTF()
    {
        OPERATION_MODE |= 1u << 20u;
    }

    /**
     * Clear OPERATION_MODE's FTF bit.
     */
    inline void clear_OPERATION_MODE_FTF()
    {
        OPERATION_MODE &= ~(1u << 20u);
    }

    /**
     * Toggle OPERATION_MODE's FTF bit.
     */
    inline void toggle_OPERATION_MODE_FTF()
    {
        OPERATION_MODE ^= 1u << 20u;
    }

    /**
     * Get OPERATION_MODE's TTC field.
     */
    uint8_t get_OPERATION_MODE_TTC()
    {
        return (OPERATION_MODE >> 14u) & 0b111u;
    }

    /**
     * Set OPERATION_MODE's TTC field.
     */
    inline void set_OPERATION_MODE_TTC(uint8_t value)
    {
        uint32_t curr = OPERATION_MODE;

        curr &= ~(0b111u << 14u);
        curr |= (value & 0b111u) << 14u;

        OPERATION_MODE = curr;
    }

    /**
     * Get OPERATION_MODE's ST bit.
     */
    bool get_OPERATION_MODE_ST()
    {
        return OPERATION_MODE & (1u << 13u);
    }

    /**
     * Set OPERATION_MODE's ST bit.
     */
    inline void set_OPERATION_MODE_ST()
    {
        OPERATION_MODE |= 1u << 13u;
    }

    /**
     * Clear OPERATION_MODE's ST bit.
     */
    inline void clear_OPERATION_MODE_ST()
    {
        OPERATION_MODE &= ~(1u << 13u);
    }

    /**
     * Toggle OPERATION_MODE's ST bit.
     */
    inline void toggle_OPERATION_MODE_ST()
    {
        OPERATION_MODE ^= 1u << 13u;
    }

    /**
     * Get OPERATION_MODE's FEF bit.
     */
    bool get_OPERATION_MODE_FEF()
    {
        return OPERATION_MODE & (1u << 7u);
    }

    /**
     * Set OPERATION_MODE's FEF bit.
     */
    inline void set_OPERATION_MODE_FEF()
    {
        OPERATION_MODE |= 1u << 7u;
    }

    /**
     * Clear OPERATION_MODE's FEF bit.
     */
    inline void clear_OPERATION_MODE_FEF()
    {
        OPERATION_MODE &= ~(1u << 7u);
    }

    /**
     * Toggle OPERATION_MODE's FEF bit.
     */
    inline void toggle_OPERATION_MODE_FEF()
    {
        OPERATION_MODE ^= 1u << 7u;
    }

    /**
     * Get OPERATION_MODE's FUF bit.
     */
    bool get_OPERATION_MODE_FUF()
    {
        return OPERATION_MODE & (1u << 6u);
    }

    /**
     * Set OPERATION_MODE's FUF bit.
     */
    inline void set_OPERATION_MODE_FUF()
    {
        OPERATION_MODE |= 1u << 6u;
    }

    /**
     * Clear OPERATION_MODE's FUF bit.
     */
    inline void clear_OPERATION_MODE_FUF()
    {
        OPERATION_MODE &= ~(1u << 6u);
    }

    /**
     * Toggle OPERATION_MODE's FUF bit.
     */
    inline void toggle_OPERATION_MODE_FUF()
    {
        OPERATION_MODE ^= 1u << 6u;
    }

    /**
     * Get OPERATION_MODE's RTC field.
     */
    uint8_t get_OPERATION_MODE_RTC()
    {
        return (OPERATION_MODE >> 3u) & 0b11u;
    }

    /**
     * Set OPERATION_MODE's RTC field.
     */
    inline void set_OPERATION_MODE_RTC(uint8_t value)
    {
        uint32_t curr = OPERATION_MODE;

        curr &= ~(0b11u << 3u);
        curr |= (value & 0b11u) << 3u;

        OPERATION_MODE = curr;
    }

    /**
     * Get OPERATION_MODE's OSF bit.
     */
    bool get_OPERATION_MODE_OSF()
    {
        return OPERATION_MODE & (1u << 2u);
    }

    /**
     * Set OPERATION_MODE's OSF bit.
     */
    inline void set_OPERATION_MODE_OSF()
    {
        OPERATION_MODE |= 1u << 2u;
    }

    /**
     * Clear OPERATION_MODE's OSF bit.
     */
    inline void clear_OPERATION_MODE_OSF()
    {
        OPERATION_MODE &= ~(1u << 2u);
    }

    /**
     * Toggle OPERATION_MODE's OSF bit.
     */
    inline void toggle_OPERATION_MODE_OSF()
    {
        OPERATION_MODE ^= 1u << 2u;
    }

    /**
     * Get OPERATION_MODE's SR bit.
     */
    bool get_OPERATION_MODE_SR()
    {
        return OPERATION_MODE & (1u << 1u);
    }

    /**
     * Set OPERATION_MODE's SR bit.
     */
    inline void set_OPERATION_MODE_SR()
    {
        OPERATION_MODE |= 1u << 1u;
    }

    /**
     * Clear OPERATION_MODE's SR bit.
     */
    inline void clear_OPERATION_MODE_SR()
    {
        OPERATION_MODE &= ~(1u << 1u);
    }

    /**
     * Toggle OPERATION_MODE's SR bit.
     */
    inline void toggle_OPERATION_MODE_SR()
    {
        OPERATION_MODE ^= 1u << 1u;
    }

    /**
     * Get INTERRUPT_ENABLE's NIE bit.
     */
    bool get_INTERRUPT_ENABLE_NIE()
    {
        return INTERRUPT_ENABLE & (1u << 16u);
    }

    /**
     * Set INTERRUPT_ENABLE's NIE bit.
     */
    inline void set_INTERRUPT_ENABLE_NIE()
    {
        INTERRUPT_ENABLE |= 1u << 16u;
    }

    /**
     * Clear INTERRUPT_ENABLE's NIE bit.
     */
    inline void clear_INTERRUPT_ENABLE_NIE()
    {
        INTERRUPT_ENABLE &= ~(1u << 16u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's NIE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_NIE()
    {
        INTERRUPT_ENABLE ^= 1u << 16u;
    }

    /**
     * Get INTERRUPT_ENABLE's AIE bit.
     */
    bool get_INTERRUPT_ENABLE_AIE()
    {
        return INTERRUPT_ENABLE & (1u << 15u);
    }

    /**
     * Set INTERRUPT_ENABLE's AIE bit.
     */
    inline void set_INTERRUPT_ENABLE_AIE()
    {
        INTERRUPT_ENABLE |= 1u << 15u;
    }

    /**
     * Clear INTERRUPT_ENABLE's AIE bit.
     */
    inline void clear_INTERRUPT_ENABLE_AIE()
    {
        INTERRUPT_ENABLE &= ~(1u << 15u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's AIE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_AIE()
    {
        INTERRUPT_ENABLE ^= 1u << 15u;
    }

    /**
     * Get INTERRUPT_ENABLE's ERE bit.
     */
    bool get_INTERRUPT_ENABLE_ERE()
    {
        return INTERRUPT_ENABLE & (1u << 14u);
    }

    /**
     * Set INTERRUPT_ENABLE's ERE bit.
     */
    inline void set_INTERRUPT_ENABLE_ERE()
    {
        INTERRUPT_ENABLE |= 1u << 14u;
    }

    /**
     * Clear INTERRUPT_ENABLE's ERE bit.
     */
    inline void clear_INTERRUPT_ENABLE_ERE()
    {
        INTERRUPT_ENABLE &= ~(1u << 14u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's ERE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_ERE()
    {
        INTERRUPT_ENABLE ^= 1u << 14u;
    }

    /**
     * Get INTERRUPT_ENABLE's FBE bit.
     */
    bool get_INTERRUPT_ENABLE_FBE()
    {
        return INTERRUPT_ENABLE & (1u << 13u);
    }

    /**
     * Set INTERRUPT_ENABLE's FBE bit.
     */
    inline void set_INTERRUPT_ENABLE_FBE()
    {
        INTERRUPT_ENABLE |= 1u << 13u;
    }

    /**
     * Clear INTERRUPT_ENABLE's FBE bit.
     */
    inline void clear_INTERRUPT_ENABLE_FBE()
    {
        INTERRUPT_ENABLE &= ~(1u << 13u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's FBE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_FBE()
    {
        INTERRUPT_ENABLE ^= 1u << 13u;
    }

    /**
     * Get INTERRUPT_ENABLE's ETE bit.
     */
    bool get_INTERRUPT_ENABLE_ETE()
    {
        return INTERRUPT_ENABLE & (1u << 10u);
    }

    /**
     * Set INTERRUPT_ENABLE's ETE bit.
     */
    inline void set_INTERRUPT_ENABLE_ETE()
    {
        INTERRUPT_ENABLE |= 1u << 10u;
    }

    /**
     * Clear INTERRUPT_ENABLE's ETE bit.
     */
    inline void clear_INTERRUPT_ENABLE_ETE()
    {
        INTERRUPT_ENABLE &= ~(1u << 10u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's ETE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_ETE()
    {
        INTERRUPT_ENABLE ^= 1u << 10u;
    }

    /**
     * Get INTERRUPT_ENABLE's RWE bit.
     */
    bool get_INTERRUPT_ENABLE_RWE()
    {
        return INTERRUPT_ENABLE & (1u << 9u);
    }

    /**
     * Set INTERRUPT_ENABLE's RWE bit.
     */
    inline void set_INTERRUPT_ENABLE_RWE()
    {
        INTERRUPT_ENABLE |= 1u << 9u;
    }

    /**
     * Clear INTERRUPT_ENABLE's RWE bit.
     */
    inline void clear_INTERRUPT_ENABLE_RWE()
    {
        INTERRUPT_ENABLE &= ~(1u << 9u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's RWE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_RWE()
    {
        INTERRUPT_ENABLE ^= 1u << 9u;
    }

    /**
     * Get INTERRUPT_ENABLE's RSE bit.
     */
    bool get_INTERRUPT_ENABLE_RSE()
    {
        return INTERRUPT_ENABLE & (1u << 8u);
    }

    /**
     * Set INTERRUPT_ENABLE's RSE bit.
     */
    inline void set_INTERRUPT_ENABLE_RSE()
    {
        INTERRUPT_ENABLE |= 1u << 8u;
    }

    /**
     * Clear INTERRUPT_ENABLE's RSE bit.
     */
    inline void clear_INTERRUPT_ENABLE_RSE()
    {
        INTERRUPT_ENABLE &= ~(1u << 8u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's RSE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_RSE()
    {
        INTERRUPT_ENABLE ^= 1u << 8u;
    }

    /**
     * Get INTERRUPT_ENABLE's RUE bit.
     */
    bool get_INTERRUPT_ENABLE_RUE()
    {
        return INTERRUPT_ENABLE & (1u << 7u);
    }

    /**
     * Set INTERRUPT_ENABLE's RUE bit.
     */
    inline void set_INTERRUPT_ENABLE_RUE()
    {
        INTERRUPT_ENABLE |= 1u << 7u;
    }

    /**
     * Clear INTERRUPT_ENABLE's RUE bit.
     */
    inline void clear_INTERRUPT_ENABLE_RUE()
    {
        INTERRUPT_ENABLE &= ~(1u << 7u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's RUE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_RUE()
    {
        INTERRUPT_ENABLE ^= 1u << 7u;
    }

    /**
     * Get INTERRUPT_ENABLE's RIE bit.
     */
    bool get_INTERRUPT_ENABLE_RIE()
    {
        return INTERRUPT_ENABLE & (1u << 6u);
    }

    /**
     * Set INTERRUPT_ENABLE's RIE bit.
     */
    inline void set_INTERRUPT_ENABLE_RIE()
    {
        INTERRUPT_ENABLE |= 1u << 6u;
    }

    /**
     * Clear INTERRUPT_ENABLE's RIE bit.
     */
    inline void clear_INTERRUPT_ENABLE_RIE()
    {
        INTERRUPT_ENABLE &= ~(1u << 6u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's RIE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_RIE()
    {
        INTERRUPT_ENABLE ^= 1u << 6u;
    }

    /**
     * Get INTERRUPT_ENABLE's UNE bit.
     */
    bool get_INTERRUPT_ENABLE_UNE()
    {
        return INTERRUPT_ENABLE & (1u << 5u);
    }

    /**
     * Set INTERRUPT_ENABLE's UNE bit.
     */
    inline void set_INTERRUPT_ENABLE_UNE()
    {
        INTERRUPT_ENABLE |= 1u << 5u;
    }

    /**
     * Clear INTERRUPT_ENABLE's UNE bit.
     */
    inline void clear_INTERRUPT_ENABLE_UNE()
    {
        INTERRUPT_ENABLE &= ~(1u << 5u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's UNE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_UNE()
    {
        INTERRUPT_ENABLE ^= 1u << 5u;
    }

    /**
     * Get INTERRUPT_ENABLE's OVE bit.
     */
    bool get_INTERRUPT_ENABLE_OVE()
    {
        return INTERRUPT_ENABLE & (1u << 4u);
    }

    /**
     * Set INTERRUPT_ENABLE's OVE bit.
     */
    inline void set_INTERRUPT_ENABLE_OVE()
    {
        INTERRUPT_ENABLE |= 1u << 4u;
    }

    /**
     * Clear INTERRUPT_ENABLE's OVE bit.
     */
    inline void clear_INTERRUPT_ENABLE_OVE()
    {
        INTERRUPT_ENABLE &= ~(1u << 4u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's OVE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_OVE()
    {
        INTERRUPT_ENABLE ^= 1u << 4u;
    }

    /**
     * Get INTERRUPT_ENABLE's TJE bit.
     */
    bool get_INTERRUPT_ENABLE_TJE()
    {
        return INTERRUPT_ENABLE & (1u << 3u);
    }

    /**
     * Set INTERRUPT_ENABLE's TJE bit.
     */
    inline void set_INTERRUPT_ENABLE_TJE()
    {
        INTERRUPT_ENABLE |= 1u << 3u;
    }

    /**
     * Clear INTERRUPT_ENABLE's TJE bit.
     */
    inline void clear_INTERRUPT_ENABLE_TJE()
    {
        INTERRUPT_ENABLE &= ~(1u << 3u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's TJE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_TJE()
    {
        INTERRUPT_ENABLE ^= 1u << 3u;
    }

    /**
     * Get INTERRUPT_ENABLE's TUE bit.
     */
    bool get_INTERRUPT_ENABLE_TUE()
    {
        return INTERRUPT_ENABLE & (1u << 2u);
    }

    /**
     * Set INTERRUPT_ENABLE's TUE bit.
     */
    inline void set_INTERRUPT_ENABLE_TUE()
    {
        INTERRUPT_ENABLE |= 1u << 2u;
    }

    /**
     * Clear INTERRUPT_ENABLE's TUE bit.
     */
    inline void clear_INTERRUPT_ENABLE_TUE()
    {
        INTERRUPT_ENABLE &= ~(1u << 2u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's TUE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_TUE()
    {
        INTERRUPT_ENABLE ^= 1u << 2u;
    }

    /**
     * Get INTERRUPT_ENABLE's TSE bit.
     */
    bool get_INTERRUPT_ENABLE_TSE()
    {
        return INTERRUPT_ENABLE & (1u << 1u);
    }

    /**
     * Set INTERRUPT_ENABLE's TSE bit.
     */
    inline void set_INTERRUPT_ENABLE_TSE()
    {
        INTERRUPT_ENABLE |= 1u << 1u;
    }

    /**
     * Clear INTERRUPT_ENABLE's TSE bit.
     */
    inline void clear_INTERRUPT_ENABLE_TSE()
    {
        INTERRUPT_ENABLE &= ~(1u << 1u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's TSE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_TSE()
    {
        INTERRUPT_ENABLE ^= 1u << 1u;
    }

    /**
     * Get INTERRUPT_ENABLE's TIE bit.
     */
    bool get_INTERRUPT_ENABLE_TIE()
    {
        return INTERRUPT_ENABLE & (1u << 0u);
    }

    /**
     * Set INTERRUPT_ENABLE's TIE bit.
     */
    inline void set_INTERRUPT_ENABLE_TIE()
    {
        INTERRUPT_ENABLE |= 1u << 0u;
    }

    /**
     * Clear INTERRUPT_ENABLE's TIE bit.
     */
    inline void clear_INTERRUPT_ENABLE_TIE()
    {
        INTERRUPT_ENABLE &= ~(1u << 0u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's TIE bit.
     */
    inline void toggle_INTERRUPT_ENABLE_TIE()
    {
        INTERRUPT_ENABLE ^= 1u << 0u;
    }

    /**
     * Get MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER's OVFCNTOVF bit.
     */
    bool get_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF()
    {
        return MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER & (1u << 28u);
    }

    /**
     * Get MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER's OVFFRMCNT field.
     */
    uint16_t get_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT()
    {
        return (MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER >> 17u) &
               0b11111111111u;
    }

    /**
     * Get MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER's MISCNTOVF bit.
     */
    bool get_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF()
    {
        return MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER & (1u << 16u);
    }

    /**
     * Get MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER's MISFRMCNT field.
     */
    uint16_t get_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT()
    {
        return (MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER >> 0u) &
               0b1111111111111111u;
    }

    /**
     * Get RECEIVE_INTERRUPT_WATCHDOG_TIMER's RIWT field.
     */
    uint8_t get_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT()
    {
        return (RECEIVE_INTERRUPT_WATCHDOG_TIMER >> 0u) & 0b11111111u;
    }

    /**
     * Set RECEIVE_INTERRUPT_WATCHDOG_TIMER's RIWT field.
     */
    inline void set_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT(uint8_t value)
    {
        uint32_t curr = RECEIVE_INTERRUPT_WATCHDOG_TIMER;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        RECEIVE_INTERRUPT_WATCHDOG_TIMER = curr;
    }

    /**
     * Get AHB_STATUS's AHBMS bit.
     */
    bool get_AHB_STATUS_AHBMS()
    {
        return AHB_STATUS & (1u << 0u);
    }

    /**
     * Get CURRENT_HOST_TRANSMIT_DESCRIPTOR's CURTDESAPTR field.
     */
    uint32_t get_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR()
    {
        return (CURRENT_HOST_TRANSMIT_DESCRIPTOR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get CURRENT_HOST_RECEIVE_DESCRIPTOR's CURRDESAPTR field.
     */
    uint32_t get_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR()
    {
        return (CURRENT_HOST_RECEIVE_DESCRIPTOR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS's CURTBUFAPTR field.
     */
    uint32_t get_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR()
    {
        return (CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get CURRENT_HOST_RECEIVE_BUFFER_ADDRESS's CURRBUFAPTR field.
     */
    uint32_t get_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR()
    {
        return (CURRENT_HOST_RECEIVE_BUFFER_ADDRESS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get HW_FEATURE's ACTPHYIF field.
     */
    uint8_t get_HW_FEATURE_ACTPHYIF()
    {
        return (HW_FEATURE >> 28u) & 0b111u;
    }

    /**
     * Get HW_FEATURE's SAVLANINS bit.
     */
    bool get_HW_FEATURE_SAVLANINS()
    {
        return HW_FEATURE & (1u << 27u);
    }

    /**
     * Get HW_FEATURE's FLEXIPPSEN bit.
     */
    bool get_HW_FEATURE_FLEXIPPSEN()
    {
        return HW_FEATURE & (1u << 26u);
    }

    /**
     * Get HW_FEATURE's INTTSEN bit.
     */
    bool get_HW_FEATURE_INTTSEN()
    {
        return HW_FEATURE & (1u << 25u);
    }

    /**
     * Get HW_FEATURE's ENHDESSEL bit.
     */
    bool get_HW_FEATURE_ENHDESSEL()
    {
        return HW_FEATURE & (1u << 24u);
    }

    /**
     * Get HW_FEATURE's TXCHCNT field.
     */
    uint8_t get_HW_FEATURE_TXCHCNT()
    {
        return (HW_FEATURE >> 22u) & 0b11u;
    }

    /**
     * Get HW_FEATURE's RXCHCNT field.
     */
    uint8_t get_HW_FEATURE_RXCHCNT()
    {
        return (HW_FEATURE >> 20u) & 0b11u;
    }

    /**
     * Get HW_FEATURE's RXFIFOSIZE bit.
     */
    bool get_HW_FEATURE_RXFIFOSIZE()
    {
        return HW_FEATURE & (1u << 19u);
    }

    /**
     * Set HW_FEATURE's RXFIFOSIZE bit.
     */
    inline void set_HW_FEATURE_RXFIFOSIZE()
    {
        HW_FEATURE |= 1u << 19u;
    }

    /**
     * Clear HW_FEATURE's RXFIFOSIZE bit.
     */
    inline void clear_HW_FEATURE_RXFIFOSIZE()
    {
        HW_FEATURE &= ~(1u << 19u);
    }

    /**
     * Toggle HW_FEATURE's RXFIFOSIZE bit.
     */
    inline void toggle_HW_FEATURE_RXFIFOSIZE()
    {
        HW_FEATURE ^= 1u << 19u;
    }

    /**
     * Get HW_FEATURE's RXTYP2COE bit.
     */
    bool get_HW_FEATURE_RXTYP2COE()
    {
        return HW_FEATURE & (1u << 18u);
    }

    /**
     * Get HW_FEATURE's RXTYP1COE bit.
     */
    bool get_HW_FEATURE_RXTYP1COE()
    {
        return HW_FEATURE & (1u << 17u);
    }

    /**
     * Get HW_FEATURE's TXCOESEL bit.
     */
    bool get_HW_FEATURE_TXCOESEL()
    {
        return HW_FEATURE & (1u << 16u);
    }

    /**
     * Get HW_FEATURE's AVSEL bit.
     */
    bool get_HW_FEATURE_AVSEL()
    {
        return HW_FEATURE & (1u << 15u);
    }

    /**
     * Get HW_FEATURE's EEESEL bit.
     */
    bool get_HW_FEATURE_EEESEL()
    {
        return HW_FEATURE & (1u << 14u);
    }

    /**
     * Get HW_FEATURE's TSVER2SEL bit.
     */
    bool get_HW_FEATURE_TSVER2SEL()
    {
        return HW_FEATURE & (1u << 13u);
    }

    /**
     * Get HW_FEATURE's TSVER1SEL bit.
     */
    bool get_HW_FEATURE_TSVER1SEL()
    {
        return HW_FEATURE & (1u << 12u);
    }

    /**
     * Get HW_FEATURE's MMCSEL bit.
     */
    bool get_HW_FEATURE_MMCSEL()
    {
        return HW_FEATURE & (1u << 11u);
    }

    /**
     * Get HW_FEATURE's MGKSEL bit.
     */
    bool get_HW_FEATURE_MGKSEL()
    {
        return HW_FEATURE & (1u << 10u);
    }

    /**
     * Get HW_FEATURE's RWKSEL bit.
     */
    bool get_HW_FEATURE_RWKSEL()
    {
        return HW_FEATURE & (1u << 9u);
    }

    /**
     * Get HW_FEATURE's SMASEL bit.
     */
    bool get_HW_FEATURE_SMASEL()
    {
        return HW_FEATURE & (1u << 8u);
    }

    /**
     * Get HW_FEATURE's L3L4FLTREN bit.
     */
    bool get_HW_FEATURE_L3L4FLTREN()
    {
        return HW_FEATURE & (1u << 7u);
    }

    /**
     * Get HW_FEATURE's PCSSEL bit.
     */
    bool get_HW_FEATURE_PCSSEL()
    {
        return HW_FEATURE & (1u << 6u);
    }

    /**
     * Get HW_FEATURE's ADDMACADRSEL bit.
     */
    bool get_HW_FEATURE_ADDMACADRSEL()
    {
        return HW_FEATURE & (1u << 5u);
    }

    /**
     * Get HW_FEATURE's HASHSEL bit.
     */
    bool get_HW_FEATURE_HASHSEL()
    {
        return HW_FEATURE & (1u << 4u);
    }

    /**
     * Get HW_FEATURE's EXTHASHEN bit.
     */
    bool get_HW_FEATURE_EXTHASHEN()
    {
        return HW_FEATURE & (1u << 3u);
    }

    /**
     * Get HW_FEATURE's HDSEL bit.
     */
    bool get_HW_FEATURE_HDSEL()
    {
        return HW_FEATURE & (1u << 2u);
    }

    /**
     * Get HW_FEATURE's GMIISEL bit.
     */
    bool get_HW_FEATURE_GMIISEL()
    {
        return HW_FEATURE & (1u << 1u);
    }

    /**
     * Get HW_FEATURE's MIISEL bit.
     */
    bool get_HW_FEATURE_MIISEL()
    {
        return HW_FEATURE & (1u << 0u);
    }
};

static_assert(sizeof(eth) == eth::size);

static volatile eth *const ETH0 = reinterpret_cast<eth *>(0x5000C000);

static volatile eth *const ETH0_CON = reinterpret_cast<eth *>(0x50004040);

}; // namespace XMC4700
