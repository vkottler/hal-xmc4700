/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include "../enums/CAN_MOAMR_MIDE.h"
#include "../enums/CAN_MOAR_IDE.h"
#include "../enums/CAN_MOAR_PRI.h"
#include "../enums/CAN_MOFCR_DATC.h"
#include "../enums/CAN_MOFCR_DLCC.h"
#include "../enums/CAN_MOFCR_FRREN.h"
#include "../enums/CAN_MOFCR_GDFS.h"
#include "../enums/CAN_MOFCR_IDC.h"
#include "../enums/CAN_MOFCR_MMC.h"
#include "../enums/CAN_MOFCR_OVIE.h"
#include "../enums/CAN_MOFCR_RMM.h"
#include "../enums/CAN_MOFCR_RXIE.h"
#include "../enums/CAN_MOFCR_RXTOE.h"
#include "../enums/CAN_MOFCR_TXIE.h"
#include "../enums/CAN_MOIPR_RXINP.h"
#include "../enums/CAN_MOIPR_TXINP.h"
#include "../enums/CAN_MOSTAT_DIR.h"
#include "../enums/CAN_MOSTAT_MSGLST.h"
#include "../enums/CAN_MOSTAT_MSGVAL.h"
#include "../enums/CAN_MOSTAT_NEWDAT.h"
#include "../enums/CAN_MOSTAT_RTSEL.h"
#include "../enums/CAN_MOSTAT_RXEN.h"
#include "../enums/CAN_MOSTAT_RXPND.h"
#include "../enums/CAN_MOSTAT_RXUPD.h"
#include "../enums/CAN_MOSTAT_TXEN0.h"
#include "../enums/CAN_MOSTAT_TXEN1.h"
#include "../enums/CAN_MOSTAT_TXPND.h"
#include "../enums/CAN_MOSTAT_TXRQ.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Message Object Registers
 */
struct [[gnu::packed]] CAN_MO
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< CAN_MO's identifier. */
    static constexpr std::size_t size = 32; /*!< CAN_MO's size in bytes. */

    /* Fields. */
    union {
        uint32_t MOCTR; /* (write-only) Message Object Control Register */
        const uint32_t MOSTAT =
            {}; /* (read-only) Message Object Status Register */
    };
    uint32_t
        MOFCR; /*!< (read-write) Message Object Function Control Register */
    uint32_t MOFGPR; /*!< (read-write) Message Object FIFO/Gateway Pointer
                        Register */
    uint32_t
        MOIPR; /*!< (read-write) Message Object Interrupt Pointer Register */
    uint32_t
        MOAMR; /*!< (read-write) Message Object Acceptance Mask Register */
    uint32_t MODATAL; /*!< (read-write) Message Object Data Register Low */
    uint32_t MODATAH; /*!< (read-write) Message Object Data Register High */
    uint32_t MOAR;    /*!< (read-write) Message Object Arbitration Register */

    /* Methods. */

    /**
     * Get MOFCR's DLC field.
     */
    uint8_t get_MOFCR_DLC()
    {
        return (MOFCR >> 24u) & 0b1111u;
    }

    /**
     * Set MOFCR's DLC field.
     */
    inline void set_MOFCR_DLC(uint8_t value)
    {
        uint32_t curr = MOFCR;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        MOFCR = curr;
    }

    /**
     * Get MOFCR's STT bit.
     */
    bool get_MOFCR_STT()
    {
        return MOFCR & (1u << 23u);
    }

    /**
     * Set MOFCR's STT bit.
     */
    inline void set_MOFCR_STT()
    {
        MOFCR |= 1u << 23u;
    }

    /**
     * Clear MOFCR's STT bit.
     */
    inline void clear_MOFCR_STT()
    {
        MOFCR &= ~(1u << 23u);
    }

    /**
     * Toggle MOFCR's STT bit.
     */
    inline void toggle_MOFCR_STT()
    {
        MOFCR ^= 1u << 23u;
    }

    /**
     * Get MOFCR's SDT bit.
     */
    bool get_MOFCR_SDT()
    {
        return MOFCR & (1u << 22u);
    }

    /**
     * Set MOFCR's SDT bit.
     */
    inline void set_MOFCR_SDT()
    {
        MOFCR |= 1u << 22u;
    }

    /**
     * Clear MOFCR's SDT bit.
     */
    inline void clear_MOFCR_SDT()
    {
        MOFCR &= ~(1u << 22u);
    }

    /**
     * Toggle MOFCR's SDT bit.
     */
    inline void toggle_MOFCR_SDT()
    {
        MOFCR ^= 1u << 22u;
    }

    /**
     * Get MOFCR's RMM bit.
     */
    CAN_MOFCR_RMM get_MOFCR_RMM()
    {
        return CAN_MOFCR_RMM(MOFCR & (1u << 21u));
    }

    /**
     * Set MOFCR's RMM bit.
     */
    inline void set_MOFCR_RMM()
    {
        MOFCR |= 1u << 21u;
    }

    /**
     * Clear MOFCR's RMM bit.
     */
    inline void clear_MOFCR_RMM()
    {
        MOFCR &= ~(1u << 21u);
    }

    /**
     * Toggle MOFCR's RMM bit.
     */
    inline void toggle_MOFCR_RMM()
    {
        MOFCR ^= 1u << 21u;
    }

    /**
     * Get MOFCR's FRREN bit.
     */
    CAN_MOFCR_FRREN get_MOFCR_FRREN()
    {
        return CAN_MOFCR_FRREN(MOFCR & (1u << 20u));
    }

    /**
     * Set MOFCR's FRREN bit.
     */
    inline void set_MOFCR_FRREN()
    {
        MOFCR |= 1u << 20u;
    }

    /**
     * Clear MOFCR's FRREN bit.
     */
    inline void clear_MOFCR_FRREN()
    {
        MOFCR &= ~(1u << 20u);
    }

    /**
     * Toggle MOFCR's FRREN bit.
     */
    inline void toggle_MOFCR_FRREN()
    {
        MOFCR ^= 1u << 20u;
    }

    /**
     * Get MOFCR's OVIE bit.
     */
    CAN_MOFCR_OVIE get_MOFCR_OVIE()
    {
        return CAN_MOFCR_OVIE(MOFCR & (1u << 18u));
    }

    /**
     * Set MOFCR's OVIE bit.
     */
    inline void set_MOFCR_OVIE()
    {
        MOFCR |= 1u << 18u;
    }

    /**
     * Clear MOFCR's OVIE bit.
     */
    inline void clear_MOFCR_OVIE()
    {
        MOFCR &= ~(1u << 18u);
    }

    /**
     * Toggle MOFCR's OVIE bit.
     */
    inline void toggle_MOFCR_OVIE()
    {
        MOFCR ^= 1u << 18u;
    }

    /**
     * Get MOFCR's TXIE bit.
     */
    CAN_MOFCR_TXIE get_MOFCR_TXIE()
    {
        return CAN_MOFCR_TXIE(MOFCR & (1u << 17u));
    }

    /**
     * Set MOFCR's TXIE bit.
     */
    inline void set_MOFCR_TXIE()
    {
        MOFCR |= 1u << 17u;
    }

    /**
     * Clear MOFCR's TXIE bit.
     */
    inline void clear_MOFCR_TXIE()
    {
        MOFCR &= ~(1u << 17u);
    }

    /**
     * Toggle MOFCR's TXIE bit.
     */
    inline void toggle_MOFCR_TXIE()
    {
        MOFCR ^= 1u << 17u;
    }

    /**
     * Get MOFCR's RXIE bit.
     */
    CAN_MOFCR_RXIE get_MOFCR_RXIE()
    {
        return CAN_MOFCR_RXIE(MOFCR & (1u << 16u));
    }

    /**
     * Set MOFCR's RXIE bit.
     */
    inline void set_MOFCR_RXIE()
    {
        MOFCR |= 1u << 16u;
    }

    /**
     * Clear MOFCR's RXIE bit.
     */
    inline void clear_MOFCR_RXIE()
    {
        MOFCR &= ~(1u << 16u);
    }

    /**
     * Toggle MOFCR's RXIE bit.
     */
    inline void toggle_MOFCR_RXIE()
    {
        MOFCR ^= 1u << 16u;
    }

    /**
     * Get MOFCR's DATC bit.
     */
    CAN_MOFCR_DATC get_MOFCR_DATC()
    {
        return CAN_MOFCR_DATC(MOFCR & (1u << 11u));
    }

    /**
     * Set MOFCR's DATC bit.
     */
    inline void set_MOFCR_DATC()
    {
        MOFCR |= 1u << 11u;
    }

    /**
     * Clear MOFCR's DATC bit.
     */
    inline void clear_MOFCR_DATC()
    {
        MOFCR &= ~(1u << 11u);
    }

    /**
     * Toggle MOFCR's DATC bit.
     */
    inline void toggle_MOFCR_DATC()
    {
        MOFCR ^= 1u << 11u;
    }

    /**
     * Get MOFCR's DLCC bit.
     */
    CAN_MOFCR_DLCC get_MOFCR_DLCC()
    {
        return CAN_MOFCR_DLCC(MOFCR & (1u << 10u));
    }

    /**
     * Set MOFCR's DLCC bit.
     */
    inline void set_MOFCR_DLCC()
    {
        MOFCR |= 1u << 10u;
    }

    /**
     * Clear MOFCR's DLCC bit.
     */
    inline void clear_MOFCR_DLCC()
    {
        MOFCR &= ~(1u << 10u);
    }

    /**
     * Toggle MOFCR's DLCC bit.
     */
    inline void toggle_MOFCR_DLCC()
    {
        MOFCR ^= 1u << 10u;
    }

    /**
     * Get MOFCR's IDC bit.
     */
    CAN_MOFCR_IDC get_MOFCR_IDC()
    {
        return CAN_MOFCR_IDC(MOFCR & (1u << 9u));
    }

    /**
     * Set MOFCR's IDC bit.
     */
    inline void set_MOFCR_IDC()
    {
        MOFCR |= 1u << 9u;
    }

    /**
     * Clear MOFCR's IDC bit.
     */
    inline void clear_MOFCR_IDC()
    {
        MOFCR &= ~(1u << 9u);
    }

    /**
     * Toggle MOFCR's IDC bit.
     */
    inline void toggle_MOFCR_IDC()
    {
        MOFCR ^= 1u << 9u;
    }

    /**
     * Get MOFCR's GDFS bit.
     */
    CAN_MOFCR_GDFS get_MOFCR_GDFS()
    {
        return CAN_MOFCR_GDFS(MOFCR & (1u << 8u));
    }

    /**
     * Set MOFCR's GDFS bit.
     */
    inline void set_MOFCR_GDFS()
    {
        MOFCR |= 1u << 8u;
    }

    /**
     * Clear MOFCR's GDFS bit.
     */
    inline void clear_MOFCR_GDFS()
    {
        MOFCR &= ~(1u << 8u);
    }

    /**
     * Toggle MOFCR's GDFS bit.
     */
    inline void toggle_MOFCR_GDFS()
    {
        MOFCR ^= 1u << 8u;
    }

    /**
     * Get MOFCR's RXTOE bit.
     */
    CAN_MOFCR_RXTOE get_MOFCR_RXTOE()
    {
        return CAN_MOFCR_RXTOE(MOFCR & (1u << 4u));
    }

    /**
     * Set MOFCR's RXTOE bit.
     */
    inline void set_MOFCR_RXTOE()
    {
        MOFCR |= 1u << 4u;
    }

    /**
     * Clear MOFCR's RXTOE bit.
     */
    inline void clear_MOFCR_RXTOE()
    {
        MOFCR &= ~(1u << 4u);
    }

    /**
     * Toggle MOFCR's RXTOE bit.
     */
    inline void toggle_MOFCR_RXTOE()
    {
        MOFCR ^= 1u << 4u;
    }

    /**
     * Get MOFCR's MMC field.
     */
    CAN_MOFCR_MMC get_MOFCR_MMC()
    {
        return CAN_MOFCR_MMC((MOFCR >> 0u) & 0b1111u);
    }

    /**
     * Set MOFCR's MMC field.
     */
    inline void set_MOFCR_MMC(CAN_MOFCR_MMC value)
    {
        uint32_t curr = MOFCR;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        MOFCR = curr;
    }

    /**
     * Get MOFGPR's SEL field.
     */
    uint8_t get_MOFGPR_SEL()
    {
        return (MOFGPR >> 24u) & 0b11111111u;
    }

    /**
     * Set MOFGPR's SEL field.
     */
    inline void set_MOFGPR_SEL(uint8_t value)
    {
        uint32_t curr = MOFGPR;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        MOFGPR = curr;
    }

    /**
     * Get MOFGPR's CUR field.
     */
    uint8_t get_MOFGPR_CUR()
    {
        return (MOFGPR >> 16u) & 0b11111111u;
    }

    /**
     * Set MOFGPR's CUR field.
     */
    inline void set_MOFGPR_CUR(uint8_t value)
    {
        uint32_t curr = MOFGPR;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        MOFGPR = curr;
    }

    /**
     * Get MOFGPR's TOP field.
     */
    uint8_t get_MOFGPR_TOP()
    {
        return (MOFGPR >> 8u) & 0b11111111u;
    }

    /**
     * Set MOFGPR's TOP field.
     */
    inline void set_MOFGPR_TOP(uint8_t value)
    {
        uint32_t curr = MOFGPR;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        MOFGPR = curr;
    }

    /**
     * Get MOFGPR's BOT field.
     */
    uint8_t get_MOFGPR_BOT()
    {
        return (MOFGPR >> 0u) & 0b11111111u;
    }

    /**
     * Set MOFGPR's BOT field.
     */
    inline void set_MOFGPR_BOT(uint8_t value)
    {
        uint32_t curr = MOFGPR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        MOFGPR = curr;
    }

    /**
     * Get MOIPR's CFCVAL field.
     */
    uint16_t get_MOIPR_CFCVAL()
    {
        return (MOIPR >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set MOIPR's CFCVAL field.
     */
    inline void set_MOIPR_CFCVAL(uint16_t value)
    {
        uint32_t curr = MOIPR;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        MOIPR = curr;
    }

    /**
     * Get MOIPR's MPN field.
     */
    uint8_t get_MOIPR_MPN()
    {
        return (MOIPR >> 8u) & 0b11111111u;
    }

    /**
     * Set MOIPR's MPN field.
     */
    inline void set_MOIPR_MPN(uint8_t value)
    {
        uint32_t curr = MOIPR;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        MOIPR = curr;
    }

    /**
     * Get MOIPR's TXINP field.
     */
    CAN_MOIPR_TXINP get_MOIPR_TXINP()
    {
        return CAN_MOIPR_TXINP((MOIPR >> 4u) & 0b1111u);
    }

    /**
     * Set MOIPR's TXINP field.
     */
    inline void set_MOIPR_TXINP(CAN_MOIPR_TXINP value)
    {
        uint32_t curr = MOIPR;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        MOIPR = curr;
    }

    /**
     * Get MOIPR's RXINP field.
     */
    CAN_MOIPR_RXINP get_MOIPR_RXINP()
    {
        return CAN_MOIPR_RXINP((MOIPR >> 0u) & 0b1111u);
    }

    /**
     * Set MOIPR's RXINP field.
     */
    inline void set_MOIPR_RXINP(CAN_MOIPR_RXINP value)
    {
        uint32_t curr = MOIPR;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        MOIPR = curr;
    }

    /**
     * Get MOAMR's MIDE bit.
     */
    CAN_MOAMR_MIDE get_MOAMR_MIDE()
    {
        return CAN_MOAMR_MIDE(MOAMR & (1u << 29u));
    }

    /**
     * Set MOAMR's MIDE bit.
     */
    inline void set_MOAMR_MIDE()
    {
        MOAMR |= 1u << 29u;
    }

    /**
     * Clear MOAMR's MIDE bit.
     */
    inline void clear_MOAMR_MIDE()
    {
        MOAMR &= ~(1u << 29u);
    }

    /**
     * Toggle MOAMR's MIDE bit.
     */
    inline void toggle_MOAMR_MIDE()
    {
        MOAMR ^= 1u << 29u;
    }

    /**
     * Get MOAMR's AM field.
     */
    uint32_t get_MOAMR_AM()
    {
        return (MOAMR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set MOAMR's AM field.
     */
    inline void set_MOAMR_AM(uint32_t value)
    {
        uint32_t curr = MOAMR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        MOAMR = curr;
    }

    /**
     * Get MODATAL's DB3 field.
     */
    uint8_t get_MODATAL_DB3()
    {
        return (MODATAL >> 24u) & 0b11111111u;
    }

    /**
     * Set MODATAL's DB3 field.
     */
    inline void set_MODATAL_DB3(uint8_t value)
    {
        uint32_t curr = MODATAL;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        MODATAL = curr;
    }

    /**
     * Get MODATAL's DB2 field.
     */
    uint8_t get_MODATAL_DB2()
    {
        return (MODATAL >> 16u) & 0b11111111u;
    }

    /**
     * Set MODATAL's DB2 field.
     */
    inline void set_MODATAL_DB2(uint8_t value)
    {
        uint32_t curr = MODATAL;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        MODATAL = curr;
    }

    /**
     * Get MODATAL's DB1 field.
     */
    uint8_t get_MODATAL_DB1()
    {
        return (MODATAL >> 8u) & 0b11111111u;
    }

    /**
     * Set MODATAL's DB1 field.
     */
    inline void set_MODATAL_DB1(uint8_t value)
    {
        uint32_t curr = MODATAL;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        MODATAL = curr;
    }

    /**
     * Get MODATAL's DB0 field.
     */
    uint8_t get_MODATAL_DB0()
    {
        return (MODATAL >> 0u) & 0b11111111u;
    }

    /**
     * Set MODATAL's DB0 field.
     */
    inline void set_MODATAL_DB0(uint8_t value)
    {
        uint32_t curr = MODATAL;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        MODATAL = curr;
    }

    /**
     * Get MODATAH's DB7 field.
     */
    uint8_t get_MODATAH_DB7()
    {
        return (MODATAH >> 24u) & 0b11111111u;
    }

    /**
     * Set MODATAH's DB7 field.
     */
    inline void set_MODATAH_DB7(uint8_t value)
    {
        uint32_t curr = MODATAH;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        MODATAH = curr;
    }

    /**
     * Get MODATAH's DB6 field.
     */
    uint8_t get_MODATAH_DB6()
    {
        return (MODATAH >> 16u) & 0b11111111u;
    }

    /**
     * Set MODATAH's DB6 field.
     */
    inline void set_MODATAH_DB6(uint8_t value)
    {
        uint32_t curr = MODATAH;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        MODATAH = curr;
    }

    /**
     * Get MODATAH's DB5 field.
     */
    uint8_t get_MODATAH_DB5()
    {
        return (MODATAH >> 8u) & 0b11111111u;
    }

    /**
     * Set MODATAH's DB5 field.
     */
    inline void set_MODATAH_DB5(uint8_t value)
    {
        uint32_t curr = MODATAH;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        MODATAH = curr;
    }

    /**
     * Get MODATAH's DB4 field.
     */
    uint8_t get_MODATAH_DB4()
    {
        return (MODATAH >> 0u) & 0b11111111u;
    }

    /**
     * Set MODATAH's DB4 field.
     */
    inline void set_MODATAH_DB4(uint8_t value)
    {
        uint32_t curr = MODATAH;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        MODATAH = curr;
    }

    /**
     * Get MOAR's PRI field.
     */
    CAN_MOAR_PRI get_MOAR_PRI()
    {
        return CAN_MOAR_PRI((MOAR >> 30u) & 0b11u);
    }

    /**
     * Set MOAR's PRI field.
     */
    inline void set_MOAR_PRI(CAN_MOAR_PRI value)
    {
        uint32_t curr = MOAR;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        MOAR = curr;
    }

    /**
     * Get MOAR's IDE bit.
     */
    CAN_MOAR_IDE get_MOAR_IDE()
    {
        return CAN_MOAR_IDE(MOAR & (1u << 29u));
    }

    /**
     * Set MOAR's IDE bit.
     */
    inline void set_MOAR_IDE()
    {
        MOAR |= 1u << 29u;
    }

    /**
     * Clear MOAR's IDE bit.
     */
    inline void clear_MOAR_IDE()
    {
        MOAR &= ~(1u << 29u);
    }

    /**
     * Toggle MOAR's IDE bit.
     */
    inline void toggle_MOAR_IDE()
    {
        MOAR ^= 1u << 29u;
    }

    /**
     * Get MOAR's ID field.
     */
    uint32_t get_MOAR_ID()
    {
        return (MOAR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set MOAR's ID field.
     */
    inline void set_MOAR_ID(uint32_t value)
    {
        uint32_t curr = MOAR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        MOAR = curr;
    }

    /**
     * Set MOCTR's SETDIR bit.
     */
    inline void set_MOCTR_SETDIR()
    {
        MOCTR |= 1u << 27u;
    }

    /**
     * Clear MOCTR's SETDIR bit.
     */
    inline void clear_MOCTR_SETDIR()
    {
        MOCTR &= ~(1u << 27u);
    }

    /**
     * Toggle MOCTR's SETDIR bit.
     */
    inline void toggle_MOCTR_SETDIR()
    {
        MOCTR ^= 1u << 27u;
    }

    /**
     * Set MOCTR's RESDIR bit.
     */
    inline void set_MOCTR_RESDIR()
    {
        MOCTR |= 1u << 11u;
    }

    /**
     * Clear MOCTR's RESDIR bit.
     */
    inline void clear_MOCTR_RESDIR()
    {
        MOCTR &= ~(1u << 11u);
    }

    /**
     * Toggle MOCTR's RESDIR bit.
     */
    inline void toggle_MOCTR_RESDIR()
    {
        MOCTR ^= 1u << 11u;
    }

    /**
     * Set MOCTR's SETTXEN1 bit.
     */
    inline void set_MOCTR_SETTXEN1()
    {
        MOCTR |= 1u << 26u;
    }

    /**
     * Clear MOCTR's SETTXEN1 bit.
     */
    inline void clear_MOCTR_SETTXEN1()
    {
        MOCTR &= ~(1u << 26u);
    }

    /**
     * Toggle MOCTR's SETTXEN1 bit.
     */
    inline void toggle_MOCTR_SETTXEN1()
    {
        MOCTR ^= 1u << 26u;
    }

    /**
     * Set MOCTR's RESTXEN1 bit.
     */
    inline void set_MOCTR_RESTXEN1()
    {
        MOCTR |= 1u << 10u;
    }

    /**
     * Clear MOCTR's RESTXEN1 bit.
     */
    inline void clear_MOCTR_RESTXEN1()
    {
        MOCTR &= ~(1u << 10u);
    }

    /**
     * Toggle MOCTR's RESTXEN1 bit.
     */
    inline void toggle_MOCTR_RESTXEN1()
    {
        MOCTR ^= 1u << 10u;
    }

    /**
     * Set MOCTR's SETTXEN0 bit.
     */
    inline void set_MOCTR_SETTXEN0()
    {
        MOCTR |= 1u << 25u;
    }

    /**
     * Clear MOCTR's SETTXEN0 bit.
     */
    inline void clear_MOCTR_SETTXEN0()
    {
        MOCTR &= ~(1u << 25u);
    }

    /**
     * Toggle MOCTR's SETTXEN0 bit.
     */
    inline void toggle_MOCTR_SETTXEN0()
    {
        MOCTR ^= 1u << 25u;
    }

    /**
     * Set MOCTR's RESTXEN0 bit.
     */
    inline void set_MOCTR_RESTXEN0()
    {
        MOCTR |= 1u << 9u;
    }

    /**
     * Clear MOCTR's RESTXEN0 bit.
     */
    inline void clear_MOCTR_RESTXEN0()
    {
        MOCTR &= ~(1u << 9u);
    }

    /**
     * Toggle MOCTR's RESTXEN0 bit.
     */
    inline void toggle_MOCTR_RESTXEN0()
    {
        MOCTR ^= 1u << 9u;
    }

    /**
     * Set MOCTR's SETTXRQ bit.
     */
    inline void set_MOCTR_SETTXRQ()
    {
        MOCTR |= 1u << 24u;
    }

    /**
     * Clear MOCTR's SETTXRQ bit.
     */
    inline void clear_MOCTR_SETTXRQ()
    {
        MOCTR &= ~(1u << 24u);
    }

    /**
     * Toggle MOCTR's SETTXRQ bit.
     */
    inline void toggle_MOCTR_SETTXRQ()
    {
        MOCTR ^= 1u << 24u;
    }

    /**
     * Set MOCTR's RESTXRQ bit.
     */
    inline void set_MOCTR_RESTXRQ()
    {
        MOCTR |= 1u << 8u;
    }

    /**
     * Clear MOCTR's RESTXRQ bit.
     */
    inline void clear_MOCTR_RESTXRQ()
    {
        MOCTR &= ~(1u << 8u);
    }

    /**
     * Toggle MOCTR's RESTXRQ bit.
     */
    inline void toggle_MOCTR_RESTXRQ()
    {
        MOCTR ^= 1u << 8u;
    }

    /**
     * Set MOCTR's SETRXEN bit.
     */
    inline void set_MOCTR_SETRXEN()
    {
        MOCTR |= 1u << 23u;
    }

    /**
     * Clear MOCTR's SETRXEN bit.
     */
    inline void clear_MOCTR_SETRXEN()
    {
        MOCTR &= ~(1u << 23u);
    }

    /**
     * Toggle MOCTR's SETRXEN bit.
     */
    inline void toggle_MOCTR_SETRXEN()
    {
        MOCTR ^= 1u << 23u;
    }

    /**
     * Set MOCTR's RESRXEN bit.
     */
    inline void set_MOCTR_RESRXEN()
    {
        MOCTR |= 1u << 7u;
    }

    /**
     * Clear MOCTR's RESRXEN bit.
     */
    inline void clear_MOCTR_RESRXEN()
    {
        MOCTR &= ~(1u << 7u);
    }

    /**
     * Toggle MOCTR's RESRXEN bit.
     */
    inline void toggle_MOCTR_RESRXEN()
    {
        MOCTR ^= 1u << 7u;
    }

    /**
     * Set MOCTR's SETRTSEL bit.
     */
    inline void set_MOCTR_SETRTSEL()
    {
        MOCTR |= 1u << 22u;
    }

    /**
     * Clear MOCTR's SETRTSEL bit.
     */
    inline void clear_MOCTR_SETRTSEL()
    {
        MOCTR &= ~(1u << 22u);
    }

    /**
     * Toggle MOCTR's SETRTSEL bit.
     */
    inline void toggle_MOCTR_SETRTSEL()
    {
        MOCTR ^= 1u << 22u;
    }

    /**
     * Set MOCTR's RESRTSEL bit.
     */
    inline void set_MOCTR_RESRTSEL()
    {
        MOCTR |= 1u << 6u;
    }

    /**
     * Clear MOCTR's RESRTSEL bit.
     */
    inline void clear_MOCTR_RESRTSEL()
    {
        MOCTR &= ~(1u << 6u);
    }

    /**
     * Toggle MOCTR's RESRTSEL bit.
     */
    inline void toggle_MOCTR_RESRTSEL()
    {
        MOCTR ^= 1u << 6u;
    }

    /**
     * Set MOCTR's SETMSGVAL bit.
     */
    inline void set_MOCTR_SETMSGVAL()
    {
        MOCTR |= 1u << 21u;
    }

    /**
     * Clear MOCTR's SETMSGVAL bit.
     */
    inline void clear_MOCTR_SETMSGVAL()
    {
        MOCTR &= ~(1u << 21u);
    }

    /**
     * Toggle MOCTR's SETMSGVAL bit.
     */
    inline void toggle_MOCTR_SETMSGVAL()
    {
        MOCTR ^= 1u << 21u;
    }

    /**
     * Set MOCTR's RESMSGVAL bit.
     */
    inline void set_MOCTR_RESMSGVAL()
    {
        MOCTR |= 1u << 5u;
    }

    /**
     * Clear MOCTR's RESMSGVAL bit.
     */
    inline void clear_MOCTR_RESMSGVAL()
    {
        MOCTR &= ~(1u << 5u);
    }

    /**
     * Toggle MOCTR's RESMSGVAL bit.
     */
    inline void toggle_MOCTR_RESMSGVAL()
    {
        MOCTR ^= 1u << 5u;
    }

    /**
     * Set MOCTR's SETMSGLST bit.
     */
    inline void set_MOCTR_SETMSGLST()
    {
        MOCTR |= 1u << 20u;
    }

    /**
     * Clear MOCTR's SETMSGLST bit.
     */
    inline void clear_MOCTR_SETMSGLST()
    {
        MOCTR &= ~(1u << 20u);
    }

    /**
     * Toggle MOCTR's SETMSGLST bit.
     */
    inline void toggle_MOCTR_SETMSGLST()
    {
        MOCTR ^= 1u << 20u;
    }

    /**
     * Set MOCTR's RESMSGLST bit.
     */
    inline void set_MOCTR_RESMSGLST()
    {
        MOCTR |= 1u << 4u;
    }

    /**
     * Clear MOCTR's RESMSGLST bit.
     */
    inline void clear_MOCTR_RESMSGLST()
    {
        MOCTR &= ~(1u << 4u);
    }

    /**
     * Toggle MOCTR's RESMSGLST bit.
     */
    inline void toggle_MOCTR_RESMSGLST()
    {
        MOCTR ^= 1u << 4u;
    }

    /**
     * Set MOCTR's SETNEWDAT bit.
     */
    inline void set_MOCTR_SETNEWDAT()
    {
        MOCTR |= 1u << 19u;
    }

    /**
     * Clear MOCTR's SETNEWDAT bit.
     */
    inline void clear_MOCTR_SETNEWDAT()
    {
        MOCTR &= ~(1u << 19u);
    }

    /**
     * Toggle MOCTR's SETNEWDAT bit.
     */
    inline void toggle_MOCTR_SETNEWDAT()
    {
        MOCTR ^= 1u << 19u;
    }

    /**
     * Set MOCTR's RESNEWDAT bit.
     */
    inline void set_MOCTR_RESNEWDAT()
    {
        MOCTR |= 1u << 3u;
    }

    /**
     * Clear MOCTR's RESNEWDAT bit.
     */
    inline void clear_MOCTR_RESNEWDAT()
    {
        MOCTR &= ~(1u << 3u);
    }

    /**
     * Toggle MOCTR's RESNEWDAT bit.
     */
    inline void toggle_MOCTR_RESNEWDAT()
    {
        MOCTR ^= 1u << 3u;
    }

    /**
     * Set MOCTR's SETRXUPD bit.
     */
    inline void set_MOCTR_SETRXUPD()
    {
        MOCTR |= 1u << 18u;
    }

    /**
     * Clear MOCTR's SETRXUPD bit.
     */
    inline void clear_MOCTR_SETRXUPD()
    {
        MOCTR &= ~(1u << 18u);
    }

    /**
     * Toggle MOCTR's SETRXUPD bit.
     */
    inline void toggle_MOCTR_SETRXUPD()
    {
        MOCTR ^= 1u << 18u;
    }

    /**
     * Set MOCTR's RESRXUPD bit.
     */
    inline void set_MOCTR_RESRXUPD()
    {
        MOCTR |= 1u << 2u;
    }

    /**
     * Clear MOCTR's RESRXUPD bit.
     */
    inline void clear_MOCTR_RESRXUPD()
    {
        MOCTR &= ~(1u << 2u);
    }

    /**
     * Toggle MOCTR's RESRXUPD bit.
     */
    inline void toggle_MOCTR_RESRXUPD()
    {
        MOCTR ^= 1u << 2u;
    }

    /**
     * Set MOCTR's SETTXPND bit.
     */
    inline void set_MOCTR_SETTXPND()
    {
        MOCTR |= 1u << 17u;
    }

    /**
     * Clear MOCTR's SETTXPND bit.
     */
    inline void clear_MOCTR_SETTXPND()
    {
        MOCTR &= ~(1u << 17u);
    }

    /**
     * Toggle MOCTR's SETTXPND bit.
     */
    inline void toggle_MOCTR_SETTXPND()
    {
        MOCTR ^= 1u << 17u;
    }

    /**
     * Set MOCTR's RESTXPND bit.
     */
    inline void set_MOCTR_RESTXPND()
    {
        MOCTR |= 1u << 1u;
    }

    /**
     * Clear MOCTR's RESTXPND bit.
     */
    inline void clear_MOCTR_RESTXPND()
    {
        MOCTR &= ~(1u << 1u);
    }

    /**
     * Toggle MOCTR's RESTXPND bit.
     */
    inline void toggle_MOCTR_RESTXPND()
    {
        MOCTR ^= 1u << 1u;
    }

    /**
     * Set MOCTR's SETRXPND bit.
     */
    inline void set_MOCTR_SETRXPND()
    {
        MOCTR |= 1u << 16u;
    }

    /**
     * Clear MOCTR's SETRXPND bit.
     */
    inline void clear_MOCTR_SETRXPND()
    {
        MOCTR &= ~(1u << 16u);
    }

    /**
     * Toggle MOCTR's SETRXPND bit.
     */
    inline void toggle_MOCTR_SETRXPND()
    {
        MOCTR ^= 1u << 16u;
    }

    /**
     * Set MOCTR's RESRXPND bit.
     */
    inline void set_MOCTR_RESRXPND()
    {
        MOCTR |= 1u << 0u;
    }

    /**
     * Clear MOCTR's RESRXPND bit.
     */
    inline void clear_MOCTR_RESRXPND()
    {
        MOCTR &= ~(1u << 0u);
    }

    /**
     * Toggle MOCTR's RESRXPND bit.
     */
    inline void toggle_MOCTR_RESRXPND()
    {
        MOCTR ^= 1u << 0u;
    }

    /**
     * Get MOCTR's PNEXT field.
     */
    uint8_t get_MOSTAT_PNEXT()
    {
        return (MOSTAT >> 24u) & 0b11111111u;
    }

    /**
     * Get MOCTR's PPREV field.
     */
    uint8_t get_MOSTAT_PPREV()
    {
        return (MOSTAT >> 16u) & 0b11111111u;
    }

    /**
     * Get MOCTR's LIST field.
     */
    uint8_t get_MOSTAT_LIST()
    {
        return (MOSTAT >> 12u) & 0b1111u;
    }

    /**
     * Get MOCTR's DIR bit.
     */
    CAN_MOSTAT_DIR get_MOSTAT_DIR()
    {
        return CAN_MOSTAT_DIR(MOSTAT & (1u << 11u));
    }

    /**
     * Get MOCTR's TXEN1 bit.
     */
    CAN_MOSTAT_TXEN1 get_MOSTAT_TXEN1()
    {
        return CAN_MOSTAT_TXEN1(MOSTAT & (1u << 10u));
    }

    /**
     * Get MOCTR's TXEN0 bit.
     */
    CAN_MOSTAT_TXEN0 get_MOSTAT_TXEN0()
    {
        return CAN_MOSTAT_TXEN0(MOSTAT & (1u << 9u));
    }

    /**
     * Get MOCTR's TXRQ bit.
     */
    CAN_MOSTAT_TXRQ get_MOSTAT_TXRQ()
    {
        return CAN_MOSTAT_TXRQ(MOSTAT & (1u << 8u));
    }

    /**
     * Get MOCTR's RXEN bit.
     */
    CAN_MOSTAT_RXEN get_MOSTAT_RXEN()
    {
        return CAN_MOSTAT_RXEN(MOSTAT & (1u << 7u));
    }

    /**
     * Get MOCTR's RTSEL bit.
     */
    CAN_MOSTAT_RTSEL get_MOSTAT_RTSEL()
    {
        return CAN_MOSTAT_RTSEL(MOSTAT & (1u << 6u));
    }

    /**
     * Get MOCTR's MSGVAL bit.
     */
    CAN_MOSTAT_MSGVAL get_MOSTAT_MSGVAL()
    {
        return CAN_MOSTAT_MSGVAL(MOSTAT & (1u << 5u));
    }

    /**
     * Get MOCTR's MSGLST bit.
     */
    CAN_MOSTAT_MSGLST get_MOSTAT_MSGLST()
    {
        return CAN_MOSTAT_MSGLST(MOSTAT & (1u << 4u));
    }

    /**
     * Get MOCTR's NEWDAT bit.
     */
    CAN_MOSTAT_NEWDAT get_MOSTAT_NEWDAT()
    {
        return CAN_MOSTAT_NEWDAT(MOSTAT & (1u << 3u));
    }

    /**
     * Get MOCTR's RXUPD bit.
     */
    CAN_MOSTAT_RXUPD get_MOSTAT_RXUPD()
    {
        return CAN_MOSTAT_RXUPD(MOSTAT & (1u << 2u));
    }

    /**
     * Get MOCTR's TXPND bit.
     */
    CAN_MOSTAT_TXPND get_MOSTAT_TXPND()
    {
        return CAN_MOSTAT_TXPND(MOSTAT & (1u << 1u));
    }

    /**
     * Get MOCTR's RXPND bit.
     */
    CAN_MOSTAT_RXPND get_MOSTAT_RXPND()
    {
        return CAN_MOSTAT_RXPND(MOSTAT & (1u << 0u));
    }
};

static_assert(sizeof(CAN_MO) == CAN_MO::size);

}; // namespace XMC4700
