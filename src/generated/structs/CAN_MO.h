/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include "../enums/CAN_MO_MOAMR_MIDE.h"
#include "../enums/CAN_MO_MOAR_IDE.h"
#include "../enums/CAN_MO_MOAR_PRI.h"
#include "../enums/CAN_MO_MOFCR_DATC.h"
#include "../enums/CAN_MO_MOFCR_DLCC.h"
#include "../enums/CAN_MO_MOFCR_FRREN.h"
#include "../enums/CAN_MO_MOFCR_GDFS.h"
#include "../enums/CAN_MO_MOFCR_IDC.h"
#include "../enums/CAN_MO_MOFCR_MMC.h"
#include "../enums/CAN_MO_MOFCR_OVIE.h"
#include "../enums/CAN_MO_MOFCR_RMM.h"
#include "../enums/CAN_MO_MOFCR_RXTOE.h"
#include "../enums/CAN_MO_MOIPR_TXINP.h"
#include "../enums/CAN_MO_MOSTAT_DIR.h"
#include "../enums/CAN_MO_MOSTAT_MSGLST.h"
#include "../enums/CAN_MO_MOSTAT_MSGVAL.h"
#include "../enums/CAN_MO_MOSTAT_NEWDAT.h"
#include "../enums/CAN_MO_MOSTAT_RTSEL.h"
#include "../enums/CAN_MO_MOSTAT_RXEN.h"
#include "../enums/CAN_MO_MOSTAT_RXPND.h"
#include "../enums/CAN_MO_MOSTAT_RXUPD.h"
#include "../enums/CAN_MO_MOSTAT_TXEN1.h"
#include "../enums/CAN_MO_MOSTAT_TXPND.h"
#include "../enums/CAN_MO_MOSTAT_TXRQ.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Message Object Registers
 */
struct [[gnu::packed]] CAN_MO
{
    /* Constant attributes. */
    static constexpr std::size_t size = 32; /*!< CAN_MO's size in bytes. */

    /* Fields. */
    union {
        uint32_t MOCTR; /* (write-only) Message Object Control Register */
        const uint32_t MOSTAT =
            {}; /* (read-only) Message Object Status Register */
    };
    uint32_t
        MOFCR; /*!< (read-write) Message Object Function Control Register */
    uint32_t MOFGPR; /*!< (read-write) Message Object FIFO/Gateway Pointer
                        Register */
    uint32_t
        MOIPR; /*!< (read-write) Message Object Interrupt Pointer Register */
    uint32_t
        MOAMR; /*!< (read-write) Message Object Acceptance Mask Register */
    uint32_t MODATAL; /*!< (read-write) Message Object Data Register Low */
    uint32_t MODATAH; /*!< (read-write) Message Object Data Register High */
    uint32_t MOAR;    /*!< (read-write) Message Object Arbitration Register */

    /* Methods. */

    /**
     * Get MOFCR's DLC field.
     */
    inline uint8_t get_MOFCR_DLC()
    {
        return (MOFCR >> 24u) & 0b1111u;
    }

    /**
     * Set MOFCR's DLC field.
     *
     * Data Length Code
     */
    inline void set_MOFCR_DLC(uint8_t value)
    {
        uint32_t curr = MOFCR;

        curr &= ~(0b1111u << 24u);
        curr |= (value & 0b1111u) << 24u;

        MOFCR = curr;
    }

    /**
     * Get MOFCR's STT bit.
     */
    inline bool get_MOFCR_STT()
    {
        return MOFCR & (1u << 23u);
    }

    /**
     * Set MOFCR's STT bit.
     *
     * Single Transmit Trial
     */
    inline void set_MOFCR_STT()
    {
        MOFCR |= 1u << 23u;
    }

    /**
     * Clear MOFCR's STT bit.
     *
     * Single Transmit Trial
     */
    inline void clear_MOFCR_STT()
    {
        MOFCR &= ~(1u << 23u);
    }

    /**
     * Toggle MOFCR's STT bit.
     *
     * Single Transmit Trial
     */
    inline void toggle_MOFCR_STT()
    {
        MOFCR ^= 1u << 23u;
    }

    /**
     * Get MOFCR's SDT bit.
     */
    inline bool get_MOFCR_SDT()
    {
        return MOFCR & (1u << 22u);
    }

    /**
     * Set MOFCR's SDT bit.
     *
     * Single Data Transfer
     */
    inline void set_MOFCR_SDT()
    {
        MOFCR |= 1u << 22u;
    }

    /**
     * Clear MOFCR's SDT bit.
     *
     * Single Data Transfer
     */
    inline void clear_MOFCR_SDT()
    {
        MOFCR &= ~(1u << 22u);
    }

    /**
     * Toggle MOFCR's SDT bit.
     *
     * Single Data Transfer
     */
    inline void toggle_MOFCR_SDT()
    {
        MOFCR ^= 1u << 22u;
    }

    /**
     * Get MOFCR's RMM bit.
     */
    inline CAN_MO_MOFCR_RMM get_MOFCR_RMM()
    {
        return CAN_MO_MOFCR_RMM(MOFCR & (1u << 21u));
    }

    /**
     * Set MOFCR's RMM bit.
     *
     * Transmit Object Remote Monitoring
     */
    inline void set_MOFCR_RMM()
    {
        MOFCR |= 1u << 21u;
    }

    /**
     * Clear MOFCR's RMM bit.
     *
     * Transmit Object Remote Monitoring
     */
    inline void clear_MOFCR_RMM()
    {
        MOFCR &= ~(1u << 21u);
    }

    /**
     * Toggle MOFCR's RMM bit.
     *
     * Transmit Object Remote Monitoring
     */
    inline void toggle_MOFCR_RMM()
    {
        MOFCR ^= 1u << 21u;
    }

    /**
     * Get MOFCR's FRREN bit.
     */
    inline CAN_MO_MOFCR_FRREN get_MOFCR_FRREN()
    {
        return CAN_MO_MOFCR_FRREN(MOFCR & (1u << 20u));
    }

    /**
     * Set MOFCR's FRREN bit.
     *
     * Foreign Remote Request Enable
     */
    inline void set_MOFCR_FRREN()
    {
        MOFCR |= 1u << 20u;
    }

    /**
     * Clear MOFCR's FRREN bit.
     *
     * Foreign Remote Request Enable
     */
    inline void clear_MOFCR_FRREN()
    {
        MOFCR &= ~(1u << 20u);
    }

    /**
     * Toggle MOFCR's FRREN bit.
     *
     * Foreign Remote Request Enable
     */
    inline void toggle_MOFCR_FRREN()
    {
        MOFCR ^= 1u << 20u;
    }

    /**
     * Get MOFCR's OVIE bit.
     */
    inline CAN_MO_MOFCR_OVIE get_MOFCR_OVIE()
    {
        return CAN_MO_MOFCR_OVIE(MOFCR & (1u << 18u));
    }

    /**
     * Set MOFCR's OVIE bit.
     *
     * Overflow Interrupt Enable
     */
    inline void set_MOFCR_OVIE()
    {
        MOFCR |= 1u << 18u;
    }

    /**
     * Clear MOFCR's OVIE bit.
     *
     * Overflow Interrupt Enable
     */
    inline void clear_MOFCR_OVIE()
    {
        MOFCR &= ~(1u << 18u);
    }

    /**
     * Toggle MOFCR's OVIE bit.
     *
     * Overflow Interrupt Enable
     */
    inline void toggle_MOFCR_OVIE()
    {
        MOFCR ^= 1u << 18u;
    }

    /**
     * Get MOFCR's TXIE bit.
     */
    inline CAN_MO_MOFCR_OVIE get_MOFCR_TXIE()
    {
        return CAN_MO_MOFCR_OVIE(MOFCR & (1u << 17u));
    }

    /**
     * Set MOFCR's TXIE bit.
     *
     * Transmit Interrupt Enable
     */
    inline void set_MOFCR_TXIE()
    {
        MOFCR |= 1u << 17u;
    }

    /**
     * Clear MOFCR's TXIE bit.
     *
     * Transmit Interrupt Enable
     */
    inline void clear_MOFCR_TXIE()
    {
        MOFCR &= ~(1u << 17u);
    }

    /**
     * Toggle MOFCR's TXIE bit.
     *
     * Transmit Interrupt Enable
     */
    inline void toggle_MOFCR_TXIE()
    {
        MOFCR ^= 1u << 17u;
    }

    /**
     * Get MOFCR's RXIE bit.
     */
    inline CAN_MO_MOFCR_OVIE get_MOFCR_RXIE()
    {
        return CAN_MO_MOFCR_OVIE(MOFCR & (1u << 16u));
    }

    /**
     * Set MOFCR's RXIE bit.
     *
     * Receive Interrupt Enable
     */
    inline void set_MOFCR_RXIE()
    {
        MOFCR |= 1u << 16u;
    }

    /**
     * Clear MOFCR's RXIE bit.
     *
     * Receive Interrupt Enable
     */
    inline void clear_MOFCR_RXIE()
    {
        MOFCR &= ~(1u << 16u);
    }

    /**
     * Toggle MOFCR's RXIE bit.
     *
     * Receive Interrupt Enable
     */
    inline void toggle_MOFCR_RXIE()
    {
        MOFCR ^= 1u << 16u;
    }

    /**
     * Get MOFCR's DATC bit.
     */
    inline CAN_MO_MOFCR_DATC get_MOFCR_DATC()
    {
        return CAN_MO_MOFCR_DATC(MOFCR & (1u << 11u));
    }

    /**
     * Set MOFCR's DATC bit.
     *
     * Data Copy
     */
    inline void set_MOFCR_DATC()
    {
        MOFCR |= 1u << 11u;
    }

    /**
     * Clear MOFCR's DATC bit.
     *
     * Data Copy
     */
    inline void clear_MOFCR_DATC()
    {
        MOFCR &= ~(1u << 11u);
    }

    /**
     * Toggle MOFCR's DATC bit.
     *
     * Data Copy
     */
    inline void toggle_MOFCR_DATC()
    {
        MOFCR ^= 1u << 11u;
    }

    /**
     * Get MOFCR's DLCC bit.
     */
    inline CAN_MO_MOFCR_DLCC get_MOFCR_DLCC()
    {
        return CAN_MO_MOFCR_DLCC(MOFCR & (1u << 10u));
    }

    /**
     * Set MOFCR's DLCC bit.
     *
     * Data Length Code Copy
     */
    inline void set_MOFCR_DLCC()
    {
        MOFCR |= 1u << 10u;
    }

    /**
     * Clear MOFCR's DLCC bit.
     *
     * Data Length Code Copy
     */
    inline void clear_MOFCR_DLCC()
    {
        MOFCR &= ~(1u << 10u);
    }

    /**
     * Toggle MOFCR's DLCC bit.
     *
     * Data Length Code Copy
     */
    inline void toggle_MOFCR_DLCC()
    {
        MOFCR ^= 1u << 10u;
    }

    /**
     * Get MOFCR's IDC bit.
     */
    inline CAN_MO_MOFCR_IDC get_MOFCR_IDC()
    {
        return CAN_MO_MOFCR_IDC(MOFCR & (1u << 9u));
    }

    /**
     * Set MOFCR's IDC bit.
     *
     * Identifier Copy
     */
    inline void set_MOFCR_IDC()
    {
        MOFCR |= 1u << 9u;
    }

    /**
     * Clear MOFCR's IDC bit.
     *
     * Identifier Copy
     */
    inline void clear_MOFCR_IDC()
    {
        MOFCR &= ~(1u << 9u);
    }

    /**
     * Toggle MOFCR's IDC bit.
     *
     * Identifier Copy
     */
    inline void toggle_MOFCR_IDC()
    {
        MOFCR ^= 1u << 9u;
    }

    /**
     * Get MOFCR's GDFS bit.
     */
    inline CAN_MO_MOFCR_GDFS get_MOFCR_GDFS()
    {
        return CAN_MO_MOFCR_GDFS(MOFCR & (1u << 8u));
    }

    /**
     * Set MOFCR's GDFS bit.
     *
     * Gateway Data Frame Send
     */
    inline void set_MOFCR_GDFS()
    {
        MOFCR |= 1u << 8u;
    }

    /**
     * Clear MOFCR's GDFS bit.
     *
     * Gateway Data Frame Send
     */
    inline void clear_MOFCR_GDFS()
    {
        MOFCR &= ~(1u << 8u);
    }

    /**
     * Toggle MOFCR's GDFS bit.
     *
     * Gateway Data Frame Send
     */
    inline void toggle_MOFCR_GDFS()
    {
        MOFCR ^= 1u << 8u;
    }

    /**
     * Get MOFCR's RXTOE bit.
     */
    inline CAN_MO_MOFCR_RXTOE get_MOFCR_RXTOE()
    {
        return CAN_MO_MOFCR_RXTOE(MOFCR & (1u << 4u));
    }

    /**
     * Set MOFCR's RXTOE bit.
     *
     * Receive Time-Out Enable
     */
    inline void set_MOFCR_RXTOE()
    {
        MOFCR |= 1u << 4u;
    }

    /**
     * Clear MOFCR's RXTOE bit.
     *
     * Receive Time-Out Enable
     */
    inline void clear_MOFCR_RXTOE()
    {
        MOFCR &= ~(1u << 4u);
    }

    /**
     * Toggle MOFCR's RXTOE bit.
     *
     * Receive Time-Out Enable
     */
    inline void toggle_MOFCR_RXTOE()
    {
        MOFCR ^= 1u << 4u;
    }

    /**
     * Get MOFCR's MMC field.
     */
    inline CAN_MO_MOFCR_MMC get_MOFCR_MMC()
    {
        return CAN_MO_MOFCR_MMC((MOFCR >> 0u) & 0b1111u);
    }

    /**
     * Set MOFCR's MMC field.
     *
     * Message Mode Control
     */
    inline void set_MOFCR_MMC(CAN_MO_MOFCR_MMC value)
    {
        uint32_t curr = MOFCR;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        MOFCR = curr;
    }

    /**
     * Get all of MOFCR's bit fields.
     */
    inline void get_MOFCR(uint8_t &DLC, bool &STT, bool &SDT,
                          CAN_MO_MOFCR_RMM &RMM, CAN_MO_MOFCR_FRREN &FRREN,
                          CAN_MO_MOFCR_OVIE &OVIE, CAN_MO_MOFCR_OVIE &TXIE,
                          CAN_MO_MOFCR_OVIE &RXIE, CAN_MO_MOFCR_DATC &DATC,
                          CAN_MO_MOFCR_DLCC &DLCC, CAN_MO_MOFCR_IDC &IDC,
                          CAN_MO_MOFCR_GDFS &GDFS, CAN_MO_MOFCR_RXTOE &RXTOE,
                          CAN_MO_MOFCR_MMC &MMC)
    {
        uint32_t curr = MOFCR;

        DLC = (curr >> 24u) & 0b1111u;
        STT = curr & (1u << 23u);
        SDT = curr & (1u << 22u);
        RMM = CAN_MO_MOFCR_RMM(curr & (1u << 21u));
        FRREN = CAN_MO_MOFCR_FRREN(curr & (1u << 20u));
        OVIE = CAN_MO_MOFCR_OVIE(curr & (1u << 18u));
        TXIE = CAN_MO_MOFCR_OVIE(curr & (1u << 17u));
        RXIE = CAN_MO_MOFCR_OVIE(curr & (1u << 16u));
        DATC = CAN_MO_MOFCR_DATC(curr & (1u << 11u));
        DLCC = CAN_MO_MOFCR_DLCC(curr & (1u << 10u));
        IDC = CAN_MO_MOFCR_IDC(curr & (1u << 9u));
        GDFS = CAN_MO_MOFCR_GDFS(curr & (1u << 8u));
        RXTOE = CAN_MO_MOFCR_RXTOE(curr & (1u << 4u));
        MMC = CAN_MO_MOFCR_MMC((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of MOFCR's bit fields.
     *
     * (read-write) Message Object Function Control Register
     */
    inline void set_MOFCR(uint8_t DLC, bool STT, bool SDT,
                          CAN_MO_MOFCR_RMM RMM, CAN_MO_MOFCR_FRREN FRREN,
                          CAN_MO_MOFCR_OVIE OVIE, CAN_MO_MOFCR_OVIE TXIE,
                          CAN_MO_MOFCR_OVIE RXIE, CAN_MO_MOFCR_DATC DATC,
                          CAN_MO_MOFCR_DLCC DLCC, CAN_MO_MOFCR_IDC IDC,
                          CAN_MO_MOFCR_GDFS GDFS, CAN_MO_MOFCR_RXTOE RXTOE,
                          CAN_MO_MOFCR_MMC MMC)
    {
        uint32_t curr = MOFCR;

        curr &= ~(0b1111u << 24u);
        curr |= (DLC & 0b1111u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (STT & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (SDT & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (std::to_underlying(RMM) & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(FRREN) & 0b1u) << 20u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(OVIE) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(TXIE) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(RXIE) & 0b1u) << 16u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(DATC) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(DLCC) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(IDC) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(GDFS) & 0b1u) << 8u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(RXTOE) & 0b1u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MMC) & 0b1111u) << 0u;

        MOFCR = curr;
    }

    /**
     * Get MOFGPR's SEL field.
     */
    inline uint8_t get_MOFGPR_SEL()
    {
        return (MOFGPR >> 24u) & 0b11111111u;
    }

    /**
     * Set MOFGPR's SEL field.
     *
     * Object Select Pointer
     */
    inline void set_MOFGPR_SEL(uint8_t value)
    {
        uint32_t curr = MOFGPR;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        MOFGPR = curr;
    }

    /**
     * Get MOFGPR's CUR field.
     */
    inline uint8_t get_MOFGPR_CUR()
    {
        return (MOFGPR >> 16u) & 0b11111111u;
    }

    /**
     * Set MOFGPR's CUR field.
     *
     * Current Object Pointer
     */
    inline void set_MOFGPR_CUR(uint8_t value)
    {
        uint32_t curr = MOFGPR;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        MOFGPR = curr;
    }

    /**
     * Get MOFGPR's TOP field.
     */
    inline uint8_t get_MOFGPR_TOP()
    {
        return (MOFGPR >> 8u) & 0b11111111u;
    }

    /**
     * Set MOFGPR's TOP field.
     *
     * Top Pointer
     */
    inline void set_MOFGPR_TOP(uint8_t value)
    {
        uint32_t curr = MOFGPR;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        MOFGPR = curr;
    }

    /**
     * Get MOFGPR's BOT field.
     */
    inline uint8_t get_MOFGPR_BOT()
    {
        return (MOFGPR >> 0u) & 0b11111111u;
    }

    /**
     * Set MOFGPR's BOT field.
     *
     * Bottom Pointer
     */
    inline void set_MOFGPR_BOT(uint8_t value)
    {
        uint32_t curr = MOFGPR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        MOFGPR = curr;
    }

    /**
     * Get all of MOFGPR's bit fields.
     */
    inline void get_MOFGPR(uint8_t &SEL, uint8_t &CUR, uint8_t &TOP,
                           uint8_t &BOT)
    {
        uint32_t curr = MOFGPR;

        SEL = (curr >> 24u) & 0b11111111u;
        CUR = (curr >> 16u) & 0b11111111u;
        TOP = (curr >> 8u) & 0b11111111u;
        BOT = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of MOFGPR's bit fields.
     *
     * (read-write) Message Object FIFO/Gateway Pointer Register
     */
    inline void set_MOFGPR(uint8_t SEL, uint8_t CUR, uint8_t TOP, uint8_t BOT)
    {
        uint32_t curr = MOFGPR;

        curr &= ~(0b11111111u << 24u);
        curr |= (SEL & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (CUR & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (TOP & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (BOT & 0b11111111u) << 0u;

        MOFGPR = curr;
    }

    /**
     * Get MOIPR's CFCVAL field.
     */
    inline uint16_t get_MOIPR_CFCVAL()
    {
        return (MOIPR >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set MOIPR's CFCVAL field.
     *
     * CAN Frame Counter Value
     */
    inline void set_MOIPR_CFCVAL(uint16_t value)
    {
        uint32_t curr = MOIPR;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        MOIPR = curr;
    }

    /**
     * Get MOIPR's MPN field.
     */
    inline uint8_t get_MOIPR_MPN()
    {
        return (MOIPR >> 8u) & 0b11111111u;
    }

    /**
     * Set MOIPR's MPN field.
     *
     * Message Pending Number
     */
    inline void set_MOIPR_MPN(uint8_t value)
    {
        uint32_t curr = MOIPR;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        MOIPR = curr;
    }

    /**
     * Get MOIPR's TXINP field.
     */
    inline CAN_MO_MOIPR_TXINP get_MOIPR_TXINP()
    {
        return CAN_MO_MOIPR_TXINP((MOIPR >> 4u) & 0b1111u);
    }

    /**
     * Set MOIPR's TXINP field.
     *
     * Transmit Interrupt Node Pointer
     */
    inline void set_MOIPR_TXINP(CAN_MO_MOIPR_TXINP value)
    {
        uint32_t curr = MOIPR;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        MOIPR = curr;
    }

    /**
     * Get MOIPR's RXINP field.
     */
    inline CAN_MO_MOIPR_TXINP get_MOIPR_RXINP()
    {
        return CAN_MO_MOIPR_TXINP((MOIPR >> 0u) & 0b1111u);
    }

    /**
     * Set MOIPR's RXINP field.
     *
     * Receive Interrupt Node Pointer
     */
    inline void set_MOIPR_RXINP(CAN_MO_MOIPR_TXINP value)
    {
        uint32_t curr = MOIPR;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        MOIPR = curr;
    }

    /**
     * Get all of MOIPR's bit fields.
     */
    inline void get_MOIPR(uint16_t &CFCVAL, uint8_t &MPN,
                          CAN_MO_MOIPR_TXINP &TXINP, CAN_MO_MOIPR_TXINP &RXINP)
    {
        uint32_t curr = MOIPR;

        CFCVAL = (curr >> 16u) & 0b1111111111111111u;
        MPN = (curr >> 8u) & 0b11111111u;
        TXINP = CAN_MO_MOIPR_TXINP((curr >> 4u) & 0b1111u);
        RXINP = CAN_MO_MOIPR_TXINP((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of MOIPR's bit fields.
     *
     * (read-write) Message Object Interrupt Pointer Register
     */
    inline void set_MOIPR(uint16_t CFCVAL, uint8_t MPN,
                          CAN_MO_MOIPR_TXINP TXINP, CAN_MO_MOIPR_TXINP RXINP)
    {
        uint32_t curr = MOIPR;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (CFCVAL & 0b1111111111111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (MPN & 0b11111111u) << 8u;
        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(TXINP) & 0b1111u) << 4u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(RXINP) & 0b1111u) << 0u;

        MOIPR = curr;
    }

    /**
     * Get MOAMR's MIDE bit.
     */
    inline CAN_MO_MOAMR_MIDE get_MOAMR_MIDE()
    {
        return CAN_MO_MOAMR_MIDE(MOAMR & (1u << 29u));
    }

    /**
     * Set MOAMR's MIDE bit.
     *
     * Acceptance Mask Bit for Message IDE Bit
     */
    inline void set_MOAMR_MIDE()
    {
        MOAMR |= 1u << 29u;
    }

    /**
     * Clear MOAMR's MIDE bit.
     *
     * Acceptance Mask Bit for Message IDE Bit
     */
    inline void clear_MOAMR_MIDE()
    {
        MOAMR &= ~(1u << 29u);
    }

    /**
     * Toggle MOAMR's MIDE bit.
     *
     * Acceptance Mask Bit for Message IDE Bit
     */
    inline void toggle_MOAMR_MIDE()
    {
        MOAMR ^= 1u << 29u;
    }

    /**
     * Get MOAMR's AM field.
     */
    inline uint32_t get_MOAMR_AM()
    {
        return (MOAMR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set MOAMR's AM field.
     *
     * Acceptance Mask for Message Identifier
     */
    inline void set_MOAMR_AM(uint32_t value)
    {
        uint32_t curr = MOAMR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        MOAMR = curr;
    }

    /**
     * Get all of MOAMR's bit fields.
     */
    inline void get_MOAMR(CAN_MO_MOAMR_MIDE &MIDE, uint32_t &AM)
    {
        uint32_t curr = MOAMR;

        MIDE = CAN_MO_MOAMR_MIDE(curr & (1u << 29u));
        AM = (curr >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set all of MOAMR's bit fields.
     *
     * (read-write) Message Object Acceptance Mask Register
     */
    inline void set_MOAMR(CAN_MO_MOAMR_MIDE MIDE, uint32_t AM)
    {
        uint32_t curr = MOAMR;

        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(MIDE) & 0b1u) << 29u;
        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (AM & 0b11111111111111111111111111111u) << 0u;

        MOAMR = curr;
    }

    /**
     * Get MODATAL's DB3 field.
     */
    inline uint8_t get_MODATAL_DB3()
    {
        return (MODATAL >> 24u) & 0b11111111u;
    }

    /**
     * Set MODATAL's DB3 field.
     *
     * Data Byte 3 of Message Object n
     */
    inline void set_MODATAL_DB3(uint8_t value)
    {
        uint32_t curr = MODATAL;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        MODATAL = curr;
    }

    /**
     * Get MODATAL's DB2 field.
     */
    inline uint8_t get_MODATAL_DB2()
    {
        return (MODATAL >> 16u) & 0b11111111u;
    }

    /**
     * Set MODATAL's DB2 field.
     *
     * Data Byte 2 of Message Object n
     */
    inline void set_MODATAL_DB2(uint8_t value)
    {
        uint32_t curr = MODATAL;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        MODATAL = curr;
    }

    /**
     * Get MODATAL's DB1 field.
     */
    inline uint8_t get_MODATAL_DB1()
    {
        return (MODATAL >> 8u) & 0b11111111u;
    }

    /**
     * Set MODATAL's DB1 field.
     *
     * Data Byte 1 of Message Object n
     */
    inline void set_MODATAL_DB1(uint8_t value)
    {
        uint32_t curr = MODATAL;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        MODATAL = curr;
    }

    /**
     * Get MODATAL's DB0 field.
     */
    inline uint8_t get_MODATAL_DB0()
    {
        return (MODATAL >> 0u) & 0b11111111u;
    }

    /**
     * Set MODATAL's DB0 field.
     *
     * Data Byte 0 of Message Object n
     */
    inline void set_MODATAL_DB0(uint8_t value)
    {
        uint32_t curr = MODATAL;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        MODATAL = curr;
    }

    /**
     * Get all of MODATAL's bit fields.
     */
    inline void get_MODATAL(uint8_t &DB3, uint8_t &DB2, uint8_t &DB1,
                            uint8_t &DB0)
    {
        uint32_t curr = MODATAL;

        DB3 = (curr >> 24u) & 0b11111111u;
        DB2 = (curr >> 16u) & 0b11111111u;
        DB1 = (curr >> 8u) & 0b11111111u;
        DB0 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of MODATAL's bit fields.
     *
     * (read-write) Message Object Data Register Low
     */
    inline void set_MODATAL(uint8_t DB3, uint8_t DB2, uint8_t DB1, uint8_t DB0)
    {
        uint32_t curr = MODATAL;

        curr &= ~(0b11111111u << 24u);
        curr |= (DB3 & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DB2 & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (DB1 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (DB0 & 0b11111111u) << 0u;

        MODATAL = curr;
    }

    /**
     * Get MODATAH's DB7 field.
     */
    inline uint8_t get_MODATAH_DB7()
    {
        return (MODATAH >> 24u) & 0b11111111u;
    }

    /**
     * Set MODATAH's DB7 field.
     *
     * Data Byte 7 of Message Object n
     */
    inline void set_MODATAH_DB7(uint8_t value)
    {
        uint32_t curr = MODATAH;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        MODATAH = curr;
    }

    /**
     * Get MODATAH's DB6 field.
     */
    inline uint8_t get_MODATAH_DB6()
    {
        return (MODATAH >> 16u) & 0b11111111u;
    }

    /**
     * Set MODATAH's DB6 field.
     *
     * Data Byte 6 of Message Object n
     */
    inline void set_MODATAH_DB6(uint8_t value)
    {
        uint32_t curr = MODATAH;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        MODATAH = curr;
    }

    /**
     * Get MODATAH's DB5 field.
     */
    inline uint8_t get_MODATAH_DB5()
    {
        return (MODATAH >> 8u) & 0b11111111u;
    }

    /**
     * Set MODATAH's DB5 field.
     *
     * Data Byte 5 of Message Object n
     */
    inline void set_MODATAH_DB5(uint8_t value)
    {
        uint32_t curr = MODATAH;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        MODATAH = curr;
    }

    /**
     * Get MODATAH's DB4 field.
     */
    inline uint8_t get_MODATAH_DB4()
    {
        return (MODATAH >> 0u) & 0b11111111u;
    }

    /**
     * Set MODATAH's DB4 field.
     *
     * Data Byte 4 of Message Object n
     */
    inline void set_MODATAH_DB4(uint8_t value)
    {
        uint32_t curr = MODATAH;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        MODATAH = curr;
    }

    /**
     * Get all of MODATAH's bit fields.
     */
    inline void get_MODATAH(uint8_t &DB7, uint8_t &DB6, uint8_t &DB5,
                            uint8_t &DB4)
    {
        uint32_t curr = MODATAH;

        DB7 = (curr >> 24u) & 0b11111111u;
        DB6 = (curr >> 16u) & 0b11111111u;
        DB5 = (curr >> 8u) & 0b11111111u;
        DB4 = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of MODATAH's bit fields.
     *
     * (read-write) Message Object Data Register High
     */
    inline void set_MODATAH(uint8_t DB7, uint8_t DB6, uint8_t DB5, uint8_t DB4)
    {
        uint32_t curr = MODATAH;

        curr &= ~(0b11111111u << 24u);
        curr |= (DB7 & 0b11111111u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (DB6 & 0b11111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (DB5 & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (DB4 & 0b11111111u) << 0u;

        MODATAH = curr;
    }

    /**
     * Get MOAR's PRI field.
     */
    inline CAN_MO_MOAR_PRI get_MOAR_PRI()
    {
        return CAN_MO_MOAR_PRI((MOAR >> 30u) & 0b11u);
    }

    /**
     * Set MOAR's PRI field.
     *
     * Priority Class
     */
    inline void set_MOAR_PRI(CAN_MO_MOAR_PRI value)
    {
        uint32_t curr = MOAR;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        MOAR = curr;
    }

    /**
     * Get MOAR's IDE bit.
     */
    inline CAN_MO_MOAR_IDE get_MOAR_IDE()
    {
        return CAN_MO_MOAR_IDE(MOAR & (1u << 29u));
    }

    /**
     * Set MOAR's IDE bit.
     *
     * Identifier Extension Bit of Message Object n
     */
    inline void set_MOAR_IDE()
    {
        MOAR |= 1u << 29u;
    }

    /**
     * Clear MOAR's IDE bit.
     *
     * Identifier Extension Bit of Message Object n
     */
    inline void clear_MOAR_IDE()
    {
        MOAR &= ~(1u << 29u);
    }

    /**
     * Toggle MOAR's IDE bit.
     *
     * Identifier Extension Bit of Message Object n
     */
    inline void toggle_MOAR_IDE()
    {
        MOAR ^= 1u << 29u;
    }

    /**
     * Get MOAR's ID field.
     */
    inline uint32_t get_MOAR_ID()
    {
        return (MOAR >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set MOAR's ID field.
     *
     * CAN Identifier of Message Object n
     */
    inline void set_MOAR_ID(uint32_t value)
    {
        uint32_t curr = MOAR;

        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111u) << 0u;

        MOAR = curr;
    }

    /**
     * Get all of MOAR's bit fields.
     */
    inline void get_MOAR(CAN_MO_MOAR_PRI &PRI, CAN_MO_MOAR_IDE &IDE,
                         uint32_t &ID)
    {
        uint32_t curr = MOAR;

        PRI = CAN_MO_MOAR_PRI((curr >> 30u) & 0b11u);
        IDE = CAN_MO_MOAR_IDE(curr & (1u << 29u));
        ID = (curr >> 0u) & 0b11111111111111111111111111111u;
    }

    /**
     * Set all of MOAR's bit fields.
     *
     * (read-write) Message Object Arbitration Register
     */
    inline void set_MOAR(CAN_MO_MOAR_PRI PRI, CAN_MO_MOAR_IDE IDE, uint32_t ID)
    {
        uint32_t curr = MOAR;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(PRI) & 0b11u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(IDE) & 0b1u) << 29u;
        curr &= ~(0b11111111111111111111111111111u << 0u);
        curr |= (ID & 0b11111111111111111111111111111u) << 0u;

        MOAR = curr;
    }

    /**
     * Set MOCTR's SETDIR bit.
     *
     * Reset/Set Message Direction
     */
    inline void set_MOCTR_SETDIR()
    {
        MOCTR |= 1u << 27u;
    }

    /**
     * Clear MOCTR's SETDIR bit.
     *
     * Reset/Set Message Direction
     */
    inline void clear_MOCTR_SETDIR()
    {
        MOCTR &= ~(1u << 27u);
    }

    /**
     * Toggle MOCTR's SETDIR bit.
     *
     * Reset/Set Message Direction
     */
    inline void toggle_MOCTR_SETDIR()
    {
        MOCTR ^= 1u << 27u;
    }

    /**
     * Set MOCTR's RESDIR bit.
     *
     * Reset/Set Message Direction
     */
    inline void set_MOCTR_RESDIR()
    {
        MOCTR |= 1u << 11u;
    }

    /**
     * Clear MOCTR's RESDIR bit.
     *
     * Reset/Set Message Direction
     */
    inline void clear_MOCTR_RESDIR()
    {
        MOCTR &= ~(1u << 11u);
    }

    /**
     * Toggle MOCTR's RESDIR bit.
     *
     * Reset/Set Message Direction
     */
    inline void toggle_MOCTR_RESDIR()
    {
        MOCTR ^= 1u << 11u;
    }

    /**
     * Set MOCTR's SETTXEN1 bit.
     *
     * Reset/Set Transmit Enable 1
     */
    inline void set_MOCTR_SETTXEN1()
    {
        MOCTR |= 1u << 26u;
    }

    /**
     * Clear MOCTR's SETTXEN1 bit.
     *
     * Reset/Set Transmit Enable 1
     */
    inline void clear_MOCTR_SETTXEN1()
    {
        MOCTR &= ~(1u << 26u);
    }

    /**
     * Toggle MOCTR's SETTXEN1 bit.
     *
     * Reset/Set Transmit Enable 1
     */
    inline void toggle_MOCTR_SETTXEN1()
    {
        MOCTR ^= 1u << 26u;
    }

    /**
     * Set MOCTR's RESTXEN1 bit.
     *
     * Reset/Set Transmit Enable 1
     */
    inline void set_MOCTR_RESTXEN1()
    {
        MOCTR |= 1u << 10u;
    }

    /**
     * Clear MOCTR's RESTXEN1 bit.
     *
     * Reset/Set Transmit Enable 1
     */
    inline void clear_MOCTR_RESTXEN1()
    {
        MOCTR &= ~(1u << 10u);
    }

    /**
     * Toggle MOCTR's RESTXEN1 bit.
     *
     * Reset/Set Transmit Enable 1
     */
    inline void toggle_MOCTR_RESTXEN1()
    {
        MOCTR ^= 1u << 10u;
    }

    /**
     * Set MOCTR's SETTXEN0 bit.
     *
     * Reset/Set Transmit Enable 0
     */
    inline void set_MOCTR_SETTXEN0()
    {
        MOCTR |= 1u << 25u;
    }

    /**
     * Clear MOCTR's SETTXEN0 bit.
     *
     * Reset/Set Transmit Enable 0
     */
    inline void clear_MOCTR_SETTXEN0()
    {
        MOCTR &= ~(1u << 25u);
    }

    /**
     * Toggle MOCTR's SETTXEN0 bit.
     *
     * Reset/Set Transmit Enable 0
     */
    inline void toggle_MOCTR_SETTXEN0()
    {
        MOCTR ^= 1u << 25u;
    }

    /**
     * Set MOCTR's RESTXEN0 bit.
     *
     * Reset/Set Transmit Enable 0
     */
    inline void set_MOCTR_RESTXEN0()
    {
        MOCTR |= 1u << 9u;
    }

    /**
     * Clear MOCTR's RESTXEN0 bit.
     *
     * Reset/Set Transmit Enable 0
     */
    inline void clear_MOCTR_RESTXEN0()
    {
        MOCTR &= ~(1u << 9u);
    }

    /**
     * Toggle MOCTR's RESTXEN0 bit.
     *
     * Reset/Set Transmit Enable 0
     */
    inline void toggle_MOCTR_RESTXEN0()
    {
        MOCTR ^= 1u << 9u;
    }

    /**
     * Set MOCTR's SETTXRQ bit.
     *
     * Reset/Set Transmit Request
     */
    inline void set_MOCTR_SETTXRQ()
    {
        MOCTR |= 1u << 24u;
    }

    /**
     * Clear MOCTR's SETTXRQ bit.
     *
     * Reset/Set Transmit Request
     */
    inline void clear_MOCTR_SETTXRQ()
    {
        MOCTR &= ~(1u << 24u);
    }

    /**
     * Toggle MOCTR's SETTXRQ bit.
     *
     * Reset/Set Transmit Request
     */
    inline void toggle_MOCTR_SETTXRQ()
    {
        MOCTR ^= 1u << 24u;
    }

    /**
     * Set MOCTR's RESTXRQ bit.
     *
     * Reset/Set Transmit Request
     */
    inline void set_MOCTR_RESTXRQ()
    {
        MOCTR |= 1u << 8u;
    }

    /**
     * Clear MOCTR's RESTXRQ bit.
     *
     * Reset/Set Transmit Request
     */
    inline void clear_MOCTR_RESTXRQ()
    {
        MOCTR &= ~(1u << 8u);
    }

    /**
     * Toggle MOCTR's RESTXRQ bit.
     *
     * Reset/Set Transmit Request
     */
    inline void toggle_MOCTR_RESTXRQ()
    {
        MOCTR ^= 1u << 8u;
    }

    /**
     * Set MOCTR's SETRXEN bit.
     *
     * Reset/Set Receive Enable
     */
    inline void set_MOCTR_SETRXEN()
    {
        MOCTR |= 1u << 23u;
    }

    /**
     * Clear MOCTR's SETRXEN bit.
     *
     * Reset/Set Receive Enable
     */
    inline void clear_MOCTR_SETRXEN()
    {
        MOCTR &= ~(1u << 23u);
    }

    /**
     * Toggle MOCTR's SETRXEN bit.
     *
     * Reset/Set Receive Enable
     */
    inline void toggle_MOCTR_SETRXEN()
    {
        MOCTR ^= 1u << 23u;
    }

    /**
     * Set MOCTR's RESRXEN bit.
     *
     * Reset/Set Receive Enable
     */
    inline void set_MOCTR_RESRXEN()
    {
        MOCTR |= 1u << 7u;
    }

    /**
     * Clear MOCTR's RESRXEN bit.
     *
     * Reset/Set Receive Enable
     */
    inline void clear_MOCTR_RESRXEN()
    {
        MOCTR &= ~(1u << 7u);
    }

    /**
     * Toggle MOCTR's RESRXEN bit.
     *
     * Reset/Set Receive Enable
     */
    inline void toggle_MOCTR_RESRXEN()
    {
        MOCTR ^= 1u << 7u;
    }

    /**
     * Set MOCTR's SETRTSEL bit.
     *
     * Reset/Set Receive/Transmit Selected
     */
    inline void set_MOCTR_SETRTSEL()
    {
        MOCTR |= 1u << 22u;
    }

    /**
     * Clear MOCTR's SETRTSEL bit.
     *
     * Reset/Set Receive/Transmit Selected
     */
    inline void clear_MOCTR_SETRTSEL()
    {
        MOCTR &= ~(1u << 22u);
    }

    /**
     * Toggle MOCTR's SETRTSEL bit.
     *
     * Reset/Set Receive/Transmit Selected
     */
    inline void toggle_MOCTR_SETRTSEL()
    {
        MOCTR ^= 1u << 22u;
    }

    /**
     * Set MOCTR's RESRTSEL bit.
     *
     * Reset/Set Receive/Transmit Selected
     */
    inline void set_MOCTR_RESRTSEL()
    {
        MOCTR |= 1u << 6u;
    }

    /**
     * Clear MOCTR's RESRTSEL bit.
     *
     * Reset/Set Receive/Transmit Selected
     */
    inline void clear_MOCTR_RESRTSEL()
    {
        MOCTR &= ~(1u << 6u);
    }

    /**
     * Toggle MOCTR's RESRTSEL bit.
     *
     * Reset/Set Receive/Transmit Selected
     */
    inline void toggle_MOCTR_RESRTSEL()
    {
        MOCTR ^= 1u << 6u;
    }

    /**
     * Set MOCTR's SETMSGVAL bit.
     *
     * Reset/Set Message Valid
     */
    inline void set_MOCTR_SETMSGVAL()
    {
        MOCTR |= 1u << 21u;
    }

    /**
     * Clear MOCTR's SETMSGVAL bit.
     *
     * Reset/Set Message Valid
     */
    inline void clear_MOCTR_SETMSGVAL()
    {
        MOCTR &= ~(1u << 21u);
    }

    /**
     * Toggle MOCTR's SETMSGVAL bit.
     *
     * Reset/Set Message Valid
     */
    inline void toggle_MOCTR_SETMSGVAL()
    {
        MOCTR ^= 1u << 21u;
    }

    /**
     * Set MOCTR's RESMSGVAL bit.
     *
     * Reset/Set Message Valid
     */
    inline void set_MOCTR_RESMSGVAL()
    {
        MOCTR |= 1u << 5u;
    }

    /**
     * Clear MOCTR's RESMSGVAL bit.
     *
     * Reset/Set Message Valid
     */
    inline void clear_MOCTR_RESMSGVAL()
    {
        MOCTR &= ~(1u << 5u);
    }

    /**
     * Toggle MOCTR's RESMSGVAL bit.
     *
     * Reset/Set Message Valid
     */
    inline void toggle_MOCTR_RESMSGVAL()
    {
        MOCTR ^= 1u << 5u;
    }

    /**
     * Set MOCTR's SETMSGLST bit.
     *
     * Reset/Set Message Lost
     */
    inline void set_MOCTR_SETMSGLST()
    {
        MOCTR |= 1u << 20u;
    }

    /**
     * Clear MOCTR's SETMSGLST bit.
     *
     * Reset/Set Message Lost
     */
    inline void clear_MOCTR_SETMSGLST()
    {
        MOCTR &= ~(1u << 20u);
    }

    /**
     * Toggle MOCTR's SETMSGLST bit.
     *
     * Reset/Set Message Lost
     */
    inline void toggle_MOCTR_SETMSGLST()
    {
        MOCTR ^= 1u << 20u;
    }

    /**
     * Set MOCTR's RESMSGLST bit.
     *
     * Reset/Set Message Lost
     */
    inline void set_MOCTR_RESMSGLST()
    {
        MOCTR |= 1u << 4u;
    }

    /**
     * Clear MOCTR's RESMSGLST bit.
     *
     * Reset/Set Message Lost
     */
    inline void clear_MOCTR_RESMSGLST()
    {
        MOCTR &= ~(1u << 4u);
    }

    /**
     * Toggle MOCTR's RESMSGLST bit.
     *
     * Reset/Set Message Lost
     */
    inline void toggle_MOCTR_RESMSGLST()
    {
        MOCTR ^= 1u << 4u;
    }

    /**
     * Set MOCTR's SETNEWDAT bit.
     *
     * Reset/Set New Data
     */
    inline void set_MOCTR_SETNEWDAT()
    {
        MOCTR |= 1u << 19u;
    }

    /**
     * Clear MOCTR's SETNEWDAT bit.
     *
     * Reset/Set New Data
     */
    inline void clear_MOCTR_SETNEWDAT()
    {
        MOCTR &= ~(1u << 19u);
    }

    /**
     * Toggle MOCTR's SETNEWDAT bit.
     *
     * Reset/Set New Data
     */
    inline void toggle_MOCTR_SETNEWDAT()
    {
        MOCTR ^= 1u << 19u;
    }

    /**
     * Set MOCTR's RESNEWDAT bit.
     *
     * Reset/Set New Data
     */
    inline void set_MOCTR_RESNEWDAT()
    {
        MOCTR |= 1u << 3u;
    }

    /**
     * Clear MOCTR's RESNEWDAT bit.
     *
     * Reset/Set New Data
     */
    inline void clear_MOCTR_RESNEWDAT()
    {
        MOCTR &= ~(1u << 3u);
    }

    /**
     * Toggle MOCTR's RESNEWDAT bit.
     *
     * Reset/Set New Data
     */
    inline void toggle_MOCTR_RESNEWDAT()
    {
        MOCTR ^= 1u << 3u;
    }

    /**
     * Set MOCTR's SETRXUPD bit.
     *
     * Reset/Set Receive Updating
     */
    inline void set_MOCTR_SETRXUPD()
    {
        MOCTR |= 1u << 18u;
    }

    /**
     * Clear MOCTR's SETRXUPD bit.
     *
     * Reset/Set Receive Updating
     */
    inline void clear_MOCTR_SETRXUPD()
    {
        MOCTR &= ~(1u << 18u);
    }

    /**
     * Toggle MOCTR's SETRXUPD bit.
     *
     * Reset/Set Receive Updating
     */
    inline void toggle_MOCTR_SETRXUPD()
    {
        MOCTR ^= 1u << 18u;
    }

    /**
     * Set MOCTR's RESRXUPD bit.
     *
     * Reset/Set Receive Updating
     */
    inline void set_MOCTR_RESRXUPD()
    {
        MOCTR |= 1u << 2u;
    }

    /**
     * Clear MOCTR's RESRXUPD bit.
     *
     * Reset/Set Receive Updating
     */
    inline void clear_MOCTR_RESRXUPD()
    {
        MOCTR &= ~(1u << 2u);
    }

    /**
     * Toggle MOCTR's RESRXUPD bit.
     *
     * Reset/Set Receive Updating
     */
    inline void toggle_MOCTR_RESRXUPD()
    {
        MOCTR ^= 1u << 2u;
    }

    /**
     * Set MOCTR's SETTXPND bit.
     *
     * Reset/Set Transmit Pending
     */
    inline void set_MOCTR_SETTXPND()
    {
        MOCTR |= 1u << 17u;
    }

    /**
     * Clear MOCTR's SETTXPND bit.
     *
     * Reset/Set Transmit Pending
     */
    inline void clear_MOCTR_SETTXPND()
    {
        MOCTR &= ~(1u << 17u);
    }

    /**
     * Toggle MOCTR's SETTXPND bit.
     *
     * Reset/Set Transmit Pending
     */
    inline void toggle_MOCTR_SETTXPND()
    {
        MOCTR ^= 1u << 17u;
    }

    /**
     * Set MOCTR's RESTXPND bit.
     *
     * Reset/Set Transmit Pending
     */
    inline void set_MOCTR_RESTXPND()
    {
        MOCTR |= 1u << 1u;
    }

    /**
     * Clear MOCTR's RESTXPND bit.
     *
     * Reset/Set Transmit Pending
     */
    inline void clear_MOCTR_RESTXPND()
    {
        MOCTR &= ~(1u << 1u);
    }

    /**
     * Toggle MOCTR's RESTXPND bit.
     *
     * Reset/Set Transmit Pending
     */
    inline void toggle_MOCTR_RESTXPND()
    {
        MOCTR ^= 1u << 1u;
    }

    /**
     * Set MOCTR's SETRXPND bit.
     *
     * Reset/Set Receive Pending
     */
    inline void set_MOCTR_SETRXPND()
    {
        MOCTR |= 1u << 16u;
    }

    /**
     * Clear MOCTR's SETRXPND bit.
     *
     * Reset/Set Receive Pending
     */
    inline void clear_MOCTR_SETRXPND()
    {
        MOCTR &= ~(1u << 16u);
    }

    /**
     * Toggle MOCTR's SETRXPND bit.
     *
     * Reset/Set Receive Pending
     */
    inline void toggle_MOCTR_SETRXPND()
    {
        MOCTR ^= 1u << 16u;
    }

    /**
     * Set MOCTR's RESRXPND bit.
     *
     * Reset/Set Receive Pending
     */
    inline void set_MOCTR_RESRXPND()
    {
        MOCTR |= 1u << 0u;
    }

    /**
     * Clear MOCTR's RESRXPND bit.
     *
     * Reset/Set Receive Pending
     */
    inline void clear_MOCTR_RESRXPND()
    {
        MOCTR &= ~(1u << 0u);
    }

    /**
     * Toggle MOCTR's RESRXPND bit.
     *
     * Reset/Set Receive Pending
     */
    inline void toggle_MOCTR_RESRXPND()
    {
        MOCTR ^= 1u << 0u;
    }

    /**
     * Set all of MOCTR's bit fields.
     *
     * (write-only) Message Object Control Register
     */
    inline void set_MOCTR(bool SETDIR, bool RESDIR, bool SETTXEN1,
                          bool RESTXEN1, bool SETTXEN0, bool RESTXEN0,
                          bool SETTXRQ, bool RESTXRQ, bool SETRXEN,
                          bool RESRXEN, bool SETRTSEL, bool RESRTSEL,
                          bool SETMSGVAL, bool RESMSGVAL, bool SETMSGLST,
                          bool RESMSGLST, bool SETNEWDAT, bool RESNEWDAT,
                          bool SETRXUPD, bool RESRXUPD, bool SETTXPND,
                          bool RESTXPND, bool SETRXPND, bool RESRXPND)
    {
        uint32_t curr = MOCTR;

        curr &= ~(0b1u << 27u);
        curr |= (SETDIR & 0b1u) << 27u;
        curr &= ~(0b1u << 11u);
        curr |= (RESDIR & 0b1u) << 11u;
        curr &= ~(0b1u << 26u);
        curr |= (SETTXEN1 & 0b1u) << 26u;
        curr &= ~(0b1u << 10u);
        curr |= (RESTXEN1 & 0b1u) << 10u;
        curr &= ~(0b1u << 25u);
        curr |= (SETTXEN0 & 0b1u) << 25u;
        curr &= ~(0b1u << 9u);
        curr |= (RESTXEN0 & 0b1u) << 9u;
        curr &= ~(0b1u << 24u);
        curr |= (SETTXRQ & 0b1u) << 24u;
        curr &= ~(0b1u << 8u);
        curr |= (RESTXRQ & 0b1u) << 8u;
        curr &= ~(0b1u << 23u);
        curr |= (SETRXEN & 0b1u) << 23u;
        curr &= ~(0b1u << 7u);
        curr |= (RESRXEN & 0b1u) << 7u;
        curr &= ~(0b1u << 22u);
        curr |= (SETRTSEL & 0b1u) << 22u;
        curr &= ~(0b1u << 6u);
        curr |= (RESRTSEL & 0b1u) << 6u;
        curr &= ~(0b1u << 21u);
        curr |= (SETMSGVAL & 0b1u) << 21u;
        curr &= ~(0b1u << 5u);
        curr |= (RESMSGVAL & 0b1u) << 5u;
        curr &= ~(0b1u << 20u);
        curr |= (SETMSGLST & 0b1u) << 20u;
        curr &= ~(0b1u << 4u);
        curr |= (RESMSGLST & 0b1u) << 4u;
        curr &= ~(0b1u << 19u);
        curr |= (SETNEWDAT & 0b1u) << 19u;
        curr &= ~(0b1u << 3u);
        curr |= (RESNEWDAT & 0b1u) << 3u;
        curr &= ~(0b1u << 18u);
        curr |= (SETRXUPD & 0b1u) << 18u;
        curr &= ~(0b1u << 2u);
        curr |= (RESRXUPD & 0b1u) << 2u;
        curr &= ~(0b1u << 17u);
        curr |= (SETTXPND & 0b1u) << 17u;
        curr &= ~(0b1u << 1u);
        curr |= (RESTXPND & 0b1u) << 1u;
        curr &= ~(0b1u << 16u);
        curr |= (SETRXPND & 0b1u) << 16u;
        curr &= ~(0b1u << 0u);
        curr |= (RESRXPND & 0b1u) << 0u;

        MOCTR = curr;
    }

    /**
     * Get MOCTR's PNEXT field.
     */
    inline uint8_t get_MOSTAT_PNEXT()
    {
        return (MOSTAT >> 24u) & 0b11111111u;
    }

    /**
     * Get MOCTR's PPREV field.
     */
    inline uint8_t get_MOSTAT_PPREV()
    {
        return (MOSTAT >> 16u) & 0b11111111u;
    }

    /**
     * Get MOCTR's LIST field.
     */
    inline uint8_t get_MOSTAT_LIST()
    {
        return (MOSTAT >> 12u) & 0b1111u;
    }

    /**
     * Get MOCTR's DIR bit.
     */
    inline CAN_MO_MOSTAT_DIR get_MOSTAT_DIR()
    {
        return CAN_MO_MOSTAT_DIR(MOSTAT & (1u << 11u));
    }

    /**
     * Get MOCTR's TXEN1 bit.
     */
    inline CAN_MO_MOSTAT_TXEN1 get_MOSTAT_TXEN1()
    {
        return CAN_MO_MOSTAT_TXEN1(MOSTAT & (1u << 10u));
    }

    /**
     * Get MOCTR's TXEN0 bit.
     */
    inline CAN_MO_MOSTAT_TXEN1 get_MOSTAT_TXEN0()
    {
        return CAN_MO_MOSTAT_TXEN1(MOSTAT & (1u << 9u));
    }

    /**
     * Get MOCTR's TXRQ bit.
     */
    inline CAN_MO_MOSTAT_TXRQ get_MOSTAT_TXRQ()
    {
        return CAN_MO_MOSTAT_TXRQ(MOSTAT & (1u << 8u));
    }

    /**
     * Get MOCTR's RXEN bit.
     */
    inline CAN_MO_MOSTAT_RXEN get_MOSTAT_RXEN()
    {
        return CAN_MO_MOSTAT_RXEN(MOSTAT & (1u << 7u));
    }

    /**
     * Get MOCTR's RTSEL bit.
     */
    inline CAN_MO_MOSTAT_RTSEL get_MOSTAT_RTSEL()
    {
        return CAN_MO_MOSTAT_RTSEL(MOSTAT & (1u << 6u));
    }

    /**
     * Get MOCTR's MSGVAL bit.
     */
    inline CAN_MO_MOSTAT_MSGVAL get_MOSTAT_MSGVAL()
    {
        return CAN_MO_MOSTAT_MSGVAL(MOSTAT & (1u << 5u));
    }

    /**
     * Get MOCTR's MSGLST bit.
     */
    inline CAN_MO_MOSTAT_MSGLST get_MOSTAT_MSGLST()
    {
        return CAN_MO_MOSTAT_MSGLST(MOSTAT & (1u << 4u));
    }

    /**
     * Get MOCTR's NEWDAT bit.
     */
    inline CAN_MO_MOSTAT_NEWDAT get_MOSTAT_NEWDAT()
    {
        return CAN_MO_MOSTAT_NEWDAT(MOSTAT & (1u << 3u));
    }

    /**
     * Get MOCTR's RXUPD bit.
     */
    inline CAN_MO_MOSTAT_RXUPD get_MOSTAT_RXUPD()
    {
        return CAN_MO_MOSTAT_RXUPD(MOSTAT & (1u << 2u));
    }

    /**
     * Get MOCTR's TXPND bit.
     */
    inline CAN_MO_MOSTAT_TXPND get_MOSTAT_TXPND()
    {
        return CAN_MO_MOSTAT_TXPND(MOSTAT & (1u << 1u));
    }

    /**
     * Get MOCTR's RXPND bit.
     */
    inline CAN_MO_MOSTAT_RXPND get_MOSTAT_RXPND()
    {
        return CAN_MO_MOSTAT_RXPND(MOSTAT & (1u << 0u));
    }

    /**
     * Get all of MOSTAT's bit fields.
     */
    inline void get_MOSTAT(
        uint8_t &PNEXT, uint8_t &PPREV, uint8_t &LIST, CAN_MO_MOSTAT_DIR &DIR,
        CAN_MO_MOSTAT_TXEN1 &TXEN1, CAN_MO_MOSTAT_TXEN1 &TXEN0,
        CAN_MO_MOSTAT_TXRQ &TXRQ, CAN_MO_MOSTAT_RXEN &RXEN,
        CAN_MO_MOSTAT_RTSEL &RTSEL, CAN_MO_MOSTAT_MSGVAL &MSGVAL,
        CAN_MO_MOSTAT_MSGLST &MSGLST, CAN_MO_MOSTAT_NEWDAT &NEWDAT,
        CAN_MO_MOSTAT_RXUPD &RXUPD, CAN_MO_MOSTAT_TXPND &TXPND,
        CAN_MO_MOSTAT_RXPND &RXPND)
    {
        uint32_t curr = MOSTAT;

        PNEXT = (curr >> 24u) & 0b11111111u;
        PPREV = (curr >> 16u) & 0b11111111u;
        LIST = (curr >> 12u) & 0b1111u;
        DIR = CAN_MO_MOSTAT_DIR(curr & (1u << 11u));
        TXEN1 = CAN_MO_MOSTAT_TXEN1(curr & (1u << 10u));
        TXEN0 = CAN_MO_MOSTAT_TXEN1(curr & (1u << 9u));
        TXRQ = CAN_MO_MOSTAT_TXRQ(curr & (1u << 8u));
        RXEN = CAN_MO_MOSTAT_RXEN(curr & (1u << 7u));
        RTSEL = CAN_MO_MOSTAT_RTSEL(curr & (1u << 6u));
        MSGVAL = CAN_MO_MOSTAT_MSGVAL(curr & (1u << 5u));
        MSGLST = CAN_MO_MOSTAT_MSGLST(curr & (1u << 4u));
        NEWDAT = CAN_MO_MOSTAT_NEWDAT(curr & (1u << 3u));
        RXUPD = CAN_MO_MOSTAT_RXUPD(curr & (1u << 2u));
        TXPND = CAN_MO_MOSTAT_TXPND(curr & (1u << 1u));
        RXPND = CAN_MO_MOSTAT_RXPND(curr & (1u << 0u));
    }
};

static_assert(sizeof(CAN_MO) == CAN_MO::size);

}; // namespace XMC4700
