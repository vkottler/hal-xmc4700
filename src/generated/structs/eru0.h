/**
 * \file
 * \brief Generated by ifgen (3.0.1).
 */
#pragma once

#include "../enums/ERU0_EXICON_FE.h"
#include "../enums/ERU0_EXICON_FL.h"
#include "../enums/ERU0_EXICON_LD.h"
#include "../enums/ERU0_EXICON_NA.h"
#include "../enums/ERU0_EXICON_NB.h"
#include "../enums/ERU0_EXICON_OCS.h"
#include "../enums/ERU0_EXICON_PE.h"
#include "../enums/ERU0_EXICON_RE.h"
#include "../enums/ERU0_EXICON_SS.h"
#include "../enums/ERU0_EXISEL_EXS0A.h"
#include "../enums/ERU0_EXISEL_EXS0B.h"
#include "../enums/ERU0_EXISEL_EXS1A.h"
#include "../enums/ERU0_EXISEL_EXS1B.h"
#include "../enums/ERU0_EXISEL_EXS2A.h"
#include "../enums/ERU0_EXISEL_EXS2B.h"
#include "../enums/ERU0_EXISEL_EXS3A.h"
#include "../enums/ERU0_EXISEL_EXS3B.h"
#include "../enums/ERU0_EXOCON_GEEN.h"
#include "../enums/ERU0_EXOCON_GP.h"
#include "../enums/ERU0_EXOCON_IPEN0.h"
#include "../enums/ERU0_EXOCON_IPEN1.h"
#include "../enums/ERU0_EXOCON_IPEN2.h"
#include "../enums/ERU0_EXOCON_IPEN3.h"
#include "../enums/ERU0_EXOCON_ISS.h"
#include "../enums/ERU0_EXOCON_PDR.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Event Request Unit 0
 */
struct [[gnu::packed]] eru0
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< eru0's identifier. */
    static constexpr std::size_t size = 48; /*!< eru0's size in bytes. */

    /* Fields. */
    uint32_t EXISEL;                                                 /*!< (read-write) Event Input Select */
    static constexpr std::size_t reserved_padding0_length = 3;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    static constexpr std::size_t EXICON_length = 4;
    uint32_t EXICON[EXICON_length];                                  /*!< (read-write) Event Input Control */
    static constexpr std::size_t EXOCON_length = 4;
    uint32_t EXOCON[EXOCON_length];                                  /*!< (read-write) Event Output Trigger Control */

    /* Methods. */

    /**
     * Get EXISEL's EXS3B field.
     */
    ERU0_EXISEL_EXS3B get_EXISEL_EXS3B()
    {
        return ERU0_EXISEL_EXS3B((EXISEL >> 14u) & 0b11u);
    }

    /**
     * Set EXISEL's EXS3B field.
     */
    inline void set_EXISEL_EXS3B(ERU0_EXISEL_EXS3B value)
    {
        uint32_t curr = EXISEL;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        EXISEL = curr;
    }

    /**
     * Get EXISEL's EXS3A field.
     */
    ERU0_EXISEL_EXS3A get_EXISEL_EXS3A()
    {
        return ERU0_EXISEL_EXS3A((EXISEL >> 12u) & 0b11u);
    }

    /**
     * Set EXISEL's EXS3A field.
     */
    inline void set_EXISEL_EXS3A(ERU0_EXISEL_EXS3A value)
    {
        uint32_t curr = EXISEL;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        EXISEL = curr;
    }

    /**
     * Get EXISEL's EXS2B field.
     */
    ERU0_EXISEL_EXS2B get_EXISEL_EXS2B()
    {
        return ERU0_EXISEL_EXS2B((EXISEL >> 10u) & 0b11u);
    }

    /**
     * Set EXISEL's EXS2B field.
     */
    inline void set_EXISEL_EXS2B(ERU0_EXISEL_EXS2B value)
    {
        uint32_t curr = EXISEL;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        EXISEL = curr;
    }

    /**
     * Get EXISEL's EXS2A field.
     */
    ERU0_EXISEL_EXS2A get_EXISEL_EXS2A()
    {
        return ERU0_EXISEL_EXS2A((EXISEL >> 8u) & 0b11u);
    }

    /**
     * Set EXISEL's EXS2A field.
     */
    inline void set_EXISEL_EXS2A(ERU0_EXISEL_EXS2A value)
    {
        uint32_t curr = EXISEL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        EXISEL = curr;
    }

    /**
     * Get EXISEL's EXS1B field.
     */
    ERU0_EXISEL_EXS1B get_EXISEL_EXS1B()
    {
        return ERU0_EXISEL_EXS1B((EXISEL >> 6u) & 0b11u);
    }

    /**
     * Set EXISEL's EXS1B field.
     */
    inline void set_EXISEL_EXS1B(ERU0_EXISEL_EXS1B value)
    {
        uint32_t curr = EXISEL;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        EXISEL = curr;
    }

    /**
     * Get EXISEL's EXS1A field.
     */
    ERU0_EXISEL_EXS1A get_EXISEL_EXS1A()
    {
        return ERU0_EXISEL_EXS1A((EXISEL >> 4u) & 0b11u);
    }

    /**
     * Set EXISEL's EXS1A field.
     */
    inline void set_EXISEL_EXS1A(ERU0_EXISEL_EXS1A value)
    {
        uint32_t curr = EXISEL;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        EXISEL = curr;
    }

    /**
     * Get EXISEL's EXS0B field.
     */
    ERU0_EXISEL_EXS0B get_EXISEL_EXS0B()
    {
        return ERU0_EXISEL_EXS0B((EXISEL >> 2u) & 0b11u);
    }

    /**
     * Set EXISEL's EXS0B field.
     */
    inline void set_EXISEL_EXS0B(ERU0_EXISEL_EXS0B value)
    {
        uint32_t curr = EXISEL;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        EXISEL = curr;
    }

    /**
     * Get EXISEL's EXS0A field.
     */
    ERU0_EXISEL_EXS0A get_EXISEL_EXS0A()
    {
        return ERU0_EXISEL_EXS0A((EXISEL >> 0u) & 0b11u);
    }

    /**
     * Set EXISEL's EXS0A field.
     */
    inline void set_EXISEL_EXS0A(ERU0_EXISEL_EXS0A value)
    {
        uint32_t curr = EXISEL;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        EXISEL = curr;
    }

    /**
     * Get EXICON's NB bit.
     */
    ERU0_EXICON_NB get_EXICON_NB(std::size_t index)
    {
        return ERU0_EXICON_NB(EXICON[index] & (1u << 11u));
    }

    /**
     * Set EXICON's NB bit.
     */
    inline void set_EXICON_NB()
    {
        EXICON |= 1u << 11u;
    }

    /**
     * Clear EXICON's NB bit.
     */
    inline void clear_EXICON_NB()
    {
        EXICON &= ~(1u << 11u);
    }

    /**
     * Toggle EXICON's NB bit.
     */
    inline void toggle_EXICON_NB()
    {
        EXICON ^= 1u << 11u;
    }

    /**
     * Get EXICON's NA bit.
     */
    ERU0_EXICON_NA get_EXICON_NA(std::size_t index)
    {
        return ERU0_EXICON_NA(EXICON[index] & (1u << 10u));
    }

    /**
     * Set EXICON's NA bit.
     */
    inline void set_EXICON_NA()
    {
        EXICON |= 1u << 10u;
    }

    /**
     * Clear EXICON's NA bit.
     */
    inline void clear_EXICON_NA()
    {
        EXICON &= ~(1u << 10u);
    }

    /**
     * Toggle EXICON's NA bit.
     */
    inline void toggle_EXICON_NA()
    {
        EXICON ^= 1u << 10u;
    }

    /**
     * Get EXICON's SS field.
     */
    ERU0_EXICON_SS get_EXICON_SS(std::size_t index)
    {
        return ERU0_EXICON_SS((EXICON[index] >> 8u) & 0b11u);
    }

    /**
     * Set EXICON's SS field.
     */
    inline void set_EXICON_SS(std::size_t index, ERU0_EXICON_SS value)
    {
        uint32_t curr = EXICON[index];

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        EXICON[index] = curr;
    }

    /**
     * Get EXICON's FL bit.
     */
    ERU0_EXICON_FL get_EXICON_FL(std::size_t index)
    {
        return ERU0_EXICON_FL(EXICON[index] & (1u << 7u));
    }

    /**
     * Set EXICON's FL bit.
     */
    inline void set_EXICON_FL()
    {
        EXICON |= 1u << 7u;
    }

    /**
     * Clear EXICON's FL bit.
     */
    inline void clear_EXICON_FL()
    {
        EXICON &= ~(1u << 7u);
    }

    /**
     * Toggle EXICON's FL bit.
     */
    inline void toggle_EXICON_FL()
    {
        EXICON ^= 1u << 7u;
    }

    /**
     * Get EXICON's OCS field.
     */
    ERU0_EXICON_OCS get_EXICON_OCS(std::size_t index)
    {
        return ERU0_EXICON_OCS((EXICON[index] >> 4u) & 0b111u);
    }

    /**
     * Set EXICON's OCS field.
     */
    inline void set_EXICON_OCS(std::size_t index, ERU0_EXICON_OCS value)
    {
        uint32_t curr = EXICON[index];

        curr &= ~(0b111u << 4u);
        curr |= (std::to_underlying(value) & 0b111u) << 4u;

        EXICON[index] = curr;
    }

    /**
     * Get EXICON's FE bit.
     */
    ERU0_EXICON_FE get_EXICON_FE(std::size_t index)
    {
        return ERU0_EXICON_FE(EXICON[index] & (1u << 3u));
    }

    /**
     * Set EXICON's FE bit.
     */
    inline void set_EXICON_FE()
    {
        EXICON |= 1u << 3u;
    }

    /**
     * Clear EXICON's FE bit.
     */
    inline void clear_EXICON_FE()
    {
        EXICON &= ~(1u << 3u);
    }

    /**
     * Toggle EXICON's FE bit.
     */
    inline void toggle_EXICON_FE()
    {
        EXICON ^= 1u << 3u;
    }

    /**
     * Get EXICON's RE bit.
     */
    ERU0_EXICON_RE get_EXICON_RE(std::size_t index)
    {
        return ERU0_EXICON_RE(EXICON[index] & (1u << 2u));
    }

    /**
     * Set EXICON's RE bit.
     */
    inline void set_EXICON_RE()
    {
        EXICON |= 1u << 2u;
    }

    /**
     * Clear EXICON's RE bit.
     */
    inline void clear_EXICON_RE()
    {
        EXICON &= ~(1u << 2u);
    }

    /**
     * Toggle EXICON's RE bit.
     */
    inline void toggle_EXICON_RE()
    {
        EXICON ^= 1u << 2u;
    }

    /**
     * Get EXICON's LD bit.
     */
    ERU0_EXICON_LD get_EXICON_LD(std::size_t index)
    {
        return ERU0_EXICON_LD(EXICON[index] & (1u << 1u));
    }

    /**
     * Set EXICON's LD bit.
     */
    inline void set_EXICON_LD()
    {
        EXICON |= 1u << 1u;
    }

    /**
     * Clear EXICON's LD bit.
     */
    inline void clear_EXICON_LD()
    {
        EXICON &= ~(1u << 1u);
    }

    /**
     * Toggle EXICON's LD bit.
     */
    inline void toggle_EXICON_LD()
    {
        EXICON ^= 1u << 1u;
    }

    /**
     * Get EXICON's PE bit.
     */
    ERU0_EXICON_PE get_EXICON_PE(std::size_t index)
    {
        return ERU0_EXICON_PE(EXICON[index] & (1u << 0u));
    }

    /**
     * Set EXICON's PE bit.
     */
    inline void set_EXICON_PE()
    {
        EXICON |= 1u << 0u;
    }

    /**
     * Clear EXICON's PE bit.
     */
    inline void clear_EXICON_PE()
    {
        EXICON &= ~(1u << 0u);
    }

    /**
     * Toggle EXICON's PE bit.
     */
    inline void toggle_EXICON_PE()
    {
        EXICON ^= 1u << 0u;
    }

    /**
     * Get EXOCON's IPEN3 bit.
     */
    ERU0_EXOCON_IPEN3 get_EXOCON_IPEN3(std::size_t index)
    {
        return ERU0_EXOCON_IPEN3(EXOCON[index] & (1u << 15u));
    }

    /**
     * Set EXOCON's IPEN3 bit.
     */
    inline void set_EXOCON_IPEN3()
    {
        EXOCON |= 1u << 15u;
    }

    /**
     * Clear EXOCON's IPEN3 bit.
     */
    inline void clear_EXOCON_IPEN3()
    {
        EXOCON &= ~(1u << 15u);
    }

    /**
     * Toggle EXOCON's IPEN3 bit.
     */
    inline void toggle_EXOCON_IPEN3()
    {
        EXOCON ^= 1u << 15u;
    }

    /**
     * Get EXOCON's IPEN2 bit.
     */
    ERU0_EXOCON_IPEN2 get_EXOCON_IPEN2(std::size_t index)
    {
        return ERU0_EXOCON_IPEN2(EXOCON[index] & (1u << 14u));
    }

    /**
     * Set EXOCON's IPEN2 bit.
     */
    inline void set_EXOCON_IPEN2()
    {
        EXOCON |= 1u << 14u;
    }

    /**
     * Clear EXOCON's IPEN2 bit.
     */
    inline void clear_EXOCON_IPEN2()
    {
        EXOCON &= ~(1u << 14u);
    }

    /**
     * Toggle EXOCON's IPEN2 bit.
     */
    inline void toggle_EXOCON_IPEN2()
    {
        EXOCON ^= 1u << 14u;
    }

    /**
     * Get EXOCON's IPEN1 bit.
     */
    ERU0_EXOCON_IPEN1 get_EXOCON_IPEN1(std::size_t index)
    {
        return ERU0_EXOCON_IPEN1(EXOCON[index] & (1u << 13u));
    }

    /**
     * Set EXOCON's IPEN1 bit.
     */
    inline void set_EXOCON_IPEN1()
    {
        EXOCON |= 1u << 13u;
    }

    /**
     * Clear EXOCON's IPEN1 bit.
     */
    inline void clear_EXOCON_IPEN1()
    {
        EXOCON &= ~(1u << 13u);
    }

    /**
     * Toggle EXOCON's IPEN1 bit.
     */
    inline void toggle_EXOCON_IPEN1()
    {
        EXOCON ^= 1u << 13u;
    }

    /**
     * Get EXOCON's IPEN0 bit.
     */
    ERU0_EXOCON_IPEN0 get_EXOCON_IPEN0(std::size_t index)
    {
        return ERU0_EXOCON_IPEN0(EXOCON[index] & (1u << 12u));
    }

    /**
     * Set EXOCON's IPEN0 bit.
     */
    inline void set_EXOCON_IPEN0()
    {
        EXOCON |= 1u << 12u;
    }

    /**
     * Clear EXOCON's IPEN0 bit.
     */
    inline void clear_EXOCON_IPEN0()
    {
        EXOCON &= ~(1u << 12u);
    }

    /**
     * Toggle EXOCON's IPEN0 bit.
     */
    inline void toggle_EXOCON_IPEN0()
    {
        EXOCON ^= 1u << 12u;
    }

    /**
     * Get EXOCON's GP field.
     */
    ERU0_EXOCON_GP get_EXOCON_GP(std::size_t index)
    {
        return ERU0_EXOCON_GP((EXOCON[index] >> 4u) & 0b11u);
    }

    /**
     * Set EXOCON's GP field.
     */
    inline void set_EXOCON_GP(std::size_t index, ERU0_EXOCON_GP value)
    {
        uint32_t curr = EXOCON[index];

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        EXOCON[index] = curr;
    }

    /**
     * Get EXOCON's PDR bit.
     */
    ERU0_EXOCON_PDR get_EXOCON_PDR(std::size_t index)
    {
        return ERU0_EXOCON_PDR(EXOCON[index] & (1u << 3u));
    }

    /**
     * Get EXOCON's GEEN bit.
     */
    ERU0_EXOCON_GEEN get_EXOCON_GEEN(std::size_t index)
    {
        return ERU0_EXOCON_GEEN(EXOCON[index] & (1u << 2u));
    }

    /**
     * Set EXOCON's GEEN bit.
     */
    inline void set_EXOCON_GEEN()
    {
        EXOCON |= 1u << 2u;
    }

    /**
     * Clear EXOCON's GEEN bit.
     */
    inline void clear_EXOCON_GEEN()
    {
        EXOCON &= ~(1u << 2u);
    }

    /**
     * Toggle EXOCON's GEEN bit.
     */
    inline void toggle_EXOCON_GEEN()
    {
        EXOCON ^= 1u << 2u;
    }

    /**
     * Get EXOCON's ISS field.
     */
    ERU0_EXOCON_ISS get_EXOCON_ISS(std::size_t index)
    {
        return ERU0_EXOCON_ISS((EXOCON[index] >> 0u) & 0b11u);
    }

    /**
     * Set EXOCON's ISS field.
     */
    inline void set_EXOCON_ISS(std::size_t index, ERU0_EXOCON_ISS value)
    {
        uint32_t curr = EXOCON[index];

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        EXOCON[index] = curr;
    }
};

static_assert(sizeof(eru0) == eru0::size);

static volatile eru0 *const ERU0 = reinterpret_cast<eru0 *>(0x50004800);

static volatile eru0 *const ERU1 = reinterpret_cast<eru0 *>(0x40044000);

}; // namespace XMC4700
