/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include "../enums/SCU_CLK_CCUCLKCR_CCUDIV.h"
#include "../enums/SCU_CLK_CGATCLR0_CCU40.h"
#include "../enums/SCU_CLK_CGATCLR0_CCU41.h"
#include "../enums/SCU_CLK_CGATCLR0_CCU42.h"
#include "../enums/SCU_CLK_CGATCLR0_CCU80.h"
#include "../enums/SCU_CLK_CGATCLR0_CCU81.h"
#include "../enums/SCU_CLK_CGATCLR0_DSD.h"
#include "../enums/SCU_CLK_CGATCLR0_ERU1.h"
#include "../enums/SCU_CLK_CGATCLR0_POSIF0.h"
#include "../enums/SCU_CLK_CGATCLR0_POSIF1.h"
#include "../enums/SCU_CLK_CGATCLR0_USIC0.h"
#include "../enums/SCU_CLK_CGATCLR0_VADC.h"
#include "../enums/SCU_CLK_CGATCLR1_CCU43.h"
#include "../enums/SCU_CLK_CGATCLR1_DAC.h"
#include "../enums/SCU_CLK_CGATCLR1_LEDTSCU0.h"
#include "../enums/SCU_CLK_CGATCLR1_MCAN0.h"
#include "../enums/SCU_CLK_CGATCLR1_MMCI.h"
#include "../enums/SCU_CLK_CGATCLR1_PPORTS.h"
#include "../enums/SCU_CLK_CGATCLR1_USIC1.h"
#include "../enums/SCU_CLK_CGATCLR1_USIC2.h"
#include "../enums/SCU_CLK_CGATCLR2_DMA0.h"
#include "../enums/SCU_CLK_CGATCLR2_DMA1.h"
#include "../enums/SCU_CLK_CGATCLR2_ETH0.h"
#include "../enums/SCU_CLK_CGATCLR2_FCE.h"
#include "../enums/SCU_CLK_CGATCLR2_USB.h"
#include "../enums/SCU_CLK_CGATCLR2_WDT.h"
#include "../enums/SCU_CLK_CGATCLR3_EBU.h"
#include "../enums/SCU_CLK_CGATSET0_CCU40.h"
#include "../enums/SCU_CLK_CGATSET0_CCU41.h"
#include "../enums/SCU_CLK_CGATSET0_CCU42.h"
#include "../enums/SCU_CLK_CGATSET0_CCU80.h"
#include "../enums/SCU_CLK_CGATSET0_CCU81.h"
#include "../enums/SCU_CLK_CGATSET0_DSD.h"
#include "../enums/SCU_CLK_CGATSET0_ERU1.h"
#include "../enums/SCU_CLK_CGATSET0_POSIF0.h"
#include "../enums/SCU_CLK_CGATSET0_POSIF1.h"
#include "../enums/SCU_CLK_CGATSET0_USIC0.h"
#include "../enums/SCU_CLK_CGATSET0_VADC.h"
#include "../enums/SCU_CLK_CGATSET1_CCU43.h"
#include "../enums/SCU_CLK_CGATSET1_DAC.h"
#include "../enums/SCU_CLK_CGATSET1_LEDTSCU0.h"
#include "../enums/SCU_CLK_CGATSET1_MCAN0.h"
#include "../enums/SCU_CLK_CGATSET1_MMCI.h"
#include "../enums/SCU_CLK_CGATSET1_PPORTS.h"
#include "../enums/SCU_CLK_CGATSET1_USIC1.h"
#include "../enums/SCU_CLK_CGATSET1_USIC2.h"
#include "../enums/SCU_CLK_CGATSET2_DMA0.h"
#include "../enums/SCU_CLK_CGATSET2_DMA1.h"
#include "../enums/SCU_CLK_CGATSET2_ETH0.h"
#include "../enums/SCU_CLK_CGATSET2_FCE.h"
#include "../enums/SCU_CLK_CGATSET2_USB.h"
#include "../enums/SCU_CLK_CGATSET2_WDT.h"
#include "../enums/SCU_CLK_CGATSET3_EBU.h"
#include "../enums/SCU_CLK_CGATSTAT0_CCU40.h"
#include "../enums/SCU_CLK_CGATSTAT0_CCU41.h"
#include "../enums/SCU_CLK_CGATSTAT0_CCU42.h"
#include "../enums/SCU_CLK_CGATSTAT0_CCU80.h"
#include "../enums/SCU_CLK_CGATSTAT0_CCU81.h"
#include "../enums/SCU_CLK_CGATSTAT0_DSD.h"
#include "../enums/SCU_CLK_CGATSTAT0_ERU1.h"
#include "../enums/SCU_CLK_CGATSTAT0_POSIF0.h"
#include "../enums/SCU_CLK_CGATSTAT0_POSIF1.h"
#include "../enums/SCU_CLK_CGATSTAT0_USIC0.h"
#include "../enums/SCU_CLK_CGATSTAT0_VADC.h"
#include "../enums/SCU_CLK_CGATSTAT1_CCU43.h"
#include "../enums/SCU_CLK_CGATSTAT1_DAC.h"
#include "../enums/SCU_CLK_CGATSTAT1_LEDTSCU0.h"
#include "../enums/SCU_CLK_CGATSTAT1_MCAN0.h"
#include "../enums/SCU_CLK_CGATSTAT1_MMCI.h"
#include "../enums/SCU_CLK_CGATSTAT1_PPORTS.h"
#include "../enums/SCU_CLK_CGATSTAT1_USIC1.h"
#include "../enums/SCU_CLK_CGATSTAT1_USIC2.h"
#include "../enums/SCU_CLK_CGATSTAT2_DMA0.h"
#include "../enums/SCU_CLK_CGATSTAT2_DMA1.h"
#include "../enums/SCU_CLK_CGATSTAT2_ETH0.h"
#include "../enums/SCU_CLK_CGATSTAT2_FCE.h"
#include "../enums/SCU_CLK_CGATSTAT2_USB.h"
#include "../enums/SCU_CLK_CGATSTAT2_WDT.h"
#include "../enums/SCU_CLK_CGATSTAT3_EBU.h"
#include "../enums/SCU_CLK_CLKCLR_CCUCDI.h"
#include "../enums/SCU_CLK_CLKCLR_EBUCDI.h"
#include "../enums/SCU_CLK_CLKCLR_ETH0CDI.h"
#include "../enums/SCU_CLK_CLKCLR_MMCCDI.h"
#include "../enums/SCU_CLK_CLKCLR_USBCDI.h"
#include "../enums/SCU_CLK_CLKCLR_WDTCDI.h"
#include "../enums/SCU_CLK_CLKSET_CCUCEN.h"
#include "../enums/SCU_CLK_CLKSET_EBUCEN.h"
#include "../enums/SCU_CLK_CLKSET_ETH0CEN.h"
#include "../enums/SCU_CLK_CLKSET_MMCCEN.h"
#include "../enums/SCU_CLK_CLKSET_USBCEN.h"
#include "../enums/SCU_CLK_CLKSET_WDTCEN.h"
#include "../enums/SCU_CLK_CLKSTAT_CCUCST.h"
#include "../enums/SCU_CLK_CLKSTAT_EBUCST.h"
#include "../enums/SCU_CLK_CLKSTAT_ETH0CST.h"
#include "../enums/SCU_CLK_CLKSTAT_MMCCST.h"
#include "../enums/SCU_CLK_CLKSTAT_USBCST.h"
#include "../enums/SCU_CLK_CLKSTAT_WDTCST.h"
#include "../enums/SCU_CLK_CPUCLKCR_CPUDIV.h"
#include "../enums/SCU_CLK_DSLEEPCR_CCUCR.h"
#include "../enums/SCU_CLK_DSLEEPCR_EBUCR.h"
#include "../enums/SCU_CLK_DSLEEPCR_ETH0CR.h"
#include "../enums/SCU_CLK_DSLEEPCR_FPDN.h"
#include "../enums/SCU_CLK_DSLEEPCR_MMCCR.h"
#include "../enums/SCU_CLK_DSLEEPCR_PLLPDN.h"
#include "../enums/SCU_CLK_DSLEEPCR_SYSSEL.h"
#include "../enums/SCU_CLK_DSLEEPCR_USBCR.h"
#include "../enums/SCU_CLK_DSLEEPCR_VCOPDN.h"
#include "../enums/SCU_CLK_DSLEEPCR_WDTCR.h"
#include "../enums/SCU_CLK_EXTCLKCR_ECKSEL.h"
#include "../enums/SCU_CLK_MLINKCLKCR_CCUDIV.h"
#include "../enums/SCU_CLK_MLINKCLKCR_CPUDIV.h"
#include "../enums/SCU_CLK_MLINKCLKCR_PBDIV.h"
#include "../enums/SCU_CLK_MLINKCLKCR_SYSSEL.h"
#include "../enums/SCU_CLK_MLINKCLKCR_WDTSEL.h"
#include "../enums/SCU_CLK_PBCLKCR_PBDIV.h"
#include "../enums/SCU_CLK_SLEEPCR_CCUCR.h"
#include "../enums/SCU_CLK_SLEEPCR_EBUCR.h"
#include "../enums/SCU_CLK_SLEEPCR_ETH0CR.h"
#include "../enums/SCU_CLK_SLEEPCR_MMCCR.h"
#include "../enums/SCU_CLK_SLEEPCR_SYSSEL.h"
#include "../enums/SCU_CLK_SLEEPCR_USBCR.h"
#include "../enums/SCU_CLK_SLEEPCR_WDTCR.h"
#include "../enums/SCU_CLK_SYSCLKCR_SYSSEL.h"
#include "../enums/SCU_CLK_USBCLKCR_USBSEL.h"
#include "../enums/SCU_CLK_WDTCLKCR_WDTSEL.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * System Control Unit
 */
struct [[gnu::packed]] scu_clk
{
    /* Constant attributes. */
    static constexpr std::size_t size = 112; /*!< scu_clk's size in bytes. */

    /* Fields. */
    const uint32_t CLKSTAT = {};                                     /*!< (read-only) Clock Status Register */
    uint32_t CLKSET;                                                 /*!< (write-only) CLK Set Register */
    uint32_t CLKCLR;                                                 /*!< (write-only) CLK Clear Register */
    uint32_t SYSCLKCR;                                               /*!< (read-write) System Clock Control Register */
    uint32_t CPUCLKCR;                                               /*!< (read-write) CPU Clock Control Register */
    uint32_t PBCLKCR;                                                /*!< (read-write) Peripheral Bus Clock Control Register */
    uint32_t USBCLKCR;                                               /*!< (read-write) USB Clock Control Register */
    uint32_t EBUCLKCR;                                               /*!< (read-write) EBU Clock Control Register */
    uint32_t CCUCLKCR;                                               /*!< (read-write) CCU Clock Control Register */
    uint32_t WDTCLKCR;                                               /*!< (read-write) WDT Clock Control Register */
    uint32_t EXTCLKCR;                                               /*!< (read-write) External Clock Control */
    uint32_t MLINKCLKCR;                                             /*!< (read-write) Multi-Link Clock Control */
    uint32_t SLEEPCR;                                                /*!< (read-write) Sleep Control Register */
    uint32_t DSLEEPCR;                                               /*!< (read-write) Deep Sleep Control Register */
    static constexpr std::size_t reserved_padding0_length = 2;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    const uint32_t CGATSTAT0 = {};                                   /*!< (read-only) Peripheral 0 Clock Gating Status */
    uint32_t CGATSET0;                                               /*!< (write-only) Peripheral 0 Clock Gating Set */
    uint32_t CGATCLR0;                                               /*!< (write-only) Peripheral 0 Clock Gating Clear */
    const uint32_t CGATSTAT1 = {};                                   /*!< (read-only) Peripheral 1 Clock Gating Status */
    uint32_t CGATSET1;                                               /*!< (write-only) Peripheral 1 Clock Gating Set */
    uint32_t CGATCLR1;                                               /*!< (write-only) Peripheral 1 Clock Gating Clear */
    const uint32_t CGATSTAT2 = {};                                   /*!< (read-only) Peripheral 2 Clock Gating Status */
    uint32_t CGATSET2;                                               /*!< (write-only) Peripheral 2 Clock Gating Set */
    uint32_t CGATCLR2;                                               /*!< (write-only) Peripheral 2 Clock Gating Clear */
    const uint32_t CGATSTAT3 = {};                                   /*!< (read-only) Peripheral 3 Clock Gating Status */
    uint32_t CGATSET3;                                               /*!< (write-only) Peripheral 3 Clock Gating Set */
    uint32_t CGATCLR3;                                               /*!< (write-only) Peripheral 3 Clock Gating Clear */

    /* Methods. */

    /**
     * Get CLKSTAT's WDTCST bit.
     */
    inline SCU_CLK_CLKSTAT_WDTCST get_CLKSTAT_WDTCST()
    {
        return SCU_CLK_CLKSTAT_WDTCST(CLKSTAT & (1u << 5u));
    }

    /**
     * Get CLKSTAT's CCUCST bit.
     */
    inline SCU_CLK_CLKSTAT_CCUCST get_CLKSTAT_CCUCST()
    {
        return SCU_CLK_CLKSTAT_CCUCST(CLKSTAT & (1u << 4u));
    }

    /**
     * Get CLKSTAT's EBUCST bit.
     */
    inline SCU_CLK_CLKSTAT_EBUCST get_CLKSTAT_EBUCST()
    {
        return SCU_CLK_CLKSTAT_EBUCST(CLKSTAT & (1u << 3u));
    }

    /**
     * Get CLKSTAT's ETH0CST bit.
     */
    inline SCU_CLK_CLKSTAT_ETH0CST get_CLKSTAT_ETH0CST()
    {
        return SCU_CLK_CLKSTAT_ETH0CST(CLKSTAT & (1u << 2u));
    }

    /**
     * Get CLKSTAT's MMCCST bit.
     */
    inline SCU_CLK_CLKSTAT_MMCCST get_CLKSTAT_MMCCST()
    {
        return SCU_CLK_CLKSTAT_MMCCST(CLKSTAT & (1u << 1u));
    }

    /**
     * Get CLKSTAT's USBCST bit.
     */
    inline SCU_CLK_CLKSTAT_USBCST get_CLKSTAT_USBCST()
    {
        return SCU_CLK_CLKSTAT_USBCST(CLKSTAT & (1u << 0u));
    }

    /**
     * Get all of CLKSTAT's bit fields.
     */
    inline void get_CLKSTAT(SCU_CLK_CLKSTAT_WDTCST &WDTCST, SCU_CLK_CLKSTAT_CCUCST &CCUCST, SCU_CLK_CLKSTAT_EBUCST &EBUCST, SCU_CLK_CLKSTAT_ETH0CST &ETH0CST, SCU_CLK_CLKSTAT_MMCCST &MMCCST, SCU_CLK_CLKSTAT_USBCST &USBCST)
    {
        uint32_t curr = CLKSTAT;

        WDTCST = SCU_CLK_CLKSTAT_WDTCST(curr & (1u << 5u));
        CCUCST = SCU_CLK_CLKSTAT_CCUCST(curr & (1u << 4u));
        EBUCST = SCU_CLK_CLKSTAT_EBUCST(curr & (1u << 3u));
        ETH0CST = SCU_CLK_CLKSTAT_ETH0CST(curr & (1u << 2u));
        MMCCST = SCU_CLK_CLKSTAT_MMCCST(curr & (1u << 1u));
        USBCST = SCU_CLK_CLKSTAT_USBCST(curr & (1u << 0u));
    }

    /**
     * Set CLKSET's WDTCEN bit.
     */
    inline void set_CLKSET_WDTCEN()
    {
        CLKSET |= 1u << 5u;
    }

    /**
     * Clear CLKSET's WDTCEN bit.
     */
    inline void clear_CLKSET_WDTCEN()
    {
        CLKSET &= ~(1u << 5u);
    }

    /**
     * Toggle CLKSET's WDTCEN bit.
     */
    inline void toggle_CLKSET_WDTCEN()
    {
        CLKSET ^= 1u << 5u;
    }

    /**
     * Set CLKSET's CCUCEN bit.
     */
    inline void set_CLKSET_CCUCEN()
    {
        CLKSET |= 1u << 4u;
    }

    /**
     * Clear CLKSET's CCUCEN bit.
     */
    inline void clear_CLKSET_CCUCEN()
    {
        CLKSET &= ~(1u << 4u);
    }

    /**
     * Toggle CLKSET's CCUCEN bit.
     */
    inline void toggle_CLKSET_CCUCEN()
    {
        CLKSET ^= 1u << 4u;
    }

    /**
     * Set CLKSET's EBUCEN bit.
     */
    inline void set_CLKSET_EBUCEN()
    {
        CLKSET |= 1u << 3u;
    }

    /**
     * Clear CLKSET's EBUCEN bit.
     */
    inline void clear_CLKSET_EBUCEN()
    {
        CLKSET &= ~(1u << 3u);
    }

    /**
     * Toggle CLKSET's EBUCEN bit.
     */
    inline void toggle_CLKSET_EBUCEN()
    {
        CLKSET ^= 1u << 3u;
    }

    /**
     * Set CLKSET's ETH0CEN bit.
     */
    inline void set_CLKSET_ETH0CEN()
    {
        CLKSET |= 1u << 2u;
    }

    /**
     * Clear CLKSET's ETH0CEN bit.
     */
    inline void clear_CLKSET_ETH0CEN()
    {
        CLKSET &= ~(1u << 2u);
    }

    /**
     * Toggle CLKSET's ETH0CEN bit.
     */
    inline void toggle_CLKSET_ETH0CEN()
    {
        CLKSET ^= 1u << 2u;
    }

    /**
     * Set CLKSET's MMCCEN bit.
     */
    inline void set_CLKSET_MMCCEN()
    {
        CLKSET |= 1u << 1u;
    }

    /**
     * Clear CLKSET's MMCCEN bit.
     */
    inline void clear_CLKSET_MMCCEN()
    {
        CLKSET &= ~(1u << 1u);
    }

    /**
     * Toggle CLKSET's MMCCEN bit.
     */
    inline void toggle_CLKSET_MMCCEN()
    {
        CLKSET ^= 1u << 1u;
    }

    /**
     * Set CLKSET's USBCEN bit.
     */
    inline void set_CLKSET_USBCEN()
    {
        CLKSET |= 1u << 0u;
    }

    /**
     * Clear CLKSET's USBCEN bit.
     */
    inline void clear_CLKSET_USBCEN()
    {
        CLKSET &= ~(1u << 0u);
    }

    /**
     * Toggle CLKSET's USBCEN bit.
     */
    inline void toggle_CLKSET_USBCEN()
    {
        CLKSET ^= 1u << 0u;
    }

    /**
     * Set all of CLKSET's bit fields.
     */
    inline void set_CLKSET(SCU_CLK_CLKSET_WDTCEN WDTCEN, SCU_CLK_CLKSET_CCUCEN CCUCEN, SCU_CLK_CLKSET_EBUCEN EBUCEN, SCU_CLK_CLKSET_ETH0CEN ETH0CEN, SCU_CLK_CLKSET_MMCCEN MMCCEN, SCU_CLK_CLKSET_USBCEN USBCEN)
    {
        uint32_t curr = CLKSET;

        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(WDTCEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(CCUCEN) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(EBUCEN) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(ETH0CEN) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(MMCCEN) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(USBCEN) & 0b1u) << 0u;

        CLKSET = curr;
    }

    /**
     * Set CLKCLR's WDTCDI bit.
     */
    inline void set_CLKCLR_WDTCDI()
    {
        CLKCLR |= 1u << 5u;
    }

    /**
     * Clear CLKCLR's WDTCDI bit.
     */
    inline void clear_CLKCLR_WDTCDI()
    {
        CLKCLR &= ~(1u << 5u);
    }

    /**
     * Toggle CLKCLR's WDTCDI bit.
     */
    inline void toggle_CLKCLR_WDTCDI()
    {
        CLKCLR ^= 1u << 5u;
    }

    /**
     * Set CLKCLR's CCUCDI bit.
     */
    inline void set_CLKCLR_CCUCDI()
    {
        CLKCLR |= 1u << 4u;
    }

    /**
     * Clear CLKCLR's CCUCDI bit.
     */
    inline void clear_CLKCLR_CCUCDI()
    {
        CLKCLR &= ~(1u << 4u);
    }

    /**
     * Toggle CLKCLR's CCUCDI bit.
     */
    inline void toggle_CLKCLR_CCUCDI()
    {
        CLKCLR ^= 1u << 4u;
    }

    /**
     * Set CLKCLR's EBUCDI bit.
     */
    inline void set_CLKCLR_EBUCDI()
    {
        CLKCLR |= 1u << 3u;
    }

    /**
     * Clear CLKCLR's EBUCDI bit.
     */
    inline void clear_CLKCLR_EBUCDI()
    {
        CLKCLR &= ~(1u << 3u);
    }

    /**
     * Toggle CLKCLR's EBUCDI bit.
     */
    inline void toggle_CLKCLR_EBUCDI()
    {
        CLKCLR ^= 1u << 3u;
    }

    /**
     * Set CLKCLR's ETH0CDI bit.
     */
    inline void set_CLKCLR_ETH0CDI()
    {
        CLKCLR |= 1u << 2u;
    }

    /**
     * Clear CLKCLR's ETH0CDI bit.
     */
    inline void clear_CLKCLR_ETH0CDI()
    {
        CLKCLR &= ~(1u << 2u);
    }

    /**
     * Toggle CLKCLR's ETH0CDI bit.
     */
    inline void toggle_CLKCLR_ETH0CDI()
    {
        CLKCLR ^= 1u << 2u;
    }

    /**
     * Set CLKCLR's MMCCDI bit.
     */
    inline void set_CLKCLR_MMCCDI()
    {
        CLKCLR |= 1u << 1u;
    }

    /**
     * Clear CLKCLR's MMCCDI bit.
     */
    inline void clear_CLKCLR_MMCCDI()
    {
        CLKCLR &= ~(1u << 1u);
    }

    /**
     * Toggle CLKCLR's MMCCDI bit.
     */
    inline void toggle_CLKCLR_MMCCDI()
    {
        CLKCLR ^= 1u << 1u;
    }

    /**
     * Set CLKCLR's USBCDI bit.
     */
    inline void set_CLKCLR_USBCDI()
    {
        CLKCLR |= 1u << 0u;
    }

    /**
     * Clear CLKCLR's USBCDI bit.
     */
    inline void clear_CLKCLR_USBCDI()
    {
        CLKCLR &= ~(1u << 0u);
    }

    /**
     * Toggle CLKCLR's USBCDI bit.
     */
    inline void toggle_CLKCLR_USBCDI()
    {
        CLKCLR ^= 1u << 0u;
    }

    /**
     * Set all of CLKCLR's bit fields.
     */
    inline void set_CLKCLR(SCU_CLK_CLKCLR_WDTCDI WDTCDI, SCU_CLK_CLKCLR_CCUCDI CCUCDI, SCU_CLK_CLKCLR_EBUCDI EBUCDI, SCU_CLK_CLKCLR_ETH0CDI ETH0CDI, SCU_CLK_CLKCLR_MMCCDI MMCCDI, SCU_CLK_CLKCLR_USBCDI USBCDI)
    {
        uint32_t curr = CLKCLR;

        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(WDTCDI) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(CCUCDI) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(EBUCDI) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(ETH0CDI) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(MMCCDI) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(USBCDI) & 0b1u) << 0u;

        CLKCLR = curr;
    }

    /**
     * Get SYSCLKCR's SYSSEL bit.
     */
    inline SCU_CLK_SYSCLKCR_SYSSEL get_SYSCLKCR_SYSSEL()
    {
        return SCU_CLK_SYSCLKCR_SYSSEL(SYSCLKCR & (1u << 16u));
    }

    /**
     * Set SYSCLKCR's SYSSEL bit.
     */
    inline void set_SYSCLKCR_SYSSEL()
    {
        SYSCLKCR |= 1u << 16u;
    }

    /**
     * Clear SYSCLKCR's SYSSEL bit.
     */
    inline void clear_SYSCLKCR_SYSSEL()
    {
        SYSCLKCR &= ~(1u << 16u);
    }

    /**
     * Toggle SYSCLKCR's SYSSEL bit.
     */
    inline void toggle_SYSCLKCR_SYSSEL()
    {
        SYSCLKCR ^= 1u << 16u;
    }

    /**
     * Get SYSCLKCR's SYSDIV field.
     */
    inline uint8_t get_SYSCLKCR_SYSDIV()
    {
        return (SYSCLKCR >> 0u) & 0b11111111u;
    }

    /**
     * Set SYSCLKCR's SYSDIV field.
     */
    inline void set_SYSCLKCR_SYSDIV(uint8_t value)
    {
        uint32_t curr = SYSCLKCR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SYSCLKCR = curr;
    }

    /**
     * Get all of SYSCLKCR's bit fields.
     */
    inline void get_SYSCLKCR(SCU_CLK_SYSCLKCR_SYSSEL &SYSSEL, uint8_t &SYSDIV)
    {
        uint32_t curr = SYSCLKCR;

        SYSSEL = SCU_CLK_SYSCLKCR_SYSSEL(curr & (1u << 16u));
        SYSDIV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of SYSCLKCR's bit fields.
     */
    inline void set_SYSCLKCR(SCU_CLK_SYSCLKCR_SYSSEL SYSSEL, uint8_t SYSDIV)
    {
        uint32_t curr = SYSCLKCR;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(SYSSEL) & 0b1u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SYSDIV & 0b11111111u) << 0u;

        SYSCLKCR = curr;
    }

    /**
     * Get CPUCLKCR's CPUDIV bit.
     */
    inline SCU_CLK_CPUCLKCR_CPUDIV get_CPUCLKCR_CPUDIV()
    {
        return SCU_CLK_CPUCLKCR_CPUDIV(CPUCLKCR & (1u << 0u));
    }

    /**
     * Set CPUCLKCR's CPUDIV bit.
     */
    inline void set_CPUCLKCR_CPUDIV()
    {
        CPUCLKCR |= 1u << 0u;
    }

    /**
     * Clear CPUCLKCR's CPUDIV bit.
     */
    inline void clear_CPUCLKCR_CPUDIV()
    {
        CPUCLKCR &= ~(1u << 0u);
    }

    /**
     * Toggle CPUCLKCR's CPUDIV bit.
     */
    inline void toggle_CPUCLKCR_CPUDIV()
    {
        CPUCLKCR ^= 1u << 0u;
    }

    /**
     * Get PBCLKCR's PBDIV bit.
     */
    inline SCU_CLK_PBCLKCR_PBDIV get_PBCLKCR_PBDIV()
    {
        return SCU_CLK_PBCLKCR_PBDIV(PBCLKCR & (1u << 0u));
    }

    /**
     * Set PBCLKCR's PBDIV bit.
     */
    inline void set_PBCLKCR_PBDIV()
    {
        PBCLKCR |= 1u << 0u;
    }

    /**
     * Clear PBCLKCR's PBDIV bit.
     */
    inline void clear_PBCLKCR_PBDIV()
    {
        PBCLKCR &= ~(1u << 0u);
    }

    /**
     * Toggle PBCLKCR's PBDIV bit.
     */
    inline void toggle_PBCLKCR_PBDIV()
    {
        PBCLKCR ^= 1u << 0u;
    }

    /**
     * Get USBCLKCR's USBSEL bit.
     */
    inline SCU_CLK_USBCLKCR_USBSEL get_USBCLKCR_USBSEL()
    {
        return SCU_CLK_USBCLKCR_USBSEL(USBCLKCR & (1u << 16u));
    }

    /**
     * Set USBCLKCR's USBSEL bit.
     */
    inline void set_USBCLKCR_USBSEL()
    {
        USBCLKCR |= 1u << 16u;
    }

    /**
     * Clear USBCLKCR's USBSEL bit.
     */
    inline void clear_USBCLKCR_USBSEL()
    {
        USBCLKCR &= ~(1u << 16u);
    }

    /**
     * Toggle USBCLKCR's USBSEL bit.
     */
    inline void toggle_USBCLKCR_USBSEL()
    {
        USBCLKCR ^= 1u << 16u;
    }

    /**
     * Get USBCLKCR's USBDIV field.
     */
    inline uint8_t get_USBCLKCR_USBDIV()
    {
        return (USBCLKCR >> 0u) & 0b111u;
    }

    /**
     * Set USBCLKCR's USBDIV field.
     */
    inline void set_USBCLKCR_USBDIV(uint8_t value)
    {
        uint32_t curr = USBCLKCR;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        USBCLKCR = curr;
    }

    /**
     * Get all of USBCLKCR's bit fields.
     */
    inline void get_USBCLKCR(SCU_CLK_USBCLKCR_USBSEL &USBSEL, uint8_t &USBDIV)
    {
        uint32_t curr = USBCLKCR;

        USBSEL = SCU_CLK_USBCLKCR_USBSEL(curr & (1u << 16u));
        USBDIV = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of USBCLKCR's bit fields.
     */
    inline void set_USBCLKCR(SCU_CLK_USBCLKCR_USBSEL USBSEL, uint8_t USBDIV)
    {
        uint32_t curr = USBCLKCR;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(USBSEL) & 0b1u) << 16u;
        curr &= ~(0b111u << 0u);
        curr |= (USBDIV & 0b111u) << 0u;

        USBCLKCR = curr;
    }

    /**
     * Get EBUCLKCR's EBUDIV field.
     */
    inline uint8_t get_EBUCLKCR_EBUDIV()
    {
        return (EBUCLKCR >> 0u) & 0b111111u;
    }

    /**
     * Set EBUCLKCR's EBUDIV field.
     */
    inline void set_EBUCLKCR_EBUDIV(uint8_t value)
    {
        uint32_t curr = EBUCLKCR;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        EBUCLKCR = curr;
    }

    /**
     * Get CCUCLKCR's CCUDIV bit.
     */
    inline SCU_CLK_CCUCLKCR_CCUDIV get_CCUCLKCR_CCUDIV()
    {
        return SCU_CLK_CCUCLKCR_CCUDIV(CCUCLKCR & (1u << 0u));
    }

    /**
     * Set CCUCLKCR's CCUDIV bit.
     */
    inline void set_CCUCLKCR_CCUDIV()
    {
        CCUCLKCR |= 1u << 0u;
    }

    /**
     * Clear CCUCLKCR's CCUDIV bit.
     */
    inline void clear_CCUCLKCR_CCUDIV()
    {
        CCUCLKCR &= ~(1u << 0u);
    }

    /**
     * Toggle CCUCLKCR's CCUDIV bit.
     */
    inline void toggle_CCUCLKCR_CCUDIV()
    {
        CCUCLKCR ^= 1u << 0u;
    }

    /**
     * Get WDTCLKCR's WDTSEL field.
     */
    inline SCU_CLK_WDTCLKCR_WDTSEL get_WDTCLKCR_WDTSEL()
    {
        return SCU_CLK_WDTCLKCR_WDTSEL((WDTCLKCR >> 16u) & 0b11u);
    }

    /**
     * Set WDTCLKCR's WDTSEL field.
     */
    inline void set_WDTCLKCR_WDTSEL(SCU_CLK_WDTCLKCR_WDTSEL value)
    {
        uint32_t curr = WDTCLKCR;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        WDTCLKCR = curr;
    }

    /**
     * Get WDTCLKCR's WDTDIV field.
     */
    inline uint8_t get_WDTCLKCR_WDTDIV()
    {
        return (WDTCLKCR >> 0u) & 0b11111111u;
    }

    /**
     * Set WDTCLKCR's WDTDIV field.
     */
    inline void set_WDTCLKCR_WDTDIV(uint8_t value)
    {
        uint32_t curr = WDTCLKCR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        WDTCLKCR = curr;
    }

    /**
     * Get all of WDTCLKCR's bit fields.
     */
    inline void get_WDTCLKCR(SCU_CLK_WDTCLKCR_WDTSEL &WDTSEL, uint8_t &WDTDIV)
    {
        uint32_t curr = WDTCLKCR;

        WDTSEL = SCU_CLK_WDTCLKCR_WDTSEL((curr >> 16u) & 0b11u);
        WDTDIV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of WDTCLKCR's bit fields.
     */
    inline void set_WDTCLKCR(SCU_CLK_WDTCLKCR_WDTSEL WDTSEL, uint8_t WDTDIV)
    {
        uint32_t curr = WDTCLKCR;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(WDTSEL) & 0b11u) << 16u;
        curr &= ~(0b11111111u << 0u);
        curr |= (WDTDIV & 0b11111111u) << 0u;

        WDTCLKCR = curr;
    }

    /**
     * Get EXTCLKCR's ECKDIV field.
     */
    inline uint16_t get_EXTCLKCR_ECKDIV()
    {
        return (EXTCLKCR >> 16u) & 0b111111111u;
    }

    /**
     * Set EXTCLKCR's ECKDIV field.
     */
    inline void set_EXTCLKCR_ECKDIV(uint16_t value)
    {
        uint32_t curr = EXTCLKCR;

        curr &= ~(0b111111111u << 16u);
        curr |= (value & 0b111111111u) << 16u;

        EXTCLKCR = curr;
    }

    /**
     * Get EXTCLKCR's ECKSEL field.
     */
    inline SCU_CLK_EXTCLKCR_ECKSEL get_EXTCLKCR_ECKSEL()
    {
        return SCU_CLK_EXTCLKCR_ECKSEL((EXTCLKCR >> 0u) & 0b11u);
    }

    /**
     * Set EXTCLKCR's ECKSEL field.
     */
    inline void set_EXTCLKCR_ECKSEL(SCU_CLK_EXTCLKCR_ECKSEL value)
    {
        uint32_t curr = EXTCLKCR;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        EXTCLKCR = curr;
    }

    /**
     * Get all of EXTCLKCR's bit fields.
     */
    inline void get_EXTCLKCR(uint16_t &ECKDIV, SCU_CLK_EXTCLKCR_ECKSEL &ECKSEL)
    {
        uint32_t curr = EXTCLKCR;

        ECKDIV = (curr >> 16u) & 0b111111111u;
        ECKSEL = SCU_CLK_EXTCLKCR_ECKSEL((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of EXTCLKCR's bit fields.
     */
    inline void set_EXTCLKCR(uint16_t ECKDIV, SCU_CLK_EXTCLKCR_ECKSEL ECKSEL)
    {
        uint32_t curr = EXTCLKCR;

        curr &= ~(0b111111111u << 16u);
        curr |= (ECKDIV & 0b111111111u) << 16u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(ECKSEL) & 0b11u) << 0u;

        EXTCLKCR = curr;
    }

    /**
     * Get MLINKCLKCR's EBUDIV field.
     */
    inline uint8_t get_MLINKCLKCR_EBUDIV()
    {
        return (MLINKCLKCR >> 26u) & 0b111111u;
    }

    /**
     * Set MLINKCLKCR's EBUDIV field.
     */
    inline void set_MLINKCLKCR_EBUDIV(uint8_t value)
    {
        uint32_t curr = MLINKCLKCR;

        curr &= ~(0b111111u << 26u);
        curr |= (value & 0b111111u) << 26u;

        MLINKCLKCR = curr;
    }

    /**
     * Get MLINKCLKCR's WDTSEL field.
     */
    inline SCU_CLK_MLINKCLKCR_WDTSEL get_MLINKCLKCR_WDTSEL()
    {
        return SCU_CLK_MLINKCLKCR_WDTSEL((MLINKCLKCR >> 24u) & 0b11u);
    }

    /**
     * Set MLINKCLKCR's WDTSEL field.
     */
    inline void set_MLINKCLKCR_WDTSEL(SCU_CLK_MLINKCLKCR_WDTSEL value)
    {
        uint32_t curr = MLINKCLKCR;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        MLINKCLKCR = curr;
    }

    /**
     * Get MLINKCLKCR's WDTDIV field.
     */
    inline uint8_t get_MLINKCLKCR_WDTDIV()
    {
        return (MLINKCLKCR >> 16u) & 0b11111111u;
    }

    /**
     * Set MLINKCLKCR's WDTDIV field.
     */
    inline void set_MLINKCLKCR_WDTDIV(uint8_t value)
    {
        uint32_t curr = MLINKCLKCR;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        MLINKCLKCR = curr;
    }

    /**
     * Get MLINKCLKCR's CCUDIV bit.
     */
    inline SCU_CLK_MLINKCLKCR_CCUDIV get_MLINKCLKCR_CCUDIV()
    {
        return SCU_CLK_MLINKCLKCR_CCUDIV(MLINKCLKCR & (1u << 14u));
    }

    /**
     * Set MLINKCLKCR's CCUDIV bit.
     */
    inline void set_MLINKCLKCR_CCUDIV()
    {
        MLINKCLKCR |= 1u << 14u;
    }

    /**
     * Clear MLINKCLKCR's CCUDIV bit.
     */
    inline void clear_MLINKCLKCR_CCUDIV()
    {
        MLINKCLKCR &= ~(1u << 14u);
    }

    /**
     * Toggle MLINKCLKCR's CCUDIV bit.
     */
    inline void toggle_MLINKCLKCR_CCUDIV()
    {
        MLINKCLKCR ^= 1u << 14u;
    }

    /**
     * Get MLINKCLKCR's PBDIV bit.
     */
    inline SCU_CLK_MLINKCLKCR_PBDIV get_MLINKCLKCR_PBDIV()
    {
        return SCU_CLK_MLINKCLKCR_PBDIV(MLINKCLKCR & (1u << 12u));
    }

    /**
     * Set MLINKCLKCR's PBDIV bit.
     */
    inline void set_MLINKCLKCR_PBDIV()
    {
        MLINKCLKCR |= 1u << 12u;
    }

    /**
     * Clear MLINKCLKCR's PBDIV bit.
     */
    inline void clear_MLINKCLKCR_PBDIV()
    {
        MLINKCLKCR &= ~(1u << 12u);
    }

    /**
     * Toggle MLINKCLKCR's PBDIV bit.
     */
    inline void toggle_MLINKCLKCR_PBDIV()
    {
        MLINKCLKCR ^= 1u << 12u;
    }

    /**
     * Get MLINKCLKCR's CPUDIV bit.
     */
    inline SCU_CLK_MLINKCLKCR_CPUDIV get_MLINKCLKCR_CPUDIV()
    {
        return SCU_CLK_MLINKCLKCR_CPUDIV(MLINKCLKCR & (1u << 10u));
    }

    /**
     * Set MLINKCLKCR's CPUDIV bit.
     */
    inline void set_MLINKCLKCR_CPUDIV()
    {
        MLINKCLKCR |= 1u << 10u;
    }

    /**
     * Clear MLINKCLKCR's CPUDIV bit.
     */
    inline void clear_MLINKCLKCR_CPUDIV()
    {
        MLINKCLKCR &= ~(1u << 10u);
    }

    /**
     * Toggle MLINKCLKCR's CPUDIV bit.
     */
    inline void toggle_MLINKCLKCR_CPUDIV()
    {
        MLINKCLKCR ^= 1u << 10u;
    }

    /**
     * Get MLINKCLKCR's SYSSEL bit.
     */
    inline SCU_CLK_MLINKCLKCR_SYSSEL get_MLINKCLKCR_SYSSEL()
    {
        return SCU_CLK_MLINKCLKCR_SYSSEL(MLINKCLKCR & (1u << 8u));
    }

    /**
     * Set MLINKCLKCR's SYSSEL bit.
     */
    inline void set_MLINKCLKCR_SYSSEL()
    {
        MLINKCLKCR |= 1u << 8u;
    }

    /**
     * Clear MLINKCLKCR's SYSSEL bit.
     */
    inline void clear_MLINKCLKCR_SYSSEL()
    {
        MLINKCLKCR &= ~(1u << 8u);
    }

    /**
     * Toggle MLINKCLKCR's SYSSEL bit.
     */
    inline void toggle_MLINKCLKCR_SYSSEL()
    {
        MLINKCLKCR ^= 1u << 8u;
    }

    /**
     * Get MLINKCLKCR's SYSDIV field.
     */
    inline uint8_t get_MLINKCLKCR_SYSDIV()
    {
        return (MLINKCLKCR >> 0u) & 0b11111111u;
    }

    /**
     * Set MLINKCLKCR's SYSDIV field.
     */
    inline void set_MLINKCLKCR_SYSDIV(uint8_t value)
    {
        uint32_t curr = MLINKCLKCR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        MLINKCLKCR = curr;
    }

    /**
     * Get all of MLINKCLKCR's bit fields.
     */
    inline void get_MLINKCLKCR(uint8_t &EBUDIV, SCU_CLK_MLINKCLKCR_WDTSEL &WDTSEL, uint8_t &WDTDIV, SCU_CLK_MLINKCLKCR_CCUDIV &CCUDIV, SCU_CLK_MLINKCLKCR_PBDIV &PBDIV, SCU_CLK_MLINKCLKCR_CPUDIV &CPUDIV, SCU_CLK_MLINKCLKCR_SYSSEL &SYSSEL, uint8_t &SYSDIV)
    {
        uint32_t curr = MLINKCLKCR;

        EBUDIV = (curr >> 26u) & 0b111111u;
        WDTSEL = SCU_CLK_MLINKCLKCR_WDTSEL((curr >> 24u) & 0b11u);
        WDTDIV = (curr >> 16u) & 0b11111111u;
        CCUDIV = SCU_CLK_MLINKCLKCR_CCUDIV(curr & (1u << 14u));
        PBDIV = SCU_CLK_MLINKCLKCR_PBDIV(curr & (1u << 12u));
        CPUDIV = SCU_CLK_MLINKCLKCR_CPUDIV(curr & (1u << 10u));
        SYSSEL = SCU_CLK_MLINKCLKCR_SYSSEL(curr & (1u << 8u));
        SYSDIV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of MLINKCLKCR's bit fields.
     */
    inline void set_MLINKCLKCR(uint8_t EBUDIV, SCU_CLK_MLINKCLKCR_WDTSEL WDTSEL, uint8_t WDTDIV, SCU_CLK_MLINKCLKCR_CCUDIV CCUDIV, SCU_CLK_MLINKCLKCR_PBDIV PBDIV, SCU_CLK_MLINKCLKCR_CPUDIV CPUDIV, SCU_CLK_MLINKCLKCR_SYSSEL SYSSEL, uint8_t SYSDIV)
    {
        uint32_t curr = MLINKCLKCR;

        curr &= ~(0b111111u << 26u);
        curr |= (EBUDIV & 0b111111u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(WDTSEL) & 0b11u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (WDTDIV & 0b11111111u) << 16u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(CCUDIV) & 0b1u) << 14u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(PBDIV) & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(CPUDIV) & 0b1u) << 10u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(SYSSEL) & 0b1u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SYSDIV & 0b11111111u) << 0u;

        MLINKCLKCR = curr;
    }

    /**
     * Get SLEEPCR's WDTCR bit.
     */
    inline SCU_CLK_SLEEPCR_WDTCR get_SLEEPCR_WDTCR()
    {
        return SCU_CLK_SLEEPCR_WDTCR(SLEEPCR & (1u << 21u));
    }

    /**
     * Set SLEEPCR's WDTCR bit.
     */
    inline void set_SLEEPCR_WDTCR()
    {
        SLEEPCR |= 1u << 21u;
    }

    /**
     * Clear SLEEPCR's WDTCR bit.
     */
    inline void clear_SLEEPCR_WDTCR()
    {
        SLEEPCR &= ~(1u << 21u);
    }

    /**
     * Toggle SLEEPCR's WDTCR bit.
     */
    inline void toggle_SLEEPCR_WDTCR()
    {
        SLEEPCR ^= 1u << 21u;
    }

    /**
     * Get SLEEPCR's CCUCR bit.
     */
    inline SCU_CLK_SLEEPCR_CCUCR get_SLEEPCR_CCUCR()
    {
        return SCU_CLK_SLEEPCR_CCUCR(SLEEPCR & (1u << 20u));
    }

    /**
     * Set SLEEPCR's CCUCR bit.
     */
    inline void set_SLEEPCR_CCUCR()
    {
        SLEEPCR |= 1u << 20u;
    }

    /**
     * Clear SLEEPCR's CCUCR bit.
     */
    inline void clear_SLEEPCR_CCUCR()
    {
        SLEEPCR &= ~(1u << 20u);
    }

    /**
     * Toggle SLEEPCR's CCUCR bit.
     */
    inline void toggle_SLEEPCR_CCUCR()
    {
        SLEEPCR ^= 1u << 20u;
    }

    /**
     * Get SLEEPCR's EBUCR bit.
     */
    inline SCU_CLK_SLEEPCR_EBUCR get_SLEEPCR_EBUCR()
    {
        return SCU_CLK_SLEEPCR_EBUCR(SLEEPCR & (1u << 19u));
    }

    /**
     * Set SLEEPCR's EBUCR bit.
     */
    inline void set_SLEEPCR_EBUCR()
    {
        SLEEPCR |= 1u << 19u;
    }

    /**
     * Clear SLEEPCR's EBUCR bit.
     */
    inline void clear_SLEEPCR_EBUCR()
    {
        SLEEPCR &= ~(1u << 19u);
    }

    /**
     * Toggle SLEEPCR's EBUCR bit.
     */
    inline void toggle_SLEEPCR_EBUCR()
    {
        SLEEPCR ^= 1u << 19u;
    }

    /**
     * Get SLEEPCR's ETH0CR bit.
     */
    inline SCU_CLK_SLEEPCR_ETH0CR get_SLEEPCR_ETH0CR()
    {
        return SCU_CLK_SLEEPCR_ETH0CR(SLEEPCR & (1u << 18u));
    }

    /**
     * Set SLEEPCR's ETH0CR bit.
     */
    inline void set_SLEEPCR_ETH0CR()
    {
        SLEEPCR |= 1u << 18u;
    }

    /**
     * Clear SLEEPCR's ETH0CR bit.
     */
    inline void clear_SLEEPCR_ETH0CR()
    {
        SLEEPCR &= ~(1u << 18u);
    }

    /**
     * Toggle SLEEPCR's ETH0CR bit.
     */
    inline void toggle_SLEEPCR_ETH0CR()
    {
        SLEEPCR ^= 1u << 18u;
    }

    /**
     * Get SLEEPCR's MMCCR bit.
     */
    inline SCU_CLK_SLEEPCR_MMCCR get_SLEEPCR_MMCCR()
    {
        return SCU_CLK_SLEEPCR_MMCCR(SLEEPCR & (1u << 17u));
    }

    /**
     * Set SLEEPCR's MMCCR bit.
     */
    inline void set_SLEEPCR_MMCCR()
    {
        SLEEPCR |= 1u << 17u;
    }

    /**
     * Clear SLEEPCR's MMCCR bit.
     */
    inline void clear_SLEEPCR_MMCCR()
    {
        SLEEPCR &= ~(1u << 17u);
    }

    /**
     * Toggle SLEEPCR's MMCCR bit.
     */
    inline void toggle_SLEEPCR_MMCCR()
    {
        SLEEPCR ^= 1u << 17u;
    }

    /**
     * Get SLEEPCR's USBCR bit.
     */
    inline SCU_CLK_SLEEPCR_USBCR get_SLEEPCR_USBCR()
    {
        return SCU_CLK_SLEEPCR_USBCR(SLEEPCR & (1u << 16u));
    }

    /**
     * Set SLEEPCR's USBCR bit.
     */
    inline void set_SLEEPCR_USBCR()
    {
        SLEEPCR |= 1u << 16u;
    }

    /**
     * Clear SLEEPCR's USBCR bit.
     */
    inline void clear_SLEEPCR_USBCR()
    {
        SLEEPCR &= ~(1u << 16u);
    }

    /**
     * Toggle SLEEPCR's USBCR bit.
     */
    inline void toggle_SLEEPCR_USBCR()
    {
        SLEEPCR ^= 1u << 16u;
    }

    /**
     * Get SLEEPCR's SYSSEL bit.
     */
    inline SCU_CLK_SLEEPCR_SYSSEL get_SLEEPCR_SYSSEL()
    {
        return SCU_CLK_SLEEPCR_SYSSEL(SLEEPCR & (1u << 0u));
    }

    /**
     * Set SLEEPCR's SYSSEL bit.
     */
    inline void set_SLEEPCR_SYSSEL()
    {
        SLEEPCR |= 1u << 0u;
    }

    /**
     * Clear SLEEPCR's SYSSEL bit.
     */
    inline void clear_SLEEPCR_SYSSEL()
    {
        SLEEPCR &= ~(1u << 0u);
    }

    /**
     * Toggle SLEEPCR's SYSSEL bit.
     */
    inline void toggle_SLEEPCR_SYSSEL()
    {
        SLEEPCR ^= 1u << 0u;
    }

    /**
     * Get all of SLEEPCR's bit fields.
     */
    inline void get_SLEEPCR(SCU_CLK_SLEEPCR_WDTCR &WDTCR, SCU_CLK_SLEEPCR_CCUCR &CCUCR, SCU_CLK_SLEEPCR_EBUCR &EBUCR, SCU_CLK_SLEEPCR_ETH0CR &ETH0CR, SCU_CLK_SLEEPCR_MMCCR &MMCCR, SCU_CLK_SLEEPCR_USBCR &USBCR, SCU_CLK_SLEEPCR_SYSSEL &SYSSEL)
    {
        uint32_t curr = SLEEPCR;

        WDTCR = SCU_CLK_SLEEPCR_WDTCR(curr & (1u << 21u));
        CCUCR = SCU_CLK_SLEEPCR_CCUCR(curr & (1u << 20u));
        EBUCR = SCU_CLK_SLEEPCR_EBUCR(curr & (1u << 19u));
        ETH0CR = SCU_CLK_SLEEPCR_ETH0CR(curr & (1u << 18u));
        MMCCR = SCU_CLK_SLEEPCR_MMCCR(curr & (1u << 17u));
        USBCR = SCU_CLK_SLEEPCR_USBCR(curr & (1u << 16u));
        SYSSEL = SCU_CLK_SLEEPCR_SYSSEL(curr & (1u << 0u));
    }

    /**
     * Set all of SLEEPCR's bit fields.
     */
    inline void set_SLEEPCR(SCU_CLK_SLEEPCR_WDTCR WDTCR, SCU_CLK_SLEEPCR_CCUCR CCUCR, SCU_CLK_SLEEPCR_EBUCR EBUCR, SCU_CLK_SLEEPCR_ETH0CR ETH0CR, SCU_CLK_SLEEPCR_MMCCR MMCCR, SCU_CLK_SLEEPCR_USBCR USBCR, SCU_CLK_SLEEPCR_SYSSEL SYSSEL)
    {
        uint32_t curr = SLEEPCR;

        curr &= ~(0b1u << 21u);
        curr |= (std::to_underlying(WDTCR) & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(CCUCR) & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(EBUCR) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(ETH0CR) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(MMCCR) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(USBCR) & 0b1u) << 16u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(SYSSEL) & 0b1u) << 0u;

        SLEEPCR = curr;
    }

    /**
     * Get DSLEEPCR's WDTCR bit.
     */
    inline SCU_CLK_DSLEEPCR_WDTCR get_DSLEEPCR_WDTCR()
    {
        return SCU_CLK_DSLEEPCR_WDTCR(DSLEEPCR & (1u << 21u));
    }

    /**
     * Set DSLEEPCR's WDTCR bit.
     */
    inline void set_DSLEEPCR_WDTCR()
    {
        DSLEEPCR |= 1u << 21u;
    }

    /**
     * Clear DSLEEPCR's WDTCR bit.
     */
    inline void clear_DSLEEPCR_WDTCR()
    {
        DSLEEPCR &= ~(1u << 21u);
    }

    /**
     * Toggle DSLEEPCR's WDTCR bit.
     */
    inline void toggle_DSLEEPCR_WDTCR()
    {
        DSLEEPCR ^= 1u << 21u;
    }

    /**
     * Get DSLEEPCR's CCUCR bit.
     */
    inline SCU_CLK_DSLEEPCR_CCUCR get_DSLEEPCR_CCUCR()
    {
        return SCU_CLK_DSLEEPCR_CCUCR(DSLEEPCR & (1u << 20u));
    }

    /**
     * Set DSLEEPCR's CCUCR bit.
     */
    inline void set_DSLEEPCR_CCUCR()
    {
        DSLEEPCR |= 1u << 20u;
    }

    /**
     * Clear DSLEEPCR's CCUCR bit.
     */
    inline void clear_DSLEEPCR_CCUCR()
    {
        DSLEEPCR &= ~(1u << 20u);
    }

    /**
     * Toggle DSLEEPCR's CCUCR bit.
     */
    inline void toggle_DSLEEPCR_CCUCR()
    {
        DSLEEPCR ^= 1u << 20u;
    }

    /**
     * Get DSLEEPCR's EBUCR bit.
     */
    inline SCU_CLK_DSLEEPCR_EBUCR get_DSLEEPCR_EBUCR()
    {
        return SCU_CLK_DSLEEPCR_EBUCR(DSLEEPCR & (1u << 19u));
    }

    /**
     * Set DSLEEPCR's EBUCR bit.
     */
    inline void set_DSLEEPCR_EBUCR()
    {
        DSLEEPCR |= 1u << 19u;
    }

    /**
     * Clear DSLEEPCR's EBUCR bit.
     */
    inline void clear_DSLEEPCR_EBUCR()
    {
        DSLEEPCR &= ~(1u << 19u);
    }

    /**
     * Toggle DSLEEPCR's EBUCR bit.
     */
    inline void toggle_DSLEEPCR_EBUCR()
    {
        DSLEEPCR ^= 1u << 19u;
    }

    /**
     * Get DSLEEPCR's ETH0CR bit.
     */
    inline SCU_CLK_DSLEEPCR_ETH0CR get_DSLEEPCR_ETH0CR()
    {
        return SCU_CLK_DSLEEPCR_ETH0CR(DSLEEPCR & (1u << 18u));
    }

    /**
     * Set DSLEEPCR's ETH0CR bit.
     */
    inline void set_DSLEEPCR_ETH0CR()
    {
        DSLEEPCR |= 1u << 18u;
    }

    /**
     * Clear DSLEEPCR's ETH0CR bit.
     */
    inline void clear_DSLEEPCR_ETH0CR()
    {
        DSLEEPCR &= ~(1u << 18u);
    }

    /**
     * Toggle DSLEEPCR's ETH0CR bit.
     */
    inline void toggle_DSLEEPCR_ETH0CR()
    {
        DSLEEPCR ^= 1u << 18u;
    }

    /**
     * Get DSLEEPCR's MMCCR bit.
     */
    inline SCU_CLK_DSLEEPCR_MMCCR get_DSLEEPCR_MMCCR()
    {
        return SCU_CLK_DSLEEPCR_MMCCR(DSLEEPCR & (1u << 17u));
    }

    /**
     * Set DSLEEPCR's MMCCR bit.
     */
    inline void set_DSLEEPCR_MMCCR()
    {
        DSLEEPCR |= 1u << 17u;
    }

    /**
     * Clear DSLEEPCR's MMCCR bit.
     */
    inline void clear_DSLEEPCR_MMCCR()
    {
        DSLEEPCR &= ~(1u << 17u);
    }

    /**
     * Toggle DSLEEPCR's MMCCR bit.
     */
    inline void toggle_DSLEEPCR_MMCCR()
    {
        DSLEEPCR ^= 1u << 17u;
    }

    /**
     * Get DSLEEPCR's USBCR bit.
     */
    inline SCU_CLK_DSLEEPCR_USBCR get_DSLEEPCR_USBCR()
    {
        return SCU_CLK_DSLEEPCR_USBCR(DSLEEPCR & (1u << 16u));
    }

    /**
     * Set DSLEEPCR's USBCR bit.
     */
    inline void set_DSLEEPCR_USBCR()
    {
        DSLEEPCR |= 1u << 16u;
    }

    /**
     * Clear DSLEEPCR's USBCR bit.
     */
    inline void clear_DSLEEPCR_USBCR()
    {
        DSLEEPCR &= ~(1u << 16u);
    }

    /**
     * Toggle DSLEEPCR's USBCR bit.
     */
    inline void toggle_DSLEEPCR_USBCR()
    {
        DSLEEPCR ^= 1u << 16u;
    }

    /**
     * Get DSLEEPCR's VCOPDN bit.
     */
    inline SCU_CLK_DSLEEPCR_VCOPDN get_DSLEEPCR_VCOPDN()
    {
        return SCU_CLK_DSLEEPCR_VCOPDN(DSLEEPCR & (1u << 13u));
    }

    /**
     * Set DSLEEPCR's VCOPDN bit.
     */
    inline void set_DSLEEPCR_VCOPDN()
    {
        DSLEEPCR |= 1u << 13u;
    }

    /**
     * Clear DSLEEPCR's VCOPDN bit.
     */
    inline void clear_DSLEEPCR_VCOPDN()
    {
        DSLEEPCR &= ~(1u << 13u);
    }

    /**
     * Toggle DSLEEPCR's VCOPDN bit.
     */
    inline void toggle_DSLEEPCR_VCOPDN()
    {
        DSLEEPCR ^= 1u << 13u;
    }

    /**
     * Get DSLEEPCR's PLLPDN bit.
     */
    inline SCU_CLK_DSLEEPCR_PLLPDN get_DSLEEPCR_PLLPDN()
    {
        return SCU_CLK_DSLEEPCR_PLLPDN(DSLEEPCR & (1u << 12u));
    }

    /**
     * Set DSLEEPCR's PLLPDN bit.
     */
    inline void set_DSLEEPCR_PLLPDN()
    {
        DSLEEPCR |= 1u << 12u;
    }

    /**
     * Clear DSLEEPCR's PLLPDN bit.
     */
    inline void clear_DSLEEPCR_PLLPDN()
    {
        DSLEEPCR &= ~(1u << 12u);
    }

    /**
     * Toggle DSLEEPCR's PLLPDN bit.
     */
    inline void toggle_DSLEEPCR_PLLPDN()
    {
        DSLEEPCR ^= 1u << 12u;
    }

    /**
     * Get DSLEEPCR's FPDN bit.
     */
    inline SCU_CLK_DSLEEPCR_FPDN get_DSLEEPCR_FPDN()
    {
        return SCU_CLK_DSLEEPCR_FPDN(DSLEEPCR & (1u << 11u));
    }

    /**
     * Set DSLEEPCR's FPDN bit.
     */
    inline void set_DSLEEPCR_FPDN()
    {
        DSLEEPCR |= 1u << 11u;
    }

    /**
     * Clear DSLEEPCR's FPDN bit.
     */
    inline void clear_DSLEEPCR_FPDN()
    {
        DSLEEPCR &= ~(1u << 11u);
    }

    /**
     * Toggle DSLEEPCR's FPDN bit.
     */
    inline void toggle_DSLEEPCR_FPDN()
    {
        DSLEEPCR ^= 1u << 11u;
    }

    /**
     * Get DSLEEPCR's SYSSEL bit.
     */
    inline SCU_CLK_DSLEEPCR_SYSSEL get_DSLEEPCR_SYSSEL()
    {
        return SCU_CLK_DSLEEPCR_SYSSEL(DSLEEPCR & (1u << 0u));
    }

    /**
     * Set DSLEEPCR's SYSSEL bit.
     */
    inline void set_DSLEEPCR_SYSSEL()
    {
        DSLEEPCR |= 1u << 0u;
    }

    /**
     * Clear DSLEEPCR's SYSSEL bit.
     */
    inline void clear_DSLEEPCR_SYSSEL()
    {
        DSLEEPCR &= ~(1u << 0u);
    }

    /**
     * Toggle DSLEEPCR's SYSSEL bit.
     */
    inline void toggle_DSLEEPCR_SYSSEL()
    {
        DSLEEPCR ^= 1u << 0u;
    }

    /**
     * Get all of DSLEEPCR's bit fields.
     */
    inline void get_DSLEEPCR(SCU_CLK_DSLEEPCR_WDTCR &WDTCR, SCU_CLK_DSLEEPCR_CCUCR &CCUCR, SCU_CLK_DSLEEPCR_EBUCR &EBUCR, SCU_CLK_DSLEEPCR_ETH0CR &ETH0CR, SCU_CLK_DSLEEPCR_MMCCR &MMCCR, SCU_CLK_DSLEEPCR_USBCR &USBCR, SCU_CLK_DSLEEPCR_VCOPDN &VCOPDN, SCU_CLK_DSLEEPCR_PLLPDN &PLLPDN, SCU_CLK_DSLEEPCR_FPDN &FPDN, SCU_CLK_DSLEEPCR_SYSSEL &SYSSEL)
    {
        uint32_t curr = DSLEEPCR;

        WDTCR = SCU_CLK_DSLEEPCR_WDTCR(curr & (1u << 21u));
        CCUCR = SCU_CLK_DSLEEPCR_CCUCR(curr & (1u << 20u));
        EBUCR = SCU_CLK_DSLEEPCR_EBUCR(curr & (1u << 19u));
        ETH0CR = SCU_CLK_DSLEEPCR_ETH0CR(curr & (1u << 18u));
        MMCCR = SCU_CLK_DSLEEPCR_MMCCR(curr & (1u << 17u));
        USBCR = SCU_CLK_DSLEEPCR_USBCR(curr & (1u << 16u));
        VCOPDN = SCU_CLK_DSLEEPCR_VCOPDN(curr & (1u << 13u));
        PLLPDN = SCU_CLK_DSLEEPCR_PLLPDN(curr & (1u << 12u));
        FPDN = SCU_CLK_DSLEEPCR_FPDN(curr & (1u << 11u));
        SYSSEL = SCU_CLK_DSLEEPCR_SYSSEL(curr & (1u << 0u));
    }

    /**
     * Set all of DSLEEPCR's bit fields.
     */
    inline void set_DSLEEPCR(SCU_CLK_DSLEEPCR_WDTCR WDTCR, SCU_CLK_DSLEEPCR_CCUCR CCUCR, SCU_CLK_DSLEEPCR_EBUCR EBUCR, SCU_CLK_DSLEEPCR_ETH0CR ETH0CR, SCU_CLK_DSLEEPCR_MMCCR MMCCR, SCU_CLK_DSLEEPCR_USBCR USBCR, SCU_CLK_DSLEEPCR_VCOPDN VCOPDN, SCU_CLK_DSLEEPCR_PLLPDN PLLPDN, SCU_CLK_DSLEEPCR_FPDN FPDN, SCU_CLK_DSLEEPCR_SYSSEL SYSSEL)
    {
        uint32_t curr = DSLEEPCR;

        curr &= ~(0b1u << 21u);
        curr |= (std::to_underlying(WDTCR) & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(CCUCR) & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(EBUCR) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(ETH0CR) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(MMCCR) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(USBCR) & 0b1u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(VCOPDN) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(PLLPDN) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(FPDN) & 0b1u) << 11u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(SYSSEL) & 0b1u) << 0u;

        DSLEEPCR = curr;
    }

    /**
     * Get CGATSTAT0's ERU1 bit.
     */
    inline SCU_CLK_CGATSTAT0_ERU1 get_CGATSTAT0_ERU1()
    {
        return SCU_CLK_CGATSTAT0_ERU1(CGATSTAT0 & (1u << 16u));
    }

    /**
     * Get CGATSTAT0's USIC0 bit.
     */
    inline SCU_CLK_CGATSTAT0_USIC0 get_CGATSTAT0_USIC0()
    {
        return SCU_CLK_CGATSTAT0_USIC0(CGATSTAT0 & (1u << 11u));
    }

    /**
     * Get CGATSTAT0's POSIF1 bit.
     */
    inline SCU_CLK_CGATSTAT0_POSIF1 get_CGATSTAT0_POSIF1()
    {
        return SCU_CLK_CGATSTAT0_POSIF1(CGATSTAT0 & (1u << 10u));
    }

    /**
     * Get CGATSTAT0's POSIF0 bit.
     */
    inline SCU_CLK_CGATSTAT0_POSIF0 get_CGATSTAT0_POSIF0()
    {
        return SCU_CLK_CGATSTAT0_POSIF0(CGATSTAT0 & (1u << 9u));
    }

    /**
     * Get CGATSTAT0's CCU81 bit.
     */
    inline SCU_CLK_CGATSTAT0_CCU81 get_CGATSTAT0_CCU81()
    {
        return SCU_CLK_CGATSTAT0_CCU81(CGATSTAT0 & (1u << 8u));
    }

    /**
     * Get CGATSTAT0's CCU80 bit.
     */
    inline SCU_CLK_CGATSTAT0_CCU80 get_CGATSTAT0_CCU80()
    {
        return SCU_CLK_CGATSTAT0_CCU80(CGATSTAT0 & (1u << 7u));
    }

    /**
     * Get CGATSTAT0's CCU42 bit.
     */
    inline SCU_CLK_CGATSTAT0_CCU42 get_CGATSTAT0_CCU42()
    {
        return SCU_CLK_CGATSTAT0_CCU42(CGATSTAT0 & (1u << 4u));
    }

    /**
     * Get CGATSTAT0's CCU41 bit.
     */
    inline SCU_CLK_CGATSTAT0_CCU41 get_CGATSTAT0_CCU41()
    {
        return SCU_CLK_CGATSTAT0_CCU41(CGATSTAT0 & (1u << 3u));
    }

    /**
     * Get CGATSTAT0's CCU40 bit.
     */
    inline SCU_CLK_CGATSTAT0_CCU40 get_CGATSTAT0_CCU40()
    {
        return SCU_CLK_CGATSTAT0_CCU40(CGATSTAT0 & (1u << 2u));
    }

    /**
     * Get CGATSTAT0's DSD bit.
     */
    inline SCU_CLK_CGATSTAT0_DSD get_CGATSTAT0_DSD()
    {
        return SCU_CLK_CGATSTAT0_DSD(CGATSTAT0 & (1u << 1u));
    }

    /**
     * Get CGATSTAT0's VADC bit.
     */
    inline SCU_CLK_CGATSTAT0_VADC get_CGATSTAT0_VADC()
    {
        return SCU_CLK_CGATSTAT0_VADC(CGATSTAT0 & (1u << 0u));
    }

    /**
     * Get all of CGATSTAT0's bit fields.
     */
    inline void get_CGATSTAT0(SCU_CLK_CGATSTAT0_ERU1 &ERU1, SCU_CLK_CGATSTAT0_USIC0 &USIC0, SCU_CLK_CGATSTAT0_POSIF1 &POSIF1, SCU_CLK_CGATSTAT0_POSIF0 &POSIF0, SCU_CLK_CGATSTAT0_CCU81 &CCU81, SCU_CLK_CGATSTAT0_CCU80 &CCU80, SCU_CLK_CGATSTAT0_CCU42 &CCU42, SCU_CLK_CGATSTAT0_CCU41 &CCU41, SCU_CLK_CGATSTAT0_CCU40 &CCU40, SCU_CLK_CGATSTAT0_DSD &DSD, SCU_CLK_CGATSTAT0_VADC &VADC)
    {
        uint32_t curr = CGATSTAT0;

        ERU1 = SCU_CLK_CGATSTAT0_ERU1(curr & (1u << 16u));
        USIC0 = SCU_CLK_CGATSTAT0_USIC0(curr & (1u << 11u));
        POSIF1 = SCU_CLK_CGATSTAT0_POSIF1(curr & (1u << 10u));
        POSIF0 = SCU_CLK_CGATSTAT0_POSIF0(curr & (1u << 9u));
        CCU81 = SCU_CLK_CGATSTAT0_CCU81(curr & (1u << 8u));
        CCU80 = SCU_CLK_CGATSTAT0_CCU80(curr & (1u << 7u));
        CCU42 = SCU_CLK_CGATSTAT0_CCU42(curr & (1u << 4u));
        CCU41 = SCU_CLK_CGATSTAT0_CCU41(curr & (1u << 3u));
        CCU40 = SCU_CLK_CGATSTAT0_CCU40(curr & (1u << 2u));
        DSD = SCU_CLK_CGATSTAT0_DSD(curr & (1u << 1u));
        VADC = SCU_CLK_CGATSTAT0_VADC(curr & (1u << 0u));
    }

    /**
     * Set CGATSET0's ERU1 bit.
     */
    inline void set_CGATSET0_ERU1()
    {
        CGATSET0 |= 1u << 16u;
    }

    /**
     * Clear CGATSET0's ERU1 bit.
     */
    inline void clear_CGATSET0_ERU1()
    {
        CGATSET0 &= ~(1u << 16u);
    }

    /**
     * Toggle CGATSET0's ERU1 bit.
     */
    inline void toggle_CGATSET0_ERU1()
    {
        CGATSET0 ^= 1u << 16u;
    }

    /**
     * Set CGATSET0's USIC0 bit.
     */
    inline void set_CGATSET0_USIC0()
    {
        CGATSET0 |= 1u << 11u;
    }

    /**
     * Clear CGATSET0's USIC0 bit.
     */
    inline void clear_CGATSET0_USIC0()
    {
        CGATSET0 &= ~(1u << 11u);
    }

    /**
     * Toggle CGATSET0's USIC0 bit.
     */
    inline void toggle_CGATSET0_USIC0()
    {
        CGATSET0 ^= 1u << 11u;
    }

    /**
     * Set CGATSET0's POSIF1 bit.
     */
    inline void set_CGATSET0_POSIF1()
    {
        CGATSET0 |= 1u << 10u;
    }

    /**
     * Clear CGATSET0's POSIF1 bit.
     */
    inline void clear_CGATSET0_POSIF1()
    {
        CGATSET0 &= ~(1u << 10u);
    }

    /**
     * Toggle CGATSET0's POSIF1 bit.
     */
    inline void toggle_CGATSET0_POSIF1()
    {
        CGATSET0 ^= 1u << 10u;
    }

    /**
     * Set CGATSET0's POSIF0 bit.
     */
    inline void set_CGATSET0_POSIF0()
    {
        CGATSET0 |= 1u << 9u;
    }

    /**
     * Clear CGATSET0's POSIF0 bit.
     */
    inline void clear_CGATSET0_POSIF0()
    {
        CGATSET0 &= ~(1u << 9u);
    }

    /**
     * Toggle CGATSET0's POSIF0 bit.
     */
    inline void toggle_CGATSET0_POSIF0()
    {
        CGATSET0 ^= 1u << 9u;
    }

    /**
     * Set CGATSET0's CCU81 bit.
     */
    inline void set_CGATSET0_CCU81()
    {
        CGATSET0 |= 1u << 8u;
    }

    /**
     * Clear CGATSET0's CCU81 bit.
     */
    inline void clear_CGATSET0_CCU81()
    {
        CGATSET0 &= ~(1u << 8u);
    }

    /**
     * Toggle CGATSET0's CCU81 bit.
     */
    inline void toggle_CGATSET0_CCU81()
    {
        CGATSET0 ^= 1u << 8u;
    }

    /**
     * Set CGATSET0's CCU80 bit.
     */
    inline void set_CGATSET0_CCU80()
    {
        CGATSET0 |= 1u << 7u;
    }

    /**
     * Clear CGATSET0's CCU80 bit.
     */
    inline void clear_CGATSET0_CCU80()
    {
        CGATSET0 &= ~(1u << 7u);
    }

    /**
     * Toggle CGATSET0's CCU80 bit.
     */
    inline void toggle_CGATSET0_CCU80()
    {
        CGATSET0 ^= 1u << 7u;
    }

    /**
     * Set CGATSET0's CCU42 bit.
     */
    inline void set_CGATSET0_CCU42()
    {
        CGATSET0 |= 1u << 4u;
    }

    /**
     * Clear CGATSET0's CCU42 bit.
     */
    inline void clear_CGATSET0_CCU42()
    {
        CGATSET0 &= ~(1u << 4u);
    }

    /**
     * Toggle CGATSET0's CCU42 bit.
     */
    inline void toggle_CGATSET0_CCU42()
    {
        CGATSET0 ^= 1u << 4u;
    }

    /**
     * Set CGATSET0's CCU41 bit.
     */
    inline void set_CGATSET0_CCU41()
    {
        CGATSET0 |= 1u << 3u;
    }

    /**
     * Clear CGATSET0's CCU41 bit.
     */
    inline void clear_CGATSET0_CCU41()
    {
        CGATSET0 &= ~(1u << 3u);
    }

    /**
     * Toggle CGATSET0's CCU41 bit.
     */
    inline void toggle_CGATSET0_CCU41()
    {
        CGATSET0 ^= 1u << 3u;
    }

    /**
     * Set CGATSET0's CCU40 bit.
     */
    inline void set_CGATSET0_CCU40()
    {
        CGATSET0 |= 1u << 2u;
    }

    /**
     * Clear CGATSET0's CCU40 bit.
     */
    inline void clear_CGATSET0_CCU40()
    {
        CGATSET0 &= ~(1u << 2u);
    }

    /**
     * Toggle CGATSET0's CCU40 bit.
     */
    inline void toggle_CGATSET0_CCU40()
    {
        CGATSET0 ^= 1u << 2u;
    }

    /**
     * Set CGATSET0's DSD bit.
     */
    inline void set_CGATSET0_DSD()
    {
        CGATSET0 |= 1u << 1u;
    }

    /**
     * Clear CGATSET0's DSD bit.
     */
    inline void clear_CGATSET0_DSD()
    {
        CGATSET0 &= ~(1u << 1u);
    }

    /**
     * Toggle CGATSET0's DSD bit.
     */
    inline void toggle_CGATSET0_DSD()
    {
        CGATSET0 ^= 1u << 1u;
    }

    /**
     * Set CGATSET0's VADC bit.
     */
    inline void set_CGATSET0_VADC()
    {
        CGATSET0 |= 1u << 0u;
    }

    /**
     * Clear CGATSET0's VADC bit.
     */
    inline void clear_CGATSET0_VADC()
    {
        CGATSET0 &= ~(1u << 0u);
    }

    /**
     * Toggle CGATSET0's VADC bit.
     */
    inline void toggle_CGATSET0_VADC()
    {
        CGATSET0 ^= 1u << 0u;
    }

    /**
     * Set all of CGATSET0's bit fields.
     */
    inline void set_CGATSET0(SCU_CLK_CGATSET0_ERU1 ERU1, SCU_CLK_CGATSET0_USIC0 USIC0, SCU_CLK_CGATSET0_POSIF1 POSIF1, SCU_CLK_CGATSET0_POSIF0 POSIF0, SCU_CLK_CGATSET0_CCU81 CCU81, SCU_CLK_CGATSET0_CCU80 CCU80, SCU_CLK_CGATSET0_CCU42 CCU42, SCU_CLK_CGATSET0_CCU41 CCU41, SCU_CLK_CGATSET0_CCU40 CCU40, SCU_CLK_CGATSET0_DSD DSD, SCU_CLK_CGATSET0_VADC VADC)
    {
        uint32_t curr = CGATSET0;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ERU1) & 0b1u) << 16u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(USIC0) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(POSIF1) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(POSIF0) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(CCU81) & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(CCU80) & 0b1u) << 7u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(CCU42) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CCU41) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CCU40) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(DSD) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(VADC) & 0b1u) << 0u;

        CGATSET0 = curr;
    }

    /**
     * Set CGATCLR0's ERU1 bit.
     */
    inline void set_CGATCLR0_ERU1()
    {
        CGATCLR0 |= 1u << 16u;
    }

    /**
     * Clear CGATCLR0's ERU1 bit.
     */
    inline void clear_CGATCLR0_ERU1()
    {
        CGATCLR0 &= ~(1u << 16u);
    }

    /**
     * Toggle CGATCLR0's ERU1 bit.
     */
    inline void toggle_CGATCLR0_ERU1()
    {
        CGATCLR0 ^= 1u << 16u;
    }

    /**
     * Set CGATCLR0's USIC0 bit.
     */
    inline void set_CGATCLR0_USIC0()
    {
        CGATCLR0 |= 1u << 11u;
    }

    /**
     * Clear CGATCLR0's USIC0 bit.
     */
    inline void clear_CGATCLR0_USIC0()
    {
        CGATCLR0 &= ~(1u << 11u);
    }

    /**
     * Toggle CGATCLR0's USIC0 bit.
     */
    inline void toggle_CGATCLR0_USIC0()
    {
        CGATCLR0 ^= 1u << 11u;
    }

    /**
     * Set CGATCLR0's POSIF1 bit.
     */
    inline void set_CGATCLR0_POSIF1()
    {
        CGATCLR0 |= 1u << 10u;
    }

    /**
     * Clear CGATCLR0's POSIF1 bit.
     */
    inline void clear_CGATCLR0_POSIF1()
    {
        CGATCLR0 &= ~(1u << 10u);
    }

    /**
     * Toggle CGATCLR0's POSIF1 bit.
     */
    inline void toggle_CGATCLR0_POSIF1()
    {
        CGATCLR0 ^= 1u << 10u;
    }

    /**
     * Set CGATCLR0's POSIF0 bit.
     */
    inline void set_CGATCLR0_POSIF0()
    {
        CGATCLR0 |= 1u << 9u;
    }

    /**
     * Clear CGATCLR0's POSIF0 bit.
     */
    inline void clear_CGATCLR0_POSIF0()
    {
        CGATCLR0 &= ~(1u << 9u);
    }

    /**
     * Toggle CGATCLR0's POSIF0 bit.
     */
    inline void toggle_CGATCLR0_POSIF0()
    {
        CGATCLR0 ^= 1u << 9u;
    }

    /**
     * Set CGATCLR0's CCU81 bit.
     */
    inline void set_CGATCLR0_CCU81()
    {
        CGATCLR0 |= 1u << 8u;
    }

    /**
     * Clear CGATCLR0's CCU81 bit.
     */
    inline void clear_CGATCLR0_CCU81()
    {
        CGATCLR0 &= ~(1u << 8u);
    }

    /**
     * Toggle CGATCLR0's CCU81 bit.
     */
    inline void toggle_CGATCLR0_CCU81()
    {
        CGATCLR0 ^= 1u << 8u;
    }

    /**
     * Set CGATCLR0's CCU80 bit.
     */
    inline void set_CGATCLR0_CCU80()
    {
        CGATCLR0 |= 1u << 7u;
    }

    /**
     * Clear CGATCLR0's CCU80 bit.
     */
    inline void clear_CGATCLR0_CCU80()
    {
        CGATCLR0 &= ~(1u << 7u);
    }

    /**
     * Toggle CGATCLR0's CCU80 bit.
     */
    inline void toggle_CGATCLR0_CCU80()
    {
        CGATCLR0 ^= 1u << 7u;
    }

    /**
     * Set CGATCLR0's CCU42 bit.
     */
    inline void set_CGATCLR0_CCU42()
    {
        CGATCLR0 |= 1u << 4u;
    }

    /**
     * Clear CGATCLR0's CCU42 bit.
     */
    inline void clear_CGATCLR0_CCU42()
    {
        CGATCLR0 &= ~(1u << 4u);
    }

    /**
     * Toggle CGATCLR0's CCU42 bit.
     */
    inline void toggle_CGATCLR0_CCU42()
    {
        CGATCLR0 ^= 1u << 4u;
    }

    /**
     * Set CGATCLR0's CCU41 bit.
     */
    inline void set_CGATCLR0_CCU41()
    {
        CGATCLR0 |= 1u << 3u;
    }

    /**
     * Clear CGATCLR0's CCU41 bit.
     */
    inline void clear_CGATCLR0_CCU41()
    {
        CGATCLR0 &= ~(1u << 3u);
    }

    /**
     * Toggle CGATCLR0's CCU41 bit.
     */
    inline void toggle_CGATCLR0_CCU41()
    {
        CGATCLR0 ^= 1u << 3u;
    }

    /**
     * Set CGATCLR0's CCU40 bit.
     */
    inline void set_CGATCLR0_CCU40()
    {
        CGATCLR0 |= 1u << 2u;
    }

    /**
     * Clear CGATCLR0's CCU40 bit.
     */
    inline void clear_CGATCLR0_CCU40()
    {
        CGATCLR0 &= ~(1u << 2u);
    }

    /**
     * Toggle CGATCLR0's CCU40 bit.
     */
    inline void toggle_CGATCLR0_CCU40()
    {
        CGATCLR0 ^= 1u << 2u;
    }

    /**
     * Set CGATCLR0's DSD bit.
     */
    inline void set_CGATCLR0_DSD()
    {
        CGATCLR0 |= 1u << 1u;
    }

    /**
     * Clear CGATCLR0's DSD bit.
     */
    inline void clear_CGATCLR0_DSD()
    {
        CGATCLR0 &= ~(1u << 1u);
    }

    /**
     * Toggle CGATCLR0's DSD bit.
     */
    inline void toggle_CGATCLR0_DSD()
    {
        CGATCLR0 ^= 1u << 1u;
    }

    /**
     * Set CGATCLR0's VADC bit.
     */
    inline void set_CGATCLR0_VADC()
    {
        CGATCLR0 |= 1u << 0u;
    }

    /**
     * Clear CGATCLR0's VADC bit.
     */
    inline void clear_CGATCLR0_VADC()
    {
        CGATCLR0 &= ~(1u << 0u);
    }

    /**
     * Toggle CGATCLR0's VADC bit.
     */
    inline void toggle_CGATCLR0_VADC()
    {
        CGATCLR0 ^= 1u << 0u;
    }

    /**
     * Set all of CGATCLR0's bit fields.
     */
    inline void set_CGATCLR0(SCU_CLK_CGATCLR0_ERU1 ERU1, SCU_CLK_CGATCLR0_USIC0 USIC0, SCU_CLK_CGATCLR0_POSIF1 POSIF1, SCU_CLK_CGATCLR0_POSIF0 POSIF0, SCU_CLK_CGATCLR0_CCU81 CCU81, SCU_CLK_CGATCLR0_CCU80 CCU80, SCU_CLK_CGATCLR0_CCU42 CCU42, SCU_CLK_CGATCLR0_CCU41 CCU41, SCU_CLK_CGATCLR0_CCU40 CCU40, SCU_CLK_CGATCLR0_DSD DSD, SCU_CLK_CGATCLR0_VADC VADC)
    {
        uint32_t curr = CGATCLR0;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ERU1) & 0b1u) << 16u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(USIC0) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(POSIF1) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(POSIF0) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(CCU81) & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(CCU80) & 0b1u) << 7u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(CCU42) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CCU41) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CCU40) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(DSD) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(VADC) & 0b1u) << 0u;

        CGATCLR0 = curr;
    }

    /**
     * Get CGATSTAT1's PPORTS bit.
     */
    inline SCU_CLK_CGATSTAT1_PPORTS get_CGATSTAT1_PPORTS()
    {
        return SCU_CLK_CGATSTAT1_PPORTS(CGATSTAT1 & (1u << 9u));
    }

    /**
     * Get CGATSTAT1's USIC2 bit.
     */
    inline SCU_CLK_CGATSTAT1_USIC2 get_CGATSTAT1_USIC2()
    {
        return SCU_CLK_CGATSTAT1_USIC2(CGATSTAT1 & (1u << 8u));
    }

    /**
     * Get CGATSTAT1's USIC1 bit.
     */
    inline SCU_CLK_CGATSTAT1_USIC1 get_CGATSTAT1_USIC1()
    {
        return SCU_CLK_CGATSTAT1_USIC1(CGATSTAT1 & (1u << 7u));
    }

    /**
     * Get CGATSTAT1's MMCI bit.
     */
    inline SCU_CLK_CGATSTAT1_MMCI get_CGATSTAT1_MMCI()
    {
        return SCU_CLK_CGATSTAT1_MMCI(CGATSTAT1 & (1u << 6u));
    }

    /**
     * Get CGATSTAT1's DAC bit.
     */
    inline SCU_CLK_CGATSTAT1_DAC get_CGATSTAT1_DAC()
    {
        return SCU_CLK_CGATSTAT1_DAC(CGATSTAT1 & (1u << 5u));
    }

    /**
     * Get CGATSTAT1's MCAN0 bit.
     */
    inline SCU_CLK_CGATSTAT1_MCAN0 get_CGATSTAT1_MCAN0()
    {
        return SCU_CLK_CGATSTAT1_MCAN0(CGATSTAT1 & (1u << 4u));
    }

    /**
     * Get CGATSTAT1's LEDTSCU0 bit.
     */
    inline SCU_CLK_CGATSTAT1_LEDTSCU0 get_CGATSTAT1_LEDTSCU0()
    {
        return SCU_CLK_CGATSTAT1_LEDTSCU0(CGATSTAT1 & (1u << 3u));
    }

    /**
     * Get CGATSTAT1's CCU43 bit.
     */
    inline SCU_CLK_CGATSTAT1_CCU43 get_CGATSTAT1_CCU43()
    {
        return SCU_CLK_CGATSTAT1_CCU43(CGATSTAT1 & (1u << 0u));
    }

    /**
     * Get all of CGATSTAT1's bit fields.
     */
    inline void get_CGATSTAT1(SCU_CLK_CGATSTAT1_PPORTS &PPORTS, SCU_CLK_CGATSTAT1_USIC2 &USIC2, SCU_CLK_CGATSTAT1_USIC1 &USIC1, SCU_CLK_CGATSTAT1_MMCI &MMCI, SCU_CLK_CGATSTAT1_DAC &DAC, SCU_CLK_CGATSTAT1_MCAN0 &MCAN0, SCU_CLK_CGATSTAT1_LEDTSCU0 &LEDTSCU0, SCU_CLK_CGATSTAT1_CCU43 &CCU43)
    {
        uint32_t curr = CGATSTAT1;

        PPORTS = SCU_CLK_CGATSTAT1_PPORTS(curr & (1u << 9u));
        USIC2 = SCU_CLK_CGATSTAT1_USIC2(curr & (1u << 8u));
        USIC1 = SCU_CLK_CGATSTAT1_USIC1(curr & (1u << 7u));
        MMCI = SCU_CLK_CGATSTAT1_MMCI(curr & (1u << 6u));
        DAC = SCU_CLK_CGATSTAT1_DAC(curr & (1u << 5u));
        MCAN0 = SCU_CLK_CGATSTAT1_MCAN0(curr & (1u << 4u));
        LEDTSCU0 = SCU_CLK_CGATSTAT1_LEDTSCU0(curr & (1u << 3u));
        CCU43 = SCU_CLK_CGATSTAT1_CCU43(curr & (1u << 0u));
    }

    /**
     * Set CGATSET1's PPORTS bit.
     */
    inline void set_CGATSET1_PPORTS()
    {
        CGATSET1 |= 1u << 9u;
    }

    /**
     * Clear CGATSET1's PPORTS bit.
     */
    inline void clear_CGATSET1_PPORTS()
    {
        CGATSET1 &= ~(1u << 9u);
    }

    /**
     * Toggle CGATSET1's PPORTS bit.
     */
    inline void toggle_CGATSET1_PPORTS()
    {
        CGATSET1 ^= 1u << 9u;
    }

    /**
     * Set CGATSET1's USIC2 bit.
     */
    inline void set_CGATSET1_USIC2()
    {
        CGATSET1 |= 1u << 8u;
    }

    /**
     * Clear CGATSET1's USIC2 bit.
     */
    inline void clear_CGATSET1_USIC2()
    {
        CGATSET1 &= ~(1u << 8u);
    }

    /**
     * Toggle CGATSET1's USIC2 bit.
     */
    inline void toggle_CGATSET1_USIC2()
    {
        CGATSET1 ^= 1u << 8u;
    }

    /**
     * Set CGATSET1's USIC1 bit.
     */
    inline void set_CGATSET1_USIC1()
    {
        CGATSET1 |= 1u << 7u;
    }

    /**
     * Clear CGATSET1's USIC1 bit.
     */
    inline void clear_CGATSET1_USIC1()
    {
        CGATSET1 &= ~(1u << 7u);
    }

    /**
     * Toggle CGATSET1's USIC1 bit.
     */
    inline void toggle_CGATSET1_USIC1()
    {
        CGATSET1 ^= 1u << 7u;
    }

    /**
     * Set CGATSET1's MMCI bit.
     */
    inline void set_CGATSET1_MMCI()
    {
        CGATSET1 |= 1u << 6u;
    }

    /**
     * Clear CGATSET1's MMCI bit.
     */
    inline void clear_CGATSET1_MMCI()
    {
        CGATSET1 &= ~(1u << 6u);
    }

    /**
     * Toggle CGATSET1's MMCI bit.
     */
    inline void toggle_CGATSET1_MMCI()
    {
        CGATSET1 ^= 1u << 6u;
    }

    /**
     * Set CGATSET1's DAC bit.
     */
    inline void set_CGATSET1_DAC()
    {
        CGATSET1 |= 1u << 5u;
    }

    /**
     * Clear CGATSET1's DAC bit.
     */
    inline void clear_CGATSET1_DAC()
    {
        CGATSET1 &= ~(1u << 5u);
    }

    /**
     * Toggle CGATSET1's DAC bit.
     */
    inline void toggle_CGATSET1_DAC()
    {
        CGATSET1 ^= 1u << 5u;
    }

    /**
     * Set CGATSET1's MCAN0 bit.
     */
    inline void set_CGATSET1_MCAN0()
    {
        CGATSET1 |= 1u << 4u;
    }

    /**
     * Clear CGATSET1's MCAN0 bit.
     */
    inline void clear_CGATSET1_MCAN0()
    {
        CGATSET1 &= ~(1u << 4u);
    }

    /**
     * Toggle CGATSET1's MCAN0 bit.
     */
    inline void toggle_CGATSET1_MCAN0()
    {
        CGATSET1 ^= 1u << 4u;
    }

    /**
     * Set CGATSET1's LEDTSCU0 bit.
     */
    inline void set_CGATSET1_LEDTSCU0()
    {
        CGATSET1 |= 1u << 3u;
    }

    /**
     * Clear CGATSET1's LEDTSCU0 bit.
     */
    inline void clear_CGATSET1_LEDTSCU0()
    {
        CGATSET1 &= ~(1u << 3u);
    }

    /**
     * Toggle CGATSET1's LEDTSCU0 bit.
     */
    inline void toggle_CGATSET1_LEDTSCU0()
    {
        CGATSET1 ^= 1u << 3u;
    }

    /**
     * Set CGATSET1's CCU43 bit.
     */
    inline void set_CGATSET1_CCU43()
    {
        CGATSET1 |= 1u << 0u;
    }

    /**
     * Clear CGATSET1's CCU43 bit.
     */
    inline void clear_CGATSET1_CCU43()
    {
        CGATSET1 &= ~(1u << 0u);
    }

    /**
     * Toggle CGATSET1's CCU43 bit.
     */
    inline void toggle_CGATSET1_CCU43()
    {
        CGATSET1 ^= 1u << 0u;
    }

    /**
     * Set all of CGATSET1's bit fields.
     */
    inline void set_CGATSET1(SCU_CLK_CGATSET1_PPORTS PPORTS, SCU_CLK_CGATSET1_USIC2 USIC2, SCU_CLK_CGATSET1_USIC1 USIC1, SCU_CLK_CGATSET1_MMCI MMCI, SCU_CLK_CGATSET1_DAC DAC, SCU_CLK_CGATSET1_MCAN0 MCAN0, SCU_CLK_CGATSET1_LEDTSCU0 LEDTSCU0, SCU_CLK_CGATSET1_CCU43 CCU43)
    {
        uint32_t curr = CGATSET1;

        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(PPORTS) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(USIC2) & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(USIC1) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(MMCI) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DAC) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(MCAN0) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(LEDTSCU0) & 0b1u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CCU43) & 0b1u) << 0u;

        CGATSET1 = curr;
    }

    /**
     * Set CGATCLR1's PPORTS bit.
     */
    inline void set_CGATCLR1_PPORTS()
    {
        CGATCLR1 |= 1u << 9u;
    }

    /**
     * Clear CGATCLR1's PPORTS bit.
     */
    inline void clear_CGATCLR1_PPORTS()
    {
        CGATCLR1 &= ~(1u << 9u);
    }

    /**
     * Toggle CGATCLR1's PPORTS bit.
     */
    inline void toggle_CGATCLR1_PPORTS()
    {
        CGATCLR1 ^= 1u << 9u;
    }

    /**
     * Set CGATCLR1's USIC2 bit.
     */
    inline void set_CGATCLR1_USIC2()
    {
        CGATCLR1 |= 1u << 8u;
    }

    /**
     * Clear CGATCLR1's USIC2 bit.
     */
    inline void clear_CGATCLR1_USIC2()
    {
        CGATCLR1 &= ~(1u << 8u);
    }

    /**
     * Toggle CGATCLR1's USIC2 bit.
     */
    inline void toggle_CGATCLR1_USIC2()
    {
        CGATCLR1 ^= 1u << 8u;
    }

    /**
     * Set CGATCLR1's USIC1 bit.
     */
    inline void set_CGATCLR1_USIC1()
    {
        CGATCLR1 |= 1u << 7u;
    }

    /**
     * Clear CGATCLR1's USIC1 bit.
     */
    inline void clear_CGATCLR1_USIC1()
    {
        CGATCLR1 &= ~(1u << 7u);
    }

    /**
     * Toggle CGATCLR1's USIC1 bit.
     */
    inline void toggle_CGATCLR1_USIC1()
    {
        CGATCLR1 ^= 1u << 7u;
    }

    /**
     * Set CGATCLR1's MMCI bit.
     */
    inline void set_CGATCLR1_MMCI()
    {
        CGATCLR1 |= 1u << 6u;
    }

    /**
     * Clear CGATCLR1's MMCI bit.
     */
    inline void clear_CGATCLR1_MMCI()
    {
        CGATCLR1 &= ~(1u << 6u);
    }

    /**
     * Toggle CGATCLR1's MMCI bit.
     */
    inline void toggle_CGATCLR1_MMCI()
    {
        CGATCLR1 ^= 1u << 6u;
    }

    /**
     * Set CGATCLR1's DAC bit.
     */
    inline void set_CGATCLR1_DAC()
    {
        CGATCLR1 |= 1u << 5u;
    }

    /**
     * Clear CGATCLR1's DAC bit.
     */
    inline void clear_CGATCLR1_DAC()
    {
        CGATCLR1 &= ~(1u << 5u);
    }

    /**
     * Toggle CGATCLR1's DAC bit.
     */
    inline void toggle_CGATCLR1_DAC()
    {
        CGATCLR1 ^= 1u << 5u;
    }

    /**
     * Set CGATCLR1's MCAN0 bit.
     */
    inline void set_CGATCLR1_MCAN0()
    {
        CGATCLR1 |= 1u << 4u;
    }

    /**
     * Clear CGATCLR1's MCAN0 bit.
     */
    inline void clear_CGATCLR1_MCAN0()
    {
        CGATCLR1 &= ~(1u << 4u);
    }

    /**
     * Toggle CGATCLR1's MCAN0 bit.
     */
    inline void toggle_CGATCLR1_MCAN0()
    {
        CGATCLR1 ^= 1u << 4u;
    }

    /**
     * Set CGATCLR1's LEDTSCU0 bit.
     */
    inline void set_CGATCLR1_LEDTSCU0()
    {
        CGATCLR1 |= 1u << 3u;
    }

    /**
     * Clear CGATCLR1's LEDTSCU0 bit.
     */
    inline void clear_CGATCLR1_LEDTSCU0()
    {
        CGATCLR1 &= ~(1u << 3u);
    }

    /**
     * Toggle CGATCLR1's LEDTSCU0 bit.
     */
    inline void toggle_CGATCLR1_LEDTSCU0()
    {
        CGATCLR1 ^= 1u << 3u;
    }

    /**
     * Set CGATCLR1's CCU43 bit.
     */
    inline void set_CGATCLR1_CCU43()
    {
        CGATCLR1 |= 1u << 0u;
    }

    /**
     * Clear CGATCLR1's CCU43 bit.
     */
    inline void clear_CGATCLR1_CCU43()
    {
        CGATCLR1 &= ~(1u << 0u);
    }

    /**
     * Toggle CGATCLR1's CCU43 bit.
     */
    inline void toggle_CGATCLR1_CCU43()
    {
        CGATCLR1 ^= 1u << 0u;
    }

    /**
     * Set all of CGATCLR1's bit fields.
     */
    inline void set_CGATCLR1(SCU_CLK_CGATCLR1_PPORTS PPORTS, SCU_CLK_CGATCLR1_USIC2 USIC2, SCU_CLK_CGATCLR1_USIC1 USIC1, SCU_CLK_CGATCLR1_MMCI MMCI, SCU_CLK_CGATCLR1_DAC DAC, SCU_CLK_CGATCLR1_MCAN0 MCAN0, SCU_CLK_CGATCLR1_LEDTSCU0 LEDTSCU0, SCU_CLK_CGATCLR1_CCU43 CCU43)
    {
        uint32_t curr = CGATCLR1;

        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(PPORTS) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(USIC2) & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(USIC1) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(MMCI) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DAC) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(MCAN0) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(LEDTSCU0) & 0b1u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CCU43) & 0b1u) << 0u;

        CGATCLR1 = curr;
    }

    /**
     * Get CGATSTAT2's USB bit.
     */
    inline SCU_CLK_CGATSTAT2_USB get_CGATSTAT2_USB()
    {
        return SCU_CLK_CGATSTAT2_USB(CGATSTAT2 & (1u << 7u));
    }

    /**
     * Get CGATSTAT2's FCE bit.
     */
    inline SCU_CLK_CGATSTAT2_FCE get_CGATSTAT2_FCE()
    {
        return SCU_CLK_CGATSTAT2_FCE(CGATSTAT2 & (1u << 6u));
    }

    /**
     * Get CGATSTAT2's DMA1 bit.
     */
    inline SCU_CLK_CGATSTAT2_DMA1 get_CGATSTAT2_DMA1()
    {
        return SCU_CLK_CGATSTAT2_DMA1(CGATSTAT2 & (1u << 5u));
    }

    /**
     * Get CGATSTAT2's DMA0 bit.
     */
    inline SCU_CLK_CGATSTAT2_DMA0 get_CGATSTAT2_DMA0()
    {
        return SCU_CLK_CGATSTAT2_DMA0(CGATSTAT2 & (1u << 4u));
    }

    /**
     * Get CGATSTAT2's ETH0 bit.
     */
    inline SCU_CLK_CGATSTAT2_ETH0 get_CGATSTAT2_ETH0()
    {
        return SCU_CLK_CGATSTAT2_ETH0(CGATSTAT2 & (1u << 2u));
    }

    /**
     * Get CGATSTAT2's WDT bit.
     */
    inline SCU_CLK_CGATSTAT2_WDT get_CGATSTAT2_WDT()
    {
        return SCU_CLK_CGATSTAT2_WDT(CGATSTAT2 & (1u << 1u));
    }

    /**
     * Get all of CGATSTAT2's bit fields.
     */
    inline void get_CGATSTAT2(SCU_CLK_CGATSTAT2_USB &USB, SCU_CLK_CGATSTAT2_FCE &FCE, SCU_CLK_CGATSTAT2_DMA1 &DMA1, SCU_CLK_CGATSTAT2_DMA0 &DMA0, SCU_CLK_CGATSTAT2_ETH0 &ETH0, SCU_CLK_CGATSTAT2_WDT &WDT)
    {
        uint32_t curr = CGATSTAT2;

        USB = SCU_CLK_CGATSTAT2_USB(curr & (1u << 7u));
        FCE = SCU_CLK_CGATSTAT2_FCE(curr & (1u << 6u));
        DMA1 = SCU_CLK_CGATSTAT2_DMA1(curr & (1u << 5u));
        DMA0 = SCU_CLK_CGATSTAT2_DMA0(curr & (1u << 4u));
        ETH0 = SCU_CLK_CGATSTAT2_ETH0(curr & (1u << 2u));
        WDT = SCU_CLK_CGATSTAT2_WDT(curr & (1u << 1u));
    }

    /**
     * Set CGATSET2's USB bit.
     */
    inline void set_CGATSET2_USB()
    {
        CGATSET2 |= 1u << 7u;
    }

    /**
     * Clear CGATSET2's USB bit.
     */
    inline void clear_CGATSET2_USB()
    {
        CGATSET2 &= ~(1u << 7u);
    }

    /**
     * Toggle CGATSET2's USB bit.
     */
    inline void toggle_CGATSET2_USB()
    {
        CGATSET2 ^= 1u << 7u;
    }

    /**
     * Set CGATSET2's FCE bit.
     */
    inline void set_CGATSET2_FCE()
    {
        CGATSET2 |= 1u << 6u;
    }

    /**
     * Clear CGATSET2's FCE bit.
     */
    inline void clear_CGATSET2_FCE()
    {
        CGATSET2 &= ~(1u << 6u);
    }

    /**
     * Toggle CGATSET2's FCE bit.
     */
    inline void toggle_CGATSET2_FCE()
    {
        CGATSET2 ^= 1u << 6u;
    }

    /**
     * Set CGATSET2's DMA1 bit.
     */
    inline void set_CGATSET2_DMA1()
    {
        CGATSET2 |= 1u << 5u;
    }

    /**
     * Clear CGATSET2's DMA1 bit.
     */
    inline void clear_CGATSET2_DMA1()
    {
        CGATSET2 &= ~(1u << 5u);
    }

    /**
     * Toggle CGATSET2's DMA1 bit.
     */
    inline void toggle_CGATSET2_DMA1()
    {
        CGATSET2 ^= 1u << 5u;
    }

    /**
     * Set CGATSET2's DMA0 bit.
     */
    inline void set_CGATSET2_DMA0()
    {
        CGATSET2 |= 1u << 4u;
    }

    /**
     * Clear CGATSET2's DMA0 bit.
     */
    inline void clear_CGATSET2_DMA0()
    {
        CGATSET2 &= ~(1u << 4u);
    }

    /**
     * Toggle CGATSET2's DMA0 bit.
     */
    inline void toggle_CGATSET2_DMA0()
    {
        CGATSET2 ^= 1u << 4u;
    }

    /**
     * Set CGATSET2's ETH0 bit.
     */
    inline void set_CGATSET2_ETH0()
    {
        CGATSET2 |= 1u << 2u;
    }

    /**
     * Clear CGATSET2's ETH0 bit.
     */
    inline void clear_CGATSET2_ETH0()
    {
        CGATSET2 &= ~(1u << 2u);
    }

    /**
     * Toggle CGATSET2's ETH0 bit.
     */
    inline void toggle_CGATSET2_ETH0()
    {
        CGATSET2 ^= 1u << 2u;
    }

    /**
     * Set CGATSET2's WDT bit.
     */
    inline void set_CGATSET2_WDT()
    {
        CGATSET2 |= 1u << 1u;
    }

    /**
     * Clear CGATSET2's WDT bit.
     */
    inline void clear_CGATSET2_WDT()
    {
        CGATSET2 &= ~(1u << 1u);
    }

    /**
     * Toggle CGATSET2's WDT bit.
     */
    inline void toggle_CGATSET2_WDT()
    {
        CGATSET2 ^= 1u << 1u;
    }

    /**
     * Set all of CGATSET2's bit fields.
     */
    inline void set_CGATSET2(SCU_CLK_CGATSET2_USB USB, SCU_CLK_CGATSET2_FCE FCE, SCU_CLK_CGATSET2_DMA1 DMA1, SCU_CLK_CGATSET2_DMA0 DMA0, SCU_CLK_CGATSET2_ETH0 ETH0, SCU_CLK_CGATSET2_WDT WDT)
    {
        uint32_t curr = CGATSET2;

        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(USB) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(FCE) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DMA1) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(DMA0) & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(ETH0) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(WDT) & 0b1u) << 1u;

        CGATSET2 = curr;
    }

    /**
     * Set CGATCLR2's USB bit.
     */
    inline void set_CGATCLR2_USB()
    {
        CGATCLR2 |= 1u << 7u;
    }

    /**
     * Clear CGATCLR2's USB bit.
     */
    inline void clear_CGATCLR2_USB()
    {
        CGATCLR2 &= ~(1u << 7u);
    }

    /**
     * Toggle CGATCLR2's USB bit.
     */
    inline void toggle_CGATCLR2_USB()
    {
        CGATCLR2 ^= 1u << 7u;
    }

    /**
     * Set CGATCLR2's FCE bit.
     */
    inline void set_CGATCLR2_FCE()
    {
        CGATCLR2 |= 1u << 6u;
    }

    /**
     * Clear CGATCLR2's FCE bit.
     */
    inline void clear_CGATCLR2_FCE()
    {
        CGATCLR2 &= ~(1u << 6u);
    }

    /**
     * Toggle CGATCLR2's FCE bit.
     */
    inline void toggle_CGATCLR2_FCE()
    {
        CGATCLR2 ^= 1u << 6u;
    }

    /**
     * Set CGATCLR2's DMA1 bit.
     */
    inline void set_CGATCLR2_DMA1()
    {
        CGATCLR2 |= 1u << 5u;
    }

    /**
     * Clear CGATCLR2's DMA1 bit.
     */
    inline void clear_CGATCLR2_DMA1()
    {
        CGATCLR2 &= ~(1u << 5u);
    }

    /**
     * Toggle CGATCLR2's DMA1 bit.
     */
    inline void toggle_CGATCLR2_DMA1()
    {
        CGATCLR2 ^= 1u << 5u;
    }

    /**
     * Set CGATCLR2's DMA0 bit.
     */
    inline void set_CGATCLR2_DMA0()
    {
        CGATCLR2 |= 1u << 4u;
    }

    /**
     * Clear CGATCLR2's DMA0 bit.
     */
    inline void clear_CGATCLR2_DMA0()
    {
        CGATCLR2 &= ~(1u << 4u);
    }

    /**
     * Toggle CGATCLR2's DMA0 bit.
     */
    inline void toggle_CGATCLR2_DMA0()
    {
        CGATCLR2 ^= 1u << 4u;
    }

    /**
     * Set CGATCLR2's ETH0 bit.
     */
    inline void set_CGATCLR2_ETH0()
    {
        CGATCLR2 |= 1u << 2u;
    }

    /**
     * Clear CGATCLR2's ETH0 bit.
     */
    inline void clear_CGATCLR2_ETH0()
    {
        CGATCLR2 &= ~(1u << 2u);
    }

    /**
     * Toggle CGATCLR2's ETH0 bit.
     */
    inline void toggle_CGATCLR2_ETH0()
    {
        CGATCLR2 ^= 1u << 2u;
    }

    /**
     * Set CGATCLR2's WDT bit.
     */
    inline void set_CGATCLR2_WDT()
    {
        CGATCLR2 |= 1u << 1u;
    }

    /**
     * Clear CGATCLR2's WDT bit.
     */
    inline void clear_CGATCLR2_WDT()
    {
        CGATCLR2 &= ~(1u << 1u);
    }

    /**
     * Toggle CGATCLR2's WDT bit.
     */
    inline void toggle_CGATCLR2_WDT()
    {
        CGATCLR2 ^= 1u << 1u;
    }

    /**
     * Set all of CGATCLR2's bit fields.
     */
    inline void set_CGATCLR2(SCU_CLK_CGATCLR2_USB USB, SCU_CLK_CGATCLR2_FCE FCE, SCU_CLK_CGATCLR2_DMA1 DMA1, SCU_CLK_CGATCLR2_DMA0 DMA0, SCU_CLK_CGATCLR2_ETH0 ETH0, SCU_CLK_CGATCLR2_WDT WDT)
    {
        uint32_t curr = CGATCLR2;

        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(USB) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(FCE) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DMA1) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(DMA0) & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(ETH0) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(WDT) & 0b1u) << 1u;

        CGATCLR2 = curr;
    }

    /**
     * Get CGATSTAT3's EBU bit.
     */
    inline SCU_CLK_CGATSTAT3_EBU get_CGATSTAT3_EBU()
    {
        return SCU_CLK_CGATSTAT3_EBU(CGATSTAT3 & (1u << 2u));
    }

    /**
     * Set CGATSET3's EBU bit.
     */
    inline void set_CGATSET3_EBU()
    {
        CGATSET3 |= 1u << 2u;
    }

    /**
     * Clear CGATSET3's EBU bit.
     */
    inline void clear_CGATSET3_EBU()
    {
        CGATSET3 &= ~(1u << 2u);
    }

    /**
     * Toggle CGATSET3's EBU bit.
     */
    inline void toggle_CGATSET3_EBU()
    {
        CGATSET3 ^= 1u << 2u;
    }

    /**
     * Set CGATCLR3's EBU bit.
     */
    inline void set_CGATCLR3_EBU()
    {
        CGATCLR3 |= 1u << 2u;
    }

    /**
     * Clear CGATCLR3's EBU bit.
     */
    inline void clear_CGATCLR3_EBU()
    {
        CGATCLR3 &= ~(1u << 2u);
    }

    /**
     * Toggle CGATCLR3's EBU bit.
     */
    inline void toggle_CGATCLR3_EBU()
    {
        CGATCLR3 ^= 1u << 2u;
    }
};

static_assert(sizeof(scu_clk) == scu_clk::size);

static volatile scu_clk *const SCU_CLK = reinterpret_cast<scu_clk *>(0x50004600);

}; // namespace XMC4700
