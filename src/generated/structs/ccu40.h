/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include "../enums/CCU40_GCST_S3PSS.h"
#include "../enums/CCU40_GCTRL_MSDE.h"
#include "../enums/CCU40_GCTRL_MSE3.h"
#include "../enums/CCU40_GCTRL_PCIS.h"
#include "../enums/CCU40_GCTRL_PRBC.h"
#include "../enums/CCU40_GCTRL_SUSCFG.h"
#include "../enums/CCU40_GSTAT_PRB.h"
#include "../enums/CCU40_GSTAT_S3I.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Capture Compare Unit 4 - Unit 0
 */
struct [[gnu::packed]] ccu40
{
    /* Constant attributes. */
    static constexpr std::size_t size = 132; /*!< ccu40's size in bytes. */

    /* Fields. */
    uint32_t GCTRL;            /*!< (read-write) Global Control Register */
    const uint32_t GSTAT = {}; /*!< (read-only) Global Status Register */
    uint32_t GIDLS;            /*!< (write-only) Global Idle Set */
    uint32_t GIDLC;            /*!< (write-only) Global Idle Clear */
    uint32_t GCSS;             /*!< (write-only) Global Channel Set */
    uint32_t GCSC;             /*!< (write-only) Global Channel Clear */
    const uint32_t GCST = {};  /*!< (read-only) Global Channel Status */
    static constexpr std::size_t reserved_padding0_length = 25;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    const uint32_t MIDR = {}; /*!< (read-only) Module Identification */

    /* Methods. */

    /**
     * Get GCTRL's MSDE field.
     */
    inline CCU40_GCTRL_MSDE get_GCTRL_MSDE() volatile
    {
        return CCU40_GCTRL_MSDE((GCTRL >> 14u) & 0b11u);
    }

    /**
     * Set GCTRL's MSDE field.
     *
     * Multi Channel shadow transfer request configuration
     */
    inline void set_GCTRL_MSDE(CCU40_GCTRL_MSDE value) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        GCTRL = curr;
    }

    /**
     * Get GCTRL's MSE3 bit.
     */
    inline CCU40_GCTRL_MSE3 get_GCTRL_MSE3() volatile
    {
        return CCU40_GCTRL_MSE3(GCTRL & (1u << 13u));
    }

    /**
     * Set GCTRL's MSE3 bit.
     *
     * Slice 3 Multi Channel shadow transfer enable
     */
    inline void set_GCTRL_MSE3() volatile
    {
        GCTRL |= 1u << 13u;
    }

    /**
     * Clear GCTRL's MSE3 bit.
     *
     * Slice 3 Multi Channel shadow transfer enable
     */
    inline void clear_GCTRL_MSE3() volatile
    {
        GCTRL &= ~(1u << 13u);
    }

    /**
     * Toggle GCTRL's MSE3 bit.
     *
     * Slice 3 Multi Channel shadow transfer enable
     */
    inline void toggle_GCTRL_MSE3() volatile
    {
        GCTRL ^= 1u << 13u;
    }

    /**
     * Get GCTRL's MSE2 bit.
     */
    inline CCU40_GCTRL_MSE3 get_GCTRL_MSE2() volatile
    {
        return CCU40_GCTRL_MSE3(GCTRL & (1u << 12u));
    }

    /**
     * Set GCTRL's MSE2 bit.
     *
     * Slice 2 Multi Channel shadow transfer enable
     */
    inline void set_GCTRL_MSE2() volatile
    {
        GCTRL |= 1u << 12u;
    }

    /**
     * Clear GCTRL's MSE2 bit.
     *
     * Slice 2 Multi Channel shadow transfer enable
     */
    inline void clear_GCTRL_MSE2() volatile
    {
        GCTRL &= ~(1u << 12u);
    }

    /**
     * Toggle GCTRL's MSE2 bit.
     *
     * Slice 2 Multi Channel shadow transfer enable
     */
    inline void toggle_GCTRL_MSE2() volatile
    {
        GCTRL ^= 1u << 12u;
    }

    /**
     * Get GCTRL's MSE1 bit.
     */
    inline CCU40_GCTRL_MSE3 get_GCTRL_MSE1() volatile
    {
        return CCU40_GCTRL_MSE3(GCTRL & (1u << 11u));
    }

    /**
     * Set GCTRL's MSE1 bit.
     *
     * Slice 1 Multi Channel shadow transfer enable
     */
    inline void set_GCTRL_MSE1() volatile
    {
        GCTRL |= 1u << 11u;
    }

    /**
     * Clear GCTRL's MSE1 bit.
     *
     * Slice 1 Multi Channel shadow transfer enable
     */
    inline void clear_GCTRL_MSE1() volatile
    {
        GCTRL &= ~(1u << 11u);
    }

    /**
     * Toggle GCTRL's MSE1 bit.
     *
     * Slice 1 Multi Channel shadow transfer enable
     */
    inline void toggle_GCTRL_MSE1() volatile
    {
        GCTRL ^= 1u << 11u;
    }

    /**
     * Get GCTRL's MSE0 bit.
     */
    inline CCU40_GCTRL_MSE3 get_GCTRL_MSE0() volatile
    {
        return CCU40_GCTRL_MSE3(GCTRL & (1u << 10u));
    }

    /**
     * Set GCTRL's MSE0 bit.
     *
     * Slice 0 Multi Channel shadow transfer enable
     */
    inline void set_GCTRL_MSE0() volatile
    {
        GCTRL |= 1u << 10u;
    }

    /**
     * Clear GCTRL's MSE0 bit.
     *
     * Slice 0 Multi Channel shadow transfer enable
     */
    inline void clear_GCTRL_MSE0() volatile
    {
        GCTRL &= ~(1u << 10u);
    }

    /**
     * Toggle GCTRL's MSE0 bit.
     *
     * Slice 0 Multi Channel shadow transfer enable
     */
    inline void toggle_GCTRL_MSE0() volatile
    {
        GCTRL ^= 1u << 10u;
    }

    /**
     * Get GCTRL's SUSCFG field.
     */
    inline CCU40_GCTRL_SUSCFG get_GCTRL_SUSCFG() volatile
    {
        return CCU40_GCTRL_SUSCFG((GCTRL >> 8u) & 0b11u);
    }

    /**
     * Set GCTRL's SUSCFG field.
     *
     * Suspend Mode Configuration
     */
    inline void set_GCTRL_SUSCFG(CCU40_GCTRL_SUSCFG value) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        GCTRL = curr;
    }

    /**
     * Get GCTRL's PCIS field.
     */
    inline CCU40_GCTRL_PCIS get_GCTRL_PCIS() volatile
    {
        return CCU40_GCTRL_PCIS((GCTRL >> 4u) & 0b11u);
    }

    /**
     * Set GCTRL's PCIS field.
     *
     * Prescaler Input Clock Selection
     */
    inline void set_GCTRL_PCIS(CCU40_GCTRL_PCIS value) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GCTRL = curr;
    }

    /**
     * Get GCTRL's PRBC field.
     */
    inline CCU40_GCTRL_PRBC get_GCTRL_PRBC() volatile
    {
        return CCU40_GCTRL_PRBC((GCTRL >> 0u) & 0b111u);
    }

    /**
     * Set GCTRL's PRBC field.
     *
     * Prescaler Clear Configuration
     */
    inline void set_GCTRL_PRBC(CCU40_GCTRL_PRBC value) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        GCTRL = curr;
    }

    /**
     * Get all of GCTRL's bit fields.
     */
    inline void get_GCTRL(CCU40_GCTRL_MSDE &MSDE, CCU40_GCTRL_MSE3 &MSE3,
                          CCU40_GCTRL_MSE3 &MSE2, CCU40_GCTRL_MSE3 &MSE1,
                          CCU40_GCTRL_MSE3 &MSE0, CCU40_GCTRL_SUSCFG &SUSCFG,
                          CCU40_GCTRL_PCIS &PCIS,
                          CCU40_GCTRL_PRBC &PRBC) volatile
    {
        uint32_t curr = GCTRL;

        MSDE = CCU40_GCTRL_MSDE((curr >> 14u) & 0b11u);
        MSE3 = CCU40_GCTRL_MSE3(curr & (1u << 13u));
        MSE2 = CCU40_GCTRL_MSE3(curr & (1u << 12u));
        MSE1 = CCU40_GCTRL_MSE3(curr & (1u << 11u));
        MSE0 = CCU40_GCTRL_MSE3(curr & (1u << 10u));
        SUSCFG = CCU40_GCTRL_SUSCFG((curr >> 8u) & 0b11u);
        PCIS = CCU40_GCTRL_PCIS((curr >> 4u) & 0b11u);
        PRBC = CCU40_GCTRL_PRBC((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of GCTRL's bit fields.
     *
     * (read-write) Global Control Register
     */
    inline void set_GCTRL(CCU40_GCTRL_MSDE MSDE, CCU40_GCTRL_MSE3 MSE3,
                          CCU40_GCTRL_MSE3 MSE2, CCU40_GCTRL_MSE3 MSE1,
                          CCU40_GCTRL_MSE3 MSE0, CCU40_GCTRL_SUSCFG SUSCFG,
                          CCU40_GCTRL_PCIS PCIS,
                          CCU40_GCTRL_PRBC PRBC) volatile
    {
        uint32_t curr = GCTRL;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(MSDE) & 0b11u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(MSE3) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(MSE2) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(MSE1) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(MSE0) & 0b1u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(SUSCFG) & 0b11u) << 8u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(PCIS) & 0b11u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(PRBC) & 0b111u) << 0u;

        GCTRL = curr;
    }

    /**
     * Get GSTAT's PRB bit.
     */
    inline CCU40_GSTAT_PRB get_GSTAT_PRB() volatile
    {
        return CCU40_GSTAT_PRB(GSTAT & (1u << 8u));
    }

    /**
     * Get GSTAT's S3I bit.
     */
    inline CCU40_GSTAT_S3I get_GSTAT_S3I() volatile
    {
        return CCU40_GSTAT_S3I(GSTAT & (1u << 3u));
    }

    /**
     * Get GSTAT's S2I bit.
     */
    inline CCU40_GSTAT_S3I get_GSTAT_S2I() volatile
    {
        return CCU40_GSTAT_S3I(GSTAT & (1u << 2u));
    }

    /**
     * Get GSTAT's S1I bit.
     */
    inline CCU40_GSTAT_S3I get_GSTAT_S1I() volatile
    {
        return CCU40_GSTAT_S3I(GSTAT & (1u << 1u));
    }

    /**
     * Get GSTAT's S0I bit.
     */
    inline CCU40_GSTAT_S3I get_GSTAT_S0I() volatile
    {
        return CCU40_GSTAT_S3I(GSTAT & (1u << 0u));
    }

    /**
     * Get all of GSTAT's bit fields.
     */
    inline void get_GSTAT(CCU40_GSTAT_PRB &PRB, CCU40_GSTAT_S3I &S3I,
                          CCU40_GSTAT_S3I &S2I, CCU40_GSTAT_S3I &S1I,
                          CCU40_GSTAT_S3I &S0I) volatile
    {
        uint32_t curr = GSTAT;

        PRB = CCU40_GSTAT_PRB(curr & (1u << 8u));
        S3I = CCU40_GSTAT_S3I(curr & (1u << 3u));
        S2I = CCU40_GSTAT_S3I(curr & (1u << 2u));
        S1I = CCU40_GSTAT_S3I(curr & (1u << 1u));
        S0I = CCU40_GSTAT_S3I(curr & (1u << 0u));
    }

    /**
     * Set GIDLS's PSIC bit.
     *
     * Prescaler clear
     */
    inline void set_GIDLS_PSIC() volatile
    {
        GIDLS |= 1u << 9u;
    }

    /**
     * Clear GIDLS's PSIC bit.
     *
     * Prescaler clear
     */
    inline void clear_GIDLS_PSIC() volatile
    {
        GIDLS &= ~(1u << 9u);
    }

    /**
     * Toggle GIDLS's PSIC bit.
     *
     * Prescaler clear
     */
    inline void toggle_GIDLS_PSIC() volatile
    {
        GIDLS ^= 1u << 9u;
    }

    /**
     * Set GIDLS's CPRB bit.
     *
     * Prescaler Run Bit Clear
     */
    inline void set_GIDLS_CPRB() volatile
    {
        GIDLS |= 1u << 8u;
    }

    /**
     * Clear GIDLS's CPRB bit.
     *
     * Prescaler Run Bit Clear
     */
    inline void clear_GIDLS_CPRB() volatile
    {
        GIDLS &= ~(1u << 8u);
    }

    /**
     * Toggle GIDLS's CPRB bit.
     *
     * Prescaler Run Bit Clear
     */
    inline void toggle_GIDLS_CPRB() volatile
    {
        GIDLS ^= 1u << 8u;
    }

    /**
     * Set GIDLS's SS3I bit.
     *
     * CC43 IDLE mode set
     */
    inline void set_GIDLS_SS3I() volatile
    {
        GIDLS |= 1u << 3u;
    }

    /**
     * Clear GIDLS's SS3I bit.
     *
     * CC43 IDLE mode set
     */
    inline void clear_GIDLS_SS3I() volatile
    {
        GIDLS &= ~(1u << 3u);
    }

    /**
     * Toggle GIDLS's SS3I bit.
     *
     * CC43 IDLE mode set
     */
    inline void toggle_GIDLS_SS3I() volatile
    {
        GIDLS ^= 1u << 3u;
    }

    /**
     * Set GIDLS's SS2I bit.
     *
     * CC42 IDLE mode set
     */
    inline void set_GIDLS_SS2I() volatile
    {
        GIDLS |= 1u << 2u;
    }

    /**
     * Clear GIDLS's SS2I bit.
     *
     * CC42 IDLE mode set
     */
    inline void clear_GIDLS_SS2I() volatile
    {
        GIDLS &= ~(1u << 2u);
    }

    /**
     * Toggle GIDLS's SS2I bit.
     *
     * CC42 IDLE mode set
     */
    inline void toggle_GIDLS_SS2I() volatile
    {
        GIDLS ^= 1u << 2u;
    }

    /**
     * Set GIDLS's SS1I bit.
     *
     * CC41 IDLE mode set
     */
    inline void set_GIDLS_SS1I() volatile
    {
        GIDLS |= 1u << 1u;
    }

    /**
     * Clear GIDLS's SS1I bit.
     *
     * CC41 IDLE mode set
     */
    inline void clear_GIDLS_SS1I() volatile
    {
        GIDLS &= ~(1u << 1u);
    }

    /**
     * Toggle GIDLS's SS1I bit.
     *
     * CC41 IDLE mode set
     */
    inline void toggle_GIDLS_SS1I() volatile
    {
        GIDLS ^= 1u << 1u;
    }

    /**
     * Set GIDLS's SS0I bit.
     *
     * CC40 IDLE mode set
     */
    inline void set_GIDLS_SS0I() volatile
    {
        GIDLS |= 1u << 0u;
    }

    /**
     * Clear GIDLS's SS0I bit.
     *
     * CC40 IDLE mode set
     */
    inline void clear_GIDLS_SS0I() volatile
    {
        GIDLS &= ~(1u << 0u);
    }

    /**
     * Toggle GIDLS's SS0I bit.
     *
     * CC40 IDLE mode set
     */
    inline void toggle_GIDLS_SS0I() volatile
    {
        GIDLS ^= 1u << 0u;
    }

    /**
     * Set all of GIDLS's bit fields.
     *
     * (write-only) Global Idle Set
     */
    inline void set_GIDLS(bool PSIC, bool CPRB, bool SS3I, bool SS2I,
                          bool SS1I, bool SS0I) volatile
    {
        uint32_t curr = GIDLS;

        curr &= ~(0b1u << 9u);
        curr |= (PSIC & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (CPRB & 0b1u) << 8u;
        curr &= ~(0b1u << 3u);
        curr |= (SS3I & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (SS2I & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SS1I & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SS0I & 0b1u) << 0u;

        GIDLS = curr;
    }

    /**
     * Set GIDLC's SPRB bit.
     *
     * Prescaler Run Bit Set
     */
    inline void set_GIDLC_SPRB() volatile
    {
        GIDLC |= 1u << 8u;
    }

    /**
     * Clear GIDLC's SPRB bit.
     *
     * Prescaler Run Bit Set
     */
    inline void clear_GIDLC_SPRB() volatile
    {
        GIDLC &= ~(1u << 8u);
    }

    /**
     * Toggle GIDLC's SPRB bit.
     *
     * Prescaler Run Bit Set
     */
    inline void toggle_GIDLC_SPRB() volatile
    {
        GIDLC ^= 1u << 8u;
    }

    /**
     * Set GIDLC's CS3I bit.
     *
     * CC43 IDLE mode clear
     */
    inline void set_GIDLC_CS3I() volatile
    {
        GIDLC |= 1u << 3u;
    }

    /**
     * Clear GIDLC's CS3I bit.
     *
     * CC43 IDLE mode clear
     */
    inline void clear_GIDLC_CS3I() volatile
    {
        GIDLC &= ~(1u << 3u);
    }

    /**
     * Toggle GIDLC's CS3I bit.
     *
     * CC43 IDLE mode clear
     */
    inline void toggle_GIDLC_CS3I() volatile
    {
        GIDLC ^= 1u << 3u;
    }

    /**
     * Set GIDLC's CS2I bit.
     *
     * CC42 IDLE mode clear
     */
    inline void set_GIDLC_CS2I() volatile
    {
        GIDLC |= 1u << 2u;
    }

    /**
     * Clear GIDLC's CS2I bit.
     *
     * CC42 IDLE mode clear
     */
    inline void clear_GIDLC_CS2I() volatile
    {
        GIDLC &= ~(1u << 2u);
    }

    /**
     * Toggle GIDLC's CS2I bit.
     *
     * CC42 IDLE mode clear
     */
    inline void toggle_GIDLC_CS2I() volatile
    {
        GIDLC ^= 1u << 2u;
    }

    /**
     * Set GIDLC's CS1I bit.
     *
     * CC41 IDLE mode clear
     */
    inline void set_GIDLC_CS1I() volatile
    {
        GIDLC |= 1u << 1u;
    }

    /**
     * Clear GIDLC's CS1I bit.
     *
     * CC41 IDLE mode clear
     */
    inline void clear_GIDLC_CS1I() volatile
    {
        GIDLC &= ~(1u << 1u);
    }

    /**
     * Toggle GIDLC's CS1I bit.
     *
     * CC41 IDLE mode clear
     */
    inline void toggle_GIDLC_CS1I() volatile
    {
        GIDLC ^= 1u << 1u;
    }

    /**
     * Set GIDLC's CS0I bit.
     *
     * CC40 IDLE mode clear
     */
    inline void set_GIDLC_CS0I() volatile
    {
        GIDLC |= 1u << 0u;
    }

    /**
     * Clear GIDLC's CS0I bit.
     *
     * CC40 IDLE mode clear
     */
    inline void clear_GIDLC_CS0I() volatile
    {
        GIDLC &= ~(1u << 0u);
    }

    /**
     * Toggle GIDLC's CS0I bit.
     *
     * CC40 IDLE mode clear
     */
    inline void toggle_GIDLC_CS0I() volatile
    {
        GIDLC ^= 1u << 0u;
    }

    /**
     * Set all of GIDLC's bit fields.
     *
     * (write-only) Global Idle Clear
     */
    inline void set_GIDLC(bool SPRB, bool CS3I, bool CS2I, bool CS1I,
                          bool CS0I) volatile
    {
        uint32_t curr = GIDLC;

        curr &= ~(0b1u << 8u);
        curr |= (SPRB & 0b1u) << 8u;
        curr &= ~(0b1u << 3u);
        curr |= (CS3I & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CS2I & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CS1I & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CS0I & 0b1u) << 0u;

        GIDLC = curr;
    }

    /**
     * Set GCSS's S3STS bit.
     *
     * Slice 3 status bit set
     */
    inline void set_GCSS_S3STS() volatile
    {
        GCSS |= 1u << 19u;
    }

    /**
     * Clear GCSS's S3STS bit.
     *
     * Slice 3 status bit set
     */
    inline void clear_GCSS_S3STS() volatile
    {
        GCSS &= ~(1u << 19u);
    }

    /**
     * Toggle GCSS's S3STS bit.
     *
     * Slice 3 status bit set
     */
    inline void toggle_GCSS_S3STS() volatile
    {
        GCSS ^= 1u << 19u;
    }

    /**
     * Set GCSS's S2STS bit.
     *
     * Slice 2 status bit set
     */
    inline void set_GCSS_S2STS() volatile
    {
        GCSS |= 1u << 18u;
    }

    /**
     * Clear GCSS's S2STS bit.
     *
     * Slice 2 status bit set
     */
    inline void clear_GCSS_S2STS() volatile
    {
        GCSS &= ~(1u << 18u);
    }

    /**
     * Toggle GCSS's S2STS bit.
     *
     * Slice 2 status bit set
     */
    inline void toggle_GCSS_S2STS() volatile
    {
        GCSS ^= 1u << 18u;
    }

    /**
     * Set GCSS's S1STS bit.
     *
     * Slice 1 status bit set
     */
    inline void set_GCSS_S1STS() volatile
    {
        GCSS |= 1u << 17u;
    }

    /**
     * Clear GCSS's S1STS bit.
     *
     * Slice 1 status bit set
     */
    inline void clear_GCSS_S1STS() volatile
    {
        GCSS &= ~(1u << 17u);
    }

    /**
     * Toggle GCSS's S1STS bit.
     *
     * Slice 1 status bit set
     */
    inline void toggle_GCSS_S1STS() volatile
    {
        GCSS ^= 1u << 17u;
    }

    /**
     * Set GCSS's S0STS bit.
     *
     * Slice 0 status bit set
     */
    inline void set_GCSS_S0STS() volatile
    {
        GCSS |= 1u << 16u;
    }

    /**
     * Clear GCSS's S0STS bit.
     *
     * Slice 0 status bit set
     */
    inline void clear_GCSS_S0STS() volatile
    {
        GCSS &= ~(1u << 16u);
    }

    /**
     * Toggle GCSS's S0STS bit.
     *
     * Slice 0 status bit set
     */
    inline void toggle_GCSS_S0STS() volatile
    {
        GCSS ^= 1u << 16u;
    }

    /**
     * Set GCSS's S3PSE bit.
     *
     * Slice 3 Prescaler shadow transfer set enable
     */
    inline void set_GCSS_S3PSE() volatile
    {
        GCSS |= 1u << 14u;
    }

    /**
     * Clear GCSS's S3PSE bit.
     *
     * Slice 3 Prescaler shadow transfer set enable
     */
    inline void clear_GCSS_S3PSE() volatile
    {
        GCSS &= ~(1u << 14u);
    }

    /**
     * Toggle GCSS's S3PSE bit.
     *
     * Slice 3 Prescaler shadow transfer set enable
     */
    inline void toggle_GCSS_S3PSE() volatile
    {
        GCSS ^= 1u << 14u;
    }

    /**
     * Set GCSS's S3DSE bit.
     *
     * Slice 3 Dither shadow transfer set enable
     */
    inline void set_GCSS_S3DSE() volatile
    {
        GCSS |= 1u << 13u;
    }

    /**
     * Clear GCSS's S3DSE bit.
     *
     * Slice 3 Dither shadow transfer set enable
     */
    inline void clear_GCSS_S3DSE() volatile
    {
        GCSS &= ~(1u << 13u);
    }

    /**
     * Toggle GCSS's S3DSE bit.
     *
     * Slice 3 Dither shadow transfer set enable
     */
    inline void toggle_GCSS_S3DSE() volatile
    {
        GCSS ^= 1u << 13u;
    }

    /**
     * Set GCSS's S3SE bit.
     *
     * Slice 3 shadow transfer set enable
     */
    inline void set_GCSS_S3SE() volatile
    {
        GCSS |= 1u << 12u;
    }

    /**
     * Clear GCSS's S3SE bit.
     *
     * Slice 3 shadow transfer set enable
     */
    inline void clear_GCSS_S3SE() volatile
    {
        GCSS &= ~(1u << 12u);
    }

    /**
     * Toggle GCSS's S3SE bit.
     *
     * Slice 3 shadow transfer set enable
     */
    inline void toggle_GCSS_S3SE() volatile
    {
        GCSS ^= 1u << 12u;
    }

    /**
     * Set GCSS's S2PSE bit.
     *
     * Slice 2 Prescaler shadow transfer set enable
     */
    inline void set_GCSS_S2PSE() volatile
    {
        GCSS |= 1u << 10u;
    }

    /**
     * Clear GCSS's S2PSE bit.
     *
     * Slice 2 Prescaler shadow transfer set enable
     */
    inline void clear_GCSS_S2PSE() volatile
    {
        GCSS &= ~(1u << 10u);
    }

    /**
     * Toggle GCSS's S2PSE bit.
     *
     * Slice 2 Prescaler shadow transfer set enable
     */
    inline void toggle_GCSS_S2PSE() volatile
    {
        GCSS ^= 1u << 10u;
    }

    /**
     * Set GCSS's S2DSE bit.
     *
     * Slice 2 Dither shadow transfer set enable
     */
    inline void set_GCSS_S2DSE() volatile
    {
        GCSS |= 1u << 9u;
    }

    /**
     * Clear GCSS's S2DSE bit.
     *
     * Slice 2 Dither shadow transfer set enable
     */
    inline void clear_GCSS_S2DSE() volatile
    {
        GCSS &= ~(1u << 9u);
    }

    /**
     * Toggle GCSS's S2DSE bit.
     *
     * Slice 2 Dither shadow transfer set enable
     */
    inline void toggle_GCSS_S2DSE() volatile
    {
        GCSS ^= 1u << 9u;
    }

    /**
     * Set GCSS's S2SE bit.
     *
     * Slice 2 shadow transfer set enable
     */
    inline void set_GCSS_S2SE() volatile
    {
        GCSS |= 1u << 8u;
    }

    /**
     * Clear GCSS's S2SE bit.
     *
     * Slice 2 shadow transfer set enable
     */
    inline void clear_GCSS_S2SE() volatile
    {
        GCSS &= ~(1u << 8u);
    }

    /**
     * Toggle GCSS's S2SE bit.
     *
     * Slice 2 shadow transfer set enable
     */
    inline void toggle_GCSS_S2SE() volatile
    {
        GCSS ^= 1u << 8u;
    }

    /**
     * Set GCSS's S1PSE bit.
     *
     * Slice 1 Prescaler shadow transfer set enable
     */
    inline void set_GCSS_S1PSE() volatile
    {
        GCSS |= 1u << 6u;
    }

    /**
     * Clear GCSS's S1PSE bit.
     *
     * Slice 1 Prescaler shadow transfer set enable
     */
    inline void clear_GCSS_S1PSE() volatile
    {
        GCSS &= ~(1u << 6u);
    }

    /**
     * Toggle GCSS's S1PSE bit.
     *
     * Slice 1 Prescaler shadow transfer set enable
     */
    inline void toggle_GCSS_S1PSE() volatile
    {
        GCSS ^= 1u << 6u;
    }

    /**
     * Set GCSS's S1DSE bit.
     *
     * Slice 1 Dither shadow transfer set enable
     */
    inline void set_GCSS_S1DSE() volatile
    {
        GCSS |= 1u << 5u;
    }

    /**
     * Clear GCSS's S1DSE bit.
     *
     * Slice 1 Dither shadow transfer set enable
     */
    inline void clear_GCSS_S1DSE() volatile
    {
        GCSS &= ~(1u << 5u);
    }

    /**
     * Toggle GCSS's S1DSE bit.
     *
     * Slice 1 Dither shadow transfer set enable
     */
    inline void toggle_GCSS_S1DSE() volatile
    {
        GCSS ^= 1u << 5u;
    }

    /**
     * Set GCSS's S1SE bit.
     *
     * Slice 1 shadow transfer set enable
     */
    inline void set_GCSS_S1SE() volatile
    {
        GCSS |= 1u << 4u;
    }

    /**
     * Clear GCSS's S1SE bit.
     *
     * Slice 1 shadow transfer set enable
     */
    inline void clear_GCSS_S1SE() volatile
    {
        GCSS &= ~(1u << 4u);
    }

    /**
     * Toggle GCSS's S1SE bit.
     *
     * Slice 1 shadow transfer set enable
     */
    inline void toggle_GCSS_S1SE() volatile
    {
        GCSS ^= 1u << 4u;
    }

    /**
     * Set GCSS's S0PSE bit.
     *
     * Slice 0 Prescaler shadow transfer set enable
     */
    inline void set_GCSS_S0PSE() volatile
    {
        GCSS |= 1u << 2u;
    }

    /**
     * Clear GCSS's S0PSE bit.
     *
     * Slice 0 Prescaler shadow transfer set enable
     */
    inline void clear_GCSS_S0PSE() volatile
    {
        GCSS &= ~(1u << 2u);
    }

    /**
     * Toggle GCSS's S0PSE bit.
     *
     * Slice 0 Prescaler shadow transfer set enable
     */
    inline void toggle_GCSS_S0PSE() volatile
    {
        GCSS ^= 1u << 2u;
    }

    /**
     * Set GCSS's S0DSE bit.
     *
     * Slice 0 Dither shadow transfer set enable
     */
    inline void set_GCSS_S0DSE() volatile
    {
        GCSS |= 1u << 1u;
    }

    /**
     * Clear GCSS's S0DSE bit.
     *
     * Slice 0 Dither shadow transfer set enable
     */
    inline void clear_GCSS_S0DSE() volatile
    {
        GCSS &= ~(1u << 1u);
    }

    /**
     * Toggle GCSS's S0DSE bit.
     *
     * Slice 0 Dither shadow transfer set enable
     */
    inline void toggle_GCSS_S0DSE() volatile
    {
        GCSS ^= 1u << 1u;
    }

    /**
     * Set GCSS's S0SE bit.
     *
     * Slice 0 shadow transfer set enable
     */
    inline void set_GCSS_S0SE() volatile
    {
        GCSS |= 1u << 0u;
    }

    /**
     * Clear GCSS's S0SE bit.
     *
     * Slice 0 shadow transfer set enable
     */
    inline void clear_GCSS_S0SE() volatile
    {
        GCSS &= ~(1u << 0u);
    }

    /**
     * Toggle GCSS's S0SE bit.
     *
     * Slice 0 shadow transfer set enable
     */
    inline void toggle_GCSS_S0SE() volatile
    {
        GCSS ^= 1u << 0u;
    }

    /**
     * Set all of GCSS's bit fields.
     *
     * (write-only) Global Channel Set
     */
    inline void set_GCSS(bool S3STS, bool S2STS, bool S1STS, bool S0STS,
                         bool S3PSE, bool S3DSE, bool S3SE, bool S2PSE,
                         bool S2DSE, bool S2SE, bool S1PSE, bool S1DSE,
                         bool S1SE, bool S0PSE, bool S0DSE, bool S0SE) volatile
    {
        uint32_t curr = GCSS;

        curr &= ~(0b1u << 19u);
        curr |= (S3STS & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (S2STS & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (S1STS & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (S0STS & 0b1u) << 16u;
        curr &= ~(0b1u << 14u);
        curr |= (S3PSE & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (S3DSE & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (S3SE & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (S2PSE & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (S2DSE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (S2SE & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (S1PSE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (S1DSE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (S1SE & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (S0PSE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (S0DSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (S0SE & 0b1u) << 0u;

        GCSS = curr;
    }

    /**
     * Set GCSC's S3STC bit.
     *
     * Slice 3 status bit clear
     */
    inline void set_GCSC_S3STC() volatile
    {
        GCSC |= 1u << 19u;
    }

    /**
     * Clear GCSC's S3STC bit.
     *
     * Slice 3 status bit clear
     */
    inline void clear_GCSC_S3STC() volatile
    {
        GCSC &= ~(1u << 19u);
    }

    /**
     * Toggle GCSC's S3STC bit.
     *
     * Slice 3 status bit clear
     */
    inline void toggle_GCSC_S3STC() volatile
    {
        GCSC ^= 1u << 19u;
    }

    /**
     * Set GCSC's S2STC bit.
     *
     * Slice 2 status bit clear
     */
    inline void set_GCSC_S2STC() volatile
    {
        GCSC |= 1u << 18u;
    }

    /**
     * Clear GCSC's S2STC bit.
     *
     * Slice 2 status bit clear
     */
    inline void clear_GCSC_S2STC() volatile
    {
        GCSC &= ~(1u << 18u);
    }

    /**
     * Toggle GCSC's S2STC bit.
     *
     * Slice 2 status bit clear
     */
    inline void toggle_GCSC_S2STC() volatile
    {
        GCSC ^= 1u << 18u;
    }

    /**
     * Set GCSC's S1STC bit.
     *
     * Slice 1 status bit clear
     */
    inline void set_GCSC_S1STC() volatile
    {
        GCSC |= 1u << 17u;
    }

    /**
     * Clear GCSC's S1STC bit.
     *
     * Slice 1 status bit clear
     */
    inline void clear_GCSC_S1STC() volatile
    {
        GCSC &= ~(1u << 17u);
    }

    /**
     * Toggle GCSC's S1STC bit.
     *
     * Slice 1 status bit clear
     */
    inline void toggle_GCSC_S1STC() volatile
    {
        GCSC ^= 1u << 17u;
    }

    /**
     * Set GCSC's S0STC bit.
     *
     * Slice 0 status bit clear
     */
    inline void set_GCSC_S0STC() volatile
    {
        GCSC |= 1u << 16u;
    }

    /**
     * Clear GCSC's S0STC bit.
     *
     * Slice 0 status bit clear
     */
    inline void clear_GCSC_S0STC() volatile
    {
        GCSC &= ~(1u << 16u);
    }

    /**
     * Toggle GCSC's S0STC bit.
     *
     * Slice 0 status bit clear
     */
    inline void toggle_GCSC_S0STC() volatile
    {
        GCSC ^= 1u << 16u;
    }

    /**
     * Set GCSC's S3PSC bit.
     *
     * Slice 3 Prescaler shadow transfer clear
     */
    inline void set_GCSC_S3PSC() volatile
    {
        GCSC |= 1u << 14u;
    }

    /**
     * Clear GCSC's S3PSC bit.
     *
     * Slice 3 Prescaler shadow transfer clear
     */
    inline void clear_GCSC_S3PSC() volatile
    {
        GCSC &= ~(1u << 14u);
    }

    /**
     * Toggle GCSC's S3PSC bit.
     *
     * Slice 3 Prescaler shadow transfer clear
     */
    inline void toggle_GCSC_S3PSC() volatile
    {
        GCSC ^= 1u << 14u;
    }

    /**
     * Set GCSC's S3DSC bit.
     *
     * Slice 3 Dither shadow transfer clear
     */
    inline void set_GCSC_S3DSC() volatile
    {
        GCSC |= 1u << 13u;
    }

    /**
     * Clear GCSC's S3DSC bit.
     *
     * Slice 3 Dither shadow transfer clear
     */
    inline void clear_GCSC_S3DSC() volatile
    {
        GCSC &= ~(1u << 13u);
    }

    /**
     * Toggle GCSC's S3DSC bit.
     *
     * Slice 3 Dither shadow transfer clear
     */
    inline void toggle_GCSC_S3DSC() volatile
    {
        GCSC ^= 1u << 13u;
    }

    /**
     * Set GCSC's S3SC bit.
     *
     * Slice 3 shadow transfer clear
     */
    inline void set_GCSC_S3SC() volatile
    {
        GCSC |= 1u << 12u;
    }

    /**
     * Clear GCSC's S3SC bit.
     *
     * Slice 3 shadow transfer clear
     */
    inline void clear_GCSC_S3SC() volatile
    {
        GCSC &= ~(1u << 12u);
    }

    /**
     * Toggle GCSC's S3SC bit.
     *
     * Slice 3 shadow transfer clear
     */
    inline void toggle_GCSC_S3SC() volatile
    {
        GCSC ^= 1u << 12u;
    }

    /**
     * Set GCSC's S2PSC bit.
     *
     * Slice 2 Prescaler shadow transfer clear
     */
    inline void set_GCSC_S2PSC() volatile
    {
        GCSC |= 1u << 10u;
    }

    /**
     * Clear GCSC's S2PSC bit.
     *
     * Slice 2 Prescaler shadow transfer clear
     */
    inline void clear_GCSC_S2PSC() volatile
    {
        GCSC &= ~(1u << 10u);
    }

    /**
     * Toggle GCSC's S2PSC bit.
     *
     * Slice 2 Prescaler shadow transfer clear
     */
    inline void toggle_GCSC_S2PSC() volatile
    {
        GCSC ^= 1u << 10u;
    }

    /**
     * Set GCSC's S2DSC bit.
     *
     * Slice 2 Dither shadow transfer clear
     */
    inline void set_GCSC_S2DSC() volatile
    {
        GCSC |= 1u << 9u;
    }

    /**
     * Clear GCSC's S2DSC bit.
     *
     * Slice 2 Dither shadow transfer clear
     */
    inline void clear_GCSC_S2DSC() volatile
    {
        GCSC &= ~(1u << 9u);
    }

    /**
     * Toggle GCSC's S2DSC bit.
     *
     * Slice 2 Dither shadow transfer clear
     */
    inline void toggle_GCSC_S2DSC() volatile
    {
        GCSC ^= 1u << 9u;
    }

    /**
     * Set GCSC's S2SC bit.
     *
     * Slice 2 shadow transfer clear
     */
    inline void set_GCSC_S2SC() volatile
    {
        GCSC |= 1u << 8u;
    }

    /**
     * Clear GCSC's S2SC bit.
     *
     * Slice 2 shadow transfer clear
     */
    inline void clear_GCSC_S2SC() volatile
    {
        GCSC &= ~(1u << 8u);
    }

    /**
     * Toggle GCSC's S2SC bit.
     *
     * Slice 2 shadow transfer clear
     */
    inline void toggle_GCSC_S2SC() volatile
    {
        GCSC ^= 1u << 8u;
    }

    /**
     * Set GCSC's S1PSC bit.
     *
     * Slice 1 Prescaler shadow transfer clear
     */
    inline void set_GCSC_S1PSC() volatile
    {
        GCSC |= 1u << 6u;
    }

    /**
     * Clear GCSC's S1PSC bit.
     *
     * Slice 1 Prescaler shadow transfer clear
     */
    inline void clear_GCSC_S1PSC() volatile
    {
        GCSC &= ~(1u << 6u);
    }

    /**
     * Toggle GCSC's S1PSC bit.
     *
     * Slice 1 Prescaler shadow transfer clear
     */
    inline void toggle_GCSC_S1PSC() volatile
    {
        GCSC ^= 1u << 6u;
    }

    /**
     * Set GCSC's S1DSC bit.
     *
     * Slice 1 Dither shadow transfer clear
     */
    inline void set_GCSC_S1DSC() volatile
    {
        GCSC |= 1u << 5u;
    }

    /**
     * Clear GCSC's S1DSC bit.
     *
     * Slice 1 Dither shadow transfer clear
     */
    inline void clear_GCSC_S1DSC() volatile
    {
        GCSC &= ~(1u << 5u);
    }

    /**
     * Toggle GCSC's S1DSC bit.
     *
     * Slice 1 Dither shadow transfer clear
     */
    inline void toggle_GCSC_S1DSC() volatile
    {
        GCSC ^= 1u << 5u;
    }

    /**
     * Set GCSC's S1SC bit.
     *
     * Slice 1 shadow transfer clear
     */
    inline void set_GCSC_S1SC() volatile
    {
        GCSC |= 1u << 4u;
    }

    /**
     * Clear GCSC's S1SC bit.
     *
     * Slice 1 shadow transfer clear
     */
    inline void clear_GCSC_S1SC() volatile
    {
        GCSC &= ~(1u << 4u);
    }

    /**
     * Toggle GCSC's S1SC bit.
     *
     * Slice 1 shadow transfer clear
     */
    inline void toggle_GCSC_S1SC() volatile
    {
        GCSC ^= 1u << 4u;
    }

    /**
     * Set GCSC's S0PSC bit.
     *
     * Slice 0 Prescaler shadow transfer clear
     */
    inline void set_GCSC_S0PSC() volatile
    {
        GCSC |= 1u << 2u;
    }

    /**
     * Clear GCSC's S0PSC bit.
     *
     * Slice 0 Prescaler shadow transfer clear
     */
    inline void clear_GCSC_S0PSC() volatile
    {
        GCSC &= ~(1u << 2u);
    }

    /**
     * Toggle GCSC's S0PSC bit.
     *
     * Slice 0 Prescaler shadow transfer clear
     */
    inline void toggle_GCSC_S0PSC() volatile
    {
        GCSC ^= 1u << 2u;
    }

    /**
     * Set GCSC's S0DSC bit.
     *
     * Slice 0 Dither shadow transfer clear
     */
    inline void set_GCSC_S0DSC() volatile
    {
        GCSC |= 1u << 1u;
    }

    /**
     * Clear GCSC's S0DSC bit.
     *
     * Slice 0 Dither shadow transfer clear
     */
    inline void clear_GCSC_S0DSC() volatile
    {
        GCSC &= ~(1u << 1u);
    }

    /**
     * Toggle GCSC's S0DSC bit.
     *
     * Slice 0 Dither shadow transfer clear
     */
    inline void toggle_GCSC_S0DSC() volatile
    {
        GCSC ^= 1u << 1u;
    }

    /**
     * Set GCSC's S0SC bit.
     *
     * Slice 0 shadow transfer clear
     */
    inline void set_GCSC_S0SC() volatile
    {
        GCSC |= 1u << 0u;
    }

    /**
     * Clear GCSC's S0SC bit.
     *
     * Slice 0 shadow transfer clear
     */
    inline void clear_GCSC_S0SC() volatile
    {
        GCSC &= ~(1u << 0u);
    }

    /**
     * Toggle GCSC's S0SC bit.
     *
     * Slice 0 shadow transfer clear
     */
    inline void toggle_GCSC_S0SC() volatile
    {
        GCSC ^= 1u << 0u;
    }

    /**
     * Set all of GCSC's bit fields.
     *
     * (write-only) Global Channel Clear
     */
    inline void set_GCSC(bool S3STC, bool S2STC, bool S1STC, bool S0STC,
                         bool S3PSC, bool S3DSC, bool S3SC, bool S2PSC,
                         bool S2DSC, bool S2SC, bool S1PSC, bool S1DSC,
                         bool S1SC, bool S0PSC, bool S0DSC, bool S0SC) volatile
    {
        uint32_t curr = GCSC;

        curr &= ~(0b1u << 19u);
        curr |= (S3STC & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (S2STC & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (S1STC & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (S0STC & 0b1u) << 16u;
        curr &= ~(0b1u << 14u);
        curr |= (S3PSC & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (S3DSC & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (S3SC & 0b1u) << 12u;
        curr &= ~(0b1u << 10u);
        curr |= (S2PSC & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (S2DSC & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (S2SC & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (S1PSC & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (S1DSC & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (S1SC & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (S0PSC & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (S0DSC & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (S0SC & 0b1u) << 0u;

        GCSC = curr;
    }

    /**
     * Get GCST's CC43ST bit.
     */
    inline bool get_GCST_CC43ST() volatile
    {
        return GCST & (1u << 19u);
    }

    /**
     * Get GCST's CC42ST bit.
     */
    inline bool get_GCST_CC42ST() volatile
    {
        return GCST & (1u << 18u);
    }

    /**
     * Get GCST's CC41ST bit.
     */
    inline bool get_GCST_CC41ST() volatile
    {
        return GCST & (1u << 17u);
    }

    /**
     * Get GCST's CC40ST bit.
     */
    inline bool get_GCST_CC40ST() volatile
    {
        return GCST & (1u << 16u);
    }

    /**
     * Get GCST's S3PSS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S3PSS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 14u));
    }

    /**
     * Get GCST's S3DSS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S3DSS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 13u));
    }

    /**
     * Get GCST's S3SS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S3SS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 12u));
    }

    /**
     * Get GCST's S2PSS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S2PSS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 10u));
    }

    /**
     * Get GCST's S2DSS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S2DSS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 9u));
    }

    /**
     * Get GCST's S2SS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S2SS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 8u));
    }

    /**
     * Get GCST's S1PSS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S1PSS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 6u));
    }

    /**
     * Get GCST's S1DSS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S1DSS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 5u));
    }

    /**
     * Get GCST's S1SS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S1SS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 4u));
    }

    /**
     * Get GCST's S0PSS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S0PSS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 2u));
    }

    /**
     * Get GCST's S0DSS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S0DSS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 1u));
    }

    /**
     * Get GCST's S0SS bit.
     */
    inline CCU40_GCST_S3PSS get_GCST_S0SS() volatile
    {
        return CCU40_GCST_S3PSS(GCST & (1u << 0u));
    }

    /**
     * Get all of GCST's bit fields.
     */
    inline void get_GCST(bool &CC43ST, bool &CC42ST, bool &CC41ST,
                         bool &CC40ST, CCU40_GCST_S3PSS &S3PSS,
                         CCU40_GCST_S3PSS &S3DSS, CCU40_GCST_S3PSS &S3SS,
                         CCU40_GCST_S3PSS &S2PSS, CCU40_GCST_S3PSS &S2DSS,
                         CCU40_GCST_S3PSS &S2SS, CCU40_GCST_S3PSS &S1PSS,
                         CCU40_GCST_S3PSS &S1DSS, CCU40_GCST_S3PSS &S1SS,
                         CCU40_GCST_S3PSS &S0PSS, CCU40_GCST_S3PSS &S0DSS,
                         CCU40_GCST_S3PSS &S0SS) volatile
    {
        uint32_t curr = GCST;

        CC43ST = curr & (1u << 19u);
        CC42ST = curr & (1u << 18u);
        CC41ST = curr & (1u << 17u);
        CC40ST = curr & (1u << 16u);
        S3PSS = CCU40_GCST_S3PSS(curr & (1u << 14u));
        S3DSS = CCU40_GCST_S3PSS(curr & (1u << 13u));
        S3SS = CCU40_GCST_S3PSS(curr & (1u << 12u));
        S2PSS = CCU40_GCST_S3PSS(curr & (1u << 10u));
        S2DSS = CCU40_GCST_S3PSS(curr & (1u << 9u));
        S2SS = CCU40_GCST_S3PSS(curr & (1u << 8u));
        S1PSS = CCU40_GCST_S3PSS(curr & (1u << 6u));
        S1DSS = CCU40_GCST_S3PSS(curr & (1u << 5u));
        S1SS = CCU40_GCST_S3PSS(curr & (1u << 4u));
        S0PSS = CCU40_GCST_S3PSS(curr & (1u << 2u));
        S0DSS = CCU40_GCST_S3PSS(curr & (1u << 1u));
        S0SS = CCU40_GCST_S3PSS(curr & (1u << 0u));
    }

    /**
     * Get MIDR's MODN field.
     */
    inline uint16_t get_MIDR_MODN() volatile
    {
        return (MIDR >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get MIDR's MODT field.
     */
    inline uint8_t get_MIDR_MODT() volatile
    {
        return (MIDR >> 8u) & 0b11111111u;
    }

    /**
     * Get MIDR's MODR field.
     */
    inline uint8_t get_MIDR_MODR() volatile
    {
        return (MIDR >> 0u) & 0b11111111u;
    }

    /**
     * Get all of MIDR's bit fields.
     */
    inline void get_MIDR(uint16_t &MODN, uint8_t &MODT, uint8_t &MODR) volatile
    {
        uint32_t curr = MIDR;

        MODN = (curr >> 16u) & 0b1111111111111111u;
        MODT = (curr >> 8u) & 0b11111111u;
        MODR = (curr >> 0u) & 0b11111111u;
    }
};

static_assert(sizeof(ccu40) == ccu40::size);

static volatile ccu40 *const CCU40 = reinterpret_cast<ccu40 *>(0x4000C000);

static volatile ccu40 *const CCU41 = reinterpret_cast<ccu40 *>(0x40010000);

static volatile ccu40 *const CCU42 = reinterpret_cast<ccu40 *>(0x40014000);

static volatile ccu40 *const CCU43 = reinterpret_cast<ccu40 *>(0x48004000);

}; // namespace XMC4700
