/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include "../enums/USB0_DCFG_DevSpd.h"
#include "../enums/USB0_DCFG_NZStsOUTHShk.h"
#include "../enums/USB0_DCFG_PerFrInt.h"
#include "../enums/USB0_DCFG_PerSchIntvl.h"
#include "../enums/USB0_DCTL_EnContOnBNA.h"
#include "../enums/USB0_DCTL_GMC.h"
#include "../enums/USB0_DCTL_GNPINNakSts.h"
#include "../enums/USB0_DCTL_GOUTNakSts.h"
#include "../enums/USB0_DCTL_IgnrFrmNum.h"
#include "../enums/USB0_DCTL_SftDiscon.h"
#include "../enums/USB0_DSTS_EnumSpd.h"
#include "../enums/USB0_GAHBCFG_AHBSingle.h"
#include "../enums/USB0_GAHBCFG_DMAEn.h"
#include "../enums/USB0_GAHBCFG_GlblIntrMsk.h"
#include "../enums/USB0_GAHBCFG_HBstLen.h"
#include "../enums/USB0_GAHBCFG_NPTxFEmpLvl.h"
#include "../enums/USB0_GAHBCFG_PTxFEmpLvl.h"
#include "../enums/USB0_GINTSTS_HOSTMODE_CurMod.h"
#include "../enums/USB0_GNPTXSTS_NPTxFSpcAvail.h"
#include "../enums/USB0_GNPTXSTS_NPTxQSpcAvail.h"
#include "../enums/USB0_GNPTXSTS_NPTxQTop.h"
#include "../enums/USB0_GOTGCTL_AvalidOvEn.h"
#include "../enums/USB0_GOTGCTL_AvalidOvVal.h"
#include "../enums/USB0_GOTGCTL_BSesVld.h"
#include "../enums/USB0_GOTGCTL_BvalidOvEn.h"
#include "../enums/USB0_GOTGCTL_BvalidOvVal.h"
#include "../enums/USB0_GOTGCTL_ConlDSts.h"
#include "../enums/USB0_GOTGCTL_DbncTime.h"
#include "../enums/USB0_GOTGCTL_DevHNPEn.h"
#include "../enums/USB0_GOTGCTL_HNPReq.h"
#include "../enums/USB0_GOTGCTL_HstNegScs.h"
#include "../enums/USB0_GOTGCTL_HstSetHNPEn.h"
#include "../enums/USB0_GOTGCTL_OTGVer.h"
#include "../enums/USB0_GOTGCTL_SesReq.h"
#include "../enums/USB0_GOTGCTL_VbvalidOvEn.h"
#include "../enums/USB0_GOTGCTL_VbvalidOvVal.h"
#include "../enums/USB0_GRSTCTL_TxFNum.h"
#include "../enums/USB0_GRXSTSR_DEVICEMODE_PktSts.h"
#include "../enums/USB0_GRXSTSR_HOSTMODE_DPID.h"
#include "../enums/USB0_GRXSTSR_HOSTMODE_PktSts.h"
#include "../enums/USB0_GUSBCFG_ForceDevMode.h"
#include "../enums/USB0_GUSBCFG_ForceHstMode.h"
#include "../enums/USB0_GUSBCFG_OtgI2CSel.h"
#include "../enums/USB0_GUSBCFG_PHYSel.h"
#include "../enums/USB0_GUSBCFG_TxEndDelay.h"
#include "../enums/USB0_HCFG_FSLSPclkSel.h"
#include "../enums/USB0_HCFG_FSLSSupp.h"
#include "../enums/USB0_HCFG_FrListEn.h"
#include "../enums/USB0_HFIR_HFIRRldCtrl.h"
#include "../enums/USB0_HPRT_PrtConnSts.h"
#include "../enums/USB0_HPRT_PrtEna.h"
#include "../enums/USB0_HPRT_PrtOvrCurrAct.h"
#include "../enums/USB0_HPRT_PrtPwr.h"
#include "../enums/USB0_HPRT_PrtRes.h"
#include "../enums/USB0_HPRT_PrtRst.h"
#include "../enums/USB0_HPRT_PrtSpd.h"
#include "../enums/USB0_HPRT_PrtSusp.h"
#include "../enums/USB0_HPTXSTS_PTxFSpcAvail.h"
#include "../enums/USB0_HPTXSTS_PTxQSpcAvail.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Universal Serial Bus
 */
struct [[gnu::packed]] usb0
{
    /* Constant attributes. */
    static constexpr std::size_t size = 3588; /*!< usb0's size in bytes. */

    /* Fields. */
    union {
        uint32_t
            GINTSTS_HOSTMODE; /* (read-write) Interrupt Register [HOSTMODE] */
        uint32_t GINTSTS_DEVICEMODE; /* (read-write) Interrupt Register
                                        [DEVICEMODE] */
    };
    union {
        uint32_t GINTMSK_HOSTMODE;   /* (read-write) Interrupt Mask Register
                                        [HOSTMODE] */
        uint32_t GINTMSK_DEVICEMODE; /* (read-write) Interrupt Mask Register
                                        [DEVICEMODE] */
    };
    union {
        const uint32_t GRXSTSR_HOSTMODE =
            {}; /* (read-only) Receive Status Debug Read Register [HOSTMODE] */
        const uint32_t GRXSTSR_DEVICEMODE =
            {}; /* (read-only) Receive Status Debug Read Register [DEVICEMODE]
                 */
    };
    union {
        const uint32_t GRXSTSP_DEVICEMODE =
            {}; /* (read-only) Receive Status Read and Pop Register
                   [DEVICEMODE] */
        const uint32_t GRXSTSP_HOSTMODE =
            {}; /* (read-only) Receive Status Read and Pop Register [HOSTMODE]
                 */
    };
    union {
        uint32_t GNPTXFSIZ_HOSTMODE; /* (read-write) Non-Periodic Transmit FIFO
                                        Size Register [HOSTMODE] */
        uint32_t GNPTXFSIZ_DEVICEMODE; /* (read-write) Non-Periodic Transmit
                                          FIFO Size Register [DEVICEMODE] */
    };
    uint32_t GOTGCTL; /*!< (read-write) Control and Status Register */
    uint32_t GOTGINT; /*!< (read-write) OTG Interrupt Register */
    uint32_t GAHBCFG; /*!< (read-write) AHB Configuration Register */
    uint32_t GUSBCFG; /*!< (read-write) USB Configuration Register */
    uint32_t GRSTCTL; /*!< (read-write) Reset Register */
    uint32_t GRXFSIZ; /*!< (read-write) Receive FIFO Size Register */
    const uint32_t GNPTXSTS = {}; /*!< (read-only) Non-Periodic Transmit
                                     FIFO/Queue Status Register */
    static constexpr std::size_t reserved_padding0_length = 3;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t GUID; /*!< (read-write) USB Module Identification Register */
    static constexpr std::size_t reserved_padding1_length = 7;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t
        GDFIFOCFG; /*!< (read-write) Global DFIFO Software Config Register */
    static constexpr std::size_t reserved_padding2_length = 40;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t HPTXFSIZ; /*!< (read-write) Host Periodic Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF1; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF2; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF3; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF4; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF5; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    uint32_t DIEPTXF6; /*!< (read-write) Device IN Endpoint Transmit FIFO Size
                          Register */
    static constexpr std::size_t reserved_padding3_length = 185;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t HCFG;  /*!< (read-write) Host Configuration Register */
    uint32_t HFIR;  /*!< (read-write) Host Frame Interval Register */
    uint32_t HFNUM; /*!< (read-write) Host Frame Number/Frame Time Remaining
                       Register */
    const uint32_t reserved_padding4 = {};
    uint32_t HPTXSTS; /*!< (read-write) Host Periodic Transmit FIFO/ Queue
                         Status Register */
    const uint32_t HAINT =
        {};            /*!< (read-only) Host All Channels Interrupt Register */
    uint32_t HAINTMSK; /*!< (read-write) Host All Channels Interrupt Mask
                          Register */
    uint32_t
        HFLBADDR; /*!< (read-write) Host Frame List Base Address Register */
    static constexpr std::size_t reserved_padding5_length = 8;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t HPRT; /*!< (read-write) Host Port Control and Status Register */
    static constexpr std::size_t reserved_padding6_length = 239;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t DCFG; /*!< (read-write) Device Configuration Register */
    uint32_t DCTL; /*!< (read-write) Device Control Register */
    const uint32_t DSTS = {}; /*!< (read-only) Device Status Register */
    const uint32_t reserved_padding7 = {};
    uint32_t DIEPMSK; /*!< (read-write) Device IN Endpoint Common Interrupt
                         Mask Register */
    uint32_t DOEPMSK; /*!< (read-write) Device OUT Endpoint Common Interrupt
                         Mask Register */
    const uint32_t DAINT =
        {}; /*!< (read-only) Device All Endpoints Interrupt Register */
    uint32_t DAINTMSK; /*!< (read-write) Device All Endpoints Interrupt Mask
                          Register */
    static constexpr std::size_t reserved_padding8_length = 2;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t DVBUSDIS; /*!< (read-write) Device VBUS Discharge Time Register */
    uint32_t DVBUSPULSE; /*!< (read-write) Device VBUS Pulsing Time Register */
    const uint32_t reserved_padding9 = {};
    uint32_t DIEPEMPMSK; /*!< (read-write) Device IN Endpoint FIFO Empty
                            Interrupt Mask Register */
    static constexpr std::size_t reserved_padding10_length = 370;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t
        PCGCCTL; /*!< (read-write) Power and Clock Gating Control Register */

    /* Methods. */

    /**
     * Get GOTGCTL's OTGVer bit.
     */
    inline USB0_GOTGCTL_OTGVer get_GOTGCTL_OTGVer() volatile
    {
        return USB0_GOTGCTL_OTGVer(GOTGCTL & (1u << 20u));
    }

    /**
     * Set GOTGCTL's OTGVer bit.
     */
    inline void set_GOTGCTL_OTGVer() volatile
    {
        GOTGCTL |= 1u << 20u;
    }

    /**
     * Clear GOTGCTL's OTGVer bit.
     */
    inline void clear_GOTGCTL_OTGVer() volatile
    {
        GOTGCTL &= ~(1u << 20u);
    }

    /**
     * Toggle GOTGCTL's OTGVer bit.
     */
    inline void toggle_GOTGCTL_OTGVer() volatile
    {
        GOTGCTL ^= 1u << 20u;
    }

    /**
     * Get GOTGCTL's BSesVld bit.
     */
    inline USB0_GOTGCTL_BSesVld get_GOTGCTL_BSesVld() volatile
    {
        return USB0_GOTGCTL_BSesVld(GOTGCTL & (1u << 19u));
    }

    /**
     * Get GOTGCTL's ASesVId bit.
     */
    inline USB0_GOTGCTL_BSesVld get_GOTGCTL_ASesVId() volatile
    {
        return USB0_GOTGCTL_BSesVld(GOTGCTL & (1u << 18u));
    }

    /**
     * Get GOTGCTL's DbncTime bit.
     */
    inline USB0_GOTGCTL_DbncTime get_GOTGCTL_DbncTime() volatile
    {
        return USB0_GOTGCTL_DbncTime(GOTGCTL & (1u << 17u));
    }

    /**
     * Get GOTGCTL's ConlDSts bit.
     */
    inline USB0_GOTGCTL_ConlDSts get_GOTGCTL_ConlDSts() volatile
    {
        return USB0_GOTGCTL_ConlDSts(GOTGCTL & (1u << 16u));
    }

    /**
     * Get GOTGCTL's DevHNPEn bit.
     */
    inline USB0_GOTGCTL_DevHNPEn get_GOTGCTL_DevHNPEn() volatile
    {
        return USB0_GOTGCTL_DevHNPEn(GOTGCTL & (1u << 11u));
    }

    /**
     * Set GOTGCTL's DevHNPEn bit.
     */
    inline void set_GOTGCTL_DevHNPEn() volatile
    {
        GOTGCTL |= 1u << 11u;
    }

    /**
     * Clear GOTGCTL's DevHNPEn bit.
     */
    inline void clear_GOTGCTL_DevHNPEn() volatile
    {
        GOTGCTL &= ~(1u << 11u);
    }

    /**
     * Toggle GOTGCTL's DevHNPEn bit.
     */
    inline void toggle_GOTGCTL_DevHNPEn() volatile
    {
        GOTGCTL ^= 1u << 11u;
    }

    /**
     * Get GOTGCTL's HstSetHNPEn bit.
     */
    inline USB0_GOTGCTL_HstSetHNPEn get_GOTGCTL_HstSetHNPEn() volatile
    {
        return USB0_GOTGCTL_HstSetHNPEn(GOTGCTL & (1u << 10u));
    }

    /**
     * Set GOTGCTL's HstSetHNPEn bit.
     */
    inline void set_GOTGCTL_HstSetHNPEn() volatile
    {
        GOTGCTL |= 1u << 10u;
    }

    /**
     * Clear GOTGCTL's HstSetHNPEn bit.
     */
    inline void clear_GOTGCTL_HstSetHNPEn() volatile
    {
        GOTGCTL &= ~(1u << 10u);
    }

    /**
     * Toggle GOTGCTL's HstSetHNPEn bit.
     */
    inline void toggle_GOTGCTL_HstSetHNPEn() volatile
    {
        GOTGCTL ^= 1u << 10u;
    }

    /**
     * Get GOTGCTL's HNPReq bit.
     */
    inline USB0_GOTGCTL_HNPReq get_GOTGCTL_HNPReq() volatile
    {
        return USB0_GOTGCTL_HNPReq(GOTGCTL & (1u << 9u));
    }

    /**
     * Set GOTGCTL's HNPReq bit.
     */
    inline void set_GOTGCTL_HNPReq() volatile
    {
        GOTGCTL |= 1u << 9u;
    }

    /**
     * Clear GOTGCTL's HNPReq bit.
     */
    inline void clear_GOTGCTL_HNPReq() volatile
    {
        GOTGCTL &= ~(1u << 9u);
    }

    /**
     * Toggle GOTGCTL's HNPReq bit.
     */
    inline void toggle_GOTGCTL_HNPReq() volatile
    {
        GOTGCTL ^= 1u << 9u;
    }

    /**
     * Get GOTGCTL's HstNegScs bit.
     */
    inline USB0_GOTGCTL_HstNegScs get_GOTGCTL_HstNegScs() volatile
    {
        return USB0_GOTGCTL_HstNegScs(GOTGCTL & (1u << 8u));
    }

    /**
     * Get GOTGCTL's BvalidOvVal bit.
     */
    inline USB0_GOTGCTL_BvalidOvVal get_GOTGCTL_BvalidOvVal() volatile
    {
        return USB0_GOTGCTL_BvalidOvVal(GOTGCTL & (1u << 7u));
    }

    /**
     * Set GOTGCTL's BvalidOvVal bit.
     */
    inline void set_GOTGCTL_BvalidOvVal() volatile
    {
        GOTGCTL |= 1u << 7u;
    }

    /**
     * Clear GOTGCTL's BvalidOvVal bit.
     */
    inline void clear_GOTGCTL_BvalidOvVal() volatile
    {
        GOTGCTL &= ~(1u << 7u);
    }

    /**
     * Toggle GOTGCTL's BvalidOvVal bit.
     */
    inline void toggle_GOTGCTL_BvalidOvVal() volatile
    {
        GOTGCTL ^= 1u << 7u;
    }

    /**
     * Get GOTGCTL's BvalidOvEn bit.
     */
    inline USB0_GOTGCTL_BvalidOvEn get_GOTGCTL_BvalidOvEn() volatile
    {
        return USB0_GOTGCTL_BvalidOvEn(GOTGCTL & (1u << 6u));
    }

    /**
     * Set GOTGCTL's BvalidOvEn bit.
     */
    inline void set_GOTGCTL_BvalidOvEn() volatile
    {
        GOTGCTL |= 1u << 6u;
    }

    /**
     * Clear GOTGCTL's BvalidOvEn bit.
     */
    inline void clear_GOTGCTL_BvalidOvEn() volatile
    {
        GOTGCTL &= ~(1u << 6u);
    }

    /**
     * Toggle GOTGCTL's BvalidOvEn bit.
     */
    inline void toggle_GOTGCTL_BvalidOvEn() volatile
    {
        GOTGCTL ^= 1u << 6u;
    }

    /**
     * Get GOTGCTL's AvalidOvVal bit.
     */
    inline USB0_GOTGCTL_AvalidOvVal get_GOTGCTL_AvalidOvVal() volatile
    {
        return USB0_GOTGCTL_AvalidOvVal(GOTGCTL & (1u << 5u));
    }

    /**
     * Set GOTGCTL's AvalidOvVal bit.
     */
    inline void set_GOTGCTL_AvalidOvVal() volatile
    {
        GOTGCTL |= 1u << 5u;
    }

    /**
     * Clear GOTGCTL's AvalidOvVal bit.
     */
    inline void clear_GOTGCTL_AvalidOvVal() volatile
    {
        GOTGCTL &= ~(1u << 5u);
    }

    /**
     * Toggle GOTGCTL's AvalidOvVal bit.
     */
    inline void toggle_GOTGCTL_AvalidOvVal() volatile
    {
        GOTGCTL ^= 1u << 5u;
    }

    /**
     * Get GOTGCTL's AvalidOvEn bit.
     */
    inline USB0_GOTGCTL_AvalidOvEn get_GOTGCTL_AvalidOvEn() volatile
    {
        return USB0_GOTGCTL_AvalidOvEn(GOTGCTL & (1u << 4u));
    }

    /**
     * Set GOTGCTL's AvalidOvEn bit.
     */
    inline void set_GOTGCTL_AvalidOvEn() volatile
    {
        GOTGCTL |= 1u << 4u;
    }

    /**
     * Clear GOTGCTL's AvalidOvEn bit.
     */
    inline void clear_GOTGCTL_AvalidOvEn() volatile
    {
        GOTGCTL &= ~(1u << 4u);
    }

    /**
     * Toggle GOTGCTL's AvalidOvEn bit.
     */
    inline void toggle_GOTGCTL_AvalidOvEn() volatile
    {
        GOTGCTL ^= 1u << 4u;
    }

    /**
     * Get GOTGCTL's VbvalidOvVal bit.
     */
    inline USB0_GOTGCTL_VbvalidOvVal get_GOTGCTL_VbvalidOvVal() volatile
    {
        return USB0_GOTGCTL_VbvalidOvVal(GOTGCTL & (1u << 3u));
    }

    /**
     * Set GOTGCTL's VbvalidOvVal bit.
     */
    inline void set_GOTGCTL_VbvalidOvVal() volatile
    {
        GOTGCTL |= 1u << 3u;
    }

    /**
     * Clear GOTGCTL's VbvalidOvVal bit.
     */
    inline void clear_GOTGCTL_VbvalidOvVal() volatile
    {
        GOTGCTL &= ~(1u << 3u);
    }

    /**
     * Toggle GOTGCTL's VbvalidOvVal bit.
     */
    inline void toggle_GOTGCTL_VbvalidOvVal() volatile
    {
        GOTGCTL ^= 1u << 3u;
    }

    /**
     * Get GOTGCTL's VbvalidOvEn bit.
     */
    inline USB0_GOTGCTL_VbvalidOvEn get_GOTGCTL_VbvalidOvEn() volatile
    {
        return USB0_GOTGCTL_VbvalidOvEn(GOTGCTL & (1u << 2u));
    }

    /**
     * Set GOTGCTL's VbvalidOvEn bit.
     */
    inline void set_GOTGCTL_VbvalidOvEn() volatile
    {
        GOTGCTL |= 1u << 2u;
    }

    /**
     * Clear GOTGCTL's VbvalidOvEn bit.
     */
    inline void clear_GOTGCTL_VbvalidOvEn() volatile
    {
        GOTGCTL &= ~(1u << 2u);
    }

    /**
     * Toggle GOTGCTL's VbvalidOvEn bit.
     */
    inline void toggle_GOTGCTL_VbvalidOvEn() volatile
    {
        GOTGCTL ^= 1u << 2u;
    }

    /**
     * Get GOTGCTL's SesReq bit.
     */
    inline USB0_GOTGCTL_SesReq get_GOTGCTL_SesReq() volatile
    {
        return USB0_GOTGCTL_SesReq(GOTGCTL & (1u << 1u));
    }

    /**
     * Set GOTGCTL's SesReq bit.
     */
    inline void set_GOTGCTL_SesReq() volatile
    {
        GOTGCTL |= 1u << 1u;
    }

    /**
     * Clear GOTGCTL's SesReq bit.
     */
    inline void clear_GOTGCTL_SesReq() volatile
    {
        GOTGCTL &= ~(1u << 1u);
    }

    /**
     * Toggle GOTGCTL's SesReq bit.
     */
    inline void toggle_GOTGCTL_SesReq() volatile
    {
        GOTGCTL ^= 1u << 1u;
    }

    /**
     * Get GOTGCTL's SesReqScs bit.
     */
    inline USB0_GOTGCTL_HstNegScs get_GOTGCTL_SesReqScs() volatile
    {
        return USB0_GOTGCTL_HstNegScs(GOTGCTL & (1u << 0u));
    }

    /**
     * Get all of GOTGCTL's bit fields.
     */
    inline void get_GOTGCTL(
        USB0_GOTGCTL_OTGVer &OTGVer, USB0_GOTGCTL_BSesVld &BSesVld,
        USB0_GOTGCTL_BSesVld &ASesVId, USB0_GOTGCTL_DbncTime &DbncTime,
        USB0_GOTGCTL_ConlDSts &ConlDSts, USB0_GOTGCTL_DevHNPEn &DevHNPEn,
        USB0_GOTGCTL_HstSetHNPEn &HstSetHNPEn, USB0_GOTGCTL_HNPReq &HNPReq,
        USB0_GOTGCTL_HstNegScs &HstNegScs,
        USB0_GOTGCTL_BvalidOvVal &BvalidOvVal,
        USB0_GOTGCTL_BvalidOvEn &BvalidOvEn,
        USB0_GOTGCTL_AvalidOvVal &AvalidOvVal,
        USB0_GOTGCTL_AvalidOvEn &AvalidOvEn,
        USB0_GOTGCTL_VbvalidOvVal &VbvalidOvVal,
        USB0_GOTGCTL_VbvalidOvEn &VbvalidOvEn, USB0_GOTGCTL_SesReq &SesReq,
        USB0_GOTGCTL_HstNegScs &SesReqScs) volatile
    {
        uint32_t curr = GOTGCTL;

        OTGVer = USB0_GOTGCTL_OTGVer(curr & (1u << 20u));
        BSesVld = USB0_GOTGCTL_BSesVld(curr & (1u << 19u));
        ASesVId = USB0_GOTGCTL_BSesVld(curr & (1u << 18u));
        DbncTime = USB0_GOTGCTL_DbncTime(curr & (1u << 17u));
        ConlDSts = USB0_GOTGCTL_ConlDSts(curr & (1u << 16u));
        DevHNPEn = USB0_GOTGCTL_DevHNPEn(curr & (1u << 11u));
        HstSetHNPEn = USB0_GOTGCTL_HstSetHNPEn(curr & (1u << 10u));
        HNPReq = USB0_GOTGCTL_HNPReq(curr & (1u << 9u));
        HstNegScs = USB0_GOTGCTL_HstNegScs(curr & (1u << 8u));
        BvalidOvVal = USB0_GOTGCTL_BvalidOvVal(curr & (1u << 7u));
        BvalidOvEn = USB0_GOTGCTL_BvalidOvEn(curr & (1u << 6u));
        AvalidOvVal = USB0_GOTGCTL_AvalidOvVal(curr & (1u << 5u));
        AvalidOvEn = USB0_GOTGCTL_AvalidOvEn(curr & (1u << 4u));
        VbvalidOvVal = USB0_GOTGCTL_VbvalidOvVal(curr & (1u << 3u));
        VbvalidOvEn = USB0_GOTGCTL_VbvalidOvEn(curr & (1u << 2u));
        SesReq = USB0_GOTGCTL_SesReq(curr & (1u << 1u));
        SesReqScs = USB0_GOTGCTL_HstNegScs(curr & (1u << 0u));
    }

    /**
     * Set all of GOTGCTL's bit fields.
     */
    inline void set_GOTGCTL(USB0_GOTGCTL_OTGVer OTGVer,
                            USB0_GOTGCTL_DevHNPEn DevHNPEn,
                            USB0_GOTGCTL_HstSetHNPEn HstSetHNPEn,
                            USB0_GOTGCTL_HNPReq HNPReq,
                            USB0_GOTGCTL_BvalidOvVal BvalidOvVal,
                            USB0_GOTGCTL_BvalidOvEn BvalidOvEn,
                            USB0_GOTGCTL_AvalidOvVal AvalidOvVal,
                            USB0_GOTGCTL_AvalidOvEn AvalidOvEn,
                            USB0_GOTGCTL_VbvalidOvVal VbvalidOvVal,
                            USB0_GOTGCTL_VbvalidOvEn VbvalidOvEn,
                            USB0_GOTGCTL_SesReq SesReq) volatile
    {
        uint32_t curr = GOTGCTL;

        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(OTGVer) & 0b1u) << 20u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(DevHNPEn) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(HstSetHNPEn) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(HNPReq) & 0b1u) << 9u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(BvalidOvVal) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(BvalidOvEn) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(AvalidOvVal) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(AvalidOvEn) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(VbvalidOvVal) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(VbvalidOvEn) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(SesReq) & 0b1u) << 1u;

        GOTGCTL = curr;
    }

    /**
     * Get GOTGINT's DbnceDone bit.
     */
    inline bool get_GOTGINT_DbnceDone() volatile
    {
        return GOTGINT & (1u << 19u);
    }

    /**
     * Set GOTGINT's DbnceDone bit.
     */
    inline void set_GOTGINT_DbnceDone() volatile
    {
        GOTGINT |= 1u << 19u;
    }

    /**
     * Clear GOTGINT's DbnceDone bit.
     */
    inline void clear_GOTGINT_DbnceDone() volatile
    {
        GOTGINT &= ~(1u << 19u);
    }

    /**
     * Toggle GOTGINT's DbnceDone bit.
     */
    inline void toggle_GOTGINT_DbnceDone() volatile
    {
        GOTGINT ^= 1u << 19u;
    }

    /**
     * Get GOTGINT's ADevTOUTChg bit.
     */
    inline bool get_GOTGINT_ADevTOUTChg() volatile
    {
        return GOTGINT & (1u << 18u);
    }

    /**
     * Set GOTGINT's ADevTOUTChg bit.
     */
    inline void set_GOTGINT_ADevTOUTChg() volatile
    {
        GOTGINT |= 1u << 18u;
    }

    /**
     * Clear GOTGINT's ADevTOUTChg bit.
     */
    inline void clear_GOTGINT_ADevTOUTChg() volatile
    {
        GOTGINT &= ~(1u << 18u);
    }

    /**
     * Toggle GOTGINT's ADevTOUTChg bit.
     */
    inline void toggle_GOTGINT_ADevTOUTChg() volatile
    {
        GOTGINT ^= 1u << 18u;
    }

    /**
     * Get GOTGINT's HstNegDet bit.
     */
    inline bool get_GOTGINT_HstNegDet() volatile
    {
        return GOTGINT & (1u << 17u);
    }

    /**
     * Set GOTGINT's HstNegDet bit.
     */
    inline void set_GOTGINT_HstNegDet() volatile
    {
        GOTGINT |= 1u << 17u;
    }

    /**
     * Clear GOTGINT's HstNegDet bit.
     */
    inline void clear_GOTGINT_HstNegDet() volatile
    {
        GOTGINT &= ~(1u << 17u);
    }

    /**
     * Toggle GOTGINT's HstNegDet bit.
     */
    inline void toggle_GOTGINT_HstNegDet() volatile
    {
        GOTGINT ^= 1u << 17u;
    }

    /**
     * Get GOTGINT's HstNegSucStsChng bit.
     */
    inline bool get_GOTGINT_HstNegSucStsChng() volatile
    {
        return GOTGINT & (1u << 9u);
    }

    /**
     * Set GOTGINT's HstNegSucStsChng bit.
     */
    inline void set_GOTGINT_HstNegSucStsChng() volatile
    {
        GOTGINT |= 1u << 9u;
    }

    /**
     * Clear GOTGINT's HstNegSucStsChng bit.
     */
    inline void clear_GOTGINT_HstNegSucStsChng() volatile
    {
        GOTGINT &= ~(1u << 9u);
    }

    /**
     * Toggle GOTGINT's HstNegSucStsChng bit.
     */
    inline void toggle_GOTGINT_HstNegSucStsChng() volatile
    {
        GOTGINT ^= 1u << 9u;
    }

    /**
     * Get GOTGINT's SesReqSucStsChng bit.
     */
    inline bool get_GOTGINT_SesReqSucStsChng() volatile
    {
        return GOTGINT & (1u << 8u);
    }

    /**
     * Set GOTGINT's SesReqSucStsChng bit.
     */
    inline void set_GOTGINT_SesReqSucStsChng() volatile
    {
        GOTGINT |= 1u << 8u;
    }

    /**
     * Clear GOTGINT's SesReqSucStsChng bit.
     */
    inline void clear_GOTGINT_SesReqSucStsChng() volatile
    {
        GOTGINT &= ~(1u << 8u);
    }

    /**
     * Toggle GOTGINT's SesReqSucStsChng bit.
     */
    inline void toggle_GOTGINT_SesReqSucStsChng() volatile
    {
        GOTGINT ^= 1u << 8u;
    }

    /**
     * Get GOTGINT's SesEndDet bit.
     */
    inline bool get_GOTGINT_SesEndDet() volatile
    {
        return GOTGINT & (1u << 2u);
    }

    /**
     * Set GOTGINT's SesEndDet bit.
     */
    inline void set_GOTGINT_SesEndDet() volatile
    {
        GOTGINT |= 1u << 2u;
    }

    /**
     * Clear GOTGINT's SesEndDet bit.
     */
    inline void clear_GOTGINT_SesEndDet() volatile
    {
        GOTGINT &= ~(1u << 2u);
    }

    /**
     * Toggle GOTGINT's SesEndDet bit.
     */
    inline void toggle_GOTGINT_SesEndDet() volatile
    {
        GOTGINT ^= 1u << 2u;
    }

    /**
     * Get all of GOTGINT's bit fields.
     */
    inline void get_GOTGINT(bool &DbnceDone, bool &ADevTOUTChg,
                            bool &HstNegDet, bool &HstNegSucStsChng,
                            bool &SesReqSucStsChng, bool &SesEndDet) volatile
    {
        uint32_t curr = GOTGINT;

        DbnceDone = curr & (1u << 19u);
        ADevTOUTChg = curr & (1u << 18u);
        HstNegDet = curr & (1u << 17u);
        HstNegSucStsChng = curr & (1u << 9u);
        SesReqSucStsChng = curr & (1u << 8u);
        SesEndDet = curr & (1u << 2u);
    }

    /**
     * Set all of GOTGINT's bit fields.
     */
    inline void set_GOTGINT(bool DbnceDone, bool ADevTOUTChg, bool HstNegDet,
                            bool HstNegSucStsChng, bool SesReqSucStsChng,
                            bool SesEndDet) volatile
    {
        uint32_t curr = GOTGINT;

        curr &= ~(0b1u << 19u);
        curr |= (DbnceDone & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (ADevTOUTChg & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (HstNegDet & 0b1u) << 17u;
        curr &= ~(0b1u << 9u);
        curr |= (HstNegSucStsChng & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SesReqSucStsChng & 0b1u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (SesEndDet & 0b1u) << 2u;

        GOTGINT = curr;
    }

    /**
     * Get GAHBCFG's AHBSingle bit.
     */
    inline USB0_GAHBCFG_AHBSingle get_GAHBCFG_AHBSingle() volatile
    {
        return USB0_GAHBCFG_AHBSingle(GAHBCFG & (1u << 23u));
    }

    /**
     * Set GAHBCFG's AHBSingle bit.
     */
    inline void set_GAHBCFG_AHBSingle() volatile
    {
        GAHBCFG |= 1u << 23u;
    }

    /**
     * Clear GAHBCFG's AHBSingle bit.
     */
    inline void clear_GAHBCFG_AHBSingle() volatile
    {
        GAHBCFG &= ~(1u << 23u);
    }

    /**
     * Toggle GAHBCFG's AHBSingle bit.
     */
    inline void toggle_GAHBCFG_AHBSingle() volatile
    {
        GAHBCFG ^= 1u << 23u;
    }

    /**
     * Get GAHBCFG's PTxFEmpLvl bit.
     */
    inline USB0_GAHBCFG_PTxFEmpLvl get_GAHBCFG_PTxFEmpLvl() volatile
    {
        return USB0_GAHBCFG_PTxFEmpLvl(GAHBCFG & (1u << 8u));
    }

    /**
     * Set GAHBCFG's PTxFEmpLvl bit.
     */
    inline void set_GAHBCFG_PTxFEmpLvl() volatile
    {
        GAHBCFG |= 1u << 8u;
    }

    /**
     * Clear GAHBCFG's PTxFEmpLvl bit.
     */
    inline void clear_GAHBCFG_PTxFEmpLvl() volatile
    {
        GAHBCFG &= ~(1u << 8u);
    }

    /**
     * Toggle GAHBCFG's PTxFEmpLvl bit.
     */
    inline void toggle_GAHBCFG_PTxFEmpLvl() volatile
    {
        GAHBCFG ^= 1u << 8u;
    }

    /**
     * Get GAHBCFG's NPTxFEmpLvl bit.
     */
    inline USB0_GAHBCFG_NPTxFEmpLvl get_GAHBCFG_NPTxFEmpLvl() volatile
    {
        return USB0_GAHBCFG_NPTxFEmpLvl(GAHBCFG & (1u << 7u));
    }

    /**
     * Set GAHBCFG's NPTxFEmpLvl bit.
     */
    inline void set_GAHBCFG_NPTxFEmpLvl() volatile
    {
        GAHBCFG |= 1u << 7u;
    }

    /**
     * Clear GAHBCFG's NPTxFEmpLvl bit.
     */
    inline void clear_GAHBCFG_NPTxFEmpLvl() volatile
    {
        GAHBCFG &= ~(1u << 7u);
    }

    /**
     * Toggle GAHBCFG's NPTxFEmpLvl bit.
     */
    inline void toggle_GAHBCFG_NPTxFEmpLvl() volatile
    {
        GAHBCFG ^= 1u << 7u;
    }

    /**
     * Get GAHBCFG's DMAEn bit.
     */
    inline USB0_GAHBCFG_DMAEn get_GAHBCFG_DMAEn() volatile
    {
        return USB0_GAHBCFG_DMAEn(GAHBCFG & (1u << 5u));
    }

    /**
     * Set GAHBCFG's DMAEn bit.
     */
    inline void set_GAHBCFG_DMAEn() volatile
    {
        GAHBCFG |= 1u << 5u;
    }

    /**
     * Clear GAHBCFG's DMAEn bit.
     */
    inline void clear_GAHBCFG_DMAEn() volatile
    {
        GAHBCFG &= ~(1u << 5u);
    }

    /**
     * Toggle GAHBCFG's DMAEn bit.
     */
    inline void toggle_GAHBCFG_DMAEn() volatile
    {
        GAHBCFG ^= 1u << 5u;
    }

    /**
     * Get GAHBCFG's HBstLen field.
     */
    inline USB0_GAHBCFG_HBstLen get_GAHBCFG_HBstLen() volatile
    {
        return USB0_GAHBCFG_HBstLen((GAHBCFG >> 1u) & 0b1111u);
    }

    /**
     * Set GAHBCFG's HBstLen field.
     */
    inline void set_GAHBCFG_HBstLen(USB0_GAHBCFG_HBstLen value) volatile
    {
        uint32_t curr = GAHBCFG;

        curr &= ~(0b1111u << 1u);
        curr |= (std::to_underlying(value) & 0b1111u) << 1u;

        GAHBCFG = curr;
    }

    /**
     * Get GAHBCFG's GlblIntrMsk bit.
     */
    inline USB0_GAHBCFG_GlblIntrMsk get_GAHBCFG_GlblIntrMsk() volatile
    {
        return USB0_GAHBCFG_GlblIntrMsk(GAHBCFG & (1u << 0u));
    }

    /**
     * Set GAHBCFG's GlblIntrMsk bit.
     */
    inline void set_GAHBCFG_GlblIntrMsk() volatile
    {
        GAHBCFG |= 1u << 0u;
    }

    /**
     * Clear GAHBCFG's GlblIntrMsk bit.
     */
    inline void clear_GAHBCFG_GlblIntrMsk() volatile
    {
        GAHBCFG &= ~(1u << 0u);
    }

    /**
     * Toggle GAHBCFG's GlblIntrMsk bit.
     */
    inline void toggle_GAHBCFG_GlblIntrMsk() volatile
    {
        GAHBCFG ^= 1u << 0u;
    }

    /**
     * Get all of GAHBCFG's bit fields.
     */
    inline void get_GAHBCFG(USB0_GAHBCFG_AHBSingle &AHBSingle,
                            USB0_GAHBCFG_PTxFEmpLvl &PTxFEmpLvl,
                            USB0_GAHBCFG_NPTxFEmpLvl &NPTxFEmpLvl,
                            USB0_GAHBCFG_DMAEn &DMAEn,
                            USB0_GAHBCFG_HBstLen &HBstLen,
                            USB0_GAHBCFG_GlblIntrMsk &GlblIntrMsk) volatile
    {
        uint32_t curr = GAHBCFG;

        AHBSingle = USB0_GAHBCFG_AHBSingle(curr & (1u << 23u));
        PTxFEmpLvl = USB0_GAHBCFG_PTxFEmpLvl(curr & (1u << 8u));
        NPTxFEmpLvl = USB0_GAHBCFG_NPTxFEmpLvl(curr & (1u << 7u));
        DMAEn = USB0_GAHBCFG_DMAEn(curr & (1u << 5u));
        HBstLen = USB0_GAHBCFG_HBstLen((curr >> 1u) & 0b1111u);
        GlblIntrMsk = USB0_GAHBCFG_GlblIntrMsk(curr & (1u << 0u));
    }

    /**
     * Set all of GAHBCFG's bit fields.
     */
    inline void set_GAHBCFG(USB0_GAHBCFG_AHBSingle AHBSingle,
                            USB0_GAHBCFG_PTxFEmpLvl PTxFEmpLvl,
                            USB0_GAHBCFG_NPTxFEmpLvl NPTxFEmpLvl,
                            USB0_GAHBCFG_DMAEn DMAEn,
                            USB0_GAHBCFG_HBstLen HBstLen,
                            USB0_GAHBCFG_GlblIntrMsk GlblIntrMsk) volatile
    {
        uint32_t curr = GAHBCFG;

        curr &= ~(0b1u << 23u);
        curr |= (std::to_underlying(AHBSingle) & 0b1u) << 23u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(PTxFEmpLvl) & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(NPTxFEmpLvl) & 0b1u) << 7u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DMAEn) & 0b1u) << 5u;
        curr &= ~(0b1111u << 1u);
        curr |= (std::to_underlying(HBstLen) & 0b1111u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(GlblIntrMsk) & 0b1u) << 0u;

        GAHBCFG = curr;
    }

    /**
     * Get GUSBCFG's CTP bit.
     */
    inline bool get_GUSBCFG_CTP() volatile
    {
        return GUSBCFG & (1u << 31u);
    }

    /**
     * Set GUSBCFG's CTP bit.
     */
    inline void set_GUSBCFG_CTP() volatile
    {
        GUSBCFG |= 1u << 31u;
    }

    /**
     * Clear GUSBCFG's CTP bit.
     */
    inline void clear_GUSBCFG_CTP() volatile
    {
        GUSBCFG &= ~(1u << 31u);
    }

    /**
     * Toggle GUSBCFG's CTP bit.
     */
    inline void toggle_GUSBCFG_CTP() volatile
    {
        GUSBCFG ^= 1u << 31u;
    }

    /**
     * Get GUSBCFG's ForceDevMode bit.
     */
    inline USB0_GUSBCFG_ForceDevMode get_GUSBCFG_ForceDevMode() volatile
    {
        return USB0_GUSBCFG_ForceDevMode(GUSBCFG & (1u << 30u));
    }

    /**
     * Set GUSBCFG's ForceDevMode bit.
     */
    inline void set_GUSBCFG_ForceDevMode() volatile
    {
        GUSBCFG |= 1u << 30u;
    }

    /**
     * Clear GUSBCFG's ForceDevMode bit.
     */
    inline void clear_GUSBCFG_ForceDevMode() volatile
    {
        GUSBCFG &= ~(1u << 30u);
    }

    /**
     * Toggle GUSBCFG's ForceDevMode bit.
     */
    inline void toggle_GUSBCFG_ForceDevMode() volatile
    {
        GUSBCFG ^= 1u << 30u;
    }

    /**
     * Get GUSBCFG's ForceHstMode bit.
     */
    inline USB0_GUSBCFG_ForceHstMode get_GUSBCFG_ForceHstMode() volatile
    {
        return USB0_GUSBCFG_ForceHstMode(GUSBCFG & (1u << 29u));
    }

    /**
     * Set GUSBCFG's ForceHstMode bit.
     */
    inline void set_GUSBCFG_ForceHstMode() volatile
    {
        GUSBCFG |= 1u << 29u;
    }

    /**
     * Clear GUSBCFG's ForceHstMode bit.
     */
    inline void clear_GUSBCFG_ForceHstMode() volatile
    {
        GUSBCFG &= ~(1u << 29u);
    }

    /**
     * Toggle GUSBCFG's ForceHstMode bit.
     */
    inline void toggle_GUSBCFG_ForceHstMode() volatile
    {
        GUSBCFG ^= 1u << 29u;
    }

    /**
     * Get GUSBCFG's TxEndDelay bit.
     */
    inline USB0_GUSBCFG_TxEndDelay get_GUSBCFG_TxEndDelay() volatile
    {
        return USB0_GUSBCFG_TxEndDelay(GUSBCFG & (1u << 28u));
    }

    /**
     * Set GUSBCFG's TxEndDelay bit.
     */
    inline void set_GUSBCFG_TxEndDelay() volatile
    {
        GUSBCFG |= 1u << 28u;
    }

    /**
     * Clear GUSBCFG's TxEndDelay bit.
     */
    inline void clear_GUSBCFG_TxEndDelay() volatile
    {
        GUSBCFG &= ~(1u << 28u);
    }

    /**
     * Toggle GUSBCFG's TxEndDelay bit.
     */
    inline void toggle_GUSBCFG_TxEndDelay() volatile
    {
        GUSBCFG ^= 1u << 28u;
    }

    /**
     * Get GUSBCFG's OtgI2CSel bit.
     */
    inline USB0_GUSBCFG_OtgI2CSel get_GUSBCFG_OtgI2CSel() volatile
    {
        return USB0_GUSBCFG_OtgI2CSel(GUSBCFG & (1u << 16u));
    }

    /**
     * Set GUSBCFG's OtgI2CSel bit.
     */
    inline void set_GUSBCFG_OtgI2CSel() volatile
    {
        GUSBCFG |= 1u << 16u;
    }

    /**
     * Clear GUSBCFG's OtgI2CSel bit.
     */
    inline void clear_GUSBCFG_OtgI2CSel() volatile
    {
        GUSBCFG &= ~(1u << 16u);
    }

    /**
     * Toggle GUSBCFG's OtgI2CSel bit.
     */
    inline void toggle_GUSBCFG_OtgI2CSel() volatile
    {
        GUSBCFG ^= 1u << 16u;
    }

    /**
     * Get GUSBCFG's USBTrdTim field.
     */
    inline uint8_t get_GUSBCFG_USBTrdTim() volatile
    {
        return (GUSBCFG >> 10u) & 0b1111u;
    }

    /**
     * Set GUSBCFG's USBTrdTim field.
     */
    inline void set_GUSBCFG_USBTrdTim(uint8_t value) volatile
    {
        uint32_t curr = GUSBCFG;

        curr &= ~(0b1111u << 10u);
        curr |= (value & 0b1111u) << 10u;

        GUSBCFG = curr;
    }

    /**
     * Get GUSBCFG's HNPCap bit.
     */
    inline USB0_GOTGCTL_HstSetHNPEn get_GUSBCFG_HNPCap() volatile
    {
        return USB0_GOTGCTL_HstSetHNPEn(GUSBCFG & (1u << 9u));
    }

    /**
     * Set GUSBCFG's HNPCap bit.
     */
    inline void set_GUSBCFG_HNPCap() volatile
    {
        GUSBCFG |= 1u << 9u;
    }

    /**
     * Clear GUSBCFG's HNPCap bit.
     */
    inline void clear_GUSBCFG_HNPCap() volatile
    {
        GUSBCFG &= ~(1u << 9u);
    }

    /**
     * Toggle GUSBCFG's HNPCap bit.
     */
    inline void toggle_GUSBCFG_HNPCap() volatile
    {
        GUSBCFG ^= 1u << 9u;
    }

    /**
     * Get GUSBCFG's SRPCap bit.
     */
    inline USB0_GOTGCTL_HstSetHNPEn get_GUSBCFG_SRPCap() volatile
    {
        return USB0_GOTGCTL_HstSetHNPEn(GUSBCFG & (1u << 8u));
    }

    /**
     * Set GUSBCFG's SRPCap bit.
     */
    inline void set_GUSBCFG_SRPCap() volatile
    {
        GUSBCFG |= 1u << 8u;
    }

    /**
     * Clear GUSBCFG's SRPCap bit.
     */
    inline void clear_GUSBCFG_SRPCap() volatile
    {
        GUSBCFG &= ~(1u << 8u);
    }

    /**
     * Toggle GUSBCFG's SRPCap bit.
     */
    inline void toggle_GUSBCFG_SRPCap() volatile
    {
        GUSBCFG ^= 1u << 8u;
    }

    /**
     * Get GUSBCFG's PHYSel bit.
     */
    inline USB0_GUSBCFG_PHYSel get_GUSBCFG_PHYSel() volatile
    {
        return USB0_GUSBCFG_PHYSel(GUSBCFG & (1u << 6u));
    }

    /**
     * Get GUSBCFG's TOutCal field.
     */
    inline uint8_t get_GUSBCFG_TOutCal() volatile
    {
        return (GUSBCFG >> 0u) & 0b111u;
    }

    /**
     * Set GUSBCFG's TOutCal field.
     */
    inline void set_GUSBCFG_TOutCal(uint8_t value) volatile
    {
        uint32_t curr = GUSBCFG;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        GUSBCFG = curr;
    }

    /**
     * Get all of GUSBCFG's bit fields.
     */
    inline void get_GUSBCFG(bool &CTP, USB0_GUSBCFG_ForceDevMode &ForceDevMode,
                            USB0_GUSBCFG_ForceHstMode &ForceHstMode,
                            USB0_GUSBCFG_TxEndDelay &TxEndDelay,
                            USB0_GUSBCFG_OtgI2CSel &OtgI2CSel,
                            uint8_t &USBTrdTim,
                            USB0_GOTGCTL_HstSetHNPEn &HNPCap,
                            USB0_GOTGCTL_HstSetHNPEn &SRPCap,
                            USB0_GUSBCFG_PHYSel &PHYSel,
                            uint8_t &TOutCal) volatile
    {
        uint32_t curr = GUSBCFG;

        CTP = curr & (1u << 31u);
        ForceDevMode = USB0_GUSBCFG_ForceDevMode(curr & (1u << 30u));
        ForceHstMode = USB0_GUSBCFG_ForceHstMode(curr & (1u << 29u));
        TxEndDelay = USB0_GUSBCFG_TxEndDelay(curr & (1u << 28u));
        OtgI2CSel = USB0_GUSBCFG_OtgI2CSel(curr & (1u << 16u));
        USBTrdTim = (curr >> 10u) & 0b1111u;
        HNPCap = USB0_GOTGCTL_HstSetHNPEn(curr & (1u << 9u));
        SRPCap = USB0_GOTGCTL_HstSetHNPEn(curr & (1u << 8u));
        PHYSel = USB0_GUSBCFG_PHYSel(curr & (1u << 6u));
        TOutCal = (curr >> 0u) & 0b111u;
    }

    /**
     * Set all of GUSBCFG's bit fields.
     */
    inline void set_GUSBCFG(bool CTP, USB0_GUSBCFG_ForceDevMode ForceDevMode,
                            USB0_GUSBCFG_ForceHstMode ForceHstMode,
                            USB0_GUSBCFG_TxEndDelay TxEndDelay,
                            USB0_GUSBCFG_OtgI2CSel OtgI2CSel,
                            uint8_t USBTrdTim, USB0_GOTGCTL_HstSetHNPEn HNPCap,
                            USB0_GOTGCTL_HstSetHNPEn SRPCap,
                            uint8_t TOutCal) volatile
    {
        uint32_t curr = GUSBCFG;

        curr &= ~(0b1u << 31u);
        curr |= (CTP & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (std::to_underlying(ForceDevMode) & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(ForceHstMode) & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (std::to_underlying(TxEndDelay) & 0b1u) << 28u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(OtgI2CSel) & 0b1u) << 16u;
        curr &= ~(0b1111u << 10u);
        curr |= (USBTrdTim & 0b1111u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(HNPCap) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(SRPCap) & 0b1u) << 8u;
        curr &= ~(0b111u << 0u);
        curr |= (TOutCal & 0b111u) << 0u;

        GUSBCFG = curr;
    }

    /**
     * Get GRSTCTL's AHBIdle bit.
     */
    inline bool get_GRSTCTL_AHBIdle() volatile
    {
        return GRSTCTL & (1u << 31u);
    }

    /**
     * Get GRSTCTL's DMAReq bit.
     */
    inline bool get_GRSTCTL_DMAReq() volatile
    {
        return GRSTCTL & (1u << 30u);
    }

    /**
     * Get GRSTCTL's TxFNum field.
     */
    inline USB0_GRSTCTL_TxFNum get_GRSTCTL_TxFNum() volatile
    {
        return USB0_GRSTCTL_TxFNum((GRSTCTL >> 6u) & 0b11111u);
    }

    /**
     * Set GRSTCTL's TxFNum field.
     */
    inline void set_GRSTCTL_TxFNum(USB0_GRSTCTL_TxFNum value) volatile
    {
        uint32_t curr = GRSTCTL;

        curr &= ~(0b11111u << 6u);
        curr |= (std::to_underlying(value) & 0b11111u) << 6u;

        GRSTCTL = curr;
    }

    /**
     * Get GRSTCTL's TxFFlsh bit.
     */
    inline bool get_GRSTCTL_TxFFlsh() volatile
    {
        return GRSTCTL & (1u << 5u);
    }

    /**
     * Set GRSTCTL's TxFFlsh bit.
     */
    inline void set_GRSTCTL_TxFFlsh() volatile
    {
        GRSTCTL |= 1u << 5u;
    }

    /**
     * Clear GRSTCTL's TxFFlsh bit.
     */
    inline void clear_GRSTCTL_TxFFlsh() volatile
    {
        GRSTCTL &= ~(1u << 5u);
    }

    /**
     * Toggle GRSTCTL's TxFFlsh bit.
     */
    inline void toggle_GRSTCTL_TxFFlsh() volatile
    {
        GRSTCTL ^= 1u << 5u;
    }

    /**
     * Get GRSTCTL's RxFFlsh bit.
     */
    inline bool get_GRSTCTL_RxFFlsh() volatile
    {
        return GRSTCTL & (1u << 4u);
    }

    /**
     * Set GRSTCTL's RxFFlsh bit.
     */
    inline void set_GRSTCTL_RxFFlsh() volatile
    {
        GRSTCTL |= 1u << 4u;
    }

    /**
     * Clear GRSTCTL's RxFFlsh bit.
     */
    inline void clear_GRSTCTL_RxFFlsh() volatile
    {
        GRSTCTL &= ~(1u << 4u);
    }

    /**
     * Toggle GRSTCTL's RxFFlsh bit.
     */
    inline void toggle_GRSTCTL_RxFFlsh() volatile
    {
        GRSTCTL ^= 1u << 4u;
    }

    /**
     * Get GRSTCTL's FrmCntrRst bit.
     */
    inline bool get_GRSTCTL_FrmCntrRst() volatile
    {
        return GRSTCTL & (1u << 2u);
    }

    /**
     * Set GRSTCTL's FrmCntrRst bit.
     */
    inline void set_GRSTCTL_FrmCntrRst() volatile
    {
        GRSTCTL |= 1u << 2u;
    }

    /**
     * Clear GRSTCTL's FrmCntrRst bit.
     */
    inline void clear_GRSTCTL_FrmCntrRst() volatile
    {
        GRSTCTL &= ~(1u << 2u);
    }

    /**
     * Toggle GRSTCTL's FrmCntrRst bit.
     */
    inline void toggle_GRSTCTL_FrmCntrRst() volatile
    {
        GRSTCTL ^= 1u << 2u;
    }

    /**
     * Get GRSTCTL's CSftRst bit.
     */
    inline bool get_GRSTCTL_CSftRst() volatile
    {
        return GRSTCTL & (1u << 0u);
    }

    /**
     * Set GRSTCTL's CSftRst bit.
     */
    inline void set_GRSTCTL_CSftRst() volatile
    {
        GRSTCTL |= 1u << 0u;
    }

    /**
     * Clear GRSTCTL's CSftRst bit.
     */
    inline void clear_GRSTCTL_CSftRst() volatile
    {
        GRSTCTL &= ~(1u << 0u);
    }

    /**
     * Toggle GRSTCTL's CSftRst bit.
     */
    inline void toggle_GRSTCTL_CSftRst() volatile
    {
        GRSTCTL ^= 1u << 0u;
    }

    /**
     * Get all of GRSTCTL's bit fields.
     */
    inline void get_GRSTCTL(bool &AHBIdle, bool &DMAReq,
                            USB0_GRSTCTL_TxFNum &TxFNum, bool &TxFFlsh,
                            bool &RxFFlsh, bool &FrmCntrRst,
                            bool &CSftRst) volatile
    {
        uint32_t curr = GRSTCTL;

        AHBIdle = curr & (1u << 31u);
        DMAReq = curr & (1u << 30u);
        TxFNum = USB0_GRSTCTL_TxFNum((curr >> 6u) & 0b11111u);
        TxFFlsh = curr & (1u << 5u);
        RxFFlsh = curr & (1u << 4u);
        FrmCntrRst = curr & (1u << 2u);
        CSftRst = curr & (1u << 0u);
    }

    /**
     * Set all of GRSTCTL's bit fields.
     */
    inline void set_GRSTCTL(USB0_GRSTCTL_TxFNum TxFNum, bool TxFFlsh,
                            bool RxFFlsh, bool FrmCntrRst,
                            bool CSftRst) volatile
    {
        uint32_t curr = GRSTCTL;

        curr &= ~(0b11111u << 6u);
        curr |= (std::to_underlying(TxFNum) & 0b11111u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (TxFFlsh & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (RxFFlsh & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (FrmCntrRst & 0b1u) << 2u;
        curr &= ~(0b1u << 0u);
        curr |= (CSftRst & 0b1u) << 0u;

        GRSTCTL = curr;
    }

    /**
     * Get GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline bool get_GINTSTS_HOSTMODE_WkUpInt() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 31u);
    }

    /**
     * Set GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void set_GINTSTS_HOSTMODE_WkUpInt() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 31u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void clear_GINTSTS_HOSTMODE_WkUpInt() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 31u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_WkUpInt() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 31u;
    }

    /**
     * Get GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline bool get_GINTSTS_HOSTMODE_SessReqInt() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 30u);
    }

    /**
     * Set GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void set_GINTSTS_HOSTMODE_SessReqInt() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 30u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void clear_GINTSTS_HOSTMODE_SessReqInt() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 30u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_SessReqInt() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 30u;
    }

    /**
     * Get GINTSTS_HOSTMODE's DisconnInt bit.
     */
    inline bool get_GINTSTS_HOSTMODE_DisconnInt() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 29u);
    }

    /**
     * Set GINTSTS_HOSTMODE's DisconnInt bit.
     */
    inline void set_GINTSTS_HOSTMODE_DisconnInt() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 29u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's DisconnInt bit.
     */
    inline void clear_GINTSTS_HOSTMODE_DisconnInt() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 29u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's DisconnInt bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_DisconnInt() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 29u;
    }

    /**
     * Get GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline bool get_GINTSTS_HOSTMODE_ConIDStsChng() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 28u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void set_GINTSTS_HOSTMODE_ConIDStsChng() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 28u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void clear_GINTSTS_HOSTMODE_ConIDStsChng() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 28u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_ConIDStsChng() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 28u;
    }

    /**
     * Get GINTSTS_HOSTMODE's PTxFEmp bit.
     */
    inline bool get_GINTSTS_HOSTMODE_PTxFEmp() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 26u);
    }

    /**
     * Get GINTSTS_HOSTMODE's HChInt bit.
     */
    inline bool get_GINTSTS_HOSTMODE_HChInt() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 25u);
    }

    /**
     * Get GINTSTS_HOSTMODE's PrtInt bit.
     */
    inline bool get_GINTSTS_HOSTMODE_PrtInt() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 24u);
    }

    /**
     * Get GINTSTS_HOSTMODE's incomplP bit.
     */
    inline bool get_GINTSTS_HOSTMODE_incomplP() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 21u);
    }

    /**
     * Set GINTSTS_HOSTMODE's incomplP bit.
     */
    inline void set_GINTSTS_HOSTMODE_incomplP() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 21u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's incomplP bit.
     */
    inline void clear_GINTSTS_HOSTMODE_incomplP() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 21u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's incomplP bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_incomplP() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 21u;
    }

    /**
     * Get GINTSTS_HOSTMODE's RxFLvl bit.
     */
    inline bool get_GINTSTS_HOSTMODE_RxFLvl() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 4u);
    }

    /**
     * Get GINTSTS_HOSTMODE's Sof bit.
     */
    inline bool get_GINTSTS_HOSTMODE_Sof() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 3u);
    }

    /**
     * Set GINTSTS_HOSTMODE's Sof bit.
     */
    inline void set_GINTSTS_HOSTMODE_Sof() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 3u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's Sof bit.
     */
    inline void clear_GINTSTS_HOSTMODE_Sof() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 3u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's Sof bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_Sof() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 3u;
    }

    /**
     * Get GINTSTS_HOSTMODE's OTGInt bit.
     */
    inline bool get_GINTSTS_HOSTMODE_OTGInt() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 2u);
    }

    /**
     * Get GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline bool get_GINTSTS_HOSTMODE_ModeMis() volatile
    {
        return GINTSTS_HOSTMODE & (1u << 1u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void set_GINTSTS_HOSTMODE_ModeMis() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 1u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void clear_GINTSTS_HOSTMODE_ModeMis() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 1u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void toggle_GINTSTS_HOSTMODE_ModeMis() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 1u;
    }

    /**
     * Get GINTSTS_HOSTMODE's CurMod bit.
     */
    inline USB0_GINTSTS_HOSTMODE_CurMod get_GINTSTS_HOSTMODE_CurMod() volatile
    {
        return USB0_GINTSTS_HOSTMODE_CurMod(GINTSTS_HOSTMODE & (1u << 0u));
    }

    /**
     * Get all of GINTSTS_HOSTMODE's bit fields.
     */
    inline void get_GINTSTS_HOSTMODE(
        bool &WkUpInt, bool &SessReqInt, bool &DisconnInt, bool &ConIDStsChng,
        bool &PTxFEmp, bool &HChInt, bool &PrtInt, bool &incomplP,
        bool &RxFLvl, bool &Sof, bool &OTGInt, bool &ModeMis,
        USB0_GINTSTS_HOSTMODE_CurMod &CurMod) volatile
    {
        uint32_t curr = GINTSTS_HOSTMODE;

        WkUpInt = curr & (1u << 31u);
        SessReqInt = curr & (1u << 30u);
        DisconnInt = curr & (1u << 29u);
        ConIDStsChng = curr & (1u << 28u);
        PTxFEmp = curr & (1u << 26u);
        HChInt = curr & (1u << 25u);
        PrtInt = curr & (1u << 24u);
        incomplP = curr & (1u << 21u);
        RxFLvl = curr & (1u << 4u);
        Sof = curr & (1u << 3u);
        OTGInt = curr & (1u << 2u);
        ModeMis = curr & (1u << 1u);
        CurMod = USB0_GINTSTS_HOSTMODE_CurMod(curr & (1u << 0u));
    }

    /**
     * Set all of GINTSTS_HOSTMODE's bit fields.
     */
    inline void set_GINTSTS_HOSTMODE(bool WkUpInt, bool SessReqInt,
                                     bool DisconnInt, bool ConIDStsChng,
                                     bool incomplP, bool Sof,
                                     bool ModeMis) volatile
    {
        uint32_t curr = GINTSTS_HOSTMODE;

        curr &= ~(0b1u << 31u);
        curr |= (WkUpInt & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SessReqInt & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (DisconnInt & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (ConIDStsChng & 0b1u) << 28u;
        curr &= ~(0b1u << 21u);
        curr |= (incomplP & 0b1u) << 21u;
        curr &= ~(0b1u << 3u);
        curr |= (Sof & 0b1u) << 3u;
        curr &= ~(0b1u << 1u);
        curr |= (ModeMis & 0b1u) << 1u;

        GINTSTS_HOSTMODE = curr;
    }

    /**
     * Get GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_WkUpInt() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 31u);
    }

    /**
     * Set GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void set_GINTSTS_DEVICEMODE_WkUpInt() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 31u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_WkUpInt() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 31u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's WkUpInt bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_WkUpInt() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 31u;
    }

    /**
     * Get GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_SessReqInt() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 30u);
    }

    /**
     * Set GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void set_GINTSTS_DEVICEMODE_SessReqInt() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 30u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_SessReqInt() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 30u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's SessReqInt bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_SessReqInt() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 30u;
    }

    /**
     * Get GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_ConIDStsChng() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 28u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void set_GINTSTS_DEVICEMODE_ConIDStsChng() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 28u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_ConIDStsChng() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 28u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ConIDStsChng bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_ConIDStsChng() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 28u;
    }

    /**
     * Get GINTSTS_HOSTMODE's incomplSOOUT bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_incomplSOOUT() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 21u);
    }

    /**
     * Set GINTSTS_HOSTMODE's incomplSOOUT bit.
     */
    inline void set_GINTSTS_DEVICEMODE_incomplSOOUT() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 21u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's incomplSOOUT bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_incomplSOOUT() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 21u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's incomplSOOUT bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_incomplSOOUT() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 21u;
    }

    /**
     * Get GINTSTS_HOSTMODE's incompISOIN bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_incompISOIN() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 20u);
    }

    /**
     * Set GINTSTS_HOSTMODE's incompISOIN bit.
     */
    inline void set_GINTSTS_DEVICEMODE_incompISOIN() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 20u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's incompISOIN bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_incompISOIN() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 20u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's incompISOIN bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_incompISOIN() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 20u;
    }

    /**
     * Get GINTSTS_HOSTMODE's OEPInt bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_OEPInt() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 19u);
    }

    /**
     * Get GINTSTS_HOSTMODE's IEPInt bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_IEPInt() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 18u);
    }

    /**
     * Get GINTSTS_HOSTMODE's EOPF bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_EOPF() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 15u);
    }

    /**
     * Set GINTSTS_HOSTMODE's EOPF bit.
     */
    inline void set_GINTSTS_DEVICEMODE_EOPF() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 15u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's EOPF bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_EOPF() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 15u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's EOPF bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_EOPF() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 15u;
    }

    /**
     * Get GINTSTS_HOSTMODE's ISOOutDrop bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_ISOOutDrop() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 14u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ISOOutDrop bit.
     */
    inline void set_GINTSTS_DEVICEMODE_ISOOutDrop() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 14u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ISOOutDrop bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_ISOOutDrop() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 14u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ISOOutDrop bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_ISOOutDrop() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 14u;
    }

    /**
     * Get GINTSTS_HOSTMODE's EnumDone bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_EnumDone() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 13u);
    }

    /**
     * Set GINTSTS_HOSTMODE's EnumDone bit.
     */
    inline void set_GINTSTS_DEVICEMODE_EnumDone() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 13u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's EnumDone bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_EnumDone() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 13u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's EnumDone bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_EnumDone() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 13u;
    }

    /**
     * Get GINTSTS_HOSTMODE's USBRst bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_USBRst() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 12u);
    }

    /**
     * Set GINTSTS_HOSTMODE's USBRst bit.
     */
    inline void set_GINTSTS_DEVICEMODE_USBRst() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 12u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's USBRst bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_USBRst() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 12u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's USBRst bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_USBRst() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 12u;
    }

    /**
     * Get GINTSTS_HOSTMODE's USBSusp bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_USBSusp() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 11u);
    }

    /**
     * Set GINTSTS_HOSTMODE's USBSusp bit.
     */
    inline void set_GINTSTS_DEVICEMODE_USBSusp() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 11u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's USBSusp bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_USBSusp() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 11u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's USBSusp bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_USBSusp() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 11u;
    }

    /**
     * Get GINTSTS_HOSTMODE's ErlySusp bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_ErlySusp() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 10u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ErlySusp bit.
     */
    inline void set_GINTSTS_DEVICEMODE_ErlySusp() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 10u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ErlySusp bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_ErlySusp() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 10u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ErlySusp bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_ErlySusp() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 10u;
    }

    /**
     * Get GINTSTS_HOSTMODE's GOUTNakEff bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_GOUTNakEff() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 7u);
    }

    /**
     * Get GINTSTS_HOSTMODE's GINNakEff bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_GINNakEff() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 6u);
    }

    /**
     * Get GINTSTS_HOSTMODE's RxFLvl bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_RxFLvl() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 4u);
    }

    /**
     * Get GINTSTS_HOSTMODE's Sof bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_Sof() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 3u);
    }

    /**
     * Set GINTSTS_HOSTMODE's Sof bit.
     */
    inline void set_GINTSTS_DEVICEMODE_Sof() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 3u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's Sof bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_Sof() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 3u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's Sof bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_Sof() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 3u;
    }

    /**
     * Get GINTSTS_HOSTMODE's OTGInt bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_OTGInt() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 2u);
    }

    /**
     * Get GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline bool get_GINTSTS_DEVICEMODE_ModeMis() volatile
    {
        return GINTSTS_DEVICEMODE & (1u << 1u);
    }

    /**
     * Set GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void set_GINTSTS_DEVICEMODE_ModeMis() volatile
    {
        GINTSTS_HOSTMODE |= 1u << 1u;
    }

    /**
     * Clear GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void clear_GINTSTS_DEVICEMODE_ModeMis() volatile
    {
        GINTSTS_HOSTMODE &= ~(1u << 1u);
    }

    /**
     * Toggle GINTSTS_HOSTMODE's ModeMis bit.
     */
    inline void toggle_GINTSTS_DEVICEMODE_ModeMis() volatile
    {
        GINTSTS_HOSTMODE ^= 1u << 1u;
    }

    /**
     * Get GINTSTS_HOSTMODE's CurMod bit.
     */
    inline USB0_GINTSTS_HOSTMODE_CurMod
    get_GINTSTS_DEVICEMODE_CurMod() volatile
    {
        return USB0_GINTSTS_HOSTMODE_CurMod(GINTSTS_DEVICEMODE & (1u << 0u));
    }

    /**
     * Get all of GINTSTS_DEVICEMODE's bit fields.
     */
    inline void get_GINTSTS_DEVICEMODE(
        bool &WkUpInt, bool &SessReqInt, bool &ConIDStsChng,
        bool &incomplSOOUT, bool &incompISOIN, bool &OEPInt, bool &IEPInt,
        bool &EOPF, bool &ISOOutDrop, bool &EnumDone, bool &USBRst,
        bool &USBSusp, bool &ErlySusp, bool &GOUTNakEff, bool &GINNakEff,
        bool &RxFLvl, bool &Sof, bool &OTGInt, bool &ModeMis,
        USB0_GINTSTS_HOSTMODE_CurMod &CurMod) volatile
    {
        uint32_t curr = GINTSTS_DEVICEMODE;

        WkUpInt = curr & (1u << 31u);
        SessReqInt = curr & (1u << 30u);
        ConIDStsChng = curr & (1u << 28u);
        incomplSOOUT = curr & (1u << 21u);
        incompISOIN = curr & (1u << 20u);
        OEPInt = curr & (1u << 19u);
        IEPInt = curr & (1u << 18u);
        EOPF = curr & (1u << 15u);
        ISOOutDrop = curr & (1u << 14u);
        EnumDone = curr & (1u << 13u);
        USBRst = curr & (1u << 12u);
        USBSusp = curr & (1u << 11u);
        ErlySusp = curr & (1u << 10u);
        GOUTNakEff = curr & (1u << 7u);
        GINNakEff = curr & (1u << 6u);
        RxFLvl = curr & (1u << 4u);
        Sof = curr & (1u << 3u);
        OTGInt = curr & (1u << 2u);
        ModeMis = curr & (1u << 1u);
        CurMod = USB0_GINTSTS_HOSTMODE_CurMod(curr & (1u << 0u));
    }

    /**
     * Set all of GINTSTS_DEVICEMODE's bit fields.
     */
    inline void set_GINTSTS_DEVICEMODE(bool WkUpInt, bool SessReqInt,
                                       bool ConIDStsChng, bool incomplSOOUT,
                                       bool incompISOIN, bool EOPF,
                                       bool ISOOutDrop, bool EnumDone,
                                       bool USBRst, bool USBSusp,
                                       bool ErlySusp, bool Sof,
                                       bool ModeMis) volatile
    {
        uint32_t curr = GINTSTS_DEVICEMODE;

        curr &= ~(0b1u << 31u);
        curr |= (WkUpInt & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SessReqInt & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (ConIDStsChng & 0b1u) << 28u;
        curr &= ~(0b1u << 21u);
        curr |= (incomplSOOUT & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (incompISOIN & 0b1u) << 20u;
        curr &= ~(0b1u << 15u);
        curr |= (EOPF & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ISOOutDrop & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (EnumDone & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (USBRst & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (USBSusp & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ErlySusp & 0b1u) << 10u;
        curr &= ~(0b1u << 3u);
        curr |= (Sof & 0b1u) << 3u;
        curr &= ~(0b1u << 1u);
        curr |= (ModeMis & 0b1u) << 1u;

        GINTSTS_DEVICEMODE = curr;
    }

    /**
     * Get GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_WkUpIntMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 31u);
    }

    /**
     * Set GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_WkUpIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 31u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_WkUpIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 31u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_WkUpIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 31u;
    }

    /**
     * Get GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_SessReqIntMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 30u);
    }

    /**
     * Set GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_SessReqIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 30u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_SessReqIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 30u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_SessReqIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 30u;
    }

    /**
     * Get GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_DisconnIntMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 29u);
    }

    /**
     * Set GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_DisconnIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 29u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_DisconnIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 29u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_DisconnIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 29u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_ConIDStsChngMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 28u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_ConIDStsChngMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 28u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_ConIDStsChngMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 28u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_ConIDStsChngMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 28u;
    }

    /**
     * Get GINTMSK_HOSTMODE's PTxFEmpMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_PTxFEmpMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 26u);
    }

    /**
     * Set GINTMSK_HOSTMODE's PTxFEmpMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_PTxFEmpMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 26u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's PTxFEmpMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_PTxFEmpMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 26u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's PTxFEmpMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_PTxFEmpMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 26u;
    }

    /**
     * Get GINTMSK_HOSTMODE's HChIntMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_HChIntMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 25u);
    }

    /**
     * Set GINTMSK_HOSTMODE's HChIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_HChIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 25u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's HChIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_HChIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 25u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's HChIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_HChIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 25u;
    }

    /**
     * Get GINTMSK_HOSTMODE's PrtIntMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_PrtIntMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 24u);
    }

    /**
     * Set GINTMSK_HOSTMODE's PrtIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_PrtIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 24u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's PrtIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_PrtIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 24u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's PrtIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_PrtIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 24u;
    }

    /**
     * Get GINTMSK_HOSTMODE's incomplPMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_incomplPMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 21u);
    }

    /**
     * Set GINTMSK_HOSTMODE's incomplPMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_incomplPMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 21u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's incomplPMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_incomplPMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 21u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's incomplPMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_incomplPMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 21u;
    }

    /**
     * Get GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_RxFLvlMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 4u);
    }

    /**
     * Set GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_RxFLvlMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 4u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_RxFLvlMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 4u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_RxFLvlMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 4u;
    }

    /**
     * Get GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_SofMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 3u);
    }

    /**
     * Set GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_SofMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 3u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_SofMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 3u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_SofMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 3u;
    }

    /**
     * Get GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_OTGIntMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 2u);
    }

    /**
     * Set GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_OTGIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 2u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_OTGIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 2u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_OTGIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 2u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline bool get_GINTMSK_HOSTMODE_ModeMisMsk() volatile
    {
        return GINTMSK_HOSTMODE & (1u << 1u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void set_GINTMSK_HOSTMODE_ModeMisMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 1u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void clear_GINTMSK_HOSTMODE_ModeMisMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 1u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void toggle_GINTMSK_HOSTMODE_ModeMisMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 1u;
    }

    /**
     * Get all of GINTMSK_HOSTMODE's bit fields.
     */
    inline void get_GINTMSK_HOSTMODE(bool &WkUpIntMsk, bool &SessReqIntMsk,
                                     bool &DisconnIntMsk,
                                     bool &ConIDStsChngMsk, bool &PTxFEmpMsk,
                                     bool &HChIntMsk, bool &PrtIntMsk,
                                     bool &incomplPMsk, bool &RxFLvlMsk,
                                     bool &SofMsk, bool &OTGIntMsk,
                                     bool &ModeMisMsk) volatile
    {
        uint32_t curr = GINTMSK_HOSTMODE;

        WkUpIntMsk = curr & (1u << 31u);
        SessReqIntMsk = curr & (1u << 30u);
        DisconnIntMsk = curr & (1u << 29u);
        ConIDStsChngMsk = curr & (1u << 28u);
        PTxFEmpMsk = curr & (1u << 26u);
        HChIntMsk = curr & (1u << 25u);
        PrtIntMsk = curr & (1u << 24u);
        incomplPMsk = curr & (1u << 21u);
        RxFLvlMsk = curr & (1u << 4u);
        SofMsk = curr & (1u << 3u);
        OTGIntMsk = curr & (1u << 2u);
        ModeMisMsk = curr & (1u << 1u);
    }

    /**
     * Set all of GINTMSK_HOSTMODE's bit fields.
     */
    inline void set_GINTMSK_HOSTMODE(bool WkUpIntMsk, bool SessReqIntMsk,
                                     bool DisconnIntMsk, bool ConIDStsChngMsk,
                                     bool PTxFEmpMsk, bool HChIntMsk,
                                     bool PrtIntMsk, bool incomplPMsk,
                                     bool RxFLvlMsk, bool SofMsk,
                                     bool OTGIntMsk, bool ModeMisMsk) volatile
    {
        uint32_t curr = GINTMSK_HOSTMODE;

        curr &= ~(0b1u << 31u);
        curr |= (WkUpIntMsk & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SessReqIntMsk & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (DisconnIntMsk & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (ConIDStsChngMsk & 0b1u) << 28u;
        curr &= ~(0b1u << 26u);
        curr |= (PTxFEmpMsk & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (HChIntMsk & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (PrtIntMsk & 0b1u) << 24u;
        curr &= ~(0b1u << 21u);
        curr |= (incomplPMsk & 0b1u) << 21u;
        curr &= ~(0b1u << 4u);
        curr |= (RxFLvlMsk & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SofMsk & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (OTGIntMsk & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ModeMisMsk & 0b1u) << 1u;

        GINTMSK_HOSTMODE = curr;
    }

    /**
     * Get GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_WkUpIntMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 31u);
    }

    /**
     * Set GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_WkUpIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 31u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_WkUpIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 31u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's WkUpIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_WkUpIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 31u;
    }

    /**
     * Get GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_SessReqIntMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 30u);
    }

    /**
     * Set GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_SessReqIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 30u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_SessReqIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 30u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's SessReqIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_SessReqIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 30u;
    }

    /**
     * Get GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_DisconnIntMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 29u);
    }

    /**
     * Set GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_DisconnIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 29u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_DisconnIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 29u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's DisconnIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_DisconnIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 29u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_ConIDStsChngMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 28u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_ConIDStsChngMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 28u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_ConIDStsChngMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 28u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ConIDStsChngMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_ConIDStsChngMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 28u;
    }

    /**
     * Get GINTMSK_HOSTMODE's incomplSOOUTMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_incomplSOOUTMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 21u);
    }

    /**
     * Set GINTMSK_HOSTMODE's incomplSOOUTMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_incomplSOOUTMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 21u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's incomplSOOUTMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_incomplSOOUTMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 21u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's incomplSOOUTMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_incomplSOOUTMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 21u;
    }

    /**
     * Get GINTMSK_HOSTMODE's incompISOINMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_incompISOINMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 20u);
    }

    /**
     * Set GINTMSK_HOSTMODE's incompISOINMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_incompISOINMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 20u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's incompISOINMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_incompISOINMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 20u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's incompISOINMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_incompISOINMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 20u;
    }

    /**
     * Get GINTMSK_HOSTMODE's OEPIntMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_OEPIntMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 19u);
    }

    /**
     * Set GINTMSK_HOSTMODE's OEPIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_OEPIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 19u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's OEPIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_OEPIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 19u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's OEPIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_OEPIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 19u;
    }

    /**
     * Get GINTMSK_HOSTMODE's IEPIntMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_IEPIntMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 18u);
    }

    /**
     * Set GINTMSK_HOSTMODE's IEPIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_IEPIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 18u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's IEPIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_IEPIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 18u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's IEPIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_IEPIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 18u;
    }

    /**
     * Get GINTMSK_HOSTMODE's EOPFMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_EOPFMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 15u);
    }

    /**
     * Set GINTMSK_HOSTMODE's EOPFMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_EOPFMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 15u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's EOPFMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_EOPFMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 15u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's EOPFMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_EOPFMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 15u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ISOOutDropMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_ISOOutDropMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 14u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ISOOutDropMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_ISOOutDropMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 14u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ISOOutDropMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_ISOOutDropMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 14u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ISOOutDropMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_ISOOutDropMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 14u;
    }

    /**
     * Get GINTMSK_HOSTMODE's EnumDoneMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_EnumDoneMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 13u);
    }

    /**
     * Set GINTMSK_HOSTMODE's EnumDoneMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_EnumDoneMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 13u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's EnumDoneMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_EnumDoneMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 13u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's EnumDoneMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_EnumDoneMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 13u;
    }

    /**
     * Get GINTMSK_HOSTMODE's USBRstMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_USBRstMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 12u);
    }

    /**
     * Set GINTMSK_HOSTMODE's USBRstMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_USBRstMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 12u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's USBRstMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_USBRstMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 12u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's USBRstMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_USBRstMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 12u;
    }

    /**
     * Get GINTMSK_HOSTMODE's USBSuspMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_USBSuspMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 11u);
    }

    /**
     * Set GINTMSK_HOSTMODE's USBSuspMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_USBSuspMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 11u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's USBSuspMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_USBSuspMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 11u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's USBSuspMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_USBSuspMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 11u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ErlySuspMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_ErlySuspMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 10u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ErlySuspMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_ErlySuspMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 10u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ErlySuspMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_ErlySuspMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 10u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ErlySuspMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_ErlySuspMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 10u;
    }

    /**
     * Get GINTMSK_HOSTMODE's GOUTNakEffMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_GOUTNakEffMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 7u);
    }

    /**
     * Set GINTMSK_HOSTMODE's GOUTNakEffMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_GOUTNakEffMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 7u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's GOUTNakEffMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_GOUTNakEffMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 7u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's GOUTNakEffMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_GOUTNakEffMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 7u;
    }

    /**
     * Get GINTMSK_HOSTMODE's GINNakEffMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_GINNakEffMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 6u);
    }

    /**
     * Set GINTMSK_HOSTMODE's GINNakEffMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_GINNakEffMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 6u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's GINNakEffMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_GINNakEffMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 6u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's GINNakEffMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_GINNakEffMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 6u;
    }

    /**
     * Get GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_RxFLvlMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 4u);
    }

    /**
     * Set GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_RxFLvlMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 4u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_RxFLvlMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 4u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's RxFLvlMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_RxFLvlMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 4u;
    }

    /**
     * Get GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_SofMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 3u);
    }

    /**
     * Set GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_SofMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 3u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_SofMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 3u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's SofMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_SofMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 3u;
    }

    /**
     * Get GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_OTGIntMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 2u);
    }

    /**
     * Set GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_OTGIntMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 2u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_OTGIntMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 2u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's OTGIntMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_OTGIntMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 2u;
    }

    /**
     * Get GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline bool get_GINTMSK_DEVICEMODE_ModeMisMsk() volatile
    {
        return GINTMSK_DEVICEMODE & (1u << 1u);
    }

    /**
     * Set GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void set_GINTMSK_DEVICEMODE_ModeMisMsk() volatile
    {
        GINTMSK_HOSTMODE |= 1u << 1u;
    }

    /**
     * Clear GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void clear_GINTMSK_DEVICEMODE_ModeMisMsk() volatile
    {
        GINTMSK_HOSTMODE &= ~(1u << 1u);
    }

    /**
     * Toggle GINTMSK_HOSTMODE's ModeMisMsk bit.
     */
    inline void toggle_GINTMSK_DEVICEMODE_ModeMisMsk() volatile
    {
        GINTMSK_HOSTMODE ^= 1u << 1u;
    }

    /**
     * Get all of GINTMSK_DEVICEMODE's bit fields.
     */
    inline void get_GINTMSK_DEVICEMODE(
        bool &WkUpIntMsk, bool &SessReqIntMsk, bool &DisconnIntMsk,
        bool &ConIDStsChngMsk, bool &incomplSOOUTMsk, bool &incompISOINMsk,
        bool &OEPIntMsk, bool &IEPIntMsk, bool &EOPFMsk, bool &ISOOutDropMsk,
        bool &EnumDoneMsk, bool &USBRstMsk, bool &USBSuspMsk,
        bool &ErlySuspMsk, bool &GOUTNakEffMsk, bool &GINNakEffMsk,
        bool &RxFLvlMsk, bool &SofMsk, bool &OTGIntMsk,
        bool &ModeMisMsk) volatile
    {
        uint32_t curr = GINTMSK_DEVICEMODE;

        WkUpIntMsk = curr & (1u << 31u);
        SessReqIntMsk = curr & (1u << 30u);
        DisconnIntMsk = curr & (1u << 29u);
        ConIDStsChngMsk = curr & (1u << 28u);
        incomplSOOUTMsk = curr & (1u << 21u);
        incompISOINMsk = curr & (1u << 20u);
        OEPIntMsk = curr & (1u << 19u);
        IEPIntMsk = curr & (1u << 18u);
        EOPFMsk = curr & (1u << 15u);
        ISOOutDropMsk = curr & (1u << 14u);
        EnumDoneMsk = curr & (1u << 13u);
        USBRstMsk = curr & (1u << 12u);
        USBSuspMsk = curr & (1u << 11u);
        ErlySuspMsk = curr & (1u << 10u);
        GOUTNakEffMsk = curr & (1u << 7u);
        GINNakEffMsk = curr & (1u << 6u);
        RxFLvlMsk = curr & (1u << 4u);
        SofMsk = curr & (1u << 3u);
        OTGIntMsk = curr & (1u << 2u);
        ModeMisMsk = curr & (1u << 1u);
    }

    /**
     * Set all of GINTMSK_DEVICEMODE's bit fields.
     */
    inline void set_GINTMSK_DEVICEMODE(
        bool WkUpIntMsk, bool SessReqIntMsk, bool DisconnIntMsk,
        bool ConIDStsChngMsk, bool incomplSOOUTMsk, bool incompISOINMsk,
        bool OEPIntMsk, bool IEPIntMsk, bool EOPFMsk, bool ISOOutDropMsk,
        bool EnumDoneMsk, bool USBRstMsk, bool USBSuspMsk, bool ErlySuspMsk,
        bool GOUTNakEffMsk, bool GINNakEffMsk, bool RxFLvlMsk, bool SofMsk,
        bool OTGIntMsk, bool ModeMisMsk) volatile
    {
        uint32_t curr = GINTMSK_DEVICEMODE;

        curr &= ~(0b1u << 31u);
        curr |= (WkUpIntMsk & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SessReqIntMsk & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (DisconnIntMsk & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (ConIDStsChngMsk & 0b1u) << 28u;
        curr &= ~(0b1u << 21u);
        curr |= (incomplSOOUTMsk & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (incompISOINMsk & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (OEPIntMsk & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (IEPIntMsk & 0b1u) << 18u;
        curr &= ~(0b1u << 15u);
        curr |= (EOPFMsk & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ISOOutDropMsk & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (EnumDoneMsk & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (USBRstMsk & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (USBSuspMsk & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (ErlySuspMsk & 0b1u) << 10u;
        curr &= ~(0b1u << 7u);
        curr |= (GOUTNakEffMsk & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (GINNakEffMsk & 0b1u) << 6u;
        curr &= ~(0b1u << 4u);
        curr |= (RxFLvlMsk & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SofMsk & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (OTGIntMsk & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ModeMisMsk & 0b1u) << 1u;

        GINTMSK_DEVICEMODE = curr;
    }

    /**
     * Get GRXSTSR_HOSTMODE's PktSts field.
     */
    inline USB0_GRXSTSR_HOSTMODE_PktSts get_GRXSTSR_HOSTMODE_PktSts() volatile
    {
        return USB0_GRXSTSR_HOSTMODE_PktSts((GRXSTSR_HOSTMODE >> 17u) &
                                            0b1111u);
    }

    /**
     * Get GRXSTSR_HOSTMODE's DPID field.
     */
    inline USB0_GRXSTSR_HOSTMODE_DPID get_GRXSTSR_HOSTMODE_DPID() volatile
    {
        return USB0_GRXSTSR_HOSTMODE_DPID((GRXSTSR_HOSTMODE >> 15u) & 0b11u);
    }

    /**
     * Get GRXSTSR_HOSTMODE's BCnt field.
     */
    inline uint16_t get_GRXSTSR_HOSTMODE_BCnt() volatile
    {
        return (GRXSTSR_HOSTMODE >> 4u) & 0b11111111111u;
    }

    /**
     * Get GRXSTSR_HOSTMODE's ChNum field.
     */
    inline uint8_t get_GRXSTSR_HOSTMODE_ChNum() volatile
    {
        return (GRXSTSR_HOSTMODE >> 0u) & 0b1111u;
    }

    /**
     * Get all of GRXSTSR_HOSTMODE's bit fields.
     */
    inline void get_GRXSTSR_HOSTMODE(USB0_GRXSTSR_HOSTMODE_PktSts &PktSts,
                                     USB0_GRXSTSR_HOSTMODE_DPID &DPID,
                                     uint16_t &BCnt, uint8_t &ChNum) volatile
    {
        uint32_t curr = GRXSTSR_HOSTMODE;

        PktSts = USB0_GRXSTSR_HOSTMODE_PktSts((curr >> 17u) & 0b1111u);
        DPID = USB0_GRXSTSR_HOSTMODE_DPID((curr >> 15u) & 0b11u);
        BCnt = (curr >> 4u) & 0b11111111111u;
        ChNum = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get GRXSTSR_HOSTMODE's FN field.
     */
    inline uint8_t get_GRXSTSR_DEVICEMODE_FN() volatile
    {
        return (GRXSTSR_DEVICEMODE >> 21u) & 0b1111u;
    }

    /**
     * Get GRXSTSR_HOSTMODE's PktSts field.
     */
    inline USB0_GRXSTSR_DEVICEMODE_PktSts
    get_GRXSTSR_DEVICEMODE_PktSts() volatile
    {
        return USB0_GRXSTSR_DEVICEMODE_PktSts((GRXSTSR_DEVICEMODE >> 17u) &
                                              0b1111u);
    }

    /**
     * Get GRXSTSR_HOSTMODE's DPID field.
     */
    inline USB0_GRXSTSR_HOSTMODE_DPID get_GRXSTSR_DEVICEMODE_DPID() volatile
    {
        return USB0_GRXSTSR_HOSTMODE_DPID((GRXSTSR_DEVICEMODE >> 15u) & 0b11u);
    }

    /**
     * Get GRXSTSR_HOSTMODE's BCnt field.
     */
    inline uint16_t get_GRXSTSR_DEVICEMODE_BCnt() volatile
    {
        return (GRXSTSR_DEVICEMODE >> 4u) & 0b11111111111u;
    }

    /**
     * Get GRXSTSR_HOSTMODE's EPNum field.
     */
    inline uint8_t get_GRXSTSR_DEVICEMODE_EPNum() volatile
    {
        return (GRXSTSR_DEVICEMODE >> 0u) & 0b1111u;
    }

    /**
     * Get all of GRXSTSR_DEVICEMODE's bit fields.
     */
    inline void get_GRXSTSR_DEVICEMODE(uint8_t &FN,
                                       USB0_GRXSTSR_DEVICEMODE_PktSts &PktSts,
                                       USB0_GRXSTSR_HOSTMODE_DPID &DPID,
                                       uint16_t &BCnt, uint8_t &EPNum) volatile
    {
        uint32_t curr = GRXSTSR_DEVICEMODE;

        FN = (curr >> 21u) & 0b1111u;
        PktSts = USB0_GRXSTSR_DEVICEMODE_PktSts((curr >> 17u) & 0b1111u);
        DPID = USB0_GRXSTSR_HOSTMODE_DPID((curr >> 15u) & 0b11u);
        BCnt = (curr >> 4u) & 0b11111111111u;
        EPNum = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's FN field.
     */
    inline uint8_t get_GRXSTSP_DEVICEMODE_FN() volatile
    {
        return (GRXSTSP_DEVICEMODE >> 21u) & 0b1111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's PktSts field.
     */
    inline USB0_GRXSTSR_DEVICEMODE_PktSts
    get_GRXSTSP_DEVICEMODE_PktSts() volatile
    {
        return USB0_GRXSTSR_DEVICEMODE_PktSts((GRXSTSP_DEVICEMODE >> 17u) &
                                              0b1111u);
    }

    /**
     * Get GRXSTSP_DEVICEMODE's DPID field.
     */
    inline USB0_GRXSTSR_HOSTMODE_DPID get_GRXSTSP_DEVICEMODE_DPID() volatile
    {
        return USB0_GRXSTSR_HOSTMODE_DPID((GRXSTSP_DEVICEMODE >> 15u) & 0b11u);
    }

    /**
     * Get GRXSTSP_DEVICEMODE's BCnt field.
     */
    inline uint16_t get_GRXSTSP_DEVICEMODE_BCnt() volatile
    {
        return (GRXSTSP_DEVICEMODE >> 4u) & 0b11111111111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's EPNum field.
     */
    inline uint8_t get_GRXSTSP_DEVICEMODE_EPNum() volatile
    {
        return (GRXSTSP_DEVICEMODE >> 0u) & 0b1111u;
    }

    /**
     * Get all of GRXSTSP_DEVICEMODE's bit fields.
     */
    inline void get_GRXSTSP_DEVICEMODE(uint8_t &FN,
                                       USB0_GRXSTSR_DEVICEMODE_PktSts &PktSts,
                                       USB0_GRXSTSR_HOSTMODE_DPID &DPID,
                                       uint16_t &BCnt, uint8_t &EPNum) volatile
    {
        uint32_t curr = GRXSTSP_DEVICEMODE;

        FN = (curr >> 21u) & 0b1111u;
        PktSts = USB0_GRXSTSR_DEVICEMODE_PktSts((curr >> 17u) & 0b1111u);
        DPID = USB0_GRXSTSR_HOSTMODE_DPID((curr >> 15u) & 0b11u);
        BCnt = (curr >> 4u) & 0b11111111111u;
        EPNum = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's PktSts field.
     */
    inline USB0_GRXSTSR_HOSTMODE_PktSts get_GRXSTSP_HOSTMODE_PktSts() volatile
    {
        return USB0_GRXSTSR_HOSTMODE_PktSts((GRXSTSP_HOSTMODE >> 17u) &
                                            0b1111u);
    }

    /**
     * Get GRXSTSP_DEVICEMODE's DPID field.
     */
    inline USB0_GRXSTSR_HOSTMODE_DPID get_GRXSTSP_HOSTMODE_DPID() volatile
    {
        return USB0_GRXSTSR_HOSTMODE_DPID((GRXSTSP_HOSTMODE >> 15u) & 0b11u);
    }

    /**
     * Get GRXSTSP_DEVICEMODE's BCnt field.
     */
    inline uint16_t get_GRXSTSP_HOSTMODE_BCnt() volatile
    {
        return (GRXSTSP_HOSTMODE >> 4u) & 0b11111111111u;
    }

    /**
     * Get GRXSTSP_DEVICEMODE's ChNum field.
     */
    inline uint8_t get_GRXSTSP_HOSTMODE_ChNum() volatile
    {
        return (GRXSTSP_HOSTMODE >> 0u) & 0b1111u;
    }

    /**
     * Get all of GRXSTSP_HOSTMODE's bit fields.
     */
    inline void get_GRXSTSP_HOSTMODE(USB0_GRXSTSR_HOSTMODE_PktSts &PktSts,
                                     USB0_GRXSTSR_HOSTMODE_DPID &DPID,
                                     uint16_t &BCnt, uint8_t &ChNum) volatile
    {
        uint32_t curr = GRXSTSP_HOSTMODE;

        PktSts = USB0_GRXSTSR_HOSTMODE_PktSts((curr >> 17u) & 0b1111u);
        DPID = USB0_GRXSTSR_HOSTMODE_DPID((curr >> 15u) & 0b11u);
        BCnt = (curr >> 4u) & 0b11111111111u;
        ChNum = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get GRXFSIZ's RxFDep field.
     */
    inline uint16_t get_GRXFSIZ_RxFDep() volatile
    {
        return (GRXFSIZ >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GRXFSIZ's RxFDep field.
     */
    inline void set_GRXFSIZ_RxFDep(uint16_t value) volatile
    {
        uint32_t curr = GRXFSIZ;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GRXFSIZ = curr;
    }

    /**
     * Get GNPTXFSIZ_HOSTMODE's NPTxFDep field.
     */
    inline uint16_t get_GNPTXFSIZ_HOSTMODE_NPTxFDep() volatile
    {
        return (GNPTXFSIZ_HOSTMODE >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GNPTXFSIZ_HOSTMODE's NPTxFDep field.
     */
    inline void set_GNPTXFSIZ_HOSTMODE_NPTxFDep(uint16_t value) volatile
    {
        uint32_t curr = GNPTXFSIZ_HOSTMODE;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GNPTXFSIZ_HOSTMODE = curr;
    }

    /**
     * Get GNPTXFSIZ_HOSTMODE's NPTxFStAddr field.
     */
    inline uint16_t get_GNPTXFSIZ_HOSTMODE_NPTxFStAddr() volatile
    {
        return (GNPTXFSIZ_HOSTMODE >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GNPTXFSIZ_HOSTMODE's NPTxFStAddr field.
     */
    inline void set_GNPTXFSIZ_HOSTMODE_NPTxFStAddr(uint16_t value) volatile
    {
        uint32_t curr = GNPTXFSIZ_HOSTMODE;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GNPTXFSIZ_HOSTMODE = curr;
    }

    /**
     * Get all of GNPTXFSIZ_HOSTMODE's bit fields.
     */
    inline void get_GNPTXFSIZ_HOSTMODE(uint16_t &NPTxFDep,
                                       uint16_t &NPTxFStAddr) volatile
    {
        uint32_t curr = GNPTXFSIZ_HOSTMODE;

        NPTxFDep = (curr >> 16u) & 0b1111111111111111u;
        NPTxFStAddr = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of GNPTXFSIZ_HOSTMODE's bit fields.
     */
    inline void set_GNPTXFSIZ_HOSTMODE(uint16_t NPTxFDep,
                                       uint16_t NPTxFStAddr) volatile
    {
        uint32_t curr = GNPTXFSIZ_HOSTMODE;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (NPTxFDep & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (NPTxFStAddr & 0b1111111111111111u) << 0u;

        GNPTXFSIZ_HOSTMODE = curr;
    }

    /**
     * Get GNPTXFSIZ_HOSTMODE's INEPTxF0Dep field.
     */
    inline uint16_t get_GNPTXFSIZ_DEVICEMODE_INEPTxF0Dep() volatile
    {
        return (GNPTXFSIZ_DEVICEMODE >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GNPTXFSIZ_HOSTMODE's INEPTxF0Dep field.
     */
    inline void set_GNPTXFSIZ_DEVICEMODE_INEPTxF0Dep(uint16_t value) volatile
    {
        uint32_t curr = GNPTXFSIZ_DEVICEMODE;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GNPTXFSIZ_DEVICEMODE = curr;
    }

    /**
     * Get GNPTXFSIZ_HOSTMODE's INEPTxF0StAddr field.
     */
    inline uint16_t get_GNPTXFSIZ_DEVICEMODE_INEPTxF0StAddr() volatile
    {
        return (GNPTXFSIZ_DEVICEMODE >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GNPTXFSIZ_HOSTMODE's INEPTxF0StAddr field.
     */
    inline void set_GNPTXFSIZ_DEVICEMODE_INEPTxF0StAddr(
        uint16_t value) volatile
    {
        uint32_t curr = GNPTXFSIZ_DEVICEMODE;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GNPTXFSIZ_DEVICEMODE = curr;
    }

    /**
     * Get all of GNPTXFSIZ_DEVICEMODE's bit fields.
     */
    inline void get_GNPTXFSIZ_DEVICEMODE(uint16_t &INEPTxF0Dep,
                                         uint16_t &INEPTxF0StAddr) volatile
    {
        uint32_t curr = GNPTXFSIZ_DEVICEMODE;

        INEPTxF0Dep = (curr >> 16u) & 0b1111111111111111u;
        INEPTxF0StAddr = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of GNPTXFSIZ_DEVICEMODE's bit fields.
     */
    inline void set_GNPTXFSIZ_DEVICEMODE(uint16_t INEPTxF0Dep,
                                         uint16_t INEPTxF0StAddr) volatile
    {
        uint32_t curr = GNPTXFSIZ_DEVICEMODE;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (INEPTxF0Dep & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INEPTxF0StAddr & 0b1111111111111111u) << 0u;

        GNPTXFSIZ_DEVICEMODE = curr;
    }

    /**
     * Get GNPTXSTS's NPTxQTop field.
     */
    inline USB0_GNPTXSTS_NPTxQTop get_GNPTXSTS_NPTxQTop() volatile
    {
        return USB0_GNPTXSTS_NPTxQTop((GNPTXSTS >> 24u) & 0b1111111u);
    }

    /**
     * Get GNPTXSTS's NPTxQSpcAvail field.
     */
    inline USB0_GNPTXSTS_NPTxQSpcAvail get_GNPTXSTS_NPTxQSpcAvail() volatile
    {
        return USB0_GNPTXSTS_NPTxQSpcAvail((GNPTXSTS >> 16u) & 0b11111111u);
    }

    /**
     * Get GNPTXSTS's NPTxFSpcAvail field.
     */
    inline USB0_GNPTXSTS_NPTxFSpcAvail get_GNPTXSTS_NPTxFSpcAvail() volatile
    {
        return USB0_GNPTXSTS_NPTxFSpcAvail((GNPTXSTS >> 0u) &
                                           0b1111111111111111u);
    }

    /**
     * Get all of GNPTXSTS's bit fields.
     */
    inline void get_GNPTXSTS(
        USB0_GNPTXSTS_NPTxQTop &NPTxQTop,
        USB0_GNPTXSTS_NPTxQSpcAvail &NPTxQSpcAvail,
        USB0_GNPTXSTS_NPTxFSpcAvail &NPTxFSpcAvail) volatile
    {
        uint32_t curr = GNPTXSTS;

        NPTxQTop = USB0_GNPTXSTS_NPTxQTop((curr >> 24u) & 0b1111111u);
        NPTxQSpcAvail =
            USB0_GNPTXSTS_NPTxQSpcAvail((curr >> 16u) & 0b11111111u);
        NPTxFSpcAvail =
            USB0_GNPTXSTS_NPTxFSpcAvail((curr >> 0u) & 0b1111111111111111u);
    }

    /**
     * Get GUID's MOD_NUMBER field.
     */
    inline uint16_t get_GUID_MOD_NUMBER() volatile
    {
        return (GUID >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GUID's MOD_NUMBER field.
     */
    inline void set_GUID_MOD_NUMBER(uint16_t value) volatile
    {
        uint32_t curr = GUID;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GUID = curr;
    }

    /**
     * Get GUID's MOD_TYPE field.
     */
    inline uint8_t get_GUID_MOD_TYPE() volatile
    {
        return (GUID >> 8u) & 0b11111111u;
    }

    /**
     * Set GUID's MOD_TYPE field.
     */
    inline void set_GUID_MOD_TYPE(uint8_t value) volatile
    {
        uint32_t curr = GUID;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        GUID = curr;
    }

    /**
     * Get GUID's MOD_REV field.
     */
    inline uint8_t get_GUID_MOD_REV() volatile
    {
        return (GUID >> 0u) & 0b11111111u;
    }

    /**
     * Set GUID's MOD_REV field.
     */
    inline void set_GUID_MOD_REV(uint8_t value) volatile
    {
        uint32_t curr = GUID;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        GUID = curr;
    }

    /**
     * Get all of GUID's bit fields.
     */
    inline void get_GUID(uint16_t &MOD_NUMBER, uint8_t &MOD_TYPE,
                         uint8_t &MOD_REV) volatile
    {
        uint32_t curr = GUID;

        MOD_NUMBER = (curr >> 16u) & 0b1111111111111111u;
        MOD_TYPE = (curr >> 8u) & 0b11111111u;
        MOD_REV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of GUID's bit fields.
     */
    inline void set_GUID(uint16_t MOD_NUMBER, uint8_t MOD_TYPE,
                         uint8_t MOD_REV) volatile
    {
        uint32_t curr = GUID;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (MOD_NUMBER & 0b1111111111111111u) << 16u;
        curr &= ~(0b11111111u << 8u);
        curr |= (MOD_TYPE & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (MOD_REV & 0b11111111u) << 0u;

        GUID = curr;
    }

    /**
     * Get GDFIFOCFG's EPInfoBaseAddr field.
     */
    inline uint16_t get_GDFIFOCFG_EPInfoBaseAddr() volatile
    {
        return (GDFIFOCFG >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GDFIFOCFG's EPInfoBaseAddr field.
     */
    inline void set_GDFIFOCFG_EPInfoBaseAddr(uint16_t value) volatile
    {
        uint32_t curr = GDFIFOCFG;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GDFIFOCFG = curr;
    }

    /**
     * Get GDFIFOCFG's GDFIFOCfg field.
     */
    inline uint16_t get_GDFIFOCFG_GDFIFOCfg() volatile
    {
        return (GDFIFOCFG >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GDFIFOCFG's GDFIFOCfg field.
     */
    inline void set_GDFIFOCFG_GDFIFOCfg(uint16_t value) volatile
    {
        uint32_t curr = GDFIFOCFG;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GDFIFOCFG = curr;
    }

    /**
     * Get all of GDFIFOCFG's bit fields.
     */
    inline void get_GDFIFOCFG(uint16_t &EPInfoBaseAddr,
                              uint16_t &GDFIFOCfg) volatile
    {
        uint32_t curr = GDFIFOCFG;

        EPInfoBaseAddr = (curr >> 16u) & 0b1111111111111111u;
        GDFIFOCfg = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of GDFIFOCFG's bit fields.
     */
    inline void set_GDFIFOCFG(uint16_t EPInfoBaseAddr,
                              uint16_t GDFIFOCfg) volatile
    {
        uint32_t curr = GDFIFOCFG;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (EPInfoBaseAddr & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (GDFIFOCfg & 0b1111111111111111u) << 0u;

        GDFIFOCFG = curr;
    }

    /**
     * Get HPTXFSIZ's PTxFSize field.
     */
    inline uint16_t get_HPTXFSIZ_PTxFSize() volatile
    {
        return (HPTXFSIZ >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set HPTXFSIZ's PTxFSize field.
     */
    inline void set_HPTXFSIZ_PTxFSize(uint16_t value) volatile
    {
        uint32_t curr = HPTXFSIZ;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        HPTXFSIZ = curr;
    }

    /**
     * Get HPTXFSIZ's PTxFStAddr field.
     */
    inline uint16_t get_HPTXFSIZ_PTxFStAddr() volatile
    {
        return (HPTXFSIZ >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set HPTXFSIZ's PTxFStAddr field.
     */
    inline void set_HPTXFSIZ_PTxFStAddr(uint16_t value) volatile
    {
        uint32_t curr = HPTXFSIZ;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        HPTXFSIZ = curr;
    }

    /**
     * Get all of HPTXFSIZ's bit fields.
     */
    inline void get_HPTXFSIZ(uint16_t &PTxFSize, uint16_t &PTxFStAddr) volatile
    {
        uint32_t curr = HPTXFSIZ;

        PTxFSize = (curr >> 16u) & 0b1111111111111111u;
        PTxFStAddr = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of HPTXFSIZ's bit fields.
     */
    inline void set_HPTXFSIZ(uint16_t PTxFSize, uint16_t PTxFStAddr) volatile
    {
        uint32_t curr = HPTXFSIZ;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (PTxFSize & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (PTxFStAddr & 0b1111111111111111u) << 0u;

        HPTXFSIZ = curr;
    }

    /**
     * Get DIEPTXF1's INEPnTxFDep field.
     */
    inline uint16_t get_DIEPTXF1_INEPnTxFDep() volatile
    {
        return (DIEPTXF1 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF1's INEPnTxFDep field.
     */
    inline void set_DIEPTXF1_INEPnTxFDep(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF1;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF1 = curr;
    }

    /**
     * Get DIEPTXF1's INEPnTxFStAddr field.
     */
    inline uint16_t get_DIEPTXF1_INEPnTxFStAddr() volatile
    {
        return (DIEPTXF1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF1's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF1_INEPnTxFStAddr(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF1;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF1 = curr;
    }

    /**
     * Get all of DIEPTXF1's bit fields.
     */
    inline void get_DIEPTXF1(uint16_t &INEPnTxFDep,
                             uint16_t &INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF1;

        INEPnTxFDep = (curr >> 16u) & 0b1111111111111111u;
        INEPnTxFStAddr = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of DIEPTXF1's bit fields.
     */
    inline void set_DIEPTXF1(uint16_t INEPnTxFDep,
                             uint16_t INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF1;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (INEPnTxFDep & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INEPnTxFStAddr & 0b1111111111111111u) << 0u;

        DIEPTXF1 = curr;
    }

    /**
     * Get DIEPTXF2's INEPnTxFDep field.
     */
    inline uint16_t get_DIEPTXF2_INEPnTxFDep() volatile
    {
        return (DIEPTXF2 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF2's INEPnTxFDep field.
     */
    inline void set_DIEPTXF2_INEPnTxFDep(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF2;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF2 = curr;
    }

    /**
     * Get DIEPTXF2's INEPnTxFStAddr field.
     */
    inline uint16_t get_DIEPTXF2_INEPnTxFStAddr() volatile
    {
        return (DIEPTXF2 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF2's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF2_INEPnTxFStAddr(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF2;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF2 = curr;
    }

    /**
     * Get all of DIEPTXF2's bit fields.
     */
    inline void get_DIEPTXF2(uint16_t &INEPnTxFDep,
                             uint16_t &INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF2;

        INEPnTxFDep = (curr >> 16u) & 0b1111111111111111u;
        INEPnTxFStAddr = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of DIEPTXF2's bit fields.
     */
    inline void set_DIEPTXF2(uint16_t INEPnTxFDep,
                             uint16_t INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF2;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (INEPnTxFDep & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INEPnTxFStAddr & 0b1111111111111111u) << 0u;

        DIEPTXF2 = curr;
    }

    /**
     * Get DIEPTXF3's INEPnTxFDep field.
     */
    inline uint16_t get_DIEPTXF3_INEPnTxFDep() volatile
    {
        return (DIEPTXF3 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF3's INEPnTxFDep field.
     */
    inline void set_DIEPTXF3_INEPnTxFDep(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF3;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF3 = curr;
    }

    /**
     * Get DIEPTXF3's INEPnTxFStAddr field.
     */
    inline uint16_t get_DIEPTXF3_INEPnTxFStAddr() volatile
    {
        return (DIEPTXF3 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF3's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF3_INEPnTxFStAddr(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF3;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF3 = curr;
    }

    /**
     * Get all of DIEPTXF3's bit fields.
     */
    inline void get_DIEPTXF3(uint16_t &INEPnTxFDep,
                             uint16_t &INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF3;

        INEPnTxFDep = (curr >> 16u) & 0b1111111111111111u;
        INEPnTxFStAddr = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of DIEPTXF3's bit fields.
     */
    inline void set_DIEPTXF3(uint16_t INEPnTxFDep,
                             uint16_t INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF3;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (INEPnTxFDep & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INEPnTxFStAddr & 0b1111111111111111u) << 0u;

        DIEPTXF3 = curr;
    }

    /**
     * Get DIEPTXF4's INEPnTxFDep field.
     */
    inline uint16_t get_DIEPTXF4_INEPnTxFDep() volatile
    {
        return (DIEPTXF4 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF4's INEPnTxFDep field.
     */
    inline void set_DIEPTXF4_INEPnTxFDep(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF4;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF4 = curr;
    }

    /**
     * Get DIEPTXF4's INEPnTxFStAddr field.
     */
    inline uint16_t get_DIEPTXF4_INEPnTxFStAddr() volatile
    {
        return (DIEPTXF4 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF4's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF4_INEPnTxFStAddr(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF4;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF4 = curr;
    }

    /**
     * Get all of DIEPTXF4's bit fields.
     */
    inline void get_DIEPTXF4(uint16_t &INEPnTxFDep,
                             uint16_t &INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF4;

        INEPnTxFDep = (curr >> 16u) & 0b1111111111111111u;
        INEPnTxFStAddr = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of DIEPTXF4's bit fields.
     */
    inline void set_DIEPTXF4(uint16_t INEPnTxFDep,
                             uint16_t INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF4;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (INEPnTxFDep & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INEPnTxFStAddr & 0b1111111111111111u) << 0u;

        DIEPTXF4 = curr;
    }

    /**
     * Get DIEPTXF5's INEPnTxFDep field.
     */
    inline uint16_t get_DIEPTXF5_INEPnTxFDep() volatile
    {
        return (DIEPTXF5 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF5's INEPnTxFDep field.
     */
    inline void set_DIEPTXF5_INEPnTxFDep(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF5;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF5 = curr;
    }

    /**
     * Get DIEPTXF5's INEPnTxFStAddr field.
     */
    inline uint16_t get_DIEPTXF5_INEPnTxFStAddr() volatile
    {
        return (DIEPTXF5 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF5's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF5_INEPnTxFStAddr(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF5;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF5 = curr;
    }

    /**
     * Get all of DIEPTXF5's bit fields.
     */
    inline void get_DIEPTXF5(uint16_t &INEPnTxFDep,
                             uint16_t &INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF5;

        INEPnTxFDep = (curr >> 16u) & 0b1111111111111111u;
        INEPnTxFStAddr = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of DIEPTXF5's bit fields.
     */
    inline void set_DIEPTXF5(uint16_t INEPnTxFDep,
                             uint16_t INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF5;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (INEPnTxFDep & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INEPnTxFStAddr & 0b1111111111111111u) << 0u;

        DIEPTXF5 = curr;
    }

    /**
     * Get DIEPTXF6's INEPnTxFDep field.
     */
    inline uint16_t get_DIEPTXF6_INEPnTxFDep() volatile
    {
        return (DIEPTXF6 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF6's INEPnTxFDep field.
     */
    inline void set_DIEPTXF6_INEPnTxFDep(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF6;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DIEPTXF6 = curr;
    }

    /**
     * Get DIEPTXF6's INEPnTxFStAddr field.
     */
    inline uint16_t get_DIEPTXF6_INEPnTxFStAddr() volatile
    {
        return (DIEPTXF6 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPTXF6's INEPnTxFStAddr field.
     */
    inline void set_DIEPTXF6_INEPnTxFStAddr(uint16_t value) volatile
    {
        uint32_t curr = DIEPTXF6;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPTXF6 = curr;
    }

    /**
     * Get all of DIEPTXF6's bit fields.
     */
    inline void get_DIEPTXF6(uint16_t &INEPnTxFDep,
                             uint16_t &INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF6;

        INEPnTxFDep = (curr >> 16u) & 0b1111111111111111u;
        INEPnTxFStAddr = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of DIEPTXF6's bit fields.
     */
    inline void set_DIEPTXF6(uint16_t INEPnTxFDep,
                             uint16_t INEPnTxFStAddr) volatile
    {
        uint32_t curr = DIEPTXF6;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (INEPnTxFDep & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (INEPnTxFStAddr & 0b1111111111111111u) << 0u;

        DIEPTXF6 = curr;
    }

    /**
     * Get HCFG's PerSchedEna bit.
     */
    inline bool get_HCFG_PerSchedEna() volatile
    {
        return HCFG & (1u << 26u);
    }

    /**
     * Set HCFG's PerSchedEna bit.
     */
    inline void set_HCFG_PerSchedEna() volatile
    {
        HCFG |= 1u << 26u;
    }

    /**
     * Clear HCFG's PerSchedEna bit.
     */
    inline void clear_HCFG_PerSchedEna() volatile
    {
        HCFG &= ~(1u << 26u);
    }

    /**
     * Toggle HCFG's PerSchedEna bit.
     */
    inline void toggle_HCFG_PerSchedEna() volatile
    {
        HCFG ^= 1u << 26u;
    }

    /**
     * Get HCFG's FrListEn field.
     */
    inline USB0_HCFG_FrListEn get_HCFG_FrListEn() volatile
    {
        return USB0_HCFG_FrListEn((HCFG >> 24u) & 0b11u);
    }

    /**
     * Set HCFG's FrListEn field.
     */
    inline void set_HCFG_FrListEn(USB0_HCFG_FrListEn value) volatile
    {
        uint32_t curr = HCFG;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        HCFG = curr;
    }

    /**
     * Get HCFG's DescDMA bit.
     */
    inline bool get_HCFG_DescDMA() volatile
    {
        return HCFG & (1u << 23u);
    }

    /**
     * Set HCFG's DescDMA bit.
     */
    inline void set_HCFG_DescDMA() volatile
    {
        HCFG |= 1u << 23u;
    }

    /**
     * Clear HCFG's DescDMA bit.
     */
    inline void clear_HCFG_DescDMA() volatile
    {
        HCFG &= ~(1u << 23u);
    }

    /**
     * Toggle HCFG's DescDMA bit.
     */
    inline void toggle_HCFG_DescDMA() volatile
    {
        HCFG ^= 1u << 23u;
    }

    /**
     * Get HCFG's FSLSSupp bit.
     */
    inline USB0_HCFG_FSLSSupp get_HCFG_FSLSSupp() volatile
    {
        return USB0_HCFG_FSLSSupp(HCFG & (1u << 2u));
    }

    /**
     * Set HCFG's FSLSSupp bit.
     */
    inline void set_HCFG_FSLSSupp() volatile
    {
        HCFG |= 1u << 2u;
    }

    /**
     * Clear HCFG's FSLSSupp bit.
     */
    inline void clear_HCFG_FSLSSupp() volatile
    {
        HCFG &= ~(1u << 2u);
    }

    /**
     * Toggle HCFG's FSLSSupp bit.
     */
    inline void toggle_HCFG_FSLSSupp() volatile
    {
        HCFG ^= 1u << 2u;
    }

    /**
     * Get HCFG's FSLSPclkSel field.
     */
    inline USB0_HCFG_FSLSPclkSel get_HCFG_FSLSPclkSel() volatile
    {
        return USB0_HCFG_FSLSPclkSel((HCFG >> 0u) & 0b11u);
    }

    /**
     * Set HCFG's FSLSPclkSel field.
     */
    inline void set_HCFG_FSLSPclkSel(USB0_HCFG_FSLSPclkSel value) volatile
    {
        uint32_t curr = HCFG;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        HCFG = curr;
    }

    /**
     * Get all of HCFG's bit fields.
     */
    inline void get_HCFG(bool &PerSchedEna, USB0_HCFG_FrListEn &FrListEn,
                         bool &DescDMA, USB0_HCFG_FSLSSupp &FSLSSupp,
                         USB0_HCFG_FSLSPclkSel &FSLSPclkSel) volatile
    {
        uint32_t curr = HCFG;

        PerSchedEna = curr & (1u << 26u);
        FrListEn = USB0_HCFG_FrListEn((curr >> 24u) & 0b11u);
        DescDMA = curr & (1u << 23u);
        FSLSSupp = USB0_HCFG_FSLSSupp(curr & (1u << 2u));
        FSLSPclkSel = USB0_HCFG_FSLSPclkSel((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of HCFG's bit fields.
     */
    inline void set_HCFG(bool PerSchedEna, USB0_HCFG_FrListEn FrListEn,
                         bool DescDMA, USB0_HCFG_FSLSSupp FSLSSupp,
                         USB0_HCFG_FSLSPclkSel FSLSPclkSel) volatile
    {
        uint32_t curr = HCFG;

        curr &= ~(0b1u << 26u);
        curr |= (PerSchedEna & 0b1u) << 26u;
        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(FrListEn) & 0b11u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (DescDMA & 0b1u) << 23u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(FSLSSupp) & 0b1u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(FSLSPclkSel) & 0b11u) << 0u;

        HCFG = curr;
    }

    /**
     * Get HFIR's HFIRRldCtrl bit.
     */
    inline USB0_HFIR_HFIRRldCtrl get_HFIR_HFIRRldCtrl() volatile
    {
        return USB0_HFIR_HFIRRldCtrl(HFIR & (1u << 16u));
    }

    /**
     * Set HFIR's HFIRRldCtrl bit.
     */
    inline void set_HFIR_HFIRRldCtrl() volatile
    {
        HFIR |= 1u << 16u;
    }

    /**
     * Clear HFIR's HFIRRldCtrl bit.
     */
    inline void clear_HFIR_HFIRRldCtrl() volatile
    {
        HFIR &= ~(1u << 16u);
    }

    /**
     * Toggle HFIR's HFIRRldCtrl bit.
     */
    inline void toggle_HFIR_HFIRRldCtrl() volatile
    {
        HFIR ^= 1u << 16u;
    }

    /**
     * Get HFIR's FrInt field.
     */
    inline uint16_t get_HFIR_FrInt() volatile
    {
        return (HFIR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set HFIR's FrInt field.
     */
    inline void set_HFIR_FrInt(uint16_t value) volatile
    {
        uint32_t curr = HFIR;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        HFIR = curr;
    }

    /**
     * Get all of HFIR's bit fields.
     */
    inline void get_HFIR(USB0_HFIR_HFIRRldCtrl &HFIRRldCtrl,
                         uint16_t &FrInt) volatile
    {
        uint32_t curr = HFIR;

        HFIRRldCtrl = USB0_HFIR_HFIRRldCtrl(curr & (1u << 16u));
        FrInt = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of HFIR's bit fields.
     */
    inline void set_HFIR(USB0_HFIR_HFIRRldCtrl HFIRRldCtrl,
                         uint16_t FrInt) volatile
    {
        uint32_t curr = HFIR;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(HFIRRldCtrl) & 0b1u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (FrInt & 0b1111111111111111u) << 0u;

        HFIR = curr;
    }

    /**
     * Get HFNUM's FrRem field.
     */
    inline uint16_t get_HFNUM_FrRem() volatile
    {
        return (HFNUM >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get HFNUM's FrNum field.
     */
    inline uint16_t get_HFNUM_FrNum() volatile
    {
        return (HFNUM >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set HFNUM's FrNum field.
     */
    inline void set_HFNUM_FrNum(uint16_t value) volatile
    {
        uint32_t curr = HFNUM;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        HFNUM = curr;
    }

    /**
     * Get all of HFNUM's bit fields.
     */
    inline void get_HFNUM(uint16_t &FrRem, uint16_t &FrNum) volatile
    {
        uint32_t curr = HFNUM;

        FrRem = (curr >> 16u) & 0b1111111111111111u;
        FrNum = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get HPTXSTS's PTxQTop field.
     */
    inline uint8_t get_HPTXSTS_PTxQTop() volatile
    {
        return (HPTXSTS >> 24u) & 0b11111111u;
    }

    /**
     * Get HPTXSTS's PTxQSpcAvail field.
     */
    inline USB0_HPTXSTS_PTxQSpcAvail get_HPTXSTS_PTxQSpcAvail() volatile
    {
        return USB0_HPTXSTS_PTxQSpcAvail((HPTXSTS >> 16u) & 0b11111111u);
    }

    /**
     * Get HPTXSTS's PTxFSpcAvail field.
     */
    inline USB0_HPTXSTS_PTxFSpcAvail get_HPTXSTS_PTxFSpcAvail() volatile
    {
        return USB0_HPTXSTS_PTxFSpcAvail((HPTXSTS >> 0u) &
                                         0b1111111111111111u);
    }

    /**
     * Set HPTXSTS's PTxFSpcAvail field.
     */
    inline void set_HPTXSTS_PTxFSpcAvail(
        USB0_HPTXSTS_PTxFSpcAvail value) volatile
    {
        uint32_t curr = HPTXSTS;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111111111111111u) << 0u;

        HPTXSTS = curr;
    }

    /**
     * Get all of HPTXSTS's bit fields.
     */
    inline void get_HPTXSTS(uint8_t &PTxQTop,
                            USB0_HPTXSTS_PTxQSpcAvail &PTxQSpcAvail,
                            USB0_HPTXSTS_PTxFSpcAvail &PTxFSpcAvail) volatile
    {
        uint32_t curr = HPTXSTS;

        PTxQTop = (curr >> 24u) & 0b11111111u;
        PTxQSpcAvail = USB0_HPTXSTS_PTxQSpcAvail((curr >> 16u) & 0b11111111u);
        PTxFSpcAvail =
            USB0_HPTXSTS_PTxFSpcAvail((curr >> 0u) & 0b1111111111111111u);
    }

    /**
     * Get HAINT's HAINT field.
     */
    inline uint16_t get_HAINT_HAINT() volatile
    {
        return (HAINT >> 0u) & 0b11111111111111u;
    }

    /**
     * Get HAINTMSK's HAINTMsk field.
     */
    inline uint16_t get_HAINTMSK_HAINTMsk() volatile
    {
        return (HAINTMSK >> 0u) & 0b11111111111111u;
    }

    /**
     * Set HAINTMSK's HAINTMsk field.
     */
    inline void set_HAINTMSK_HAINTMsk(uint16_t value) volatile
    {
        uint32_t curr = HAINTMSK;

        curr &= ~(0b11111111111111u << 0u);
        curr |= (value & 0b11111111111111u) << 0u;

        HAINTMSK = curr;
    }

    /**
     * Get HFLBADDR's Starting_Address field.
     */
    inline uint32_t get_HFLBADDR_Starting_Address() volatile
    {
        return (HFLBADDR >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set HFLBADDR's Starting_Address field.
     */
    inline void set_HFLBADDR_Starting_Address(uint32_t value) volatile
    {
        uint32_t curr = HFLBADDR;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        HFLBADDR = curr;
    }

    /**
     * Get HPRT's PrtSpd field.
     */
    inline USB0_HPRT_PrtSpd get_HPRT_PrtSpd() volatile
    {
        return USB0_HPRT_PrtSpd((HPRT >> 17u) & 0b11u);
    }

    /**
     * Get HPRT's PrtPwr bit.
     */
    inline USB0_HPRT_PrtPwr get_HPRT_PrtPwr() volatile
    {
        return USB0_HPRT_PrtPwr(HPRT & (1u << 12u));
    }

    /**
     * Set HPRT's PrtPwr bit.
     */
    inline void set_HPRT_PrtPwr() volatile
    {
        HPRT |= 1u << 12u;
    }

    /**
     * Clear HPRT's PrtPwr bit.
     */
    inline void clear_HPRT_PrtPwr() volatile
    {
        HPRT &= ~(1u << 12u);
    }

    /**
     * Toggle HPRT's PrtPwr bit.
     */
    inline void toggle_HPRT_PrtPwr() volatile
    {
        HPRT ^= 1u << 12u;
    }

    /**
     * Get HPRT's PrtLnSts field.
     */
    inline uint8_t get_HPRT_PrtLnSts() volatile
    {
        return (HPRT >> 10u) & 0b11u;
    }

    /**
     * Get HPRT's PrtRst bit.
     */
    inline USB0_HPRT_PrtRst get_HPRT_PrtRst() volatile
    {
        return USB0_HPRT_PrtRst(HPRT & (1u << 8u));
    }

    /**
     * Set HPRT's PrtRst bit.
     */
    inline void set_HPRT_PrtRst() volatile
    {
        HPRT |= 1u << 8u;
    }

    /**
     * Clear HPRT's PrtRst bit.
     */
    inline void clear_HPRT_PrtRst() volatile
    {
        HPRT &= ~(1u << 8u);
    }

    /**
     * Toggle HPRT's PrtRst bit.
     */
    inline void toggle_HPRT_PrtRst() volatile
    {
        HPRT ^= 1u << 8u;
    }

    /**
     * Get HPRT's PrtSusp bit.
     */
    inline USB0_HPRT_PrtSusp get_HPRT_PrtSusp() volatile
    {
        return USB0_HPRT_PrtSusp(HPRT & (1u << 7u));
    }

    /**
     * Set HPRT's PrtSusp bit.
     */
    inline void set_HPRT_PrtSusp() volatile
    {
        HPRT |= 1u << 7u;
    }

    /**
     * Clear HPRT's PrtSusp bit.
     */
    inline void clear_HPRT_PrtSusp() volatile
    {
        HPRT &= ~(1u << 7u);
    }

    /**
     * Toggle HPRT's PrtSusp bit.
     */
    inline void toggle_HPRT_PrtSusp() volatile
    {
        HPRT ^= 1u << 7u;
    }

    /**
     * Get HPRT's PrtRes bit.
     */
    inline USB0_HPRT_PrtRes get_HPRT_PrtRes() volatile
    {
        return USB0_HPRT_PrtRes(HPRT & (1u << 6u));
    }

    /**
     * Set HPRT's PrtRes bit.
     */
    inline void set_HPRT_PrtRes() volatile
    {
        HPRT |= 1u << 6u;
    }

    /**
     * Clear HPRT's PrtRes bit.
     */
    inline void clear_HPRT_PrtRes() volatile
    {
        HPRT &= ~(1u << 6u);
    }

    /**
     * Toggle HPRT's PrtRes bit.
     */
    inline void toggle_HPRT_PrtRes() volatile
    {
        HPRT ^= 1u << 6u;
    }

    /**
     * Get HPRT's PrtOvrCurrChng bit.
     */
    inline bool get_HPRT_PrtOvrCurrChng() volatile
    {
        return HPRT & (1u << 5u);
    }

    /**
     * Set HPRT's PrtOvrCurrChng bit.
     */
    inline void set_HPRT_PrtOvrCurrChng() volatile
    {
        HPRT |= 1u << 5u;
    }

    /**
     * Clear HPRT's PrtOvrCurrChng bit.
     */
    inline void clear_HPRT_PrtOvrCurrChng() volatile
    {
        HPRT &= ~(1u << 5u);
    }

    /**
     * Toggle HPRT's PrtOvrCurrChng bit.
     */
    inline void toggle_HPRT_PrtOvrCurrChng() volatile
    {
        HPRT ^= 1u << 5u;
    }

    /**
     * Get HPRT's PrtOvrCurrAct bit.
     */
    inline USB0_HPRT_PrtOvrCurrAct get_HPRT_PrtOvrCurrAct() volatile
    {
        return USB0_HPRT_PrtOvrCurrAct(HPRT & (1u << 4u));
    }

    /**
     * Get HPRT's PrtEnChng bit.
     */
    inline bool get_HPRT_PrtEnChng() volatile
    {
        return HPRT & (1u << 3u);
    }

    /**
     * Set HPRT's PrtEnChng bit.
     */
    inline void set_HPRT_PrtEnChng() volatile
    {
        HPRT |= 1u << 3u;
    }

    /**
     * Clear HPRT's PrtEnChng bit.
     */
    inline void clear_HPRT_PrtEnChng() volatile
    {
        HPRT &= ~(1u << 3u);
    }

    /**
     * Toggle HPRT's PrtEnChng bit.
     */
    inline void toggle_HPRT_PrtEnChng() volatile
    {
        HPRT ^= 1u << 3u;
    }

    /**
     * Get HPRT's PrtEna bit.
     */
    inline USB0_HPRT_PrtEna get_HPRT_PrtEna() volatile
    {
        return USB0_HPRT_PrtEna(HPRT & (1u << 2u));
    }

    /**
     * Set HPRT's PrtEna bit.
     */
    inline void set_HPRT_PrtEna() volatile
    {
        HPRT |= 1u << 2u;
    }

    /**
     * Clear HPRT's PrtEna bit.
     */
    inline void clear_HPRT_PrtEna() volatile
    {
        HPRT &= ~(1u << 2u);
    }

    /**
     * Toggle HPRT's PrtEna bit.
     */
    inline void toggle_HPRT_PrtEna() volatile
    {
        HPRT ^= 1u << 2u;
    }

    /**
     * Get HPRT's PrtConnDet bit.
     */
    inline bool get_HPRT_PrtConnDet() volatile
    {
        return HPRT & (1u << 1u);
    }

    /**
     * Set HPRT's PrtConnDet bit.
     */
    inline void set_HPRT_PrtConnDet() volatile
    {
        HPRT |= 1u << 1u;
    }

    /**
     * Clear HPRT's PrtConnDet bit.
     */
    inline void clear_HPRT_PrtConnDet() volatile
    {
        HPRT &= ~(1u << 1u);
    }

    /**
     * Toggle HPRT's PrtConnDet bit.
     */
    inline void toggle_HPRT_PrtConnDet() volatile
    {
        HPRT ^= 1u << 1u;
    }

    /**
     * Get HPRT's PrtConnSts bit.
     */
    inline USB0_HPRT_PrtConnSts get_HPRT_PrtConnSts() volatile
    {
        return USB0_HPRT_PrtConnSts(HPRT & (1u << 0u));
    }

    /**
     * Get all of HPRT's bit fields.
     */
    inline void get_HPRT(USB0_HPRT_PrtSpd &PrtSpd, USB0_HPRT_PrtPwr &PrtPwr,
                         uint8_t &PrtLnSts, USB0_HPRT_PrtRst &PrtRst,
                         USB0_HPRT_PrtSusp &PrtSusp, USB0_HPRT_PrtRes &PrtRes,
                         bool &PrtOvrCurrChng,
                         USB0_HPRT_PrtOvrCurrAct &PrtOvrCurrAct,
                         bool &PrtEnChng, USB0_HPRT_PrtEna &PrtEna,
                         bool &PrtConnDet,
                         USB0_HPRT_PrtConnSts &PrtConnSts) volatile
    {
        uint32_t curr = HPRT;

        PrtSpd = USB0_HPRT_PrtSpd((curr >> 17u) & 0b11u);
        PrtPwr = USB0_HPRT_PrtPwr(curr & (1u << 12u));
        PrtLnSts = (curr >> 10u) & 0b11u;
        PrtRst = USB0_HPRT_PrtRst(curr & (1u << 8u));
        PrtSusp = USB0_HPRT_PrtSusp(curr & (1u << 7u));
        PrtRes = USB0_HPRT_PrtRes(curr & (1u << 6u));
        PrtOvrCurrChng = curr & (1u << 5u);
        PrtOvrCurrAct = USB0_HPRT_PrtOvrCurrAct(curr & (1u << 4u));
        PrtEnChng = curr & (1u << 3u);
        PrtEna = USB0_HPRT_PrtEna(curr & (1u << 2u));
        PrtConnDet = curr & (1u << 1u);
        PrtConnSts = USB0_HPRT_PrtConnSts(curr & (1u << 0u));
    }

    /**
     * Set all of HPRT's bit fields.
     */
    inline void set_HPRT(USB0_HPRT_PrtPwr PrtPwr, USB0_HPRT_PrtRst PrtRst,
                         USB0_HPRT_PrtSusp PrtSusp, USB0_HPRT_PrtRes PrtRes,
                         bool PrtOvrCurrChng, bool PrtEnChng,
                         USB0_HPRT_PrtEna PrtEna, bool PrtConnDet) volatile
    {
        uint32_t curr = HPRT;

        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(PrtPwr) & 0b1u) << 12u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(PrtRst) & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(PrtSusp) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(PrtRes) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (PrtOvrCurrChng & 0b1u) << 5u;
        curr &= ~(0b1u << 3u);
        curr |= (PrtEnChng & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(PrtEna) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (PrtConnDet & 0b1u) << 1u;

        HPRT = curr;
    }

    /**
     * Get DCFG's PerSchIntvl field.
     */
    inline USB0_DCFG_PerSchIntvl get_DCFG_PerSchIntvl() volatile
    {
        return USB0_DCFG_PerSchIntvl((DCFG >> 24u) & 0b11u);
    }

    /**
     * Set DCFG's PerSchIntvl field.
     */
    inline void set_DCFG_PerSchIntvl(USB0_DCFG_PerSchIntvl value) volatile
    {
        uint32_t curr = DCFG;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        DCFG = curr;
    }

    /**
     * Get DCFG's DescDMA bit.
     */
    inline bool get_DCFG_DescDMA() volatile
    {
        return DCFG & (1u << 23u);
    }

    /**
     * Set DCFG's DescDMA bit.
     */
    inline void set_DCFG_DescDMA() volatile
    {
        DCFG |= 1u << 23u;
    }

    /**
     * Clear DCFG's DescDMA bit.
     */
    inline void clear_DCFG_DescDMA() volatile
    {
        DCFG &= ~(1u << 23u);
    }

    /**
     * Toggle DCFG's DescDMA bit.
     */
    inline void toggle_DCFG_DescDMA() volatile
    {
        DCFG ^= 1u << 23u;
    }

    /**
     * Get DCFG's PerFrInt field.
     */
    inline USB0_DCFG_PerFrInt get_DCFG_PerFrInt() volatile
    {
        return USB0_DCFG_PerFrInt((DCFG >> 11u) & 0b11u);
    }

    /**
     * Set DCFG's PerFrInt field.
     */
    inline void set_DCFG_PerFrInt(USB0_DCFG_PerFrInt value) volatile
    {
        uint32_t curr = DCFG;

        curr &= ~(0b11u << 11u);
        curr |= (std::to_underlying(value) & 0b11u) << 11u;

        DCFG = curr;
    }

    /**
     * Get DCFG's DevAddr field.
     */
    inline uint8_t get_DCFG_DevAddr() volatile
    {
        return (DCFG >> 4u) & 0b1111111u;
    }

    /**
     * Set DCFG's DevAddr field.
     */
    inline void set_DCFG_DevAddr(uint8_t value) volatile
    {
        uint32_t curr = DCFG;

        curr &= ~(0b1111111u << 4u);
        curr |= (value & 0b1111111u) << 4u;

        DCFG = curr;
    }

    /**
     * Get DCFG's NZStsOUTHShk bit.
     */
    inline USB0_DCFG_NZStsOUTHShk get_DCFG_NZStsOUTHShk() volatile
    {
        return USB0_DCFG_NZStsOUTHShk(DCFG & (1u << 2u));
    }

    /**
     * Set DCFG's NZStsOUTHShk bit.
     */
    inline void set_DCFG_NZStsOUTHShk() volatile
    {
        DCFG |= 1u << 2u;
    }

    /**
     * Clear DCFG's NZStsOUTHShk bit.
     */
    inline void clear_DCFG_NZStsOUTHShk() volatile
    {
        DCFG &= ~(1u << 2u);
    }

    /**
     * Toggle DCFG's NZStsOUTHShk bit.
     */
    inline void toggle_DCFG_NZStsOUTHShk() volatile
    {
        DCFG ^= 1u << 2u;
    }

    /**
     * Get DCFG's DevSpd field.
     */
    inline USB0_DCFG_DevSpd get_DCFG_DevSpd() volatile
    {
        return USB0_DCFG_DevSpd((DCFG >> 0u) & 0b11u);
    }

    /**
     * Set DCFG's DevSpd field.
     */
    inline void set_DCFG_DevSpd(USB0_DCFG_DevSpd value) volatile
    {
        uint32_t curr = DCFG;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        DCFG = curr;
    }

    /**
     * Get all of DCFG's bit fields.
     */
    inline void get_DCFG(USB0_DCFG_PerSchIntvl &PerSchIntvl, bool &DescDMA,
                         USB0_DCFG_PerFrInt &PerFrInt, uint8_t &DevAddr,
                         USB0_DCFG_NZStsOUTHShk &NZStsOUTHShk,
                         USB0_DCFG_DevSpd &DevSpd) volatile
    {
        uint32_t curr = DCFG;

        PerSchIntvl = USB0_DCFG_PerSchIntvl((curr >> 24u) & 0b11u);
        DescDMA = curr & (1u << 23u);
        PerFrInt = USB0_DCFG_PerFrInt((curr >> 11u) & 0b11u);
        DevAddr = (curr >> 4u) & 0b1111111u;
        NZStsOUTHShk = USB0_DCFG_NZStsOUTHShk(curr & (1u << 2u));
        DevSpd = USB0_DCFG_DevSpd((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of DCFG's bit fields.
     */
    inline void set_DCFG(USB0_DCFG_PerSchIntvl PerSchIntvl, bool DescDMA,
                         USB0_DCFG_PerFrInt PerFrInt, uint8_t DevAddr,
                         USB0_DCFG_NZStsOUTHShk NZStsOUTHShk,
                         USB0_DCFG_DevSpd DevSpd) volatile
    {
        uint32_t curr = DCFG;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(PerSchIntvl) & 0b11u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (DescDMA & 0b1u) << 23u;
        curr &= ~(0b11u << 11u);
        curr |= (std::to_underlying(PerFrInt) & 0b11u) << 11u;
        curr &= ~(0b1111111u << 4u);
        curr |= (DevAddr & 0b1111111u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(NZStsOUTHShk) & 0b1u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(DevSpd) & 0b11u) << 0u;

        DCFG = curr;
    }

    /**
     * Get DCTL's EnContOnBNA bit.
     */
    inline USB0_DCTL_EnContOnBNA get_DCTL_EnContOnBNA() volatile
    {
        return USB0_DCTL_EnContOnBNA(DCTL & (1u << 17u));
    }

    /**
     * Set DCTL's EnContOnBNA bit.
     */
    inline void set_DCTL_EnContOnBNA() volatile
    {
        DCTL |= 1u << 17u;
    }

    /**
     * Clear DCTL's EnContOnBNA bit.
     */
    inline void clear_DCTL_EnContOnBNA() volatile
    {
        DCTL &= ~(1u << 17u);
    }

    /**
     * Toggle DCTL's EnContOnBNA bit.
     */
    inline void toggle_DCTL_EnContOnBNA() volatile
    {
        DCTL ^= 1u << 17u;
    }

    /**
     * Get DCTL's NakOnBble bit.
     */
    inline bool get_DCTL_NakOnBble() volatile
    {
        return DCTL & (1u << 16u);
    }

    /**
     * Set DCTL's NakOnBble bit.
     */
    inline void set_DCTL_NakOnBble() volatile
    {
        DCTL |= 1u << 16u;
    }

    /**
     * Clear DCTL's NakOnBble bit.
     */
    inline void clear_DCTL_NakOnBble() volatile
    {
        DCTL &= ~(1u << 16u);
    }

    /**
     * Toggle DCTL's NakOnBble bit.
     */
    inline void toggle_DCTL_NakOnBble() volatile
    {
        DCTL ^= 1u << 16u;
    }

    /**
     * Get DCTL's IgnrFrmNum bit.
     */
    inline USB0_DCTL_IgnrFrmNum get_DCTL_IgnrFrmNum() volatile
    {
        return USB0_DCTL_IgnrFrmNum(DCTL & (1u << 15u));
    }

    /**
     * Set DCTL's IgnrFrmNum bit.
     */
    inline void set_DCTL_IgnrFrmNum() volatile
    {
        DCTL |= 1u << 15u;
    }

    /**
     * Clear DCTL's IgnrFrmNum bit.
     */
    inline void clear_DCTL_IgnrFrmNum() volatile
    {
        DCTL &= ~(1u << 15u);
    }

    /**
     * Toggle DCTL's IgnrFrmNum bit.
     */
    inline void toggle_DCTL_IgnrFrmNum() volatile
    {
        DCTL ^= 1u << 15u;
    }

    /**
     * Get DCTL's GMC field.
     */
    inline USB0_DCTL_GMC get_DCTL_GMC() volatile
    {
        return USB0_DCTL_GMC((DCTL >> 13u) & 0b11u);
    }

    /**
     * Set DCTL's GMC field.
     */
    inline void set_DCTL_GMC(USB0_DCTL_GMC value) volatile
    {
        uint32_t curr = DCTL;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        DCTL = curr;
    }

    /**
     * Set DCTL's CGOUTNak bit.
     */
    inline void set_DCTL_CGOUTNak() volatile
    {
        DCTL |= 1u << 10u;
    }

    /**
     * Clear DCTL's CGOUTNak bit.
     */
    inline void clear_DCTL_CGOUTNak() volatile
    {
        DCTL &= ~(1u << 10u);
    }

    /**
     * Toggle DCTL's CGOUTNak bit.
     */
    inline void toggle_DCTL_CGOUTNak() volatile
    {
        DCTL ^= 1u << 10u;
    }

    /**
     * Set DCTL's SGOUTNak bit.
     */
    inline void set_DCTL_SGOUTNak() volatile
    {
        DCTL |= 1u << 9u;
    }

    /**
     * Clear DCTL's SGOUTNak bit.
     */
    inline void clear_DCTL_SGOUTNak() volatile
    {
        DCTL &= ~(1u << 9u);
    }

    /**
     * Toggle DCTL's SGOUTNak bit.
     */
    inline void toggle_DCTL_SGOUTNak() volatile
    {
        DCTL ^= 1u << 9u;
    }

    /**
     * Set DCTL's CGNPInNak bit.
     */
    inline void set_DCTL_CGNPInNak() volatile
    {
        DCTL |= 1u << 8u;
    }

    /**
     * Clear DCTL's CGNPInNak bit.
     */
    inline void clear_DCTL_CGNPInNak() volatile
    {
        DCTL &= ~(1u << 8u);
    }

    /**
     * Toggle DCTL's CGNPInNak bit.
     */
    inline void toggle_DCTL_CGNPInNak() volatile
    {
        DCTL ^= 1u << 8u;
    }

    /**
     * Set DCTL's SGNPInNak bit.
     */
    inline void set_DCTL_SGNPInNak() volatile
    {
        DCTL |= 1u << 7u;
    }

    /**
     * Clear DCTL's SGNPInNak bit.
     */
    inline void clear_DCTL_SGNPInNak() volatile
    {
        DCTL &= ~(1u << 7u);
    }

    /**
     * Toggle DCTL's SGNPInNak bit.
     */
    inline void toggle_DCTL_SGNPInNak() volatile
    {
        DCTL ^= 1u << 7u;
    }

    /**
     * Get DCTL's GOUTNakSts bit.
     */
    inline USB0_DCTL_GOUTNakSts get_DCTL_GOUTNakSts() volatile
    {
        return USB0_DCTL_GOUTNakSts(DCTL & (1u << 3u));
    }

    /**
     * Get DCTL's GNPINNakSts bit.
     */
    inline USB0_DCTL_GNPINNakSts get_DCTL_GNPINNakSts() volatile
    {
        return USB0_DCTL_GNPINNakSts(DCTL & (1u << 2u));
    }

    /**
     * Get DCTL's SftDiscon bit.
     */
    inline USB0_DCTL_SftDiscon get_DCTL_SftDiscon() volatile
    {
        return USB0_DCTL_SftDiscon(DCTL & (1u << 1u));
    }

    /**
     * Set DCTL's SftDiscon bit.
     */
    inline void set_DCTL_SftDiscon() volatile
    {
        DCTL |= 1u << 1u;
    }

    /**
     * Clear DCTL's SftDiscon bit.
     */
    inline void clear_DCTL_SftDiscon() volatile
    {
        DCTL &= ~(1u << 1u);
    }

    /**
     * Toggle DCTL's SftDiscon bit.
     */
    inline void toggle_DCTL_SftDiscon() volatile
    {
        DCTL ^= 1u << 1u;
    }

    /**
     * Get DCTL's RmtWkUpSig bit.
     */
    inline bool get_DCTL_RmtWkUpSig() volatile
    {
        return DCTL & (1u << 0u);
    }

    /**
     * Set DCTL's RmtWkUpSig bit.
     */
    inline void set_DCTL_RmtWkUpSig() volatile
    {
        DCTL |= 1u << 0u;
    }

    /**
     * Clear DCTL's RmtWkUpSig bit.
     */
    inline void clear_DCTL_RmtWkUpSig() volatile
    {
        DCTL &= ~(1u << 0u);
    }

    /**
     * Toggle DCTL's RmtWkUpSig bit.
     */
    inline void toggle_DCTL_RmtWkUpSig() volatile
    {
        DCTL ^= 1u << 0u;
    }

    /**
     * Get all of DCTL's bit fields.
     */
    inline void get_DCTL(USB0_DCTL_EnContOnBNA &EnContOnBNA, bool &NakOnBble,
                         USB0_DCTL_IgnrFrmNum &IgnrFrmNum, USB0_DCTL_GMC &GMC,
                         USB0_DCTL_GOUTNakSts &GOUTNakSts,
                         USB0_DCTL_GNPINNakSts &GNPINNakSts,
                         USB0_DCTL_SftDiscon &SftDiscon,
                         bool &RmtWkUpSig) volatile
    {
        uint32_t curr = DCTL;

        EnContOnBNA = USB0_DCTL_EnContOnBNA(curr & (1u << 17u));
        NakOnBble = curr & (1u << 16u);
        IgnrFrmNum = USB0_DCTL_IgnrFrmNum(curr & (1u << 15u));
        GMC = USB0_DCTL_GMC((curr >> 13u) & 0b11u);
        GOUTNakSts = USB0_DCTL_GOUTNakSts(curr & (1u << 3u));
        GNPINNakSts = USB0_DCTL_GNPINNakSts(curr & (1u << 2u));
        SftDiscon = USB0_DCTL_SftDiscon(curr & (1u << 1u));
        RmtWkUpSig = curr & (1u << 0u);
    }

    /**
     * Set all of DCTL's bit fields.
     */
    inline void set_DCTL(USB0_DCTL_EnContOnBNA EnContOnBNA, bool NakOnBble,
                         USB0_DCTL_IgnrFrmNum IgnrFrmNum, USB0_DCTL_GMC GMC,
                         bool CGOUTNak, bool SGOUTNak, bool CGNPInNak,
                         bool SGNPInNak, USB0_DCTL_SftDiscon SftDiscon,
                         bool RmtWkUpSig) volatile
    {
        uint32_t curr = DCTL;

        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(EnContOnBNA) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (NakOnBble & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(IgnrFrmNum) & 0b1u) << 15u;
        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(GMC) & 0b11u) << 13u;
        curr &= ~(0b1u << 10u);
        curr |= (CGOUTNak & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SGOUTNak & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (CGNPInNak & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (SGNPInNak & 0b1u) << 7u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(SftDiscon) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RmtWkUpSig & 0b1u) << 0u;

        DCTL = curr;
    }

    /**
     * Get DSTS's SOFFN field.
     */
    inline uint16_t get_DSTS_SOFFN() volatile
    {
        return (DSTS >> 8u) & 0b11111111111111u;
    }

    /**
     * Get DSTS's ErrticErr bit.
     */
    inline bool get_DSTS_ErrticErr() volatile
    {
        return DSTS & (1u << 3u);
    }

    /**
     * Get DSTS's EnumSpd field.
     */
    inline USB0_DSTS_EnumSpd get_DSTS_EnumSpd() volatile
    {
        return USB0_DSTS_EnumSpd((DSTS >> 1u) & 0b11u);
    }

    /**
     * Get DSTS's SuspSts bit.
     */
    inline bool get_DSTS_SuspSts() volatile
    {
        return DSTS & (1u << 0u);
    }

    /**
     * Get all of DSTS's bit fields.
     */
    inline void get_DSTS(uint16_t &SOFFN, bool &ErrticErr,
                         USB0_DSTS_EnumSpd &EnumSpd, bool &SuspSts) volatile
    {
        uint32_t curr = DSTS;

        SOFFN = (curr >> 8u) & 0b11111111111111u;
        ErrticErr = curr & (1u << 3u);
        EnumSpd = USB0_DSTS_EnumSpd((curr >> 1u) & 0b11u);
        SuspSts = curr & (1u << 0u);
    }

    /**
     * Get DIEPMSK's NAKMsk bit.
     */
    inline bool get_DIEPMSK_NAKMsk() volatile
    {
        return DIEPMSK & (1u << 13u);
    }

    /**
     * Set DIEPMSK's NAKMsk bit.
     */
    inline void set_DIEPMSK_NAKMsk() volatile
    {
        DIEPMSK |= 1u << 13u;
    }

    /**
     * Clear DIEPMSK's NAKMsk bit.
     */
    inline void clear_DIEPMSK_NAKMsk() volatile
    {
        DIEPMSK &= ~(1u << 13u);
    }

    /**
     * Toggle DIEPMSK's NAKMsk bit.
     */
    inline void toggle_DIEPMSK_NAKMsk() volatile
    {
        DIEPMSK ^= 1u << 13u;
    }

    /**
     * Get DIEPMSK's BNAInIntrMsk bit.
     */
    inline bool get_DIEPMSK_BNAInIntrMsk() volatile
    {
        return DIEPMSK & (1u << 9u);
    }

    /**
     * Set DIEPMSK's BNAInIntrMsk bit.
     */
    inline void set_DIEPMSK_BNAInIntrMsk() volatile
    {
        DIEPMSK |= 1u << 9u;
    }

    /**
     * Clear DIEPMSK's BNAInIntrMsk bit.
     */
    inline void clear_DIEPMSK_BNAInIntrMsk() volatile
    {
        DIEPMSK &= ~(1u << 9u);
    }

    /**
     * Toggle DIEPMSK's BNAInIntrMsk bit.
     */
    inline void toggle_DIEPMSK_BNAInIntrMsk() volatile
    {
        DIEPMSK ^= 1u << 9u;
    }

    /**
     * Get DIEPMSK's TxfifoUndrnMsk bit.
     */
    inline bool get_DIEPMSK_TxfifoUndrnMsk() volatile
    {
        return DIEPMSK & (1u << 8u);
    }

    /**
     * Set DIEPMSK's TxfifoUndrnMsk bit.
     */
    inline void set_DIEPMSK_TxfifoUndrnMsk() volatile
    {
        DIEPMSK |= 1u << 8u;
    }

    /**
     * Clear DIEPMSK's TxfifoUndrnMsk bit.
     */
    inline void clear_DIEPMSK_TxfifoUndrnMsk() volatile
    {
        DIEPMSK &= ~(1u << 8u);
    }

    /**
     * Toggle DIEPMSK's TxfifoUndrnMsk bit.
     */
    inline void toggle_DIEPMSK_TxfifoUndrnMsk() volatile
    {
        DIEPMSK ^= 1u << 8u;
    }

    /**
     * Get DIEPMSK's INEPNakEffMsk bit.
     */
    inline bool get_DIEPMSK_INEPNakEffMsk() volatile
    {
        return DIEPMSK & (1u << 6u);
    }

    /**
     * Set DIEPMSK's INEPNakEffMsk bit.
     */
    inline void set_DIEPMSK_INEPNakEffMsk() volatile
    {
        DIEPMSK |= 1u << 6u;
    }

    /**
     * Clear DIEPMSK's INEPNakEffMsk bit.
     */
    inline void clear_DIEPMSK_INEPNakEffMsk() volatile
    {
        DIEPMSK &= ~(1u << 6u);
    }

    /**
     * Toggle DIEPMSK's INEPNakEffMsk bit.
     */
    inline void toggle_DIEPMSK_INEPNakEffMsk() volatile
    {
        DIEPMSK ^= 1u << 6u;
    }

    /**
     * Get DIEPMSK's INTknTXFEmpMsk bit.
     */
    inline bool get_DIEPMSK_INTknTXFEmpMsk() volatile
    {
        return DIEPMSK & (1u << 4u);
    }

    /**
     * Set DIEPMSK's INTknTXFEmpMsk bit.
     */
    inline void set_DIEPMSK_INTknTXFEmpMsk() volatile
    {
        DIEPMSK |= 1u << 4u;
    }

    /**
     * Clear DIEPMSK's INTknTXFEmpMsk bit.
     */
    inline void clear_DIEPMSK_INTknTXFEmpMsk() volatile
    {
        DIEPMSK &= ~(1u << 4u);
    }

    /**
     * Toggle DIEPMSK's INTknTXFEmpMsk bit.
     */
    inline void toggle_DIEPMSK_INTknTXFEmpMsk() volatile
    {
        DIEPMSK ^= 1u << 4u;
    }

    /**
     * Get DIEPMSK's TimeOUTMsk bit.
     */
    inline bool get_DIEPMSK_TimeOUTMsk() volatile
    {
        return DIEPMSK & (1u << 3u);
    }

    /**
     * Set DIEPMSK's TimeOUTMsk bit.
     */
    inline void set_DIEPMSK_TimeOUTMsk() volatile
    {
        DIEPMSK |= 1u << 3u;
    }

    /**
     * Clear DIEPMSK's TimeOUTMsk bit.
     */
    inline void clear_DIEPMSK_TimeOUTMsk() volatile
    {
        DIEPMSK &= ~(1u << 3u);
    }

    /**
     * Toggle DIEPMSK's TimeOUTMsk bit.
     */
    inline void toggle_DIEPMSK_TimeOUTMsk() volatile
    {
        DIEPMSK ^= 1u << 3u;
    }

    /**
     * Get DIEPMSK's AHBErrMsk bit.
     */
    inline bool get_DIEPMSK_AHBErrMsk() volatile
    {
        return DIEPMSK & (1u << 2u);
    }

    /**
     * Set DIEPMSK's AHBErrMsk bit.
     */
    inline void set_DIEPMSK_AHBErrMsk() volatile
    {
        DIEPMSK |= 1u << 2u;
    }

    /**
     * Clear DIEPMSK's AHBErrMsk bit.
     */
    inline void clear_DIEPMSK_AHBErrMsk() volatile
    {
        DIEPMSK &= ~(1u << 2u);
    }

    /**
     * Toggle DIEPMSK's AHBErrMsk bit.
     */
    inline void toggle_DIEPMSK_AHBErrMsk() volatile
    {
        DIEPMSK ^= 1u << 2u;
    }

    /**
     * Get DIEPMSK's EPDisbldMsk bit.
     */
    inline bool get_DIEPMSK_EPDisbldMsk() volatile
    {
        return DIEPMSK & (1u << 1u);
    }

    /**
     * Set DIEPMSK's EPDisbldMsk bit.
     */
    inline void set_DIEPMSK_EPDisbldMsk() volatile
    {
        DIEPMSK |= 1u << 1u;
    }

    /**
     * Clear DIEPMSK's EPDisbldMsk bit.
     */
    inline void clear_DIEPMSK_EPDisbldMsk() volatile
    {
        DIEPMSK &= ~(1u << 1u);
    }

    /**
     * Toggle DIEPMSK's EPDisbldMsk bit.
     */
    inline void toggle_DIEPMSK_EPDisbldMsk() volatile
    {
        DIEPMSK ^= 1u << 1u;
    }

    /**
     * Get DIEPMSK's XferComplMsk bit.
     */
    inline bool get_DIEPMSK_XferComplMsk() volatile
    {
        return DIEPMSK & (1u << 0u);
    }

    /**
     * Set DIEPMSK's XferComplMsk bit.
     */
    inline void set_DIEPMSK_XferComplMsk() volatile
    {
        DIEPMSK |= 1u << 0u;
    }

    /**
     * Clear DIEPMSK's XferComplMsk bit.
     */
    inline void clear_DIEPMSK_XferComplMsk() volatile
    {
        DIEPMSK &= ~(1u << 0u);
    }

    /**
     * Toggle DIEPMSK's XferComplMsk bit.
     */
    inline void toggle_DIEPMSK_XferComplMsk() volatile
    {
        DIEPMSK ^= 1u << 0u;
    }

    /**
     * Get all of DIEPMSK's bit fields.
     */
    inline void get_DIEPMSK(bool &NAKMsk, bool &BNAInIntrMsk,
                            bool &TxfifoUndrnMsk, bool &INEPNakEffMsk,
                            bool &INTknTXFEmpMsk, bool &TimeOUTMsk,
                            bool &AHBErrMsk, bool &EPDisbldMsk,
                            bool &XferComplMsk) volatile
    {
        uint32_t curr = DIEPMSK;

        NAKMsk = curr & (1u << 13u);
        BNAInIntrMsk = curr & (1u << 9u);
        TxfifoUndrnMsk = curr & (1u << 8u);
        INEPNakEffMsk = curr & (1u << 6u);
        INTknTXFEmpMsk = curr & (1u << 4u);
        TimeOUTMsk = curr & (1u << 3u);
        AHBErrMsk = curr & (1u << 2u);
        EPDisbldMsk = curr & (1u << 1u);
        XferComplMsk = curr & (1u << 0u);
    }

    /**
     * Set all of DIEPMSK's bit fields.
     */
    inline void set_DIEPMSK(bool NAKMsk, bool BNAInIntrMsk,
                            bool TxfifoUndrnMsk, bool INEPNakEffMsk,
                            bool INTknTXFEmpMsk, bool TimeOUTMsk,
                            bool AHBErrMsk, bool EPDisbldMsk,
                            bool XferComplMsk) volatile
    {
        uint32_t curr = DIEPMSK;

        curr &= ~(0b1u << 13u);
        curr |= (NAKMsk & 0b1u) << 13u;
        curr &= ~(0b1u << 9u);
        curr |= (BNAInIntrMsk & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (TxfifoUndrnMsk & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (INEPNakEffMsk & 0b1u) << 6u;
        curr &= ~(0b1u << 4u);
        curr |= (INTknTXFEmpMsk & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TimeOUTMsk & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (AHBErrMsk & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (EPDisbldMsk & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (XferComplMsk & 0b1u) << 0u;

        DIEPMSK = curr;
    }

    /**
     * Get DOEPMSK's NYETMsk bit.
     */
    inline bool get_DOEPMSK_NYETMsk() volatile
    {
        return DOEPMSK & (1u << 14u);
    }

    /**
     * Set DOEPMSK's NYETMsk bit.
     */
    inline void set_DOEPMSK_NYETMsk() volatile
    {
        DOEPMSK |= 1u << 14u;
    }

    /**
     * Clear DOEPMSK's NYETMsk bit.
     */
    inline void clear_DOEPMSK_NYETMsk() volatile
    {
        DOEPMSK &= ~(1u << 14u);
    }

    /**
     * Toggle DOEPMSK's NYETMsk bit.
     */
    inline void toggle_DOEPMSK_NYETMsk() volatile
    {
        DOEPMSK ^= 1u << 14u;
    }

    /**
     * Get DOEPMSK's NAKMsk bit.
     */
    inline bool get_DOEPMSK_NAKMsk() volatile
    {
        return DOEPMSK & (1u << 13u);
    }

    /**
     * Set DOEPMSK's NAKMsk bit.
     */
    inline void set_DOEPMSK_NAKMsk() volatile
    {
        DOEPMSK |= 1u << 13u;
    }

    /**
     * Clear DOEPMSK's NAKMsk bit.
     */
    inline void clear_DOEPMSK_NAKMsk() volatile
    {
        DOEPMSK &= ~(1u << 13u);
    }

    /**
     * Toggle DOEPMSK's NAKMsk bit.
     */
    inline void toggle_DOEPMSK_NAKMsk() volatile
    {
        DOEPMSK ^= 1u << 13u;
    }

    /**
     * Get DOEPMSK's BbleErrMsk bit.
     */
    inline bool get_DOEPMSK_BbleErrMsk() volatile
    {
        return DOEPMSK & (1u << 12u);
    }

    /**
     * Set DOEPMSK's BbleErrMsk bit.
     */
    inline void set_DOEPMSK_BbleErrMsk() volatile
    {
        DOEPMSK |= 1u << 12u;
    }

    /**
     * Clear DOEPMSK's BbleErrMsk bit.
     */
    inline void clear_DOEPMSK_BbleErrMsk() volatile
    {
        DOEPMSK &= ~(1u << 12u);
    }

    /**
     * Toggle DOEPMSK's BbleErrMsk bit.
     */
    inline void toggle_DOEPMSK_BbleErrMsk() volatile
    {
        DOEPMSK ^= 1u << 12u;
    }

    /**
     * Get DOEPMSK's BnaOutIntrMsk bit.
     */
    inline bool get_DOEPMSK_BnaOutIntrMsk() volatile
    {
        return DOEPMSK & (1u << 9u);
    }

    /**
     * Set DOEPMSK's BnaOutIntrMsk bit.
     */
    inline void set_DOEPMSK_BnaOutIntrMsk() volatile
    {
        DOEPMSK |= 1u << 9u;
    }

    /**
     * Clear DOEPMSK's BnaOutIntrMsk bit.
     */
    inline void clear_DOEPMSK_BnaOutIntrMsk() volatile
    {
        DOEPMSK &= ~(1u << 9u);
    }

    /**
     * Toggle DOEPMSK's BnaOutIntrMsk bit.
     */
    inline void toggle_DOEPMSK_BnaOutIntrMsk() volatile
    {
        DOEPMSK ^= 1u << 9u;
    }

    /**
     * Get DOEPMSK's OutPktErrMsk bit.
     */
    inline bool get_DOEPMSK_OutPktErrMsk() volatile
    {
        return DOEPMSK & (1u << 8u);
    }

    /**
     * Set DOEPMSK's OutPktErrMsk bit.
     */
    inline void set_DOEPMSK_OutPktErrMsk() volatile
    {
        DOEPMSK |= 1u << 8u;
    }

    /**
     * Clear DOEPMSK's OutPktErrMsk bit.
     */
    inline void clear_DOEPMSK_OutPktErrMsk() volatile
    {
        DOEPMSK &= ~(1u << 8u);
    }

    /**
     * Toggle DOEPMSK's OutPktErrMsk bit.
     */
    inline void toggle_DOEPMSK_OutPktErrMsk() volatile
    {
        DOEPMSK ^= 1u << 8u;
    }

    /**
     * Get DOEPMSK's Back2BackSETup bit.
     */
    inline bool get_DOEPMSK_Back2BackSETup() volatile
    {
        return DOEPMSK & (1u << 6u);
    }

    /**
     * Set DOEPMSK's Back2BackSETup bit.
     */
    inline void set_DOEPMSK_Back2BackSETup() volatile
    {
        DOEPMSK |= 1u << 6u;
    }

    /**
     * Clear DOEPMSK's Back2BackSETup bit.
     */
    inline void clear_DOEPMSK_Back2BackSETup() volatile
    {
        DOEPMSK &= ~(1u << 6u);
    }

    /**
     * Toggle DOEPMSK's Back2BackSETup bit.
     */
    inline void toggle_DOEPMSK_Back2BackSETup() volatile
    {
        DOEPMSK ^= 1u << 6u;
    }

    /**
     * Get DOEPMSK's OUTTknEPdisMsk bit.
     */
    inline bool get_DOEPMSK_OUTTknEPdisMsk() volatile
    {
        return DOEPMSK & (1u << 4u);
    }

    /**
     * Set DOEPMSK's OUTTknEPdisMsk bit.
     */
    inline void set_DOEPMSK_OUTTknEPdisMsk() volatile
    {
        DOEPMSK |= 1u << 4u;
    }

    /**
     * Clear DOEPMSK's OUTTknEPdisMsk bit.
     */
    inline void clear_DOEPMSK_OUTTknEPdisMsk() volatile
    {
        DOEPMSK &= ~(1u << 4u);
    }

    /**
     * Toggle DOEPMSK's OUTTknEPdisMsk bit.
     */
    inline void toggle_DOEPMSK_OUTTknEPdisMsk() volatile
    {
        DOEPMSK ^= 1u << 4u;
    }

    /**
     * Get DOEPMSK's SetUPMsk bit.
     */
    inline bool get_DOEPMSK_SetUPMsk() volatile
    {
        return DOEPMSK & (1u << 3u);
    }

    /**
     * Set DOEPMSK's SetUPMsk bit.
     */
    inline void set_DOEPMSK_SetUPMsk() volatile
    {
        DOEPMSK |= 1u << 3u;
    }

    /**
     * Clear DOEPMSK's SetUPMsk bit.
     */
    inline void clear_DOEPMSK_SetUPMsk() volatile
    {
        DOEPMSK &= ~(1u << 3u);
    }

    /**
     * Toggle DOEPMSK's SetUPMsk bit.
     */
    inline void toggle_DOEPMSK_SetUPMsk() volatile
    {
        DOEPMSK ^= 1u << 3u;
    }

    /**
     * Get DOEPMSK's AHBErrMsk bit.
     */
    inline bool get_DOEPMSK_AHBErrMsk() volatile
    {
        return DOEPMSK & (1u << 2u);
    }

    /**
     * Set DOEPMSK's AHBErrMsk bit.
     */
    inline void set_DOEPMSK_AHBErrMsk() volatile
    {
        DOEPMSK |= 1u << 2u;
    }

    /**
     * Clear DOEPMSK's AHBErrMsk bit.
     */
    inline void clear_DOEPMSK_AHBErrMsk() volatile
    {
        DOEPMSK &= ~(1u << 2u);
    }

    /**
     * Toggle DOEPMSK's AHBErrMsk bit.
     */
    inline void toggle_DOEPMSK_AHBErrMsk() volatile
    {
        DOEPMSK ^= 1u << 2u;
    }

    /**
     * Get DOEPMSK's EPDisbldMsk bit.
     */
    inline bool get_DOEPMSK_EPDisbldMsk() volatile
    {
        return DOEPMSK & (1u << 1u);
    }

    /**
     * Set DOEPMSK's EPDisbldMsk bit.
     */
    inline void set_DOEPMSK_EPDisbldMsk() volatile
    {
        DOEPMSK |= 1u << 1u;
    }

    /**
     * Clear DOEPMSK's EPDisbldMsk bit.
     */
    inline void clear_DOEPMSK_EPDisbldMsk() volatile
    {
        DOEPMSK &= ~(1u << 1u);
    }

    /**
     * Toggle DOEPMSK's EPDisbldMsk bit.
     */
    inline void toggle_DOEPMSK_EPDisbldMsk() volatile
    {
        DOEPMSK ^= 1u << 1u;
    }

    /**
     * Get DOEPMSK's XferComplMsk bit.
     */
    inline bool get_DOEPMSK_XferComplMsk() volatile
    {
        return DOEPMSK & (1u << 0u);
    }

    /**
     * Set DOEPMSK's XferComplMsk bit.
     */
    inline void set_DOEPMSK_XferComplMsk() volatile
    {
        DOEPMSK |= 1u << 0u;
    }

    /**
     * Clear DOEPMSK's XferComplMsk bit.
     */
    inline void clear_DOEPMSK_XferComplMsk() volatile
    {
        DOEPMSK &= ~(1u << 0u);
    }

    /**
     * Toggle DOEPMSK's XferComplMsk bit.
     */
    inline void toggle_DOEPMSK_XferComplMsk() volatile
    {
        DOEPMSK ^= 1u << 0u;
    }

    /**
     * Get all of DOEPMSK's bit fields.
     */
    inline void get_DOEPMSK(bool &NYETMsk, bool &NAKMsk, bool &BbleErrMsk,
                            bool &BnaOutIntrMsk, bool &OutPktErrMsk,
                            bool &Back2BackSETup, bool &OUTTknEPdisMsk,
                            bool &SetUPMsk, bool &AHBErrMsk, bool &EPDisbldMsk,
                            bool &XferComplMsk) volatile
    {
        uint32_t curr = DOEPMSK;

        NYETMsk = curr & (1u << 14u);
        NAKMsk = curr & (1u << 13u);
        BbleErrMsk = curr & (1u << 12u);
        BnaOutIntrMsk = curr & (1u << 9u);
        OutPktErrMsk = curr & (1u << 8u);
        Back2BackSETup = curr & (1u << 6u);
        OUTTknEPdisMsk = curr & (1u << 4u);
        SetUPMsk = curr & (1u << 3u);
        AHBErrMsk = curr & (1u << 2u);
        EPDisbldMsk = curr & (1u << 1u);
        XferComplMsk = curr & (1u << 0u);
    }

    /**
     * Set all of DOEPMSK's bit fields.
     */
    inline void set_DOEPMSK(bool NYETMsk, bool NAKMsk, bool BbleErrMsk,
                            bool BnaOutIntrMsk, bool OutPktErrMsk,
                            bool Back2BackSETup, bool OUTTknEPdisMsk,
                            bool SetUPMsk, bool AHBErrMsk, bool EPDisbldMsk,
                            bool XferComplMsk) volatile
    {
        uint32_t curr = DOEPMSK;

        curr &= ~(0b1u << 14u);
        curr |= (NYETMsk & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (NAKMsk & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (BbleErrMsk & 0b1u) << 12u;
        curr &= ~(0b1u << 9u);
        curr |= (BnaOutIntrMsk & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (OutPktErrMsk & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (Back2BackSETup & 0b1u) << 6u;
        curr &= ~(0b1u << 4u);
        curr |= (OUTTknEPdisMsk & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (SetUPMsk & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (AHBErrMsk & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (EPDisbldMsk & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (XferComplMsk & 0b1u) << 0u;

        DOEPMSK = curr;
    }

    /**
     * Get DAINT's OutEPInt field.
     */
    inline uint16_t get_DAINT_OutEPInt() volatile
    {
        return (DAINT >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get DAINT's InEpInt field.
     */
    inline uint16_t get_DAINT_InEpInt() volatile
    {
        return (DAINT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of DAINT's bit fields.
     */
    inline void get_DAINT(uint16_t &OutEPInt, uint16_t &InEpInt) volatile
    {
        uint32_t curr = DAINT;

        OutEPInt = (curr >> 16u) & 0b1111111111111111u;
        InEpInt = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get DAINTMSK's OutEpMsk field.
     */
    inline uint16_t get_DAINTMSK_OutEpMsk() volatile
    {
        return (DAINTMSK >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set DAINTMSK's OutEpMsk field.
     */
    inline void set_DAINTMSK_OutEpMsk(uint16_t value) volatile
    {
        uint32_t curr = DAINTMSK;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        DAINTMSK = curr;
    }

    /**
     * Get DAINTMSK's InEpMsk field.
     */
    inline uint16_t get_DAINTMSK_InEpMsk() volatile
    {
        return (DAINTMSK >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DAINTMSK's InEpMsk field.
     */
    inline void set_DAINTMSK_InEpMsk(uint16_t value) volatile
    {
        uint32_t curr = DAINTMSK;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DAINTMSK = curr;
    }

    /**
     * Get all of DAINTMSK's bit fields.
     */
    inline void get_DAINTMSK(uint16_t &OutEpMsk, uint16_t &InEpMsk) volatile
    {
        uint32_t curr = DAINTMSK;

        OutEpMsk = (curr >> 16u) & 0b1111111111111111u;
        InEpMsk = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of DAINTMSK's bit fields.
     */
    inline void set_DAINTMSK(uint16_t OutEpMsk, uint16_t InEpMsk) volatile
    {
        uint32_t curr = DAINTMSK;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (OutEpMsk & 0b1111111111111111u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (InEpMsk & 0b1111111111111111u) << 0u;

        DAINTMSK = curr;
    }

    /**
     * Get DVBUSDIS's DVBUSDis field.
     */
    inline uint16_t get_DVBUSDIS_DVBUSDis() volatile
    {
        return (DVBUSDIS >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DVBUSDIS's DVBUSDis field.
     */
    inline void set_DVBUSDIS_DVBUSDis(uint16_t value) volatile
    {
        uint32_t curr = DVBUSDIS;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DVBUSDIS = curr;
    }

    /**
     * Get DVBUSPULSE's DVBUSPulse field.
     */
    inline uint16_t get_DVBUSPULSE_DVBUSPulse() volatile
    {
        return (DVBUSPULSE >> 0u) & 0b111111111111u;
    }

    /**
     * Set DVBUSPULSE's DVBUSPulse field.
     */
    inline void set_DVBUSPULSE_DVBUSPulse(uint16_t value) volatile
    {
        uint32_t curr = DVBUSPULSE;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        DVBUSPULSE = curr;
    }

    /**
     * Get DIEPEMPMSK's InEpTxfEmpMsk field.
     */
    inline uint16_t get_DIEPEMPMSK_InEpTxfEmpMsk() volatile
    {
        return (DIEPEMPMSK >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set DIEPEMPMSK's InEpTxfEmpMsk field.
     */
    inline void set_DIEPEMPMSK_InEpTxfEmpMsk(uint16_t value) volatile
    {
        uint32_t curr = DIEPEMPMSK;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        DIEPEMPMSK = curr;
    }

    /**
     * Get PCGCCTL's GateHclk bit.
     */
    inline bool get_PCGCCTL_GateHclk() volatile
    {
        return PCGCCTL & (1u << 1u);
    }

    /**
     * Set PCGCCTL's GateHclk bit.
     */
    inline void set_PCGCCTL_GateHclk() volatile
    {
        PCGCCTL |= 1u << 1u;
    }

    /**
     * Clear PCGCCTL's GateHclk bit.
     */
    inline void clear_PCGCCTL_GateHclk() volatile
    {
        PCGCCTL &= ~(1u << 1u);
    }

    /**
     * Toggle PCGCCTL's GateHclk bit.
     */
    inline void toggle_PCGCCTL_GateHclk() volatile
    {
        PCGCCTL ^= 1u << 1u;
    }

    /**
     * Get PCGCCTL's StopPclk bit.
     */
    inline bool get_PCGCCTL_StopPclk() volatile
    {
        return PCGCCTL & (1u << 0u);
    }

    /**
     * Set PCGCCTL's StopPclk bit.
     */
    inline void set_PCGCCTL_StopPclk() volatile
    {
        PCGCCTL |= 1u << 0u;
    }

    /**
     * Clear PCGCCTL's StopPclk bit.
     */
    inline void clear_PCGCCTL_StopPclk() volatile
    {
        PCGCCTL &= ~(1u << 0u);
    }

    /**
     * Toggle PCGCCTL's StopPclk bit.
     */
    inline void toggle_PCGCCTL_StopPclk() volatile
    {
        PCGCCTL ^= 1u << 0u;
    }

    /**
     * Get all of PCGCCTL's bit fields.
     */
    inline void get_PCGCCTL(bool &GateHclk, bool &StopPclk) volatile
    {
        uint32_t curr = PCGCCTL;

        GateHclk = curr & (1u << 1u);
        StopPclk = curr & (1u << 0u);
    }

    /**
     * Set all of PCGCCTL's bit fields.
     */
    inline void set_PCGCCTL(bool GateHclk, bool StopPclk) volatile
    {
        uint32_t curr = PCGCCTL;

        curr &= ~(0b1u << 1u);
        curr |= (GateHclk & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (StopPclk & 0b1u) << 0u;

        PCGCCTL = curr;
    }
};

static_assert(sizeof(usb0) == usb0::size);

static volatile usb0 *const USB0 = reinterpret_cast<usb0 *>(0x50040000);

}; // namespace XMC4700
