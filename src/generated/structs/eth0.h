/**
 * \file
 * \brief Generated by ifgen (3.2.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Ethernet Unit 0
 */
struct [[gnu::packed]] eth0
{
    /* Constant attributes. */
    static constexpr std::size_t size = 4188; /*!< eth0's size in bytes. */

    /* Fields. */
    uint32_t MAC_CONFIGURATION; /*!< (read-write) MAC Configuration Register */
    uint32_t MAC_FRAME_FILTER;  /*!< (read-write) MAC Frame Filter */
    uint32_t HASH_TABLE_HIGH;   /*!< (read-write) Hash Table High Register */
    uint32_t HASH_TABLE_LOW;    /*!< (read-write) Hash Table Low Register */
    uint32_t GMII_ADDRESS;      /*!< (read-write) MII Address Register */
    uint32_t GMII_DATA;         /*!< (read-write) MII Data Register */
    uint32_t FLOW_CONTROL;      /*!< (read-write) Flow Control Register */
    uint32_t VLAN_TAG;          /*!< (read-write) VLAN Tag Register */
    const uint32_t VERSION = {};          /*!< (read-only) Version Register */
    const uint32_t DEBUG = {};            /*!< (read-only) Debug Register */
    uint32_t REMOTE_WAKE_UP_FRAME_FILTER; /*!< (read-write) Remote Wake Up
                                             Frame Filter Register */
    uint32_t PMT_CONTROL_STATUS; /*!< (read-write) PMT Control and Status
                                    Register */
    static constexpr std::size_t reserved_padding0_length = 2;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    const uint32_t INTERRUPT_STATUS =
        {};                     /*!< (read-only) Interrupt Register */
    uint32_t INTERRUPT_MASK;    /*!< (read-write) Interrupt Mask Register */
    uint32_t MAC_ADDRESS0_HIGH; /*!< (read-write) MAC Address0 High Register */
    uint32_t MAC_ADDRESS0_LOW;  /*!< (read-write) MAC Address0 Low Register */
    uint32_t MAC_ADDRESS1_HIGH; /*!< (read-write) MAC Address1 High Register */
    uint32_t MAC_ADDRESS1_LOW;  /*!< (read-write) MAC Address1 Low Register */
    uint32_t MAC_ADDRESS2_HIGH; /*!< (read-write) MAC Address2 High Register */
    uint32_t MAC_ADDRESS2_LOW;  /*!< (read-write) MAC Address2 Low Register */
    uint32_t MAC_ADDRESS3_HIGH; /*!< (read-write) MAC Address3 High Register */
    uint32_t MAC_ADDRESS3_LOW;  /*!< (read-write) MAC Address3 Low Register */
    static constexpr std::size_t reserved_padding1_length = 40;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t MMC_CONTROL; /*!< (read-write) MMC Control Register */
    const uint32_t MMC_RECEIVE_INTERRUPT =
        {}; /*!< (read-only) MMC Receive Interrupt Register */
    const uint32_t MMC_TRANSMIT_INTERRUPT =
        {}; /*!< (read-only) MMC Transmit Interrupt Register */
    uint32_t MMC_RECEIVE_INTERRUPT_MASK;  /*!< (read-write) MMC Reveive
                                             Interrupt Mask Register */
    uint32_t MMC_TRANSMIT_INTERRUPT_MASK; /*!< (read-write) MMC Transmit
                                             Interrupt Mask Register */
    const uint32_t TX_OCTET_COUNT_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad Frames
               Register */
    const uint32_t TX_FRAME_COUNT_GOOD_BAD =
        {}; /*!< (read-only) Transmit Frame Count for Goodand Bad Frames
               Register */
    const uint32_t TX_BROADCAST_FRAMES_GOOD =
        {}; /*!< (read-only) Transmit Frame Count for Good Broadcast Frames */
    const uint32_t TX_MULTICAST_FRAMES_GOOD =
        {}; /*!< (read-only) Transmit Frame Count for Good Multicast Frames */
    const uint32_t TX_64OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 64 Byte
               Frames */
    const uint32_t TX_65TO127OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 65 to 127
               Bytes Frames */
    const uint32_t TX_128TO255OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 128 to 255
               Bytes Frames */
    const uint32_t TX_256TO511OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 256 to 511
               Bytes Frames */
    const uint32_t TX_512TO1023OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 512 to 1023
               Bytes Frames */
    const uint32_t TX_1024TOMAXOCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Octet Count for Good and Bad 1024 to
               Maxsize Bytes Frames */
    const uint32_t TX_UNICAST_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Frame Count for Good and Bad Unicast
               Frames */
    const uint32_t TX_MULTICAST_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Frame Count for Good and Bad Multicast
               Frames */
    const uint32_t TX_BROADCAST_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Transmit Frame Count for Good and Bad Broadcast
               Frames */
    const uint32_t TX_UNDERFLOW_ERROR_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Underflow Error Frames */
    const uint32_t TX_SINGLE_COLLISION_GOOD_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Frames Transmitted after
               Single Collision */
    const uint32_t TX_MULTIPLE_COLLISION_GOOD_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Frames Transmitted after
               Multiple Collision */
    const uint32_t TX_DEFERRED_FRAMES =
        {}; /*!< (read-only) Tx Deferred Frames Register */
    const uint32_t TX_LATE_COLLISION_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Late Collision Error
               Frames */
    const uint32_t TX_EXCESSIVE_COLLISION_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Excessive Collision Error
               Frames */
    const uint32_t TX_CARRIER_ERROR_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Carrier Sense Error
               Frames */
    const uint32_t TX_OCTET_COUNT_GOOD =
        {}; /*!< (read-only) Tx Octet Count Good Register */
    const uint32_t TX_FRAME_COUNT_GOOD =
        {}; /*!< (read-only) Tx Frame Count Good Register */
    const uint32_t TX_EXCESSIVE_DEFERRAL_ERROR =
        {}; /*!< (read-only) Transmit Frame Count for Excessive Deferral Error
               Frames */
    const uint32_t TX_PAUSE_FRAMES =
        {}; /*!< (read-only) Transmit Frame Count for Good PAUSE Frames */
    const uint32_t TX_VLAN_FRAMES_GOOD =
        {}; /*!< (read-only) Transmit Frame Count for Good VLAN Frames */
    const uint32_t TX_OSIZE_FRAMES_GOOD =
        {}; /*!< (read-only) Transmit Frame Count for Good Oversize Frames */
    const uint32_t reserved_padding2 = {};
    const uint32_t RX_FRAMES_COUNT_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad Frames */
    const uint32_t RX_OCTET_COUNT_GOOD_BAD =
        {}; /*!< (read-only) Receive Octet Count for Good and Bad Frames */
    const uint32_t RX_OCTET_COUNT_GOOD =
        {}; /*!< (read-only) Rx Octet Count Good Register */
    const uint32_t RX_BROADCAST_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Good Broadcast Frames */
    const uint32_t RX_MULTICAST_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Good Multicast Frames */
    const uint32_t RX_CRC_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for CRC Error Frames */
    const uint32_t RX_ALIGNMENT_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Alignment Error Frames */
    const uint32_t RX_RUNT_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Runt Error Frames */
    const uint32_t RX_JABBER_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Jabber Error Frames */
    const uint32_t RX_UNDERSIZE_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Undersize Frames */
    const uint32_t RX_OVERSIZE_FRAMES_GOOD =
        {}; /*!< (read-only) Rx Oversize Frames Good Register */
    const uint32_t RX_64OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 64 Byte
               Frames */
    const uint32_t RX_65TO127OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 65 to 127
               Bytes Frames */
    const uint32_t RX_128TO255OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 128 to 255
               Bytes Frames */
    const uint32_t RX_256TO511OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 256 to 511
               Bytes Frames */
    const uint32_t RX_512TO1023OCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 512 to 1,023
               Bytes Frames */
    const uint32_t RX_1024TOMAXOCTETS_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad 1,024 to
               Maxsize Bytes Frames */
    const uint32_t RX_UNICAST_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Good Unicast Frames */
    const uint32_t RX_LENGTH_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Length Error Frames */
    const uint32_t RX_OUT_OF_RANGE_TYPE_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Out of Range Frames */
    const uint32_t RX_PAUSE_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for PAUSE Frames */
    const uint32_t RX_FIFO_OVERFLOW_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for FIFO Overflow Frames */
    const uint32_t RX_VLAN_FRAMES_GOOD_BAD =
        {}; /*!< (read-only) Receive Frame Count for Good and Bad VLAN Frames
             */
    const uint32_t RX_WATCHDOG_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Watchdog Error Frames */
    const uint32_t RX_RECEIVE_ERROR_FRAMES =
        {}; /*!< (read-only) Receive Frame Count for Receive Error Frames */
    const uint32_t RX_CONTROL_FRAMES_GOOD =
        {}; /*!< (read-only) Receive Frame Count for Good Control Frames Frames
             */
    static constexpr std::size_t reserved_padding3_length = 6;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t
        MMC_IPC_RECEIVE_INTERRUPT_MASK; /*!< (read-write) MMC Receive Checksum
                                           Offload Interrupt Mask Register */
    const uint32_t reserved_padding4 = {};
    const uint32_t MMC_IPC_RECEIVE_INTERRUPT =
        {}; /*!< (read-only) MMC Receive Checksum Offload Interrupt Register */
    const uint32_t reserved_padding5 = {};
    const uint32_t RXIPV4_GOOD_FRAMES =
        {}; /*!< (read-only) RxIPv4 Good Frames Register */
    const uint32_t RXIPV4_HEADER_ERROR_FRAMES =
        {}; /*!< (read-only) Receive IPV4 Header Error Frame Counter Register
             */
    const uint32_t RXIPV4_NO_PAYLOAD_FRAMES =
        {}; /*!< (read-only) Receive IPV4 No Payload Frame Counter Register */
    const uint32_t RXIPV4_FRAGMENTED_FRAMES =
        {}; /*!< (read-only) Receive IPV4 Fragmented Frame Counter Register */
    const uint32_t RXIPV4_UDP_CHECKSUM_DISABLED_FRAMES =
        {}; /*!< (read-only) Receive IPV4 UDP Checksum Disabled Frame Counter
               Register */
    const uint32_t RXIPV6_GOOD_FRAMES =
        {}; /*!< (read-only) RxIPv6 Good Frames Register */
    const uint32_t RXIPV6_HEADER_ERROR_FRAMES =
        {}; /*!< (read-only) Receive IPV6 Header Error Frame Counter Register
             */
    const uint32_t RXIPV6_NO_PAYLOAD_FRAMES =
        {}; /*!< (read-only) Receive IPV6 No Payload Frame Counter Register */
    const uint32_t RXUDP_GOOD_FRAMES =
        {}; /*!< (read-only) RxUDP Good Frames Register */
    const uint32_t RXUDP_ERROR_FRAMES =
        {}; /*!< (read-only) RxUDP Error Frames Register */
    const uint32_t RXTCP_GOOD_FRAMES =
        {}; /*!< (read-only) RxTCP Good Frames Register */
    const uint32_t RXTCP_ERROR_FRAMES =
        {}; /*!< (read-only) RxTCP Error Frames Register */
    const uint32_t RXICMP_GOOD_FRAMES =
        {}; /*!< (read-only) RxICMP Good Frames Register */
    const uint32_t RXICMP_ERROR_FRAMES =
        {}; /*!< (read-only) RxICMP Error Frames Register */
    static constexpr std::size_t reserved_padding6_length = 2;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    const uint32_t RXIPV4_GOOD_OCTETS =
        {}; /*!< (read-only) RxIPv4 Good Octets Register */
    const uint32_t RXIPV4_HEADER_ERROR_OCTETS =
        {}; /*!< (read-only) Receive IPV4 Header Error Octet Counter Register
             */
    const uint32_t RXIPV4_NO_PAYLOAD_OCTETS =
        {}; /*!< (read-only) Receive IPV4 No Payload Octet Counter Register */
    const uint32_t RXIPV4_FRAGMENTED_OCTETS =
        {}; /*!< (read-only) Receive IPV4 Fragmented Octet Counter Register */
    const uint32_t RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS =
        {}; /*!< (read-only) Receive IPV4 Fragmented Octet Counter Register */
    const uint32_t RXIPV6_GOOD_OCTETS =
        {}; /*!< (read-only) RxIPv6 Good Octets Register */
    const uint32_t RXIPV6_HEADER_ERROR_OCTETS =
        {}; /*!< (read-only) Receive IPV6 Header Error Octet Counter Register
             */
    const uint32_t RXIPV6_NO_PAYLOAD_OCTETS =
        {}; /*!< (read-only) Receive IPV6 No Payload Octet Counter Register */
    const uint32_t RXUDP_GOOD_OCTETS =
        {}; /*!< (read-only) Receive UDP Good Octets Register */
    const uint32_t RXUDP_ERROR_OCTETS =
        {}; /*!< (read-only) Receive UDP Error Octets Register */
    const uint32_t RXTCP_GOOD_OCTETS =
        {}; /*!< (read-only) Receive TCP Good Octets Register */
    const uint32_t RXTCP_ERROR_OCTETS =
        {}; /*!< (read-only) Receive TCP Error Octets Register */
    const uint32_t RXICMP_GOOD_OCTETS =
        {}; /*!< (read-only) Receive ICMP Good Octets Register */
    const uint32_t RXICMP_ERROR_OCTETS =
        {}; /*!< (read-only) Receive ICMP Error Octets Register */
    static constexpr std::size_t reserved_padding7_length = 286;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t TIMESTAMP_CONTROL; /*!< (read-write) Timestamp Control Register */
    uint32_t SUB_SECOND_INCREMENT; /*!< (read-write) Sub-Second Increment
                                      Register */
    const uint32_t SYSTEM_TIME_SECONDS =
        {}; /*!< (read-only) System Time - Seconds Register */
    const uint32_t SYSTEM_TIME_NANOSECONDS =
        {}; /*!< (read-only) System Time Nanoseconds Register */
    uint32_t SYSTEM_TIME_SECONDS_UPDATE;     /*!< (read-write) System Time -
                                                Seconds Update Register */
    uint32_t SYSTEM_TIME_NANOSECONDS_UPDATE; /*!< (read-write) System Time
                                                Nanoseconds Update Register */
    uint32_t TIMESTAMP_ADDEND; /*!< (read-write) Timestamp Addend Register */
    uint32_t
        TARGET_TIME_SECONDS; /*!< (read-write) Target Time Seconds Register */
    uint32_t TARGET_TIME_NANOSECONDS; /*!< (read-write) Target Time Nanoseconds
                                         Register */
    uint32_t
        SYSTEM_TIME_HIGHER_WORD_SECONDS; /*!< (read-write) System Time - Higher
                                            Word Seconds Register */
    const uint32_t TIMESTAMP_STATUS =
        {}; /*!< (read-only) Timestamp Status Register */
    static constexpr std::size_t reserved_padding8_length = 565;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t BUS_MODE;             /*!< (read-write) Bus Mode Register */
    uint32_t TRANSMIT_POLL_DEMAND; /*!< (read-write) Transmit Poll Demand
                                      Register */
    uint32_t
        RECEIVE_POLL_DEMAND; /*!< (read-write) Receive Poll Demand Register */
    uint32_t RECEIVE_DESCRIPTOR_LIST_ADDRESS; /*!< (read-write) Receive
                                                 Descriptor Address Register */
    uint32_t
        TRANSMIT_DESCRIPTOR_LIST_ADDRESS; /*!< (read-write) Transmit descripter
                                             Address Register */
    uint32_t STATUS;                      /*!< (read-write) Status Register */
    uint32_t OPERATION_MODE;   /*!< (read-write) Operation Mode Register */
    uint32_t INTERRUPT_ENABLE; /*!< (read-write) Interrupt Enable Register */
    const uint32_t MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER =
        {}; /*!< (read-only) Missed Frame and Buffer Overflow Counter Register
             */
    uint32_t
        RECEIVE_INTERRUPT_WATCHDOG_TIMER; /*!< (read-write) Receive Interrupt
                                             Watchdog Timer Register */
    const uint32_t reserved_padding9 = {};
    const uint32_t AHB_STATUS = {}; /*!< (read-only) AHB Status Register */
    static constexpr std::size_t reserved_padding10_length = 6;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    const uint32_t CURRENT_HOST_TRANSMIT_DESCRIPTOR =
        {}; /*!< (read-only) Current Host Transmit Descriptor Register */
    const uint32_t CURRENT_HOST_RECEIVE_DESCRIPTOR =
        {}; /*!< (read-only) Current Host Receive Descriptor Register */
    const uint32_t CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS =
        {}; /*!< (read-only) Current Host Transmit Buffer Address Register */
    const uint32_t CURRENT_HOST_RECEIVE_BUFFER_ADDRESS =
        {}; /*!< (read-only) Current Host Receive Buffer Address Register */
    uint32_t HW_FEATURE; /*!< (read-write) HW Feature Register */

    /* Methods. */

    /**
     * Get MAC_CONFIGURATION's SARC field.
     *
     * Source Address Insertion or Replacement Control
     */
    inline uint8_t get_MAC_CONFIGURATION_SARC() volatile
    {
        return (MAC_CONFIGURATION >> 28u) & 0b111u;
    }

    /**
     * Get MAC_CONFIGURATION's TWOKPE bit.
     *
     * IEEE 802.3as support for 2K packets Enable
     */
    inline bool get_MAC_CONFIGURATION_TWOKPE() volatile
    {
        return MAC_CONFIGURATION & (1u << 27u);
    }

    /**
     * Set MAC_CONFIGURATION's TWOKPE bit.
     *
     * IEEE 802.3as support for 2K packets Enable
     */
    inline void set_MAC_CONFIGURATION_TWOKPE() volatile
    {
        MAC_CONFIGURATION |= 1u << 27u;
    }

    /**
     * Clear MAC_CONFIGURATION's TWOKPE bit.
     *
     * IEEE 802.3as support for 2K packets Enable
     */
    inline void clear_MAC_CONFIGURATION_TWOKPE() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 27u);
    }

    /**
     * Toggle MAC_CONFIGURATION's TWOKPE bit.
     *
     * IEEE 802.3as support for 2K packets Enable
     */
    inline void toggle_MAC_CONFIGURATION_TWOKPE() volatile
    {
        MAC_CONFIGURATION ^= 1u << 27u;
    }

    /**
     * Get MAC_CONFIGURATION's CST bit.
     *
     * CRC Stripping of Type Frames
     */
    inline bool get_MAC_CONFIGURATION_CST() volatile
    {
        return MAC_CONFIGURATION & (1u << 25u);
    }

    /**
     * Set MAC_CONFIGURATION's CST bit.
     *
     * CRC Stripping of Type Frames
     */
    inline void set_MAC_CONFIGURATION_CST() volatile
    {
        MAC_CONFIGURATION |= 1u << 25u;
    }

    /**
     * Clear MAC_CONFIGURATION's CST bit.
     *
     * CRC Stripping of Type Frames
     */
    inline void clear_MAC_CONFIGURATION_CST() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 25u);
    }

    /**
     * Toggle MAC_CONFIGURATION's CST bit.
     *
     * CRC Stripping of Type Frames
     */
    inline void toggle_MAC_CONFIGURATION_CST() volatile
    {
        MAC_CONFIGURATION ^= 1u << 25u;
    }

    /**
     * Get MAC_CONFIGURATION's TC bit.
     *
     * Transmit Configuration in RMII
     */
    inline bool get_MAC_CONFIGURATION_TC() volatile
    {
        return MAC_CONFIGURATION & (1u << 24u);
    }

    /**
     * Get MAC_CONFIGURATION's WD bit.
     *
     * Watchdog Disable
     */
    inline bool get_MAC_CONFIGURATION_WD() volatile
    {
        return MAC_CONFIGURATION & (1u << 23u);
    }

    /**
     * Set MAC_CONFIGURATION's WD bit.
     *
     * Watchdog Disable
     */
    inline void set_MAC_CONFIGURATION_WD() volatile
    {
        MAC_CONFIGURATION |= 1u << 23u;
    }

    /**
     * Clear MAC_CONFIGURATION's WD bit.
     *
     * Watchdog Disable
     */
    inline void clear_MAC_CONFIGURATION_WD() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 23u);
    }

    /**
     * Toggle MAC_CONFIGURATION's WD bit.
     *
     * Watchdog Disable
     */
    inline void toggle_MAC_CONFIGURATION_WD() volatile
    {
        MAC_CONFIGURATION ^= 1u << 23u;
    }

    /**
     * Get MAC_CONFIGURATION's JD bit.
     *
     * Jabber Disable
     */
    inline bool get_MAC_CONFIGURATION_JD() volatile
    {
        return MAC_CONFIGURATION & (1u << 22u);
    }

    /**
     * Set MAC_CONFIGURATION's JD bit.
     *
     * Jabber Disable
     */
    inline void set_MAC_CONFIGURATION_JD() volatile
    {
        MAC_CONFIGURATION |= 1u << 22u;
    }

    /**
     * Clear MAC_CONFIGURATION's JD bit.
     *
     * Jabber Disable
     */
    inline void clear_MAC_CONFIGURATION_JD() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 22u);
    }

    /**
     * Toggle MAC_CONFIGURATION's JD bit.
     *
     * Jabber Disable
     */
    inline void toggle_MAC_CONFIGURATION_JD() volatile
    {
        MAC_CONFIGURATION ^= 1u << 22u;
    }

    /**
     * Get MAC_CONFIGURATION's BE bit.
     *
     * Frame Burst Enable
     */
    inline bool get_MAC_CONFIGURATION_BE() volatile
    {
        return MAC_CONFIGURATION & (1u << 21u);
    }

    /**
     * Get MAC_CONFIGURATION's JE bit.
     *
     * Jumbo Frame Enable
     */
    inline bool get_MAC_CONFIGURATION_JE() volatile
    {
        return MAC_CONFIGURATION & (1u << 20u);
    }

    /**
     * Set MAC_CONFIGURATION's JE bit.
     *
     * Jumbo Frame Enable
     */
    inline void set_MAC_CONFIGURATION_JE() volatile
    {
        MAC_CONFIGURATION |= 1u << 20u;
    }

    /**
     * Clear MAC_CONFIGURATION's JE bit.
     *
     * Jumbo Frame Enable
     */
    inline void clear_MAC_CONFIGURATION_JE() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 20u);
    }

    /**
     * Toggle MAC_CONFIGURATION's JE bit.
     *
     * Jumbo Frame Enable
     */
    inline void toggle_MAC_CONFIGURATION_JE() volatile
    {
        MAC_CONFIGURATION ^= 1u << 20u;
    }

    /**
     * Get MAC_CONFIGURATION's IFG field.
     *
     * Inter-Frame Gap
     */
    inline uint8_t get_MAC_CONFIGURATION_IFG() volatile
    {
        return (MAC_CONFIGURATION >> 17u) & 0b111u;
    }

    /**
     * Set MAC_CONFIGURATION's IFG field.
     *
     * Inter-Frame Gap
     */
    inline void set_MAC_CONFIGURATION_IFG(uint8_t value) volatile
    {
        uint32_t curr = MAC_CONFIGURATION;

        curr &= ~(0b111u << 17u);
        curr |= (value & 0b111u) << 17u;

        MAC_CONFIGURATION = curr;
    }

    /**
     * Get MAC_CONFIGURATION's DCRS bit.
     *
     * Disable Carrier Sense During Transmission
     */
    inline bool get_MAC_CONFIGURATION_DCRS() volatile
    {
        return MAC_CONFIGURATION & (1u << 16u);
    }

    /**
     * Set MAC_CONFIGURATION's DCRS bit.
     *
     * Disable Carrier Sense During Transmission
     */
    inline void set_MAC_CONFIGURATION_DCRS() volatile
    {
        MAC_CONFIGURATION |= 1u << 16u;
    }

    /**
     * Clear MAC_CONFIGURATION's DCRS bit.
     *
     * Disable Carrier Sense During Transmission
     */
    inline void clear_MAC_CONFIGURATION_DCRS() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 16u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DCRS bit.
     *
     * Disable Carrier Sense During Transmission
     */
    inline void toggle_MAC_CONFIGURATION_DCRS() volatile
    {
        MAC_CONFIGURATION ^= 1u << 16u;
    }

    /**
     * Get MAC_CONFIGURATION's FES bit.
     *
     * Speed
     */
    inline bool get_MAC_CONFIGURATION_FES() volatile
    {
        return MAC_CONFIGURATION & (1u << 14u);
    }

    /**
     * Set MAC_CONFIGURATION's FES bit.
     *
     * Speed
     */
    inline void set_MAC_CONFIGURATION_FES() volatile
    {
        MAC_CONFIGURATION |= 1u << 14u;
    }

    /**
     * Clear MAC_CONFIGURATION's FES bit.
     *
     * Speed
     */
    inline void clear_MAC_CONFIGURATION_FES() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 14u);
    }

    /**
     * Toggle MAC_CONFIGURATION's FES bit.
     *
     * Speed
     */
    inline void toggle_MAC_CONFIGURATION_FES() volatile
    {
        MAC_CONFIGURATION ^= 1u << 14u;
    }

    /**
     * Get MAC_CONFIGURATION's DO bit.
     *
     * Disable Receive Own
     */
    inline bool get_MAC_CONFIGURATION_DO() volatile
    {
        return MAC_CONFIGURATION & (1u << 13u);
    }

    /**
     * Set MAC_CONFIGURATION's DO bit.
     *
     * Disable Receive Own
     */
    inline void set_MAC_CONFIGURATION_DO() volatile
    {
        MAC_CONFIGURATION |= 1u << 13u;
    }

    /**
     * Clear MAC_CONFIGURATION's DO bit.
     *
     * Disable Receive Own
     */
    inline void clear_MAC_CONFIGURATION_DO() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 13u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DO bit.
     *
     * Disable Receive Own
     */
    inline void toggle_MAC_CONFIGURATION_DO() volatile
    {
        MAC_CONFIGURATION ^= 1u << 13u;
    }

    /**
     * Get MAC_CONFIGURATION's LM bit.
     *
     * Loopback Mode
     */
    inline bool get_MAC_CONFIGURATION_LM() volatile
    {
        return MAC_CONFIGURATION & (1u << 12u);
    }

    /**
     * Set MAC_CONFIGURATION's LM bit.
     *
     * Loopback Mode
     */
    inline void set_MAC_CONFIGURATION_LM() volatile
    {
        MAC_CONFIGURATION |= 1u << 12u;
    }

    /**
     * Clear MAC_CONFIGURATION's LM bit.
     *
     * Loopback Mode
     */
    inline void clear_MAC_CONFIGURATION_LM() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 12u);
    }

    /**
     * Toggle MAC_CONFIGURATION's LM bit.
     *
     * Loopback Mode
     */
    inline void toggle_MAC_CONFIGURATION_LM() volatile
    {
        MAC_CONFIGURATION ^= 1u << 12u;
    }

    /**
     * Get MAC_CONFIGURATION's DM bit.
     *
     * Duplex Mode
     */
    inline bool get_MAC_CONFIGURATION_DM() volatile
    {
        return MAC_CONFIGURATION & (1u << 11u);
    }

    /**
     * Set MAC_CONFIGURATION's DM bit.
     *
     * Duplex Mode
     */
    inline void set_MAC_CONFIGURATION_DM() volatile
    {
        MAC_CONFIGURATION |= 1u << 11u;
    }

    /**
     * Clear MAC_CONFIGURATION's DM bit.
     *
     * Duplex Mode
     */
    inline void clear_MAC_CONFIGURATION_DM() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 11u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DM bit.
     *
     * Duplex Mode
     */
    inline void toggle_MAC_CONFIGURATION_DM() volatile
    {
        MAC_CONFIGURATION ^= 1u << 11u;
    }

    /**
     * Get MAC_CONFIGURATION's IPC bit.
     *
     * Checksum Offload
     */
    inline bool get_MAC_CONFIGURATION_IPC() volatile
    {
        return MAC_CONFIGURATION & (1u << 10u);
    }

    /**
     * Set MAC_CONFIGURATION's IPC bit.
     *
     * Checksum Offload
     */
    inline void set_MAC_CONFIGURATION_IPC() volatile
    {
        MAC_CONFIGURATION |= 1u << 10u;
    }

    /**
     * Clear MAC_CONFIGURATION's IPC bit.
     *
     * Checksum Offload
     */
    inline void clear_MAC_CONFIGURATION_IPC() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 10u);
    }

    /**
     * Toggle MAC_CONFIGURATION's IPC bit.
     *
     * Checksum Offload
     */
    inline void toggle_MAC_CONFIGURATION_IPC() volatile
    {
        MAC_CONFIGURATION ^= 1u << 10u;
    }

    /**
     * Get MAC_CONFIGURATION's DR bit.
     *
     * Disable Retry
     */
    inline bool get_MAC_CONFIGURATION_DR() volatile
    {
        return MAC_CONFIGURATION & (1u << 9u);
    }

    /**
     * Set MAC_CONFIGURATION's DR bit.
     *
     * Disable Retry
     */
    inline void set_MAC_CONFIGURATION_DR() volatile
    {
        MAC_CONFIGURATION |= 1u << 9u;
    }

    /**
     * Clear MAC_CONFIGURATION's DR bit.
     *
     * Disable Retry
     */
    inline void clear_MAC_CONFIGURATION_DR() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 9u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DR bit.
     *
     * Disable Retry
     */
    inline void toggle_MAC_CONFIGURATION_DR() volatile
    {
        MAC_CONFIGURATION ^= 1u << 9u;
    }

    /**
     * Get MAC_CONFIGURATION's ACS bit.
     *
     * Automatic Pad or CRC Stripping
     */
    inline bool get_MAC_CONFIGURATION_ACS() volatile
    {
        return MAC_CONFIGURATION & (1u << 7u);
    }

    /**
     * Set MAC_CONFIGURATION's ACS bit.
     *
     * Automatic Pad or CRC Stripping
     */
    inline void set_MAC_CONFIGURATION_ACS() volatile
    {
        MAC_CONFIGURATION |= 1u << 7u;
    }

    /**
     * Clear MAC_CONFIGURATION's ACS bit.
     *
     * Automatic Pad or CRC Stripping
     */
    inline void clear_MAC_CONFIGURATION_ACS() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 7u);
    }

    /**
     * Toggle MAC_CONFIGURATION's ACS bit.
     *
     * Automatic Pad or CRC Stripping
     */
    inline void toggle_MAC_CONFIGURATION_ACS() volatile
    {
        MAC_CONFIGURATION ^= 1u << 7u;
    }

    /**
     * Get MAC_CONFIGURATION's BL field.
     *
     * Back-Off Limit
     */
    inline uint8_t get_MAC_CONFIGURATION_BL() volatile
    {
        return (MAC_CONFIGURATION >> 5u) & 0b11u;
    }

    /**
     * Set MAC_CONFIGURATION's BL field.
     *
     * Back-Off Limit
     */
    inline void set_MAC_CONFIGURATION_BL(uint8_t value) volatile
    {
        uint32_t curr = MAC_CONFIGURATION;

        curr &= ~(0b11u << 5u);
        curr |= (value & 0b11u) << 5u;

        MAC_CONFIGURATION = curr;
    }

    /**
     * Get MAC_CONFIGURATION's DC bit.
     *
     * Deferral Check
     */
    inline bool get_MAC_CONFIGURATION_DC() volatile
    {
        return MAC_CONFIGURATION & (1u << 4u);
    }

    /**
     * Set MAC_CONFIGURATION's DC bit.
     *
     * Deferral Check
     */
    inline void set_MAC_CONFIGURATION_DC() volatile
    {
        MAC_CONFIGURATION |= 1u << 4u;
    }

    /**
     * Clear MAC_CONFIGURATION's DC bit.
     *
     * Deferral Check
     */
    inline void clear_MAC_CONFIGURATION_DC() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 4u);
    }

    /**
     * Toggle MAC_CONFIGURATION's DC bit.
     *
     * Deferral Check
     */
    inline void toggle_MAC_CONFIGURATION_DC() volatile
    {
        MAC_CONFIGURATION ^= 1u << 4u;
    }

    /**
     * Get MAC_CONFIGURATION's TE bit.
     *
     * Transmitter Enable
     */
    inline bool get_MAC_CONFIGURATION_TE() volatile
    {
        return MAC_CONFIGURATION & (1u << 3u);
    }

    /**
     * Set MAC_CONFIGURATION's TE bit.
     *
     * Transmitter Enable
     */
    inline void set_MAC_CONFIGURATION_TE() volatile
    {
        MAC_CONFIGURATION |= 1u << 3u;
    }

    /**
     * Clear MAC_CONFIGURATION's TE bit.
     *
     * Transmitter Enable
     */
    inline void clear_MAC_CONFIGURATION_TE() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 3u);
    }

    /**
     * Toggle MAC_CONFIGURATION's TE bit.
     *
     * Transmitter Enable
     */
    inline void toggle_MAC_CONFIGURATION_TE() volatile
    {
        MAC_CONFIGURATION ^= 1u << 3u;
    }

    /**
     * Get MAC_CONFIGURATION's RE bit.
     *
     * Receiver Enable
     */
    inline bool get_MAC_CONFIGURATION_RE() volatile
    {
        return MAC_CONFIGURATION & (1u << 2u);
    }

    /**
     * Set MAC_CONFIGURATION's RE bit.
     *
     * Receiver Enable
     */
    inline void set_MAC_CONFIGURATION_RE() volatile
    {
        MAC_CONFIGURATION |= 1u << 2u;
    }

    /**
     * Clear MAC_CONFIGURATION's RE bit.
     *
     * Receiver Enable
     */
    inline void clear_MAC_CONFIGURATION_RE() volatile
    {
        MAC_CONFIGURATION &= ~(1u << 2u);
    }

    /**
     * Toggle MAC_CONFIGURATION's RE bit.
     *
     * Receiver Enable
     */
    inline void toggle_MAC_CONFIGURATION_RE() volatile
    {
        MAC_CONFIGURATION ^= 1u << 2u;
    }

    /**
     * Get MAC_CONFIGURATION's PRELEN field.
     *
     * Preamble Length for Transmit Frames
     */
    inline uint8_t get_MAC_CONFIGURATION_PRELEN() volatile
    {
        return (MAC_CONFIGURATION >> 0u) & 0b11u;
    }

    /**
     * Set MAC_CONFIGURATION's PRELEN field.
     *
     * Preamble Length for Transmit Frames
     */
    inline void set_MAC_CONFIGURATION_PRELEN(uint8_t value) volatile
    {
        uint32_t curr = MAC_CONFIGURATION;

        curr &= ~(0b11u << 0u);
        curr |= (value & 0b11u) << 0u;

        MAC_CONFIGURATION = curr;
    }

    /**
     * Get all of MAC_CONFIGURATION's bit fields.
     *
     * (read-write) MAC Configuration Register
     */
    inline void get_MAC_CONFIGURATION(uint8_t &SARC, bool &TWOKPE, bool &CST,
                                      bool &TC, bool &WD, bool &JD, bool &BE,
                                      bool &JE, uint8_t &IFG, bool &DCRS,
                                      bool &FES, bool &DO, bool &LM, bool &DM,
                                      bool &IPC, bool &DR, bool &ACS,
                                      uint8_t &BL, bool &DC, bool &TE,
                                      bool &RE, uint8_t &PRELEN) volatile
    {
        uint32_t curr = MAC_CONFIGURATION;

        SARC = (curr >> 28u) & 0b111u;
        TWOKPE = curr & (1u << 27u);
        CST = curr & (1u << 25u);
        TC = curr & (1u << 24u);
        WD = curr & (1u << 23u);
        JD = curr & (1u << 22u);
        BE = curr & (1u << 21u);
        JE = curr & (1u << 20u);
        IFG = (curr >> 17u) & 0b111u;
        DCRS = curr & (1u << 16u);
        FES = curr & (1u << 14u);
        DO = curr & (1u << 13u);
        LM = curr & (1u << 12u);
        DM = curr & (1u << 11u);
        IPC = curr & (1u << 10u);
        DR = curr & (1u << 9u);
        ACS = curr & (1u << 7u);
        BL = (curr >> 5u) & 0b11u;
        DC = curr & (1u << 4u);
        TE = curr & (1u << 3u);
        RE = curr & (1u << 2u);
        PRELEN = (curr >> 0u) & 0b11u;
    }

    /**
     * Set all of MAC_CONFIGURATION's bit fields.
     *
     * (read-write) MAC Configuration Register
     */
    inline void set_MAC_CONFIGURATION(bool TWOKPE, bool CST, bool WD, bool JD,
                                      bool JE, uint8_t IFG, bool DCRS,
                                      bool FES, bool DO, bool LM, bool DM,
                                      bool IPC, bool DR, bool ACS, uint8_t BL,
                                      bool DC, bool TE, bool RE,
                                      uint8_t PRELEN) volatile
    {
        uint32_t curr = MAC_CONFIGURATION;

        curr &= ~(0b1u << 27u);
        curr |= (TWOKPE & 0b1u) << 27u;
        curr &= ~(0b1u << 25u);
        curr |= (CST & 0b1u) << 25u;
        curr &= ~(0b1u << 23u);
        curr |= (WD & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (JD & 0b1u) << 22u;
        curr &= ~(0b1u << 20u);
        curr |= (JE & 0b1u) << 20u;
        curr &= ~(0b111u << 17u);
        curr |= (IFG & 0b111u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (DCRS & 0b1u) << 16u;
        curr &= ~(0b1u << 14u);
        curr |= (FES & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (DO & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (LM & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (DM & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (IPC & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (DR & 0b1u) << 9u;
        curr &= ~(0b1u << 7u);
        curr |= (ACS & 0b1u) << 7u;
        curr &= ~(0b11u << 5u);
        curr |= (BL & 0b11u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (DC & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RE & 0b1u) << 2u;
        curr &= ~(0b11u << 0u);
        curr |= (PRELEN & 0b11u) << 0u;

        MAC_CONFIGURATION = curr;
    }

    /**
     * Get MAC_FRAME_FILTER's RA bit.
     *
     * Receive All
     */
    inline bool get_MAC_FRAME_FILTER_RA() volatile
    {
        return MAC_FRAME_FILTER & (1u << 31u);
    }

    /**
     * Set MAC_FRAME_FILTER's RA bit.
     *
     * Receive All
     */
    inline void set_MAC_FRAME_FILTER_RA() volatile
    {
        MAC_FRAME_FILTER |= 1u << 31u;
    }

    /**
     * Clear MAC_FRAME_FILTER's RA bit.
     *
     * Receive All
     */
    inline void clear_MAC_FRAME_FILTER_RA() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 31u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's RA bit.
     *
     * Receive All
     */
    inline void toggle_MAC_FRAME_FILTER_RA() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 31u;
    }

    /**
     * Get MAC_FRAME_FILTER's DNTU bit.
     *
     * Drop non-TCP/UDP over IP Frames
     */
    inline bool get_MAC_FRAME_FILTER_DNTU() volatile
    {
        return MAC_FRAME_FILTER & (1u << 21u);
    }

    /**
     * Get MAC_FRAME_FILTER's IPFE bit.
     *
     * Layer 3 and Layer 4 Filter Enable
     */
    inline bool get_MAC_FRAME_FILTER_IPFE() volatile
    {
        return MAC_FRAME_FILTER & (1u << 20u);
    }

    /**
     * Get MAC_FRAME_FILTER's VTFE bit.
     *
     * VLAN Tag Filter Enable
     */
    inline bool get_MAC_FRAME_FILTER_VTFE() volatile
    {
        return MAC_FRAME_FILTER & (1u << 16u);
    }

    /**
     * Set MAC_FRAME_FILTER's VTFE bit.
     *
     * VLAN Tag Filter Enable
     */
    inline void set_MAC_FRAME_FILTER_VTFE() volatile
    {
        MAC_FRAME_FILTER |= 1u << 16u;
    }

    /**
     * Clear MAC_FRAME_FILTER's VTFE bit.
     *
     * VLAN Tag Filter Enable
     */
    inline void clear_MAC_FRAME_FILTER_VTFE() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 16u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's VTFE bit.
     *
     * VLAN Tag Filter Enable
     */
    inline void toggle_MAC_FRAME_FILTER_VTFE() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 16u;
    }

    /**
     * Get MAC_FRAME_FILTER's HPF bit.
     *
     * Hash or Perfect Filter
     */
    inline bool get_MAC_FRAME_FILTER_HPF() volatile
    {
        return MAC_FRAME_FILTER & (1u << 10u);
    }

    /**
     * Set MAC_FRAME_FILTER's HPF bit.
     *
     * Hash or Perfect Filter
     */
    inline void set_MAC_FRAME_FILTER_HPF() volatile
    {
        MAC_FRAME_FILTER |= 1u << 10u;
    }

    /**
     * Clear MAC_FRAME_FILTER's HPF bit.
     *
     * Hash or Perfect Filter
     */
    inline void clear_MAC_FRAME_FILTER_HPF() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 10u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's HPF bit.
     *
     * Hash or Perfect Filter
     */
    inline void toggle_MAC_FRAME_FILTER_HPF() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 10u;
    }

    /**
     * Get MAC_FRAME_FILTER's SAF bit.
     *
     * Source Address Filter Enable
     */
    inline bool get_MAC_FRAME_FILTER_SAF() volatile
    {
        return MAC_FRAME_FILTER & (1u << 9u);
    }

    /**
     * Set MAC_FRAME_FILTER's SAF bit.
     *
     * Source Address Filter Enable
     */
    inline void set_MAC_FRAME_FILTER_SAF() volatile
    {
        MAC_FRAME_FILTER |= 1u << 9u;
    }

    /**
     * Clear MAC_FRAME_FILTER's SAF bit.
     *
     * Source Address Filter Enable
     */
    inline void clear_MAC_FRAME_FILTER_SAF() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 9u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's SAF bit.
     *
     * Source Address Filter Enable
     */
    inline void toggle_MAC_FRAME_FILTER_SAF() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 9u;
    }

    /**
     * Get MAC_FRAME_FILTER's SAIF bit.
     *
     * SA Inverse Filtering
     */
    inline bool get_MAC_FRAME_FILTER_SAIF() volatile
    {
        return MAC_FRAME_FILTER & (1u << 8u);
    }

    /**
     * Set MAC_FRAME_FILTER's SAIF bit.
     *
     * SA Inverse Filtering
     */
    inline void set_MAC_FRAME_FILTER_SAIF() volatile
    {
        MAC_FRAME_FILTER |= 1u << 8u;
    }

    /**
     * Clear MAC_FRAME_FILTER's SAIF bit.
     *
     * SA Inverse Filtering
     */
    inline void clear_MAC_FRAME_FILTER_SAIF() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 8u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's SAIF bit.
     *
     * SA Inverse Filtering
     */
    inline void toggle_MAC_FRAME_FILTER_SAIF() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 8u;
    }

    /**
     * Get MAC_FRAME_FILTER's PCF field.
     *
     * Pass Control Frames
     */
    inline uint8_t get_MAC_FRAME_FILTER_PCF() volatile
    {
        return (MAC_FRAME_FILTER >> 6u) & 0b11u;
    }

    /**
     * Set MAC_FRAME_FILTER's PCF field.
     *
     * Pass Control Frames
     */
    inline void set_MAC_FRAME_FILTER_PCF(uint8_t value) volatile
    {
        uint32_t curr = MAC_FRAME_FILTER;

        curr &= ~(0b11u << 6u);
        curr |= (value & 0b11u) << 6u;

        MAC_FRAME_FILTER = curr;
    }

    /**
     * Get MAC_FRAME_FILTER's DBF bit.
     *
     * Disable Broadcast Frames
     */
    inline bool get_MAC_FRAME_FILTER_DBF() volatile
    {
        return MAC_FRAME_FILTER & (1u << 5u);
    }

    /**
     * Set MAC_FRAME_FILTER's DBF bit.
     *
     * Disable Broadcast Frames
     */
    inline void set_MAC_FRAME_FILTER_DBF() volatile
    {
        MAC_FRAME_FILTER |= 1u << 5u;
    }

    /**
     * Clear MAC_FRAME_FILTER's DBF bit.
     *
     * Disable Broadcast Frames
     */
    inline void clear_MAC_FRAME_FILTER_DBF() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 5u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's DBF bit.
     *
     * Disable Broadcast Frames
     */
    inline void toggle_MAC_FRAME_FILTER_DBF() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 5u;
    }

    /**
     * Get MAC_FRAME_FILTER's PM bit.
     *
     * Pass All Multicast
     */
    inline bool get_MAC_FRAME_FILTER_PM() volatile
    {
        return MAC_FRAME_FILTER & (1u << 4u);
    }

    /**
     * Set MAC_FRAME_FILTER's PM bit.
     *
     * Pass All Multicast
     */
    inline void set_MAC_FRAME_FILTER_PM() volatile
    {
        MAC_FRAME_FILTER |= 1u << 4u;
    }

    /**
     * Clear MAC_FRAME_FILTER's PM bit.
     *
     * Pass All Multicast
     */
    inline void clear_MAC_FRAME_FILTER_PM() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 4u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's PM bit.
     *
     * Pass All Multicast
     */
    inline void toggle_MAC_FRAME_FILTER_PM() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 4u;
    }

    /**
     * Get MAC_FRAME_FILTER's DAIF bit.
     *
     * DA Inverse Filtering
     */
    inline bool get_MAC_FRAME_FILTER_DAIF() volatile
    {
        return MAC_FRAME_FILTER & (1u << 3u);
    }

    /**
     * Set MAC_FRAME_FILTER's DAIF bit.
     *
     * DA Inverse Filtering
     */
    inline void set_MAC_FRAME_FILTER_DAIF() volatile
    {
        MAC_FRAME_FILTER |= 1u << 3u;
    }

    /**
     * Clear MAC_FRAME_FILTER's DAIF bit.
     *
     * DA Inverse Filtering
     */
    inline void clear_MAC_FRAME_FILTER_DAIF() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 3u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's DAIF bit.
     *
     * DA Inverse Filtering
     */
    inline void toggle_MAC_FRAME_FILTER_DAIF() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 3u;
    }

    /**
     * Get MAC_FRAME_FILTER's HMC bit.
     *
     * Hash Multicast
     */
    inline bool get_MAC_FRAME_FILTER_HMC() volatile
    {
        return MAC_FRAME_FILTER & (1u << 2u);
    }

    /**
     * Set MAC_FRAME_FILTER's HMC bit.
     *
     * Hash Multicast
     */
    inline void set_MAC_FRAME_FILTER_HMC() volatile
    {
        MAC_FRAME_FILTER |= 1u << 2u;
    }

    /**
     * Clear MAC_FRAME_FILTER's HMC bit.
     *
     * Hash Multicast
     */
    inline void clear_MAC_FRAME_FILTER_HMC() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 2u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's HMC bit.
     *
     * Hash Multicast
     */
    inline void toggle_MAC_FRAME_FILTER_HMC() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 2u;
    }

    /**
     * Get MAC_FRAME_FILTER's HUC bit.
     *
     * Hash Unicast
     */
    inline bool get_MAC_FRAME_FILTER_HUC() volatile
    {
        return MAC_FRAME_FILTER & (1u << 1u);
    }

    /**
     * Set MAC_FRAME_FILTER's HUC bit.
     *
     * Hash Unicast
     */
    inline void set_MAC_FRAME_FILTER_HUC() volatile
    {
        MAC_FRAME_FILTER |= 1u << 1u;
    }

    /**
     * Clear MAC_FRAME_FILTER's HUC bit.
     *
     * Hash Unicast
     */
    inline void clear_MAC_FRAME_FILTER_HUC() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 1u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's HUC bit.
     *
     * Hash Unicast
     */
    inline void toggle_MAC_FRAME_FILTER_HUC() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 1u;
    }

    /**
     * Get MAC_FRAME_FILTER's PR bit.
     *
     * Promiscuous Mode
     */
    inline bool get_MAC_FRAME_FILTER_PR() volatile
    {
        return MAC_FRAME_FILTER & (1u << 0u);
    }

    /**
     * Set MAC_FRAME_FILTER's PR bit.
     *
     * Promiscuous Mode
     */
    inline void set_MAC_FRAME_FILTER_PR() volatile
    {
        MAC_FRAME_FILTER |= 1u << 0u;
    }

    /**
     * Clear MAC_FRAME_FILTER's PR bit.
     *
     * Promiscuous Mode
     */
    inline void clear_MAC_FRAME_FILTER_PR() volatile
    {
        MAC_FRAME_FILTER &= ~(1u << 0u);
    }

    /**
     * Toggle MAC_FRAME_FILTER's PR bit.
     *
     * Promiscuous Mode
     */
    inline void toggle_MAC_FRAME_FILTER_PR() volatile
    {
        MAC_FRAME_FILTER ^= 1u << 0u;
    }

    /**
     * Get all of MAC_FRAME_FILTER's bit fields.
     *
     * (read-write) MAC Frame Filter
     */
    inline void get_MAC_FRAME_FILTER(bool &RA, bool &DNTU, bool &IPFE,
                                     bool &VTFE, bool &HPF, bool &SAF,
                                     bool &SAIF, uint8_t &PCF, bool &DBF,
                                     bool &PM, bool &DAIF, bool &HMC,
                                     bool &HUC, bool &PR) volatile
    {
        uint32_t curr = MAC_FRAME_FILTER;

        RA = curr & (1u << 31u);
        DNTU = curr & (1u << 21u);
        IPFE = curr & (1u << 20u);
        VTFE = curr & (1u << 16u);
        HPF = curr & (1u << 10u);
        SAF = curr & (1u << 9u);
        SAIF = curr & (1u << 8u);
        PCF = (curr >> 6u) & 0b11u;
        DBF = curr & (1u << 5u);
        PM = curr & (1u << 4u);
        DAIF = curr & (1u << 3u);
        HMC = curr & (1u << 2u);
        HUC = curr & (1u << 1u);
        PR = curr & (1u << 0u);
    }

    /**
     * Set all of MAC_FRAME_FILTER's bit fields.
     *
     * (read-write) MAC Frame Filter
     */
    inline void set_MAC_FRAME_FILTER(bool RA, bool VTFE, bool HPF, bool SAF,
                                     bool SAIF, uint8_t PCF, bool DBF, bool PM,
                                     bool DAIF, bool HMC, bool HUC,
                                     bool PR) volatile
    {
        uint32_t curr = MAC_FRAME_FILTER;

        curr &= ~(0b1u << 31u);
        curr |= (RA & 0b1u) << 31u;
        curr &= ~(0b1u << 16u);
        curr |= (VTFE & 0b1u) << 16u;
        curr &= ~(0b1u << 10u);
        curr |= (HPF & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (SAF & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (SAIF & 0b1u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (PCF & 0b11u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (DBF & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (PM & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (DAIF & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (HMC & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (HUC & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (PR & 0b1u) << 0u;

        MAC_FRAME_FILTER = curr;
    }

    /**
     * Get HASH_TABLE_HIGH's HTH field.
     *
     * Hash Table High
     */
    inline uint32_t get_HASH_TABLE_HIGH_HTH() volatile
    {
        return (HASH_TABLE_HIGH >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set HASH_TABLE_HIGH's HTH field.
     *
     * Hash Table High
     */
    inline void set_HASH_TABLE_HIGH_HTH(uint32_t value) volatile
    {
        uint32_t curr = HASH_TABLE_HIGH;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        HASH_TABLE_HIGH = curr;
    }

    /**
     * Get HASH_TABLE_LOW's HTL field.
     *
     * Hash Table Low
     */
    inline uint32_t get_HASH_TABLE_LOW_HTL() volatile
    {
        return (HASH_TABLE_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set HASH_TABLE_LOW's HTL field.
     *
     * Hash Table Low
     */
    inline void set_HASH_TABLE_LOW_HTL(uint32_t value) volatile
    {
        uint32_t curr = HASH_TABLE_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        HASH_TABLE_LOW = curr;
    }

    /**
     * Get GMII_ADDRESS's PA field.
     *
     * Physical Layer Address
     */
    inline uint8_t get_GMII_ADDRESS_PA() volatile
    {
        return (GMII_ADDRESS >> 11u) & 0b11111u;
    }

    /**
     * Set GMII_ADDRESS's PA field.
     *
     * Physical Layer Address
     */
    inline void set_GMII_ADDRESS_PA(uint8_t value) volatile
    {
        uint32_t curr = GMII_ADDRESS;

        curr &= ~(0b11111u << 11u);
        curr |= (value & 0b11111u) << 11u;

        GMII_ADDRESS = curr;
    }

    /**
     * Get GMII_ADDRESS's MR field.
     *
     * MII Register
     */
    inline uint8_t get_GMII_ADDRESS_MR() volatile
    {
        return (GMII_ADDRESS >> 6u) & 0b11111u;
    }

    /**
     * Set GMII_ADDRESS's MR field.
     *
     * MII Register
     */
    inline void set_GMII_ADDRESS_MR(uint8_t value) volatile
    {
        uint32_t curr = GMII_ADDRESS;

        curr &= ~(0b11111u << 6u);
        curr |= (value & 0b11111u) << 6u;

        GMII_ADDRESS = curr;
    }

    /**
     * Get GMII_ADDRESS's CR field.
     *
     * CSR Clock Range
     */
    inline uint8_t get_GMII_ADDRESS_CR() volatile
    {
        return (GMII_ADDRESS >> 2u) & 0b1111u;
    }

    /**
     * Set GMII_ADDRESS's CR field.
     *
     * CSR Clock Range
     */
    inline void set_GMII_ADDRESS_CR(uint8_t value) volatile
    {
        uint32_t curr = GMII_ADDRESS;

        curr &= ~(0b1111u << 2u);
        curr |= (value & 0b1111u) << 2u;

        GMII_ADDRESS = curr;
    }

    /**
     * Get GMII_ADDRESS's MW bit.
     *
     * MII Write
     */
    inline bool get_GMII_ADDRESS_MW() volatile
    {
        return GMII_ADDRESS & (1u << 1u);
    }

    /**
     * Set GMII_ADDRESS's MW bit.
     *
     * MII Write
     */
    inline void set_GMII_ADDRESS_MW() volatile
    {
        GMII_ADDRESS |= 1u << 1u;
    }

    /**
     * Clear GMII_ADDRESS's MW bit.
     *
     * MII Write
     */
    inline void clear_GMII_ADDRESS_MW() volatile
    {
        GMII_ADDRESS &= ~(1u << 1u);
    }

    /**
     * Toggle GMII_ADDRESS's MW bit.
     *
     * MII Write
     */
    inline void toggle_GMII_ADDRESS_MW() volatile
    {
        GMII_ADDRESS ^= 1u << 1u;
    }

    /**
     * Get GMII_ADDRESS's MB bit.
     *
     * MII Busy
     */
    inline bool get_GMII_ADDRESS_MB() volatile
    {
        return GMII_ADDRESS & (1u << 0u);
    }

    /**
     * Set GMII_ADDRESS's MB bit.
     *
     * MII Busy
     */
    inline void set_GMII_ADDRESS_MB() volatile
    {
        GMII_ADDRESS |= 1u << 0u;
    }

    /**
     * Clear GMII_ADDRESS's MB bit.
     *
     * MII Busy
     */
    inline void clear_GMII_ADDRESS_MB() volatile
    {
        GMII_ADDRESS &= ~(1u << 0u);
    }

    /**
     * Toggle GMII_ADDRESS's MB bit.
     *
     * MII Busy
     */
    inline void toggle_GMII_ADDRESS_MB() volatile
    {
        GMII_ADDRESS ^= 1u << 0u;
    }

    /**
     * Get all of GMII_ADDRESS's bit fields.
     *
     * (read-write) MII Address Register
     */
    inline void get_GMII_ADDRESS(uint8_t &PA, uint8_t &MR, uint8_t &CR,
                                 bool &MW, bool &MB) volatile
    {
        uint32_t curr = GMII_ADDRESS;

        PA = (curr >> 11u) & 0b11111u;
        MR = (curr >> 6u) & 0b11111u;
        CR = (curr >> 2u) & 0b1111u;
        MW = curr & (1u << 1u);
        MB = curr & (1u << 0u);
    }

    /**
     * Set all of GMII_ADDRESS's bit fields.
     *
     * (read-write) MII Address Register
     */
    inline void set_GMII_ADDRESS(uint8_t PA, uint8_t MR, uint8_t CR, bool MW,
                                 bool MB) volatile
    {
        uint32_t curr = GMII_ADDRESS;

        curr &= ~(0b11111u << 11u);
        curr |= (PA & 0b11111u) << 11u;
        curr &= ~(0b11111u << 6u);
        curr |= (MR & 0b11111u) << 6u;
        curr &= ~(0b1111u << 2u);
        curr |= (CR & 0b1111u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (MW & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (MB & 0b1u) << 0u;

        GMII_ADDRESS = curr;
    }

    /**
     * Get GMII_DATA's MD field.
     *
     * MII Data
     */
    inline uint16_t get_GMII_DATA_MD() volatile
    {
        return (GMII_DATA >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GMII_DATA's MD field.
     *
     * MII Data
     */
    inline void set_GMII_DATA_MD(uint16_t value) volatile
    {
        uint32_t curr = GMII_DATA;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GMII_DATA = curr;
    }

    /**
     * Get FLOW_CONTROL's PT field.
     *
     * Pause Time
     */
    inline uint16_t get_FLOW_CONTROL_PT() volatile
    {
        return (FLOW_CONTROL >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set FLOW_CONTROL's PT field.
     *
     * Pause Time
     */
    inline void set_FLOW_CONTROL_PT(uint16_t value) volatile
    {
        uint32_t curr = FLOW_CONTROL;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        FLOW_CONTROL = curr;
    }

    /**
     * Get FLOW_CONTROL's DZPQ bit.
     *
     * Disable Zero-Quanta Pause
     */
    inline bool get_FLOW_CONTROL_DZPQ() volatile
    {
        return FLOW_CONTROL & (1u << 7u);
    }

    /**
     * Set FLOW_CONTROL's DZPQ bit.
     *
     * Disable Zero-Quanta Pause
     */
    inline void set_FLOW_CONTROL_DZPQ() volatile
    {
        FLOW_CONTROL |= 1u << 7u;
    }

    /**
     * Clear FLOW_CONTROL's DZPQ bit.
     *
     * Disable Zero-Quanta Pause
     */
    inline void clear_FLOW_CONTROL_DZPQ() volatile
    {
        FLOW_CONTROL &= ~(1u << 7u);
    }

    /**
     * Toggle FLOW_CONTROL's DZPQ bit.
     *
     * Disable Zero-Quanta Pause
     */
    inline void toggle_FLOW_CONTROL_DZPQ() volatile
    {
        FLOW_CONTROL ^= 1u << 7u;
    }

    /**
     * Get FLOW_CONTROL's PLT field.
     *
     * Pause Low Threshold
     */
    inline uint8_t get_FLOW_CONTROL_PLT() volatile
    {
        return (FLOW_CONTROL >> 4u) & 0b11u;
    }

    /**
     * Set FLOW_CONTROL's PLT field.
     *
     * Pause Low Threshold
     */
    inline void set_FLOW_CONTROL_PLT(uint8_t value) volatile
    {
        uint32_t curr = FLOW_CONTROL;

        curr &= ~(0b11u << 4u);
        curr |= (value & 0b11u) << 4u;

        FLOW_CONTROL = curr;
    }

    /**
     * Get FLOW_CONTROL's UP bit.
     *
     * Unicast Pause Frame Detect
     */
    inline bool get_FLOW_CONTROL_UP() volatile
    {
        return FLOW_CONTROL & (1u << 3u);
    }

    /**
     * Set FLOW_CONTROL's UP bit.
     *
     * Unicast Pause Frame Detect
     */
    inline void set_FLOW_CONTROL_UP() volatile
    {
        FLOW_CONTROL |= 1u << 3u;
    }

    /**
     * Clear FLOW_CONTROL's UP bit.
     *
     * Unicast Pause Frame Detect
     */
    inline void clear_FLOW_CONTROL_UP() volatile
    {
        FLOW_CONTROL &= ~(1u << 3u);
    }

    /**
     * Toggle FLOW_CONTROL's UP bit.
     *
     * Unicast Pause Frame Detect
     */
    inline void toggle_FLOW_CONTROL_UP() volatile
    {
        FLOW_CONTROL ^= 1u << 3u;
    }

    /**
     * Get FLOW_CONTROL's RFE bit.
     *
     * Receive Flow Control Enable
     */
    inline bool get_FLOW_CONTROL_RFE() volatile
    {
        return FLOW_CONTROL & (1u << 2u);
    }

    /**
     * Set FLOW_CONTROL's RFE bit.
     *
     * Receive Flow Control Enable
     */
    inline void set_FLOW_CONTROL_RFE() volatile
    {
        FLOW_CONTROL |= 1u << 2u;
    }

    /**
     * Clear FLOW_CONTROL's RFE bit.
     *
     * Receive Flow Control Enable
     */
    inline void clear_FLOW_CONTROL_RFE() volatile
    {
        FLOW_CONTROL &= ~(1u << 2u);
    }

    /**
     * Toggle FLOW_CONTROL's RFE bit.
     *
     * Receive Flow Control Enable
     */
    inline void toggle_FLOW_CONTROL_RFE() volatile
    {
        FLOW_CONTROL ^= 1u << 2u;
    }

    /**
     * Get FLOW_CONTROL's TFE bit.
     *
     * Transmit Flow Control Enable
     */
    inline bool get_FLOW_CONTROL_TFE() volatile
    {
        return FLOW_CONTROL & (1u << 1u);
    }

    /**
     * Set FLOW_CONTROL's TFE bit.
     *
     * Transmit Flow Control Enable
     */
    inline void set_FLOW_CONTROL_TFE() volatile
    {
        FLOW_CONTROL |= 1u << 1u;
    }

    /**
     * Clear FLOW_CONTROL's TFE bit.
     *
     * Transmit Flow Control Enable
     */
    inline void clear_FLOW_CONTROL_TFE() volatile
    {
        FLOW_CONTROL &= ~(1u << 1u);
    }

    /**
     * Toggle FLOW_CONTROL's TFE bit.
     *
     * Transmit Flow Control Enable
     */
    inline void toggle_FLOW_CONTROL_TFE() volatile
    {
        FLOW_CONTROL ^= 1u << 1u;
    }

    /**
     * Get FLOW_CONTROL's FCA_BPA bit.
     *
     * Flow Control Busy or Backpressure Activate
     */
    inline bool get_FLOW_CONTROL_FCA_BPA() volatile
    {
        return FLOW_CONTROL & (1u << 0u);
    }

    /**
     * Set FLOW_CONTROL's FCA_BPA bit.
     *
     * Flow Control Busy or Backpressure Activate
     */
    inline void set_FLOW_CONTROL_FCA_BPA() volatile
    {
        FLOW_CONTROL |= 1u << 0u;
    }

    /**
     * Clear FLOW_CONTROL's FCA_BPA bit.
     *
     * Flow Control Busy or Backpressure Activate
     */
    inline void clear_FLOW_CONTROL_FCA_BPA() volatile
    {
        FLOW_CONTROL &= ~(1u << 0u);
    }

    /**
     * Toggle FLOW_CONTROL's FCA_BPA bit.
     *
     * Flow Control Busy or Backpressure Activate
     */
    inline void toggle_FLOW_CONTROL_FCA_BPA() volatile
    {
        FLOW_CONTROL ^= 1u << 0u;
    }

    /**
     * Get all of FLOW_CONTROL's bit fields.
     *
     * (read-write) Flow Control Register
     */
    inline void get_FLOW_CONTROL(uint16_t &PT, bool &DZPQ, uint8_t &PLT,
                                 bool &UP, bool &RFE, bool &TFE,
                                 bool &FCA_BPA) volatile
    {
        uint32_t curr = FLOW_CONTROL;

        PT = (curr >> 16u) & 0b1111111111111111u;
        DZPQ = curr & (1u << 7u);
        PLT = (curr >> 4u) & 0b11u;
        UP = curr & (1u << 3u);
        RFE = curr & (1u << 2u);
        TFE = curr & (1u << 1u);
        FCA_BPA = curr & (1u << 0u);
    }

    /**
     * Set all of FLOW_CONTROL's bit fields.
     *
     * (read-write) Flow Control Register
     */
    inline void set_FLOW_CONTROL(uint16_t PT, bool DZPQ, uint8_t PLT, bool UP,
                                 bool RFE, bool TFE, bool FCA_BPA) volatile
    {
        uint32_t curr = FLOW_CONTROL;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (PT & 0b1111111111111111u) << 16u;
        curr &= ~(0b1u << 7u);
        curr |= (DZPQ & 0b1u) << 7u;
        curr &= ~(0b11u << 4u);
        curr |= (PLT & 0b11u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (UP & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RFE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TFE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (FCA_BPA & 0b1u) << 0u;

        FLOW_CONTROL = curr;
    }

    /**
     * Get VLAN_TAG's VTHM bit.
     *
     * VLAN Tag Hash Table Match Enable
     */
    inline bool get_VLAN_TAG_VTHM() volatile
    {
        return VLAN_TAG & (1u << 19u);
    }

    /**
     * Get VLAN_TAG's ESVL bit.
     *
     * Enable S-VLAN
     */
    inline bool get_VLAN_TAG_ESVL() volatile
    {
        return VLAN_TAG & (1u << 18u);
    }

    /**
     * Set VLAN_TAG's ESVL bit.
     *
     * Enable S-VLAN
     */
    inline void set_VLAN_TAG_ESVL() volatile
    {
        VLAN_TAG |= 1u << 18u;
    }

    /**
     * Clear VLAN_TAG's ESVL bit.
     *
     * Enable S-VLAN
     */
    inline void clear_VLAN_TAG_ESVL() volatile
    {
        VLAN_TAG &= ~(1u << 18u);
    }

    /**
     * Toggle VLAN_TAG's ESVL bit.
     *
     * Enable S-VLAN
     */
    inline void toggle_VLAN_TAG_ESVL() volatile
    {
        VLAN_TAG ^= 1u << 18u;
    }

    /**
     * Get VLAN_TAG's VTIM bit.
     *
     * VLAN Tag Inverse Match Enable
     */
    inline bool get_VLAN_TAG_VTIM() volatile
    {
        return VLAN_TAG & (1u << 17u);
    }

    /**
     * Set VLAN_TAG's VTIM bit.
     *
     * VLAN Tag Inverse Match Enable
     */
    inline void set_VLAN_TAG_VTIM() volatile
    {
        VLAN_TAG |= 1u << 17u;
    }

    /**
     * Clear VLAN_TAG's VTIM bit.
     *
     * VLAN Tag Inverse Match Enable
     */
    inline void clear_VLAN_TAG_VTIM() volatile
    {
        VLAN_TAG &= ~(1u << 17u);
    }

    /**
     * Toggle VLAN_TAG's VTIM bit.
     *
     * VLAN Tag Inverse Match Enable
     */
    inline void toggle_VLAN_TAG_VTIM() volatile
    {
        VLAN_TAG ^= 1u << 17u;
    }

    /**
     * Get VLAN_TAG's ETV bit.
     *
     * Enable 12-Bit VLAN Tag Comparison
     */
    inline bool get_VLAN_TAG_ETV() volatile
    {
        return VLAN_TAG & (1u << 16u);
    }

    /**
     * Set VLAN_TAG's ETV bit.
     *
     * Enable 12-Bit VLAN Tag Comparison
     */
    inline void set_VLAN_TAG_ETV() volatile
    {
        VLAN_TAG |= 1u << 16u;
    }

    /**
     * Clear VLAN_TAG's ETV bit.
     *
     * Enable 12-Bit VLAN Tag Comparison
     */
    inline void clear_VLAN_TAG_ETV() volatile
    {
        VLAN_TAG &= ~(1u << 16u);
    }

    /**
     * Toggle VLAN_TAG's ETV bit.
     *
     * Enable 12-Bit VLAN Tag Comparison
     */
    inline void toggle_VLAN_TAG_ETV() volatile
    {
        VLAN_TAG ^= 1u << 16u;
    }

    /**
     * Get VLAN_TAG's VL field.
     *
     * VLAN Tag Identifier for Receive Frames
     */
    inline uint16_t get_VLAN_TAG_VL() volatile
    {
        return (VLAN_TAG >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set VLAN_TAG's VL field.
     *
     * VLAN Tag Identifier for Receive Frames
     */
    inline void set_VLAN_TAG_VL(uint16_t value) volatile
    {
        uint32_t curr = VLAN_TAG;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        VLAN_TAG = curr;
    }

    /**
     * Get all of VLAN_TAG's bit fields.
     *
     * (read-write) VLAN Tag Register
     */
    inline void get_VLAN_TAG(bool &VTHM, bool &ESVL, bool &VTIM, bool &ETV,
                             uint16_t &VL) volatile
    {
        uint32_t curr = VLAN_TAG;

        VTHM = curr & (1u << 19u);
        ESVL = curr & (1u << 18u);
        VTIM = curr & (1u << 17u);
        ETV = curr & (1u << 16u);
        VL = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of VLAN_TAG's bit fields.
     *
     * (read-write) VLAN Tag Register
     */
    inline void set_VLAN_TAG(bool ESVL, bool VTIM, bool ETV,
                             uint16_t VL) volatile
    {
        uint32_t curr = VLAN_TAG;

        curr &= ~(0b1u << 18u);
        curr |= (ESVL & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (VTIM & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (ETV & 0b1u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (VL & 0b1111111111111111u) << 0u;

        VLAN_TAG = curr;
    }

    /**
     * Get VERSION's USERVER field.
     *
     * User-defined Version (Configured with the coreConsultant)
     */
    inline uint8_t get_VERSION_USERVER() volatile
    {
        return (VERSION >> 8u) & 0b11111111u;
    }

    /**
     * Get VERSION's SNPSVER field.
     *
     * Synopsys-defined Version (3.7)
     */
    inline uint8_t get_VERSION_SNPSVER() volatile
    {
        return (VERSION >> 0u) & 0b11111111u;
    }

    /**
     * Get all of VERSION's bit fields.
     *
     * (read-only) Version Register
     */
    inline void get_VERSION(uint8_t &USERVER, uint8_t &SNPSVER) volatile
    {
        uint32_t curr = VERSION;

        USERVER = (curr >> 8u) & 0b11111111u;
        SNPSVER = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get DEBUG's TXSTSFSTS bit.
     *
     * MTL TxStatus FIFO Full Status
     */
    inline bool get_DEBUG_TXSTSFSTS() volatile
    {
        return DEBUG & (1u << 25u);
    }

    /**
     * Get DEBUG's TXFSTS bit.
     *
     * MTL Tx FIFO Not Empty Status
     */
    inline bool get_DEBUG_TXFSTS() volatile
    {
        return DEBUG & (1u << 24u);
    }

    /**
     * Get DEBUG's TWCSTS bit.
     *
     * MTL Tx FIFO Write Controller Active Status
     */
    inline bool get_DEBUG_TWCSTS() volatile
    {
        return DEBUG & (1u << 22u);
    }

    /**
     * Get DEBUG's TRCSTS field.
     *
     * MTL Tx FIFO Read Controller Status
     */
    inline uint8_t get_DEBUG_TRCSTS() volatile
    {
        return (DEBUG >> 20u) & 0b11u;
    }

    /**
     * Get DEBUG's TXPAUSED bit.
     *
     * MAC transmitter in PAUSE
     */
    inline bool get_DEBUG_TXPAUSED() volatile
    {
        return DEBUG & (1u << 19u);
    }

    /**
     * Get DEBUG's TFCSTS field.
     *
     * MAC Transmit Frame Controller Status
     */
    inline uint8_t get_DEBUG_TFCSTS() volatile
    {
        return (DEBUG >> 17u) & 0b11u;
    }

    /**
     * Get DEBUG's TPESTS bit.
     *
     * MAC MII Transmit Protocol Engine Status
     */
    inline bool get_DEBUG_TPESTS() volatile
    {
        return DEBUG & (1u << 16u);
    }

    /**
     * Get DEBUG's RXFSTS field.
     *
     * MTL Rx FIFO Fill-level Status
     */
    inline uint8_t get_DEBUG_RXFSTS() volatile
    {
        return (DEBUG >> 8u) & 0b11u;
    }

    /**
     * Get DEBUG's RRCSTS field.
     *
     * MTL Rx FIFO Read Controller State
     */
    inline uint8_t get_DEBUG_RRCSTS() volatile
    {
        return (DEBUG >> 5u) & 0b11u;
    }

    /**
     * Get DEBUG's RWCSTS bit.
     *
     * MTL Rx FIFO Write Controller Active Status
     */
    inline bool get_DEBUG_RWCSTS() volatile
    {
        return DEBUG & (1u << 4u);
    }

    /**
     * Get DEBUG's RFCFCSTS field.
     *
     * MAC Receive Frame Controller FIFO Status
     */
    inline uint8_t get_DEBUG_RFCFCSTS() volatile
    {
        return (DEBUG >> 1u) & 0b11u;
    }

    /**
     * Get DEBUG's RPESTS bit.
     *
     * MAC MII Receive Protocol Engine Status
     */
    inline bool get_DEBUG_RPESTS() volatile
    {
        return DEBUG & (1u << 0u);
    }

    /**
     * Get all of DEBUG's bit fields.
     *
     * (read-only) Debug Register
     */
    inline void get_DEBUG(bool &TXSTSFSTS, bool &TXFSTS, bool &TWCSTS,
                          uint8_t &TRCSTS, bool &TXPAUSED, uint8_t &TFCSTS,
                          bool &TPESTS, uint8_t &RXFSTS, uint8_t &RRCSTS,
                          bool &RWCSTS, uint8_t &RFCFCSTS,
                          bool &RPESTS) volatile
    {
        uint32_t curr = DEBUG;

        TXSTSFSTS = curr & (1u << 25u);
        TXFSTS = curr & (1u << 24u);
        TWCSTS = curr & (1u << 22u);
        TRCSTS = (curr >> 20u) & 0b11u;
        TXPAUSED = curr & (1u << 19u);
        TFCSTS = (curr >> 17u) & 0b11u;
        TPESTS = curr & (1u << 16u);
        RXFSTS = (curr >> 8u) & 0b11u;
        RRCSTS = (curr >> 5u) & 0b11u;
        RWCSTS = curr & (1u << 4u);
        RFCFCSTS = (curr >> 1u) & 0b11u;
        RPESTS = curr & (1u << 0u);
    }

    /**
     * Get REMOTE_WAKE_UP_FRAME_FILTER's WKUPFRMFTR field.
     *
     * Remote Wake-Up Frame Filter
     */
    inline uint32_t get_REMOTE_WAKE_UP_FRAME_FILTER_WKUPFRMFTR() volatile
    {
        return (REMOTE_WAKE_UP_FRAME_FILTER >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set REMOTE_WAKE_UP_FRAME_FILTER's WKUPFRMFTR field.
     *
     * Remote Wake-Up Frame Filter
     */
    inline void set_REMOTE_WAKE_UP_FRAME_FILTER_WKUPFRMFTR(
        uint32_t value) volatile
    {
        uint32_t curr = REMOTE_WAKE_UP_FRAME_FILTER;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        REMOTE_WAKE_UP_FRAME_FILTER = curr;
    }

    /**
     * Get PMT_CONTROL_STATUS's RWKFILTRST bit.
     *
     * Wake-Up Frame Filter Register Pointer Reset
     */
    inline bool get_PMT_CONTROL_STATUS_RWKFILTRST() volatile
    {
        return PMT_CONTROL_STATUS & (1u << 31u);
    }

    /**
     * Set PMT_CONTROL_STATUS's RWKFILTRST bit.
     *
     * Wake-Up Frame Filter Register Pointer Reset
     */
    inline void set_PMT_CONTROL_STATUS_RWKFILTRST() volatile
    {
        PMT_CONTROL_STATUS |= 1u << 31u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's RWKFILTRST bit.
     *
     * Wake-Up Frame Filter Register Pointer Reset
     */
    inline void clear_PMT_CONTROL_STATUS_RWKFILTRST() volatile
    {
        PMT_CONTROL_STATUS &= ~(1u << 31u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's RWKFILTRST bit.
     *
     * Wake-Up Frame Filter Register Pointer Reset
     */
    inline void toggle_PMT_CONTROL_STATUS_RWKFILTRST() volatile
    {
        PMT_CONTROL_STATUS ^= 1u << 31u;
    }

    /**
     * Get PMT_CONTROL_STATUS's GLBLUCAST bit.
     *
     * Global Unicast
     */
    inline bool get_PMT_CONTROL_STATUS_GLBLUCAST() volatile
    {
        return PMT_CONTROL_STATUS & (1u << 9u);
    }

    /**
     * Set PMT_CONTROL_STATUS's GLBLUCAST bit.
     *
     * Global Unicast
     */
    inline void set_PMT_CONTROL_STATUS_GLBLUCAST() volatile
    {
        PMT_CONTROL_STATUS |= 1u << 9u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's GLBLUCAST bit.
     *
     * Global Unicast
     */
    inline void clear_PMT_CONTROL_STATUS_GLBLUCAST() volatile
    {
        PMT_CONTROL_STATUS &= ~(1u << 9u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's GLBLUCAST bit.
     *
     * Global Unicast
     */
    inline void toggle_PMT_CONTROL_STATUS_GLBLUCAST() volatile
    {
        PMT_CONTROL_STATUS ^= 1u << 9u;
    }

    /**
     * Get PMT_CONTROL_STATUS's RWKPRCVD bit.
     *
     * Wake-Up Frame Received
     */
    inline bool get_PMT_CONTROL_STATUS_RWKPRCVD() volatile
    {
        return PMT_CONTROL_STATUS & (1u << 6u);
    }

    /**
     * Get PMT_CONTROL_STATUS's MGKPRCVD bit.
     *
     * Magic Packet Received
     */
    inline bool get_PMT_CONTROL_STATUS_MGKPRCVD() volatile
    {
        return PMT_CONTROL_STATUS & (1u << 5u);
    }

    /**
     * Get PMT_CONTROL_STATUS's RWKPKTEN bit.
     *
     * Wake-Up Frame Enable
     */
    inline bool get_PMT_CONTROL_STATUS_RWKPKTEN() volatile
    {
        return PMT_CONTROL_STATUS & (1u << 2u);
    }

    /**
     * Set PMT_CONTROL_STATUS's RWKPKTEN bit.
     *
     * Wake-Up Frame Enable
     */
    inline void set_PMT_CONTROL_STATUS_RWKPKTEN() volatile
    {
        PMT_CONTROL_STATUS |= 1u << 2u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's RWKPKTEN bit.
     *
     * Wake-Up Frame Enable
     */
    inline void clear_PMT_CONTROL_STATUS_RWKPKTEN() volatile
    {
        PMT_CONTROL_STATUS &= ~(1u << 2u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's RWKPKTEN bit.
     *
     * Wake-Up Frame Enable
     */
    inline void toggle_PMT_CONTROL_STATUS_RWKPKTEN() volatile
    {
        PMT_CONTROL_STATUS ^= 1u << 2u;
    }

    /**
     * Get PMT_CONTROL_STATUS's MGKPKTEN bit.
     *
     * Magic Packet Enable
     */
    inline bool get_PMT_CONTROL_STATUS_MGKPKTEN() volatile
    {
        return PMT_CONTROL_STATUS & (1u << 1u);
    }

    /**
     * Set PMT_CONTROL_STATUS's MGKPKTEN bit.
     *
     * Magic Packet Enable
     */
    inline void set_PMT_CONTROL_STATUS_MGKPKTEN() volatile
    {
        PMT_CONTROL_STATUS |= 1u << 1u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's MGKPKTEN bit.
     *
     * Magic Packet Enable
     */
    inline void clear_PMT_CONTROL_STATUS_MGKPKTEN() volatile
    {
        PMT_CONTROL_STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's MGKPKTEN bit.
     *
     * Magic Packet Enable
     */
    inline void toggle_PMT_CONTROL_STATUS_MGKPKTEN() volatile
    {
        PMT_CONTROL_STATUS ^= 1u << 1u;
    }

    /**
     * Get PMT_CONTROL_STATUS's PWRDWN bit.
     *
     * Power Down
     */
    inline bool get_PMT_CONTROL_STATUS_PWRDWN() volatile
    {
        return PMT_CONTROL_STATUS & (1u << 0u);
    }

    /**
     * Set PMT_CONTROL_STATUS's PWRDWN bit.
     *
     * Power Down
     */
    inline void set_PMT_CONTROL_STATUS_PWRDWN() volatile
    {
        PMT_CONTROL_STATUS |= 1u << 0u;
    }

    /**
     * Clear PMT_CONTROL_STATUS's PWRDWN bit.
     *
     * Power Down
     */
    inline void clear_PMT_CONTROL_STATUS_PWRDWN() volatile
    {
        PMT_CONTROL_STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle PMT_CONTROL_STATUS's PWRDWN bit.
     *
     * Power Down
     */
    inline void toggle_PMT_CONTROL_STATUS_PWRDWN() volatile
    {
        PMT_CONTROL_STATUS ^= 1u << 0u;
    }

    /**
     * Get all of PMT_CONTROL_STATUS's bit fields.
     *
     * (read-write) PMT Control and Status Register
     */
    inline void get_PMT_CONTROL_STATUS(bool &RWKFILTRST, bool &GLBLUCAST,
                                       bool &RWKPRCVD, bool &MGKPRCVD,
                                       bool &RWKPKTEN, bool &MGKPKTEN,
                                       bool &PWRDWN) volatile
    {
        uint32_t curr = PMT_CONTROL_STATUS;

        RWKFILTRST = curr & (1u << 31u);
        GLBLUCAST = curr & (1u << 9u);
        RWKPRCVD = curr & (1u << 6u);
        MGKPRCVD = curr & (1u << 5u);
        RWKPKTEN = curr & (1u << 2u);
        MGKPKTEN = curr & (1u << 1u);
        PWRDWN = curr & (1u << 0u);
    }

    /**
     * Set all of PMT_CONTROL_STATUS's bit fields.
     *
     * (read-write) PMT Control and Status Register
     */
    inline void set_PMT_CONTROL_STATUS(bool RWKFILTRST, bool GLBLUCAST,
                                       bool RWKPKTEN, bool MGKPKTEN,
                                       bool PWRDWN) volatile
    {
        uint32_t curr = PMT_CONTROL_STATUS;

        curr &= ~(0b1u << 31u);
        curr |= (RWKFILTRST & 0b1u) << 31u;
        curr &= ~(0b1u << 9u);
        curr |= (GLBLUCAST & 0b1u) << 9u;
        curr &= ~(0b1u << 2u);
        curr |= (RWKPKTEN & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (MGKPKTEN & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (PWRDWN & 0b1u) << 0u;

        PMT_CONTROL_STATUS = curr;
    }

    /**
     * Get INTERRUPT_STATUS's TSIS bit.
     *
     * Timestamp Interrupt Status
     */
    inline bool get_INTERRUPT_STATUS_TSIS() volatile
    {
        return INTERRUPT_STATUS & (1u << 9u);
    }

    /**
     * Get INTERRUPT_STATUS's MMCRXIPIS bit.
     *
     * MMC Receive Checksum Offload Interrupt Status
     */
    inline bool get_INTERRUPT_STATUS_MMCRXIPIS() volatile
    {
        return INTERRUPT_STATUS & (1u << 7u);
    }

    /**
     * Get INTERRUPT_STATUS's MMCTXIS bit.
     *
     * MMC Transmit Interrupt Status
     */
    inline bool get_INTERRUPT_STATUS_MMCTXIS() volatile
    {
        return INTERRUPT_STATUS & (1u << 6u);
    }

    /**
     * Get INTERRUPT_STATUS's MMCRXIS bit.
     *
     * MMC Receive Interrupt Status
     */
    inline bool get_INTERRUPT_STATUS_MMCRXIS() volatile
    {
        return INTERRUPT_STATUS & (1u << 5u);
    }

    /**
     * Get INTERRUPT_STATUS's MMCIS bit.
     *
     * MMC Interrupt Status
     */
    inline bool get_INTERRUPT_STATUS_MMCIS() volatile
    {
        return INTERRUPT_STATUS & (1u << 4u);
    }

    /**
     * Get INTERRUPT_STATUS's PMTIS bit.
     *
     * PMT Interrupt Status
     */
    inline bool get_INTERRUPT_STATUS_PMTIS() volatile
    {
        return INTERRUPT_STATUS & (1u << 3u);
    }

    /**
     * Get all of INTERRUPT_STATUS's bit fields.
     *
     * (read-only) Interrupt Register
     */
    inline void get_INTERRUPT_STATUS(bool &TSIS, bool &MMCRXIPIS,
                                     bool &MMCTXIS, bool &MMCRXIS, bool &MMCIS,
                                     bool &PMTIS) volatile
    {
        uint32_t curr = INTERRUPT_STATUS;

        TSIS = curr & (1u << 9u);
        MMCRXIPIS = curr & (1u << 7u);
        MMCTXIS = curr & (1u << 6u);
        MMCRXIS = curr & (1u << 5u);
        MMCIS = curr & (1u << 4u);
        PMTIS = curr & (1u << 3u);
    }

    /**
     * Get INTERRUPT_MASK's TSIM bit.
     *
     * Timestamp Interrupt Mask
     */
    inline bool get_INTERRUPT_MASK_TSIM() volatile
    {
        return INTERRUPT_MASK & (1u << 9u);
    }

    /**
     * Set INTERRUPT_MASK's TSIM bit.
     *
     * Timestamp Interrupt Mask
     */
    inline void set_INTERRUPT_MASK_TSIM() volatile
    {
        INTERRUPT_MASK |= 1u << 9u;
    }

    /**
     * Clear INTERRUPT_MASK's TSIM bit.
     *
     * Timestamp Interrupt Mask
     */
    inline void clear_INTERRUPT_MASK_TSIM() volatile
    {
        INTERRUPT_MASK &= ~(1u << 9u);
    }

    /**
     * Toggle INTERRUPT_MASK's TSIM bit.
     *
     * Timestamp Interrupt Mask
     */
    inline void toggle_INTERRUPT_MASK_TSIM() volatile
    {
        INTERRUPT_MASK ^= 1u << 9u;
    }

    /**
     * Get INTERRUPT_MASK's PMTIM bit.
     *
     * PMT Interrupt Mask
     */
    inline bool get_INTERRUPT_MASK_PMTIM() volatile
    {
        return INTERRUPT_MASK & (1u << 3u);
    }

    /**
     * Set INTERRUPT_MASK's PMTIM bit.
     *
     * PMT Interrupt Mask
     */
    inline void set_INTERRUPT_MASK_PMTIM() volatile
    {
        INTERRUPT_MASK |= 1u << 3u;
    }

    /**
     * Clear INTERRUPT_MASK's PMTIM bit.
     *
     * PMT Interrupt Mask
     */
    inline void clear_INTERRUPT_MASK_PMTIM() volatile
    {
        INTERRUPT_MASK &= ~(1u << 3u);
    }

    /**
     * Toggle INTERRUPT_MASK's PMTIM bit.
     *
     * PMT Interrupt Mask
     */
    inline void toggle_INTERRUPT_MASK_PMTIM() volatile
    {
        INTERRUPT_MASK ^= 1u << 3u;
    }

    /**
     * Get all of INTERRUPT_MASK's bit fields.
     *
     * (read-write) Interrupt Mask Register
     */
    inline void get_INTERRUPT_MASK(bool &TSIM, bool &PMTIM) volatile
    {
        uint32_t curr = INTERRUPT_MASK;

        TSIM = curr & (1u << 9u);
        PMTIM = curr & (1u << 3u);
    }

    /**
     * Set all of INTERRUPT_MASK's bit fields.
     *
     * (read-write) Interrupt Mask Register
     */
    inline void set_INTERRUPT_MASK(bool TSIM, bool PMTIM) volatile
    {
        uint32_t curr = INTERRUPT_MASK;

        curr &= ~(0b1u << 9u);
        curr |= (TSIM & 0b1u) << 9u;
        curr &= ~(0b1u << 3u);
        curr |= (PMTIM & 0b1u) << 3u;

        INTERRUPT_MASK = curr;
    }

    /**
     * Get MAC_ADDRESS0_HIGH's AE bit.
     *
     * Address Enable
     */
    inline bool get_MAC_ADDRESS0_HIGH_AE() volatile
    {
        return MAC_ADDRESS0_HIGH & (1u << 31u);
    }

    /**
     * Get MAC_ADDRESS0_HIGH's ADDRHI field.
     *
     * MAC Address0 [47:32]
     */
    inline uint16_t get_MAC_ADDRESS0_HIGH_ADDRHI() volatile
    {
        return (MAC_ADDRESS0_HIGH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MAC_ADDRESS0_HIGH's ADDRHI field.
     *
     * MAC Address0 [47:32]
     */
    inline void set_MAC_ADDRESS0_HIGH_ADDRHI(uint16_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS0_HIGH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MAC_ADDRESS0_HIGH = curr;
    }

    /**
     * Get all of MAC_ADDRESS0_HIGH's bit fields.
     *
     * (read-write) MAC Address0 High Register
     */
    inline void get_MAC_ADDRESS0_HIGH(bool &AE, uint16_t &ADDRHI) volatile
    {
        uint32_t curr = MAC_ADDRESS0_HIGH;

        AE = curr & (1u << 31u);
        ADDRHI = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get MAC_ADDRESS0_LOW's ADDRLO field.
     *
     * MAC Address0 [31:0]
     */
    inline uint32_t get_MAC_ADDRESS0_LOW_ADDRLO() volatile
    {
        return (MAC_ADDRESS0_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set MAC_ADDRESS0_LOW's ADDRLO field.
     *
     * MAC Address0 [31:0]
     */
    inline void set_MAC_ADDRESS0_LOW_ADDRLO(uint32_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS0_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        MAC_ADDRESS0_LOW = curr;
    }

    /**
     * Get MAC_ADDRESS1_HIGH's AE bit.
     *
     * Address Enable
     */
    inline bool get_MAC_ADDRESS1_HIGH_AE() volatile
    {
        return MAC_ADDRESS1_HIGH & (1u << 31u);
    }

    /**
     * Set MAC_ADDRESS1_HIGH's AE bit.
     *
     * Address Enable
     */
    inline void set_MAC_ADDRESS1_HIGH_AE() volatile
    {
        MAC_ADDRESS1_HIGH |= 1u << 31u;
    }

    /**
     * Clear MAC_ADDRESS1_HIGH's AE bit.
     *
     * Address Enable
     */
    inline void clear_MAC_ADDRESS1_HIGH_AE() volatile
    {
        MAC_ADDRESS1_HIGH &= ~(1u << 31u);
    }

    /**
     * Toggle MAC_ADDRESS1_HIGH's AE bit.
     *
     * Address Enable
     */
    inline void toggle_MAC_ADDRESS1_HIGH_AE() volatile
    {
        MAC_ADDRESS1_HIGH ^= 1u << 31u;
    }

    /**
     * Get MAC_ADDRESS1_HIGH's SA bit.
     *
     * Source Address
     */
    inline bool get_MAC_ADDRESS1_HIGH_SA() volatile
    {
        return MAC_ADDRESS1_HIGH & (1u << 30u);
    }

    /**
     * Set MAC_ADDRESS1_HIGH's SA bit.
     *
     * Source Address
     */
    inline void set_MAC_ADDRESS1_HIGH_SA() volatile
    {
        MAC_ADDRESS1_HIGH |= 1u << 30u;
    }

    /**
     * Clear MAC_ADDRESS1_HIGH's SA bit.
     *
     * Source Address
     */
    inline void clear_MAC_ADDRESS1_HIGH_SA() volatile
    {
        MAC_ADDRESS1_HIGH &= ~(1u << 30u);
    }

    /**
     * Toggle MAC_ADDRESS1_HIGH's SA bit.
     *
     * Source Address
     */
    inline void toggle_MAC_ADDRESS1_HIGH_SA() volatile
    {
        MAC_ADDRESS1_HIGH ^= 1u << 30u;
    }

    /**
     * Get MAC_ADDRESS1_HIGH's MBC field.
     *
     * Mask Byte Control
     */
    inline uint8_t get_MAC_ADDRESS1_HIGH_MBC() volatile
    {
        return (MAC_ADDRESS1_HIGH >> 24u) & 0b111111u;
    }

    /**
     * Set MAC_ADDRESS1_HIGH's MBC field.
     *
     * Mask Byte Control
     */
    inline void set_MAC_ADDRESS1_HIGH_MBC(uint8_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS1_HIGH;

        curr &= ~(0b111111u << 24u);
        curr |= (value & 0b111111u) << 24u;

        MAC_ADDRESS1_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS1_HIGH's ADDRHI field.
     *
     * MAC Address1 [47:32]
     */
    inline uint16_t get_MAC_ADDRESS1_HIGH_ADDRHI() volatile
    {
        return (MAC_ADDRESS1_HIGH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MAC_ADDRESS1_HIGH's ADDRHI field.
     *
     * MAC Address1 [47:32]
     */
    inline void set_MAC_ADDRESS1_HIGH_ADDRHI(uint16_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS1_HIGH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MAC_ADDRESS1_HIGH = curr;
    }

    /**
     * Get all of MAC_ADDRESS1_HIGH's bit fields.
     *
     * (read-write) MAC Address1 High Register
     */
    inline void get_MAC_ADDRESS1_HIGH(bool &AE, bool &SA, uint8_t &MBC,
                                      uint16_t &ADDRHI) volatile
    {
        uint32_t curr = MAC_ADDRESS1_HIGH;

        AE = curr & (1u << 31u);
        SA = curr & (1u << 30u);
        MBC = (curr >> 24u) & 0b111111u;
        ADDRHI = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of MAC_ADDRESS1_HIGH's bit fields.
     *
     * (read-write) MAC Address1 High Register
     */
    inline void set_MAC_ADDRESS1_HIGH(bool AE, bool SA, uint8_t MBC,
                                      uint16_t ADDRHI) volatile
    {
        uint32_t curr = MAC_ADDRESS1_HIGH;

        curr &= ~(0b1u << 31u);
        curr |= (AE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SA & 0b1u) << 30u;
        curr &= ~(0b111111u << 24u);
        curr |= (MBC & 0b111111u) << 24u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (ADDRHI & 0b1111111111111111u) << 0u;

        MAC_ADDRESS1_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS1_LOW's ADDRLO field.
     *
     * MAC Address1 [31:0]
     */
    inline uint32_t get_MAC_ADDRESS1_LOW_ADDRLO() volatile
    {
        return (MAC_ADDRESS1_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set MAC_ADDRESS1_LOW's ADDRLO field.
     *
     * MAC Address1 [31:0]
     */
    inline void set_MAC_ADDRESS1_LOW_ADDRLO(uint32_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS1_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        MAC_ADDRESS1_LOW = curr;
    }

    /**
     * Get MAC_ADDRESS2_HIGH's AE bit.
     *
     * Address Enable
     */
    inline bool get_MAC_ADDRESS2_HIGH_AE() volatile
    {
        return MAC_ADDRESS2_HIGH & (1u << 31u);
    }

    /**
     * Set MAC_ADDRESS2_HIGH's AE bit.
     *
     * Address Enable
     */
    inline void set_MAC_ADDRESS2_HIGH_AE() volatile
    {
        MAC_ADDRESS2_HIGH |= 1u << 31u;
    }

    /**
     * Clear MAC_ADDRESS2_HIGH's AE bit.
     *
     * Address Enable
     */
    inline void clear_MAC_ADDRESS2_HIGH_AE() volatile
    {
        MAC_ADDRESS2_HIGH &= ~(1u << 31u);
    }

    /**
     * Toggle MAC_ADDRESS2_HIGH's AE bit.
     *
     * Address Enable
     */
    inline void toggle_MAC_ADDRESS2_HIGH_AE() volatile
    {
        MAC_ADDRESS2_HIGH ^= 1u << 31u;
    }

    /**
     * Get MAC_ADDRESS2_HIGH's SA bit.
     *
     * Source Address
     */
    inline bool get_MAC_ADDRESS2_HIGH_SA() volatile
    {
        return MAC_ADDRESS2_HIGH & (1u << 30u);
    }

    /**
     * Set MAC_ADDRESS2_HIGH's SA bit.
     *
     * Source Address
     */
    inline void set_MAC_ADDRESS2_HIGH_SA() volatile
    {
        MAC_ADDRESS2_HIGH |= 1u << 30u;
    }

    /**
     * Clear MAC_ADDRESS2_HIGH's SA bit.
     *
     * Source Address
     */
    inline void clear_MAC_ADDRESS2_HIGH_SA() volatile
    {
        MAC_ADDRESS2_HIGH &= ~(1u << 30u);
    }

    /**
     * Toggle MAC_ADDRESS2_HIGH's SA bit.
     *
     * Source Address
     */
    inline void toggle_MAC_ADDRESS2_HIGH_SA() volatile
    {
        MAC_ADDRESS2_HIGH ^= 1u << 30u;
    }

    /**
     * Get MAC_ADDRESS2_HIGH's MBC field.
     *
     * Mask Byte Control
     */
    inline uint8_t get_MAC_ADDRESS2_HIGH_MBC() volatile
    {
        return (MAC_ADDRESS2_HIGH >> 24u) & 0b111111u;
    }

    /**
     * Set MAC_ADDRESS2_HIGH's MBC field.
     *
     * Mask Byte Control
     */
    inline void set_MAC_ADDRESS2_HIGH_MBC(uint8_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS2_HIGH;

        curr &= ~(0b111111u << 24u);
        curr |= (value & 0b111111u) << 24u;

        MAC_ADDRESS2_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS2_HIGH's ADDRHI field.
     *
     * MAC Address2 [47:32]
     */
    inline uint16_t get_MAC_ADDRESS2_HIGH_ADDRHI() volatile
    {
        return (MAC_ADDRESS2_HIGH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MAC_ADDRESS2_HIGH's ADDRHI field.
     *
     * MAC Address2 [47:32]
     */
    inline void set_MAC_ADDRESS2_HIGH_ADDRHI(uint16_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS2_HIGH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MAC_ADDRESS2_HIGH = curr;
    }

    /**
     * Get all of MAC_ADDRESS2_HIGH's bit fields.
     *
     * (read-write) MAC Address2 High Register
     */
    inline void get_MAC_ADDRESS2_HIGH(bool &AE, bool &SA, uint8_t &MBC,
                                      uint16_t &ADDRHI) volatile
    {
        uint32_t curr = MAC_ADDRESS2_HIGH;

        AE = curr & (1u << 31u);
        SA = curr & (1u << 30u);
        MBC = (curr >> 24u) & 0b111111u;
        ADDRHI = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of MAC_ADDRESS2_HIGH's bit fields.
     *
     * (read-write) MAC Address2 High Register
     */
    inline void set_MAC_ADDRESS2_HIGH(bool AE, bool SA, uint8_t MBC,
                                      uint16_t ADDRHI) volatile
    {
        uint32_t curr = MAC_ADDRESS2_HIGH;

        curr &= ~(0b1u << 31u);
        curr |= (AE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SA & 0b1u) << 30u;
        curr &= ~(0b111111u << 24u);
        curr |= (MBC & 0b111111u) << 24u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (ADDRHI & 0b1111111111111111u) << 0u;

        MAC_ADDRESS2_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS2_LOW's ADDRLO field.
     *
     * MAC Address2 [31:0]
     */
    inline uint32_t get_MAC_ADDRESS2_LOW_ADDRLO() volatile
    {
        return (MAC_ADDRESS2_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set MAC_ADDRESS2_LOW's ADDRLO field.
     *
     * MAC Address2 [31:0]
     */
    inline void set_MAC_ADDRESS2_LOW_ADDRLO(uint32_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS2_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        MAC_ADDRESS2_LOW = curr;
    }

    /**
     * Get MAC_ADDRESS3_HIGH's AE bit.
     *
     * Address Enable
     */
    inline bool get_MAC_ADDRESS3_HIGH_AE() volatile
    {
        return MAC_ADDRESS3_HIGH & (1u << 31u);
    }

    /**
     * Set MAC_ADDRESS3_HIGH's AE bit.
     *
     * Address Enable
     */
    inline void set_MAC_ADDRESS3_HIGH_AE() volatile
    {
        MAC_ADDRESS3_HIGH |= 1u << 31u;
    }

    /**
     * Clear MAC_ADDRESS3_HIGH's AE bit.
     *
     * Address Enable
     */
    inline void clear_MAC_ADDRESS3_HIGH_AE() volatile
    {
        MAC_ADDRESS3_HIGH &= ~(1u << 31u);
    }

    /**
     * Toggle MAC_ADDRESS3_HIGH's AE bit.
     *
     * Address Enable
     */
    inline void toggle_MAC_ADDRESS3_HIGH_AE() volatile
    {
        MAC_ADDRESS3_HIGH ^= 1u << 31u;
    }

    /**
     * Get MAC_ADDRESS3_HIGH's SA bit.
     *
     * Source Address
     */
    inline bool get_MAC_ADDRESS3_HIGH_SA() volatile
    {
        return MAC_ADDRESS3_HIGH & (1u << 30u);
    }

    /**
     * Set MAC_ADDRESS3_HIGH's SA bit.
     *
     * Source Address
     */
    inline void set_MAC_ADDRESS3_HIGH_SA() volatile
    {
        MAC_ADDRESS3_HIGH |= 1u << 30u;
    }

    /**
     * Clear MAC_ADDRESS3_HIGH's SA bit.
     *
     * Source Address
     */
    inline void clear_MAC_ADDRESS3_HIGH_SA() volatile
    {
        MAC_ADDRESS3_HIGH &= ~(1u << 30u);
    }

    /**
     * Toggle MAC_ADDRESS3_HIGH's SA bit.
     *
     * Source Address
     */
    inline void toggle_MAC_ADDRESS3_HIGH_SA() volatile
    {
        MAC_ADDRESS3_HIGH ^= 1u << 30u;
    }

    /**
     * Get MAC_ADDRESS3_HIGH's MBC field.
     *
     * Mask Byte Control
     */
    inline uint8_t get_MAC_ADDRESS3_HIGH_MBC() volatile
    {
        return (MAC_ADDRESS3_HIGH >> 24u) & 0b111111u;
    }

    /**
     * Set MAC_ADDRESS3_HIGH's MBC field.
     *
     * Mask Byte Control
     */
    inline void set_MAC_ADDRESS3_HIGH_MBC(uint8_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS3_HIGH;

        curr &= ~(0b111111u << 24u);
        curr |= (value & 0b111111u) << 24u;

        MAC_ADDRESS3_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS3_HIGH's ADDRHI field.
     *
     * MAC Address3 [47:32]
     */
    inline uint16_t get_MAC_ADDRESS3_HIGH_ADDRHI() volatile
    {
        return (MAC_ADDRESS3_HIGH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MAC_ADDRESS3_HIGH's ADDRHI field.
     *
     * MAC Address3 [47:32]
     */
    inline void set_MAC_ADDRESS3_HIGH_ADDRHI(uint16_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS3_HIGH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MAC_ADDRESS3_HIGH = curr;
    }

    /**
     * Get all of MAC_ADDRESS3_HIGH's bit fields.
     *
     * (read-write) MAC Address3 High Register
     */
    inline void get_MAC_ADDRESS3_HIGH(bool &AE, bool &SA, uint8_t &MBC,
                                      uint16_t &ADDRHI) volatile
    {
        uint32_t curr = MAC_ADDRESS3_HIGH;

        AE = curr & (1u << 31u);
        SA = curr & (1u << 30u);
        MBC = (curr >> 24u) & 0b111111u;
        ADDRHI = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of MAC_ADDRESS3_HIGH's bit fields.
     *
     * (read-write) MAC Address3 High Register
     */
    inline void set_MAC_ADDRESS3_HIGH(bool AE, bool SA, uint8_t MBC,
                                      uint16_t ADDRHI) volatile
    {
        uint32_t curr = MAC_ADDRESS3_HIGH;

        curr &= ~(0b1u << 31u);
        curr |= (AE & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (SA & 0b1u) << 30u;
        curr &= ~(0b111111u << 24u);
        curr |= (MBC & 0b111111u) << 24u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (ADDRHI & 0b1111111111111111u) << 0u;

        MAC_ADDRESS3_HIGH = curr;
    }

    /**
     * Get MAC_ADDRESS3_LOW's ADDRLO field.
     *
     * MAC Address3 [31:0]
     */
    inline uint32_t get_MAC_ADDRESS3_LOW_ADDRLO() volatile
    {
        return (MAC_ADDRESS3_LOW >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set MAC_ADDRESS3_LOW's ADDRLO field.
     *
     * MAC Address3 [31:0]
     */
    inline void set_MAC_ADDRESS3_LOW_ADDRLO(uint32_t value) volatile
    {
        uint32_t curr = MAC_ADDRESS3_LOW;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        MAC_ADDRESS3_LOW = curr;
    }

    /**
     * Get MMC_CONTROL's UCDBC bit.
     *
     * Update MMC Counters for Dropped Broadcast Frames
     */
    inline bool get_MMC_CONTROL_UCDBC() volatile
    {
        return MMC_CONTROL & (1u << 8u);
    }

    /**
     * Set MMC_CONTROL's UCDBC bit.
     *
     * Update MMC Counters for Dropped Broadcast Frames
     */
    inline void set_MMC_CONTROL_UCDBC() volatile
    {
        MMC_CONTROL |= 1u << 8u;
    }

    /**
     * Clear MMC_CONTROL's UCDBC bit.
     *
     * Update MMC Counters for Dropped Broadcast Frames
     */
    inline void clear_MMC_CONTROL_UCDBC() volatile
    {
        MMC_CONTROL &= ~(1u << 8u);
    }

    /**
     * Toggle MMC_CONTROL's UCDBC bit.
     *
     * Update MMC Counters for Dropped Broadcast Frames
     */
    inline void toggle_MMC_CONTROL_UCDBC() volatile
    {
        MMC_CONTROL ^= 1u << 8u;
    }

    /**
     * Get MMC_CONTROL's CNTPRSTLVL bit.
     *
     * Full-Half Preset
     */
    inline bool get_MMC_CONTROL_CNTPRSTLVL() volatile
    {
        return MMC_CONTROL & (1u << 5u);
    }

    /**
     * Set MMC_CONTROL's CNTPRSTLVL bit.
     *
     * Full-Half Preset
     */
    inline void set_MMC_CONTROL_CNTPRSTLVL() volatile
    {
        MMC_CONTROL |= 1u << 5u;
    }

    /**
     * Clear MMC_CONTROL's CNTPRSTLVL bit.
     *
     * Full-Half Preset
     */
    inline void clear_MMC_CONTROL_CNTPRSTLVL() volatile
    {
        MMC_CONTROL &= ~(1u << 5u);
    }

    /**
     * Toggle MMC_CONTROL's CNTPRSTLVL bit.
     *
     * Full-Half Preset
     */
    inline void toggle_MMC_CONTROL_CNTPRSTLVL() volatile
    {
        MMC_CONTROL ^= 1u << 5u;
    }

    /**
     * Get MMC_CONTROL's CNTPRST bit.
     *
     * Counters Preset
     */
    inline bool get_MMC_CONTROL_CNTPRST() volatile
    {
        return MMC_CONTROL & (1u << 4u);
    }

    /**
     * Set MMC_CONTROL's CNTPRST bit.
     *
     * Counters Preset
     */
    inline void set_MMC_CONTROL_CNTPRST() volatile
    {
        MMC_CONTROL |= 1u << 4u;
    }

    /**
     * Clear MMC_CONTROL's CNTPRST bit.
     *
     * Counters Preset
     */
    inline void clear_MMC_CONTROL_CNTPRST() volatile
    {
        MMC_CONTROL &= ~(1u << 4u);
    }

    /**
     * Toggle MMC_CONTROL's CNTPRST bit.
     *
     * Counters Preset
     */
    inline void toggle_MMC_CONTROL_CNTPRST() volatile
    {
        MMC_CONTROL ^= 1u << 4u;
    }

    /**
     * Get MMC_CONTROL's CNTFREEZ bit.
     *
     * MMC Counter Freeze
     */
    inline bool get_MMC_CONTROL_CNTFREEZ() volatile
    {
        return MMC_CONTROL & (1u << 3u);
    }

    /**
     * Set MMC_CONTROL's CNTFREEZ bit.
     *
     * MMC Counter Freeze
     */
    inline void set_MMC_CONTROL_CNTFREEZ() volatile
    {
        MMC_CONTROL |= 1u << 3u;
    }

    /**
     * Clear MMC_CONTROL's CNTFREEZ bit.
     *
     * MMC Counter Freeze
     */
    inline void clear_MMC_CONTROL_CNTFREEZ() volatile
    {
        MMC_CONTROL &= ~(1u << 3u);
    }

    /**
     * Toggle MMC_CONTROL's CNTFREEZ bit.
     *
     * MMC Counter Freeze
     */
    inline void toggle_MMC_CONTROL_CNTFREEZ() volatile
    {
        MMC_CONTROL ^= 1u << 3u;
    }

    /**
     * Get MMC_CONTROL's RSTONRD bit.
     *
     * Reset on Read
     */
    inline bool get_MMC_CONTROL_RSTONRD() volatile
    {
        return MMC_CONTROL & (1u << 2u);
    }

    /**
     * Set MMC_CONTROL's RSTONRD bit.
     *
     * Reset on Read
     */
    inline void set_MMC_CONTROL_RSTONRD() volatile
    {
        MMC_CONTROL |= 1u << 2u;
    }

    /**
     * Clear MMC_CONTROL's RSTONRD bit.
     *
     * Reset on Read
     */
    inline void clear_MMC_CONTROL_RSTONRD() volatile
    {
        MMC_CONTROL &= ~(1u << 2u);
    }

    /**
     * Toggle MMC_CONTROL's RSTONRD bit.
     *
     * Reset on Read
     */
    inline void toggle_MMC_CONTROL_RSTONRD() volatile
    {
        MMC_CONTROL ^= 1u << 2u;
    }

    /**
     * Get MMC_CONTROL's CNTSTOPRO bit.
     *
     * Counters Stop Rollover
     */
    inline bool get_MMC_CONTROL_CNTSTOPRO() volatile
    {
        return MMC_CONTROL & (1u << 1u);
    }

    /**
     * Set MMC_CONTROL's CNTSTOPRO bit.
     *
     * Counters Stop Rollover
     */
    inline void set_MMC_CONTROL_CNTSTOPRO() volatile
    {
        MMC_CONTROL |= 1u << 1u;
    }

    /**
     * Clear MMC_CONTROL's CNTSTOPRO bit.
     *
     * Counters Stop Rollover
     */
    inline void clear_MMC_CONTROL_CNTSTOPRO() volatile
    {
        MMC_CONTROL &= ~(1u << 1u);
    }

    /**
     * Toggle MMC_CONTROL's CNTSTOPRO bit.
     *
     * Counters Stop Rollover
     */
    inline void toggle_MMC_CONTROL_CNTSTOPRO() volatile
    {
        MMC_CONTROL ^= 1u << 1u;
    }

    /**
     * Get MMC_CONTROL's CNTRST bit.
     *
     * Counters Reset
     */
    inline bool get_MMC_CONTROL_CNTRST() volatile
    {
        return MMC_CONTROL & (1u << 0u);
    }

    /**
     * Set MMC_CONTROL's CNTRST bit.
     *
     * Counters Reset
     */
    inline void set_MMC_CONTROL_CNTRST() volatile
    {
        MMC_CONTROL |= 1u << 0u;
    }

    /**
     * Clear MMC_CONTROL's CNTRST bit.
     *
     * Counters Reset
     */
    inline void clear_MMC_CONTROL_CNTRST() volatile
    {
        MMC_CONTROL &= ~(1u << 0u);
    }

    /**
     * Toggle MMC_CONTROL's CNTRST bit.
     *
     * Counters Reset
     */
    inline void toggle_MMC_CONTROL_CNTRST() volatile
    {
        MMC_CONTROL ^= 1u << 0u;
    }

    /**
     * Get all of MMC_CONTROL's bit fields.
     *
     * (read-write) MMC Control Register
     */
    inline void get_MMC_CONTROL(bool &UCDBC, bool &CNTPRSTLVL, bool &CNTPRST,
                                bool &CNTFREEZ, bool &RSTONRD, bool &CNTSTOPRO,
                                bool &CNTRST) volatile
    {
        uint32_t curr = MMC_CONTROL;

        UCDBC = curr & (1u << 8u);
        CNTPRSTLVL = curr & (1u << 5u);
        CNTPRST = curr & (1u << 4u);
        CNTFREEZ = curr & (1u << 3u);
        RSTONRD = curr & (1u << 2u);
        CNTSTOPRO = curr & (1u << 1u);
        CNTRST = curr & (1u << 0u);
    }

    /**
     * Set all of MMC_CONTROL's bit fields.
     *
     * (read-write) MMC Control Register
     */
    inline void set_MMC_CONTROL(bool UCDBC, bool CNTPRSTLVL, bool CNTPRST,
                                bool CNTFREEZ, bool RSTONRD, bool CNTSTOPRO,
                                bool CNTRST) volatile
    {
        uint32_t curr = MMC_CONTROL;

        curr &= ~(0b1u << 8u);
        curr |= (UCDBC & 0b1u) << 8u;
        curr &= ~(0b1u << 5u);
        curr |= (CNTPRSTLVL & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CNTPRST & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CNTFREEZ & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RSTONRD & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CNTSTOPRO & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CNTRST & 0b1u) << 0u;

        MMC_CONTROL = curr;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXCTRLFIS bit.
     *
     * MMC Receive Control Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXCTRLFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 25u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXRCVERRFIS bit.
     *
     * MMC Receive Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXRCVERRFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 24u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXWDOGFIS bit.
     *
     * MMC Receive Watchdog Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXWDOGFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 23u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXVLANGBFIS bit.
     *
     * MMC Receive VLAN Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXVLANGBFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 22u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXFOVFIS bit.
     *
     * MMC Receive FIFO Overflow Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXFOVFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 21u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXPAUSFIS bit.
     *
     * MMC Receive Pause Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXPAUSFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 20u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXORANGEFIS bit.
     *
     * MMC Receive Out Of Range Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXORANGEFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 19u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXLENERFIS bit.
     *
     * MMC Receive Length Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXLENERFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 18u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXUCGFIS bit.
     *
     * MMC Receive Unicast Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXUCGFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 17u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX1024TMAXOCTGBFIS bit.
     *
     * MMC Receive 1024 to Maximum Octet Good Bad Frame Counter Interrupt
     * Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RX1024TMAXOCTGBFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 16u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX512T1023OCTGBFIS bit.
     *
     * MMC Receive 512 to 1023 Octet Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RX512T1023OCTGBFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 15u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX256T511OCTGBFIS bit.
     *
     * MMC Receive 256 to 511 Octet Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RX256T511OCTGBFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 14u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX128T255OCTGBFIS bit.
     *
     * MMC Receive 128 to 255 Octet Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RX128T255OCTGBFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 13u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX65T127OCTGBFIS bit.
     *
     * MMC Receive 65 to 127 Octet Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RX65T127OCTGBFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 12u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RX64OCTGBFIS bit.
     *
     * MMC Receive 64 Octet Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RX64OCTGBFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 11u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXOSIZEGFIS bit.
     *
     * MMC Receive Oversize Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXOSIZEGFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 10u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXUSIZEGFIS bit.
     *
     * MMC Receive Undersize Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXUSIZEGFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 9u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXJABERFIS bit.
     *
     * MMC Receive Jabber Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXJABERFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 8u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXRUNTFIS bit.
     *
     * MMC Receive Runt Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXRUNTFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 7u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXALGNERFIS bit.
     *
     * MMC Receive Alignment Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXALGNERFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 6u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXCRCERFIS bit.
     *
     * MMC Receive CRC Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXCRCERFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 5u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXMCGFIS bit.
     *
     * MMC Receive Multicast Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXMCGFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 4u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXBCGFIS bit.
     *
     * MMC Receive Broadcast Good Frame Counter Interrupt Status.
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXBCGFIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 3u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXGOCTIS bit.
     *
     * MMC Receive Good Octet Counter Interrupt Status.
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXGOCTIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 2u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXGBOCTIS bit.
     *
     * MMC Receive Good Bad Octet Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXGBOCTIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 1u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT's RXGBFRMIS bit.
     *
     * MMC Receive Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_RXGBFRMIS() volatile
    {
        return MMC_RECEIVE_INTERRUPT & (1u << 0u);
    }

    /**
     * Get all of MMC_RECEIVE_INTERRUPT's bit fields.
     *
     * (read-only) MMC Receive Interrupt Register
     */
    inline void get_MMC_RECEIVE_INTERRUPT(
        bool &RXCTRLFIS, bool &RXRCVERRFIS, bool &RXWDOGFIS, bool &RXVLANGBFIS,
        bool &RXFOVFIS, bool &RXPAUSFIS, bool &RXORANGEFIS, bool &RXLENERFIS,
        bool &RXUCGFIS, bool &RX1024TMAXOCTGBFIS, bool &RX512T1023OCTGBFIS,
        bool &RX256T511OCTGBFIS, bool &RX128T255OCTGBFIS,
        bool &RX65T127OCTGBFIS, bool &RX64OCTGBFIS, bool &RXOSIZEGFIS,
        bool &RXUSIZEGFIS, bool &RXJABERFIS, bool &RXRUNTFIS,
        bool &RXALGNERFIS, bool &RXCRCERFIS, bool &RXMCGFIS, bool &RXBCGFIS,
        bool &RXGOCTIS, bool &RXGBOCTIS, bool &RXGBFRMIS) volatile
    {
        uint32_t curr = MMC_RECEIVE_INTERRUPT;

        RXCTRLFIS = curr & (1u << 25u);
        RXRCVERRFIS = curr & (1u << 24u);
        RXWDOGFIS = curr & (1u << 23u);
        RXVLANGBFIS = curr & (1u << 22u);
        RXFOVFIS = curr & (1u << 21u);
        RXPAUSFIS = curr & (1u << 20u);
        RXORANGEFIS = curr & (1u << 19u);
        RXLENERFIS = curr & (1u << 18u);
        RXUCGFIS = curr & (1u << 17u);
        RX1024TMAXOCTGBFIS = curr & (1u << 16u);
        RX512T1023OCTGBFIS = curr & (1u << 15u);
        RX256T511OCTGBFIS = curr & (1u << 14u);
        RX128T255OCTGBFIS = curr & (1u << 13u);
        RX65T127OCTGBFIS = curr & (1u << 12u);
        RX64OCTGBFIS = curr & (1u << 11u);
        RXOSIZEGFIS = curr & (1u << 10u);
        RXUSIZEGFIS = curr & (1u << 9u);
        RXJABERFIS = curr & (1u << 8u);
        RXRUNTFIS = curr & (1u << 7u);
        RXALGNERFIS = curr & (1u << 6u);
        RXCRCERFIS = curr & (1u << 5u);
        RXMCGFIS = curr & (1u << 4u);
        RXBCGFIS = curr & (1u << 3u);
        RXGOCTIS = curr & (1u << 2u);
        RXGBOCTIS = curr & (1u << 1u);
        RXGBFRMIS = curr & (1u << 0u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXOSIZEGFIS bit.
     *
     * MMC Transmit Oversize Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXOSIZEGFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 25u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXVLANGFIS bit.
     *
     * MMC Transmit VLAN Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXVLANGFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 24u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXPAUSFIS bit.
     *
     * MMC Transmit Pause Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXPAUSFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 23u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXEXDEFFIS bit.
     *
     * MMC Transmit Excessive Deferral Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXEXDEFFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 22u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXGFRMIS bit.
     *
     * MMC Transmit Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXGFRMIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 21u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXGOCTIS bit.
     *
     * MMC Transmit Good Octet Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXGOCTIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 20u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXCARERFIS bit.
     *
     * MMC Transmit Carrier Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXCARERFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 19u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXEXCOLFIS bit.
     *
     * MMC Transmit Excessive Collision Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXEXCOLFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 18u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXLATCOLFIS bit.
     *
     * MMC Transmit Late Collision Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXLATCOLFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 17u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXDEFFIS bit.
     *
     * MMC Transmit Deferred Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXDEFFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 16u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXMCOLGFIS bit.
     *
     * MMC Transmit Multiple Collision Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXMCOLGFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 15u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXSCOLGFIS bit.
     *
     * MMC Transmit Single Collision Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXSCOLGFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 14u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXUFLOWERFIS bit.
     *
     * MMC Transmit Underflow Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXUFLOWERFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 13u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXBCGBFIS bit.
     *
     * MMC Transmit Broadcast Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXBCGBFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 12u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXMCGBFIS bit.
     *
     * MMC Transmit Multicast Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXMCGBFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 11u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXUCGBFIS bit.
     *
     * MMC Transmit Unicast Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXUCGBFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 10u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX1024TMAXOCTGBFIS bit.
     *
     * MMC Transmit 1024 to Maximum Octet Good Bad Frame Counter Interrupt
     * Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TX1024TMAXOCTGBFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 9u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX512T1023OCTGBFIS bit.
     *
     * MMC Transmit 512 to 1023 Octet Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TX512T1023OCTGBFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 8u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX256T511OCTGBFIS bit.
     *
     * MMC Transmit 256 to 511 Octet Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TX256T511OCTGBFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 7u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX128T255OCTGBFIS bit.
     *
     * MMC Transmit 128 to 255 Octet Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TX128T255OCTGBFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 6u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX65T127OCTGBFIS bit.
     *
     * MMC Transmit 65 to 127 Octet Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TX65T127OCTGBFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 5u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TX64OCTGBFIS bit.
     *
     * MMC Transmit 64 Octet Good Bad Frame Counter Interrupt Status.
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TX64OCTGBFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 4u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXMCGFIS bit.
     *
     * MMC Transmit Multicast Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXMCGFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 3u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXBCGFIS bit.
     *
     * MMC Transmit Broadcast Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXBCGFIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 2u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXGBFRMIS bit.
     *
     * MMC Transmit Good Bad Frame Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXGBFRMIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 1u);
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT's TXGBOCTIS bit.
     *
     * MMC Transmit Good Bad Octet Counter Interrupt Status
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_TXGBOCTIS() volatile
    {
        return MMC_TRANSMIT_INTERRUPT & (1u << 0u);
    }

    /**
     * Get all of MMC_TRANSMIT_INTERRUPT's bit fields.
     *
     * (read-only) MMC Transmit Interrupt Register
     */
    inline void get_MMC_TRANSMIT_INTERRUPT(
        bool &TXOSIZEGFIS, bool &TXVLANGFIS, bool &TXPAUSFIS, bool &TXEXDEFFIS,
        bool &TXGFRMIS, bool &TXGOCTIS, bool &TXCARERFIS, bool &TXEXCOLFIS,
        bool &TXLATCOLFIS, bool &TXDEFFIS, bool &TXMCOLGFIS, bool &TXSCOLGFIS,
        bool &TXUFLOWERFIS, bool &TXBCGBFIS, bool &TXMCGBFIS, bool &TXUCGBFIS,
        bool &TX1024TMAXOCTGBFIS, bool &TX512T1023OCTGBFIS,
        bool &TX256T511OCTGBFIS, bool &TX128T255OCTGBFIS,
        bool &TX65T127OCTGBFIS, bool &TX64OCTGBFIS, bool &TXMCGFIS,
        bool &TXBCGFIS, bool &TXGBFRMIS, bool &TXGBOCTIS) volatile
    {
        uint32_t curr = MMC_TRANSMIT_INTERRUPT;

        TXOSIZEGFIS = curr & (1u << 25u);
        TXVLANGFIS = curr & (1u << 24u);
        TXPAUSFIS = curr & (1u << 23u);
        TXEXDEFFIS = curr & (1u << 22u);
        TXGFRMIS = curr & (1u << 21u);
        TXGOCTIS = curr & (1u << 20u);
        TXCARERFIS = curr & (1u << 19u);
        TXEXCOLFIS = curr & (1u << 18u);
        TXLATCOLFIS = curr & (1u << 17u);
        TXDEFFIS = curr & (1u << 16u);
        TXMCOLGFIS = curr & (1u << 15u);
        TXSCOLGFIS = curr & (1u << 14u);
        TXUFLOWERFIS = curr & (1u << 13u);
        TXBCGBFIS = curr & (1u << 12u);
        TXMCGBFIS = curr & (1u << 11u);
        TXUCGBFIS = curr & (1u << 10u);
        TX1024TMAXOCTGBFIS = curr & (1u << 9u);
        TX512T1023OCTGBFIS = curr & (1u << 8u);
        TX256T511OCTGBFIS = curr & (1u << 7u);
        TX128T255OCTGBFIS = curr & (1u << 6u);
        TX65T127OCTGBFIS = curr & (1u << 5u);
        TX64OCTGBFIS = curr & (1u << 4u);
        TXMCGFIS = curr & (1u << 3u);
        TXBCGFIS = curr & (1u << 2u);
        TXGBFRMIS = curr & (1u << 1u);
        TXGBOCTIS = curr & (1u << 0u);
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXCTRLFIM bit.
     *
     * MMC Receive Control Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 25u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXCTRLFIM bit.
     *
     * MMC Receive Control Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 25u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXCTRLFIM bit.
     *
     * MMC Receive Control Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 25u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXCTRLFIM bit.
     *
     * MMC Receive Control Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXCTRLFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 25u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXRCVERRFIM bit.
     *
     * MMC Receive Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 24u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXRCVERRFIM bit.
     *
     * MMC Receive Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 24u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXRCVERRFIM bit.
     *
     * MMC Receive Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 24u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXRCVERRFIM bit.
     *
     * MMC Receive Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXRCVERRFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 24u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXWDOGFIM bit.
     *
     * MMC Receive Watchdog Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 23u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXWDOGFIM bit.
     *
     * MMC Receive Watchdog Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 23u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXWDOGFIM bit.
     *
     * MMC Receive Watchdog Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 23u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXWDOGFIM bit.
     *
     * MMC Receive Watchdog Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXWDOGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 23u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXVLANGBFIM bit.
     *
     * MMC Receive VLAN Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 22u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXVLANGBFIM bit.
     *
     * MMC Receive VLAN Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 22u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXVLANGBFIM bit.
     *
     * MMC Receive VLAN Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 22u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXVLANGBFIM bit.
     *
     * MMC Receive VLAN Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXVLANGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 22u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXFOVFIM bit.
     *
     * MMC Receive FIFO Overflow Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 21u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXFOVFIM bit.
     *
     * MMC Receive FIFO Overflow Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 21u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXFOVFIM bit.
     *
     * MMC Receive FIFO Overflow Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 21u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXFOVFIM bit.
     *
     * MMC Receive FIFO Overflow Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXFOVFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 21u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXPAUSFIM bit.
     *
     * MMC Receive Pause Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 20u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXPAUSFIM bit.
     *
     * MMC Receive Pause Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 20u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXPAUSFIM bit.
     *
     * MMC Receive Pause Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 20u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXPAUSFIM bit.
     *
     * MMC Receive Pause Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXPAUSFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 20u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXORANGEFIM bit.
     *
     * MMC Receive Out Of Range Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 19u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXORANGEFIM bit.
     *
     * MMC Receive Out Of Range Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 19u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXORANGEFIM bit.
     *
     * MMC Receive Out Of Range Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 19u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXORANGEFIM bit.
     *
     * MMC Receive Out Of Range Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXORANGEFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 19u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXLENERFIM bit.
     *
     * MMC Receive Length Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 18u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXLENERFIM bit.
     *
     * MMC Receive Length Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 18u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXLENERFIM bit.
     *
     * MMC Receive Length Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 18u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXLENERFIM bit.
     *
     * MMC Receive Length Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXLENERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 18u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXUCGFIM bit.
     *
     * MMC Receive Unicast Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 17u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXUCGFIM bit.
     *
     * MMC Receive Unicast Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 17u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXUCGFIM bit.
     *
     * MMC Receive Unicast Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 17u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXUCGFIM bit.
     *
     * MMC Receive Unicast Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXUCGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 17u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX1024TMAXOCTGBFIM bit.
     *
     * MMC Receive 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 16u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX1024TMAXOCTGBFIM bit.
     *
     * MMC Receive 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 16u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX1024TMAXOCTGBFIM bit.
     *
     * MMC Receive 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 16u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX1024TMAXOCTGBFIM bit.
     *
     * MMC Receive 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX1024TMAXOCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 16u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX512T1023OCTGBFIM bit.
     *
     * MMC Receive 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 15u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX512T1023OCTGBFIM bit.
     *
     * MMC Receive 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 15u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX512T1023OCTGBFIM bit.
     *
     * MMC Receive 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 15u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX512T1023OCTGBFIM bit.
     *
     * MMC Receive 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX512T1023OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 15u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX256T511OCTGBFIM bit.
     *
     * MMC Receive 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 14u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX256T511OCTGBFIM bit.
     *
     * MMC Receive 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 14u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX256T511OCTGBFIM bit.
     *
     * MMC Receive 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 14u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX256T511OCTGBFIM bit.
     *
     * MMC Receive 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX256T511OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 14u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX128T255OCTGBFIM bit.
     *
     * MMC Receive 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 13u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX128T255OCTGBFIM bit.
     *
     * MMC Receive 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 13u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX128T255OCTGBFIM bit.
     *
     * MMC Receive 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 13u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX128T255OCTGBFIM bit.
     *
     * MMC Receive 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX128T255OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 13u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX65T127OCTGBFIM bit.
     *
     * MMC Receive 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 12u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX65T127OCTGBFIM bit.
     *
     * MMC Receive 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 12u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX65T127OCTGBFIM bit.
     *
     * MMC Receive 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 12u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX65T127OCTGBFIM bit.
     *
     * MMC Receive 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX65T127OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 12u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RX64OCTGBFIM bit.
     *
     * MMC Receive 64 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 11u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RX64OCTGBFIM bit.
     *
     * MMC Receive 64 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 11u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RX64OCTGBFIM bit.
     *
     * MMC Receive 64 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 11u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RX64OCTGBFIM bit.
     *
     * MMC Receive 64 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RX64OCTGBFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 11u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXOSIZEGFIM bit.
     *
     * MMC Receive Oversize Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 10u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXOSIZEGFIM bit.
     *
     * MMC Receive Oversize Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 10u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXOSIZEGFIM bit.
     *
     * MMC Receive Oversize Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 10u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXOSIZEGFIM bit.
     *
     * MMC Receive Oversize Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXOSIZEGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 10u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXUSIZEGFIM bit.
     *
     * MMC Receive Undersize Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 9u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXUSIZEGFIM bit.
     *
     * MMC Receive Undersize Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 9u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXUSIZEGFIM bit.
     *
     * MMC Receive Undersize Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 9u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXUSIZEGFIM bit.
     *
     * MMC Receive Undersize Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXUSIZEGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 9u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXJABERFIM bit.
     *
     * MMC Receive Jabber Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 8u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXJABERFIM bit.
     *
     * MMC Receive Jabber Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 8u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXJABERFIM bit.
     *
     * MMC Receive Jabber Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 8u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXJABERFIM bit.
     *
     * MMC Receive Jabber Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXJABERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 8u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXRUNTFIM bit.
     *
     * MMC Receive Runt Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 7u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXRUNTFIM bit.
     *
     * MMC Receive Runt Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 7u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXRUNTFIM bit.
     *
     * MMC Receive Runt Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 7u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXRUNTFIM bit.
     *
     * MMC Receive Runt Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXRUNTFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 7u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXALGNERFIM bit.
     *
     * MMC Receive Alignment Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 6u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXALGNERFIM bit.
     *
     * MMC Receive Alignment Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 6u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXALGNERFIM bit.
     *
     * MMC Receive Alignment Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 6u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXALGNERFIM bit.
     *
     * MMC Receive Alignment Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXALGNERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 6u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXCRCERFIM bit.
     *
     * MMC Receive CRC Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 5u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXCRCERFIM bit.
     *
     * MMC Receive CRC Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 5u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXCRCERFIM bit.
     *
     * MMC Receive CRC Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 5u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXCRCERFIM bit.
     *
     * MMC Receive CRC Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXCRCERFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 5u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXMCGFIM bit.
     *
     * MMC Receive Multicast Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 4u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXMCGFIM bit.
     *
     * MMC Receive Multicast Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 4u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXMCGFIM bit.
     *
     * MMC Receive Multicast Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 4u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXMCGFIM bit.
     *
     * MMC Receive Multicast Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXMCGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 4u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXBCGFIM bit.
     *
     * MMC Receive Broadcast Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 3u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXBCGFIM bit.
     *
     * MMC Receive Broadcast Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 3u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXBCGFIM bit.
     *
     * MMC Receive Broadcast Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 3u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXBCGFIM bit.
     *
     * MMC Receive Broadcast Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXBCGFIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 3u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXGOCTIM bit.
     *
     * MMC Receive Good Octet Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 2u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXGOCTIM bit.
     *
     * MMC Receive Good Octet Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 2u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXGOCTIM bit.
     *
     * MMC Receive Good Octet Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 2u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXGOCTIM bit.
     *
     * MMC Receive Good Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXGOCTIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 2u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXGBOCTIM bit.
     *
     * MMC Receive Good Bad Octet Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 1u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXGBOCTIM bit.
     *
     * MMC Receive Good Bad Octet Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 1u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXGBOCTIM bit.
     *
     * MMC Receive Good Bad Octet Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 1u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXGBOCTIM bit.
     *
     * MMC Receive Good Bad Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXGBOCTIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 1u;
    }

    /**
     * Get MMC_RECEIVE_INTERRUPT_MASK's RXGBFRMIM bit.
     *
     * MMC Receive Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM() volatile
    {
        return MMC_RECEIVE_INTERRUPT_MASK & (1u << 0u);
    }

    /**
     * Set MMC_RECEIVE_INTERRUPT_MASK's RXGBFRMIM bit.
     *
     * MMC Receive Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK |= 1u << 0u;
    }

    /**
     * Clear MMC_RECEIVE_INTERRUPT_MASK's RXGBFRMIM bit.
     *
     * MMC Receive Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK &= ~(1u << 0u);
    }

    /**
     * Toggle MMC_RECEIVE_INTERRUPT_MASK's RXGBFRMIM bit.
     *
     * MMC Receive Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_RECEIVE_INTERRUPT_MASK_RXGBFRMIM() volatile
    {
        MMC_RECEIVE_INTERRUPT_MASK ^= 1u << 0u;
    }

    /**
     * Get all of MMC_RECEIVE_INTERRUPT_MASK's bit fields.
     *
     * (read-write) MMC Reveive Interrupt Mask Register
     */
    inline void get_MMC_RECEIVE_INTERRUPT_MASK(
        bool &RXCTRLFIM, bool &RXRCVERRFIM, bool &RXWDOGFIM, bool &RXVLANGBFIM,
        bool &RXFOVFIM, bool &RXPAUSFIM, bool &RXORANGEFIM, bool &RXLENERFIM,
        bool &RXUCGFIM, bool &RX1024TMAXOCTGBFIM, bool &RX512T1023OCTGBFIM,
        bool &RX256T511OCTGBFIM, bool &RX128T255OCTGBFIM,
        bool &RX65T127OCTGBFIM, bool &RX64OCTGBFIM, bool &RXOSIZEGFIM,
        bool &RXUSIZEGFIM, bool &RXJABERFIM, bool &RXRUNTFIM,
        bool &RXALGNERFIM, bool &RXCRCERFIM, bool &RXMCGFIM, bool &RXBCGFIM,
        bool &RXGOCTIM, bool &RXGBOCTIM, bool &RXGBFRMIM) volatile
    {
        uint32_t curr = MMC_RECEIVE_INTERRUPT_MASK;

        RXCTRLFIM = curr & (1u << 25u);
        RXRCVERRFIM = curr & (1u << 24u);
        RXWDOGFIM = curr & (1u << 23u);
        RXVLANGBFIM = curr & (1u << 22u);
        RXFOVFIM = curr & (1u << 21u);
        RXPAUSFIM = curr & (1u << 20u);
        RXORANGEFIM = curr & (1u << 19u);
        RXLENERFIM = curr & (1u << 18u);
        RXUCGFIM = curr & (1u << 17u);
        RX1024TMAXOCTGBFIM = curr & (1u << 16u);
        RX512T1023OCTGBFIM = curr & (1u << 15u);
        RX256T511OCTGBFIM = curr & (1u << 14u);
        RX128T255OCTGBFIM = curr & (1u << 13u);
        RX65T127OCTGBFIM = curr & (1u << 12u);
        RX64OCTGBFIM = curr & (1u << 11u);
        RXOSIZEGFIM = curr & (1u << 10u);
        RXUSIZEGFIM = curr & (1u << 9u);
        RXJABERFIM = curr & (1u << 8u);
        RXRUNTFIM = curr & (1u << 7u);
        RXALGNERFIM = curr & (1u << 6u);
        RXCRCERFIM = curr & (1u << 5u);
        RXMCGFIM = curr & (1u << 4u);
        RXBCGFIM = curr & (1u << 3u);
        RXGOCTIM = curr & (1u << 2u);
        RXGBOCTIM = curr & (1u << 1u);
        RXGBFRMIM = curr & (1u << 0u);
    }

    /**
     * Set all of MMC_RECEIVE_INTERRUPT_MASK's bit fields.
     *
     * (read-write) MMC Reveive Interrupt Mask Register
     */
    inline void set_MMC_RECEIVE_INTERRUPT_MASK(
        bool RXCTRLFIM, bool RXRCVERRFIM, bool RXWDOGFIM, bool RXVLANGBFIM,
        bool RXFOVFIM, bool RXPAUSFIM, bool RXORANGEFIM, bool RXLENERFIM,
        bool RXUCGFIM, bool RX1024TMAXOCTGBFIM, bool RX512T1023OCTGBFIM,
        bool RX256T511OCTGBFIM, bool RX128T255OCTGBFIM, bool RX65T127OCTGBFIM,
        bool RX64OCTGBFIM, bool RXOSIZEGFIM, bool RXUSIZEGFIM, bool RXJABERFIM,
        bool RXRUNTFIM, bool RXALGNERFIM, bool RXCRCERFIM, bool RXMCGFIM,
        bool RXBCGFIM, bool RXGOCTIM, bool RXGBOCTIM, bool RXGBFRMIM) volatile
    {
        uint32_t curr = MMC_RECEIVE_INTERRUPT_MASK;

        curr &= ~(0b1u << 25u);
        curr |= (RXCTRLFIM & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (RXRCVERRFIM & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (RXWDOGFIM & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (RXVLANGBFIM & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (RXFOVFIM & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (RXPAUSFIM & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (RXORANGEFIM & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RXLENERFIM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (RXUCGFIM & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (RX1024TMAXOCTGBFIM & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (RX512T1023OCTGBFIM & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (RX256T511OCTGBFIM & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (RX128T255OCTGBFIM & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (RX65T127OCTGBFIM & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (RX64OCTGBFIM & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (RXOSIZEGFIM & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (RXUSIZEGFIM & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (RXJABERFIM & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (RXRUNTFIM & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RXALGNERFIM & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RXCRCERFIM & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (RXMCGFIM & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (RXBCGFIM & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RXGOCTIM & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RXGBOCTIM & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RXGBFRMIM & 0b1u) << 0u;

        MMC_RECEIVE_INTERRUPT_MASK = curr;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXOSIZEGFIM bit.
     *
     * MMC Transmit Oversize Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 25u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXOSIZEGFIM bit.
     *
     * MMC Transmit Oversize Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 25u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXOSIZEGFIM bit.
     *
     * MMC Transmit Oversize Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 25u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXOSIZEGFIM bit.
     *
     * MMC Transmit Oversize Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXOSIZEGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 25u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXVLANGFIM bit.
     *
     * MMC Transmit VLAN Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 24u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXVLANGFIM bit.
     *
     * MMC Transmit VLAN Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 24u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXVLANGFIM bit.
     *
     * MMC Transmit VLAN Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 24u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXVLANGFIM bit.
     *
     * MMC Transmit VLAN Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXVLANGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 24u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXPAUSFIM bit.
     *
     * MMC Transmit Pause Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 23u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXPAUSFIM bit.
     *
     * MMC Transmit Pause Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 23u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXPAUSFIM bit.
     *
     * MMC Transmit Pause Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 23u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXPAUSFIM bit.
     *
     * MMC Transmit Pause Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXPAUSFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 23u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXEXDEFFIM bit.
     *
     * MMC Transmit Excessive Deferral Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 22u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXEXDEFFIM bit.
     *
     * MMC Transmit Excessive Deferral Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 22u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXEXDEFFIM bit.
     *
     * MMC Transmit Excessive Deferral Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 22u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXEXDEFFIM bit.
     *
     * MMC Transmit Excessive Deferral Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXEXDEFFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 22u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXGFRMIM bit.
     *
     * MMC Transmit Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 21u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXGFRMIM bit.
     *
     * MMC Transmit Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 21u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXGFRMIM bit.
     *
     * MMC Transmit Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 21u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXGFRMIM bit.
     *
     * MMC Transmit Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXGFRMIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 21u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXGOCTIM bit.
     *
     * MMC Transmit Good Octet Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 20u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXGOCTIM bit.
     *
     * MMC Transmit Good Octet Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 20u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXGOCTIM bit.
     *
     * MMC Transmit Good Octet Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 20u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXGOCTIM bit.
     *
     * MMC Transmit Good Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXGOCTIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 20u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXCARERFIM bit.
     *
     * MMC Transmit Carrier Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 19u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXCARERFIM bit.
     *
     * MMC Transmit Carrier Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 19u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXCARERFIM bit.
     *
     * MMC Transmit Carrier Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 19u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXCARERFIM bit.
     *
     * MMC Transmit Carrier Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXCARERFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 19u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXEXCOLFIM bit.
     *
     * MMC Transmit Excessive Collision Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 18u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXEXCOLFIM bit.
     *
     * MMC Transmit Excessive Collision Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 18u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXEXCOLFIM bit.
     *
     * MMC Transmit Excessive Collision Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 18u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXEXCOLFIM bit.
     *
     * MMC Transmit Excessive Collision Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXEXCOLFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 18u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXLATCOLFIM bit.
     *
     * MMC Transmit Late Collision Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 17u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXLATCOLFIM bit.
     *
     * MMC Transmit Late Collision Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 17u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXLATCOLFIM bit.
     *
     * MMC Transmit Late Collision Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 17u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXLATCOLFIM bit.
     *
     * MMC Transmit Late Collision Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXLATCOLFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 17u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXDEFFIM bit.
     *
     * MMC Transmit Deferred Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 16u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXDEFFIM bit.
     *
     * MMC Transmit Deferred Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 16u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXDEFFIM bit.
     *
     * MMC Transmit Deferred Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 16u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXDEFFIM bit.
     *
     * MMC Transmit Deferred Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXDEFFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 16u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXMCOLGFIM bit.
     *
     * MMC Transmit Multiple Collision Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 15u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXMCOLGFIM bit.
     *
     * MMC Transmit Multiple Collision Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 15u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXMCOLGFIM bit.
     *
     * MMC Transmit Multiple Collision Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 15u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXMCOLGFIM bit.
     *
     * MMC Transmit Multiple Collision Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXMCOLGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 15u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXSCOLGFIM bit.
     *
     * MMC Transmit Single Collision Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 14u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXSCOLGFIM bit.
     *
     * MMC Transmit Single Collision Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 14u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXSCOLGFIM bit.
     *
     * MMC Transmit Single Collision Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 14u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXSCOLGFIM bit.
     *
     * MMC Transmit Single Collision Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXSCOLGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 14u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXUFLOWERFIM bit.
     *
     * MMC Transmit Underflow Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 13u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXUFLOWERFIM bit.
     *
     * MMC Transmit Underflow Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 13u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXUFLOWERFIM bit.
     *
     * MMC Transmit Underflow Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 13u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXUFLOWERFIM bit.
     *
     * MMC Transmit Underflow Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXUFLOWERFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 13u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXBCGBFIM bit.
     *
     * MMC Transmit Broadcast Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 12u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXBCGBFIM bit.
     *
     * MMC Transmit Broadcast Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 12u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXBCGBFIM bit.
     *
     * MMC Transmit Broadcast Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 12u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXBCGBFIM bit.
     *
     * MMC Transmit Broadcast Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 12u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXMCGBFIM bit.
     *
     * MMC Transmit Multicast Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 11u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXMCGBFIM bit.
     *
     * MMC Transmit Multicast Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 11u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXMCGBFIM bit.
     *
     * MMC Transmit Multicast Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 11u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXMCGBFIM bit.
     *
     * MMC Transmit Multicast Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 11u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXUCGBFIM bit.
     *
     * MMC Transmit Unicast Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 10u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXUCGBFIM bit.
     *
     * MMC Transmit Unicast Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 10u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXUCGBFIM bit.
     *
     * MMC Transmit Unicast Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 10u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXUCGBFIM bit.
     *
     * MMC Transmit Unicast Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXUCGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 10u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX1024TMAXOCTGBFIM bit.
     *
     * MMC Transmit 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 9u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX1024TMAXOCTGBFIM bit.
     *
     * MMC Transmit 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 9u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX1024TMAXOCTGBFIM bit.
     *
     * MMC Transmit 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 9u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX1024TMAXOCTGBFIM bit.
     *
     * MMC Transmit 1024 to Maximum Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void
    toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX1024TMAXOCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 9u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX512T1023OCTGBFIM bit.
     *
     * MMC Transmit 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 8u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX512T1023OCTGBFIM bit.
     *
     * MMC Transmit 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 8u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX512T1023OCTGBFIM bit.
     *
     * MMC Transmit 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 8u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX512T1023OCTGBFIM bit.
     *
     * MMC Transmit 512 to 1023 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void
    toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX512T1023OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 8u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX256T511OCTGBFIM bit.
     *
     * MMC Transmit 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 7u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX256T511OCTGBFIM bit.
     *
     * MMC Transmit 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 7u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX256T511OCTGBFIM bit.
     *
     * MMC Transmit 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 7u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX256T511OCTGBFIM bit.
     *
     * MMC Transmit 256 to 511 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX256T511OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 7u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX128T255OCTGBFIM bit.
     *
     * MMC Transmit 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 6u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX128T255OCTGBFIM bit.
     *
     * MMC Transmit 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 6u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX128T255OCTGBFIM bit.
     *
     * MMC Transmit 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 6u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX128T255OCTGBFIM bit.
     *
     * MMC Transmit 128 to 255 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX128T255OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 6u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX65T127OCTGBFIM bit.
     *
     * MMC Transmit 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 5u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX65T127OCTGBFIM bit.
     *
     * MMC Transmit 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 5u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX65T127OCTGBFIM bit.
     *
     * MMC Transmit 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 5u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX65T127OCTGBFIM bit.
     *
     * MMC Transmit 65 to 127 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX65T127OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 5u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TX64OCTGBFIM bit.
     *
     * MMC Transmit 64 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 4u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TX64OCTGBFIM bit.
     *
     * MMC Transmit 64 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 4u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TX64OCTGBFIM bit.
     *
     * MMC Transmit 64 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 4u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TX64OCTGBFIM bit.
     *
     * MMC Transmit 64 Octet Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TX64OCTGBFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 4u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXMCGFIM bit.
     *
     * MMC Transmit Multicast Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 3u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXMCGFIM bit.
     *
     * MMC Transmit Multicast Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 3u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXMCGFIM bit.
     *
     * MMC Transmit Multicast Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 3u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXMCGFIM bit.
     *
     * MMC Transmit Multicast Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXMCGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 3u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXBCGFIM bit.
     *
     * MMC Transmit Broadcast Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 2u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXBCGFIM bit.
     *
     * MMC Transmit Broadcast Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 2u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXBCGFIM bit.
     *
     * MMC Transmit Broadcast Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 2u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXBCGFIM bit.
     *
     * MMC Transmit Broadcast Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXBCGFIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 2u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXGBFRMIM bit.
     *
     * MMC Transmit Good Bad Frame Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 1u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXGBFRMIM bit.
     *
     * MMC Transmit Good Bad Frame Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 1u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXGBFRMIM bit.
     *
     * MMC Transmit Good Bad Frame Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 1u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXGBFRMIM bit.
     *
     * MMC Transmit Good Bad Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXGBFRMIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 1u;
    }

    /**
     * Get MMC_TRANSMIT_INTERRUPT_MASK's TXGBOCTIM bit.
     *
     * MMC Transmit Good Bad Octet Counter Interrupt Mask
     */
    inline bool get_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM() volatile
    {
        return MMC_TRANSMIT_INTERRUPT_MASK & (1u << 0u);
    }

    /**
     * Set MMC_TRANSMIT_INTERRUPT_MASK's TXGBOCTIM bit.
     *
     * MMC Transmit Good Bad Octet Counter Interrupt Mask
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK |= 1u << 0u;
    }

    /**
     * Clear MMC_TRANSMIT_INTERRUPT_MASK's TXGBOCTIM bit.
     *
     * MMC Transmit Good Bad Octet Counter Interrupt Mask
     */
    inline void clear_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK &= ~(1u << 0u);
    }

    /**
     * Toggle MMC_TRANSMIT_INTERRUPT_MASK's TXGBOCTIM bit.
     *
     * MMC Transmit Good Bad Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_TRANSMIT_INTERRUPT_MASK_TXGBOCTIM() volatile
    {
        MMC_TRANSMIT_INTERRUPT_MASK ^= 1u << 0u;
    }

    /**
     * Get all of MMC_TRANSMIT_INTERRUPT_MASK's bit fields.
     *
     * (read-write) MMC Transmit Interrupt Mask Register
     */
    inline void get_MMC_TRANSMIT_INTERRUPT_MASK(
        bool &TXOSIZEGFIM, bool &TXVLANGFIM, bool &TXPAUSFIM, bool &TXEXDEFFIM,
        bool &TXGFRMIM, bool &TXGOCTIM, bool &TXCARERFIM, bool &TXEXCOLFIM,
        bool &TXLATCOLFIM, bool &TXDEFFIM, bool &TXMCOLGFIM, bool &TXSCOLGFIM,
        bool &TXUFLOWERFIM, bool &TXBCGBFIM, bool &TXMCGBFIM, bool &TXUCGBFIM,
        bool &TX1024TMAXOCTGBFIM, bool &TX512T1023OCTGBFIM,
        bool &TX256T511OCTGBFIM, bool &TX128T255OCTGBFIM,
        bool &TX65T127OCTGBFIM, bool &TX64OCTGBFIM, bool &TXMCGFIM,
        bool &TXBCGFIM, bool &TXGBFRMIM, bool &TXGBOCTIM) volatile
    {
        uint32_t curr = MMC_TRANSMIT_INTERRUPT_MASK;

        TXOSIZEGFIM = curr & (1u << 25u);
        TXVLANGFIM = curr & (1u << 24u);
        TXPAUSFIM = curr & (1u << 23u);
        TXEXDEFFIM = curr & (1u << 22u);
        TXGFRMIM = curr & (1u << 21u);
        TXGOCTIM = curr & (1u << 20u);
        TXCARERFIM = curr & (1u << 19u);
        TXEXCOLFIM = curr & (1u << 18u);
        TXLATCOLFIM = curr & (1u << 17u);
        TXDEFFIM = curr & (1u << 16u);
        TXMCOLGFIM = curr & (1u << 15u);
        TXSCOLGFIM = curr & (1u << 14u);
        TXUFLOWERFIM = curr & (1u << 13u);
        TXBCGBFIM = curr & (1u << 12u);
        TXMCGBFIM = curr & (1u << 11u);
        TXUCGBFIM = curr & (1u << 10u);
        TX1024TMAXOCTGBFIM = curr & (1u << 9u);
        TX512T1023OCTGBFIM = curr & (1u << 8u);
        TX256T511OCTGBFIM = curr & (1u << 7u);
        TX128T255OCTGBFIM = curr & (1u << 6u);
        TX65T127OCTGBFIM = curr & (1u << 5u);
        TX64OCTGBFIM = curr & (1u << 4u);
        TXMCGFIM = curr & (1u << 3u);
        TXBCGFIM = curr & (1u << 2u);
        TXGBFRMIM = curr & (1u << 1u);
        TXGBOCTIM = curr & (1u << 0u);
    }

    /**
     * Set all of MMC_TRANSMIT_INTERRUPT_MASK's bit fields.
     *
     * (read-write) MMC Transmit Interrupt Mask Register
     */
    inline void set_MMC_TRANSMIT_INTERRUPT_MASK(
        bool TXOSIZEGFIM, bool TXVLANGFIM, bool TXPAUSFIM, bool TXEXDEFFIM,
        bool TXGFRMIM, bool TXGOCTIM, bool TXCARERFIM, bool TXEXCOLFIM,
        bool TXLATCOLFIM, bool TXDEFFIM, bool TXMCOLGFIM, bool TXSCOLGFIM,
        bool TXUFLOWERFIM, bool TXBCGBFIM, bool TXMCGBFIM, bool TXUCGBFIM,
        bool TX1024TMAXOCTGBFIM, bool TX512T1023OCTGBFIM,
        bool TX256T511OCTGBFIM, bool TX128T255OCTGBFIM, bool TX65T127OCTGBFIM,
        bool TX64OCTGBFIM, bool TXMCGFIM, bool TXBCGFIM, bool TXGBFRMIM,
        bool TXGBOCTIM) volatile
    {
        uint32_t curr = MMC_TRANSMIT_INTERRUPT_MASK;

        curr &= ~(0b1u << 25u);
        curr |= (TXOSIZEGFIM & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (TXVLANGFIM & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (TXPAUSFIM & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (TXEXDEFFIM & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (TXGFRMIM & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (TXGOCTIM & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (TXCARERFIM & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (TXEXCOLFIM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (TXLATCOLFIM & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (TXDEFFIM & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (TXMCOLGFIM & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (TXSCOLGFIM & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (TXUFLOWERFIM & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (TXBCGBFIM & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (TXMCGBFIM & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (TXUCGBFIM & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (TX1024TMAXOCTGBFIM & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (TX512T1023OCTGBFIM & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (TX256T511OCTGBFIM & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (TX128T255OCTGBFIM & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (TX65T127OCTGBFIM & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (TX64OCTGBFIM & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TXMCGFIM & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (TXBCGFIM & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TXGBFRMIM & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TXGBOCTIM & 0b1u) << 0u;

        MMC_TRANSMIT_INTERRUPT_MASK = curr;
    }

    /**
     * Get TX_OCTET_COUNT_GOOD_BAD's TXOCTGB field.
     *
     * This field indicates the number of bytes transmitted in good and bad
     * frames exclusive of preamble and retried bytes.
     */
    inline uint32_t get_TX_OCTET_COUNT_GOOD_BAD_TXOCTGB() volatile
    {
        return (TX_OCTET_COUNT_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_FRAME_COUNT_GOOD_BAD's TXFRMGB field.
     *
     * This field indicates the number of good and bad frames transmitted,
     * exclusive of retried frames
     */
    inline uint32_t get_TX_FRAME_COUNT_GOOD_BAD_TXFRMGB() volatile
    {
        return (TX_FRAME_COUNT_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_BROADCAST_FRAMES_GOOD's TXBCASTG field.
     *
     * This field indicates the number of transmitted good broadcast frames.
     */
    inline uint32_t get_TX_BROADCAST_FRAMES_GOOD_TXBCASTG() volatile
    {
        return (TX_BROADCAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_MULTICAST_FRAMES_GOOD's TXMCASTG field.
     *
     * This field indicates the number of transmitted good multicast frames.
     */
    inline uint32_t get_TX_MULTICAST_FRAMES_GOOD_TXMCASTG() volatile
    {
        return (TX_MULTICAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_64OCTETS_FRAMES_GOOD_BAD's TX64OCTGB field.
     *
     * This field indicates the number of transmitted good and bad frames with
     * length of 64 bytes, exclusive of preamble and retried frames.
     */
    inline uint32_t get_TX_64OCTETS_FRAMES_GOOD_BAD_TX64OCTGB() volatile
    {
        return (TX_64OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_65TO127OCTETS_FRAMES_GOOD_BAD's TX65_127OCTGB field.
     *
     * This field indicates the number of transmitted good and bad frames with
     * length between 65 and 127 (inclusive) bytes, exclusive of preamble and
     * retried frames.
     */
    inline uint32_t
    get_TX_65TO127OCTETS_FRAMES_GOOD_BAD_TX65_127OCTGB() volatile
    {
        return (TX_65TO127OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_128TO255OCTETS_FRAMES_GOOD_BAD's TX128_255OCTGB field.
     *
     * This field indicates the number of transmitted good and bad frames with
     * length between 128 and 255 (inclusive) bytes, exclusive of preamble and
     * retried frames.
     */
    inline uint32_t
    get_TX_128TO255OCTETS_FRAMES_GOOD_BAD_TX128_255OCTGB() volatile
    {
        return (TX_128TO255OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_256TO511OCTETS_FRAMES_GOOD_BAD's TX256_511OCTGB field.
     *
     * This field indicates the number of transmitted good and bad frames with
     * length between 256 and 511 (inclusive) bytes, exclusive of preamble and
     * retried frames.
     */
    inline uint32_t
    get_TX_256TO511OCTETS_FRAMES_GOOD_BAD_TX256_511OCTGB() volatile
    {
        return (TX_256TO511OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_512TO1023OCTETS_FRAMES_GOOD_BAD's TX512_1023OCTGB field.
     *
     * This field indicates the number of transmitted good and bad frames with
     * length between 512 and 1,023 (inclusive) bytes, exclusive of preamble
     * and retried frames.
     */
    inline uint32_t
    get_TX_512TO1023OCTETS_FRAMES_GOOD_BAD_TX512_1023OCTGB() volatile
    {
        return (TX_512TO1023OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_1024TOMAXOCTETS_FRAMES_GOOD_BAD's TX1024_MAXOCTGB field.
     *
     * This field indicates the number of good and bad frames transmitted with
     * length between 1,024 and maxsize (inclusive) bytes, exclusive of
     * preamble and retried frames.
     */
    inline uint32_t
    get_TX_1024TOMAXOCTETS_FRAMES_GOOD_BAD_TX1024_MAXOCTGB() volatile
    {
        return (TX_1024TOMAXOCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_UNICAST_FRAMES_GOOD_BAD's TXUCASTGB field.
     *
     * This field indicates the number of transmitted good and bad unicast
     * frames.
     */
    inline uint32_t get_TX_UNICAST_FRAMES_GOOD_BAD_TXUCASTGB() volatile
    {
        return (TX_UNICAST_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_MULTICAST_FRAMES_GOOD_BAD's TXMCASTGB field.
     *
     * This field indicates the number of transmitted good and bad multicast
     * frames.
     */
    inline uint32_t get_TX_MULTICAST_FRAMES_GOOD_BAD_TXMCASTGB() volatile
    {
        return (TX_MULTICAST_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_BROADCAST_FRAMES_GOOD_BAD's TXBCASTGB field.
     *
     * This field indicates the number of transmitted good and bad broadcast
     * frames.
     */
    inline uint32_t get_TX_BROADCAST_FRAMES_GOOD_BAD_TXBCASTGB() volatile
    {
        return (TX_BROADCAST_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_UNDERFLOW_ERROR_FRAMES's TXUNDRFLW field.
     *
     * This field indicates the number of frames aborted because of frame
     * underflow error.
     */
    inline uint32_t get_TX_UNDERFLOW_ERROR_FRAMES_TXUNDRFLW() volatile
    {
        return (TX_UNDERFLOW_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_SINGLE_COLLISION_GOOD_FRAMES's TXSNGLCOLG field.
     *
     * This field indicates the number of successfully transmitted frames after
     * a single collision in the half-duplex mode.
     */
    inline uint32_t get_TX_SINGLE_COLLISION_GOOD_FRAMES_TXSNGLCOLG() volatile
    {
        return (TX_SINGLE_COLLISION_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_MULTIPLE_COLLISION_GOOD_FRAMES's TXMULTCOLG field.
     *
     * This field indicates the number of successfully transmitted frames after
     * multiple collisions in the half-duplex mode.
     */
    inline uint32_t get_TX_MULTIPLE_COLLISION_GOOD_FRAMES_TXMULTCOLG() volatile
    {
        return (TX_MULTIPLE_COLLISION_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_DEFERRED_FRAMES's TXDEFRD field.
     *
     * This field indicates the number of successfully transmitted frames after
     * a deferral in the half-duplex mode.
     */
    inline uint32_t get_TX_DEFERRED_FRAMES_TXDEFRD() volatile
    {
        return (TX_DEFERRED_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_LATE_COLLISION_FRAMES's TXLATECOL field.
     *
     * This field indicates the number of frames aborted because of late
     * collision error.
     */
    inline uint32_t get_TX_LATE_COLLISION_FRAMES_TXLATECOL() volatile
    {
        return (TX_LATE_COLLISION_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_EXCESSIVE_COLLISION_FRAMES's TXEXSCOL field.
     *
     * This field indicates the number of frames aborted because of excessive
     * (16) collision error.
     */
    inline uint32_t get_TX_EXCESSIVE_COLLISION_FRAMES_TXEXSCOL() volatile
    {
        return (TX_EXCESSIVE_COLLISION_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_CARRIER_ERROR_FRAMES's TXCARR field.
     *
     * This field indicates the number of frames aborted because of carrier
     * sense error (no carrier or loss of carrier).
     */
    inline uint32_t get_TX_CARRIER_ERROR_FRAMES_TXCARR() volatile
    {
        return (TX_CARRIER_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_OCTET_COUNT_GOOD's TXOCTG field.
     *
     * This field indicates the number of bytes transmitted, exclusive of
     * preamble, in good frames.
     */
    inline uint32_t get_TX_OCTET_COUNT_GOOD_TXOCTG() volatile
    {
        return (TX_OCTET_COUNT_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_FRAME_COUNT_GOOD's TXFRMG field.
     *
     * This field indicates the number of transmitted good frames, exclusive of
     * preamble.
     */
    inline uint32_t get_TX_FRAME_COUNT_GOOD_TXFRMG() volatile
    {
        return (TX_FRAME_COUNT_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_EXCESSIVE_DEFERRAL_ERROR's TXEXSDEF field.
     *
     * This field indicates the number of frames aborted because of excessive
     * deferral error, that is, frames deferred for more than two max-sized
     * frame times.
     */
    inline uint32_t get_TX_EXCESSIVE_DEFERRAL_ERROR_TXEXSDEF() volatile
    {
        return (TX_EXCESSIVE_DEFERRAL_ERROR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_PAUSE_FRAMES's TXPAUSE field.
     *
     * This field indicates the number of transmitted good PAUSE frames.
     */
    inline uint32_t get_TX_PAUSE_FRAMES_TXPAUSE() volatile
    {
        return (TX_PAUSE_FRAMES >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_VLAN_FRAMES_GOOD's TXVLANG field.
     *
     * This register maintains the number of transmitted good VLAN frames,
     * exclusive of retried frames.
     */
    inline uint32_t get_TX_VLAN_FRAMES_GOOD_TXVLANG() volatile
    {
        return (TX_VLAN_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TX_OSIZE_FRAMES_GOOD's TXOSIZG field.
     *
     * This field indicates the number of frames transmitted without errors and
     * with length greater than the maxsize (1,518 or 1,522 bytes for VLAN
     * tagged frames; 2000 bytes if enabled by setting MAC Configuration.2KPE).
     */
    inline uint32_t get_TX_OSIZE_FRAMES_GOOD_TXOSIZG() volatile
    {
        return (TX_OSIZE_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_FRAMES_COUNT_GOOD_BAD's RXFRMGB field.
     *
     * This field indicates the number of received good and bad frames.
     */
    inline uint32_t get_RX_FRAMES_COUNT_GOOD_BAD_RXFRMGB() volatile
    {
        return (RX_FRAMES_COUNT_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_OCTET_COUNT_GOOD_BAD's RXOCTGB field.
     *
     * This field indicates the number of bytes received, exclusive of
     * preamble, in good and bad frames.
     */
    inline uint32_t get_RX_OCTET_COUNT_GOOD_BAD_RXOCTGB() volatile
    {
        return (RX_OCTET_COUNT_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_OCTET_COUNT_GOOD's RXOCTG field.
     *
     * This field indicates the number of bytes received, exclusive of
     * preamble, only in good frames.
     */
    inline uint32_t get_RX_OCTET_COUNT_GOOD_RXOCTG() volatile
    {
        return (RX_OCTET_COUNT_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_BROADCAST_FRAMES_GOOD's RXBCASTG field.
     *
     * This field indicates the number of received good broadcast frames.
     */
    inline uint32_t get_RX_BROADCAST_FRAMES_GOOD_RXBCASTG() volatile
    {
        return (RX_BROADCAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_MULTICAST_FRAMES_GOOD's RXMCASTG field.
     *
     * This field indicates the number of received good multicast frames.
     */
    inline uint32_t get_RX_MULTICAST_FRAMES_GOOD_RXMCASTG() volatile
    {
        return (RX_MULTICAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_CRC_ERROR_FRAMES's RXCRCERR field.
     *
     * This field indicates the number of frames received with CRC error.
     */
    inline uint32_t get_RX_CRC_ERROR_FRAMES_RXCRCERR() volatile
    {
        return (RX_CRC_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_ALIGNMENT_ERROR_FRAMES's RXALGNERR field.
     *
     * This field indicates the number of frames received with alignment
     * (dribble) error.
     */
    inline uint32_t get_RX_ALIGNMENT_ERROR_FRAMES_RXALGNERR() volatile
    {
        return (RX_ALIGNMENT_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_RUNT_ERROR_FRAMES's RXRUNTERR field.
     *
     * This field indicates the number of frames received with runt error(<64
     * bytes and CRC error).
     */
    inline uint32_t get_RX_RUNT_ERROR_FRAMES_RXRUNTERR() volatile
    {
        return (RX_RUNT_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_JABBER_ERROR_FRAMES's RXJABERR field.
     *
     * This field indicates the number of giant frames received with length
     * (including CRC) greater than 1,518 bytes (1,522 bytes for VLAN tagged)
     * and with CRC error. If Jumbo Frame mode is enabled, then frames of
     * length greater than 9,018 bytes (9,022 for VLAN tagged) are considered
     * as giant frames.
     */
    inline uint32_t get_RX_JABBER_ERROR_FRAMES_RXJABERR() volatile
    {
        return (RX_JABBER_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_UNDERSIZE_FRAMES_GOOD's RXUNDERSZG field.
     *
     * This field indicates the number of frames received with length less than
     * 64 bytes and without errors.
     */
    inline uint32_t get_RX_UNDERSIZE_FRAMES_GOOD_RXUNDERSZG() volatile
    {
        return (RX_UNDERSIZE_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_OVERSIZE_FRAMES_GOOD's RXOVERSZG field.
     *
     * This field indicates the number of frames received without errors, with
     * length greater than the maxsize (1,518 or 1,522 for VLAN tagged frames;
     * 2,000 bytes if enabled by setting MAC Configuration.2KPE).
     */
    inline uint32_t get_RX_OVERSIZE_FRAMES_GOOD_RXOVERSZG() volatile
    {
        return (RX_OVERSIZE_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_64OCTETS_FRAMES_GOOD_BAD's RX64OCTGB field.
     *
     * This field indicates the number of received good and bad frames with
     * length 64 bytes, exclusive of preamble.
     */
    inline uint32_t get_RX_64OCTETS_FRAMES_GOOD_BAD_RX64OCTGB() volatile
    {
        return (RX_64OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_65TO127OCTETS_FRAMES_GOOD_BAD's RX65_127OCTGB field.
     *
     * This field indicates the number of received good and bad frames received
     * with length between 65 and 127 (inclusive) bytes, exclusive of preamble.
     */
    inline uint32_t
    get_RX_65TO127OCTETS_FRAMES_GOOD_BAD_RX65_127OCTGB() volatile
    {
        return (RX_65TO127OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_128TO255OCTETS_FRAMES_GOOD_BAD's RX128_255OCTGB field.
     *
     * This field indicates the number of received good and bad frames with
     * length between 128 and 255 (inclusive) bytes, exclusive of preamble.
     */
    inline uint32_t
    get_RX_128TO255OCTETS_FRAMES_GOOD_BAD_RX128_255OCTGB() volatile
    {
        return (RX_128TO255OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_256TO511OCTETS_FRAMES_GOOD_BAD's RX256_511OCTGB field.
     *
     * This field indicates the number of received good and bad frames with
     * length between 256 and 511 (inclusive) bytes, exclusive of preamble.
     */
    inline uint32_t
    get_RX_256TO511OCTETS_FRAMES_GOOD_BAD_RX256_511OCTGB() volatile
    {
        return (RX_256TO511OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_512TO1023OCTETS_FRAMES_GOOD_BAD's RX512_1023OCTGB field.
     *
     * This field indicates the number of received good and bad frames with
     * length between 512 and 1,023 (inclusive) bytes, exclusive of preamble.
     */
    inline uint32_t
    get_RX_512TO1023OCTETS_FRAMES_GOOD_BAD_RX512_1023OCTGB() volatile
    {
        return (RX_512TO1023OCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_1024TOMAXOCTETS_FRAMES_GOOD_BAD's RX1024_MAXOCTGB field.
     *
     * This field indicates the number of received good and bad frames with
     * length between 1,024 and maxsize (inclusive) bytes, exclusive of
     * preamble and retried frames.
     */
    inline uint32_t
    get_RX_1024TOMAXOCTETS_FRAMES_GOOD_BAD_RX1024_MAXOCTGB() volatile
    {
        return (RX_1024TOMAXOCTETS_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_UNICAST_FRAMES_GOOD's RXUCASTG field.
     *
     * This field indicates the number of received good unicast frames.
     */
    inline uint32_t get_RX_UNICAST_FRAMES_GOOD_RXUCASTG() volatile
    {
        return (RX_UNICAST_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_LENGTH_ERROR_FRAMES's RXLENERR field.
     *
     * This field indicates the number of frames received with length error
     * (Length type field not equal to frame size) for all frames with valid
     * length field.
     */
    inline uint32_t get_RX_LENGTH_ERROR_FRAMES_RXLENERR() volatile
    {
        return (RX_LENGTH_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_OUT_OF_RANGE_TYPE_FRAMES's RXOUTOFRNG field.
     *
     * This field indicates the number of received frames with length field not
     * equal to the valid frame size (greater than 1,500 but less than 1,536).
     */
    inline uint32_t get_RX_OUT_OF_RANGE_TYPE_FRAMES_RXOUTOFRNG() volatile
    {
        return (RX_OUT_OF_RANGE_TYPE_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_PAUSE_FRAMES's RXPAUSEFRM field.
     *
     * This field indicates the number of received good and valid PAUSE frames.
     */
    inline uint32_t get_RX_PAUSE_FRAMES_RXPAUSEFRM() volatile
    {
        return (RX_PAUSE_FRAMES >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_FIFO_OVERFLOW_FRAMES's RXFIFOOVFL field.
     *
     * This field indicates the number of received frames missed because of
     * FIFO overflow.
     */
    inline uint32_t get_RX_FIFO_OVERFLOW_FRAMES_RXFIFOOVFL() volatile
    {
        return (RX_FIFO_OVERFLOW_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_VLAN_FRAMES_GOOD_BAD's RXVLANFRGB field.
     *
     * This field indicates the number of received good and bad VLAN frames.
     */
    inline uint32_t get_RX_VLAN_FRAMES_GOOD_BAD_RXVLANFRGB() volatile
    {
        return (RX_VLAN_FRAMES_GOOD_BAD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_WATCHDOG_ERROR_FRAMES's RXWDGERR field.
     *
     * This field indicates the number of frames received with error because of
     * the watchdog timeout error (frames with more than 2,048 bytes data
     * load).
     */
    inline uint32_t get_RX_WATCHDOG_ERROR_FRAMES_RXWDGERR() volatile
    {
        return (RX_WATCHDOG_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_RECEIVE_ERROR_FRAMES's RXRCVERR field.
     *
     * This field indicates the number of frames received with error because of
     * the watchdog timeout error (frames with more than 2,048 bytes data
     * load).
     */
    inline uint32_t get_RX_RECEIVE_ERROR_FRAMES_RXRCVERR() volatile
    {
        return (RX_RECEIVE_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RX_CONTROL_FRAMES_GOOD's RXCTRLG field.
     *
     * This field indicates the number of frames received with error because of
     * the watchdog timeout error (frames with more than 2,048 bytes data
     * load).
     */
    inline uint32_t get_RX_CONTROL_FRAMES_GOOD_RXCTRLG() volatile
    {
        return (RX_CONTROL_FRAMES_GOOD >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPEROIM bit.
     *
     * MMC Receive ICMP Error Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 29u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPEROIM bit.
     *
     * MMC Receive ICMP Error Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 29u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPEROIM bit.
     *
     * MMC Receive ICMP Error Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 29u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPEROIM bit.
     *
     * MMC Receive ICMP Error Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 29u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGOIM bit.
     *
     * MMC Receive ICMP Good Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 28u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGOIM bit.
     *
     * MMC Receive ICMP Good Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 28u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGOIM bit.
     *
     * MMC Receive ICMP Good Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 28u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGOIM bit.
     *
     * MMC Receive ICMP Good Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 28u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPEROIM bit.
     *
     * MMC Receive TCP Error Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 27u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPEROIM bit.
     *
     * MMC Receive TCP Error Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 27u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPEROIM bit.
     *
     * MMC Receive TCP Error Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 27u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPEROIM bit.
     *
     * MMC Receive TCP Error Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 27u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGOIM bit.
     *
     * MMC Receive TCP Good Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 26u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGOIM bit.
     *
     * MMC Receive TCP Good Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 26u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGOIM bit.
     *
     * MMC Receive TCP Good Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 26u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGOIM bit.
     *
     * MMC Receive TCP Good Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 26u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPEROIM bit.
     *
     * MMC Receive UDP Error Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 25u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPEROIM bit.
     *
     * MMC Receive UDP Error Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 25u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPEROIM bit.
     *
     * MMC Receive UDP Error Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 25u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPEROIM bit.
     *
     * MMC Receive UDP Error Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 25u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGOIM bit.
     *
     * MMC Receive UDP Good Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 24u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGOIM bit.
     *
     * MMC Receive UDP Good Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 24u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGOIM bit.
     *
     * MMC Receive UDP Good Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 24u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGOIM bit.
     *
     * MMC Receive UDP Good Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 24u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYOIM bit.
     *
     * MMC Receive IPV6 No Payload Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 23u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYOIM bit.
     *
     * MMC Receive IPV6 No Payload Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 23u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYOIM bit.
     *
     * MMC Receive IPV6 No Payload Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 23u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYOIM bit.
     *
     * MMC Receive IPV6 No Payload Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 23u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HEROIM bit.
     *
     * MMC Receive IPV6 Header Error Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 22u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HEROIM bit.
     *
     * MMC Receive IPV6 Header Error Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 22u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HEROIM bit.
     *
     * MMC Receive IPV6 Header Error Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 22u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HEROIM bit.
     *
     * MMC Receive IPV6 Header Error Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 22u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GOIM bit.
     *
     * MMC Receive IPV6 Good Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 21u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GOIM bit.
     *
     * MMC Receive IPV6 Good Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 21u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GOIM bit.
     *
     * MMC Receive IPV6 Good Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 21u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GOIM bit.
     *
     * MMC Receive IPV6 Good Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 21u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLOIM bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 20u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLOIM bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 20u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLOIM bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 20u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLOIM bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 20u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGOIM bit.
     *
     * MMC Receive IPV4 Fragmented Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 19u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGOIM bit.
     *
     * MMC Receive IPV4 Fragmented Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 19u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGOIM bit.
     *
     * MMC Receive IPV4 Fragmented Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 19u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGOIM bit.
     *
     * MMC Receive IPV4 Fragmented Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 19u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYOIM bit.
     *
     * MMC Receive IPV4 No Payload Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 18u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYOIM bit.
     *
     * MMC Receive IPV4 No Payload Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 18u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYOIM bit.
     *
     * MMC Receive IPV4 No Payload Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 18u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYOIM bit.
     *
     * MMC Receive IPV4 No Payload Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 18u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HEROIM bit.
     *
     * MMC Receive IPV4 Header Error Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 17u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HEROIM bit.
     *
     * MMC Receive IPV4 Header Error Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 17u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HEROIM bit.
     *
     * MMC Receive IPV4 Header Error Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 17u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HEROIM bit.
     *
     * MMC Receive IPV4 Header Error Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HEROIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 17u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GOIM bit.
     *
     * MMC Receive IPV4 Good Octet Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 16u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GOIM bit.
     *
     * MMC Receive IPV4 Good Octet Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 16u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GOIM bit.
     *
     * MMC Receive IPV4 Good Octet Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 16u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GOIM bit.
     *
     * MMC Receive IPV4 Good Octet Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GOIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 16u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPERFIM bit.
     *
     * MMC Receive ICMP Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 13u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPERFIM bit.
     *
     * MMC Receive ICMP Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 13u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPERFIM bit.
     *
     * MMC Receive ICMP Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 13u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPERFIM bit.
     *
     * MMC Receive ICMP Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 13u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGFIM bit.
     *
     * MMC Receive ICMP Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 12u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGFIM bit.
     *
     * MMC Receive ICMP Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 12u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGFIM bit.
     *
     * MMC Receive ICMP Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 12u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXICMPGFIM bit.
     *
     * MMC Receive ICMP Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXICMPGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 12u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPERFIM bit.
     *
     * MMC Receive TCP Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 11u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPERFIM bit.
     *
     * MMC Receive TCP Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 11u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPERFIM bit.
     *
     * MMC Receive TCP Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 11u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPERFIM bit.
     *
     * MMC Receive TCP Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 11u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGFIM bit.
     *
     * MMC Receive TCP Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 10u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGFIM bit.
     *
     * MMC Receive TCP Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 10u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGFIM bit.
     *
     * MMC Receive TCP Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 10u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXTCPGFIM bit.
     *
     * MMC Receive TCP Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXTCPGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 10u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPERFIM bit.
     *
     * MMC Receive UDP Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 9u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPERFIM bit.
     *
     * MMC Receive UDP Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 9u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPERFIM bit.
     *
     * MMC Receive UDP Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 9u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPERFIM bit.
     *
     * MMC Receive UDP Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 9u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGFIM bit.
     *
     * MMC Receive UDP Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 8u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGFIM bit.
     *
     * MMC Receive UDP Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 8u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGFIM bit.
     *
     * MMC Receive UDP Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 8u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXUDPGFIM bit.
     *
     * MMC Receive UDP Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXUDPGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 8u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYFIM bit.
     *
     * MMC Receive IPV6 No Payload Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 7u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYFIM bit.
     *
     * MMC Receive IPV6 No Payload Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 7u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYFIM bit.
     *
     * MMC Receive IPV6 No Payload Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 7u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6NOPAYFIM bit.
     *
     * MMC Receive IPV6 No Payload Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6NOPAYFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 7u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HERFIM bit.
     *
     * MMC Receive IPV6 Header Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 6u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HERFIM bit.
     *
     * MMC Receive IPV6 Header Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 6u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HERFIM bit.
     *
     * MMC Receive IPV6 Header Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 6u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6HERFIM bit.
     *
     * MMC Receive IPV6 Header Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6HERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 6u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GFIM bit.
     *
     * MMC Receive IPV6 Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 5u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GFIM bit.
     *
     * MMC Receive IPV6 Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 5u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GFIM bit.
     *
     * MMC Receive IPV6 Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 5u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV6GFIM bit.
     *
     * MMC Receive IPV6 Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV6GFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 5u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLFIM bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 4u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLFIM bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 4u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLFIM bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 4u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4UDSBLFIM bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4UDSBLFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 4u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGFIM bit.
     *
     * MMC Receive IPV4 Fragmented Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 3u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGFIM bit.
     *
     * MMC Receive IPV4 Fragmented Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 3u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGFIM bit.
     *
     * MMC Receive IPV4 Fragmented Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 3u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4FRAGFIM bit.
     *
     * MMC Receive IPV4 Fragmented Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4FRAGFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 3u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYFIM bit.
     *
     * MMC Receive IPV4 No Payload Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 2u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYFIM bit.
     *
     * MMC Receive IPV4 No Payload Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 2u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYFIM bit.
     *
     * MMC Receive IPV4 No Payload Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 2u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4NOPAYFIM bit.
     *
     * MMC Receive IPV4 No Payload Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4NOPAYFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 2u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HERFIM bit.
     *
     * MMC Receive IPV4 Header Error Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 1u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HERFIM bit.
     *
     * MMC Receive IPV4 Header Error Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 1u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HERFIM bit.
     *
     * MMC Receive IPV4 Header Error Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 1u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4HERFIM bit.
     *
     * MMC Receive IPV4 Header Error Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4HERFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 1u;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GFIM bit.
     *
     * MMC Receive IPV4 Good Frame Counter Interrupt Mask
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT_MASK & (1u << 0u);
    }

    /**
     * Set MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GFIM bit.
     *
     * MMC Receive IPV4 Good Frame Counter Interrupt Mask
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK |= 1u << 0u;
    }

    /**
     * Clear MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GFIM bit.
     *
     * MMC Receive IPV4 Good Frame Counter Interrupt Mask
     */
    inline void clear_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK &= ~(1u << 0u);
    }

    /**
     * Toggle MMC_IPC_RECEIVE_INTERRUPT_MASK's RXIPV4GFIM bit.
     *
     * MMC Receive IPV4 Good Frame Counter Interrupt Mask
     */
    inline void toggle_MMC_IPC_RECEIVE_INTERRUPT_MASK_RXIPV4GFIM() volatile
    {
        MMC_IPC_RECEIVE_INTERRUPT_MASK ^= 1u << 0u;
    }

    /**
     * Get all of MMC_IPC_RECEIVE_INTERRUPT_MASK's bit fields.
     *
     * (read-write) MMC Receive Checksum Offload Interrupt Mask Register
     */
    inline void get_MMC_IPC_RECEIVE_INTERRUPT_MASK(
        bool &RXICMPEROIM, bool &RXICMPGOIM, bool &RXTCPEROIM, bool &RXTCPGOIM,
        bool &RXUDPEROIM, bool &RXUDPGOIM, bool &RXIPV6NOPAYOIM,
        bool &RXIPV6HEROIM, bool &RXIPV6GOIM, bool &RXIPV4UDSBLOIM,
        bool &RXIPV4FRAGOIM, bool &RXIPV4NOPAYOIM, bool &RXIPV4HEROIM,
        bool &RXIPV4GOIM, bool &RXICMPERFIM, bool &RXICMPGFIM,
        bool &RXTCPERFIM, bool &RXTCPGFIM, bool &RXUDPERFIM, bool &RXUDPGFIM,
        bool &RXIPV6NOPAYFIM, bool &RXIPV6HERFIM, bool &RXIPV6GFIM,
        bool &RXIPV4UDSBLFIM, bool &RXIPV4FRAGFIM, bool &RXIPV4NOPAYFIM,
        bool &RXIPV4HERFIM, bool &RXIPV4GFIM) volatile
    {
        uint32_t curr = MMC_IPC_RECEIVE_INTERRUPT_MASK;

        RXICMPEROIM = curr & (1u << 29u);
        RXICMPGOIM = curr & (1u << 28u);
        RXTCPEROIM = curr & (1u << 27u);
        RXTCPGOIM = curr & (1u << 26u);
        RXUDPEROIM = curr & (1u << 25u);
        RXUDPGOIM = curr & (1u << 24u);
        RXIPV6NOPAYOIM = curr & (1u << 23u);
        RXIPV6HEROIM = curr & (1u << 22u);
        RXIPV6GOIM = curr & (1u << 21u);
        RXIPV4UDSBLOIM = curr & (1u << 20u);
        RXIPV4FRAGOIM = curr & (1u << 19u);
        RXIPV4NOPAYOIM = curr & (1u << 18u);
        RXIPV4HEROIM = curr & (1u << 17u);
        RXIPV4GOIM = curr & (1u << 16u);
        RXICMPERFIM = curr & (1u << 13u);
        RXICMPGFIM = curr & (1u << 12u);
        RXTCPERFIM = curr & (1u << 11u);
        RXTCPGFIM = curr & (1u << 10u);
        RXUDPERFIM = curr & (1u << 9u);
        RXUDPGFIM = curr & (1u << 8u);
        RXIPV6NOPAYFIM = curr & (1u << 7u);
        RXIPV6HERFIM = curr & (1u << 6u);
        RXIPV6GFIM = curr & (1u << 5u);
        RXIPV4UDSBLFIM = curr & (1u << 4u);
        RXIPV4FRAGFIM = curr & (1u << 3u);
        RXIPV4NOPAYFIM = curr & (1u << 2u);
        RXIPV4HERFIM = curr & (1u << 1u);
        RXIPV4GFIM = curr & (1u << 0u);
    }

    /**
     * Set all of MMC_IPC_RECEIVE_INTERRUPT_MASK's bit fields.
     *
     * (read-write) MMC Receive Checksum Offload Interrupt Mask Register
     */
    inline void set_MMC_IPC_RECEIVE_INTERRUPT_MASK(
        bool RXICMPEROIM, bool RXICMPGOIM, bool RXTCPEROIM, bool RXTCPGOIM,
        bool RXUDPEROIM, bool RXUDPGOIM, bool RXIPV6NOPAYOIM,
        bool RXIPV6HEROIM, bool RXIPV6GOIM, bool RXIPV4UDSBLOIM,
        bool RXIPV4FRAGOIM, bool RXIPV4NOPAYOIM, bool RXIPV4HEROIM,
        bool RXIPV4GOIM, bool RXICMPERFIM, bool RXICMPGFIM, bool RXTCPERFIM,
        bool RXTCPGFIM, bool RXUDPERFIM, bool RXUDPGFIM, bool RXIPV6NOPAYFIM,
        bool RXIPV6HERFIM, bool RXIPV6GFIM, bool RXIPV4UDSBLFIM,
        bool RXIPV4FRAGFIM, bool RXIPV4NOPAYFIM, bool RXIPV4HERFIM,
        bool RXIPV4GFIM) volatile
    {
        uint32_t curr = MMC_IPC_RECEIVE_INTERRUPT_MASK;

        curr &= ~(0b1u << 29u);
        curr |= (RXICMPEROIM & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (RXICMPGOIM & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (RXTCPEROIM & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (RXTCPGOIM & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (RXUDPEROIM & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (RXUDPGOIM & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (RXIPV6NOPAYOIM & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (RXIPV6HEROIM & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (RXIPV6GOIM & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (RXIPV4UDSBLOIM & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (RXIPV4FRAGOIM & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (RXIPV4NOPAYOIM & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (RXIPV4HEROIM & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (RXIPV4GOIM & 0b1u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (RXICMPERFIM & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (RXICMPGFIM & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (RXTCPERFIM & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (RXTCPGFIM & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (RXUDPERFIM & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (RXUDPGFIM & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (RXIPV6NOPAYFIM & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RXIPV6HERFIM & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (RXIPV6GFIM & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (RXIPV4UDSBLFIM & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (RXIPV4FRAGFIM & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (RXIPV4NOPAYFIM & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (RXIPV4HERFIM & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (RXIPV4GFIM & 0b1u) << 0u;

        MMC_IPC_RECEIVE_INTERRUPT_MASK = curr;
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXICMPEROIS bit.
     *
     * MMC Receive ICMP Error Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXICMPEROIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 29u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXICMPGOIS bit.
     *
     * MMC Receive ICMP Good Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGOIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 28u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXTCPEROIS bit.
     *
     * MMC Receive TCP Error Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXTCPEROIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 27u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXTCPGOIS bit.
     *
     * MMC Receive TCP Good Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGOIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 26u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXUDPEROIS bit.
     *
     * MMC Receive UDP Error Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXUDPEROIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 25u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXUDPGOIS bit.
     *
     * MMC Receive UDP Good Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGOIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 24u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6NOPAYOIS bit.
     *
     * MMC Receive IPV6 No Payload Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYOIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 23u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6HEROIS bit.
     *
     * MMC Receive IPV6 Header Error Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HEROIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 22u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6GOIS bit.
     *
     * MMC Receive IPV6 Good Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GOIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 21u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4UDSBLOIS bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLOIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 20u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4FRAGOIS bit.
     *
     * MMC Receive IPV4 Fragmented Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGOIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 19u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4NOPAYOIS bit.
     *
     * MMC Receive IPV4 No Payload Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYOIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 18u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4HEROIS bit.
     *
     * MMC Receive IPV4 Header Error Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HEROIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 17u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4GOIS bit.
     *
     * MMC Receive IPV4 Good Octet Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GOIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 16u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXICMPERFIS bit.
     *
     * MMC Receive ICMP Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXICMPERFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 13u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXICMPGFIS bit.
     *
     * MMC Receive ICMP Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXICMPGFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 12u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXTCPERFIS bit.
     *
     * MMC Receive TCP Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXTCPERFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 11u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXTCPGFIS bit.
     *
     * MMC Receive TCP Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXTCPGFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 10u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXUDPERFIS bit.
     *
     * MMC Receive UDP Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXUDPERFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 9u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXUDPGFIS bit.
     *
     * MMC Receive UDP Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXUDPGFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 8u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6NOPAYFIS bit.
     *
     * MMC Receive IPV6 No Payload Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6NOPAYFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 7u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6HERFIS bit.
     *
     * MMC Receive IPV6 Header Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6HERFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 6u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV6GFIS bit.
     *
     * MMC Receive IPV6 Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV6GFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 5u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4UDSBLFIS bit.
     *
     * MMC Receive IPV4 UDP Checksum Disabled Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4UDSBLFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 4u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4FRAGFIS bit.
     *
     * MMC Receive IPV4 Fragmented Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4FRAGFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 3u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4NOPAYFIS bit.
     *
     * MMC Receive IPV4 No Payload Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4NOPAYFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 2u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4HERFIS bit.
     *
     * MMC Receive IPV4 Header Error Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4HERFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 1u);
    }

    /**
     * Get MMC_IPC_RECEIVE_INTERRUPT's RXIPV4GFIS bit.
     *
     * MMC Receive IPV4 Good Frame Counter Interrupt Status
     */
    inline bool get_MMC_IPC_RECEIVE_INTERRUPT_RXIPV4GFIS() volatile
    {
        return MMC_IPC_RECEIVE_INTERRUPT & (1u << 0u);
    }

    /**
     * Get all of MMC_IPC_RECEIVE_INTERRUPT's bit fields.
     *
     * (read-only) MMC Receive Checksum Offload Interrupt Register
     */
    inline void get_MMC_IPC_RECEIVE_INTERRUPT(
        bool &RXICMPEROIS, bool &RXICMPGOIS, bool &RXTCPEROIS, bool &RXTCPGOIS,
        bool &RXUDPEROIS, bool &RXUDPGOIS, bool &RXIPV6NOPAYOIS,
        bool &RXIPV6HEROIS, bool &RXIPV6GOIS, bool &RXIPV4UDSBLOIS,
        bool &RXIPV4FRAGOIS, bool &RXIPV4NOPAYOIS, bool &RXIPV4HEROIS,
        bool &RXIPV4GOIS, bool &RXICMPERFIS, bool &RXICMPGFIS,
        bool &RXTCPERFIS, bool &RXTCPGFIS, bool &RXUDPERFIS, bool &RXUDPGFIS,
        bool &RXIPV6NOPAYFIS, bool &RXIPV6HERFIS, bool &RXIPV6GFIS,
        bool &RXIPV4UDSBLFIS, bool &RXIPV4FRAGFIS, bool &RXIPV4NOPAYFIS,
        bool &RXIPV4HERFIS, bool &RXIPV4GFIS) volatile
    {
        uint32_t curr = MMC_IPC_RECEIVE_INTERRUPT;

        RXICMPEROIS = curr & (1u << 29u);
        RXICMPGOIS = curr & (1u << 28u);
        RXTCPEROIS = curr & (1u << 27u);
        RXTCPGOIS = curr & (1u << 26u);
        RXUDPEROIS = curr & (1u << 25u);
        RXUDPGOIS = curr & (1u << 24u);
        RXIPV6NOPAYOIS = curr & (1u << 23u);
        RXIPV6HEROIS = curr & (1u << 22u);
        RXIPV6GOIS = curr & (1u << 21u);
        RXIPV4UDSBLOIS = curr & (1u << 20u);
        RXIPV4FRAGOIS = curr & (1u << 19u);
        RXIPV4NOPAYOIS = curr & (1u << 18u);
        RXIPV4HEROIS = curr & (1u << 17u);
        RXIPV4GOIS = curr & (1u << 16u);
        RXICMPERFIS = curr & (1u << 13u);
        RXICMPGFIS = curr & (1u << 12u);
        RXTCPERFIS = curr & (1u << 11u);
        RXTCPGFIS = curr & (1u << 10u);
        RXUDPERFIS = curr & (1u << 9u);
        RXUDPGFIS = curr & (1u << 8u);
        RXIPV6NOPAYFIS = curr & (1u << 7u);
        RXIPV6HERFIS = curr & (1u << 6u);
        RXIPV6GFIS = curr & (1u << 5u);
        RXIPV4UDSBLFIS = curr & (1u << 4u);
        RXIPV4FRAGFIS = curr & (1u << 3u);
        RXIPV4NOPAYFIS = curr & (1u << 2u);
        RXIPV4HERFIS = curr & (1u << 1u);
        RXIPV4GFIS = curr & (1u << 0u);
    }

    /**
     * Get RXIPV4_GOOD_FRAMES's RXIPV4GDFRM field.
     *
     * This field indicates the number of good IPv4 datagrams received with the
     * TCP, UDP, or ICMP payload.
     */
    inline uint32_t get_RXIPV4_GOOD_FRAMES_RXIPV4GDFRM() volatile
    {
        return (RXIPV4_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_HEADER_ERROR_FRAMES's RXIPV4HDRERRFRM field.
     *
     * This field indicates the number of IPv4 datagrams received with header
     * errors (checksum, length, or version mismatch).
     */
    inline uint32_t get_RXIPV4_HEADER_ERROR_FRAMES_RXIPV4HDRERRFRM() volatile
    {
        return (RXIPV4_HEADER_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_NO_PAYLOAD_FRAMES's RXIPV4NOPAYFRM field.
     *
     * This field indicates the number of IPv4 datagram frames received that
     * did not have a TCP, UDP, or ICMP payload processed by the Checksum
     * engine.
     */
    inline uint32_t get_RXIPV4_NO_PAYLOAD_FRAMES_RXIPV4NOPAYFRM() volatile
    {
        return (RXIPV4_NO_PAYLOAD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_FRAGMENTED_FRAMES's RXIPV4FRAGFRM field.
     *
     * This field indicates the number of good IPv4 datagrams received with
     * fragmentation.
     */
    inline uint32_t get_RXIPV4_FRAGMENTED_FRAMES_RXIPV4FRAGFRM() volatile
    {
        return (RXIPV4_FRAGMENTED_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_UDP_CHECKSUM_DISABLED_FRAMES's RXIPV4UDSBLFRM field.
     *
     * This field indicates the number of received good IPv4 datagrams which
     * have the UDP payload with checksum disabled.
     */
    inline uint32_t
    get_RXIPV4_UDP_CHECKSUM_DISABLED_FRAMES_RXIPV4UDSBLFRM() volatile
    {
        return (RXIPV4_UDP_CHECKSUM_DISABLED_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_GOOD_FRAMES's RXIPV6GDFRM field.
     *
     * This field indicates the number of good IPv6 datagrams received with
     * TCP, UDP, or ICMP payloads.
     */
    inline uint32_t get_RXIPV6_GOOD_FRAMES_RXIPV6GDFRM() volatile
    {
        return (RXIPV6_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_HEADER_ERROR_FRAMES's RXIPV6HDRERRFRM field.
     *
     * This field indicates the number of IPv6 datagrams received with header
     * errors (length or version mismatch).
     */
    inline uint32_t get_RXIPV6_HEADER_ERROR_FRAMES_RXIPV6HDRERRFRM() volatile
    {
        return (RXIPV6_HEADER_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_NO_PAYLOAD_FRAMES's RXIPV6NOPAYFRM field.
     *
     * This field indicates the number of IPv6 datagram frames received that
     * did not have a TCP, UDP, or ICMP payload. This includes all IPv6
     * datagrams with fragmentation or security extension headers.
     */
    inline uint32_t get_RXIPV6_NO_PAYLOAD_FRAMES_RXIPV6NOPAYFRM() volatile
    {
        return (RXIPV6_NO_PAYLOAD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXUDP_GOOD_FRAMES's RXUDPGDFRM field.
     *
     * This field indicates the number of good IP datagrams with a good UDP
     * payload. This counter is not updated when the counter is incremented.
     */
    inline uint32_t get_RXUDP_GOOD_FRAMES_RXUDPGDFRM() volatile
    {
        return (RXUDP_GOOD_FRAMES >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RXUDP_ERROR_FRAMES's RXUDPERRFRM field.
     *
     * This field indicates the number of good IP datagrams whose UDP payload
     * has a checksum error.
     */
    inline uint32_t get_RXUDP_ERROR_FRAMES_RXUDPERRFRM() volatile
    {
        return (RXUDP_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXTCP_GOOD_FRAMES's RXTCPGDFRM field.
     *
     * This field indicates the number of good IP datagrams with a good TCP
     * payload.
     */
    inline uint32_t get_RXTCP_GOOD_FRAMES_RXTCPGDFRM() volatile
    {
        return (RXTCP_GOOD_FRAMES >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RXTCP_ERROR_FRAMES's RXTCPERRFRM field.
     *
     * This field indicates the number of good IP datagrams whose TCP payload
     * has a checksum error.
     */
    inline uint32_t get_RXTCP_ERROR_FRAMES_RXTCPERRFRM() volatile
    {
        return (RXTCP_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXICMP_GOOD_FRAMES's RXICMPGDFRM field.
     *
     * This field indicates the number of good IP datagrams with a good ICMP
     * payload.
     */
    inline uint32_t get_RXICMP_GOOD_FRAMES_RXICMPGDFRM() volatile
    {
        return (RXICMP_GOOD_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXICMP_ERROR_FRAMES's RXICMPERRFRM field.
     *
     * This field indicates the number of good IP datagrams whose ICMP payload
     * has a checksum error.
     */
    inline uint32_t get_RXICMP_ERROR_FRAMES_RXICMPERRFRM() volatile
    {
        return (RXICMP_ERROR_FRAMES >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_GOOD_OCTETS's RXIPV4GDOCT field.
     *
     * This field indicates the number of bytes received in good IPv4 datagrams
     * encapsulating TCP, UDP, or ICMP data. The Ethernet header, FCS, pad, or
     * IP pad
     */
    inline uint32_t get_RXIPV4_GOOD_OCTETS_RXIPV4GDOCT() volatile
    {
        return (RXIPV4_GOOD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_HEADER_ERROR_OCTETS's RXIPV4HDRERROCT field.
     *
     * This field indicates the number of bytes received in the IPv4 datagrams
     * with header errors (checksum, length, or version mismatch). The value in
     * the Length field of IPv4 header is used to update this counter.
     */
    inline uint32_t get_RXIPV4_HEADER_ERROR_OCTETS_RXIPV4HDRERROCT() volatile
    {
        return (RXIPV4_HEADER_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_NO_PAYLOAD_OCTETS's RXIPV4NOPAYOCT field.
     *
     * This field indicates the number of bytes received in IPv4 datagrams that
     * did not have a TCP, UDP, or ICMP payload. The value in the IPv4 headers
     * Length field is used to update this counter.
     */
    inline uint32_t get_RXIPV4_NO_PAYLOAD_OCTETS_RXIPV4NOPAYOCT() volatile
    {
        return (RXIPV4_NO_PAYLOAD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_FRAGMENTED_OCTETS's RXIPV4FRAGOCT field.
     *
     * This field indicates the number of bytes received in fragmented IPv4
     * datagrams. The value in the IPv4 headers Length field is used to update
     * this counter.
     */
    inline uint32_t get_RXIPV4_FRAGMENTED_OCTETS_RXIPV4FRAGOCT() volatile
    {
        return (RXIPV4_FRAGMENTED_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS's RXIPV4UDSBLOCT field.
     *
     * This field indicates the number of bytes received in a UDP segment that
     * had the UDP checksum disabled. This counter does not count the IP Header
     * bytes. The Ethernet header, FCS, pad, or IP pad bytes are not included
     * in this counter.
     */
    inline uint32_t
    get_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_RXIPV4UDSBLOCT() volatile
    {
        return (RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_GOOD_OCTETS's RXIPV6GDOCT field.
     *
     * Thsi field indicates the number of bytes received in good IPv6 datagrams
     * encapsulating TCP, UDP or ICMPv6 data.
     */
    inline uint32_t get_RXIPV6_GOOD_OCTETS_RXIPV6GDOCT() volatile
    {
        return (RXIPV6_GOOD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_HEADER_ERROR_OCTETS's RXIPV6HDRERROCT field.
     *
     * This field indicates the number of bytes received in IPv6 datagrams with
     * header errors (length or version mismatch). The value in the IPv6
     * headers Length field is used to update this counter.
     */
    inline uint32_t get_RXIPV6_HEADER_ERROR_OCTETS_RXIPV6HDRERROCT() volatile
    {
        return (RXIPV6_HEADER_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXIPV6_NO_PAYLOAD_OCTETS's RXIPV6NOPAYOCT field.
     *
     * This field indicates the number of bytes received in IPv6 datagrams that
     * did not have a TCP, UDP, or ICMP payload. The value in the IPv6 headers
     * Length field is used to update this counter.
     */
    inline uint32_t get_RXIPV6_NO_PAYLOAD_OCTETS_RXIPV6NOPAYOCT() volatile
    {
        return (RXIPV6_NO_PAYLOAD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXUDP_GOOD_OCTETS's RXUDPGDOCT field.
     *
     * This field indicates the number of bytes received in a good UDP segment.
     * This counter does not count IP header bytes. The Ethernet header, FCS,
     * pad, or IP pad bytes are not included in this counter.
     */
    inline uint32_t get_RXUDP_GOOD_OCTETS_RXUDPGDOCT() volatile
    {
        return (RXUDP_GOOD_OCTETS >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RXUDP_ERROR_OCTETS's RXUDPERROCT field.
     *
     * This field indicates the number of bytes received in a UDP segment with
     * checksum errors. This counter does not count the IP Header bytes. The
     * Ethernet header, FCS, pad, or IP pad bytes are not included in this
     * counter.
     */
    inline uint32_t get_RXUDP_ERROR_OCTETS_RXUDPERROCT() volatile
    {
        return (RXUDP_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXTCP_GOOD_OCTETS's RXTCPGDOCT field.
     *
     * This field indicates the number of bytes received in a good TCP segment.
     * This counter does not count the IP Header bytes. The Ethernet header,
     * FCS, pad, or IP pad bytes are not included in this counter.
     */
    inline uint32_t get_RXTCP_GOOD_OCTETS_RXTCPGDOCT() volatile
    {
        return (RXTCP_GOOD_OCTETS >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get RXTCP_ERROR_OCTETS's RXTCPERROCT field.
     *
     * Thsi field indicates the number of bytes received in a TCP segment with
     * checksum errors. This counter does not count the IP Header bytes. The
     * Ethernet header, FCS, pad, or IP pad bytes are not included in this
     * counter.
     */
    inline uint32_t get_RXTCP_ERROR_OCTETS_RXTCPERROCT() volatile
    {
        return (RXTCP_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXICMP_GOOD_OCTETS's RXICMPGDOCT field.
     *
     * This field indicates the number of bytes received in a good ICMP
     * segment. This counter does not count the IP Header bytes. The Ethernet
     * header, FCS, pad, or IP pad bytes are not included in this counter.
     */
    inline uint32_t get_RXICMP_GOOD_OCTETS_RXICMPGDOCT() volatile
    {
        return (RXICMP_GOOD_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get RXICMP_ERROR_OCTETS's RXICMPERROCT field.
     *
     * Number of bytes received in an ICMP segment with checksum errors
     */
    inline uint32_t get_RXICMP_ERROR_OCTETS_RXICMPERROCT() volatile
    {
        return (RXICMP_ERROR_OCTETS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSENMACADDR bit.
     *
     * Enable MAC address for PTP Frame Filtering
     */
    inline bool get_TIMESTAMP_CONTROL_TSENMACADDR() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 18u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSENMACADDR bit.
     *
     * Enable MAC address for PTP Frame Filtering
     */
    inline void set_TIMESTAMP_CONTROL_TSENMACADDR() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 18u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSENMACADDR bit.
     *
     * Enable MAC address for PTP Frame Filtering
     */
    inline void clear_TIMESTAMP_CONTROL_TSENMACADDR() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 18u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSENMACADDR bit.
     *
     * Enable MAC address for PTP Frame Filtering
     */
    inline void toggle_TIMESTAMP_CONTROL_TSENMACADDR() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 18u;
    }

    /**
     * Get TIMESTAMP_CONTROL's SNAPTYPSEL field.
     *
     * Select PTP packets for Taking Snapshots
     */
    inline uint8_t get_TIMESTAMP_CONTROL_SNAPTYPSEL() volatile
    {
        return (TIMESTAMP_CONTROL >> 16u) & 0b11u;
    }

    /**
     * Set TIMESTAMP_CONTROL's SNAPTYPSEL field.
     *
     * Select PTP packets for Taking Snapshots
     */
    inline void set_TIMESTAMP_CONTROL_SNAPTYPSEL(uint8_t value) volatile
    {
        uint32_t curr = TIMESTAMP_CONTROL;

        curr &= ~(0b11u << 16u);
        curr |= (value & 0b11u) << 16u;

        TIMESTAMP_CONTROL = curr;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSMSTRENA bit.
     *
     * Enable Snapshot for Messages Relevant to Master
     */
    inline bool get_TIMESTAMP_CONTROL_TSMSTRENA() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 15u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSMSTRENA bit.
     *
     * Enable Snapshot for Messages Relevant to Master
     */
    inline void set_TIMESTAMP_CONTROL_TSMSTRENA() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 15u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSMSTRENA bit.
     *
     * Enable Snapshot for Messages Relevant to Master
     */
    inline void clear_TIMESTAMP_CONTROL_TSMSTRENA() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSMSTRENA bit.
     *
     * Enable Snapshot for Messages Relevant to Master
     */
    inline void toggle_TIMESTAMP_CONTROL_TSMSTRENA() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 15u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSEVNTENA bit.
     *
     * Enable Timestamp Snapshot for Event Messages
     */
    inline bool get_TIMESTAMP_CONTROL_TSEVNTENA() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 14u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSEVNTENA bit.
     *
     * Enable Timestamp Snapshot for Event Messages
     */
    inline void set_TIMESTAMP_CONTROL_TSEVNTENA() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 14u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSEVNTENA bit.
     *
     * Enable Timestamp Snapshot for Event Messages
     */
    inline void clear_TIMESTAMP_CONTROL_TSEVNTENA() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSEVNTENA bit.
     *
     * Enable Timestamp Snapshot for Event Messages
     */
    inline void toggle_TIMESTAMP_CONTROL_TSEVNTENA() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 14u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSIPV4ENA bit.
     *
     * Enable Processing of PTP Frames Sent over IPv4-UDP
     */
    inline bool get_TIMESTAMP_CONTROL_TSIPV4ENA() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 13u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSIPV4ENA bit.
     *
     * Enable Processing of PTP Frames Sent over IPv4-UDP
     */
    inline void set_TIMESTAMP_CONTROL_TSIPV4ENA() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 13u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSIPV4ENA bit.
     *
     * Enable Processing of PTP Frames Sent over IPv4-UDP
     */
    inline void clear_TIMESTAMP_CONTROL_TSIPV4ENA() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSIPV4ENA bit.
     *
     * Enable Processing of PTP Frames Sent over IPv4-UDP
     */
    inline void toggle_TIMESTAMP_CONTROL_TSIPV4ENA() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 13u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSIPV6ENA bit.
     *
     * Enable Processing of PTP Frames Sent Over IPv6-UDP
     */
    inline bool get_TIMESTAMP_CONTROL_TSIPV6ENA() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 12u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSIPV6ENA bit.
     *
     * Enable Processing of PTP Frames Sent Over IPv6-UDP
     */
    inline void set_TIMESTAMP_CONTROL_TSIPV6ENA() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 12u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSIPV6ENA bit.
     *
     * Enable Processing of PTP Frames Sent Over IPv6-UDP
     */
    inline void clear_TIMESTAMP_CONTROL_TSIPV6ENA() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSIPV6ENA bit.
     *
     * Enable Processing of PTP Frames Sent Over IPv6-UDP
     */
    inline void toggle_TIMESTAMP_CONTROL_TSIPV6ENA() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 12u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSIPENA bit.
     *
     * Enable Processing of PTP over Ethernet Frames
     */
    inline bool get_TIMESTAMP_CONTROL_TSIPENA() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 11u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSIPENA bit.
     *
     * Enable Processing of PTP over Ethernet Frames
     */
    inline void set_TIMESTAMP_CONTROL_TSIPENA() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 11u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSIPENA bit.
     *
     * Enable Processing of PTP over Ethernet Frames
     */
    inline void clear_TIMESTAMP_CONTROL_TSIPENA() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSIPENA bit.
     *
     * Enable Processing of PTP over Ethernet Frames
     */
    inline void toggle_TIMESTAMP_CONTROL_TSIPENA() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 11u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSVER2ENA bit.
     *
     * Enable PTP packet Processing for Version 2 Format
     */
    inline bool get_TIMESTAMP_CONTROL_TSVER2ENA() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 10u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSVER2ENA bit.
     *
     * Enable PTP packet Processing for Version 2 Format
     */
    inline void set_TIMESTAMP_CONTROL_TSVER2ENA() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 10u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSVER2ENA bit.
     *
     * Enable PTP packet Processing for Version 2 Format
     */
    inline void clear_TIMESTAMP_CONTROL_TSVER2ENA() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSVER2ENA bit.
     *
     * Enable PTP packet Processing for Version 2 Format
     */
    inline void toggle_TIMESTAMP_CONTROL_TSVER2ENA() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 10u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSCTRLSSR bit.
     *
     * Timestamp Digital or Binary Rollover Control
     */
    inline bool get_TIMESTAMP_CONTROL_TSCTRLSSR() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 9u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSCTRLSSR bit.
     *
     * Timestamp Digital or Binary Rollover Control
     */
    inline void set_TIMESTAMP_CONTROL_TSCTRLSSR() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 9u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSCTRLSSR bit.
     *
     * Timestamp Digital or Binary Rollover Control
     */
    inline void clear_TIMESTAMP_CONTROL_TSCTRLSSR() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 9u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSCTRLSSR bit.
     *
     * Timestamp Digital or Binary Rollover Control
     */
    inline void toggle_TIMESTAMP_CONTROL_TSCTRLSSR() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 9u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSENALL bit.
     *
     * Enable Timestamp for All Frames
     */
    inline bool get_TIMESTAMP_CONTROL_TSENALL() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 8u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSENALL bit.
     *
     * Enable Timestamp for All Frames
     */
    inline void set_TIMESTAMP_CONTROL_TSENALL() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 8u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSENALL bit.
     *
     * Enable Timestamp for All Frames
     */
    inline void clear_TIMESTAMP_CONTROL_TSENALL() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 8u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSENALL bit.
     *
     * Enable Timestamp for All Frames
     */
    inline void toggle_TIMESTAMP_CONTROL_TSENALL() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 8u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSADDREG bit.
     *
     * Addend Reg Update
     */
    inline bool get_TIMESTAMP_CONTROL_TSADDREG() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 5u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSADDREG bit.
     *
     * Addend Reg Update
     */
    inline void set_TIMESTAMP_CONTROL_TSADDREG() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 5u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSADDREG bit.
     *
     * Addend Reg Update
     */
    inline void clear_TIMESTAMP_CONTROL_TSADDREG() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 5u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSADDREG bit.
     *
     * Addend Reg Update
     */
    inline void toggle_TIMESTAMP_CONTROL_TSADDREG() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 5u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSTRIG bit.
     *
     * Timestamp Interrupt Trigger Enable
     */
    inline bool get_TIMESTAMP_CONTROL_TSTRIG() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 4u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSTRIG bit.
     *
     * Timestamp Interrupt Trigger Enable
     */
    inline void set_TIMESTAMP_CONTROL_TSTRIG() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 4u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSTRIG bit.
     *
     * Timestamp Interrupt Trigger Enable
     */
    inline void clear_TIMESTAMP_CONTROL_TSTRIG() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 4u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSTRIG bit.
     *
     * Timestamp Interrupt Trigger Enable
     */
    inline void toggle_TIMESTAMP_CONTROL_TSTRIG() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 4u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSUPDT bit.
     *
     * Timestamp Update
     */
    inline bool get_TIMESTAMP_CONTROL_TSUPDT() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 3u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSUPDT bit.
     *
     * Timestamp Update
     */
    inline void set_TIMESTAMP_CONTROL_TSUPDT() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 3u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSUPDT bit.
     *
     * Timestamp Update
     */
    inline void clear_TIMESTAMP_CONTROL_TSUPDT() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 3u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSUPDT bit.
     *
     * Timestamp Update
     */
    inline void toggle_TIMESTAMP_CONTROL_TSUPDT() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 3u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSINIT bit.
     *
     * Timestamp Initialize
     */
    inline bool get_TIMESTAMP_CONTROL_TSINIT() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 2u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSINIT bit.
     *
     * Timestamp Initialize
     */
    inline void set_TIMESTAMP_CONTROL_TSINIT() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 2u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSINIT bit.
     *
     * Timestamp Initialize
     */
    inline void clear_TIMESTAMP_CONTROL_TSINIT() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 2u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSINIT bit.
     *
     * Timestamp Initialize
     */
    inline void toggle_TIMESTAMP_CONTROL_TSINIT() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 2u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSCFUPDT bit.
     *
     * Timestamp Fine or Coarse Update
     */
    inline bool get_TIMESTAMP_CONTROL_TSCFUPDT() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 1u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSCFUPDT bit.
     *
     * Timestamp Fine or Coarse Update
     */
    inline void set_TIMESTAMP_CONTROL_TSCFUPDT() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 1u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSCFUPDT bit.
     *
     * Timestamp Fine or Coarse Update
     */
    inline void clear_TIMESTAMP_CONTROL_TSCFUPDT() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 1u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSCFUPDT bit.
     *
     * Timestamp Fine or Coarse Update
     */
    inline void toggle_TIMESTAMP_CONTROL_TSCFUPDT() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 1u;
    }

    /**
     * Get TIMESTAMP_CONTROL's TSENA bit.
     *
     * Timestamp Enable
     */
    inline bool get_TIMESTAMP_CONTROL_TSENA() volatile
    {
        return TIMESTAMP_CONTROL & (1u << 0u);
    }

    /**
     * Set TIMESTAMP_CONTROL's TSENA bit.
     *
     * Timestamp Enable
     */
    inline void set_TIMESTAMP_CONTROL_TSENA() volatile
    {
        TIMESTAMP_CONTROL |= 1u << 0u;
    }

    /**
     * Clear TIMESTAMP_CONTROL's TSENA bit.
     *
     * Timestamp Enable
     */
    inline void clear_TIMESTAMP_CONTROL_TSENA() volatile
    {
        TIMESTAMP_CONTROL &= ~(1u << 0u);
    }

    /**
     * Toggle TIMESTAMP_CONTROL's TSENA bit.
     *
     * Timestamp Enable
     */
    inline void toggle_TIMESTAMP_CONTROL_TSENA() volatile
    {
        TIMESTAMP_CONTROL ^= 1u << 0u;
    }

    /**
     * Get all of TIMESTAMP_CONTROL's bit fields.
     *
     * (read-write) Timestamp Control Register
     */
    inline void get_TIMESTAMP_CONTROL(bool &TSENMACADDR, uint8_t &SNAPTYPSEL,
                                      bool &TSMSTRENA, bool &TSEVNTENA,
                                      bool &TSIPV4ENA, bool &TSIPV6ENA,
                                      bool &TSIPENA, bool &TSVER2ENA,
                                      bool &TSCTRLSSR, bool &TSENALL,
                                      bool &TSADDREG, bool &TSTRIG,
                                      bool &TSUPDT, bool &TSINIT,
                                      bool &TSCFUPDT, bool &TSENA) volatile
    {
        uint32_t curr = TIMESTAMP_CONTROL;

        TSENMACADDR = curr & (1u << 18u);
        SNAPTYPSEL = (curr >> 16u) & 0b11u;
        TSMSTRENA = curr & (1u << 15u);
        TSEVNTENA = curr & (1u << 14u);
        TSIPV4ENA = curr & (1u << 13u);
        TSIPV6ENA = curr & (1u << 12u);
        TSIPENA = curr & (1u << 11u);
        TSVER2ENA = curr & (1u << 10u);
        TSCTRLSSR = curr & (1u << 9u);
        TSENALL = curr & (1u << 8u);
        TSADDREG = curr & (1u << 5u);
        TSTRIG = curr & (1u << 4u);
        TSUPDT = curr & (1u << 3u);
        TSINIT = curr & (1u << 2u);
        TSCFUPDT = curr & (1u << 1u);
        TSENA = curr & (1u << 0u);
    }

    /**
     * Set all of TIMESTAMP_CONTROL's bit fields.
     *
     * (read-write) Timestamp Control Register
     */
    inline void set_TIMESTAMP_CONTROL(
        bool TSENMACADDR, uint8_t SNAPTYPSEL, bool TSMSTRENA, bool TSEVNTENA,
        bool TSIPV4ENA, bool TSIPV6ENA, bool TSIPENA, bool TSVER2ENA,
        bool TSCTRLSSR, bool TSENALL, bool TSADDREG, bool TSTRIG, bool TSUPDT,
        bool TSINIT, bool TSCFUPDT, bool TSENA) volatile
    {
        uint32_t curr = TIMESTAMP_CONTROL;

        curr &= ~(0b1u << 18u);
        curr |= (TSENMACADDR & 0b1u) << 18u;
        curr &= ~(0b11u << 16u);
        curr |= (SNAPTYPSEL & 0b11u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (TSMSTRENA & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (TSEVNTENA & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (TSIPV4ENA & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (TSIPV6ENA & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (TSIPENA & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (TSVER2ENA & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (TSCTRLSSR & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (TSENALL & 0b1u) << 8u;
        curr &= ~(0b1u << 5u);
        curr |= (TSADDREG & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (TSTRIG & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TSUPDT & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (TSINIT & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TSCFUPDT & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TSENA & 0b1u) << 0u;

        TIMESTAMP_CONTROL = curr;
    }

    /**
     * Get SUB_SECOND_INCREMENT's SSINC field.
     *
     * Sub-second Increment Value
     */
    inline uint8_t get_SUB_SECOND_INCREMENT_SSINC() volatile
    {
        return (SUB_SECOND_INCREMENT >> 0u) & 0b11111111u;
    }

    /**
     * Set SUB_SECOND_INCREMENT's SSINC field.
     *
     * Sub-second Increment Value
     */
    inline void set_SUB_SECOND_INCREMENT_SSINC(uint8_t value) volatile
    {
        uint32_t curr = SUB_SECOND_INCREMENT;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SUB_SECOND_INCREMENT = curr;
    }

    /**
     * Get SYSTEM_TIME_SECONDS's TSS field.
     *
     * Timestamp Second
     */
    inline uint32_t get_SYSTEM_TIME_SECONDS_TSS() volatile
    {
        return (SYSTEM_TIME_SECONDS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get SYSTEM_TIME_NANOSECONDS's TSSS field.
     *
     * Timestamp Sub Seconds
     */
    inline uint32_t get_SYSTEM_TIME_NANOSECONDS_TSSS() volatile
    {
        return (SYSTEM_TIME_NANOSECONDS >> 0u) &
               0b1111111111111111111111111111111u;
    }

    /**
     * Get SYSTEM_TIME_SECONDS_UPDATE's TSS field.
     *
     * Timestamp Second
     */
    inline uint32_t get_SYSTEM_TIME_SECONDS_UPDATE_TSS() volatile
    {
        return (SYSTEM_TIME_SECONDS_UPDATE >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set SYSTEM_TIME_SECONDS_UPDATE's TSS field.
     *
     * Timestamp Second
     */
    inline void set_SYSTEM_TIME_SECONDS_UPDATE_TSS(uint32_t value) volatile
    {
        uint32_t curr = SYSTEM_TIME_SECONDS_UPDATE;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        SYSTEM_TIME_SECONDS_UPDATE = curr;
    }

    /**
     * Get SYSTEM_TIME_NANOSECONDS_UPDATE's ADDSUB bit.
     *
     * Add or subtract time
     */
    inline bool get_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB() volatile
    {
        return SYSTEM_TIME_NANOSECONDS_UPDATE & (1u << 31u);
    }

    /**
     * Set SYSTEM_TIME_NANOSECONDS_UPDATE's ADDSUB bit.
     *
     * Add or subtract time
     */
    inline void set_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB() volatile
    {
        SYSTEM_TIME_NANOSECONDS_UPDATE |= 1u << 31u;
    }

    /**
     * Clear SYSTEM_TIME_NANOSECONDS_UPDATE's ADDSUB bit.
     *
     * Add or subtract time
     */
    inline void clear_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB() volatile
    {
        SYSTEM_TIME_NANOSECONDS_UPDATE &= ~(1u << 31u);
    }

    /**
     * Toggle SYSTEM_TIME_NANOSECONDS_UPDATE's ADDSUB bit.
     *
     * Add or subtract time
     */
    inline void toggle_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB() volatile
    {
        SYSTEM_TIME_NANOSECONDS_UPDATE ^= 1u << 31u;
    }

    /**
     * Get SYSTEM_TIME_NANOSECONDS_UPDATE's TSSS field.
     *
     * Timestamp Sub Second
     */
    inline uint32_t get_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS() volatile
    {
        return (SYSTEM_TIME_NANOSECONDS_UPDATE >> 0u) &
               0b1111111111111111111111111111111u;
    }

    /**
     * Set SYSTEM_TIME_NANOSECONDS_UPDATE's TSSS field.
     *
     * Timestamp Sub Second
     */
    inline void set_SYSTEM_TIME_NANOSECONDS_UPDATE_TSSS(
        uint32_t value) volatile
    {
        uint32_t curr = SYSTEM_TIME_NANOSECONDS_UPDATE;

        curr &= ~(0b1111111111111111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111111111111111u) << 0u;

        SYSTEM_TIME_NANOSECONDS_UPDATE = curr;
    }

    /**
     * Get all of SYSTEM_TIME_NANOSECONDS_UPDATE's bit fields.
     *
     * (read-write) System Time Nanoseconds Update Register
     */
    inline void get_SYSTEM_TIME_NANOSECONDS_UPDATE(bool &ADDSUB,
                                                   uint32_t &TSSS) volatile
    {
        uint32_t curr = SYSTEM_TIME_NANOSECONDS_UPDATE;

        ADDSUB = curr & (1u << 31u);
        TSSS = (curr >> 0u) & 0b1111111111111111111111111111111u;
    }

    /**
     * Set all of SYSTEM_TIME_NANOSECONDS_UPDATE's bit fields.
     *
     * (read-write) System Time Nanoseconds Update Register
     */
    inline void set_SYSTEM_TIME_NANOSECONDS_UPDATE(bool ADDSUB,
                                                   uint32_t TSSS) volatile
    {
        uint32_t curr = SYSTEM_TIME_NANOSECONDS_UPDATE;

        curr &= ~(0b1u << 31u);
        curr |= (ADDSUB & 0b1u) << 31u;
        curr &= ~(0b1111111111111111111111111111111u << 0u);
        curr |= (TSSS & 0b1111111111111111111111111111111u) << 0u;

        SYSTEM_TIME_NANOSECONDS_UPDATE = curr;
    }

    /**
     * Get TIMESTAMP_ADDEND's TSAR field.
     *
     * Timestamp Addend Register
     */
    inline uint32_t get_TIMESTAMP_ADDEND_TSAR() volatile
    {
        return (TIMESTAMP_ADDEND >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set TIMESTAMP_ADDEND's TSAR field.
     *
     * Timestamp Addend Register
     */
    inline void set_TIMESTAMP_ADDEND_TSAR(uint32_t value) volatile
    {
        uint32_t curr = TIMESTAMP_ADDEND;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TIMESTAMP_ADDEND = curr;
    }

    /**
     * Get TARGET_TIME_SECONDS's TSTR field.
     *
     * Target Time Seconds Register
     */
    inline uint32_t get_TARGET_TIME_SECONDS_TSTR() volatile
    {
        return (TARGET_TIME_SECONDS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set TARGET_TIME_SECONDS's TSTR field.
     *
     * Target Time Seconds Register
     */
    inline void set_TARGET_TIME_SECONDS_TSTR(uint32_t value) volatile
    {
        uint32_t curr = TARGET_TIME_SECONDS;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TARGET_TIME_SECONDS = curr;
    }

    /**
     * Get TARGET_TIME_NANOSECONDS's TRGTBUSY bit.
     *
     * Target Time Register Busy
     */
    inline bool get_TARGET_TIME_NANOSECONDS_TRGTBUSY() volatile
    {
        return TARGET_TIME_NANOSECONDS & (1u << 31u);
    }

    /**
     * Get TARGET_TIME_NANOSECONDS's TTSLO field.
     *
     * Target Timestamp Low Register
     */
    inline uint32_t get_TARGET_TIME_NANOSECONDS_TTSLO() volatile
    {
        return (TARGET_TIME_NANOSECONDS >> 0u) &
               0b1111111111111111111111111111111u;
    }

    /**
     * Set TARGET_TIME_NANOSECONDS's TTSLO field.
     *
     * Target Timestamp Low Register
     */
    inline void set_TARGET_TIME_NANOSECONDS_TTSLO(uint32_t value) volatile
    {
        uint32_t curr = TARGET_TIME_NANOSECONDS;

        curr &= ~(0b1111111111111111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111111111111111u) << 0u;

        TARGET_TIME_NANOSECONDS = curr;
    }

    /**
     * Get all of TARGET_TIME_NANOSECONDS's bit fields.
     *
     * (read-write) Target Time Nanoseconds Register
     */
    inline void get_TARGET_TIME_NANOSECONDS(bool &TRGTBUSY,
                                            uint32_t &TTSLO) volatile
    {
        uint32_t curr = TARGET_TIME_NANOSECONDS;

        TRGTBUSY = curr & (1u << 31u);
        TTSLO = (curr >> 0u) & 0b1111111111111111111111111111111u;
    }

    /**
     * Get SYSTEM_TIME_HIGHER_WORD_SECONDS's TSHWR field.
     *
     * Timestamp Higher Word Register
     */
    inline uint16_t get_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR() volatile
    {
        return (SYSTEM_TIME_HIGHER_WORD_SECONDS >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SYSTEM_TIME_HIGHER_WORD_SECONDS's TSHWR field.
     *
     * Timestamp Higher Word Register
     */
    inline void set_SYSTEM_TIME_HIGHER_WORD_SECONDS_TSHWR(
        uint16_t value) volatile
    {
        uint32_t curr = SYSTEM_TIME_HIGHER_WORD_SECONDS;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SYSTEM_TIME_HIGHER_WORD_SECONDS = curr;
    }

    /**
     * Get TIMESTAMP_STATUS's TSTRGTERR3 bit.
     *
     * Timestamp Target Time Error
     */
    inline bool get_TIMESTAMP_STATUS_TSTRGTERR3() volatile
    {
        return TIMESTAMP_STATUS & (1u << 9u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTARGT3 bit.
     *
     * Timestamp Target Time Reached for Target Time PPS3
     */
    inline bool get_TIMESTAMP_STATUS_TSTARGT3() volatile
    {
        return TIMESTAMP_STATUS & (1u << 8u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTRGTERR2 bit.
     *
     * Timestamp Target Time Error
     */
    inline bool get_TIMESTAMP_STATUS_TSTRGTERR2() volatile
    {
        return TIMESTAMP_STATUS & (1u << 7u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTARGT2 bit.
     *
     * Timestamp Target Time Reached for Target Time PPS2
     */
    inline bool get_TIMESTAMP_STATUS_TSTARGT2() volatile
    {
        return TIMESTAMP_STATUS & (1u << 6u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTRGTERR1 bit.
     *
     * Timestamp Target Time Error
     */
    inline bool get_TIMESTAMP_STATUS_TSTRGTERR1() volatile
    {
        return TIMESTAMP_STATUS & (1u << 5u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTARGT1 bit.
     *
     * Timestamp Target Time Reached for Target Time PPS1
     */
    inline bool get_TIMESTAMP_STATUS_TSTARGT1() volatile
    {
        return TIMESTAMP_STATUS & (1u << 4u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTRGTERR bit.
     *
     * Timestamp Target Time Error
     */
    inline bool get_TIMESTAMP_STATUS_TSTRGTERR() volatile
    {
        return TIMESTAMP_STATUS & (1u << 3u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSTARGT bit.
     *
     * Timestamp Target Time Reached
     */
    inline bool get_TIMESTAMP_STATUS_TSTARGT() volatile
    {
        return TIMESTAMP_STATUS & (1u << 1u);
    }

    /**
     * Get TIMESTAMP_STATUS's TSSOVF bit.
     *
     * Timestamp Seconds Overflow
     */
    inline bool get_TIMESTAMP_STATUS_TSSOVF() volatile
    {
        return TIMESTAMP_STATUS & (1u << 0u);
    }

    /**
     * Get all of TIMESTAMP_STATUS's bit fields.
     *
     * (read-only) Timestamp Status Register
     */
    inline void get_TIMESTAMP_STATUS(bool &TSTRGTERR3, bool &TSTARGT3,
                                     bool &TSTRGTERR2, bool &TSTARGT2,
                                     bool &TSTRGTERR1, bool &TSTARGT1,
                                     bool &TSTRGTERR, bool &TSTARGT,
                                     bool &TSSOVF) volatile
    {
        uint32_t curr = TIMESTAMP_STATUS;

        TSTRGTERR3 = curr & (1u << 9u);
        TSTARGT3 = curr & (1u << 8u);
        TSTRGTERR2 = curr & (1u << 7u);
        TSTARGT2 = curr & (1u << 6u);
        TSTRGTERR1 = curr & (1u << 5u);
        TSTARGT1 = curr & (1u << 4u);
        TSTRGTERR = curr & (1u << 3u);
        TSTARGT = curr & (1u << 1u);
        TSSOVF = curr & (1u << 0u);
    }

    /**
     * Get BUS_MODE's PRWG field.
     *
     * Channel Priority Weights
     */
    inline uint8_t get_BUS_MODE_PRWG() volatile
    {
        return (BUS_MODE >> 28u) & 0b11u;
    }

    /**
     * Get BUS_MODE's TXPR bit.
     *
     * Transmit Priority
     */
    inline bool get_BUS_MODE_TXPR() volatile
    {
        return BUS_MODE & (1u << 27u);
    }

    /**
     * Set BUS_MODE's TXPR bit.
     *
     * Transmit Priority
     */
    inline void set_BUS_MODE_TXPR() volatile
    {
        BUS_MODE |= 1u << 27u;
    }

    /**
     * Clear BUS_MODE's TXPR bit.
     *
     * Transmit Priority
     */
    inline void clear_BUS_MODE_TXPR() volatile
    {
        BUS_MODE &= ~(1u << 27u);
    }

    /**
     * Toggle BUS_MODE's TXPR bit.
     *
     * Transmit Priority
     */
    inline void toggle_BUS_MODE_TXPR() volatile
    {
        BUS_MODE ^= 1u << 27u;
    }

    /**
     * Get BUS_MODE's MB bit.
     *
     * Mixed Burst
     */
    inline bool get_BUS_MODE_MB() volatile
    {
        return BUS_MODE & (1u << 26u);
    }

    /**
     * Set BUS_MODE's MB bit.
     *
     * Mixed Burst
     */
    inline void set_BUS_MODE_MB() volatile
    {
        BUS_MODE |= 1u << 26u;
    }

    /**
     * Clear BUS_MODE's MB bit.
     *
     * Mixed Burst
     */
    inline void clear_BUS_MODE_MB() volatile
    {
        BUS_MODE &= ~(1u << 26u);
    }

    /**
     * Toggle BUS_MODE's MB bit.
     *
     * Mixed Burst
     */
    inline void toggle_BUS_MODE_MB() volatile
    {
        BUS_MODE ^= 1u << 26u;
    }

    /**
     * Get BUS_MODE's AAL bit.
     *
     * Address Aligned Beats
     */
    inline bool get_BUS_MODE_AAL() volatile
    {
        return BUS_MODE & (1u << 25u);
    }

    /**
     * Set BUS_MODE's AAL bit.
     *
     * Address Aligned Beats
     */
    inline void set_BUS_MODE_AAL() volatile
    {
        BUS_MODE |= 1u << 25u;
    }

    /**
     * Clear BUS_MODE's AAL bit.
     *
     * Address Aligned Beats
     */
    inline void clear_BUS_MODE_AAL() volatile
    {
        BUS_MODE &= ~(1u << 25u);
    }

    /**
     * Toggle BUS_MODE's AAL bit.
     *
     * Address Aligned Beats
     */
    inline void toggle_BUS_MODE_AAL() volatile
    {
        BUS_MODE ^= 1u << 25u;
    }

    /**
     * Get BUS_MODE's PBLX8 bit.
     *
     * 8xPBL Mode
     */
    inline bool get_BUS_MODE_PBLX8() volatile
    {
        return BUS_MODE & (1u << 24u);
    }

    /**
     * Set BUS_MODE's PBLX8 bit.
     *
     * 8xPBL Mode
     */
    inline void set_BUS_MODE_PBLX8() volatile
    {
        BUS_MODE |= 1u << 24u;
    }

    /**
     * Clear BUS_MODE's PBLX8 bit.
     *
     * 8xPBL Mode
     */
    inline void clear_BUS_MODE_PBLX8() volatile
    {
        BUS_MODE &= ~(1u << 24u);
    }

    /**
     * Toggle BUS_MODE's PBLX8 bit.
     *
     * 8xPBL Mode
     */
    inline void toggle_BUS_MODE_PBLX8() volatile
    {
        BUS_MODE ^= 1u << 24u;
    }

    /**
     * Get BUS_MODE's USP bit.
     *
     * Use Seperate PBL
     */
    inline bool get_BUS_MODE_USP() volatile
    {
        return BUS_MODE & (1u << 23u);
    }

    /**
     * Set BUS_MODE's USP bit.
     *
     * Use Seperate PBL
     */
    inline void set_BUS_MODE_USP() volatile
    {
        BUS_MODE |= 1u << 23u;
    }

    /**
     * Clear BUS_MODE's USP bit.
     *
     * Use Seperate PBL
     */
    inline void clear_BUS_MODE_USP() volatile
    {
        BUS_MODE &= ~(1u << 23u);
    }

    /**
     * Toggle BUS_MODE's USP bit.
     *
     * Use Seperate PBL
     */
    inline void toggle_BUS_MODE_USP() volatile
    {
        BUS_MODE ^= 1u << 23u;
    }

    /**
     * Get BUS_MODE's RPBL field.
     *
     * Rx DMA PBL
     */
    inline uint8_t get_BUS_MODE_RPBL() volatile
    {
        return (BUS_MODE >> 17u) & 0b111111u;
    }

    /**
     * Set BUS_MODE's RPBL field.
     *
     * Rx DMA PBL
     */
    inline void set_BUS_MODE_RPBL(uint8_t value) volatile
    {
        uint32_t curr = BUS_MODE;

        curr &= ~(0b111111u << 17u);
        curr |= (value & 0b111111u) << 17u;

        BUS_MODE = curr;
    }

    /**
     * Get BUS_MODE's FB bit.
     *
     * Fixed Burst
     */
    inline bool get_BUS_MODE_FB() volatile
    {
        return BUS_MODE & (1u << 16u);
    }

    /**
     * Set BUS_MODE's FB bit.
     *
     * Fixed Burst
     */
    inline void set_BUS_MODE_FB() volatile
    {
        BUS_MODE |= 1u << 16u;
    }

    /**
     * Clear BUS_MODE's FB bit.
     *
     * Fixed Burst
     */
    inline void clear_BUS_MODE_FB() volatile
    {
        BUS_MODE &= ~(1u << 16u);
    }

    /**
     * Toggle BUS_MODE's FB bit.
     *
     * Fixed Burst
     */
    inline void toggle_BUS_MODE_FB() volatile
    {
        BUS_MODE ^= 1u << 16u;
    }

    /**
     * Get BUS_MODE's PR field.
     *
     * Priority Ratio
     */
    inline uint8_t get_BUS_MODE_PR() volatile
    {
        return (BUS_MODE >> 14u) & 0b11u;
    }

    /**
     * Set BUS_MODE's PR field.
     *
     * Priority Ratio
     */
    inline void set_BUS_MODE_PR(uint8_t value) volatile
    {
        uint32_t curr = BUS_MODE;

        curr &= ~(0b11u << 14u);
        curr |= (value & 0b11u) << 14u;

        BUS_MODE = curr;
    }

    /**
     * Get BUS_MODE's PBL field.
     *
     * Programmable Burst Length
     */
    inline uint8_t get_BUS_MODE_PBL() volatile
    {
        return (BUS_MODE >> 8u) & 0b111111u;
    }

    /**
     * Set BUS_MODE's PBL field.
     *
     * Programmable Burst Length
     */
    inline void set_BUS_MODE_PBL(uint8_t value) volatile
    {
        uint32_t curr = BUS_MODE;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        BUS_MODE = curr;
    }

    /**
     * Get BUS_MODE's ATDS bit.
     *
     * Alternate Descriptor Size
     */
    inline bool get_BUS_MODE_ATDS() volatile
    {
        return BUS_MODE & (1u << 7u);
    }

    /**
     * Set BUS_MODE's ATDS bit.
     *
     * Alternate Descriptor Size
     */
    inline void set_BUS_MODE_ATDS() volatile
    {
        BUS_MODE |= 1u << 7u;
    }

    /**
     * Clear BUS_MODE's ATDS bit.
     *
     * Alternate Descriptor Size
     */
    inline void clear_BUS_MODE_ATDS() volatile
    {
        BUS_MODE &= ~(1u << 7u);
    }

    /**
     * Toggle BUS_MODE's ATDS bit.
     *
     * Alternate Descriptor Size
     */
    inline void toggle_BUS_MODE_ATDS() volatile
    {
        BUS_MODE ^= 1u << 7u;
    }

    /**
     * Get BUS_MODE's DSL field.
     *
     * Descriptor Skip Length
     */
    inline uint8_t get_BUS_MODE_DSL() volatile
    {
        return (BUS_MODE >> 2u) & 0b11111u;
    }

    /**
     * Set BUS_MODE's DSL field.
     *
     * Descriptor Skip Length
     */
    inline void set_BUS_MODE_DSL(uint8_t value) volatile
    {
        uint32_t curr = BUS_MODE;

        curr &= ~(0b11111u << 2u);
        curr |= (value & 0b11111u) << 2u;

        BUS_MODE = curr;
    }

    /**
     * Get BUS_MODE's DA bit.
     *
     * DMA Arbitration Scheme
     */
    inline bool get_BUS_MODE_DA() volatile
    {
        return BUS_MODE & (1u << 1u);
    }

    /**
     * Set BUS_MODE's DA bit.
     *
     * DMA Arbitration Scheme
     */
    inline void set_BUS_MODE_DA() volatile
    {
        BUS_MODE |= 1u << 1u;
    }

    /**
     * Clear BUS_MODE's DA bit.
     *
     * DMA Arbitration Scheme
     */
    inline void clear_BUS_MODE_DA() volatile
    {
        BUS_MODE &= ~(1u << 1u);
    }

    /**
     * Toggle BUS_MODE's DA bit.
     *
     * DMA Arbitration Scheme
     */
    inline void toggle_BUS_MODE_DA() volatile
    {
        BUS_MODE ^= 1u << 1u;
    }

    /**
     * Get BUS_MODE's SWR bit.
     *
     * Software Reset
     */
    inline bool get_BUS_MODE_SWR() volatile
    {
        return BUS_MODE & (1u << 0u);
    }

    /**
     * Set BUS_MODE's SWR bit.
     *
     * Software Reset
     */
    inline void set_BUS_MODE_SWR() volatile
    {
        BUS_MODE |= 1u << 0u;
    }

    /**
     * Clear BUS_MODE's SWR bit.
     *
     * Software Reset
     */
    inline void clear_BUS_MODE_SWR() volatile
    {
        BUS_MODE &= ~(1u << 0u);
    }

    /**
     * Toggle BUS_MODE's SWR bit.
     *
     * Software Reset
     */
    inline void toggle_BUS_MODE_SWR() volatile
    {
        BUS_MODE ^= 1u << 0u;
    }

    /**
     * Get all of BUS_MODE's bit fields.
     *
     * (read-write) Bus Mode Register
     */
    inline void get_BUS_MODE(uint8_t &PRWG, bool &TXPR, bool &MB, bool &AAL,
                             bool &PBLX8, bool &USP, uint8_t &RPBL, bool &FB,
                             uint8_t &PR, uint8_t &PBL, bool &ATDS,
                             uint8_t &DSL, bool &DA, bool &SWR) volatile
    {
        uint32_t curr = BUS_MODE;

        PRWG = (curr >> 28u) & 0b11u;
        TXPR = curr & (1u << 27u);
        MB = curr & (1u << 26u);
        AAL = curr & (1u << 25u);
        PBLX8 = curr & (1u << 24u);
        USP = curr & (1u << 23u);
        RPBL = (curr >> 17u) & 0b111111u;
        FB = curr & (1u << 16u);
        PR = (curr >> 14u) & 0b11u;
        PBL = (curr >> 8u) & 0b111111u;
        ATDS = curr & (1u << 7u);
        DSL = (curr >> 2u) & 0b11111u;
        DA = curr & (1u << 1u);
        SWR = curr & (1u << 0u);
    }

    /**
     * Set all of BUS_MODE's bit fields.
     *
     * (read-write) Bus Mode Register
     */
    inline void set_BUS_MODE(bool TXPR, bool MB, bool AAL, bool PBLX8,
                             bool USP, uint8_t RPBL, bool FB, uint8_t PR,
                             uint8_t PBL, bool ATDS, uint8_t DSL, bool DA,
                             bool SWR) volatile
    {
        uint32_t curr = BUS_MODE;

        curr &= ~(0b1u << 27u);
        curr |= (TXPR & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (MB & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (AAL & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (PBLX8 & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (USP & 0b1u) << 23u;
        curr &= ~(0b111111u << 17u);
        curr |= (RPBL & 0b111111u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (FB & 0b1u) << 16u;
        curr &= ~(0b11u << 14u);
        curr |= (PR & 0b11u) << 14u;
        curr &= ~(0b111111u << 8u);
        curr |= (PBL & 0b111111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ATDS & 0b1u) << 7u;
        curr &= ~(0b11111u << 2u);
        curr |= (DSL & 0b11111u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DA & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (SWR & 0b1u) << 0u;

        BUS_MODE = curr;
    }

    /**
     * Get TRANSMIT_POLL_DEMAND's TPD field.
     *
     * Transmit Poll Demand
     */
    inline uint32_t get_TRANSMIT_POLL_DEMAND_TPD() volatile
    {
        return (TRANSMIT_POLL_DEMAND >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set TRANSMIT_POLL_DEMAND's TPD field.
     *
     * Transmit Poll Demand
     */
    inline void set_TRANSMIT_POLL_DEMAND_TPD(uint32_t value) volatile
    {
        uint32_t curr = TRANSMIT_POLL_DEMAND;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        TRANSMIT_POLL_DEMAND = curr;
    }

    /**
     * Get RECEIVE_POLL_DEMAND's RPD field.
     *
     * Receive Poll Demand
     */
    inline uint32_t get_RECEIVE_POLL_DEMAND_RPD() volatile
    {
        return (RECEIVE_POLL_DEMAND >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Set RECEIVE_POLL_DEMAND's RPD field.
     *
     * Receive Poll Demand
     */
    inline void set_RECEIVE_POLL_DEMAND_RPD(uint32_t value) volatile
    {
        uint32_t curr = RECEIVE_POLL_DEMAND;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        RECEIVE_POLL_DEMAND = curr;
    }

    /**
     * Get RECEIVE_DESCRIPTOR_LIST_ADDRESS's RDESLA_32bit field.
     *
     * Start of Receive List
     */
    inline uint32_t get_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32bit() volatile
    {
        return (RECEIVE_DESCRIPTOR_LIST_ADDRESS >> 2u) &
               0b111111111111111111111111111111u;
    }

    /**
     * Set RECEIVE_DESCRIPTOR_LIST_ADDRESS's RDESLA_32bit field.
     *
     * Start of Receive List
     */
    inline void set_RECEIVE_DESCRIPTOR_LIST_ADDRESS_RDESLA_32bit(
        uint32_t value) volatile
    {
        uint32_t curr = RECEIVE_DESCRIPTOR_LIST_ADDRESS;

        curr &= ~(0b111111111111111111111111111111u << 2u);
        curr |= (value & 0b111111111111111111111111111111u) << 2u;

        RECEIVE_DESCRIPTOR_LIST_ADDRESS = curr;
    }

    /**
     * Get TRANSMIT_DESCRIPTOR_LIST_ADDRESS's TDESLA_32bit field.
     *
     * Start of Transmit List
     */
    inline uint32_t
    get_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32bit() volatile
    {
        return (TRANSMIT_DESCRIPTOR_LIST_ADDRESS >> 2u) &
               0b111111111111111111111111111111u;
    }

    /**
     * Set TRANSMIT_DESCRIPTOR_LIST_ADDRESS's TDESLA_32bit field.
     *
     * Start of Transmit List
     */
    inline void set_TRANSMIT_DESCRIPTOR_LIST_ADDRESS_TDESLA_32bit(
        uint32_t value) volatile
    {
        uint32_t curr = TRANSMIT_DESCRIPTOR_LIST_ADDRESS;

        curr &= ~(0b111111111111111111111111111111u << 2u);
        curr |= (value & 0b111111111111111111111111111111u) << 2u;

        TRANSMIT_DESCRIPTOR_LIST_ADDRESS = curr;
    }

    /**
     * Get STATUS's TTI bit.
     *
     * Timestamp Trigger Interrupt
     */
    inline bool get_STATUS_TTI() volatile
    {
        return STATUS & (1u << 29u);
    }

    /**
     * Get STATUS's EPI bit.
     *
     * ETH PMT Interrupt
     */
    inline bool get_STATUS_EPI() volatile
    {
        return STATUS & (1u << 28u);
    }

    /**
     * Get STATUS's EMI bit.
     *
     * ETH MMC Interrupt
     */
    inline bool get_STATUS_EMI() volatile
    {
        return STATUS & (1u << 27u);
    }

    /**
     * Get STATUS's EB field.
     *
     * Error Bits
     */
    inline uint8_t get_STATUS_EB() volatile
    {
        return (STATUS >> 23u) & 0b111u;
    }

    /**
     * Get STATUS's TS field.
     *
     * Transmit Process State
     */
    inline uint8_t get_STATUS_TS() volatile
    {
        return (STATUS >> 20u) & 0b111u;
    }

    /**
     * Get STATUS's RS field.
     *
     * Received Process State
     */
    inline uint8_t get_STATUS_RS() volatile
    {
        return (STATUS >> 17u) & 0b111u;
    }

    /**
     * Get STATUS's NIS bit.
     *
     * Normal Interrupt Summary
     */
    inline bool get_STATUS_NIS() volatile
    {
        return STATUS & (1u << 16u);
    }

    /**
     * Set STATUS's NIS bit.
     *
     * Normal Interrupt Summary
     */
    inline void set_STATUS_NIS() volatile
    {
        STATUS |= 1u << 16u;
    }

    /**
     * Clear STATUS's NIS bit.
     *
     * Normal Interrupt Summary
     */
    inline void clear_STATUS_NIS() volatile
    {
        STATUS &= ~(1u << 16u);
    }

    /**
     * Toggle STATUS's NIS bit.
     *
     * Normal Interrupt Summary
     */
    inline void toggle_STATUS_NIS() volatile
    {
        STATUS ^= 1u << 16u;
    }

    /**
     * Get STATUS's AIS bit.
     *
     * Abnormal Interrupt Summary
     */
    inline bool get_STATUS_AIS() volatile
    {
        return STATUS & (1u << 15u);
    }

    /**
     * Set STATUS's AIS bit.
     *
     * Abnormal Interrupt Summary
     */
    inline void set_STATUS_AIS() volatile
    {
        STATUS |= 1u << 15u;
    }

    /**
     * Clear STATUS's AIS bit.
     *
     * Abnormal Interrupt Summary
     */
    inline void clear_STATUS_AIS() volatile
    {
        STATUS &= ~(1u << 15u);
    }

    /**
     * Toggle STATUS's AIS bit.
     *
     * Abnormal Interrupt Summary
     */
    inline void toggle_STATUS_AIS() volatile
    {
        STATUS ^= 1u << 15u;
    }

    /**
     * Get STATUS's ERI bit.
     *
     * Early Receive Interrupt
     */
    inline bool get_STATUS_ERI() volatile
    {
        return STATUS & (1u << 14u);
    }

    /**
     * Set STATUS's ERI bit.
     *
     * Early Receive Interrupt
     */
    inline void set_STATUS_ERI() volatile
    {
        STATUS |= 1u << 14u;
    }

    /**
     * Clear STATUS's ERI bit.
     *
     * Early Receive Interrupt
     */
    inline void clear_STATUS_ERI() volatile
    {
        STATUS &= ~(1u << 14u);
    }

    /**
     * Toggle STATUS's ERI bit.
     *
     * Early Receive Interrupt
     */
    inline void toggle_STATUS_ERI() volatile
    {
        STATUS ^= 1u << 14u;
    }

    /**
     * Get STATUS's FBI bit.
     *
     * Fatal Bus Error Interrupt
     */
    inline bool get_STATUS_FBI() volatile
    {
        return STATUS & (1u << 13u);
    }

    /**
     * Set STATUS's FBI bit.
     *
     * Fatal Bus Error Interrupt
     */
    inline void set_STATUS_FBI() volatile
    {
        STATUS |= 1u << 13u;
    }

    /**
     * Clear STATUS's FBI bit.
     *
     * Fatal Bus Error Interrupt
     */
    inline void clear_STATUS_FBI() volatile
    {
        STATUS &= ~(1u << 13u);
    }

    /**
     * Toggle STATUS's FBI bit.
     *
     * Fatal Bus Error Interrupt
     */
    inline void toggle_STATUS_FBI() volatile
    {
        STATUS ^= 1u << 13u;
    }

    /**
     * Get STATUS's ETI bit.
     *
     * Early Transmit Interrupt
     */
    inline bool get_STATUS_ETI() volatile
    {
        return STATUS & (1u << 10u);
    }

    /**
     * Set STATUS's ETI bit.
     *
     * Early Transmit Interrupt
     */
    inline void set_STATUS_ETI() volatile
    {
        STATUS |= 1u << 10u;
    }

    /**
     * Clear STATUS's ETI bit.
     *
     * Early Transmit Interrupt
     */
    inline void clear_STATUS_ETI() volatile
    {
        STATUS &= ~(1u << 10u);
    }

    /**
     * Toggle STATUS's ETI bit.
     *
     * Early Transmit Interrupt
     */
    inline void toggle_STATUS_ETI() volatile
    {
        STATUS ^= 1u << 10u;
    }

    /**
     * Get STATUS's RWT bit.
     *
     * Receive Watchdog Timeout
     */
    inline bool get_STATUS_RWT() volatile
    {
        return STATUS & (1u << 9u);
    }

    /**
     * Set STATUS's RWT bit.
     *
     * Receive Watchdog Timeout
     */
    inline void set_STATUS_RWT() volatile
    {
        STATUS |= 1u << 9u;
    }

    /**
     * Clear STATUS's RWT bit.
     *
     * Receive Watchdog Timeout
     */
    inline void clear_STATUS_RWT() volatile
    {
        STATUS &= ~(1u << 9u);
    }

    /**
     * Toggle STATUS's RWT bit.
     *
     * Receive Watchdog Timeout
     */
    inline void toggle_STATUS_RWT() volatile
    {
        STATUS ^= 1u << 9u;
    }

    /**
     * Get STATUS's RPS bit.
     *
     * Receive Process Stopped
     */
    inline bool get_STATUS_RPS() volatile
    {
        return STATUS & (1u << 8u);
    }

    /**
     * Set STATUS's RPS bit.
     *
     * Receive Process Stopped
     */
    inline void set_STATUS_RPS() volatile
    {
        STATUS |= 1u << 8u;
    }

    /**
     * Clear STATUS's RPS bit.
     *
     * Receive Process Stopped
     */
    inline void clear_STATUS_RPS() volatile
    {
        STATUS &= ~(1u << 8u);
    }

    /**
     * Toggle STATUS's RPS bit.
     *
     * Receive Process Stopped
     */
    inline void toggle_STATUS_RPS() volatile
    {
        STATUS ^= 1u << 8u;
    }

    /**
     * Get STATUS's RU bit.
     *
     * Receive Buffer Unavailable
     */
    inline bool get_STATUS_RU() volatile
    {
        return STATUS & (1u << 7u);
    }

    /**
     * Set STATUS's RU bit.
     *
     * Receive Buffer Unavailable
     */
    inline void set_STATUS_RU() volatile
    {
        STATUS |= 1u << 7u;
    }

    /**
     * Clear STATUS's RU bit.
     *
     * Receive Buffer Unavailable
     */
    inline void clear_STATUS_RU() volatile
    {
        STATUS &= ~(1u << 7u);
    }

    /**
     * Toggle STATUS's RU bit.
     *
     * Receive Buffer Unavailable
     */
    inline void toggle_STATUS_RU() volatile
    {
        STATUS ^= 1u << 7u;
    }

    /**
     * Get STATUS's RI bit.
     *
     * Receive Interrupt
     */
    inline bool get_STATUS_RI() volatile
    {
        return STATUS & (1u << 6u);
    }

    /**
     * Set STATUS's RI bit.
     *
     * Receive Interrupt
     */
    inline void set_STATUS_RI() volatile
    {
        STATUS |= 1u << 6u;
    }

    /**
     * Clear STATUS's RI bit.
     *
     * Receive Interrupt
     */
    inline void clear_STATUS_RI() volatile
    {
        STATUS &= ~(1u << 6u);
    }

    /**
     * Toggle STATUS's RI bit.
     *
     * Receive Interrupt
     */
    inline void toggle_STATUS_RI() volatile
    {
        STATUS ^= 1u << 6u;
    }

    /**
     * Get STATUS's UNF bit.
     *
     * Transmit Underflow
     */
    inline bool get_STATUS_UNF() volatile
    {
        return STATUS & (1u << 5u);
    }

    /**
     * Set STATUS's UNF bit.
     *
     * Transmit Underflow
     */
    inline void set_STATUS_UNF() volatile
    {
        STATUS |= 1u << 5u;
    }

    /**
     * Clear STATUS's UNF bit.
     *
     * Transmit Underflow
     */
    inline void clear_STATUS_UNF() volatile
    {
        STATUS &= ~(1u << 5u);
    }

    /**
     * Toggle STATUS's UNF bit.
     *
     * Transmit Underflow
     */
    inline void toggle_STATUS_UNF() volatile
    {
        STATUS ^= 1u << 5u;
    }

    /**
     * Get STATUS's OVF bit.
     *
     * Receive Overflow
     */
    inline bool get_STATUS_OVF() volatile
    {
        return STATUS & (1u << 4u);
    }

    /**
     * Set STATUS's OVF bit.
     *
     * Receive Overflow
     */
    inline void set_STATUS_OVF() volatile
    {
        STATUS |= 1u << 4u;
    }

    /**
     * Clear STATUS's OVF bit.
     *
     * Receive Overflow
     */
    inline void clear_STATUS_OVF() volatile
    {
        STATUS &= ~(1u << 4u);
    }

    /**
     * Toggle STATUS's OVF bit.
     *
     * Receive Overflow
     */
    inline void toggle_STATUS_OVF() volatile
    {
        STATUS ^= 1u << 4u;
    }

    /**
     * Get STATUS's TJT bit.
     *
     * Transmit Jabber Timeout
     */
    inline bool get_STATUS_TJT() volatile
    {
        return STATUS & (1u << 3u);
    }

    /**
     * Set STATUS's TJT bit.
     *
     * Transmit Jabber Timeout
     */
    inline void set_STATUS_TJT() volatile
    {
        STATUS |= 1u << 3u;
    }

    /**
     * Clear STATUS's TJT bit.
     *
     * Transmit Jabber Timeout
     */
    inline void clear_STATUS_TJT() volatile
    {
        STATUS &= ~(1u << 3u);
    }

    /**
     * Toggle STATUS's TJT bit.
     *
     * Transmit Jabber Timeout
     */
    inline void toggle_STATUS_TJT() volatile
    {
        STATUS ^= 1u << 3u;
    }

    /**
     * Get STATUS's TU bit.
     *
     * Transmit Buffer Unavailable
     */
    inline bool get_STATUS_TU() volatile
    {
        return STATUS & (1u << 2u);
    }

    /**
     * Set STATUS's TU bit.
     *
     * Transmit Buffer Unavailable
     */
    inline void set_STATUS_TU() volatile
    {
        STATUS |= 1u << 2u;
    }

    /**
     * Clear STATUS's TU bit.
     *
     * Transmit Buffer Unavailable
     */
    inline void clear_STATUS_TU() volatile
    {
        STATUS &= ~(1u << 2u);
    }

    /**
     * Toggle STATUS's TU bit.
     *
     * Transmit Buffer Unavailable
     */
    inline void toggle_STATUS_TU() volatile
    {
        STATUS ^= 1u << 2u;
    }

    /**
     * Get STATUS's TPS bit.
     *
     * Transmit Process Stopped
     */
    inline bool get_STATUS_TPS() volatile
    {
        return STATUS & (1u << 1u);
    }

    /**
     * Set STATUS's TPS bit.
     *
     * Transmit Process Stopped
     */
    inline void set_STATUS_TPS() volatile
    {
        STATUS |= 1u << 1u;
    }

    /**
     * Clear STATUS's TPS bit.
     *
     * Transmit Process Stopped
     */
    inline void clear_STATUS_TPS() volatile
    {
        STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle STATUS's TPS bit.
     *
     * Transmit Process Stopped
     */
    inline void toggle_STATUS_TPS() volatile
    {
        STATUS ^= 1u << 1u;
    }

    /**
     * Get STATUS's TI bit.
     *
     * Transmit Interrupt
     */
    inline bool get_STATUS_TI() volatile
    {
        return STATUS & (1u << 0u);
    }

    /**
     * Set STATUS's TI bit.
     *
     * Transmit Interrupt
     */
    inline void set_STATUS_TI() volatile
    {
        STATUS |= 1u << 0u;
    }

    /**
     * Clear STATUS's TI bit.
     *
     * Transmit Interrupt
     */
    inline void clear_STATUS_TI() volatile
    {
        STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle STATUS's TI bit.
     *
     * Transmit Interrupt
     */
    inline void toggle_STATUS_TI() volatile
    {
        STATUS ^= 1u << 0u;
    }

    /**
     * Get all of STATUS's bit fields.
     *
     * (read-write) Status Register
     */
    inline void get_STATUS(bool &TTI, bool &EPI, bool &EMI, uint8_t &EB,
                           uint8_t &TS, uint8_t &RS, bool &NIS, bool &AIS,
                           bool &ERI, bool &FBI, bool &ETI, bool &RWT,
                           bool &RPS, bool &RU, bool &RI, bool &UNF, bool &OVF,
                           bool &TJT, bool &TU, bool &TPS, bool &TI) volatile
    {
        uint32_t curr = STATUS;

        TTI = curr & (1u << 29u);
        EPI = curr & (1u << 28u);
        EMI = curr & (1u << 27u);
        EB = (curr >> 23u) & 0b111u;
        TS = (curr >> 20u) & 0b111u;
        RS = (curr >> 17u) & 0b111u;
        NIS = curr & (1u << 16u);
        AIS = curr & (1u << 15u);
        ERI = curr & (1u << 14u);
        FBI = curr & (1u << 13u);
        ETI = curr & (1u << 10u);
        RWT = curr & (1u << 9u);
        RPS = curr & (1u << 8u);
        RU = curr & (1u << 7u);
        RI = curr & (1u << 6u);
        UNF = curr & (1u << 5u);
        OVF = curr & (1u << 4u);
        TJT = curr & (1u << 3u);
        TU = curr & (1u << 2u);
        TPS = curr & (1u << 1u);
        TI = curr & (1u << 0u);
    }

    /**
     * Set all of STATUS's bit fields.
     *
     * (read-write) Status Register
     */
    inline void set_STATUS(bool NIS, bool AIS, bool ERI, bool FBI, bool ETI,
                           bool RWT, bool RPS, bool RU, bool RI, bool UNF,
                           bool OVF, bool TJT, bool TU, bool TPS,
                           bool TI) volatile
    {
        uint32_t curr = STATUS;

        curr &= ~(0b1u << 16u);
        curr |= (NIS & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (AIS & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ERI & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (FBI & 0b1u) << 13u;
        curr &= ~(0b1u << 10u);
        curr |= (ETI & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (RWT & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (RPS & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (RU & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RI & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (UNF & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (OVF & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TJT & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (TU & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TPS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TI & 0b1u) << 0u;

        STATUS = curr;
    }

    /**
     * Get OPERATION_MODE's DT bit.
     *
     * Disable Dropping of TCP/IP Checksum Error Frames
     */
    inline bool get_OPERATION_MODE_DT() volatile
    {
        return OPERATION_MODE & (1u << 26u);
    }

    /**
     * Set OPERATION_MODE's DT bit.
     *
     * Disable Dropping of TCP/IP Checksum Error Frames
     */
    inline void set_OPERATION_MODE_DT() volatile
    {
        OPERATION_MODE |= 1u << 26u;
    }

    /**
     * Clear OPERATION_MODE's DT bit.
     *
     * Disable Dropping of TCP/IP Checksum Error Frames
     */
    inline void clear_OPERATION_MODE_DT() volatile
    {
        OPERATION_MODE &= ~(1u << 26u);
    }

    /**
     * Toggle OPERATION_MODE's DT bit.
     *
     * Disable Dropping of TCP/IP Checksum Error Frames
     */
    inline void toggle_OPERATION_MODE_DT() volatile
    {
        OPERATION_MODE ^= 1u << 26u;
    }

    /**
     * Get OPERATION_MODE's RSF bit.
     *
     * Receive Store and Forward
     */
    inline bool get_OPERATION_MODE_RSF() volatile
    {
        return OPERATION_MODE & (1u << 25u);
    }

    /**
     * Set OPERATION_MODE's RSF bit.
     *
     * Receive Store and Forward
     */
    inline void set_OPERATION_MODE_RSF() volatile
    {
        OPERATION_MODE |= 1u << 25u;
    }

    /**
     * Clear OPERATION_MODE's RSF bit.
     *
     * Receive Store and Forward
     */
    inline void clear_OPERATION_MODE_RSF() volatile
    {
        OPERATION_MODE &= ~(1u << 25u);
    }

    /**
     * Toggle OPERATION_MODE's RSF bit.
     *
     * Receive Store and Forward
     */
    inline void toggle_OPERATION_MODE_RSF() volatile
    {
        OPERATION_MODE ^= 1u << 25u;
    }

    /**
     * Get OPERATION_MODE's DFF bit.
     *
     * Disable Flushing of Received Frames
     */
    inline bool get_OPERATION_MODE_DFF() volatile
    {
        return OPERATION_MODE & (1u << 24u);
    }

    /**
     * Set OPERATION_MODE's DFF bit.
     *
     * Disable Flushing of Received Frames
     */
    inline void set_OPERATION_MODE_DFF() volatile
    {
        OPERATION_MODE |= 1u << 24u;
    }

    /**
     * Clear OPERATION_MODE's DFF bit.
     *
     * Disable Flushing of Received Frames
     */
    inline void clear_OPERATION_MODE_DFF() volatile
    {
        OPERATION_MODE &= ~(1u << 24u);
    }

    /**
     * Toggle OPERATION_MODE's DFF bit.
     *
     * Disable Flushing of Received Frames
     */
    inline void toggle_OPERATION_MODE_DFF() volatile
    {
        OPERATION_MODE ^= 1u << 24u;
    }

    /**
     * Get OPERATION_MODE's TSF bit.
     *
     * Transmit Store and Forward
     */
    inline bool get_OPERATION_MODE_TSF() volatile
    {
        return OPERATION_MODE & (1u << 21u);
    }

    /**
     * Set OPERATION_MODE's TSF bit.
     *
     * Transmit Store and Forward
     */
    inline void set_OPERATION_MODE_TSF() volatile
    {
        OPERATION_MODE |= 1u << 21u;
    }

    /**
     * Clear OPERATION_MODE's TSF bit.
     *
     * Transmit Store and Forward
     */
    inline void clear_OPERATION_MODE_TSF() volatile
    {
        OPERATION_MODE &= ~(1u << 21u);
    }

    /**
     * Toggle OPERATION_MODE's TSF bit.
     *
     * Transmit Store and Forward
     */
    inline void toggle_OPERATION_MODE_TSF() volatile
    {
        OPERATION_MODE ^= 1u << 21u;
    }

    /**
     * Get OPERATION_MODE's FTF bit.
     *
     * Flush Transmit FIFO
     */
    inline bool get_OPERATION_MODE_FTF() volatile
    {
        return OPERATION_MODE & (1u << 20u);
    }

    /**
     * Set OPERATION_MODE's FTF bit.
     *
     * Flush Transmit FIFO
     */
    inline void set_OPERATION_MODE_FTF() volatile
    {
        OPERATION_MODE |= 1u << 20u;
    }

    /**
     * Clear OPERATION_MODE's FTF bit.
     *
     * Flush Transmit FIFO
     */
    inline void clear_OPERATION_MODE_FTF() volatile
    {
        OPERATION_MODE &= ~(1u << 20u);
    }

    /**
     * Toggle OPERATION_MODE's FTF bit.
     *
     * Flush Transmit FIFO
     */
    inline void toggle_OPERATION_MODE_FTF() volatile
    {
        OPERATION_MODE ^= 1u << 20u;
    }

    /**
     * Get OPERATION_MODE's TTC field.
     *
     * Transmit Threshold Control
     */
    inline uint8_t get_OPERATION_MODE_TTC() volatile
    {
        return (OPERATION_MODE >> 14u) & 0b111u;
    }

    /**
     * Set OPERATION_MODE's TTC field.
     *
     * Transmit Threshold Control
     */
    inline void set_OPERATION_MODE_TTC(uint8_t value) volatile
    {
        uint32_t curr = OPERATION_MODE;

        curr &= ~(0b111u << 14u);
        curr |= (value & 0b111u) << 14u;

        OPERATION_MODE = curr;
    }

    /**
     * Get OPERATION_MODE's ST bit.
     *
     * Start or Stop Transmission Command
     */
    inline bool get_OPERATION_MODE_ST() volatile
    {
        return OPERATION_MODE & (1u << 13u);
    }

    /**
     * Set OPERATION_MODE's ST bit.
     *
     * Start or Stop Transmission Command
     */
    inline void set_OPERATION_MODE_ST() volatile
    {
        OPERATION_MODE |= 1u << 13u;
    }

    /**
     * Clear OPERATION_MODE's ST bit.
     *
     * Start or Stop Transmission Command
     */
    inline void clear_OPERATION_MODE_ST() volatile
    {
        OPERATION_MODE &= ~(1u << 13u);
    }

    /**
     * Toggle OPERATION_MODE's ST bit.
     *
     * Start or Stop Transmission Command
     */
    inline void toggle_OPERATION_MODE_ST() volatile
    {
        OPERATION_MODE ^= 1u << 13u;
    }

    /**
     * Get OPERATION_MODE's FEF bit.
     *
     * Forward Error Frames
     */
    inline bool get_OPERATION_MODE_FEF() volatile
    {
        return OPERATION_MODE & (1u << 7u);
    }

    /**
     * Set OPERATION_MODE's FEF bit.
     *
     * Forward Error Frames
     */
    inline void set_OPERATION_MODE_FEF() volatile
    {
        OPERATION_MODE |= 1u << 7u;
    }

    /**
     * Clear OPERATION_MODE's FEF bit.
     *
     * Forward Error Frames
     */
    inline void clear_OPERATION_MODE_FEF() volatile
    {
        OPERATION_MODE &= ~(1u << 7u);
    }

    /**
     * Toggle OPERATION_MODE's FEF bit.
     *
     * Forward Error Frames
     */
    inline void toggle_OPERATION_MODE_FEF() volatile
    {
        OPERATION_MODE ^= 1u << 7u;
    }

    /**
     * Get OPERATION_MODE's FUF bit.
     *
     * Forward Undersized Good Frames
     */
    inline bool get_OPERATION_MODE_FUF() volatile
    {
        return OPERATION_MODE & (1u << 6u);
    }

    /**
     * Set OPERATION_MODE's FUF bit.
     *
     * Forward Undersized Good Frames
     */
    inline void set_OPERATION_MODE_FUF() volatile
    {
        OPERATION_MODE |= 1u << 6u;
    }

    /**
     * Clear OPERATION_MODE's FUF bit.
     *
     * Forward Undersized Good Frames
     */
    inline void clear_OPERATION_MODE_FUF() volatile
    {
        OPERATION_MODE &= ~(1u << 6u);
    }

    /**
     * Toggle OPERATION_MODE's FUF bit.
     *
     * Forward Undersized Good Frames
     */
    inline void toggle_OPERATION_MODE_FUF() volatile
    {
        OPERATION_MODE ^= 1u << 6u;
    }

    /**
     * Get OPERATION_MODE's RTC field.
     *
     * Receive Threshold Control
     */
    inline uint8_t get_OPERATION_MODE_RTC() volatile
    {
        return (OPERATION_MODE >> 3u) & 0b11u;
    }

    /**
     * Set OPERATION_MODE's RTC field.
     *
     * Receive Threshold Control
     */
    inline void set_OPERATION_MODE_RTC(uint8_t value) volatile
    {
        uint32_t curr = OPERATION_MODE;

        curr &= ~(0b11u << 3u);
        curr |= (value & 0b11u) << 3u;

        OPERATION_MODE = curr;
    }

    /**
     * Get OPERATION_MODE's OSF bit.
     *
     * Operate on Second Frame
     */
    inline bool get_OPERATION_MODE_OSF() volatile
    {
        return OPERATION_MODE & (1u << 2u);
    }

    /**
     * Set OPERATION_MODE's OSF bit.
     *
     * Operate on Second Frame
     */
    inline void set_OPERATION_MODE_OSF() volatile
    {
        OPERATION_MODE |= 1u << 2u;
    }

    /**
     * Clear OPERATION_MODE's OSF bit.
     *
     * Operate on Second Frame
     */
    inline void clear_OPERATION_MODE_OSF() volatile
    {
        OPERATION_MODE &= ~(1u << 2u);
    }

    /**
     * Toggle OPERATION_MODE's OSF bit.
     *
     * Operate on Second Frame
     */
    inline void toggle_OPERATION_MODE_OSF() volatile
    {
        OPERATION_MODE ^= 1u << 2u;
    }

    /**
     * Get OPERATION_MODE's SR bit.
     *
     * Start or Stop Receive
     */
    inline bool get_OPERATION_MODE_SR() volatile
    {
        return OPERATION_MODE & (1u << 1u);
    }

    /**
     * Set OPERATION_MODE's SR bit.
     *
     * Start or Stop Receive
     */
    inline void set_OPERATION_MODE_SR() volatile
    {
        OPERATION_MODE |= 1u << 1u;
    }

    /**
     * Clear OPERATION_MODE's SR bit.
     *
     * Start or Stop Receive
     */
    inline void clear_OPERATION_MODE_SR() volatile
    {
        OPERATION_MODE &= ~(1u << 1u);
    }

    /**
     * Toggle OPERATION_MODE's SR bit.
     *
     * Start or Stop Receive
     */
    inline void toggle_OPERATION_MODE_SR() volatile
    {
        OPERATION_MODE ^= 1u << 1u;
    }

    /**
     * Get all of OPERATION_MODE's bit fields.
     *
     * (read-write) Operation Mode Register
     */
    inline void get_OPERATION_MODE(bool &DT, bool &RSF, bool &DFF, bool &TSF,
                                   bool &FTF, uint8_t &TTC, bool &ST,
                                   bool &FEF, bool &FUF, uint8_t &RTC,
                                   bool &OSF, bool &SR) volatile
    {
        uint32_t curr = OPERATION_MODE;

        DT = curr & (1u << 26u);
        RSF = curr & (1u << 25u);
        DFF = curr & (1u << 24u);
        TSF = curr & (1u << 21u);
        FTF = curr & (1u << 20u);
        TTC = (curr >> 14u) & 0b111u;
        ST = curr & (1u << 13u);
        FEF = curr & (1u << 7u);
        FUF = curr & (1u << 6u);
        RTC = (curr >> 3u) & 0b11u;
        OSF = curr & (1u << 2u);
        SR = curr & (1u << 1u);
    }

    /**
     * Set all of OPERATION_MODE's bit fields.
     *
     * (read-write) Operation Mode Register
     */
    inline void set_OPERATION_MODE(bool DT, bool RSF, bool DFF, bool TSF,
                                   bool FTF, uint8_t TTC, bool ST, bool FEF,
                                   bool FUF, uint8_t RTC, bool OSF,
                                   bool SR) volatile
    {
        uint32_t curr = OPERATION_MODE;

        curr &= ~(0b1u << 26u);
        curr |= (DT & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (RSF & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (DFF & 0b1u) << 24u;
        curr &= ~(0b1u << 21u);
        curr |= (TSF & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (FTF & 0b1u) << 20u;
        curr &= ~(0b111u << 14u);
        curr |= (TTC & 0b111u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (ST & 0b1u) << 13u;
        curr &= ~(0b1u << 7u);
        curr |= (FEF & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (FUF & 0b1u) << 6u;
        curr &= ~(0b11u << 3u);
        curr |= (RTC & 0b11u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (OSF & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SR & 0b1u) << 1u;

        OPERATION_MODE = curr;
    }

    /**
     * Get INTERRUPT_ENABLE's NIE bit.
     *
     * Normal Interrupt Summary Enable
     */
    inline bool get_INTERRUPT_ENABLE_NIE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 16u);
    }

    /**
     * Set INTERRUPT_ENABLE's NIE bit.
     *
     * Normal Interrupt Summary Enable
     */
    inline void set_INTERRUPT_ENABLE_NIE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 16u;
    }

    /**
     * Clear INTERRUPT_ENABLE's NIE bit.
     *
     * Normal Interrupt Summary Enable
     */
    inline void clear_INTERRUPT_ENABLE_NIE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 16u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's NIE bit.
     *
     * Normal Interrupt Summary Enable
     */
    inline void toggle_INTERRUPT_ENABLE_NIE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 16u;
    }

    /**
     * Get INTERRUPT_ENABLE's AIE bit.
     *
     * Abnormal Interrupt Summary Enable
     */
    inline bool get_INTERRUPT_ENABLE_AIE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 15u);
    }

    /**
     * Set INTERRUPT_ENABLE's AIE bit.
     *
     * Abnormal Interrupt Summary Enable
     */
    inline void set_INTERRUPT_ENABLE_AIE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 15u;
    }

    /**
     * Clear INTERRUPT_ENABLE's AIE bit.
     *
     * Abnormal Interrupt Summary Enable
     */
    inline void clear_INTERRUPT_ENABLE_AIE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 15u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's AIE bit.
     *
     * Abnormal Interrupt Summary Enable
     */
    inline void toggle_INTERRUPT_ENABLE_AIE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 15u;
    }

    /**
     * Get INTERRUPT_ENABLE's ERE bit.
     *
     * Early Receive Interrupt Enable
     */
    inline bool get_INTERRUPT_ENABLE_ERE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 14u);
    }

    /**
     * Set INTERRUPT_ENABLE's ERE bit.
     *
     * Early Receive Interrupt Enable
     */
    inline void set_INTERRUPT_ENABLE_ERE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 14u;
    }

    /**
     * Clear INTERRUPT_ENABLE's ERE bit.
     *
     * Early Receive Interrupt Enable
     */
    inline void clear_INTERRUPT_ENABLE_ERE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 14u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's ERE bit.
     *
     * Early Receive Interrupt Enable
     */
    inline void toggle_INTERRUPT_ENABLE_ERE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 14u;
    }

    /**
     * Get INTERRUPT_ENABLE's FBE bit.
     *
     * Fatal Bus Error Enable
     */
    inline bool get_INTERRUPT_ENABLE_FBE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 13u);
    }

    /**
     * Set INTERRUPT_ENABLE's FBE bit.
     *
     * Fatal Bus Error Enable
     */
    inline void set_INTERRUPT_ENABLE_FBE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 13u;
    }

    /**
     * Clear INTERRUPT_ENABLE's FBE bit.
     *
     * Fatal Bus Error Enable
     */
    inline void clear_INTERRUPT_ENABLE_FBE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 13u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's FBE bit.
     *
     * Fatal Bus Error Enable
     */
    inline void toggle_INTERRUPT_ENABLE_FBE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 13u;
    }

    /**
     * Get INTERRUPT_ENABLE's ETE bit.
     *
     * Early Transmit Interrupt Enable
     */
    inline bool get_INTERRUPT_ENABLE_ETE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 10u);
    }

    /**
     * Set INTERRUPT_ENABLE's ETE bit.
     *
     * Early Transmit Interrupt Enable
     */
    inline void set_INTERRUPT_ENABLE_ETE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 10u;
    }

    /**
     * Clear INTERRUPT_ENABLE's ETE bit.
     *
     * Early Transmit Interrupt Enable
     */
    inline void clear_INTERRUPT_ENABLE_ETE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 10u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's ETE bit.
     *
     * Early Transmit Interrupt Enable
     */
    inline void toggle_INTERRUPT_ENABLE_ETE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 10u;
    }

    /**
     * Get INTERRUPT_ENABLE's RWE bit.
     *
     * Receive Watchdog Timeout Enable
     */
    inline bool get_INTERRUPT_ENABLE_RWE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 9u);
    }

    /**
     * Set INTERRUPT_ENABLE's RWE bit.
     *
     * Receive Watchdog Timeout Enable
     */
    inline void set_INTERRUPT_ENABLE_RWE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 9u;
    }

    /**
     * Clear INTERRUPT_ENABLE's RWE bit.
     *
     * Receive Watchdog Timeout Enable
     */
    inline void clear_INTERRUPT_ENABLE_RWE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 9u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's RWE bit.
     *
     * Receive Watchdog Timeout Enable
     */
    inline void toggle_INTERRUPT_ENABLE_RWE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 9u;
    }

    /**
     * Get INTERRUPT_ENABLE's RSE bit.
     *
     * Receive Stopped Enable
     */
    inline bool get_INTERRUPT_ENABLE_RSE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 8u);
    }

    /**
     * Set INTERRUPT_ENABLE's RSE bit.
     *
     * Receive Stopped Enable
     */
    inline void set_INTERRUPT_ENABLE_RSE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 8u;
    }

    /**
     * Clear INTERRUPT_ENABLE's RSE bit.
     *
     * Receive Stopped Enable
     */
    inline void clear_INTERRUPT_ENABLE_RSE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 8u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's RSE bit.
     *
     * Receive Stopped Enable
     */
    inline void toggle_INTERRUPT_ENABLE_RSE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 8u;
    }

    /**
     * Get INTERRUPT_ENABLE's RUE bit.
     *
     * Receive Buffer Unavailable Enable
     */
    inline bool get_INTERRUPT_ENABLE_RUE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 7u);
    }

    /**
     * Set INTERRUPT_ENABLE's RUE bit.
     *
     * Receive Buffer Unavailable Enable
     */
    inline void set_INTERRUPT_ENABLE_RUE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 7u;
    }

    /**
     * Clear INTERRUPT_ENABLE's RUE bit.
     *
     * Receive Buffer Unavailable Enable
     */
    inline void clear_INTERRUPT_ENABLE_RUE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 7u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's RUE bit.
     *
     * Receive Buffer Unavailable Enable
     */
    inline void toggle_INTERRUPT_ENABLE_RUE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 7u;
    }

    /**
     * Get INTERRUPT_ENABLE's RIE bit.
     *
     * Receive Interrupt Enable
     */
    inline bool get_INTERRUPT_ENABLE_RIE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 6u);
    }

    /**
     * Set INTERRUPT_ENABLE's RIE bit.
     *
     * Receive Interrupt Enable
     */
    inline void set_INTERRUPT_ENABLE_RIE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 6u;
    }

    /**
     * Clear INTERRUPT_ENABLE's RIE bit.
     *
     * Receive Interrupt Enable
     */
    inline void clear_INTERRUPT_ENABLE_RIE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 6u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's RIE bit.
     *
     * Receive Interrupt Enable
     */
    inline void toggle_INTERRUPT_ENABLE_RIE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 6u;
    }

    /**
     * Get INTERRUPT_ENABLE's UNE bit.
     *
     * Underflow Interrupt Enable
     */
    inline bool get_INTERRUPT_ENABLE_UNE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 5u);
    }

    /**
     * Set INTERRUPT_ENABLE's UNE bit.
     *
     * Underflow Interrupt Enable
     */
    inline void set_INTERRUPT_ENABLE_UNE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 5u;
    }

    /**
     * Clear INTERRUPT_ENABLE's UNE bit.
     *
     * Underflow Interrupt Enable
     */
    inline void clear_INTERRUPT_ENABLE_UNE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 5u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's UNE bit.
     *
     * Underflow Interrupt Enable
     */
    inline void toggle_INTERRUPT_ENABLE_UNE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 5u;
    }

    /**
     * Get INTERRUPT_ENABLE's OVE bit.
     *
     * Overflow Interrupt Enable
     */
    inline bool get_INTERRUPT_ENABLE_OVE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 4u);
    }

    /**
     * Set INTERRUPT_ENABLE's OVE bit.
     *
     * Overflow Interrupt Enable
     */
    inline void set_INTERRUPT_ENABLE_OVE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 4u;
    }

    /**
     * Clear INTERRUPT_ENABLE's OVE bit.
     *
     * Overflow Interrupt Enable
     */
    inline void clear_INTERRUPT_ENABLE_OVE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 4u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's OVE bit.
     *
     * Overflow Interrupt Enable
     */
    inline void toggle_INTERRUPT_ENABLE_OVE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 4u;
    }

    /**
     * Get INTERRUPT_ENABLE's TJE bit.
     *
     * Transmit Jabber Timeout Enable
     */
    inline bool get_INTERRUPT_ENABLE_TJE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 3u);
    }

    /**
     * Set INTERRUPT_ENABLE's TJE bit.
     *
     * Transmit Jabber Timeout Enable
     */
    inline void set_INTERRUPT_ENABLE_TJE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 3u;
    }

    /**
     * Clear INTERRUPT_ENABLE's TJE bit.
     *
     * Transmit Jabber Timeout Enable
     */
    inline void clear_INTERRUPT_ENABLE_TJE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 3u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's TJE bit.
     *
     * Transmit Jabber Timeout Enable
     */
    inline void toggle_INTERRUPT_ENABLE_TJE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 3u;
    }

    /**
     * Get INTERRUPT_ENABLE's TUE bit.
     *
     * Transmit Buffer Unvailable Enable
     */
    inline bool get_INTERRUPT_ENABLE_TUE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 2u);
    }

    /**
     * Set INTERRUPT_ENABLE's TUE bit.
     *
     * Transmit Buffer Unvailable Enable
     */
    inline void set_INTERRUPT_ENABLE_TUE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 2u;
    }

    /**
     * Clear INTERRUPT_ENABLE's TUE bit.
     *
     * Transmit Buffer Unvailable Enable
     */
    inline void clear_INTERRUPT_ENABLE_TUE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 2u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's TUE bit.
     *
     * Transmit Buffer Unvailable Enable
     */
    inline void toggle_INTERRUPT_ENABLE_TUE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 2u;
    }

    /**
     * Get INTERRUPT_ENABLE's TSE bit.
     *
     * Transmit Stopped Enable
     */
    inline bool get_INTERRUPT_ENABLE_TSE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 1u);
    }

    /**
     * Set INTERRUPT_ENABLE's TSE bit.
     *
     * Transmit Stopped Enable
     */
    inline void set_INTERRUPT_ENABLE_TSE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 1u;
    }

    /**
     * Clear INTERRUPT_ENABLE's TSE bit.
     *
     * Transmit Stopped Enable
     */
    inline void clear_INTERRUPT_ENABLE_TSE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 1u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's TSE bit.
     *
     * Transmit Stopped Enable
     */
    inline void toggle_INTERRUPT_ENABLE_TSE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 1u;
    }

    /**
     * Get INTERRUPT_ENABLE's TIE bit.
     *
     * Transmit Interrupt Enable
     */
    inline bool get_INTERRUPT_ENABLE_TIE() volatile
    {
        return INTERRUPT_ENABLE & (1u << 0u);
    }

    /**
     * Set INTERRUPT_ENABLE's TIE bit.
     *
     * Transmit Interrupt Enable
     */
    inline void set_INTERRUPT_ENABLE_TIE() volatile
    {
        INTERRUPT_ENABLE |= 1u << 0u;
    }

    /**
     * Clear INTERRUPT_ENABLE's TIE bit.
     *
     * Transmit Interrupt Enable
     */
    inline void clear_INTERRUPT_ENABLE_TIE() volatile
    {
        INTERRUPT_ENABLE &= ~(1u << 0u);
    }

    /**
     * Toggle INTERRUPT_ENABLE's TIE bit.
     *
     * Transmit Interrupt Enable
     */
    inline void toggle_INTERRUPT_ENABLE_TIE() volatile
    {
        INTERRUPT_ENABLE ^= 1u << 0u;
    }

    /**
     * Get all of INTERRUPT_ENABLE's bit fields.
     *
     * (read-write) Interrupt Enable Register
     */
    inline void get_INTERRUPT_ENABLE(bool &NIE, bool &AIE, bool &ERE,
                                     bool &FBE, bool &ETE, bool &RWE,
                                     bool &RSE, bool &RUE, bool &RIE,
                                     bool &UNE, bool &OVE, bool &TJE,
                                     bool &TUE, bool &TSE, bool &TIE) volatile
    {
        uint32_t curr = INTERRUPT_ENABLE;

        NIE = curr & (1u << 16u);
        AIE = curr & (1u << 15u);
        ERE = curr & (1u << 14u);
        FBE = curr & (1u << 13u);
        ETE = curr & (1u << 10u);
        RWE = curr & (1u << 9u);
        RSE = curr & (1u << 8u);
        RUE = curr & (1u << 7u);
        RIE = curr & (1u << 6u);
        UNE = curr & (1u << 5u);
        OVE = curr & (1u << 4u);
        TJE = curr & (1u << 3u);
        TUE = curr & (1u << 2u);
        TSE = curr & (1u << 1u);
        TIE = curr & (1u << 0u);
    }

    /**
     * Set all of INTERRUPT_ENABLE's bit fields.
     *
     * (read-write) Interrupt Enable Register
     */
    inline void set_INTERRUPT_ENABLE(bool NIE, bool AIE, bool ERE, bool FBE,
                                     bool ETE, bool RWE, bool RSE, bool RUE,
                                     bool RIE, bool UNE, bool OVE, bool TJE,
                                     bool TUE, bool TSE, bool TIE) volatile
    {
        uint32_t curr = INTERRUPT_ENABLE;

        curr &= ~(0b1u << 16u);
        curr |= (NIE & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (AIE & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (ERE & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (FBE & 0b1u) << 13u;
        curr &= ~(0b1u << 10u);
        curr |= (ETE & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (RWE & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (RSE & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (RUE & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (RIE & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (UNE & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (OVE & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (TJE & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (TUE & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (TSE & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (TIE & 0b1u) << 0u;

        INTERRUPT_ENABLE = curr;
    }

    /**
     * Get MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER's OVFCNTOVF bit.
     *
     * Overflow bit for FIFO Overflow Counter
     */
    inline bool
    get_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFCNTOVF() volatile
    {
        return MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER & (1u << 28u);
    }

    /**
     * Get MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER's OVFFRMCNT field.
     *
     * This field indicates the number of frames missed by the application. The
     * counter is cleared when this register is read.
     */
    inline uint16_t
    get_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_OVFFRMCNT() volatile
    {
        return (MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER >> 17u) &
               0b11111111111u;
    }

    /**
     * Get MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER's MISCNTOVF bit.
     *
     * Overflow bit for Missed Frame Counter
     */
    inline bool
    get_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISCNTOVF() volatile
    {
        return MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER & (1u << 16u);
    }

    /**
     * Get MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER's MISFRMCNT field.
     *
     * This field indicates the number of frames missed by the controller
     * because of the RAM Receive Buffer being unavailable. This counter is
     * incremented each time the DMA discards an incoming frame. The counter is
     * cleared when this register is read.
     */
    inline uint16_t
    get_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER_MISFRMCNT() volatile
    {
        return (MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER >> 0u) &
               0b1111111111111111u;
    }

    /**
     * Get all of MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER's bit fields.
     *
     * (read-only) Missed Frame and Buffer Overflow Counter Register
     */
    inline void get_MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER(
        bool &OVFCNTOVF, uint16_t &OVFFRMCNT, bool &MISCNTOVF,
        uint16_t &MISFRMCNT) volatile
    {
        uint32_t curr = MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER;

        OVFCNTOVF = curr & (1u << 28u);
        OVFFRMCNT = (curr >> 17u) & 0b11111111111u;
        MISCNTOVF = curr & (1u << 16u);
        MISFRMCNT = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RECEIVE_INTERRUPT_WATCHDOG_TIMER's RIWT field.
     *
     * RI Watchdog Timer Count
     */
    inline uint8_t get_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT() volatile
    {
        return (RECEIVE_INTERRUPT_WATCHDOG_TIMER >> 0u) & 0b11111111u;
    }

    /**
     * Set RECEIVE_INTERRUPT_WATCHDOG_TIMER's RIWT field.
     *
     * RI Watchdog Timer Count
     */
    inline void set_RECEIVE_INTERRUPT_WATCHDOG_TIMER_RIWT(
        uint8_t value) volatile
    {
        uint32_t curr = RECEIVE_INTERRUPT_WATCHDOG_TIMER;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        RECEIVE_INTERRUPT_WATCHDOG_TIMER = curr;
    }

    /**
     * Get AHB_STATUS's AHBMS bit.
     *
     * AHB Master Status
     */
    inline bool get_AHB_STATUS_AHBMS() volatile
    {
        return AHB_STATUS & (1u << 0u);
    }

    /**
     * Get CURRENT_HOST_TRANSMIT_DESCRIPTOR's CURTDESAPTR field.
     *
     * Host Transmit Descriptor Address Pointer
     */
    inline uint32_t get_CURRENT_HOST_TRANSMIT_DESCRIPTOR_CURTDESAPTR() volatile
    {
        return (CURRENT_HOST_TRANSMIT_DESCRIPTOR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get CURRENT_HOST_RECEIVE_DESCRIPTOR's CURRDESAPTR field.
     *
     * Host Receive Descriptor Address Pointer
     */
    inline uint32_t get_CURRENT_HOST_RECEIVE_DESCRIPTOR_CURRDESAPTR() volatile
    {
        return (CURRENT_HOST_RECEIVE_DESCRIPTOR >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS's CURTBUFAPTR field.
     *
     * Host Transmit Buffer Address Pointer
     */
    inline uint32_t
    get_CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS_CURTBUFAPTR() volatile
    {
        return (CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get CURRENT_HOST_RECEIVE_BUFFER_ADDRESS's CURRBUFAPTR field.
     *
     * Host Receive Buffer Address Pointer
     */
    inline uint32_t
    get_CURRENT_HOST_RECEIVE_BUFFER_ADDRESS_CURRBUFAPTR() volatile
    {
        return (CURRENT_HOST_RECEIVE_BUFFER_ADDRESS >> 0u) &
               0b11111111111111111111111111111111u;
    }

    /**
     * Get HW_FEATURE's ACTPHYIF field.
     *
     * Active or Selected PHY interface
     */
    inline uint8_t get_HW_FEATURE_ACTPHYIF() volatile
    {
        return (HW_FEATURE >> 28u) & 0b111u;
    }

    /**
     * Get HW_FEATURE's SAVLANINS bit.
     *
     * Source Address or VLAN Insertion
     */
    inline bool get_HW_FEATURE_SAVLANINS() volatile
    {
        return HW_FEATURE & (1u << 27u);
    }

    /**
     * Get HW_FEATURE's FLEXIPPSEN bit.
     *
     * Flexible Pulse-Per-Second Output
     */
    inline bool get_HW_FEATURE_FLEXIPPSEN() volatile
    {
        return HW_FEATURE & (1u << 26u);
    }

    /**
     * Get HW_FEATURE's INTTSEN bit.
     *
     * Timestamping with Internal System Time
     */
    inline bool get_HW_FEATURE_INTTSEN() volatile
    {
        return HW_FEATURE & (1u << 25u);
    }

    /**
     * Get HW_FEATURE's ENHDESSEL bit.
     *
     * Alternate (Enhanced Descriptor)
     */
    inline bool get_HW_FEATURE_ENHDESSEL() volatile
    {
        return HW_FEATURE & (1u << 24u);
    }

    /**
     * Get HW_FEATURE's TXCHCNT field.
     *
     * Number of additional Tx channels
     */
    inline uint8_t get_HW_FEATURE_TXCHCNT() volatile
    {
        return (HW_FEATURE >> 22u) & 0b11u;
    }

    /**
     * Get HW_FEATURE's RXCHCNT field.
     *
     * Number of additional Rx channels
     */
    inline uint8_t get_HW_FEATURE_RXCHCNT() volatile
    {
        return (HW_FEATURE >> 20u) & 0b11u;
    }

    /**
     * Get HW_FEATURE's RXFIFOSIZE bit.
     *
     * Rx FIFO > 2,048 Bytes
     */
    inline bool get_HW_FEATURE_RXFIFOSIZE() volatile
    {
        return HW_FEATURE & (1u << 19u);
    }

    /**
     * Set HW_FEATURE's RXFIFOSIZE bit.
     *
     * Rx FIFO > 2,048 Bytes
     */
    inline void set_HW_FEATURE_RXFIFOSIZE() volatile
    {
        HW_FEATURE |= 1u << 19u;
    }

    /**
     * Clear HW_FEATURE's RXFIFOSIZE bit.
     *
     * Rx FIFO > 2,048 Bytes
     */
    inline void clear_HW_FEATURE_RXFIFOSIZE() volatile
    {
        HW_FEATURE &= ~(1u << 19u);
    }

    /**
     * Toggle HW_FEATURE's RXFIFOSIZE bit.
     *
     * Rx FIFO > 2,048 Bytes
     */
    inline void toggle_HW_FEATURE_RXFIFOSIZE() volatile
    {
        HW_FEATURE ^= 1u << 19u;
    }

    /**
     * Get HW_FEATURE's RXTYP2COE bit.
     *
     * IP Checksum Offload (Type 2) in Rx
     */
    inline bool get_HW_FEATURE_RXTYP2COE() volatile
    {
        return HW_FEATURE & (1u << 18u);
    }

    /**
     * Get HW_FEATURE's RXTYP1COE bit.
     *
     * IP Checksum Offload (Type 1) in Rx
     */
    inline bool get_HW_FEATURE_RXTYP1COE() volatile
    {
        return HW_FEATURE & (1u << 17u);
    }

    /**
     * Get HW_FEATURE's TXCOESEL bit.
     *
     * Checksum Offload in Tx
     */
    inline bool get_HW_FEATURE_TXCOESEL() volatile
    {
        return HW_FEATURE & (1u << 16u);
    }

    /**
     * Get HW_FEATURE's AVSEL bit.
     *
     * AV Feature
     */
    inline bool get_HW_FEATURE_AVSEL() volatile
    {
        return HW_FEATURE & (1u << 15u);
    }

    /**
     * Get HW_FEATURE's EEESEL bit.
     *
     * Energy Efficient Ethernet
     */
    inline bool get_HW_FEATURE_EEESEL() volatile
    {
        return HW_FEATURE & (1u << 14u);
    }

    /**
     * Get HW_FEATURE's TSVER2SEL bit.
     *
     * IEEE 1588-2008 Advanced Timestamp
     */
    inline bool get_HW_FEATURE_TSVER2SEL() volatile
    {
        return HW_FEATURE & (1u << 13u);
    }

    /**
     * Get HW_FEATURE's TSVER1SEL bit.
     *
     * Only IEEE 1588-2002 Timestamp
     */
    inline bool get_HW_FEATURE_TSVER1SEL() volatile
    {
        return HW_FEATURE & (1u << 12u);
    }

    /**
     * Get HW_FEATURE's MMCSEL bit.
     *
     * RMON Module
     */
    inline bool get_HW_FEATURE_MMCSEL() volatile
    {
        return HW_FEATURE & (1u << 11u);
    }

    /**
     * Get HW_FEATURE's MGKSEL bit.
     *
     * PMT Magic Packet
     */
    inline bool get_HW_FEATURE_MGKSEL() volatile
    {
        return HW_FEATURE & (1u << 10u);
    }

    /**
     * Get HW_FEATURE's RWKSEL bit.
     *
     * PMT Remote Wakeup
     */
    inline bool get_HW_FEATURE_RWKSEL() volatile
    {
        return HW_FEATURE & (1u << 9u);
    }

    /**
     * Get HW_FEATURE's SMASEL bit.
     *
     * SMA (MDIO) Interface
     */
    inline bool get_HW_FEATURE_SMASEL() volatile
    {
        return HW_FEATURE & (1u << 8u);
    }

    /**
     * Get HW_FEATURE's L3L4FLTREN bit.
     *
     * Layer 3 and Layer 4 Filter Feature
     */
    inline bool get_HW_FEATURE_L3L4FLTREN() volatile
    {
        return HW_FEATURE & (1u << 7u);
    }

    /**
     * Get HW_FEATURE's PCSSEL bit.
     *
     * PCS registers (TBI, SGMII, or RTBI PHY interface)
     */
    inline bool get_HW_FEATURE_PCSSEL() volatile
    {
        return HW_FEATURE & (1u << 6u);
    }

    /**
     * Get HW_FEATURE's ADDMACADRSEL bit.
     *
     * Multiple MAC Address Registers
     */
    inline bool get_HW_FEATURE_ADDMACADRSEL() volatile
    {
        return HW_FEATURE & (1u << 5u);
    }

    /**
     * Get HW_FEATURE's HASHSEL bit.
     *
     * HASH Filter
     */
    inline bool get_HW_FEATURE_HASHSEL() volatile
    {
        return HW_FEATURE & (1u << 4u);
    }

    /**
     * Get HW_FEATURE's EXTHASHEN bit.
     *
     * Expanded DA Hash Filter
     */
    inline bool get_HW_FEATURE_EXTHASHEN() volatile
    {
        return HW_FEATURE & (1u << 3u);
    }

    /**
     * Get HW_FEATURE's HDSEL bit.
     *
     * Half-Duplex support
     */
    inline bool get_HW_FEATURE_HDSEL() volatile
    {
        return HW_FEATURE & (1u << 2u);
    }

    /**
     * Get HW_FEATURE's GMIISEL bit.
     *
     * 1000 Mbps support
     */
    inline bool get_HW_FEATURE_GMIISEL() volatile
    {
        return HW_FEATURE & (1u << 1u);
    }

    /**
     * Get HW_FEATURE's MIISEL bit.
     *
     * 10 or 100 Mbps support
     */
    inline bool get_HW_FEATURE_MIISEL() volatile
    {
        return HW_FEATURE & (1u << 0u);
    }

    /**
     * Get all of HW_FEATURE's bit fields.
     *
     * (read-write) HW Feature Register
     */
    inline void get_HW_FEATURE(
        uint8_t &ACTPHYIF, bool &SAVLANINS, bool &FLEXIPPSEN, bool &INTTSEN,
        bool &ENHDESSEL, uint8_t &TXCHCNT, uint8_t &RXCHCNT, bool &RXFIFOSIZE,
        bool &RXTYP2COE, bool &RXTYP1COE, bool &TXCOESEL, bool &AVSEL,
        bool &EEESEL, bool &TSVER2SEL, bool &TSVER1SEL, bool &MMCSEL,
        bool &MGKSEL, bool &RWKSEL, bool &SMASEL, bool &L3L4FLTREN,
        bool &PCSSEL, bool &ADDMACADRSEL, bool &HASHSEL, bool &EXTHASHEN,
        bool &HDSEL, bool &GMIISEL, bool &MIISEL) volatile
    {
        uint32_t curr = HW_FEATURE;

        ACTPHYIF = (curr >> 28u) & 0b111u;
        SAVLANINS = curr & (1u << 27u);
        FLEXIPPSEN = curr & (1u << 26u);
        INTTSEN = curr & (1u << 25u);
        ENHDESSEL = curr & (1u << 24u);
        TXCHCNT = (curr >> 22u) & 0b11u;
        RXCHCNT = (curr >> 20u) & 0b11u;
        RXFIFOSIZE = curr & (1u << 19u);
        RXTYP2COE = curr & (1u << 18u);
        RXTYP1COE = curr & (1u << 17u);
        TXCOESEL = curr & (1u << 16u);
        AVSEL = curr & (1u << 15u);
        EEESEL = curr & (1u << 14u);
        TSVER2SEL = curr & (1u << 13u);
        TSVER1SEL = curr & (1u << 12u);
        MMCSEL = curr & (1u << 11u);
        MGKSEL = curr & (1u << 10u);
        RWKSEL = curr & (1u << 9u);
        SMASEL = curr & (1u << 8u);
        L3L4FLTREN = curr & (1u << 7u);
        PCSSEL = curr & (1u << 6u);
        ADDMACADRSEL = curr & (1u << 5u);
        HASHSEL = curr & (1u << 4u);
        EXTHASHEN = curr & (1u << 3u);
        HDSEL = curr & (1u << 2u);
        GMIISEL = curr & (1u << 1u);
        MIISEL = curr & (1u << 0u);
    }
};

static_assert(sizeof(eth0) == eth0::size);

static volatile eth0 *const ETH0 = reinterpret_cast<eth0 *>(0x5000C000);

}; // namespace XMC4700
