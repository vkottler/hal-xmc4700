/**
 * \file
 * \brief Generated by ifgen (3.2.0).
 */
#pragma once

#include "../enums/SCU_OSC_OSCHPCTRL_GAINSEL.h"
#include "../enums/SCU_OSC_OSCHPCTRL_MODE.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * System Control Unit
 */
struct [[gnu::packed]] scu_osc
{
    /* Constant attributes. */
    static constexpr std::size_t size = 16; /*!< scu_osc's size in bytes. */

    /* Fields. */
    const uint32_t OSCHPSTAT = {}; /*!< (read-only) OSC_HP Status Register */
    uint32_t OSCHPCTRL;            /*!< (read-write) OSC_HP Control Register */
    const uint32_t reserved_padding0 = {};
    uint32_t
        CLKCALCONST; /*!< (read-write) Clock Calibration Constant Register */

    /* Methods. */

    /**
     * Get OSCHPSTAT's X1D bit.
     *
     * XTAL1 Data Value
     */
    inline bool get_OSCHPSTAT_X1D() volatile
    {
        return OSCHPSTAT & (1u << 0u);
    }

    /**
     * Get OSCHPCTRL's OSCVAL field.
     *
     * OSC Frequency Value
     */
    inline uint8_t get_OSCHPCTRL_OSCVAL() volatile
    {
        return (OSCHPCTRL >> 16u) & 0b1111u;
    }

    /**
     * Set OSCHPCTRL's OSCVAL field.
     *
     * OSC Frequency Value
     */
    inline void set_OSCHPCTRL_OSCVAL(uint8_t value) volatile
    {
        uint32_t curr = OSCHPCTRL;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        OSCHPCTRL = curr;
    }

    /**
     * Get OSCHPCTRL's MODE field.
     *
     * Oscillator Mode
     */
    inline SCU_OSC_OSCHPCTRL_MODE get_OSCHPCTRL_MODE() volatile
    {
        return SCU_OSC_OSCHPCTRL_MODE((OSCHPCTRL >> 4u) & 0b11u);
    }

    /**
     * Set OSCHPCTRL's MODE field.
     *
     * Oscillator Mode
     */
    inline void set_OSCHPCTRL_MODE(SCU_OSC_OSCHPCTRL_MODE value) volatile
    {
        uint32_t curr = OSCHPCTRL;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        OSCHPCTRL = curr;
    }

    /**
     * Get OSCHPCTRL's GAINSEL field.
     *
     * Oscillator Gain Selection
     */
    inline SCU_OSC_OSCHPCTRL_GAINSEL get_OSCHPCTRL_GAINSEL() volatile
    {
        return SCU_OSC_OSCHPCTRL_GAINSEL((OSCHPCTRL >> 2u) & 0b11u);
    }

    /**
     * Set OSCHPCTRL's GAINSEL field.
     *
     * Oscillator Gain Selection
     */
    inline void set_OSCHPCTRL_GAINSEL(SCU_OSC_OSCHPCTRL_GAINSEL value) volatile
    {
        uint32_t curr = OSCHPCTRL;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        OSCHPCTRL = curr;
    }

    /**
     * Get OSCHPCTRL's SHBY bit.
     *
     * Shaper Bypass
     */
    inline bool get_OSCHPCTRL_SHBY() volatile
    {
        return OSCHPCTRL & (1u << 1u);
    }

    /**
     * Set OSCHPCTRL's SHBY bit.
     *
     * Shaper Bypass
     */
    inline void set_OSCHPCTRL_SHBY() volatile
    {
        OSCHPCTRL |= 1u << 1u;
    }

    /**
     * Clear OSCHPCTRL's SHBY bit.
     *
     * Shaper Bypass
     */
    inline void clear_OSCHPCTRL_SHBY() volatile
    {
        OSCHPCTRL &= ~(1u << 1u);
    }

    /**
     * Toggle OSCHPCTRL's SHBY bit.
     *
     * Shaper Bypass
     */
    inline void toggle_OSCHPCTRL_SHBY() volatile
    {
        OSCHPCTRL ^= 1u << 1u;
    }

    /**
     * Get OSCHPCTRL's X1DEN bit.
     *
     * XTAL1 Data Enable
     */
    inline bool get_OSCHPCTRL_X1DEN() volatile
    {
        return OSCHPCTRL & (1u << 0u);
    }

    /**
     * Set OSCHPCTRL's X1DEN bit.
     *
     * XTAL1 Data Enable
     */
    inline void set_OSCHPCTRL_X1DEN() volatile
    {
        OSCHPCTRL |= 1u << 0u;
    }

    /**
     * Clear OSCHPCTRL's X1DEN bit.
     *
     * XTAL1 Data Enable
     */
    inline void clear_OSCHPCTRL_X1DEN() volatile
    {
        OSCHPCTRL &= ~(1u << 0u);
    }

    /**
     * Toggle OSCHPCTRL's X1DEN bit.
     *
     * XTAL1 Data Enable
     */
    inline void toggle_OSCHPCTRL_X1DEN() volatile
    {
        OSCHPCTRL ^= 1u << 0u;
    }

    /**
     * Get all of OSCHPCTRL's bit fields.
     *
     * (read-write) OSC_HP Control Register
     */
    inline void get_OSCHPCTRL(uint8_t &OSCVAL, SCU_OSC_OSCHPCTRL_MODE &MODE,
                              SCU_OSC_OSCHPCTRL_GAINSEL &GAINSEL, bool &SHBY,
                              bool &X1DEN) volatile
    {
        uint32_t curr = OSCHPCTRL;

        OSCVAL = (curr >> 16u) & 0b1111u;
        MODE = SCU_OSC_OSCHPCTRL_MODE((curr >> 4u) & 0b11u);
        GAINSEL = SCU_OSC_OSCHPCTRL_GAINSEL((curr >> 2u) & 0b11u);
        SHBY = curr & (1u << 1u);
        X1DEN = curr & (1u << 0u);
    }

    /**
     * Set all of OSCHPCTRL's bit fields.
     *
     * (read-write) OSC_HP Control Register
     */
    inline void set_OSCHPCTRL(uint8_t OSCVAL, SCU_OSC_OSCHPCTRL_MODE MODE,
                              SCU_OSC_OSCHPCTRL_GAINSEL GAINSEL, bool SHBY,
                              bool X1DEN) volatile
    {
        uint32_t curr = OSCHPCTRL;

        curr &= ~(0b1111u << 16u);
        curr |= (OSCVAL & 0b1111u) << 16u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(MODE) & 0b11u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(GAINSEL) & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (SHBY & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (X1DEN & 0b1u) << 0u;

        OSCHPCTRL = curr;
    }

    /**
     * Get CLKCALCONST's CALIBCONST field.
     *
     * Clock Calibration Constant Value
     */
    inline uint8_t get_CLKCALCONST_CALIBCONST() volatile
    {
        return (CLKCALCONST >> 0u) & 0b1111u;
    }

    /**
     * Set CLKCALCONST's CALIBCONST field.
     *
     * Clock Calibration Constant Value
     */
    inline void set_CLKCALCONST_CALIBCONST(uint8_t value) volatile
    {
        uint32_t curr = CLKCALCONST;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        CLKCALCONST = curr;
    }
};

static_assert(sizeof(scu_osc) == scu_osc::size);

static volatile scu_osc *const SCU_OSC =
    reinterpret_cast<scu_osc *>(0x50004700);

}; // namespace XMC4700
