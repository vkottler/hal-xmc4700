/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/VADC_BRSCTRL_GTWC.h"
#include "../enums/VADC_BRSCTRL_SRCRESREG.h"
#include "../enums/VADC_BRSCTRL_XTMODE.h"
#include "../enums/VADC_BRSCTRL_XTWC.h"
#include "../enums/VADC_BRSMR_CLRPND.h"
#include "../enums/VADC_BRSMR_ENGT.h"
#include "../enums/VADC_BRSMR_ENSI.h"
#include "../enums/VADC_BRSMR_ENTR.h"
#include "../enums/VADC_BRSMR_LDEV.h"
#include "../enums/VADC_BRSMR_LDM.h"
#include "../enums/VADC_BRSMR_REQGT.h"
#include "../enums/VADC_BRSMR_RPTDIS.h"
#include "../enums/VADC_BRSMR_SCAN.h"
#include "../enums/VADC_BRSPND_CHPNDG0.h"
#include "../enums/VADC_BRSPND_CHPNDG1.h"
#include "../enums/VADC_BRSPND_CHPNDG2.h"
#include "../enums/VADC_BRSPND_CHPNDG3.h"
#include "../enums/VADC_BRSPND_CHPNDG4.h"
#include "../enums/VADC_BRSPND_CHPNDG5.h"
#include "../enums/VADC_BRSPND_CHPNDG6.h"
#include "../enums/VADC_BRSPND_CHPNDG7.h"
#include "../enums/VADC_BRSSEL_CHSELG0.h"
#include "../enums/VADC_BRSSEL_CHSELG1.h"
#include "../enums/VADC_BRSSEL_CHSELG2.h"
#include "../enums/VADC_BRSSEL_CHSELG3.h"
#include "../enums/VADC_BRSSEL_CHSELG4.h"
#include "../enums/VADC_BRSSEL_CHSELG5.h"
#include "../enums/VADC_BRSSEL_CHSELG6.h"
#include "../enums/VADC_BRSSEL_CHSELG7.h"
#include "../enums/VADC_CLC_DISR.h"
#include "../enums/VADC_CLC_DISS.h"
#include "../enums/VADC_CLC_EDIS.h"
#include "../enums/VADC_GLOBCFG_DCMSB.h"
#include "../enums/VADC_GLOBCFG_DIVA.h"
#include "../enums/VADC_GLOBCFG_DIVD.h"
#include "../enums/VADC_GLOBCFG_DIVWC.h"
#include "../enums/VADC_GLOBCFG_DPCAL0.h"
#include "../enums/VADC_GLOBCFG_DPCAL1.h"
#include "../enums/VADC_GLOBCFG_DPCAL2.h"
#include "../enums/VADC_GLOBCFG_DPCAL3.h"
#include "../enums/VADC_GLOBCFG_SUCAL.h"
#include "../enums/VADC_GLOBEFLAG_REVGLB.h"
#include "../enums/VADC_GLOBEFLAG_REVGLBCLR.h"
#include "../enums/VADC_GLOBEFLAG_SEVGLB.h"
#include "../enums/VADC_GLOBEFLAG_SEVGLBCLR.h"
#include "../enums/VADC_GLOBEVNP_REV0NP.h"
#include "../enums/VADC_GLOBEVNP_SEV0NP.h"
#include "../enums/VADC_GLOBICLASS_CME.h"
#include "../enums/VADC_GLOBICLASS_CMS.h"
#include "../enums/VADC_GLOBRCR_DRCTR.h"
#include "../enums/VADC_GLOBRCR_SRGEN.h"
#include "../enums/VADC_GLOBRCR_WFR.h"
#include "../enums/VADC_GLOBRESD_FCR.h"
#include "../enums/VADC_GLOBRESD_VF.h"
#include "../enums/VADC_GLOBRES_FCR.h"
#include "../enums/VADC_GLOBRES_VF.h"
#include "../enums/VADC_GLOBTF_CDEN.h"
#include "../enums/VADC_GLOBTF_CDSEL.h"
#include "../enums/VADC_GLOBTF_CDWC.h"
#include "../enums/VADC_GLOBTF_MDWC.h"
#include "../enums/VADC_GLOBTF_PDD.h"
#include "../enums/VADC_OCS_SUS.h"
#include "../enums/VADC_OCS_SUSSTA.h"
#include "../enums/VADC_OCS_TGB.h"
#include "../enums/VADC_OCS_TGS.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Analog to Digital Converter
 */
struct [[gnu::packed]] vadc
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;         /*!< vadc's identifier. */
    static constexpr std::size_t size = 1012; /*!< vadc's size in bytes. */

    /* Fields. */
    uint32_t CLC; /*!< (read-write) Clock Control Register */
    const uint32_t reserved_padding0 = {};
    const uint32_t ID = {}; /*!< (read-only) Module Identification Register */
    static constexpr std::size_t reserved_padding1_length = 7;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t OCS; /*!< (read-write) OCDS Control and Status Register */
    static constexpr std::size_t reserved_padding2_length = 21;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t GLOBCFG; /*!< (read-write) Global Configuration Register */
    static constexpr std::size_t reserved_padding3_length = 7;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    static constexpr std::size_t GLOBICLASS_length = 2;
    uint32_t GLOBICLASS[GLOBICLASS_length]; /*!< (read-write) Input Class
                                               Register, Global */
    static constexpr std::size_t reserved_padding4_length = 4;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t GLOBBOUND; /*!< (read-write) Global Boundary Select Register */
    static constexpr std::size_t reserved_padding5_length = 9;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    uint32_t GLOBEFLAG; /*!< (read-write) Global Event Flag Register */
    static constexpr std::size_t reserved_padding6_length = 23;
    const uint32_t reserved_padding6[reserved_padding6_length] = {};
    uint32_t GLOBEVNP; /*!< (read-write) Global Event Node Pointer Register */
    static constexpr std::size_t reserved_padding7_length = 7;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    uint32_t GLOBTF; /*!< (read-write) Global Test Functions Register */
    static constexpr std::size_t reserved_padding8_length = 7;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    static constexpr std::size_t BRSSEL_length = 4;
    uint32_t BRSSEL[BRSSEL_length]; /*!< (read-write) Background Request Source
                                       Channel Select Register */
    static constexpr std::size_t reserved_padding9_length = 12;
    const uint32_t reserved_padding9[reserved_padding9_length] = {};
    static constexpr std::size_t BRSPND_length = 4;
    uint32_t BRSPND[BRSPND_length]; /*!< (read-write) Background Request Source
                                       Pending Register */
    static constexpr std::size_t reserved_padding10_length = 12;
    const uint32_t reserved_padding10[reserved_padding10_length] = {};
    uint32_t BRSCTRL; /*!< (read-write) Background Request Source Control
                         Register */
    uint32_t
        BRSMR; /*!< (read-write) Background Request Source Mode Register */
    static constexpr std::size_t reserved_padding11_length = 30;
    const uint32_t reserved_padding11[reserved_padding11_length] = {};
    uint32_t GLOBRCR; /*!< (read-write) Global Result Control Register */
    static constexpr std::size_t reserved_padding12_length = 31;
    const uint32_t reserved_padding12[reserved_padding12_length] = {};
    uint32_t GLOBRES; /*!< (read-write) Global Result Register */
    static constexpr std::size_t reserved_padding13_length = 31;
    const uint32_t reserved_padding13[reserved_padding13_length] = {};
    uint32_t GLOBRESD; /*!< (read-write) Global Result Register, Debug */
    static constexpr std::size_t reserved_padding14_length = 27;
    const uint32_t reserved_padding14[reserved_padding14_length] = {};
    uint32_t EMUXSEL; /*!< (read-write) External Multiplexer Select Register */

    /* Methods. */

    /**
     * Get CLC's EDIS bit.
     */
    VADC_CLC_EDIS get_CLC_EDIS()
    {
        return VADC_CLC_EDIS(CLC & (1u << 3u));
    }

    /**
     * Set CLC's EDIS bit.
     */
    inline void set_CLC_EDIS()
    {
        CLC |= 1u << 3u;
    }

    /**
     * Clear CLC's EDIS bit.
     */
    inline void clear_CLC_EDIS()
    {
        CLC &= ~(1u << 3u);
    }

    /**
     * Toggle CLC's EDIS bit.
     */
    inline void toggle_CLC_EDIS()
    {
        CLC ^= 1u << 3u;
    }

    /**
     * Get CLC's DISS bit.
     */
    VADC_CLC_DISS get_CLC_DISS()
    {
        return VADC_CLC_DISS(CLC & (1u << 1u));
    }

    /**
     * Get CLC's DISR bit.
     */
    VADC_CLC_DISR get_CLC_DISR()
    {
        return VADC_CLC_DISR(CLC & (1u << 0u));
    }

    /**
     * Set CLC's DISR bit.
     */
    inline void set_CLC_DISR()
    {
        CLC |= 1u << 0u;
    }

    /**
     * Clear CLC's DISR bit.
     */
    inline void clear_CLC_DISR()
    {
        CLC &= ~(1u << 0u);
    }

    /**
     * Toggle CLC's DISR bit.
     */
    inline void toggle_CLC_DISR()
    {
        CLC ^= 1u << 0u;
    }

    /**
     * Get ID's MOD_NUMBER field.
     */
    uint16_t get_ID_MOD_NUMBER()
    {
        return (ID >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get ID's MOD_TYPE field.
     */
    uint8_t get_ID_MOD_TYPE()
    {
        return (ID >> 8u) & 0b11111111u;
    }

    /**
     * Get ID's MOD_REV field.
     */
    uint8_t get_ID_MOD_REV()
    {
        return (ID >> 0u) & 0b11111111u;
    }

    /**
     * Get OCS's SUSSTA bit.
     */
    VADC_OCS_SUSSTA get_OCS_SUSSTA()
    {
        return VADC_OCS_SUSSTA(OCS & (1u << 29u));
    }

    /**
     * Set OCS's SUS_P bit.
     */
    inline void set_OCS_SUS_P()
    {
        OCS |= 1u << 28u;
    }

    /**
     * Clear OCS's SUS_P bit.
     */
    inline void clear_OCS_SUS_P()
    {
        OCS &= ~(1u << 28u);
    }

    /**
     * Toggle OCS's SUS_P bit.
     */
    inline void toggle_OCS_SUS_P()
    {
        OCS ^= 1u << 28u;
    }

    /**
     * Get OCS's SUS field.
     */
    VADC_OCS_SUS get_OCS_SUS()
    {
        return VADC_OCS_SUS((OCS >> 24u) & 0b1111u);
    }

    /**
     * Set OCS's SUS field.
     */
    inline void set_OCS_SUS(VADC_OCS_SUS value)
    {
        uint32_t curr = OCS;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        OCS = curr;
    }

    /**
     * Set OCS's TG_P bit.
     */
    inline void set_OCS_TG_P()
    {
        OCS |= 1u << 3u;
    }

    /**
     * Clear OCS's TG_P bit.
     */
    inline void clear_OCS_TG_P()
    {
        OCS &= ~(1u << 3u);
    }

    /**
     * Toggle OCS's TG_P bit.
     */
    inline void toggle_OCS_TG_P()
    {
        OCS ^= 1u << 3u;
    }

    /**
     * Get OCS's TGB bit.
     */
    VADC_OCS_TGB get_OCS_TGB()
    {
        return VADC_OCS_TGB(OCS & (1u << 2u));
    }

    /**
     * Set OCS's TGB bit.
     */
    inline void set_OCS_TGB()
    {
        OCS |= 1u << 2u;
    }

    /**
     * Clear OCS's TGB bit.
     */
    inline void clear_OCS_TGB()
    {
        OCS &= ~(1u << 2u);
    }

    /**
     * Toggle OCS's TGB bit.
     */
    inline void toggle_OCS_TGB()
    {
        OCS ^= 1u << 2u;
    }

    /**
     * Get OCS's TGS field.
     */
    VADC_OCS_TGS get_OCS_TGS()
    {
        return VADC_OCS_TGS((OCS >> 0u) & 0b11u);
    }

    /**
     * Set OCS's TGS field.
     */
    inline void set_OCS_TGS(VADC_OCS_TGS value)
    {
        uint32_t curr = OCS;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        OCS = curr;
    }

    /**
     * Set GLOBCFG's SUCAL bit.
     */
    inline void set_GLOBCFG_SUCAL()
    {
        GLOBCFG |= 1u << 31u;
    }

    /**
     * Clear GLOBCFG's SUCAL bit.
     */
    inline void clear_GLOBCFG_SUCAL()
    {
        GLOBCFG &= ~(1u << 31u);
    }

    /**
     * Toggle GLOBCFG's SUCAL bit.
     */
    inline void toggle_GLOBCFG_SUCAL()
    {
        GLOBCFG ^= 1u << 31u;
    }

    /**
     * Get GLOBCFG's DPCAL3 bit.
     */
    VADC_GLOBCFG_DPCAL3 get_GLOBCFG_DPCAL3()
    {
        return VADC_GLOBCFG_DPCAL3(GLOBCFG & (1u << 19u));
    }

    /**
     * Set GLOBCFG's DPCAL3 bit.
     */
    inline void set_GLOBCFG_DPCAL3()
    {
        GLOBCFG |= 1u << 19u;
    }

    /**
     * Clear GLOBCFG's DPCAL3 bit.
     */
    inline void clear_GLOBCFG_DPCAL3()
    {
        GLOBCFG &= ~(1u << 19u);
    }

    /**
     * Toggle GLOBCFG's DPCAL3 bit.
     */
    inline void toggle_GLOBCFG_DPCAL3()
    {
        GLOBCFG ^= 1u << 19u;
    }

    /**
     * Get GLOBCFG's DPCAL2 bit.
     */
    VADC_GLOBCFG_DPCAL2 get_GLOBCFG_DPCAL2()
    {
        return VADC_GLOBCFG_DPCAL2(GLOBCFG & (1u << 18u));
    }

    /**
     * Set GLOBCFG's DPCAL2 bit.
     */
    inline void set_GLOBCFG_DPCAL2()
    {
        GLOBCFG |= 1u << 18u;
    }

    /**
     * Clear GLOBCFG's DPCAL2 bit.
     */
    inline void clear_GLOBCFG_DPCAL2()
    {
        GLOBCFG &= ~(1u << 18u);
    }

    /**
     * Toggle GLOBCFG's DPCAL2 bit.
     */
    inline void toggle_GLOBCFG_DPCAL2()
    {
        GLOBCFG ^= 1u << 18u;
    }

    /**
     * Get GLOBCFG's DPCAL1 bit.
     */
    VADC_GLOBCFG_DPCAL1 get_GLOBCFG_DPCAL1()
    {
        return VADC_GLOBCFG_DPCAL1(GLOBCFG & (1u << 17u));
    }

    /**
     * Set GLOBCFG's DPCAL1 bit.
     */
    inline void set_GLOBCFG_DPCAL1()
    {
        GLOBCFG |= 1u << 17u;
    }

    /**
     * Clear GLOBCFG's DPCAL1 bit.
     */
    inline void clear_GLOBCFG_DPCAL1()
    {
        GLOBCFG &= ~(1u << 17u);
    }

    /**
     * Toggle GLOBCFG's DPCAL1 bit.
     */
    inline void toggle_GLOBCFG_DPCAL1()
    {
        GLOBCFG ^= 1u << 17u;
    }

    /**
     * Get GLOBCFG's DPCAL0 bit.
     */
    VADC_GLOBCFG_DPCAL0 get_GLOBCFG_DPCAL0()
    {
        return VADC_GLOBCFG_DPCAL0(GLOBCFG & (1u << 16u));
    }

    /**
     * Set GLOBCFG's DPCAL0 bit.
     */
    inline void set_GLOBCFG_DPCAL0()
    {
        GLOBCFG |= 1u << 16u;
    }

    /**
     * Clear GLOBCFG's DPCAL0 bit.
     */
    inline void clear_GLOBCFG_DPCAL0()
    {
        GLOBCFG &= ~(1u << 16u);
    }

    /**
     * Toggle GLOBCFG's DPCAL0 bit.
     */
    inline void toggle_GLOBCFG_DPCAL0()
    {
        GLOBCFG ^= 1u << 16u;
    }

    /**
     * Set GLOBCFG's DIVWC bit.
     */
    inline void set_GLOBCFG_DIVWC()
    {
        GLOBCFG |= 1u << 15u;
    }

    /**
     * Clear GLOBCFG's DIVWC bit.
     */
    inline void clear_GLOBCFG_DIVWC()
    {
        GLOBCFG &= ~(1u << 15u);
    }

    /**
     * Toggle GLOBCFG's DIVWC bit.
     */
    inline void toggle_GLOBCFG_DIVWC()
    {
        GLOBCFG ^= 1u << 15u;
    }

    /**
     * Get GLOBCFG's DIVD field.
     */
    VADC_GLOBCFG_DIVD get_GLOBCFG_DIVD()
    {
        return VADC_GLOBCFG_DIVD((GLOBCFG >> 8u) & 0b11u);
    }

    /**
     * Set GLOBCFG's DIVD field.
     */
    inline void set_GLOBCFG_DIVD(VADC_GLOBCFG_DIVD value)
    {
        uint32_t curr = GLOBCFG;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        GLOBCFG = curr;
    }

    /**
     * Get GLOBCFG's DCMSB bit.
     */
    VADC_GLOBCFG_DCMSB get_GLOBCFG_DCMSB()
    {
        return VADC_GLOBCFG_DCMSB(GLOBCFG & (1u << 7u));
    }

    /**
     * Set GLOBCFG's DCMSB bit.
     */
    inline void set_GLOBCFG_DCMSB()
    {
        GLOBCFG |= 1u << 7u;
    }

    /**
     * Clear GLOBCFG's DCMSB bit.
     */
    inline void clear_GLOBCFG_DCMSB()
    {
        GLOBCFG &= ~(1u << 7u);
    }

    /**
     * Toggle GLOBCFG's DCMSB bit.
     */
    inline void toggle_GLOBCFG_DCMSB()
    {
        GLOBCFG ^= 1u << 7u;
    }

    /**
     * Get GLOBCFG's DIVA field.
     */
    VADC_GLOBCFG_DIVA get_GLOBCFG_DIVA()
    {
        return VADC_GLOBCFG_DIVA((GLOBCFG >> 0u) & 0b11111u);
    }

    /**
     * Set GLOBCFG's DIVA field.
     */
    inline void set_GLOBCFG_DIVA(VADC_GLOBCFG_DIVA value)
    {
        uint32_t curr = GLOBCFG;

        curr &= ~(0b11111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111u) << 0u;

        GLOBCFG = curr;
    }

    /**
     * Get GLOBICLASS's CME field.
     */
    VADC_GLOBICLASS_CME get_GLOBICLASS_CME(std::size_t index)
    {
        return VADC_GLOBICLASS_CME((GLOBICLASS[index] >> 24u) & 0b111u);
    }

    /**
     * Set GLOBICLASS's CME field.
     */
    inline void set_GLOBICLASS_CME(std::size_t index,
                                   VADC_GLOBICLASS_CME value)
    {
        uint32_t curr = GLOBICLASS[index];

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        GLOBICLASS[index] = curr;
    }

    /**
     * Get GLOBICLASS's STCE field.
     */
    uint8_t get_GLOBICLASS_STCE(std::size_t index)
    {
        return (GLOBICLASS[index] >> 16u) & 0b11111u;
    }

    /**
     * Set GLOBICLASS's STCE field.
     */
    inline void set_GLOBICLASS_STCE(std::size_t index, uint8_t value)
    {
        uint32_t curr = GLOBICLASS[index];

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        GLOBICLASS[index] = curr;
    }

    /**
     * Get GLOBICLASS's CMS field.
     */
    VADC_GLOBICLASS_CMS get_GLOBICLASS_CMS(std::size_t index)
    {
        return VADC_GLOBICLASS_CMS((GLOBICLASS[index] >> 8u) & 0b111u);
    }

    /**
     * Set GLOBICLASS's CMS field.
     */
    inline void set_GLOBICLASS_CMS(std::size_t index,
                                   VADC_GLOBICLASS_CMS value)
    {
        uint32_t curr = GLOBICLASS[index];

        curr &= ~(0b111u << 8u);
        curr |= (std::to_underlying(value) & 0b111u) << 8u;

        GLOBICLASS[index] = curr;
    }

    /**
     * Get GLOBICLASS's STCS field.
     */
    uint8_t get_GLOBICLASS_STCS(std::size_t index)
    {
        return (GLOBICLASS[index] >> 0u) & 0b11111u;
    }

    /**
     * Set GLOBICLASS's STCS field.
     */
    inline void set_GLOBICLASS_STCS(std::size_t index, uint8_t value)
    {
        uint32_t curr = GLOBICLASS[index];

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        GLOBICLASS[index] = curr;
    }

    /**
     * Get GLOBBOUND's BOUNDARY1 field.
     */
    uint16_t get_GLOBBOUND_BOUNDARY1()
    {
        return (GLOBBOUND >> 16u) & 0b111111111111u;
    }

    /**
     * Set GLOBBOUND's BOUNDARY1 field.
     */
    inline void set_GLOBBOUND_BOUNDARY1(uint16_t value)
    {
        uint32_t curr = GLOBBOUND;

        curr &= ~(0b111111111111u << 16u);
        curr |= (value & 0b111111111111u) << 16u;

        GLOBBOUND = curr;
    }

    /**
     * Get GLOBBOUND's BOUNDARY0 field.
     */
    uint16_t get_GLOBBOUND_BOUNDARY0()
    {
        return (GLOBBOUND >> 0u) & 0b111111111111u;
    }

    /**
     * Set GLOBBOUND's BOUNDARY0 field.
     */
    inline void set_GLOBBOUND_BOUNDARY0(uint16_t value)
    {
        uint32_t curr = GLOBBOUND;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        GLOBBOUND = curr;
    }

    /**
     * Set GLOBEFLAG's REVGLBCLR bit.
     */
    inline void set_GLOBEFLAG_REVGLBCLR()
    {
        GLOBEFLAG |= 1u << 24u;
    }

    /**
     * Clear GLOBEFLAG's REVGLBCLR bit.
     */
    inline void clear_GLOBEFLAG_REVGLBCLR()
    {
        GLOBEFLAG &= ~(1u << 24u);
    }

    /**
     * Toggle GLOBEFLAG's REVGLBCLR bit.
     */
    inline void toggle_GLOBEFLAG_REVGLBCLR()
    {
        GLOBEFLAG ^= 1u << 24u;
    }

    /**
     * Set GLOBEFLAG's SEVGLBCLR bit.
     */
    inline void set_GLOBEFLAG_SEVGLBCLR()
    {
        GLOBEFLAG |= 1u << 16u;
    }

    /**
     * Clear GLOBEFLAG's SEVGLBCLR bit.
     */
    inline void clear_GLOBEFLAG_SEVGLBCLR()
    {
        GLOBEFLAG &= ~(1u << 16u);
    }

    /**
     * Toggle GLOBEFLAG's SEVGLBCLR bit.
     */
    inline void toggle_GLOBEFLAG_SEVGLBCLR()
    {
        GLOBEFLAG ^= 1u << 16u;
    }

    /**
     * Get GLOBEFLAG's REVGLB bit.
     */
    VADC_GLOBEFLAG_REVGLB get_GLOBEFLAG_REVGLB()
    {
        return VADC_GLOBEFLAG_REVGLB(GLOBEFLAG & (1u << 8u));
    }

    /**
     * Set GLOBEFLAG's REVGLB bit.
     */
    inline void set_GLOBEFLAG_REVGLB()
    {
        GLOBEFLAG |= 1u << 8u;
    }

    /**
     * Clear GLOBEFLAG's REVGLB bit.
     */
    inline void clear_GLOBEFLAG_REVGLB()
    {
        GLOBEFLAG &= ~(1u << 8u);
    }

    /**
     * Toggle GLOBEFLAG's REVGLB bit.
     */
    inline void toggle_GLOBEFLAG_REVGLB()
    {
        GLOBEFLAG ^= 1u << 8u;
    }

    /**
     * Get GLOBEFLAG's SEVGLB bit.
     */
    VADC_GLOBEFLAG_SEVGLB get_GLOBEFLAG_SEVGLB()
    {
        return VADC_GLOBEFLAG_SEVGLB(GLOBEFLAG & (1u << 0u));
    }

    /**
     * Set GLOBEFLAG's SEVGLB bit.
     */
    inline void set_GLOBEFLAG_SEVGLB()
    {
        GLOBEFLAG |= 1u << 0u;
    }

    /**
     * Clear GLOBEFLAG's SEVGLB bit.
     */
    inline void clear_GLOBEFLAG_SEVGLB()
    {
        GLOBEFLAG &= ~(1u << 0u);
    }

    /**
     * Toggle GLOBEFLAG's SEVGLB bit.
     */
    inline void toggle_GLOBEFLAG_SEVGLB()
    {
        GLOBEFLAG ^= 1u << 0u;
    }

    /**
     * Get GLOBEVNP's REV0NP field.
     */
    VADC_GLOBEVNP_REV0NP get_GLOBEVNP_REV0NP()
    {
        return VADC_GLOBEVNP_REV0NP((GLOBEVNP >> 16u) & 0b1111u);
    }

    /**
     * Set GLOBEVNP's REV0NP field.
     */
    inline void set_GLOBEVNP_REV0NP(VADC_GLOBEVNP_REV0NP value)
    {
        uint32_t curr = GLOBEVNP;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        GLOBEVNP = curr;
    }

    /**
     * Get GLOBEVNP's SEV0NP field.
     */
    VADC_GLOBEVNP_SEV0NP get_GLOBEVNP_SEV0NP()
    {
        return VADC_GLOBEVNP_SEV0NP((GLOBEVNP >> 0u) & 0b1111u);
    }

    /**
     * Set GLOBEVNP's SEV0NP field.
     */
    inline void set_GLOBEVNP_SEV0NP(VADC_GLOBEVNP_SEV0NP value)
    {
        uint32_t curr = GLOBEVNP;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        GLOBEVNP = curr;
    }

    /**
     * Set GLOBTF's MDWC bit.
     */
    inline void set_GLOBTF_MDWC()
    {
        GLOBTF |= 1u << 23u;
    }

    /**
     * Clear GLOBTF's MDWC bit.
     */
    inline void clear_GLOBTF_MDWC()
    {
        GLOBTF &= ~(1u << 23u);
    }

    /**
     * Toggle GLOBTF's MDWC bit.
     */
    inline void toggle_GLOBTF_MDWC()
    {
        GLOBTF ^= 1u << 23u;
    }

    /**
     * Get GLOBTF's PDD bit.
     */
    VADC_GLOBTF_PDD get_GLOBTF_PDD()
    {
        return VADC_GLOBTF_PDD(GLOBTF & (1u << 16u));
    }

    /**
     * Set GLOBTF's PDD bit.
     */
    inline void set_GLOBTF_PDD()
    {
        GLOBTF |= 1u << 16u;
    }

    /**
     * Clear GLOBTF's PDD bit.
     */
    inline void clear_GLOBTF_PDD()
    {
        GLOBTF &= ~(1u << 16u);
    }

    /**
     * Toggle GLOBTF's PDD bit.
     */
    inline void toggle_GLOBTF_PDD()
    {
        GLOBTF ^= 1u << 16u;
    }

    /**
     * Set GLOBTF's CDWC bit.
     */
    inline void set_GLOBTF_CDWC()
    {
        GLOBTF |= 1u << 15u;
    }

    /**
     * Clear GLOBTF's CDWC bit.
     */
    inline void clear_GLOBTF_CDWC()
    {
        GLOBTF &= ~(1u << 15u);
    }

    /**
     * Toggle GLOBTF's CDWC bit.
     */
    inline void toggle_GLOBTF_CDWC()
    {
        GLOBTF ^= 1u << 15u;
    }

    /**
     * Get GLOBTF's CDSEL field.
     */
    VADC_GLOBTF_CDSEL get_GLOBTF_CDSEL()
    {
        return VADC_GLOBTF_CDSEL((GLOBTF >> 9u) & 0b11u);
    }

    /**
     * Set GLOBTF's CDSEL field.
     */
    inline void set_GLOBTF_CDSEL(VADC_GLOBTF_CDSEL value)
    {
        uint32_t curr = GLOBTF;

        curr &= ~(0b11u << 9u);
        curr |= (std::to_underlying(value) & 0b11u) << 9u;

        GLOBTF = curr;
    }

    /**
     * Get GLOBTF's CDEN bit.
     */
    VADC_GLOBTF_CDEN get_GLOBTF_CDEN()
    {
        return VADC_GLOBTF_CDEN(GLOBTF & (1u << 8u));
    }

    /**
     * Set GLOBTF's CDEN bit.
     */
    inline void set_GLOBTF_CDEN()
    {
        GLOBTF |= 1u << 8u;
    }

    /**
     * Clear GLOBTF's CDEN bit.
     */
    inline void clear_GLOBTF_CDEN()
    {
        GLOBTF &= ~(1u << 8u);
    }

    /**
     * Toggle GLOBTF's CDEN bit.
     */
    inline void toggle_GLOBTF_CDEN()
    {
        GLOBTF ^= 1u << 8u;
    }

    /**
     * Get GLOBTF's CDGR field.
     */
    uint8_t get_GLOBTF_CDGR()
    {
        return (GLOBTF >> 4u) & 0b1111u;
    }

    /**
     * Set GLOBTF's CDGR field.
     */
    inline void set_GLOBTF_CDGR(uint8_t value)
    {
        uint32_t curr = GLOBTF;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        GLOBTF = curr;
    }

    /**
     * Get BRSSEL's CHSELG7 bit.
     */
    VADC_BRSSEL_CHSELG7 get_BRSSEL_CHSELG7(std::size_t index)
    {
        return VADC_BRSSEL_CHSELG7(BRSSEL[index] & (1u << 7u));
    }

    /**
     * Set BRSSEL's CHSELG7 bit.
     */
    inline void set_BRSSEL_CHSELG7()
    {
        BRSSEL |= 1u << 7u;
    }

    /**
     * Clear BRSSEL's CHSELG7 bit.
     */
    inline void clear_BRSSEL_CHSELG7()
    {
        BRSSEL &= ~(1u << 7u);
    }

    /**
     * Toggle BRSSEL's CHSELG7 bit.
     */
    inline void toggle_BRSSEL_CHSELG7()
    {
        BRSSEL ^= 1u << 7u;
    }

    /**
     * Get BRSSEL's CHSELG6 bit.
     */
    VADC_BRSSEL_CHSELG6 get_BRSSEL_CHSELG6(std::size_t index)
    {
        return VADC_BRSSEL_CHSELG6(BRSSEL[index] & (1u << 6u));
    }

    /**
     * Set BRSSEL's CHSELG6 bit.
     */
    inline void set_BRSSEL_CHSELG6()
    {
        BRSSEL |= 1u << 6u;
    }

    /**
     * Clear BRSSEL's CHSELG6 bit.
     */
    inline void clear_BRSSEL_CHSELG6()
    {
        BRSSEL &= ~(1u << 6u);
    }

    /**
     * Toggle BRSSEL's CHSELG6 bit.
     */
    inline void toggle_BRSSEL_CHSELG6()
    {
        BRSSEL ^= 1u << 6u;
    }

    /**
     * Get BRSSEL's CHSELG5 bit.
     */
    VADC_BRSSEL_CHSELG5 get_BRSSEL_CHSELG5(std::size_t index)
    {
        return VADC_BRSSEL_CHSELG5(BRSSEL[index] & (1u << 5u));
    }

    /**
     * Set BRSSEL's CHSELG5 bit.
     */
    inline void set_BRSSEL_CHSELG5()
    {
        BRSSEL |= 1u << 5u;
    }

    /**
     * Clear BRSSEL's CHSELG5 bit.
     */
    inline void clear_BRSSEL_CHSELG5()
    {
        BRSSEL &= ~(1u << 5u);
    }

    /**
     * Toggle BRSSEL's CHSELG5 bit.
     */
    inline void toggle_BRSSEL_CHSELG5()
    {
        BRSSEL ^= 1u << 5u;
    }

    /**
     * Get BRSSEL's CHSELG4 bit.
     */
    VADC_BRSSEL_CHSELG4 get_BRSSEL_CHSELG4(std::size_t index)
    {
        return VADC_BRSSEL_CHSELG4(BRSSEL[index] & (1u << 4u));
    }

    /**
     * Set BRSSEL's CHSELG4 bit.
     */
    inline void set_BRSSEL_CHSELG4()
    {
        BRSSEL |= 1u << 4u;
    }

    /**
     * Clear BRSSEL's CHSELG4 bit.
     */
    inline void clear_BRSSEL_CHSELG4()
    {
        BRSSEL &= ~(1u << 4u);
    }

    /**
     * Toggle BRSSEL's CHSELG4 bit.
     */
    inline void toggle_BRSSEL_CHSELG4()
    {
        BRSSEL ^= 1u << 4u;
    }

    /**
     * Get BRSSEL's CHSELG3 bit.
     */
    VADC_BRSSEL_CHSELG3 get_BRSSEL_CHSELG3(std::size_t index)
    {
        return VADC_BRSSEL_CHSELG3(BRSSEL[index] & (1u << 3u));
    }

    /**
     * Set BRSSEL's CHSELG3 bit.
     */
    inline void set_BRSSEL_CHSELG3()
    {
        BRSSEL |= 1u << 3u;
    }

    /**
     * Clear BRSSEL's CHSELG3 bit.
     */
    inline void clear_BRSSEL_CHSELG3()
    {
        BRSSEL &= ~(1u << 3u);
    }

    /**
     * Toggle BRSSEL's CHSELG3 bit.
     */
    inline void toggle_BRSSEL_CHSELG3()
    {
        BRSSEL ^= 1u << 3u;
    }

    /**
     * Get BRSSEL's CHSELG2 bit.
     */
    VADC_BRSSEL_CHSELG2 get_BRSSEL_CHSELG2(std::size_t index)
    {
        return VADC_BRSSEL_CHSELG2(BRSSEL[index] & (1u << 2u));
    }

    /**
     * Set BRSSEL's CHSELG2 bit.
     */
    inline void set_BRSSEL_CHSELG2()
    {
        BRSSEL |= 1u << 2u;
    }

    /**
     * Clear BRSSEL's CHSELG2 bit.
     */
    inline void clear_BRSSEL_CHSELG2()
    {
        BRSSEL &= ~(1u << 2u);
    }

    /**
     * Toggle BRSSEL's CHSELG2 bit.
     */
    inline void toggle_BRSSEL_CHSELG2()
    {
        BRSSEL ^= 1u << 2u;
    }

    /**
     * Get BRSSEL's CHSELG1 bit.
     */
    VADC_BRSSEL_CHSELG1 get_BRSSEL_CHSELG1(std::size_t index)
    {
        return VADC_BRSSEL_CHSELG1(BRSSEL[index] & (1u << 1u));
    }

    /**
     * Set BRSSEL's CHSELG1 bit.
     */
    inline void set_BRSSEL_CHSELG1()
    {
        BRSSEL |= 1u << 1u;
    }

    /**
     * Clear BRSSEL's CHSELG1 bit.
     */
    inline void clear_BRSSEL_CHSELG1()
    {
        BRSSEL &= ~(1u << 1u);
    }

    /**
     * Toggle BRSSEL's CHSELG1 bit.
     */
    inline void toggle_BRSSEL_CHSELG1()
    {
        BRSSEL ^= 1u << 1u;
    }

    /**
     * Get BRSSEL's CHSELG0 bit.
     */
    VADC_BRSSEL_CHSELG0 get_BRSSEL_CHSELG0(std::size_t index)
    {
        return VADC_BRSSEL_CHSELG0(BRSSEL[index] & (1u << 0u));
    }

    /**
     * Set BRSSEL's CHSELG0 bit.
     */
    inline void set_BRSSEL_CHSELG0()
    {
        BRSSEL |= 1u << 0u;
    }

    /**
     * Clear BRSSEL's CHSELG0 bit.
     */
    inline void clear_BRSSEL_CHSELG0()
    {
        BRSSEL &= ~(1u << 0u);
    }

    /**
     * Toggle BRSSEL's CHSELG0 bit.
     */
    inline void toggle_BRSSEL_CHSELG0()
    {
        BRSSEL ^= 1u << 0u;
    }

    /**
     * Get BRSPND's CHPNDG7 bit.
     */
    VADC_BRSPND_CHPNDG7 get_BRSPND_CHPNDG7(std::size_t index)
    {
        return VADC_BRSPND_CHPNDG7(BRSPND[index] & (1u << 7u));
    }

    /**
     * Set BRSPND's CHPNDG7 bit.
     */
    inline void set_BRSPND_CHPNDG7()
    {
        BRSPND |= 1u << 7u;
    }

    /**
     * Clear BRSPND's CHPNDG7 bit.
     */
    inline void clear_BRSPND_CHPNDG7()
    {
        BRSPND &= ~(1u << 7u);
    }

    /**
     * Toggle BRSPND's CHPNDG7 bit.
     */
    inline void toggle_BRSPND_CHPNDG7()
    {
        BRSPND ^= 1u << 7u;
    }

    /**
     * Get BRSPND's CHPNDG6 bit.
     */
    VADC_BRSPND_CHPNDG6 get_BRSPND_CHPNDG6(std::size_t index)
    {
        return VADC_BRSPND_CHPNDG6(BRSPND[index] & (1u << 6u));
    }

    /**
     * Set BRSPND's CHPNDG6 bit.
     */
    inline void set_BRSPND_CHPNDG6()
    {
        BRSPND |= 1u << 6u;
    }

    /**
     * Clear BRSPND's CHPNDG6 bit.
     */
    inline void clear_BRSPND_CHPNDG6()
    {
        BRSPND &= ~(1u << 6u);
    }

    /**
     * Toggle BRSPND's CHPNDG6 bit.
     */
    inline void toggle_BRSPND_CHPNDG6()
    {
        BRSPND ^= 1u << 6u;
    }

    /**
     * Get BRSPND's CHPNDG5 bit.
     */
    VADC_BRSPND_CHPNDG5 get_BRSPND_CHPNDG5(std::size_t index)
    {
        return VADC_BRSPND_CHPNDG5(BRSPND[index] & (1u << 5u));
    }

    /**
     * Set BRSPND's CHPNDG5 bit.
     */
    inline void set_BRSPND_CHPNDG5()
    {
        BRSPND |= 1u << 5u;
    }

    /**
     * Clear BRSPND's CHPNDG5 bit.
     */
    inline void clear_BRSPND_CHPNDG5()
    {
        BRSPND &= ~(1u << 5u);
    }

    /**
     * Toggle BRSPND's CHPNDG5 bit.
     */
    inline void toggle_BRSPND_CHPNDG5()
    {
        BRSPND ^= 1u << 5u;
    }

    /**
     * Get BRSPND's CHPNDG4 bit.
     */
    VADC_BRSPND_CHPNDG4 get_BRSPND_CHPNDG4(std::size_t index)
    {
        return VADC_BRSPND_CHPNDG4(BRSPND[index] & (1u << 4u));
    }

    /**
     * Set BRSPND's CHPNDG4 bit.
     */
    inline void set_BRSPND_CHPNDG4()
    {
        BRSPND |= 1u << 4u;
    }

    /**
     * Clear BRSPND's CHPNDG4 bit.
     */
    inline void clear_BRSPND_CHPNDG4()
    {
        BRSPND &= ~(1u << 4u);
    }

    /**
     * Toggle BRSPND's CHPNDG4 bit.
     */
    inline void toggle_BRSPND_CHPNDG4()
    {
        BRSPND ^= 1u << 4u;
    }

    /**
     * Get BRSPND's CHPNDG3 bit.
     */
    VADC_BRSPND_CHPNDG3 get_BRSPND_CHPNDG3(std::size_t index)
    {
        return VADC_BRSPND_CHPNDG3(BRSPND[index] & (1u << 3u));
    }

    /**
     * Set BRSPND's CHPNDG3 bit.
     */
    inline void set_BRSPND_CHPNDG3()
    {
        BRSPND |= 1u << 3u;
    }

    /**
     * Clear BRSPND's CHPNDG3 bit.
     */
    inline void clear_BRSPND_CHPNDG3()
    {
        BRSPND &= ~(1u << 3u);
    }

    /**
     * Toggle BRSPND's CHPNDG3 bit.
     */
    inline void toggle_BRSPND_CHPNDG3()
    {
        BRSPND ^= 1u << 3u;
    }

    /**
     * Get BRSPND's CHPNDG2 bit.
     */
    VADC_BRSPND_CHPNDG2 get_BRSPND_CHPNDG2(std::size_t index)
    {
        return VADC_BRSPND_CHPNDG2(BRSPND[index] & (1u << 2u));
    }

    /**
     * Set BRSPND's CHPNDG2 bit.
     */
    inline void set_BRSPND_CHPNDG2()
    {
        BRSPND |= 1u << 2u;
    }

    /**
     * Clear BRSPND's CHPNDG2 bit.
     */
    inline void clear_BRSPND_CHPNDG2()
    {
        BRSPND &= ~(1u << 2u);
    }

    /**
     * Toggle BRSPND's CHPNDG2 bit.
     */
    inline void toggle_BRSPND_CHPNDG2()
    {
        BRSPND ^= 1u << 2u;
    }

    /**
     * Get BRSPND's CHPNDG1 bit.
     */
    VADC_BRSPND_CHPNDG1 get_BRSPND_CHPNDG1(std::size_t index)
    {
        return VADC_BRSPND_CHPNDG1(BRSPND[index] & (1u << 1u));
    }

    /**
     * Set BRSPND's CHPNDG1 bit.
     */
    inline void set_BRSPND_CHPNDG1()
    {
        BRSPND |= 1u << 1u;
    }

    /**
     * Clear BRSPND's CHPNDG1 bit.
     */
    inline void clear_BRSPND_CHPNDG1()
    {
        BRSPND &= ~(1u << 1u);
    }

    /**
     * Toggle BRSPND's CHPNDG1 bit.
     */
    inline void toggle_BRSPND_CHPNDG1()
    {
        BRSPND ^= 1u << 1u;
    }

    /**
     * Get BRSPND's CHPNDG0 bit.
     */
    VADC_BRSPND_CHPNDG0 get_BRSPND_CHPNDG0(std::size_t index)
    {
        return VADC_BRSPND_CHPNDG0(BRSPND[index] & (1u << 0u));
    }

    /**
     * Set BRSPND's CHPNDG0 bit.
     */
    inline void set_BRSPND_CHPNDG0()
    {
        BRSPND |= 1u << 0u;
    }

    /**
     * Clear BRSPND's CHPNDG0 bit.
     */
    inline void clear_BRSPND_CHPNDG0()
    {
        BRSPND &= ~(1u << 0u);
    }

    /**
     * Toggle BRSPND's CHPNDG0 bit.
     */
    inline void toggle_BRSPND_CHPNDG0()
    {
        BRSPND ^= 1u << 0u;
    }

    /**
     * Set BRSCTRL's GTWC bit.
     */
    inline void set_BRSCTRL_GTWC()
    {
        BRSCTRL |= 1u << 23u;
    }

    /**
     * Clear BRSCTRL's GTWC bit.
     */
    inline void clear_BRSCTRL_GTWC()
    {
        BRSCTRL &= ~(1u << 23u);
    }

    /**
     * Toggle BRSCTRL's GTWC bit.
     */
    inline void toggle_BRSCTRL_GTWC()
    {
        BRSCTRL ^= 1u << 23u;
    }

    /**
     * Get BRSCTRL's GTLVL bit.
     */
    bool get_BRSCTRL_GTLVL()
    {
        return BRSCTRL & (1u << 20u);
    }

    /**
     * Get BRSCTRL's GTSEL field.
     */
    uint8_t get_BRSCTRL_GTSEL()
    {
        return (BRSCTRL >> 16u) & 0b1111u;
    }

    /**
     * Set BRSCTRL's GTSEL field.
     */
    inline void set_BRSCTRL_GTSEL(uint8_t value)
    {
        uint32_t curr = BRSCTRL;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        BRSCTRL = curr;
    }

    /**
     * Set BRSCTRL's XTWC bit.
     */
    inline void set_BRSCTRL_XTWC()
    {
        BRSCTRL |= 1u << 15u;
    }

    /**
     * Clear BRSCTRL's XTWC bit.
     */
    inline void clear_BRSCTRL_XTWC()
    {
        BRSCTRL &= ~(1u << 15u);
    }

    /**
     * Toggle BRSCTRL's XTWC bit.
     */
    inline void toggle_BRSCTRL_XTWC()
    {
        BRSCTRL ^= 1u << 15u;
    }

    /**
     * Get BRSCTRL's XTMODE field.
     */
    VADC_BRSCTRL_XTMODE get_BRSCTRL_XTMODE()
    {
        return VADC_BRSCTRL_XTMODE((BRSCTRL >> 13u) & 0b11u);
    }

    /**
     * Set BRSCTRL's XTMODE field.
     */
    inline void set_BRSCTRL_XTMODE(VADC_BRSCTRL_XTMODE value)
    {
        uint32_t curr = BRSCTRL;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        BRSCTRL = curr;
    }

    /**
     * Get BRSCTRL's XTLVL bit.
     */
    bool get_BRSCTRL_XTLVL()
    {
        return BRSCTRL & (1u << 12u);
    }

    /**
     * Get BRSCTRL's XTSEL field.
     */
    uint8_t get_BRSCTRL_XTSEL()
    {
        return (BRSCTRL >> 8u) & 0b1111u;
    }

    /**
     * Set BRSCTRL's XTSEL field.
     */
    inline void set_BRSCTRL_XTSEL(uint8_t value)
    {
        uint32_t curr = BRSCTRL;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        BRSCTRL = curr;
    }

    /**
     * Get BRSCTRL's SRCRESREG field.
     */
    VADC_BRSCTRL_SRCRESREG get_BRSCTRL_SRCRESREG()
    {
        return VADC_BRSCTRL_SRCRESREG((BRSCTRL >> 0u) & 0b1111u);
    }

    /**
     * Set BRSCTRL's SRCRESREG field.
     */
    inline void set_BRSCTRL_SRCRESREG(VADC_BRSCTRL_SRCRESREG value)
    {
        uint32_t curr = BRSCTRL;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        BRSCTRL = curr;
    }

    /**
     * Get BRSMR's RPTDIS bit.
     */
    VADC_BRSMR_RPTDIS get_BRSMR_RPTDIS()
    {
        return VADC_BRSMR_RPTDIS(BRSMR & (1u << 16u));
    }

    /**
     * Set BRSMR's RPTDIS bit.
     */
    inline void set_BRSMR_RPTDIS()
    {
        BRSMR |= 1u << 16u;
    }

    /**
     * Clear BRSMR's RPTDIS bit.
     */
    inline void clear_BRSMR_RPTDIS()
    {
        BRSMR &= ~(1u << 16u);
    }

    /**
     * Toggle BRSMR's RPTDIS bit.
     */
    inline void toggle_BRSMR_RPTDIS()
    {
        BRSMR ^= 1u << 16u;
    }

    /**
     * Set BRSMR's LDEV bit.
     */
    inline void set_BRSMR_LDEV()
    {
        BRSMR |= 1u << 9u;
    }

    /**
     * Clear BRSMR's LDEV bit.
     */
    inline void clear_BRSMR_LDEV()
    {
        BRSMR &= ~(1u << 9u);
    }

    /**
     * Toggle BRSMR's LDEV bit.
     */
    inline void toggle_BRSMR_LDEV()
    {
        BRSMR ^= 1u << 9u;
    }

    /**
     * Set BRSMR's CLRPND bit.
     */
    inline void set_BRSMR_CLRPND()
    {
        BRSMR |= 1u << 8u;
    }

    /**
     * Clear BRSMR's CLRPND bit.
     */
    inline void clear_BRSMR_CLRPND()
    {
        BRSMR &= ~(1u << 8u);
    }

    /**
     * Toggle BRSMR's CLRPND bit.
     */
    inline void toggle_BRSMR_CLRPND()
    {
        BRSMR ^= 1u << 8u;
    }

    /**
     * Get BRSMR's REQGT bit.
     */
    VADC_BRSMR_REQGT get_BRSMR_REQGT()
    {
        return VADC_BRSMR_REQGT(BRSMR & (1u << 7u));
    }

    /**
     * Get BRSMR's LDM bit.
     */
    VADC_BRSMR_LDM get_BRSMR_LDM()
    {
        return VADC_BRSMR_LDM(BRSMR & (1u << 5u));
    }

    /**
     * Set BRSMR's LDM bit.
     */
    inline void set_BRSMR_LDM()
    {
        BRSMR |= 1u << 5u;
    }

    /**
     * Clear BRSMR's LDM bit.
     */
    inline void clear_BRSMR_LDM()
    {
        BRSMR &= ~(1u << 5u);
    }

    /**
     * Toggle BRSMR's LDM bit.
     */
    inline void toggle_BRSMR_LDM()
    {
        BRSMR ^= 1u << 5u;
    }

    /**
     * Get BRSMR's SCAN bit.
     */
    VADC_BRSMR_SCAN get_BRSMR_SCAN()
    {
        return VADC_BRSMR_SCAN(BRSMR & (1u << 4u));
    }

    /**
     * Set BRSMR's SCAN bit.
     */
    inline void set_BRSMR_SCAN()
    {
        BRSMR |= 1u << 4u;
    }

    /**
     * Clear BRSMR's SCAN bit.
     */
    inline void clear_BRSMR_SCAN()
    {
        BRSMR &= ~(1u << 4u);
    }

    /**
     * Toggle BRSMR's SCAN bit.
     */
    inline void toggle_BRSMR_SCAN()
    {
        BRSMR ^= 1u << 4u;
    }

    /**
     * Get BRSMR's ENSI bit.
     */
    VADC_BRSMR_ENSI get_BRSMR_ENSI()
    {
        return VADC_BRSMR_ENSI(BRSMR & (1u << 3u));
    }

    /**
     * Set BRSMR's ENSI bit.
     */
    inline void set_BRSMR_ENSI()
    {
        BRSMR |= 1u << 3u;
    }

    /**
     * Clear BRSMR's ENSI bit.
     */
    inline void clear_BRSMR_ENSI()
    {
        BRSMR &= ~(1u << 3u);
    }

    /**
     * Toggle BRSMR's ENSI bit.
     */
    inline void toggle_BRSMR_ENSI()
    {
        BRSMR ^= 1u << 3u;
    }

    /**
     * Get BRSMR's ENTR bit.
     */
    VADC_BRSMR_ENTR get_BRSMR_ENTR()
    {
        return VADC_BRSMR_ENTR(BRSMR & (1u << 2u));
    }

    /**
     * Set BRSMR's ENTR bit.
     */
    inline void set_BRSMR_ENTR()
    {
        BRSMR |= 1u << 2u;
    }

    /**
     * Clear BRSMR's ENTR bit.
     */
    inline void clear_BRSMR_ENTR()
    {
        BRSMR &= ~(1u << 2u);
    }

    /**
     * Toggle BRSMR's ENTR bit.
     */
    inline void toggle_BRSMR_ENTR()
    {
        BRSMR ^= 1u << 2u;
    }

    /**
     * Get BRSMR's ENGT field.
     */
    VADC_BRSMR_ENGT get_BRSMR_ENGT()
    {
        return VADC_BRSMR_ENGT((BRSMR >> 0u) & 0b11u);
    }

    /**
     * Set BRSMR's ENGT field.
     */
    inline void set_BRSMR_ENGT(VADC_BRSMR_ENGT value)
    {
        uint32_t curr = BRSMR;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BRSMR = curr;
    }

    /**
     * Get GLOBRCR's SRGEN bit.
     */
    VADC_GLOBRCR_SRGEN get_GLOBRCR_SRGEN()
    {
        return VADC_GLOBRCR_SRGEN(GLOBRCR & (1u << 31u));
    }

    /**
     * Set GLOBRCR's SRGEN bit.
     */
    inline void set_GLOBRCR_SRGEN()
    {
        GLOBRCR |= 1u << 31u;
    }

    /**
     * Clear GLOBRCR's SRGEN bit.
     */
    inline void clear_GLOBRCR_SRGEN()
    {
        GLOBRCR &= ~(1u << 31u);
    }

    /**
     * Toggle GLOBRCR's SRGEN bit.
     */
    inline void toggle_GLOBRCR_SRGEN()
    {
        GLOBRCR ^= 1u << 31u;
    }

    /**
     * Get GLOBRCR's WFR bit.
     */
    VADC_GLOBRCR_WFR get_GLOBRCR_WFR()
    {
        return VADC_GLOBRCR_WFR(GLOBRCR & (1u << 24u));
    }

    /**
     * Set GLOBRCR's WFR bit.
     */
    inline void set_GLOBRCR_WFR()
    {
        GLOBRCR |= 1u << 24u;
    }

    /**
     * Clear GLOBRCR's WFR bit.
     */
    inline void clear_GLOBRCR_WFR()
    {
        GLOBRCR &= ~(1u << 24u);
    }

    /**
     * Toggle GLOBRCR's WFR bit.
     */
    inline void toggle_GLOBRCR_WFR()
    {
        GLOBRCR ^= 1u << 24u;
    }

    /**
     * Get GLOBRCR's DRCTR field.
     */
    VADC_GLOBRCR_DRCTR get_GLOBRCR_DRCTR()
    {
        return VADC_GLOBRCR_DRCTR((GLOBRCR >> 16u) & 0b1111u);
    }

    /**
     * Set GLOBRCR's DRCTR field.
     */
    inline void set_GLOBRCR_DRCTR(VADC_GLOBRCR_DRCTR value)
    {
        uint32_t curr = GLOBRCR;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        GLOBRCR = curr;
    }

    /**
     * Get GLOBRES's VF bit.
     */
    VADC_GLOBRES_VF get_GLOBRES_VF()
    {
        return VADC_GLOBRES_VF(GLOBRES & (1u << 31u));
    }

    /**
     * Set GLOBRES's VF bit.
     */
    inline void set_GLOBRES_VF()
    {
        GLOBRES |= 1u << 31u;
    }

    /**
     * Clear GLOBRES's VF bit.
     */
    inline void clear_GLOBRES_VF()
    {
        GLOBRES &= ~(1u << 31u);
    }

    /**
     * Toggle GLOBRES's VF bit.
     */
    inline void toggle_GLOBRES_VF()
    {
        GLOBRES ^= 1u << 31u;
    }

    /**
     * Get GLOBRES's FCR bit.
     */
    VADC_GLOBRES_FCR get_GLOBRES_FCR()
    {
        return VADC_GLOBRES_FCR(GLOBRES & (1u << 30u));
    }

    /**
     * Get GLOBRES's CRS field.
     */
    uint8_t get_GLOBRES_CRS()
    {
        return (GLOBRES >> 28u) & 0b11u;
    }

    /**
     * Get GLOBRES's EMUX field.
     */
    uint8_t get_GLOBRES_EMUX()
    {
        return (GLOBRES >> 25u) & 0b111u;
    }

    /**
     * Get GLOBRES's CHNR field.
     */
    uint8_t get_GLOBRES_CHNR()
    {
        return (GLOBRES >> 20u) & 0b11111u;
    }

    /**
     * Get GLOBRES's GNR field.
     */
    uint8_t get_GLOBRES_GNR()
    {
        return (GLOBRES >> 16u) & 0b1111u;
    }

    /**
     * Get GLOBRES's RESULT field.
     */
    uint16_t get_GLOBRES_RESULT()
    {
        return (GLOBRES >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GLOBRES's RESULT field.
     */
    inline void set_GLOBRES_RESULT(uint16_t value)
    {
        uint32_t curr = GLOBRES;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GLOBRES = curr;
    }

    /**
     * Get GLOBRESD's VF bit.
     */
    VADC_GLOBRESD_VF get_GLOBRESD_VF()
    {
        return VADC_GLOBRESD_VF(GLOBRESD & (1u << 31u));
    }

    /**
     * Set GLOBRESD's VF bit.
     */
    inline void set_GLOBRESD_VF()
    {
        GLOBRESD |= 1u << 31u;
    }

    /**
     * Clear GLOBRESD's VF bit.
     */
    inline void clear_GLOBRESD_VF()
    {
        GLOBRESD &= ~(1u << 31u);
    }

    /**
     * Toggle GLOBRESD's VF bit.
     */
    inline void toggle_GLOBRESD_VF()
    {
        GLOBRESD ^= 1u << 31u;
    }

    /**
     * Get GLOBRESD's FCR bit.
     */
    VADC_GLOBRESD_FCR get_GLOBRESD_FCR()
    {
        return VADC_GLOBRESD_FCR(GLOBRESD & (1u << 30u));
    }

    /**
     * Get GLOBRESD's CRS field.
     */
    uint8_t get_GLOBRESD_CRS()
    {
        return (GLOBRESD >> 28u) & 0b11u;
    }

    /**
     * Get GLOBRESD's EMUX field.
     */
    uint8_t get_GLOBRESD_EMUX()
    {
        return (GLOBRESD >> 25u) & 0b111u;
    }

    /**
     * Get GLOBRESD's CHNR field.
     */
    uint8_t get_GLOBRESD_CHNR()
    {
        return (GLOBRESD >> 20u) & 0b11111u;
    }

    /**
     * Get GLOBRESD's GNR field.
     */
    uint8_t get_GLOBRESD_GNR()
    {
        return (GLOBRESD >> 16u) & 0b1111u;
    }

    /**
     * Get GLOBRESD's RESULT field.
     */
    uint16_t get_GLOBRESD_RESULT()
    {
        return (GLOBRESD >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set GLOBRESD's RESULT field.
     */
    inline void set_GLOBRESD_RESULT(uint16_t value)
    {
        uint32_t curr = GLOBRESD;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        GLOBRESD = curr;
    }

    /**
     * Get EMUXSEL's EMUXGRP1 field.
     */
    uint8_t get_EMUXSEL_EMUXGRP1()
    {
        return (EMUXSEL >> 4u) & 0b1111u;
    }

    /**
     * Set EMUXSEL's EMUXGRP1 field.
     */
    inline void set_EMUXSEL_EMUXGRP1(uint8_t value)
    {
        uint32_t curr = EMUXSEL;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        EMUXSEL = curr;
    }

    /**
     * Get EMUXSEL's EMUXGRP0 field.
     */
    uint8_t get_EMUXSEL_EMUXGRP0()
    {
        return (EMUXSEL >> 0u) & 0b1111u;
    }

    /**
     * Set EMUXSEL's EMUXGRP0 field.
     */
    inline void set_EMUXSEL_EMUXGRP0(uint8_t value)
    {
        uint32_t curr = EMUXSEL;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        EMUXSEL = curr;
    }
};

static_assert(sizeof(vadc) == vadc::size);

static volatile vadc *const VADC = reinterpret_cast<vadc *>(0x40004000);

}; // namespace XMC4700
