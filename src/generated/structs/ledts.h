/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include "../enums/LEDTS_EVFR_CTFF.h"
#include "../enums/LEDTS_EVFR_CTPF.h"
#include "../enums/LEDTS_EVFR_CTSF.h"
#include "../enums/LEDTS_EVFR_TSCTROVF.h"
#include "../enums/LEDTS_FNCTL_ACCCNT.h"
#include "../enums/LEDTS_FNCTL_COLLEV.h"
#include "../enums/LEDTS_FNCTL_EPULL.h"
#include "../enums/LEDTS_FNCTL_NR_LEDCOL.h"
#include "../enums/LEDTS_FNCTL_NR_TSIN.h"
#include "../enums/LEDTS_FNCTL_PADT.h"
#include "../enums/LEDTS_FNCTL_PADTSW.h"
#include "../enums/LEDTS_FNCTL_TSCCMP.h"
#include "../enums/LEDTS_FNCTL_TSCTRR.h"
#include "../enums/LEDTS_FNCTL_TSCTRSAT.h"
#include "../enums/LEDTS_FNCTL_TSOEXT.h"
#include "../enums/LEDTS_GLOBCTL_CMTR.h"
#include "../enums/LEDTS_GLOBCTL_ENSYNC.h"
#include "../enums/LEDTS_GLOBCTL_FENVAL.h"
#include "../enums/LEDTS_GLOBCTL_ITF_EN.h"
#include "../enums/LEDTS_GLOBCTL_ITP_EN.h"
#include "../enums/LEDTS_GLOBCTL_ITS_EN.h"
#include "../enums/LEDTS_GLOBCTL_MASKVAL.h"
#include "../enums/LEDTS_GLOBCTL_SUSCFG.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * LED and Touch Sense Unit 0
 */
struct [[gnu::packed]] ledts
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< ledts's identifier. */
    static constexpr std::size_t size = 44; /*!< ledts's size in bytes. */

    /* Fields. */
    const uint32_t ID = {}; /*!< (read-only) Module Identification Register */
    uint32_t GLOBCTL;       /*!< (read-write) Global Control Register */
    uint32_t FNCTL;         /*!< (read-write) Function Control Register */
    uint32_t EVFR;          /*!< (read-write) Event Flag Register */
    uint32_t TSVAL;         /*!< (read-write) Touch-sense TS-Counter Value */
    uint32_t LINE0;         /*!< (read-write) Line Pattern Register 0 */
    uint32_t LINE1;         /*!< (read-write) Line Pattern Register 1 */
    uint32_t LDCMP0;        /*!< (read-write) LED Compare Register 0 */
    uint32_t LDCMP1;        /*!< (read-write) LED Compare Register 1 */
    uint32_t TSCMP0;        /*!< (read-write) Touch-sense Compare Register 0 */
    uint32_t TSCMP1;        /*!< (read-write) Touch-sense Compare Register 1 */

    /* Methods. */

    /**
     * Get ID's MOD_NUMBER field.
     */
    uint16_t get_ID_MOD_NUMBER()
    {
        return (ID >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get ID's MOD_TYPE field.
     */
    uint8_t get_ID_MOD_TYPE()
    {
        return (ID >> 8u) & 0b11111111u;
    }

    /**
     * Get ID's MOD_REV field.
     */
    uint8_t get_ID_MOD_REV()
    {
        return (ID >> 0u) & 0b11111111u;
    }

    /**
     * Get GLOBCTL's CLK_PS field.
     */
    uint16_t get_GLOBCTL_CLK_PS()
    {
        return (GLOBCTL >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set GLOBCTL's CLK_PS field.
     */
    inline void set_GLOBCTL_CLK_PS(uint16_t value)
    {
        uint32_t curr = GLOBCTL;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        GLOBCTL = curr;
    }

    /**
     * Get GLOBCTL's ITP_EN bit.
     */
    LEDTS_GLOBCTL_ITP_EN get_GLOBCTL_ITP_EN()
    {
        return LEDTS_GLOBCTL_ITP_EN(GLOBCTL & (1u << 15u));
    }

    /**
     * Set GLOBCTL's ITP_EN bit.
     */
    inline void set_GLOBCTL_ITP_EN()
    {
        GLOBCTL |= 1u << 15u;
    }

    /**
     * Clear GLOBCTL's ITP_EN bit.
     */
    inline void clear_GLOBCTL_ITP_EN()
    {
        GLOBCTL &= ~(1u << 15u);
    }

    /**
     * Toggle GLOBCTL's ITP_EN bit.
     */
    inline void toggle_GLOBCTL_ITP_EN()
    {
        GLOBCTL ^= 1u << 15u;
    }

    /**
     * Get GLOBCTL's ITF_EN bit.
     */
    LEDTS_GLOBCTL_ITF_EN get_GLOBCTL_ITF_EN()
    {
        return LEDTS_GLOBCTL_ITF_EN(GLOBCTL & (1u << 14u));
    }

    /**
     * Set GLOBCTL's ITF_EN bit.
     */
    inline void set_GLOBCTL_ITF_EN()
    {
        GLOBCTL |= 1u << 14u;
    }

    /**
     * Clear GLOBCTL's ITF_EN bit.
     */
    inline void clear_GLOBCTL_ITF_EN()
    {
        GLOBCTL &= ~(1u << 14u);
    }

    /**
     * Toggle GLOBCTL's ITF_EN bit.
     */
    inline void toggle_GLOBCTL_ITF_EN()
    {
        GLOBCTL ^= 1u << 14u;
    }

    /**
     * Get GLOBCTL's ITS_EN bit.
     */
    LEDTS_GLOBCTL_ITS_EN get_GLOBCTL_ITS_EN()
    {
        return LEDTS_GLOBCTL_ITS_EN(GLOBCTL & (1u << 13u));
    }

    /**
     * Set GLOBCTL's ITS_EN bit.
     */
    inline void set_GLOBCTL_ITS_EN()
    {
        GLOBCTL |= 1u << 13u;
    }

    /**
     * Clear GLOBCTL's ITS_EN bit.
     */
    inline void clear_GLOBCTL_ITS_EN()
    {
        GLOBCTL &= ~(1u << 13u);
    }

    /**
     * Toggle GLOBCTL's ITS_EN bit.
     */
    inline void toggle_GLOBCTL_ITS_EN()
    {
        GLOBCTL ^= 1u << 13u;
    }

    /**
     * Get GLOBCTL's FENVAL bit.
     */
    LEDTS_GLOBCTL_FENVAL get_GLOBCTL_FENVAL()
    {
        return LEDTS_GLOBCTL_FENVAL(GLOBCTL & (1u << 12u));
    }

    /**
     * Set GLOBCTL's FENVAL bit.
     */
    inline void set_GLOBCTL_FENVAL()
    {
        GLOBCTL |= 1u << 12u;
    }

    /**
     * Clear GLOBCTL's FENVAL bit.
     */
    inline void clear_GLOBCTL_FENVAL()
    {
        GLOBCTL &= ~(1u << 12u);
    }

    /**
     * Toggle GLOBCTL's FENVAL bit.
     */
    inline void toggle_GLOBCTL_FENVAL()
    {
        GLOBCTL ^= 1u << 12u;
    }

    /**
     * Get GLOBCTL's MASKVAL field.
     */
    LEDTS_GLOBCTL_MASKVAL get_GLOBCTL_MASKVAL()
    {
        return LEDTS_GLOBCTL_MASKVAL((GLOBCTL >> 9u) & 0b111u);
    }

    /**
     * Set GLOBCTL's MASKVAL field.
     */
    inline void set_GLOBCTL_MASKVAL(LEDTS_GLOBCTL_MASKVAL value)
    {
        uint32_t curr = GLOBCTL;

        curr &= ~(0b111u << 9u);
        curr |= (std::to_underlying(value) & 0b111u) << 9u;

        GLOBCTL = curr;
    }

    /**
     * Get GLOBCTL's SUSCFG bit.
     */
    LEDTS_GLOBCTL_SUSCFG get_GLOBCTL_SUSCFG()
    {
        return LEDTS_GLOBCTL_SUSCFG(GLOBCTL & (1u << 8u));
    }

    /**
     * Set GLOBCTL's SUSCFG bit.
     */
    inline void set_GLOBCTL_SUSCFG()
    {
        GLOBCTL |= 1u << 8u;
    }

    /**
     * Clear GLOBCTL's SUSCFG bit.
     */
    inline void clear_GLOBCTL_SUSCFG()
    {
        GLOBCTL &= ~(1u << 8u);
    }

    /**
     * Toggle GLOBCTL's SUSCFG bit.
     */
    inline void toggle_GLOBCTL_SUSCFG()
    {
        GLOBCTL ^= 1u << 8u;
    }

    /**
     * Get GLOBCTL's ENSYNC bit.
     */
    LEDTS_GLOBCTL_ENSYNC get_GLOBCTL_ENSYNC()
    {
        return LEDTS_GLOBCTL_ENSYNC(GLOBCTL & (1u << 3u));
    }

    /**
     * Set GLOBCTL's ENSYNC bit.
     */
    inline void set_GLOBCTL_ENSYNC()
    {
        GLOBCTL |= 1u << 3u;
    }

    /**
     * Clear GLOBCTL's ENSYNC bit.
     */
    inline void clear_GLOBCTL_ENSYNC()
    {
        GLOBCTL &= ~(1u << 3u);
    }

    /**
     * Toggle GLOBCTL's ENSYNC bit.
     */
    inline void toggle_GLOBCTL_ENSYNC()
    {
        GLOBCTL ^= 1u << 3u;
    }

    /**
     * Get GLOBCTL's CMTR bit.
     */
    LEDTS_GLOBCTL_CMTR get_GLOBCTL_CMTR()
    {
        return LEDTS_GLOBCTL_CMTR(GLOBCTL & (1u << 2u));
    }

    /**
     * Set GLOBCTL's CMTR bit.
     */
    inline void set_GLOBCTL_CMTR()
    {
        GLOBCTL |= 1u << 2u;
    }

    /**
     * Clear GLOBCTL's CMTR bit.
     */
    inline void clear_GLOBCTL_CMTR()
    {
        GLOBCTL &= ~(1u << 2u);
    }

    /**
     * Toggle GLOBCTL's CMTR bit.
     */
    inline void toggle_GLOBCTL_CMTR()
    {
        GLOBCTL ^= 1u << 2u;
    }

    /**
     * Get GLOBCTL's LD_EN bit.
     */
    bool get_GLOBCTL_LD_EN()
    {
        return GLOBCTL & (1u << 1u);
    }

    /**
     * Set GLOBCTL's LD_EN bit.
     */
    inline void set_GLOBCTL_LD_EN()
    {
        GLOBCTL |= 1u << 1u;
    }

    /**
     * Clear GLOBCTL's LD_EN bit.
     */
    inline void clear_GLOBCTL_LD_EN()
    {
        GLOBCTL &= ~(1u << 1u);
    }

    /**
     * Toggle GLOBCTL's LD_EN bit.
     */
    inline void toggle_GLOBCTL_LD_EN()
    {
        GLOBCTL ^= 1u << 1u;
    }

    /**
     * Get GLOBCTL's TS_EN bit.
     */
    bool get_GLOBCTL_TS_EN()
    {
        return GLOBCTL & (1u << 0u);
    }

    /**
     * Set GLOBCTL's TS_EN bit.
     */
    inline void set_GLOBCTL_TS_EN()
    {
        GLOBCTL |= 1u << 0u;
    }

    /**
     * Clear GLOBCTL's TS_EN bit.
     */
    inline void clear_GLOBCTL_TS_EN()
    {
        GLOBCTL &= ~(1u << 0u);
    }

    /**
     * Toggle GLOBCTL's TS_EN bit.
     */
    inline void toggle_GLOBCTL_TS_EN()
    {
        GLOBCTL ^= 1u << 0u;
    }

    /**
     * Get FNCTL's NR_LEDCOL field.
     */
    LEDTS_FNCTL_NR_LEDCOL get_FNCTL_NR_LEDCOL()
    {
        return LEDTS_FNCTL_NR_LEDCOL((FNCTL >> 29u) & 0b111u);
    }

    /**
     * Set FNCTL's NR_LEDCOL field.
     */
    inline void set_FNCTL_NR_LEDCOL(LEDTS_FNCTL_NR_LEDCOL value)
    {
        uint32_t curr = FNCTL;

        curr &= ~(0b111u << 29u);
        curr |= (std::to_underlying(value) & 0b111u) << 29u;

        FNCTL = curr;
    }

    /**
     * Get FNCTL's COLLEV bit.
     */
    LEDTS_FNCTL_COLLEV get_FNCTL_COLLEV()
    {
        return LEDTS_FNCTL_COLLEV(FNCTL & (1u << 28u));
    }

    /**
     * Set FNCTL's COLLEV bit.
     */
    inline void set_FNCTL_COLLEV()
    {
        FNCTL |= 1u << 28u;
    }

    /**
     * Clear FNCTL's COLLEV bit.
     */
    inline void clear_FNCTL_COLLEV()
    {
        FNCTL &= ~(1u << 28u);
    }

    /**
     * Toggle FNCTL's COLLEV bit.
     */
    inline void toggle_FNCTL_COLLEV()
    {
        FNCTL ^= 1u << 28u;
    }

    /**
     * Get FNCTL's NR_TSIN field.
     */
    LEDTS_FNCTL_NR_TSIN get_FNCTL_NR_TSIN()
    {
        return LEDTS_FNCTL_NR_TSIN((FNCTL >> 25u) & 0b111u);
    }

    /**
     * Set FNCTL's NR_TSIN field.
     */
    inline void set_FNCTL_NR_TSIN(LEDTS_FNCTL_NR_TSIN value)
    {
        uint32_t curr = FNCTL;

        curr &= ~(0b111u << 25u);
        curr |= (std::to_underlying(value) & 0b111u) << 25u;

        FNCTL = curr;
    }

    /**
     * Get FNCTL's TSCTRSAT bit.
     */
    LEDTS_FNCTL_TSCTRSAT get_FNCTL_TSCTRSAT()
    {
        return LEDTS_FNCTL_TSCTRSAT(FNCTL & (1u << 24u));
    }

    /**
     * Set FNCTL's TSCTRSAT bit.
     */
    inline void set_FNCTL_TSCTRSAT()
    {
        FNCTL |= 1u << 24u;
    }

    /**
     * Clear FNCTL's TSCTRSAT bit.
     */
    inline void clear_FNCTL_TSCTRSAT()
    {
        FNCTL &= ~(1u << 24u);
    }

    /**
     * Toggle FNCTL's TSCTRSAT bit.
     */
    inline void toggle_FNCTL_TSCTRSAT()
    {
        FNCTL ^= 1u << 24u;
    }

    /**
     * Get FNCTL's TSCTRR bit.
     */
    LEDTS_FNCTL_TSCTRR get_FNCTL_TSCTRR()
    {
        return LEDTS_FNCTL_TSCTRR(FNCTL & (1u << 23u));
    }

    /**
     * Set FNCTL's TSCTRR bit.
     */
    inline void set_FNCTL_TSCTRR()
    {
        FNCTL |= 1u << 23u;
    }

    /**
     * Clear FNCTL's TSCTRR bit.
     */
    inline void clear_FNCTL_TSCTRR()
    {
        FNCTL &= ~(1u << 23u);
    }

    /**
     * Toggle FNCTL's TSCTRR bit.
     */
    inline void toggle_FNCTL_TSCTRR()
    {
        FNCTL ^= 1u << 23u;
    }

    /**
     * Get FNCTL's TSOEXT field.
     */
    LEDTS_FNCTL_TSOEXT get_FNCTL_TSOEXT()
    {
        return LEDTS_FNCTL_TSOEXT((FNCTL >> 21u) & 0b11u);
    }

    /**
     * Set FNCTL's TSOEXT field.
     */
    inline void set_FNCTL_TSOEXT(LEDTS_FNCTL_TSOEXT value)
    {
        uint32_t curr = FNCTL;

        curr &= ~(0b11u << 21u);
        curr |= (std::to_underlying(value) & 0b11u) << 21u;

        FNCTL = curr;
    }

    /**
     * Get FNCTL's TSCCMP bit.
     */
    LEDTS_FNCTL_TSCCMP get_FNCTL_TSCCMP()
    {
        return LEDTS_FNCTL_TSCCMP(FNCTL & (1u << 20u));
    }

    /**
     * Set FNCTL's TSCCMP bit.
     */
    inline void set_FNCTL_TSCCMP()
    {
        FNCTL |= 1u << 20u;
    }

    /**
     * Clear FNCTL's TSCCMP bit.
     */
    inline void clear_FNCTL_TSCCMP()
    {
        FNCTL &= ~(1u << 20u);
    }

    /**
     * Toggle FNCTL's TSCCMP bit.
     */
    inline void toggle_FNCTL_TSCCMP()
    {
        FNCTL ^= 1u << 20u;
    }

    /**
     * Get FNCTL's ACCCNT field.
     */
    LEDTS_FNCTL_ACCCNT get_FNCTL_ACCCNT()
    {
        return LEDTS_FNCTL_ACCCNT((FNCTL >> 16u) & 0b1111u);
    }

    /**
     * Set FNCTL's ACCCNT field.
     */
    inline void set_FNCTL_ACCCNT(LEDTS_FNCTL_ACCCNT value)
    {
        uint32_t curr = FNCTL;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        FNCTL = curr;
    }

    /**
     * Get FNCTL's FNCOL field.
     */
    uint8_t get_FNCTL_FNCOL()
    {
        return (FNCTL >> 5u) & 0b111u;
    }

    /**
     * Get FNCTL's EPULL bit.
     */
    LEDTS_FNCTL_EPULL get_FNCTL_EPULL()
    {
        return LEDTS_FNCTL_EPULL(FNCTL & (1u << 4u));
    }

    /**
     * Set FNCTL's EPULL bit.
     */
    inline void set_FNCTL_EPULL()
    {
        FNCTL |= 1u << 4u;
    }

    /**
     * Clear FNCTL's EPULL bit.
     */
    inline void clear_FNCTL_EPULL()
    {
        FNCTL &= ~(1u << 4u);
    }

    /**
     * Toggle FNCTL's EPULL bit.
     */
    inline void toggle_FNCTL_EPULL()
    {
        FNCTL ^= 1u << 4u;
    }

    /**
     * Get FNCTL's PADTSW bit.
     */
    LEDTS_FNCTL_PADTSW get_FNCTL_PADTSW()
    {
        return LEDTS_FNCTL_PADTSW(FNCTL & (1u << 3u));
    }

    /**
     * Set FNCTL's PADTSW bit.
     */
    inline void set_FNCTL_PADTSW()
    {
        FNCTL |= 1u << 3u;
    }

    /**
     * Clear FNCTL's PADTSW bit.
     */
    inline void clear_FNCTL_PADTSW()
    {
        FNCTL &= ~(1u << 3u);
    }

    /**
     * Toggle FNCTL's PADTSW bit.
     */
    inline void toggle_FNCTL_PADTSW()
    {
        FNCTL ^= 1u << 3u;
    }

    /**
     * Get FNCTL's PADT field.
     */
    LEDTS_FNCTL_PADT get_FNCTL_PADT()
    {
        return LEDTS_FNCTL_PADT((FNCTL >> 0u) & 0b111u);
    }

    /**
     * Set FNCTL's PADT field.
     */
    inline void set_FNCTL_PADT(LEDTS_FNCTL_PADT value)
    {
        uint32_t curr = FNCTL;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        FNCTL = curr;
    }

    /**
     * Set EVFR's CTPF bit.
     */
    inline void set_EVFR_CTPF()
    {
        EVFR |= 1u << 18u;
    }

    /**
     * Clear EVFR's CTPF bit.
     */
    inline void clear_EVFR_CTPF()
    {
        EVFR &= ~(1u << 18u);
    }

    /**
     * Toggle EVFR's CTPF bit.
     */
    inline void toggle_EVFR_CTPF()
    {
        EVFR ^= 1u << 18u;
    }

    /**
     * Set EVFR's CTFF bit.
     */
    inline void set_EVFR_CTFF()
    {
        EVFR |= 1u << 17u;
    }

    /**
     * Clear EVFR's CTFF bit.
     */
    inline void clear_EVFR_CTFF()
    {
        EVFR &= ~(1u << 17u);
    }

    /**
     * Toggle EVFR's CTFF bit.
     */
    inline void toggle_EVFR_CTFF()
    {
        EVFR ^= 1u << 17u;
    }

    /**
     * Set EVFR's CTSF bit.
     */
    inline void set_EVFR_CTSF()
    {
        EVFR |= 1u << 16u;
    }

    /**
     * Clear EVFR's CTSF bit.
     */
    inline void clear_EVFR_CTSF()
    {
        EVFR &= ~(1u << 16u);
    }

    /**
     * Toggle EVFR's CTSF bit.
     */
    inline void toggle_EVFR_CTSF()
    {
        EVFR ^= 1u << 16u;
    }

    /**
     * Get EVFR's TSCTROVF bit.
     */
    LEDTS_EVFR_TSCTROVF get_EVFR_TSCTROVF()
    {
        return LEDTS_EVFR_TSCTROVF(EVFR & (1u << 3u));
    }

    /**
     * Get EVFR's TPF bit.
     */
    bool get_EVFR_TPF()
    {
        return EVFR & (1u << 2u);
    }

    /**
     * Get EVFR's TFF bit.
     */
    bool get_EVFR_TFF()
    {
        return EVFR & (1u << 1u);
    }

    /**
     * Get EVFR's TSF bit.
     */
    bool get_EVFR_TSF()
    {
        return EVFR & (1u << 0u);
    }

    /**
     * Get TSVAL's TSCTRVAL field.
     */
    uint16_t get_TSVAL_TSCTRVAL()
    {
        return (TSVAL >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set TSVAL's TSCTRVAL field.
     */
    inline void set_TSVAL_TSCTRVAL(uint16_t value)
    {
        uint32_t curr = TSVAL;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        TSVAL = curr;
    }

    /**
     * Get TSVAL's TSCTRVALR field.
     */
    uint16_t get_TSVAL_TSCTRVALR()
    {
        return (TSVAL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get LINE0's LINE_3 field.
     */
    uint8_t get_LINE0_LINE_3()
    {
        return (LINE0 >> 24u) & 0b11111111u;
    }

    /**
     * Set LINE0's LINE_3 field.
     */
    inline void set_LINE0_LINE_3(uint8_t value)
    {
        uint32_t curr = LINE0;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        LINE0 = curr;
    }

    /**
     * Get LINE0's LINE_2 field.
     */
    uint8_t get_LINE0_LINE_2()
    {
        return (LINE0 >> 16u) & 0b11111111u;
    }

    /**
     * Set LINE0's LINE_2 field.
     */
    inline void set_LINE0_LINE_2(uint8_t value)
    {
        uint32_t curr = LINE0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        LINE0 = curr;
    }

    /**
     * Get LINE0's LINE_1 field.
     */
    uint8_t get_LINE0_LINE_1()
    {
        return (LINE0 >> 8u) & 0b11111111u;
    }

    /**
     * Set LINE0's LINE_1 field.
     */
    inline void set_LINE0_LINE_1(uint8_t value)
    {
        uint32_t curr = LINE0;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        LINE0 = curr;
    }

    /**
     * Get LINE0's LINE_0 field.
     */
    uint8_t get_LINE0_LINE_0()
    {
        return (LINE0 >> 0u) & 0b11111111u;
    }

    /**
     * Set LINE0's LINE_0 field.
     */
    inline void set_LINE0_LINE_0(uint8_t value)
    {
        uint32_t curr = LINE0;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        LINE0 = curr;
    }

    /**
     * Get LINE1's LINE_A field.
     */
    uint8_t get_LINE1_LINE_A()
    {
        return (LINE1 >> 24u) & 0b11111111u;
    }

    /**
     * Set LINE1's LINE_A field.
     */
    inline void set_LINE1_LINE_A(uint8_t value)
    {
        uint32_t curr = LINE1;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        LINE1 = curr;
    }

    /**
     * Get LINE1's LINE_6 field.
     */
    uint8_t get_LINE1_LINE_6()
    {
        return (LINE1 >> 16u) & 0b11111111u;
    }

    /**
     * Set LINE1's LINE_6 field.
     */
    inline void set_LINE1_LINE_6(uint8_t value)
    {
        uint32_t curr = LINE1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        LINE1 = curr;
    }

    /**
     * Get LINE1's LINE_5 field.
     */
    uint8_t get_LINE1_LINE_5()
    {
        return (LINE1 >> 8u) & 0b11111111u;
    }

    /**
     * Set LINE1's LINE_5 field.
     */
    inline void set_LINE1_LINE_5(uint8_t value)
    {
        uint32_t curr = LINE1;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        LINE1 = curr;
    }

    /**
     * Get LINE1's LINE_4 field.
     */
    uint8_t get_LINE1_LINE_4()
    {
        return (LINE1 >> 0u) & 0b11111111u;
    }

    /**
     * Set LINE1's LINE_4 field.
     */
    inline void set_LINE1_LINE_4(uint8_t value)
    {
        uint32_t curr = LINE1;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        LINE1 = curr;
    }

    /**
     * Get LDCMP0's CMP_LD3 field.
     */
    uint8_t get_LDCMP0_CMP_LD3()
    {
        return (LDCMP0 >> 24u) & 0b11111111u;
    }

    /**
     * Set LDCMP0's CMP_LD3 field.
     */
    inline void set_LDCMP0_CMP_LD3(uint8_t value)
    {
        uint32_t curr = LDCMP0;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        LDCMP0 = curr;
    }

    /**
     * Get LDCMP0's CMP_LD2 field.
     */
    uint8_t get_LDCMP0_CMP_LD2()
    {
        return (LDCMP0 >> 16u) & 0b11111111u;
    }

    /**
     * Set LDCMP0's CMP_LD2 field.
     */
    inline void set_LDCMP0_CMP_LD2(uint8_t value)
    {
        uint32_t curr = LDCMP0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        LDCMP0 = curr;
    }

    /**
     * Get LDCMP0's CMP_LD1 field.
     */
    uint8_t get_LDCMP0_CMP_LD1()
    {
        return (LDCMP0 >> 8u) & 0b11111111u;
    }

    /**
     * Set LDCMP0's CMP_LD1 field.
     */
    inline void set_LDCMP0_CMP_LD1(uint8_t value)
    {
        uint32_t curr = LDCMP0;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        LDCMP0 = curr;
    }

    /**
     * Get LDCMP0's CMP_LD0 field.
     */
    uint8_t get_LDCMP0_CMP_LD0()
    {
        return (LDCMP0 >> 0u) & 0b11111111u;
    }

    /**
     * Set LDCMP0's CMP_LD0 field.
     */
    inline void set_LDCMP0_CMP_LD0(uint8_t value)
    {
        uint32_t curr = LDCMP0;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        LDCMP0 = curr;
    }

    /**
     * Get LDCMP1's CMP_LDA_TSCOM field.
     */
    uint8_t get_LDCMP1_CMP_LDA_TSCOM()
    {
        return (LDCMP1 >> 24u) & 0b11111111u;
    }

    /**
     * Set LDCMP1's CMP_LDA_TSCOM field.
     */
    inline void set_LDCMP1_CMP_LDA_TSCOM(uint8_t value)
    {
        uint32_t curr = LDCMP1;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        LDCMP1 = curr;
    }

    /**
     * Get LDCMP1's CMP_LD6 field.
     */
    uint8_t get_LDCMP1_CMP_LD6()
    {
        return (LDCMP1 >> 16u) & 0b11111111u;
    }

    /**
     * Set LDCMP1's CMP_LD6 field.
     */
    inline void set_LDCMP1_CMP_LD6(uint8_t value)
    {
        uint32_t curr = LDCMP1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        LDCMP1 = curr;
    }

    /**
     * Get LDCMP1's CMP_LD5 field.
     */
    uint8_t get_LDCMP1_CMP_LD5()
    {
        return (LDCMP1 >> 8u) & 0b11111111u;
    }

    /**
     * Set LDCMP1's CMP_LD5 field.
     */
    inline void set_LDCMP1_CMP_LD5(uint8_t value)
    {
        uint32_t curr = LDCMP1;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        LDCMP1 = curr;
    }

    /**
     * Get LDCMP1's CMP_LD4 field.
     */
    uint8_t get_LDCMP1_CMP_LD4()
    {
        return (LDCMP1 >> 0u) & 0b11111111u;
    }

    /**
     * Set LDCMP1's CMP_LD4 field.
     */
    inline void set_LDCMP1_CMP_LD4(uint8_t value)
    {
        uint32_t curr = LDCMP1;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        LDCMP1 = curr;
    }

    /**
     * Get TSCMP0's CMP_TS3 field.
     */
    uint8_t get_TSCMP0_CMP_TS3()
    {
        return (TSCMP0 >> 24u) & 0b11111111u;
    }

    /**
     * Set TSCMP0's CMP_TS3 field.
     */
    inline void set_TSCMP0_CMP_TS3(uint8_t value)
    {
        uint32_t curr = TSCMP0;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        TSCMP0 = curr;
    }

    /**
     * Get TSCMP0's CMP_TS2 field.
     */
    uint8_t get_TSCMP0_CMP_TS2()
    {
        return (TSCMP0 >> 16u) & 0b11111111u;
    }

    /**
     * Set TSCMP0's CMP_TS2 field.
     */
    inline void set_TSCMP0_CMP_TS2(uint8_t value)
    {
        uint32_t curr = TSCMP0;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        TSCMP0 = curr;
    }

    /**
     * Get TSCMP0's CMP_TS1 field.
     */
    uint8_t get_TSCMP0_CMP_TS1()
    {
        return (TSCMP0 >> 8u) & 0b11111111u;
    }

    /**
     * Set TSCMP0's CMP_TS1 field.
     */
    inline void set_TSCMP0_CMP_TS1(uint8_t value)
    {
        uint32_t curr = TSCMP0;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        TSCMP0 = curr;
    }

    /**
     * Get TSCMP0's CMP_TS0 field.
     */
    uint8_t get_TSCMP0_CMP_TS0()
    {
        return (TSCMP0 >> 0u) & 0b11111111u;
    }

    /**
     * Set TSCMP0's CMP_TS0 field.
     */
    inline void set_TSCMP0_CMP_TS0(uint8_t value)
    {
        uint32_t curr = TSCMP0;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        TSCMP0 = curr;
    }

    /**
     * Get TSCMP1's CMP_TS7 field.
     */
    uint8_t get_TSCMP1_CMP_TS7()
    {
        return (TSCMP1 >> 24u) & 0b11111111u;
    }

    /**
     * Set TSCMP1's CMP_TS7 field.
     */
    inline void set_TSCMP1_CMP_TS7(uint8_t value)
    {
        uint32_t curr = TSCMP1;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        TSCMP1 = curr;
    }

    /**
     * Get TSCMP1's CMP_TS6 field.
     */
    uint8_t get_TSCMP1_CMP_TS6()
    {
        return (TSCMP1 >> 16u) & 0b11111111u;
    }

    /**
     * Set TSCMP1's CMP_TS6 field.
     */
    inline void set_TSCMP1_CMP_TS6(uint8_t value)
    {
        uint32_t curr = TSCMP1;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        TSCMP1 = curr;
    }

    /**
     * Get TSCMP1's CMP_TS5 field.
     */
    uint8_t get_TSCMP1_CMP_TS5()
    {
        return (TSCMP1 >> 8u) & 0b11111111u;
    }

    /**
     * Set TSCMP1's CMP_TS5 field.
     */
    inline void set_TSCMP1_CMP_TS5(uint8_t value)
    {
        uint32_t curr = TSCMP1;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        TSCMP1 = curr;
    }

    /**
     * Get TSCMP1's CMP_TS4 field.
     */
    uint8_t get_TSCMP1_CMP_TS4()
    {
        return (TSCMP1 >> 0u) & 0b11111111u;
    }

    /**
     * Set TSCMP1's CMP_TS4 field.
     */
    inline void set_TSCMP1_CMP_TS4(uint8_t value)
    {
        uint32_t curr = TSCMP1;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        TSCMP1 = curr;
    }
};

static_assert(sizeof(ledts) == ledts::size);

static volatile ledts *const LEDTS0 = reinterpret_cast<ledts *>(0x48010000);

}; // namespace XMC4700
