/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/DSD_CH0_DICFG_CSRC.h"
#include "../enums/DSD_CH0_DICFG_DSRC.h"
#include "../enums/DSD_CH0_DICFG_DSWC.h"
#include "../enums/DSD_CH0_DICFG_ITRMODE.h"
#include "../enums/DSD_CH0_DICFG_SCWC.h"
#include "../enums/DSD_CH0_DICFG_STROBE.h"
#include "../enums/DSD_CH0_DICFG_TRWC.h"
#include "../enums/DSD_CH0_DICFG_TSTRMODE.h"
#include "../enums/DSD_CH0_FCFGA_CFAC.h"
#include "../enums/DSD_CH0_FCFGA_EGT.h"
#include "../enums/DSD_CH0_FCFGA_ESEL.h"
#include "../enums/DSD_CH0_FCFGA_SRGA.h"
#include "../enums/DSD_CH0_FCFGC_CFEN.h"
#include "../enums/DSD_CH0_FCFGC_CFMC.h"
#include "../enums/DSD_CH0_FCFGC_SRGM.h"
#include "../enums/DSD_CH0_IWCTR_INTEN.h"
#include "../enums/DSD_CH0_IWCTR_IWS.h"
#include "../enums/DSD_CH0_MODCFG_DIVM.h"
#include "../enums/DSD_CH0_MODCFG_DWC.h"
#include "../enums/DSD_CH0_RECTCFG_RFEN.h"
#include "../enums/DSD_CH0_RECTCFG_SDVAL.h"
#include "../enums/DSD_CH0_RECTCFG_SGNCS.h"
#include "../enums/DSD_CH0_RECTCFG_SGND.h"
#include "../enums/DSD_CH0_RECTCFG_SSRC.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Delta Sigma Demodulator
 */
struct [[gnu::packed]] dsd_ch
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< dsd_ch's identifier. */
    static constexpr std::size_t size = 172; /*!< dsd_ch's size in bytes. */

    /* Fields. */
    uint32_t MODCFG; /*!< (read-write) Modulator Configuration Register */
    const uint32_t reserved_padding0 = {};
    uint32_t
        DICFG; /*!< (read-write) Demodulator Input Configuration Register */
    static constexpr std::size_t reserved_padding1_length = 2;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t FCFGC; /*!< (read-write) Filter Configuration Register, Main CIC
                       Filter */
    uint32_t FCFGA; /*!< (read-write) Filter Configuration Register, Auxiliary
                       Filter */
    const uint32_t reserved_padding2 = {};
    uint32_t IWCTR; /*!< (read-write) Integration Window Control Register */
    const uint32_t reserved_padding3 = {};
    uint32_t BOUNDSEL; /*!< (read-write) Boundary Select Register */
    const uint32_t reserved_padding4 = {};
    const uint32_t RESM = {}; /*!< (read-only) Result Register, Main Filter */
    const uint32_t reserved_padding5 = {};
    uint32_t OFFM; /*!< (read-write) Offset Register, Main Filter */
    const uint32_t reserved_padding6 = {};
    const uint32_t RESA =
        {}; /*!< (read-only) Result Register, Auxiliary Filter */
    static constexpr std::size_t reserved_padding7_length = 3;
    const uint32_t reserved_padding7[reserved_padding7_length] = {};
    const uint32_t TSTMP = {}; /*!< (read-only) Time-Stamp Register */
    static constexpr std::size_t reserved_padding8_length = 19;
    const uint32_t reserved_padding8[reserved_padding8_length] = {};
    uint32_t
        CGSYNC; /*!< (read-write) Carrier Generator Synchronization Register */
    const uint32_t reserved_padding9 = {};
    uint32_t RECTCFG; /*!< (read-write) Rectification Configuration Register */

    /* Methods. */

    /**
     * Set MODCFG's DWC bit.
     */
    inline void set_MODCFG_DWC()
    {
        MODCFG |= 1u << 23u;
    }

    /**
     * Clear MODCFG's DWC bit.
     */
    inline void clear_MODCFG_DWC()
    {
        MODCFG &= ~(1u << 23u);
    }

    /**
     * Toggle MODCFG's DWC bit.
     */
    inline void toggle_MODCFG_DWC()
    {
        MODCFG ^= 1u << 23u;
    }

    /**
     * Get MODCFG's DIVM field.
     */
    DSD_CH0_MODCFG_DIVM get_MODCFG_DIVM()
    {
        return DSD_CH0_MODCFG_DIVM((MODCFG >> 16u) & 0b1111u);
    }

    /**
     * Set MODCFG's DIVM field.
     */
    inline void set_MODCFG_DIVM(DSD_CH0_MODCFG_DIVM value)
    {
        uint32_t curr = MODCFG;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        MODCFG = curr;
    }

    /**
     * Set DICFG's SCWC bit.
     */
    inline void set_DICFG_SCWC()
    {
        DICFG |= 1u << 31u;
    }

    /**
     * Clear DICFG's SCWC bit.
     */
    inline void clear_DICFG_SCWC()
    {
        DICFG &= ~(1u << 31u);
    }

    /**
     * Toggle DICFG's SCWC bit.
     */
    inline void toggle_DICFG_SCWC()
    {
        DICFG ^= 1u << 31u;
    }

    /**
     * Get DICFG's STROBE field.
     */
    DSD_CH0_DICFG_STROBE get_DICFG_STROBE()
    {
        return DSD_CH0_DICFG_STROBE((DICFG >> 20u) & 0b1111u);
    }

    /**
     * Set DICFG's STROBE field.
     */
    inline void set_DICFG_STROBE(DSD_CH0_DICFG_STROBE value)
    {
        uint32_t curr = DICFG;

        curr &= ~(0b1111u << 20u);
        curr |= (std::to_underlying(value) & 0b1111u) << 20u;

        DICFG = curr;
    }

    /**
     * Get DICFG's CSRC field.
     */
    DSD_CH0_DICFG_CSRC get_DICFG_CSRC()
    {
        return DSD_CH0_DICFG_CSRC((DICFG >> 16u) & 0b1111u);
    }

    /**
     * Set DICFG's CSRC field.
     */
    inline void set_DICFG_CSRC(DSD_CH0_DICFG_CSRC value)
    {
        uint32_t curr = DICFG;

        curr &= ~(0b1111u << 16u);
        curr |= (std::to_underlying(value) & 0b1111u) << 16u;

        DICFG = curr;
    }

    /**
     * Set DICFG's TRWC bit.
     */
    inline void set_DICFG_TRWC()
    {
        DICFG |= 1u << 15u;
    }

    /**
     * Clear DICFG's TRWC bit.
     */
    inline void clear_DICFG_TRWC()
    {
        DICFG &= ~(1u << 15u);
    }

    /**
     * Toggle DICFG's TRWC bit.
     */
    inline void toggle_DICFG_TRWC()
    {
        DICFG ^= 1u << 15u;
    }

    /**
     * Get DICFG's TRSEL field.
     */
    uint8_t get_DICFG_TRSEL()
    {
        return (DICFG >> 12u) & 0b111u;
    }

    /**
     * Set DICFG's TRSEL field.
     */
    inline void set_DICFG_TRSEL(uint8_t value)
    {
        uint32_t curr = DICFG;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        DICFG = curr;
    }

    /**
     * Get DICFG's TSTRMODE field.
     */
    DSD_CH0_DICFG_TSTRMODE get_DICFG_TSTRMODE()
    {
        return DSD_CH0_DICFG_TSTRMODE((DICFG >> 10u) & 0b11u);
    }

    /**
     * Set DICFG's TSTRMODE field.
     */
    inline void set_DICFG_TSTRMODE(DSD_CH0_DICFG_TSTRMODE value)
    {
        uint32_t curr = DICFG;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DICFG = curr;
    }

    /**
     * Get DICFG's ITRMODE field.
     */
    DSD_CH0_DICFG_ITRMODE get_DICFG_ITRMODE()
    {
        return DSD_CH0_DICFG_ITRMODE((DICFG >> 8u) & 0b11u);
    }

    /**
     * Set DICFG's ITRMODE field.
     */
    inline void set_DICFG_ITRMODE(DSD_CH0_DICFG_ITRMODE value)
    {
        uint32_t curr = DICFG;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        DICFG = curr;
    }

    /**
     * Set DICFG's DSWC bit.
     */
    inline void set_DICFG_DSWC()
    {
        DICFG |= 1u << 7u;
    }

    /**
     * Clear DICFG's DSWC bit.
     */
    inline void clear_DICFG_DSWC()
    {
        DICFG &= ~(1u << 7u);
    }

    /**
     * Toggle DICFG's DSWC bit.
     */
    inline void toggle_DICFG_DSWC()
    {
        DICFG ^= 1u << 7u;
    }

    /**
     * Get DICFG's DSRC field.
     */
    DSD_CH0_DICFG_DSRC get_DICFG_DSRC()
    {
        return DSD_CH0_DICFG_DSRC((DICFG >> 0u) & 0b1111u);
    }

    /**
     * Set DICFG's DSRC field.
     */
    inline void set_DICFG_DSRC(DSD_CH0_DICFG_DSRC value)
    {
        uint32_t curr = DICFG;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        DICFG = curr;
    }

    /**
     * Get FCFGC's CFMDCNT field.
     */
    uint8_t get_FCFGC_CFMDCNT()
    {
        return (FCFGC >> 24u) & 0b11111111u;
    }

    /**
     * Get FCFGC's CFMSV field.
     */
    uint8_t get_FCFGC_CFMSV()
    {
        return (FCFGC >> 16u) & 0b11111111u;
    }

    /**
     * Set FCFGC's CFMSV field.
     */
    inline void set_FCFGC_CFMSV(uint8_t value)
    {
        uint32_t curr = FCFGC;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        FCFGC = curr;
    }

    /**
     * Get FCFGC's SRGM field.
     */
    DSD_CH0_FCFGC_SRGM get_FCFGC_SRGM()
    {
        return DSD_CH0_FCFGC_SRGM((FCFGC >> 14u) & 0b11u);
    }

    /**
     * Set FCFGC's SRGM field.
     */
    inline void set_FCFGC_SRGM(DSD_CH0_FCFGC_SRGM value)
    {
        uint32_t curr = FCFGC;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        FCFGC = curr;
    }

    /**
     * Get FCFGC's CFEN bit.
     */
    DSD_CH0_FCFGC_CFEN get_FCFGC_CFEN()
    {
        return DSD_CH0_FCFGC_CFEN(FCFGC & (1u << 10u));
    }

    /**
     * Set FCFGC's CFEN bit.
     */
    inline void set_FCFGC_CFEN()
    {
        FCFGC |= 1u << 10u;
    }

    /**
     * Clear FCFGC's CFEN bit.
     */
    inline void clear_FCFGC_CFEN()
    {
        FCFGC &= ~(1u << 10u);
    }

    /**
     * Toggle FCFGC's CFEN bit.
     */
    inline void toggle_FCFGC_CFEN()
    {
        FCFGC ^= 1u << 10u;
    }

    /**
     * Get FCFGC's CFMC field.
     */
    DSD_CH0_FCFGC_CFMC get_FCFGC_CFMC()
    {
        return DSD_CH0_FCFGC_CFMC((FCFGC >> 8u) & 0b11u);
    }

    /**
     * Set FCFGC's CFMC field.
     */
    inline void set_FCFGC_CFMC(DSD_CH0_FCFGC_CFMC value)
    {
        uint32_t curr = FCFGC;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        FCFGC = curr;
    }

    /**
     * Get FCFGC's CFMDF field.
     */
    uint8_t get_FCFGC_CFMDF()
    {
        return (FCFGC >> 0u) & 0b11111111u;
    }

    /**
     * Set FCFGC's CFMDF field.
     */
    inline void set_FCFGC_CFMDF(uint8_t value)
    {
        uint32_t curr = FCFGC;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        FCFGC = curr;
    }

    /**
     * Get FCFGA's CFADCNT field.
     */
    uint8_t get_FCFGA_CFADCNT()
    {
        return (FCFGA >> 24u) & 0b11111111u;
    }

    /**
     * Get FCFGA's EGT bit.
     */
    DSD_CH0_FCFGA_EGT get_FCFGA_EGT()
    {
        return DSD_CH0_FCFGA_EGT(FCFGA & (1u << 14u));
    }

    /**
     * Set FCFGA's EGT bit.
     */
    inline void set_FCFGA_EGT()
    {
        FCFGA |= 1u << 14u;
    }

    /**
     * Clear FCFGA's EGT bit.
     */
    inline void clear_FCFGA_EGT()
    {
        FCFGA &= ~(1u << 14u);
    }

    /**
     * Toggle FCFGA's EGT bit.
     */
    inline void toggle_FCFGA_EGT()
    {
        FCFGA ^= 1u << 14u;
    }

    /**
     * Get FCFGA's ESEL field.
     */
    DSD_CH0_FCFGA_ESEL get_FCFGA_ESEL()
    {
        return DSD_CH0_FCFGA_ESEL((FCFGA >> 12u) & 0b11u);
    }

    /**
     * Set FCFGA's ESEL field.
     */
    inline void set_FCFGA_ESEL(DSD_CH0_FCFGA_ESEL value)
    {
        uint32_t curr = FCFGA;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        FCFGA = curr;
    }

    /**
     * Get FCFGA's SRGA field.
     */
    DSD_CH0_FCFGA_SRGA get_FCFGA_SRGA()
    {
        return DSD_CH0_FCFGA_SRGA((FCFGA >> 10u) & 0b11u);
    }

    /**
     * Set FCFGA's SRGA field.
     */
    inline void set_FCFGA_SRGA(DSD_CH0_FCFGA_SRGA value)
    {
        uint32_t curr = FCFGA;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        FCFGA = curr;
    }

    /**
     * Get FCFGA's CFAC field.
     */
    DSD_CH0_FCFGA_CFAC get_FCFGA_CFAC()
    {
        return DSD_CH0_FCFGA_CFAC((FCFGA >> 8u) & 0b11u);
    }

    /**
     * Set FCFGA's CFAC field.
     */
    inline void set_FCFGA_CFAC(DSD_CH0_FCFGA_CFAC value)
    {
        uint32_t curr = FCFGA;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        FCFGA = curr;
    }

    /**
     * Get FCFGA's CFADF field.
     */
    uint8_t get_FCFGA_CFADF()
    {
        return (FCFGA >> 0u) & 0b11111111u;
    }

    /**
     * Set FCFGA's CFADF field.
     */
    inline void set_FCFGA_CFADF(uint8_t value)
    {
        uint32_t curr = FCFGA;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        FCFGA = curr;
    }

    /**
     * Get IWCTR's NVALINT field.
     */
    uint8_t get_IWCTR_NVALINT()
    {
        return (IWCTR >> 24u) & 0b111111u;
    }

    /**
     * Set IWCTR's NVALINT field.
     */
    inline void set_IWCTR_NVALINT(uint8_t value)
    {
        uint32_t curr = IWCTR;

        curr &= ~(0b111111u << 24u);
        curr |= (value & 0b111111u) << 24u;

        IWCTR = curr;
    }

    /**
     * Get IWCTR's IWS bit.
     */
    DSD_CH0_IWCTR_IWS get_IWCTR_IWS()
    {
        return DSD_CH0_IWCTR_IWS(IWCTR & (1u << 23u));
    }

    /**
     * Set IWCTR's IWS bit.
     */
    inline void set_IWCTR_IWS()
    {
        IWCTR |= 1u << 23u;
    }

    /**
     * Clear IWCTR's IWS bit.
     */
    inline void clear_IWCTR_IWS()
    {
        IWCTR &= ~(1u << 23u);
    }

    /**
     * Toggle IWCTR's IWS bit.
     */
    inline void toggle_IWCTR_IWS()
    {
        IWCTR ^= 1u << 23u;
    }

    /**
     * Get IWCTR's NVALDIS field.
     */
    uint8_t get_IWCTR_NVALDIS()
    {
        return (IWCTR >> 16u) & 0b111111u;
    }

    /**
     * Set IWCTR's NVALDIS field.
     */
    inline void set_IWCTR_NVALDIS(uint8_t value)
    {
        uint32_t curr = IWCTR;

        curr &= ~(0b111111u << 16u);
        curr |= (value & 0b111111u) << 16u;

        IWCTR = curr;
    }

    /**
     * Get IWCTR's REPVAL field.
     */
    uint8_t get_IWCTR_REPVAL()
    {
        return (IWCTR >> 12u) & 0b1111u;
    }

    /**
     * Set IWCTR's REPVAL field.
     */
    inline void set_IWCTR_REPVAL(uint8_t value)
    {
        uint32_t curr = IWCTR;

        curr &= ~(0b1111u << 12u);
        curr |= (value & 0b1111u) << 12u;

        IWCTR = curr;
    }

    /**
     * Get IWCTR's REPCNT field.
     */
    uint8_t get_IWCTR_REPCNT()
    {
        return (IWCTR >> 8u) & 0b1111u;
    }

    /**
     * Get IWCTR's INTEN bit.
     */
    DSD_CH0_IWCTR_INTEN get_IWCTR_INTEN()
    {
        return DSD_CH0_IWCTR_INTEN(IWCTR & (1u << 7u));
    }

    /**
     * Get IWCTR's NVALCNT field.
     */
    uint8_t get_IWCTR_NVALCNT()
    {
        return (IWCTR >> 0u) & 0b111111u;
    }

    /**
     * Get BOUNDSEL's BOUNDARYU field.
     */
    uint16_t get_BOUNDSEL_BOUNDARYU()
    {
        return (BOUNDSEL >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set BOUNDSEL's BOUNDARYU field.
     */
    inline void set_BOUNDSEL_BOUNDARYU(uint16_t value)
    {
        uint32_t curr = BOUNDSEL;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        BOUNDSEL = curr;
    }

    /**
     * Get BOUNDSEL's BOUNDARYL field.
     */
    uint16_t get_BOUNDSEL_BOUNDARYL()
    {
        return (BOUNDSEL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set BOUNDSEL's BOUNDARYL field.
     */
    inline void set_BOUNDSEL_BOUNDARYL(uint16_t value)
    {
        uint32_t curr = BOUNDSEL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        BOUNDSEL = curr;
    }

    /**
     * Get RESM's RESULT field.
     */
    uint16_t get_RESM_RESULT()
    {
        return (RESM >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get OFFM's OFFSET field.
     */
    uint16_t get_OFFM_OFFSET()
    {
        return (OFFM >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set OFFM's OFFSET field.
     */
    inline void set_OFFM_OFFSET(uint16_t value)
    {
        uint32_t curr = OFFM;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        OFFM = curr;
    }

    /**
     * Get RESA's RESULT field.
     */
    uint16_t get_RESA_RESULT()
    {
        return (RESA >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get TSTMP's NVALCNT field.
     */
    uint8_t get_TSTMP_NVALCNT()
    {
        return (TSTMP >> 24u) & 0b111111u;
    }

    /**
     * Get TSTMP's CFMDCNT field.
     */
    uint8_t get_TSTMP_CFMDCNT()
    {
        return (TSTMP >> 16u) & 0b11111111u;
    }

    /**
     * Get TSTMP's RESULT field.
     */
    uint16_t get_TSTMP_RESULT()
    {
        return (TSTMP >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get CGSYNC's SDNEG field.
     */
    uint8_t get_CGSYNC_SDNEG()
    {
        return (CGSYNC >> 24u) & 0b11111111u;
    }

    /**
     * Set CGSYNC's SDNEG field.
     */
    inline void set_CGSYNC_SDNEG(uint8_t value)
    {
        uint32_t curr = CGSYNC;

        curr &= ~(0b11111111u << 24u);
        curr |= (value & 0b11111111u) << 24u;

        CGSYNC = curr;
    }

    /**
     * Get CGSYNC's SDPOS field.
     */
    uint8_t get_CGSYNC_SDPOS()
    {
        return (CGSYNC >> 16u) & 0b11111111u;
    }

    /**
     * Set CGSYNC's SDPOS field.
     */
    inline void set_CGSYNC_SDPOS(uint8_t value)
    {
        uint32_t curr = CGSYNC;

        curr &= ~(0b11111111u << 16u);
        curr |= (value & 0b11111111u) << 16u;

        CGSYNC = curr;
    }

    /**
     * Get CGSYNC's SDCAP field.
     */
    uint8_t get_CGSYNC_SDCAP()
    {
        return (CGSYNC >> 8u) & 0b11111111u;
    }

    /**
     * Get CGSYNC's SDCOUNT field.
     */
    uint8_t get_CGSYNC_SDCOUNT()
    {
        return (CGSYNC >> 0u) & 0b11111111u;
    }

    /**
     * Get RECTCFG's SGND bit.
     */
    DSD_CH0_RECTCFG_SGND get_RECTCFG_SGND()
    {
        return DSD_CH0_RECTCFG_SGND(RECTCFG & (1u << 31u));
    }

    /**
     * Get RECTCFG's SGNCS bit.
     */
    DSD_CH0_RECTCFG_SGNCS get_RECTCFG_SGNCS()
    {
        return DSD_CH0_RECTCFG_SGNCS(RECTCFG & (1u << 30u));
    }

    /**
     * Get RECTCFG's SDVAL bit.
     */
    DSD_CH0_RECTCFG_SDVAL get_RECTCFG_SDVAL()
    {
        return DSD_CH0_RECTCFG_SDVAL(RECTCFG & (1u << 15u));
    }

    /**
     * Get RECTCFG's SSRC field.
     */
    DSD_CH0_RECTCFG_SSRC get_RECTCFG_SSRC()
    {
        return DSD_CH0_RECTCFG_SSRC((RECTCFG >> 4u) & 0b11u);
    }

    /**
     * Set RECTCFG's SSRC field.
     */
    inline void set_RECTCFG_SSRC(DSD_CH0_RECTCFG_SSRC value)
    {
        uint32_t curr = RECTCFG;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        RECTCFG = curr;
    }

    /**
     * Get RECTCFG's RFEN bit.
     */
    DSD_CH0_RECTCFG_RFEN get_RECTCFG_RFEN()
    {
        return DSD_CH0_RECTCFG_RFEN(RECTCFG & (1u << 0u));
    }

    /**
     * Set RECTCFG's RFEN bit.
     */
    inline void set_RECTCFG_RFEN()
    {
        RECTCFG |= 1u << 0u;
    }

    /**
     * Clear RECTCFG's RFEN bit.
     */
    inline void clear_RECTCFG_RFEN()
    {
        RECTCFG &= ~(1u << 0u);
    }

    /**
     * Toggle RECTCFG's RFEN bit.
     */
    inline void toggle_RECTCFG_RFEN()
    {
        RECTCFG ^= 1u << 0u;
    }
};

static_assert(sizeof(dsd_ch) == dsd_ch::size);

static volatile dsd_ch *const DSD_CH0 = reinterpret_cast<dsd_ch *>(0x40008100);

static volatile dsd_ch *const DSD_CH1 = reinterpret_cast<dsd_ch *>(0x40008200);

static volatile dsd_ch *const DSD_CH2 = reinterpret_cast<dsd_ch *>(0x40008300);

static volatile dsd_ch *const DSD_CH3 = reinterpret_cast<dsd_ch *>(0x40008400);

}; // namespace XMC4700
