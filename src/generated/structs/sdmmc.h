/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include "../enums/SDMMC_ACMD_ERR_STATUS_ACMD12_NOT_EXEC_ERR.h"
#include "../enums/SDMMC_ACMD_ERR_STATUS_ACMD_CRC_ERR.h"
#include "../enums/SDMMC_ACMD_ERR_STATUS_ACMD_END_BIT_ERR.h"
#include "../enums/SDMMC_ACMD_ERR_STATUS_ACMD_IND_ERR.h"
#include "../enums/SDMMC_ACMD_ERR_STATUS_ACMD_TIMEOUT_ERR.h"
#include "../enums/SDMMC_ACMD_ERR_STATUS_CMD_NOT_ISSUED_BY_ACMD12_ERR.h"
#include "../enums/SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ.h"
#include "../enums/SDMMC_BLOCK_GAP_CTRL_READ_WAIT_CTRL.h"
#include "../enums/SDMMC_BLOCK_GAP_CTRL_STOP_AT_BLOCK_GAP.h"
#include "../enums/SDMMC_CAPABILITIES_ADMA2_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_ASYNC_INT_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_BASE_SD_CLOCK_FREQ.h"
#include "../enums/SDMMC_CAPABILITIES_EXT_MEDIA_BUS_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_HIGH_SPEED_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_HI_CLK_MULT.h"
#include "../enums/SDMMC_CAPABILITIES_HI_DDR50_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_HI_DRV_A_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_HI_DRV_C_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_HI_DRV_D_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_HI_RE_TUNING_MODES.h"
#include "../enums/SDMMC_CAPABILITIES_HI_SDR104_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_HI_SDR50_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_HI_TIM_CNT_RETUNE.h"
#include "../enums/SDMMC_CAPABILITIES_HI_USE_TUNING_SDR50.h"
#include "../enums/SDMMC_CAPABILITIES_MAX_BLOCK_LENGTH.h"
#include "../enums/SDMMC_CAPABILITIES_SDMA_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_SLOT_TYPE.h"
#include "../enums/SDMMC_CAPABILITIES_SUSPEND_RESUME_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_SYSBUS_64_SUPPORT.h"
#include "../enums/SDMMC_CAPABILITIES_TIMEOUT_CLOCK_FREQ.h"
#include "../enums/SDMMC_CAPABILITIES_TIMEOUT_CLOCK_UNIT.h"
#include "../enums/SDMMC_CAPABILITIES_VOLTAGE_SUPPORT_1_8V.h"
#include "../enums/SDMMC_CAPABILITIES_VOLTAGE_SUPPORT_3V.h"
#include "../enums/SDMMC_CAPABILITIES_VOLTAGE_SUPPORT_3_3V.h"
#include "../enums/SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_EN.h"
#include "../enums/SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_STABLE.h"
#include "../enums/SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL.h"
#include "../enums/SDMMC_CLOCK_CTRL_SDCLOCK_EN.h"
#include "../enums/SDMMC_COMMAND_CMD_CRC_CHECK_EN.h"
#include "../enums/SDMMC_COMMAND_CMD_IND_CHECK_EN.h"
#include "../enums/SDMMC_COMMAND_CMD_TYPE.h"
#include "../enums/SDMMC_COMMAND_DATA_PRESENT_SELECT.h"
#include "../enums/SDMMC_COMMAND_RESP_TYPE_SELECT.h"
#include "../enums/SDMMC_DEBUG_SEL_DEBUG_SEL.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_ACMD_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_CEATA_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_CMD_CRC_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_CMD_END_BIT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_CMD_IND_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_CMD_TIMEOUT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_CURRENT_LIMIT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_DATA_CRC_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_DATA_END_BIT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_DATA_TIMEOUT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_ERR_TARGET_RESP_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_NORM_BLOCK_GAP_EVENT_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_NORM_BUFF_READ_READY_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_NORM_BUFF_WRITE_READY_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_NORM_CARD_INS_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_NORM_CARD_INT_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_NORM_CARD_REMOVAL_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_NORM_CMD_COMPLETE_EN.h"
#include "../enums/SDMMC_EN_INT_SIGNAL_NORM_TX_COMPLETE_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_ACMD_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_CEATA_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_CMD_CRC_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_CMD_END_BIT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_CMD_IND_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_CMD_TIMEOUT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_CURRENT_LIMIT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_DATA_CRC_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_DATA_END_BIT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_DATA_TIMEOUT_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_ERR_TARGET_RESP_ERR_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_NORM_BLOCK_GAP_EVENT_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_NORM_BUFF_READ_READY_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_NORM_BUFF_WRITE_READY_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_NORM_CARD_INS_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_NORM_CARD_INT_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_NORM_CARD_REMOVAL_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_NORM_CMD_COMPLETE_EN.h"
#include "../enums/SDMMC_EN_INT_STATUS_NORM_TX_COMPLETE_EN.h"
#include "../enums/SDMMC_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_CRC_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_END_BIT_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_IND_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_NOT_EXEC.h"
#include "../enums/SDMMC_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_TIMEOUT_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ACMD_ERR_STATUS_FE_CMD_NOT_ISSUED_ACMD12_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_ACMD12_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_CEATA_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_CMD_CRC_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_CMD_END_BIT_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_CMD_IND_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_CMD_TIMEOUT_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_CURRENT_LIMIT_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_DATA_CRC_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_DATA_END_BIT_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_DATA_TIMEOUT_ERR.h"
#include "../enums/SDMMC_FORCE_EVENT_ERR_STATUS_FE_TARGET_RESPONSE_ERR.h"
#include "../enums/SDMMC_HOST_CTRL_CARD_DETECT_TEST_LEVEL.h"
#include "../enums/SDMMC_HOST_CTRL_CARD_DET_SIGNAL_DETECT.h"
#include "../enums/SDMMC_HOST_CTRL_DATA_TX_WIDTH.h"
#include "../enums/SDMMC_HOST_CTRL_HIGH_SPEED_EN.h"
#include "../enums/SDMMC_HOST_CTRL_LED_CTRL.h"
#include "../enums/SDMMC_HOST_CTRL_SD_8BIT_MODE.h"
#include "../enums/SDMMC_INT_STATUS_ERR_ACMD_ERR.h"
#include "../enums/SDMMC_INT_STATUS_ERR_CEATA_ERR.h"
#include "../enums/SDMMC_INT_STATUS_ERR_CMD_CRC_ERR.h"
#include "../enums/SDMMC_INT_STATUS_ERR_CMD_END_BIT_ERR.h"
#include "../enums/SDMMC_INT_STATUS_ERR_CMD_IND_ERR.h"
#include "../enums/SDMMC_INT_STATUS_ERR_CMD_TIMEOUT_ERR.h"
#include "../enums/SDMMC_INT_STATUS_ERR_CURRENT_LIMIT_ERR.h"
#include "../enums/SDMMC_INT_STATUS_ERR_DATA_CRC_ERR.h"
#include "../enums/SDMMC_INT_STATUS_ERR_DATA_END_BIT_ERR.h"
#include "../enums/SDMMC_INT_STATUS_ERR_DATA_TIMEOUT_ERR.h"
#include "../enums/SDMMC_INT_STATUS_NORM_BLOCK_GAP_EVENT.h"
#include "../enums/SDMMC_INT_STATUS_NORM_BUFF_READ_READY.h"
#include "../enums/SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY.h"
#include "../enums/SDMMC_INT_STATUS_NORM_CARD_INS.h"
#include "../enums/SDMMC_INT_STATUS_NORM_CARD_INT.h"
#include "../enums/SDMMC_INT_STATUS_NORM_CARD_REMOVAL.h"
#include "../enums/SDMMC_INT_STATUS_NORM_CMD_COMPLETE.h"
#include "../enums/SDMMC_INT_STATUS_NORM_ERR_INT.h"
#include "../enums/SDMMC_INT_STATUS_NORM_TX_COMPLETE.h"
#include "../enums/SDMMC_POWER_CTRL_SD_BUS_POWER.h"
#include "../enums/SDMMC_POWER_CTRL_SD_BUS_VOLTAGE_SEL.h"
#include "../enums/SDMMC_PRESENT_STATE_BUFFER_READ_ENABLE.h"
#include "../enums/SDMMC_PRESENT_STATE_BUFFER_WRITE_ENABLE.h"
#include "../enums/SDMMC_PRESENT_STATE_CARD_DETECT_PIN_LEVEL.h"
#include "../enums/SDMMC_PRESENT_STATE_CARD_INSERTED.h"
#include "../enums/SDMMC_PRESENT_STATE_CARD_STATE_STABLE.h"
#include "../enums/SDMMC_PRESENT_STATE_COMMAND_INHIBIT_DAT.h"
#include "../enums/SDMMC_PRESENT_STATE_DAT_LINE_ACTIVE.h"
#include "../enums/SDMMC_PRESENT_STATE_READ_TRANSFER_ACTIVE.h"
#include "../enums/SDMMC_PRESENT_STATE_WRITE_PROTECT_PIN_LEVEL.h"
#include "../enums/SDMMC_PRESENT_STATE_WRITE_TRANSFER_ACTIVE.h"
#include "../enums/SDMMC_SLOT_INT_STATUS_SLOT_INT_STATUS.h"
#include "../enums/SDMMC_SW_RESET_SW_RST_CMD_LINE.h"
#include "../enums/SDMMC_SW_RESET_SW_RST_DAT_LINE.h"
#include "../enums/SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL.h"
#include "../enums/SDMMC_TRANSFER_MODE_ACMD_EN.h"
#include "../enums/SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN.h"
#include "../enums/SDMMC_TRANSFER_MODE_CMD_COMP_ATA.h"
#include "../enums/SDMMC_TRANSFER_MODE_MULTI_BLOCK_SELECT.h"
#include "../enums/SDMMC_TRANSFER_MODE_TX_DIR_SELECT.h"
#include "../enums/SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INS.h"
#include "../enums/SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INT.h"
#include "../enums/SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_REM.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * SD and Multimediacard Interface
 */
struct [[gnu::packed]] sdmmc
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< sdmmc's identifier. */
    static constexpr std::size_t size = 254; /*!< sdmmc's size in bytes. */

    /* Fields. */
    const uint32_t reserved_padding0 = {};
    uint16_t BLOCK_SIZE;           /*!< (read-write) Block Size Register */
    uint16_t BLOCK_COUNT;          /*!< (read-write) Block Count Register */
    uint32_t ARGUMENT1;            /*!< (read-write) Argument1 Register */
    uint16_t TRANSFER_MODE;        /*!< (read-write) Transfer Mode Register */
    uint16_t COMMAND;              /*!< (read-write) Command Register */
    const uint32_t RESPONSE0 = {}; /*!< (read-only) Response 0 Register */
    const uint32_t RESPONSE2 = {}; /*!< (read-only) Response 2 Register */
    const uint32_t RESPONSE4 = {}; /*!< (read-only) Response 4 Register */
    const uint32_t RESPONSE6 = {}; /*!< (read-only) Response 6 Register */
    uint32_t DATA_BUFFER;          /*!< (read-write) Data Buffer Register */
    const uint32_t PRESENT_STATE =
        {};                 /*!< (read-only) Present State Register */
    uint8_t HOST_CTRL;      /*!< (read-write) Host Control Register */
    uint8_t POWER_CTRL;     /*!< (read-write) Power Control Register */
    uint8_t BLOCK_GAP_CTRL; /*!< (read-write) Block Gap Control Register */
    uint8_t WAKEUP_CTRL;    /*!< (read-write) Wake-up Control Register */
    uint16_t CLOCK_CTRL;    /*!< (read-write) Clock Control Register */
    uint8_t TIMEOUT_CTRL;   /*!< (read-write) Timeout Control Register */
    uint8_t SW_RESET;       /*!< (read-write) Software Reset Register */
    uint16_t
        INT_STATUS_NORM; /*!< (read-write) Normal Interrupt Status Register */
    uint16_t
        INT_STATUS_ERR; /*!< (read-write) Error Interrupt Status Register */
    uint16_t EN_INT_STATUS_NORM; /*!< (read-write) Normal Interrupt Status
                                    Enable Register */
    uint16_t EN_INT_STATUS_ERR; /*!< (read-write) Error Interrupt Status Enable
                                   Register */
    uint16_t EN_INT_SIGNAL_NORM; /*!< (read-write) Normal Interrupt Signal
                                    Enable Register */
    uint16_t EN_INT_SIGNAL_ERR; /*!< (read-write) Error Interrupt Signal Enable
                                   Register */
    const uint16_t ACMD_ERR_STATUS =
        {}; /*!< (read-only) Auto CMD Error Status Register */
    static constexpr std::size_t reserved_padding1_length = 2;
    const uint8_t reserved_padding1[reserved_padding1_length] = {};
    const uint32_t CAPABILITIES = {}; /*!< (read-only) Capabilities Register */
    const uint32_t CAPABILITIES_HI =
        {}; /*!< (read-only) Capabilities Register High */
    const uint32_t MAX_CURRENT_CAP =
        {}; /*!< (read-only) Maximum Current Capabilities Register */
    const uint32_t reserved_padding2 = {};
    uint16_t
        FORCE_EVENT_ACMD_ERR_STATUS; /*!< (write-only) Force Event Register for
                                        Auto CMD Error Status */
    uint16_t FORCE_EVENT_ERR_STATUS; /*!< (write-only) Force Event Register for
                                        Error Interrupt Status */
    static constexpr std::size_t reserved_padding3_length = 8;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t DEBUG_SEL; /*!< (write-only) Debug Selection Register */
    static constexpr std::size_t reserved_padding4_length = 33;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    const uint16_t SLOT_INT_STATUS =
        {}; /*!< (read-only) Slot Interrupt Status Register */

    /* Methods. */

    /**
     * Get BLOCK_SIZE's TX_BLOCK_SIZE field.
     */
    uint16_t get_BLOCK_SIZE_TX_BLOCK_SIZE()
    {
        return (BLOCK_SIZE >> 0u) & 0b111111111111u;
    }

    /**
     * Set BLOCK_SIZE's TX_BLOCK_SIZE field.
     */
    inline void set_BLOCK_SIZE_TX_BLOCK_SIZE(uint16_t value)
    {
        uint16_t curr = BLOCK_SIZE;

        curr &= ~(0b111111111111u << 0u);
        curr |= (value & 0b111111111111u) << 0u;

        BLOCK_SIZE = curr;
    }

    /**
     * Get BLOCK_SIZE's TX_BLOCK_SIZE_12 bit.
     */
    bool get_BLOCK_SIZE_TX_BLOCK_SIZE_12()
    {
        return BLOCK_SIZE & (1u << 15u);
    }

    /**
     * Set BLOCK_SIZE's TX_BLOCK_SIZE_12 bit.
     */
    inline void set_BLOCK_SIZE_TX_BLOCK_SIZE_12()
    {
        BLOCK_SIZE |= 1u << 15u;
    }

    /**
     * Clear BLOCK_SIZE's TX_BLOCK_SIZE_12 bit.
     */
    inline void clear_BLOCK_SIZE_TX_BLOCK_SIZE_12()
    {
        BLOCK_SIZE &= ~(1u << 15u);
    }

    /**
     * Toggle BLOCK_SIZE's TX_BLOCK_SIZE_12 bit.
     */
    inline void toggle_BLOCK_SIZE_TX_BLOCK_SIZE_12()
    {
        BLOCK_SIZE ^= 1u << 15u;
    }

    /**
     * Get BLOCK_COUNT's BLOCK_COUNT field.
     */
    uint16_t get_BLOCK_COUNT_BLOCK_COUNT()
    {
        return (BLOCK_COUNT >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set BLOCK_COUNT's BLOCK_COUNT field.
     */
    inline void set_BLOCK_COUNT_BLOCK_COUNT(uint16_t value)
    {
        uint16_t curr = BLOCK_COUNT;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        BLOCK_COUNT = curr;
    }

    /**
     * Get ARGUMENT1's ARGUMENT1 field.
     */
    uint32_t get_ARGUMENT1_ARGUMENT1()
    {
        return (ARGUMENT1 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set ARGUMENT1's ARGUMENT1 field.
     */
    inline void set_ARGUMENT1_ARGUMENT1(uint32_t value)
    {
        uint32_t curr = ARGUMENT1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        ARGUMENT1 = curr;
    }

    /**
     * Get TRANSFER_MODE's BLOCK_COUNT_EN bit.
     */
    SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN get_TRANSFER_MODE_BLOCK_COUNT_EN()
    {
        return SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN(TRANSFER_MODE & (1u << 1u));
    }

    /**
     * Set TRANSFER_MODE's BLOCK_COUNT_EN bit.
     */
    inline void set_TRANSFER_MODE_BLOCK_COUNT_EN()
    {
        TRANSFER_MODE |= 1u << 1u;
    }

    /**
     * Clear TRANSFER_MODE's BLOCK_COUNT_EN bit.
     */
    inline void clear_TRANSFER_MODE_BLOCK_COUNT_EN()
    {
        TRANSFER_MODE &= ~(1u << 1u);
    }

    /**
     * Toggle TRANSFER_MODE's BLOCK_COUNT_EN bit.
     */
    inline void toggle_TRANSFER_MODE_BLOCK_COUNT_EN()
    {
        TRANSFER_MODE ^= 1u << 1u;
    }

    /**
     * Get TRANSFER_MODE's ACMD_EN field.
     */
    SDMMC_TRANSFER_MODE_ACMD_EN get_TRANSFER_MODE_ACMD_EN()
    {
        return SDMMC_TRANSFER_MODE_ACMD_EN((TRANSFER_MODE >> 2u) & 0b11u);
    }

    /**
     * Set TRANSFER_MODE's ACMD_EN field.
     */
    inline void set_TRANSFER_MODE_ACMD_EN(SDMMC_TRANSFER_MODE_ACMD_EN value)
    {
        uint16_t curr = TRANSFER_MODE;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        TRANSFER_MODE = curr;
    }

    /**
     * Get TRANSFER_MODE's TX_DIR_SELECT bit.
     */
    SDMMC_TRANSFER_MODE_TX_DIR_SELECT get_TRANSFER_MODE_TX_DIR_SELECT()
    {
        return SDMMC_TRANSFER_MODE_TX_DIR_SELECT(TRANSFER_MODE & (1u << 4u));
    }

    /**
     * Set TRANSFER_MODE's TX_DIR_SELECT bit.
     */
    inline void set_TRANSFER_MODE_TX_DIR_SELECT()
    {
        TRANSFER_MODE |= 1u << 4u;
    }

    /**
     * Clear TRANSFER_MODE's TX_DIR_SELECT bit.
     */
    inline void clear_TRANSFER_MODE_TX_DIR_SELECT()
    {
        TRANSFER_MODE &= ~(1u << 4u);
    }

    /**
     * Toggle TRANSFER_MODE's TX_DIR_SELECT bit.
     */
    inline void toggle_TRANSFER_MODE_TX_DIR_SELECT()
    {
        TRANSFER_MODE ^= 1u << 4u;
    }

    /**
     * Get TRANSFER_MODE's MULTI_BLOCK_SELECT bit.
     */
    SDMMC_TRANSFER_MODE_MULTI_BLOCK_SELECT
    get_TRANSFER_MODE_MULTI_BLOCK_SELECT()
    {
        return SDMMC_TRANSFER_MODE_MULTI_BLOCK_SELECT(TRANSFER_MODE &
                                                      (1u << 5u));
    }

    /**
     * Set TRANSFER_MODE's MULTI_BLOCK_SELECT bit.
     */
    inline void set_TRANSFER_MODE_MULTI_BLOCK_SELECT()
    {
        TRANSFER_MODE |= 1u << 5u;
    }

    /**
     * Clear TRANSFER_MODE's MULTI_BLOCK_SELECT bit.
     */
    inline void clear_TRANSFER_MODE_MULTI_BLOCK_SELECT()
    {
        TRANSFER_MODE &= ~(1u << 5u);
    }

    /**
     * Toggle TRANSFER_MODE's MULTI_BLOCK_SELECT bit.
     */
    inline void toggle_TRANSFER_MODE_MULTI_BLOCK_SELECT()
    {
        TRANSFER_MODE ^= 1u << 5u;
    }

    /**
     * Get TRANSFER_MODE's CMD_COMP_ATA bit.
     */
    SDMMC_TRANSFER_MODE_CMD_COMP_ATA get_TRANSFER_MODE_CMD_COMP_ATA()
    {
        return SDMMC_TRANSFER_MODE_CMD_COMP_ATA(TRANSFER_MODE & (1u << 6u));
    }

    /**
     * Set TRANSFER_MODE's CMD_COMP_ATA bit.
     */
    inline void set_TRANSFER_MODE_CMD_COMP_ATA()
    {
        TRANSFER_MODE |= 1u << 6u;
    }

    /**
     * Clear TRANSFER_MODE's CMD_COMP_ATA bit.
     */
    inline void clear_TRANSFER_MODE_CMD_COMP_ATA()
    {
        TRANSFER_MODE &= ~(1u << 6u);
    }

    /**
     * Toggle TRANSFER_MODE's CMD_COMP_ATA bit.
     */
    inline void toggle_TRANSFER_MODE_CMD_COMP_ATA()
    {
        TRANSFER_MODE ^= 1u << 6u;
    }

    /**
     * Get COMMAND's RESP_TYPE_SELECT field.
     */
    SDMMC_COMMAND_RESP_TYPE_SELECT get_COMMAND_RESP_TYPE_SELECT()
    {
        return SDMMC_COMMAND_RESP_TYPE_SELECT((COMMAND >> 0u) & 0b11u);
    }

    /**
     * Set COMMAND's RESP_TYPE_SELECT field.
     */
    inline void set_COMMAND_RESP_TYPE_SELECT(
        SDMMC_COMMAND_RESP_TYPE_SELECT value)
    {
        uint16_t curr = COMMAND;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        COMMAND = curr;
    }

    /**
     * Get COMMAND's CMD_CRC_CHECK_EN bit.
     */
    SDMMC_COMMAND_CMD_CRC_CHECK_EN get_COMMAND_CMD_CRC_CHECK_EN()
    {
        return SDMMC_COMMAND_CMD_CRC_CHECK_EN(COMMAND & (1u << 3u));
    }

    /**
     * Set COMMAND's CMD_CRC_CHECK_EN bit.
     */
    inline void set_COMMAND_CMD_CRC_CHECK_EN()
    {
        COMMAND |= 1u << 3u;
    }

    /**
     * Clear COMMAND's CMD_CRC_CHECK_EN bit.
     */
    inline void clear_COMMAND_CMD_CRC_CHECK_EN()
    {
        COMMAND &= ~(1u << 3u);
    }

    /**
     * Toggle COMMAND's CMD_CRC_CHECK_EN bit.
     */
    inline void toggle_COMMAND_CMD_CRC_CHECK_EN()
    {
        COMMAND ^= 1u << 3u;
    }

    /**
     * Get COMMAND's CMD_IND_CHECK_EN bit.
     */
    SDMMC_COMMAND_CMD_IND_CHECK_EN get_COMMAND_CMD_IND_CHECK_EN()
    {
        return SDMMC_COMMAND_CMD_IND_CHECK_EN(COMMAND & (1u << 4u));
    }

    /**
     * Set COMMAND's CMD_IND_CHECK_EN bit.
     */
    inline void set_COMMAND_CMD_IND_CHECK_EN()
    {
        COMMAND |= 1u << 4u;
    }

    /**
     * Clear COMMAND's CMD_IND_CHECK_EN bit.
     */
    inline void clear_COMMAND_CMD_IND_CHECK_EN()
    {
        COMMAND &= ~(1u << 4u);
    }

    /**
     * Toggle COMMAND's CMD_IND_CHECK_EN bit.
     */
    inline void toggle_COMMAND_CMD_IND_CHECK_EN()
    {
        COMMAND ^= 1u << 4u;
    }

    /**
     * Get COMMAND's DATA_PRESENT_SELECT bit.
     */
    SDMMC_COMMAND_DATA_PRESENT_SELECT get_COMMAND_DATA_PRESENT_SELECT()
    {
        return SDMMC_COMMAND_DATA_PRESENT_SELECT(COMMAND & (1u << 5u));
    }

    /**
     * Set COMMAND's DATA_PRESENT_SELECT bit.
     */
    inline void set_COMMAND_DATA_PRESENT_SELECT()
    {
        COMMAND |= 1u << 5u;
    }

    /**
     * Clear COMMAND's DATA_PRESENT_SELECT bit.
     */
    inline void clear_COMMAND_DATA_PRESENT_SELECT()
    {
        COMMAND &= ~(1u << 5u);
    }

    /**
     * Toggle COMMAND's DATA_PRESENT_SELECT bit.
     */
    inline void toggle_COMMAND_DATA_PRESENT_SELECT()
    {
        COMMAND ^= 1u << 5u;
    }

    /**
     * Get COMMAND's CMD_TYPE field.
     */
    SDMMC_COMMAND_CMD_TYPE get_COMMAND_CMD_TYPE()
    {
        return SDMMC_COMMAND_CMD_TYPE((COMMAND >> 6u) & 0b11u);
    }

    /**
     * Set COMMAND's CMD_TYPE field.
     */
    inline void set_COMMAND_CMD_TYPE(SDMMC_COMMAND_CMD_TYPE value)
    {
        uint16_t curr = COMMAND;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        COMMAND = curr;
    }

    /**
     * Get COMMAND's CMD_IND field.
     */
    uint8_t get_COMMAND_CMD_IND()
    {
        return (COMMAND >> 8u) & 0b111111u;
    }

    /**
     * Set COMMAND's CMD_IND field.
     */
    inline void set_COMMAND_CMD_IND(uint8_t value)
    {
        uint16_t curr = COMMAND;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        COMMAND = curr;
    }

    /**
     * Get RESPONSE0's RESPONSE0 field.
     */
    uint16_t get_RESPONSE0_RESPONSE0()
    {
        return (RESPONSE0 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RESPONSE0's RESPONSE1 field.
     */
    uint16_t get_RESPONSE0_RESPONSE1()
    {
        return (RESPONSE0 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get RESPONSE2's RESPONSE2 field.
     */
    uint16_t get_RESPONSE2_RESPONSE2()
    {
        return (RESPONSE2 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RESPONSE2's RESPONSE3 field.
     */
    uint16_t get_RESPONSE2_RESPONSE3()
    {
        return (RESPONSE2 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get RESPONSE4's RESPONSE4 field.
     */
    uint16_t get_RESPONSE4_RESPONSE4()
    {
        return (RESPONSE4 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RESPONSE4's RESPONSE5 field.
     */
    uint16_t get_RESPONSE4_RESPONSE5()
    {
        return (RESPONSE4 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get RESPONSE6's RESPONSE6 field.
     */
    uint16_t get_RESPONSE6_RESPONSE6()
    {
        return (RESPONSE6 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RESPONSE6's RESPONSE7 field.
     */
    uint16_t get_RESPONSE6_RESPONSE7()
    {
        return (RESPONSE6 >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get DATA_BUFFER's DATA_BUFFER field.
     */
    uint32_t get_DATA_BUFFER_DATA_BUFFER()
    {
        return (DATA_BUFFER >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DATA_BUFFER's DATA_BUFFER field.
     */
    inline void set_DATA_BUFFER_DATA_BUFFER(uint32_t value)
    {
        uint32_t curr = DATA_BUFFER;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DATA_BUFFER = curr;
    }

    /**
     * Get PRESENT_STATE's COMMAND_INHIBIT_CMD bit.
     */
    bool get_PRESENT_STATE_COMMAND_INHIBIT_CMD()
    {
        return PRESENT_STATE & (1u << 0u);
    }

    /**
     * Get PRESENT_STATE's COMMAND_INHIBIT_DAT bit.
     */
    SDMMC_PRESENT_STATE_COMMAND_INHIBIT_DAT
    get_PRESENT_STATE_COMMAND_INHIBIT_DAT()
    {
        return SDMMC_PRESENT_STATE_COMMAND_INHIBIT_DAT(PRESENT_STATE &
                                                       (1u << 1u));
    }

    /**
     * Get PRESENT_STATE's DAT_LINE_ACTIVE bit.
     */
    SDMMC_PRESENT_STATE_DAT_LINE_ACTIVE get_PRESENT_STATE_DAT_LINE_ACTIVE()
    {
        return SDMMC_PRESENT_STATE_DAT_LINE_ACTIVE(PRESENT_STATE & (1u << 2u));
    }

    /**
     * Get PRESENT_STATE's WRITE_TRANSFER_ACTIVE bit.
     */
    SDMMC_PRESENT_STATE_WRITE_TRANSFER_ACTIVE
    get_PRESENT_STATE_WRITE_TRANSFER_ACTIVE()
    {
        return SDMMC_PRESENT_STATE_WRITE_TRANSFER_ACTIVE(PRESENT_STATE &
                                                         (1u << 8u));
    }

    /**
     * Get PRESENT_STATE's READ_TRANSFER_ACTIVE bit.
     */
    SDMMC_PRESENT_STATE_READ_TRANSFER_ACTIVE
    get_PRESENT_STATE_READ_TRANSFER_ACTIVE()
    {
        return SDMMC_PRESENT_STATE_READ_TRANSFER_ACTIVE(PRESENT_STATE &
                                                        (1u << 9u));
    }

    /**
     * Get PRESENT_STATE's BUFFER_WRITE_ENABLE bit.
     */
    SDMMC_PRESENT_STATE_BUFFER_WRITE_ENABLE
    get_PRESENT_STATE_BUFFER_WRITE_ENABLE()
    {
        return SDMMC_PRESENT_STATE_BUFFER_WRITE_ENABLE(PRESENT_STATE &
                                                       (1u << 10u));
    }

    /**
     * Get PRESENT_STATE's BUFFER_READ_ENABLE bit.
     */
    SDMMC_PRESENT_STATE_BUFFER_READ_ENABLE
    get_PRESENT_STATE_BUFFER_READ_ENABLE()
    {
        return SDMMC_PRESENT_STATE_BUFFER_READ_ENABLE(PRESENT_STATE &
                                                      (1u << 11u));
    }

    /**
     * Get PRESENT_STATE's CARD_INSERTED bit.
     */
    SDMMC_PRESENT_STATE_CARD_INSERTED get_PRESENT_STATE_CARD_INSERTED()
    {
        return SDMMC_PRESENT_STATE_CARD_INSERTED(PRESENT_STATE & (1u << 16u));
    }

    /**
     * Get PRESENT_STATE's CARD_STATE_STABLE bit.
     */
    SDMMC_PRESENT_STATE_CARD_STATE_STABLE get_PRESENT_STATE_CARD_STATE_STABLE()
    {
        return SDMMC_PRESENT_STATE_CARD_STATE_STABLE(PRESENT_STATE &
                                                     (1u << 17u));
    }

    /**
     * Get PRESENT_STATE's CARD_DETECT_PIN_LEVEL bit.
     */
    SDMMC_PRESENT_STATE_CARD_DETECT_PIN_LEVEL
    get_PRESENT_STATE_CARD_DETECT_PIN_LEVEL()
    {
        return SDMMC_PRESENT_STATE_CARD_DETECT_PIN_LEVEL(PRESENT_STATE &
                                                         (1u << 18u));
    }

    /**
     * Get PRESENT_STATE's WRITE_PROTECT_PIN_LEVEL bit.
     */
    SDMMC_PRESENT_STATE_WRITE_PROTECT_PIN_LEVEL
    get_PRESENT_STATE_WRITE_PROTECT_PIN_LEVEL()
    {
        return SDMMC_PRESENT_STATE_WRITE_PROTECT_PIN_LEVEL(PRESENT_STATE &
                                                           (1u << 19u));
    }

    /**
     * Get PRESENT_STATE's DAT_3_0_PIN_LEVEL field.
     */
    uint8_t get_PRESENT_STATE_DAT_3_0_PIN_LEVEL()
    {
        return (PRESENT_STATE >> 20u) & 0b1111u;
    }

    /**
     * Get PRESENT_STATE's CMD_LINE_LEVEL bit.
     */
    bool get_PRESENT_STATE_CMD_LINE_LEVEL()
    {
        return PRESENT_STATE & (1u << 24u);
    }

    /**
     * Get PRESENT_STATE's DAT_7_4_PIN_LEVEL field.
     */
    uint8_t get_PRESENT_STATE_DAT_7_4_PIN_LEVEL()
    {
        return (PRESENT_STATE >> 25u) & 0b1111u;
    }

    /**
     * Get HOST_CTRL's LED_CTRL bit.
     */
    SDMMC_HOST_CTRL_LED_CTRL get_HOST_CTRL_LED_CTRL()
    {
        return SDMMC_HOST_CTRL_LED_CTRL(HOST_CTRL & (1u << 0u));
    }

    /**
     * Set HOST_CTRL's LED_CTRL bit.
     */
    inline void set_HOST_CTRL_LED_CTRL()
    {
        HOST_CTRL |= 1u << 0u;
    }

    /**
     * Clear HOST_CTRL's LED_CTRL bit.
     */
    inline void clear_HOST_CTRL_LED_CTRL()
    {
        HOST_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle HOST_CTRL's LED_CTRL bit.
     */
    inline void toggle_HOST_CTRL_LED_CTRL()
    {
        HOST_CTRL ^= 1u << 0u;
    }

    /**
     * Get HOST_CTRL's DATA_TX_WIDTH bit.
     */
    SDMMC_HOST_CTRL_DATA_TX_WIDTH get_HOST_CTRL_DATA_TX_WIDTH()
    {
        return SDMMC_HOST_CTRL_DATA_TX_WIDTH(HOST_CTRL & (1u << 1u));
    }

    /**
     * Set HOST_CTRL's DATA_TX_WIDTH bit.
     */
    inline void set_HOST_CTRL_DATA_TX_WIDTH()
    {
        HOST_CTRL |= 1u << 1u;
    }

    /**
     * Clear HOST_CTRL's DATA_TX_WIDTH bit.
     */
    inline void clear_HOST_CTRL_DATA_TX_WIDTH()
    {
        HOST_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle HOST_CTRL's DATA_TX_WIDTH bit.
     */
    inline void toggle_HOST_CTRL_DATA_TX_WIDTH()
    {
        HOST_CTRL ^= 1u << 1u;
    }

    /**
     * Get HOST_CTRL's HIGH_SPEED_EN bit.
     */
    SDMMC_HOST_CTRL_HIGH_SPEED_EN get_HOST_CTRL_HIGH_SPEED_EN()
    {
        return SDMMC_HOST_CTRL_HIGH_SPEED_EN(HOST_CTRL & (1u << 2u));
    }

    /**
     * Set HOST_CTRL's HIGH_SPEED_EN bit.
     */
    inline void set_HOST_CTRL_HIGH_SPEED_EN()
    {
        HOST_CTRL |= 1u << 2u;
    }

    /**
     * Clear HOST_CTRL's HIGH_SPEED_EN bit.
     */
    inline void clear_HOST_CTRL_HIGH_SPEED_EN()
    {
        HOST_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle HOST_CTRL's HIGH_SPEED_EN bit.
     */
    inline void toggle_HOST_CTRL_HIGH_SPEED_EN()
    {
        HOST_CTRL ^= 1u << 2u;
    }

    /**
     * Get HOST_CTRL's SD_8BIT_MODE bit.
     */
    SDMMC_HOST_CTRL_SD_8BIT_MODE get_HOST_CTRL_SD_8BIT_MODE()
    {
        return SDMMC_HOST_CTRL_SD_8BIT_MODE(HOST_CTRL & (1u << 5u));
    }

    /**
     * Set HOST_CTRL's SD_8BIT_MODE bit.
     */
    inline void set_HOST_CTRL_SD_8BIT_MODE()
    {
        HOST_CTRL |= 1u << 5u;
    }

    /**
     * Clear HOST_CTRL's SD_8BIT_MODE bit.
     */
    inline void clear_HOST_CTRL_SD_8BIT_MODE()
    {
        HOST_CTRL &= ~(1u << 5u);
    }

    /**
     * Toggle HOST_CTRL's SD_8BIT_MODE bit.
     */
    inline void toggle_HOST_CTRL_SD_8BIT_MODE()
    {
        HOST_CTRL ^= 1u << 5u;
    }

    /**
     * Get HOST_CTRL's CARD_DETECT_TEST_LEVEL bit.
     */
    SDMMC_HOST_CTRL_CARD_DETECT_TEST_LEVEL
    get_HOST_CTRL_CARD_DETECT_TEST_LEVEL()
    {
        return SDMMC_HOST_CTRL_CARD_DETECT_TEST_LEVEL(HOST_CTRL & (1u << 6u));
    }

    /**
     * Set HOST_CTRL's CARD_DETECT_TEST_LEVEL bit.
     */
    inline void set_HOST_CTRL_CARD_DETECT_TEST_LEVEL()
    {
        HOST_CTRL |= 1u << 6u;
    }

    /**
     * Clear HOST_CTRL's CARD_DETECT_TEST_LEVEL bit.
     */
    inline void clear_HOST_CTRL_CARD_DETECT_TEST_LEVEL()
    {
        HOST_CTRL &= ~(1u << 6u);
    }

    /**
     * Toggle HOST_CTRL's CARD_DETECT_TEST_LEVEL bit.
     */
    inline void toggle_HOST_CTRL_CARD_DETECT_TEST_LEVEL()
    {
        HOST_CTRL ^= 1u << 6u;
    }

    /**
     * Get HOST_CTRL's CARD_DET_SIGNAL_DETECT bit.
     */
    SDMMC_HOST_CTRL_CARD_DET_SIGNAL_DETECT
    get_HOST_CTRL_CARD_DET_SIGNAL_DETECT()
    {
        return SDMMC_HOST_CTRL_CARD_DET_SIGNAL_DETECT(HOST_CTRL & (1u << 7u));
    }

    /**
     * Set HOST_CTRL's CARD_DET_SIGNAL_DETECT bit.
     */
    inline void set_HOST_CTRL_CARD_DET_SIGNAL_DETECT()
    {
        HOST_CTRL |= 1u << 7u;
    }

    /**
     * Clear HOST_CTRL's CARD_DET_SIGNAL_DETECT bit.
     */
    inline void clear_HOST_CTRL_CARD_DET_SIGNAL_DETECT()
    {
        HOST_CTRL &= ~(1u << 7u);
    }

    /**
     * Toggle HOST_CTRL's CARD_DET_SIGNAL_DETECT bit.
     */
    inline void toggle_HOST_CTRL_CARD_DET_SIGNAL_DETECT()
    {
        HOST_CTRL ^= 1u << 7u;
    }

    /**
     * Get POWER_CTRL's SD_BUS_POWER bit.
     */
    SDMMC_POWER_CTRL_SD_BUS_POWER get_POWER_CTRL_SD_BUS_POWER()
    {
        return SDMMC_POWER_CTRL_SD_BUS_POWER(POWER_CTRL & (1u << 0u));
    }

    /**
     * Set POWER_CTRL's SD_BUS_POWER bit.
     */
    inline void set_POWER_CTRL_SD_BUS_POWER()
    {
        POWER_CTRL |= 1u << 0u;
    }

    /**
     * Clear POWER_CTRL's SD_BUS_POWER bit.
     */
    inline void clear_POWER_CTRL_SD_BUS_POWER()
    {
        POWER_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle POWER_CTRL's SD_BUS_POWER bit.
     */
    inline void toggle_POWER_CTRL_SD_BUS_POWER()
    {
        POWER_CTRL ^= 1u << 0u;
    }

    /**
     * Get POWER_CTRL's SD_BUS_VOLTAGE_SEL field.
     */
    SDMMC_POWER_CTRL_SD_BUS_VOLTAGE_SEL get_POWER_CTRL_SD_BUS_VOLTAGE_SEL()
    {
        return SDMMC_POWER_CTRL_SD_BUS_VOLTAGE_SEL((POWER_CTRL >> 1u) &
                                                   0b111u);
    }

    /**
     * Set POWER_CTRL's SD_BUS_VOLTAGE_SEL field.
     */
    inline void set_POWER_CTRL_SD_BUS_VOLTAGE_SEL(
        SDMMC_POWER_CTRL_SD_BUS_VOLTAGE_SEL value)
    {
        uint8_t curr = POWER_CTRL;

        curr &= ~(0b111u << 1u);
        curr |= (std::to_underlying(value) & 0b111u) << 1u;

        POWER_CTRL = curr;
    }

    /**
     * Get POWER_CTRL's HARDWARE_RESET bit.
     */
    bool get_POWER_CTRL_HARDWARE_RESET()
    {
        return POWER_CTRL & (1u << 4u);
    }

    /**
     * Set POWER_CTRL's HARDWARE_RESET bit.
     */
    inline void set_POWER_CTRL_HARDWARE_RESET()
    {
        POWER_CTRL |= 1u << 4u;
    }

    /**
     * Clear POWER_CTRL's HARDWARE_RESET bit.
     */
    inline void clear_POWER_CTRL_HARDWARE_RESET()
    {
        POWER_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle POWER_CTRL's HARDWARE_RESET bit.
     */
    inline void toggle_POWER_CTRL_HARDWARE_RESET()
    {
        POWER_CTRL ^= 1u << 4u;
    }

    /**
     * Get BLOCK_GAP_CTRL's STOP_AT_BLOCK_GAP bit.
     */
    SDMMC_BLOCK_GAP_CTRL_STOP_AT_BLOCK_GAP
    get_BLOCK_GAP_CTRL_STOP_AT_BLOCK_GAP()
    {
        return SDMMC_BLOCK_GAP_CTRL_STOP_AT_BLOCK_GAP(BLOCK_GAP_CTRL &
                                                      (1u << 0u));
    }

    /**
     * Set BLOCK_GAP_CTRL's STOP_AT_BLOCK_GAP bit.
     */
    inline void set_BLOCK_GAP_CTRL_STOP_AT_BLOCK_GAP()
    {
        BLOCK_GAP_CTRL |= 1u << 0u;
    }

    /**
     * Clear BLOCK_GAP_CTRL's STOP_AT_BLOCK_GAP bit.
     */
    inline void clear_BLOCK_GAP_CTRL_STOP_AT_BLOCK_GAP()
    {
        BLOCK_GAP_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle BLOCK_GAP_CTRL's STOP_AT_BLOCK_GAP bit.
     */
    inline void toggle_BLOCK_GAP_CTRL_STOP_AT_BLOCK_GAP()
    {
        BLOCK_GAP_CTRL ^= 1u << 0u;
    }

    /**
     * Get BLOCK_GAP_CTRL's CONTINUE_REQ bit.
     */
    SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ get_BLOCK_GAP_CTRL_CONTINUE_REQ()
    {
        return SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ(BLOCK_GAP_CTRL & (1u << 1u));
    }

    /**
     * Set BLOCK_GAP_CTRL's CONTINUE_REQ bit.
     */
    inline void set_BLOCK_GAP_CTRL_CONTINUE_REQ()
    {
        BLOCK_GAP_CTRL |= 1u << 1u;
    }

    /**
     * Clear BLOCK_GAP_CTRL's CONTINUE_REQ bit.
     */
    inline void clear_BLOCK_GAP_CTRL_CONTINUE_REQ()
    {
        BLOCK_GAP_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle BLOCK_GAP_CTRL's CONTINUE_REQ bit.
     */
    inline void toggle_BLOCK_GAP_CTRL_CONTINUE_REQ()
    {
        BLOCK_GAP_CTRL ^= 1u << 1u;
    }

    /**
     * Get BLOCK_GAP_CTRL's READ_WAIT_CTRL bit.
     */
    SDMMC_BLOCK_GAP_CTRL_READ_WAIT_CTRL get_BLOCK_GAP_CTRL_READ_WAIT_CTRL()
    {
        return SDMMC_BLOCK_GAP_CTRL_READ_WAIT_CTRL(BLOCK_GAP_CTRL &
                                                   (1u << 2u));
    }

    /**
     * Set BLOCK_GAP_CTRL's READ_WAIT_CTRL bit.
     */
    inline void set_BLOCK_GAP_CTRL_READ_WAIT_CTRL()
    {
        BLOCK_GAP_CTRL |= 1u << 2u;
    }

    /**
     * Clear BLOCK_GAP_CTRL's READ_WAIT_CTRL bit.
     */
    inline void clear_BLOCK_GAP_CTRL_READ_WAIT_CTRL()
    {
        BLOCK_GAP_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle BLOCK_GAP_CTRL's READ_WAIT_CTRL bit.
     */
    inline void toggle_BLOCK_GAP_CTRL_READ_WAIT_CTRL()
    {
        BLOCK_GAP_CTRL ^= 1u << 2u;
    }

    /**
     * Get BLOCK_GAP_CTRL's INT_AT_BLOCK_GAP bit.
     */
    bool get_BLOCK_GAP_CTRL_INT_AT_BLOCK_GAP()
    {
        return BLOCK_GAP_CTRL & (1u << 3u);
    }

    /**
     * Set BLOCK_GAP_CTRL's INT_AT_BLOCK_GAP bit.
     */
    inline void set_BLOCK_GAP_CTRL_INT_AT_BLOCK_GAP()
    {
        BLOCK_GAP_CTRL |= 1u << 3u;
    }

    /**
     * Clear BLOCK_GAP_CTRL's INT_AT_BLOCK_GAP bit.
     */
    inline void clear_BLOCK_GAP_CTRL_INT_AT_BLOCK_GAP()
    {
        BLOCK_GAP_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle BLOCK_GAP_CTRL's INT_AT_BLOCK_GAP bit.
     */
    inline void toggle_BLOCK_GAP_CTRL_INT_AT_BLOCK_GAP()
    {
        BLOCK_GAP_CTRL ^= 1u << 3u;
    }

    /**
     * Get WAKEUP_CTRL's WAKEUP_EVENT_EN_INT bit.
     */
    SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INT get_WAKEUP_CTRL_WAKEUP_EVENT_EN_INT()
    {
        return SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INT(WAKEUP_CTRL & (1u << 0u));
    }

    /**
     * Set WAKEUP_CTRL's WAKEUP_EVENT_EN_INT bit.
     */
    inline void set_WAKEUP_CTRL_WAKEUP_EVENT_EN_INT()
    {
        WAKEUP_CTRL |= 1u << 0u;
    }

    /**
     * Clear WAKEUP_CTRL's WAKEUP_EVENT_EN_INT bit.
     */
    inline void clear_WAKEUP_CTRL_WAKEUP_EVENT_EN_INT()
    {
        WAKEUP_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle WAKEUP_CTRL's WAKEUP_EVENT_EN_INT bit.
     */
    inline void toggle_WAKEUP_CTRL_WAKEUP_EVENT_EN_INT()
    {
        WAKEUP_CTRL ^= 1u << 0u;
    }

    /**
     * Get WAKEUP_CTRL's WAKEUP_EVENT_EN_INS bit.
     */
    SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INS get_WAKEUP_CTRL_WAKEUP_EVENT_EN_INS()
    {
        return SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INS(WAKEUP_CTRL & (1u << 1u));
    }

    /**
     * Set WAKEUP_CTRL's WAKEUP_EVENT_EN_INS bit.
     */
    inline void set_WAKEUP_CTRL_WAKEUP_EVENT_EN_INS()
    {
        WAKEUP_CTRL |= 1u << 1u;
    }

    /**
     * Clear WAKEUP_CTRL's WAKEUP_EVENT_EN_INS bit.
     */
    inline void clear_WAKEUP_CTRL_WAKEUP_EVENT_EN_INS()
    {
        WAKEUP_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle WAKEUP_CTRL's WAKEUP_EVENT_EN_INS bit.
     */
    inline void toggle_WAKEUP_CTRL_WAKEUP_EVENT_EN_INS()
    {
        WAKEUP_CTRL ^= 1u << 1u;
    }

    /**
     * Get WAKEUP_CTRL's WAKEUP_EVENT_EN_REM bit.
     */
    SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_REM get_WAKEUP_CTRL_WAKEUP_EVENT_EN_REM()
    {
        return SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_REM(WAKEUP_CTRL & (1u << 2u));
    }

    /**
     * Set WAKEUP_CTRL's WAKEUP_EVENT_EN_REM bit.
     */
    inline void set_WAKEUP_CTRL_WAKEUP_EVENT_EN_REM()
    {
        WAKEUP_CTRL |= 1u << 2u;
    }

    /**
     * Clear WAKEUP_CTRL's WAKEUP_EVENT_EN_REM bit.
     */
    inline void clear_WAKEUP_CTRL_WAKEUP_EVENT_EN_REM()
    {
        WAKEUP_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle WAKEUP_CTRL's WAKEUP_EVENT_EN_REM bit.
     */
    inline void toggle_WAKEUP_CTRL_WAKEUP_EVENT_EN_REM()
    {
        WAKEUP_CTRL ^= 1u << 2u;
    }

    /**
     * Get CLOCK_CTRL's INTERNAL_CLOCK_EN bit.
     */
    SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_EN get_CLOCK_CTRL_INTERNAL_CLOCK_EN()
    {
        return SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_EN(CLOCK_CTRL & (1u << 0u));
    }

    /**
     * Set CLOCK_CTRL's INTERNAL_CLOCK_EN bit.
     */
    inline void set_CLOCK_CTRL_INTERNAL_CLOCK_EN()
    {
        CLOCK_CTRL |= 1u << 0u;
    }

    /**
     * Clear CLOCK_CTRL's INTERNAL_CLOCK_EN bit.
     */
    inline void clear_CLOCK_CTRL_INTERNAL_CLOCK_EN()
    {
        CLOCK_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle CLOCK_CTRL's INTERNAL_CLOCK_EN bit.
     */
    inline void toggle_CLOCK_CTRL_INTERNAL_CLOCK_EN()
    {
        CLOCK_CTRL ^= 1u << 0u;
    }

    /**
     * Get CLOCK_CTRL's INTERNAL_CLOCK_STABLE bit.
     */
    SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_STABLE
    get_CLOCK_CTRL_INTERNAL_CLOCK_STABLE()
    {
        return SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_STABLE(CLOCK_CTRL & (1u << 1u));
    }

    /**
     * Get CLOCK_CTRL's SDCLOCK_EN bit.
     */
    SDMMC_CLOCK_CTRL_SDCLOCK_EN get_CLOCK_CTRL_SDCLOCK_EN()
    {
        return SDMMC_CLOCK_CTRL_SDCLOCK_EN(CLOCK_CTRL & (1u << 2u));
    }

    /**
     * Set CLOCK_CTRL's SDCLOCK_EN bit.
     */
    inline void set_CLOCK_CTRL_SDCLOCK_EN()
    {
        CLOCK_CTRL |= 1u << 2u;
    }

    /**
     * Clear CLOCK_CTRL's SDCLOCK_EN bit.
     */
    inline void clear_CLOCK_CTRL_SDCLOCK_EN()
    {
        CLOCK_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle CLOCK_CTRL's SDCLOCK_EN bit.
     */
    inline void toggle_CLOCK_CTRL_SDCLOCK_EN()
    {
        CLOCK_CTRL ^= 1u << 2u;
    }

    /**
     * Get CLOCK_CTRL's SDCLK_FREQ_SEL field.
     */
    SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL get_CLOCK_CTRL_SDCLK_FREQ_SEL()
    {
        return SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL((CLOCK_CTRL >> 8u) &
                                               0b11111111u);
    }

    /**
     * Set CLOCK_CTRL's SDCLK_FREQ_SEL field.
     */
    inline void set_CLOCK_CTRL_SDCLK_FREQ_SEL(
        SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL value)
    {
        uint16_t curr = CLOCK_CTRL;

        curr &= ~(0b11111111u << 8u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 8u;

        CLOCK_CTRL = curr;
    }

    /**
     * Get TIMEOUT_CTRL's DAT_TIMEOUT_CNT_VAL field.
     */
    SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL
    get_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL()
    {
        return SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL((TIMEOUT_CTRL >> 0u) &
                                                      0b1111u);
    }

    /**
     * Set TIMEOUT_CTRL's DAT_TIMEOUT_CNT_VAL field.
     */
    inline void set_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL(
        SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL value)
    {
        uint8_t curr = TIMEOUT_CTRL;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        TIMEOUT_CTRL = curr;
    }

    /**
     * Get SW_RESET's SW_RST_ALL bit.
     */
    bool get_SW_RESET_SW_RST_ALL()
    {
        return SW_RESET & (1u << 0u);
    }

    /**
     * Set SW_RESET's SW_RST_ALL bit.
     */
    inline void set_SW_RESET_SW_RST_ALL()
    {
        SW_RESET |= 1u << 0u;
    }

    /**
     * Clear SW_RESET's SW_RST_ALL bit.
     */
    inline void clear_SW_RESET_SW_RST_ALL()
    {
        SW_RESET &= ~(1u << 0u);
    }

    /**
     * Toggle SW_RESET's SW_RST_ALL bit.
     */
    inline void toggle_SW_RESET_SW_RST_ALL()
    {
        SW_RESET ^= 1u << 0u;
    }

    /**
     * Get SW_RESET's SW_RST_CMD_LINE bit.
     */
    SDMMC_SW_RESET_SW_RST_CMD_LINE get_SW_RESET_SW_RST_CMD_LINE()
    {
        return SDMMC_SW_RESET_SW_RST_CMD_LINE(SW_RESET & (1u << 1u));
    }

    /**
     * Set SW_RESET's SW_RST_CMD_LINE bit.
     */
    inline void set_SW_RESET_SW_RST_CMD_LINE()
    {
        SW_RESET |= 1u << 1u;
    }

    /**
     * Clear SW_RESET's SW_RST_CMD_LINE bit.
     */
    inline void clear_SW_RESET_SW_RST_CMD_LINE()
    {
        SW_RESET &= ~(1u << 1u);
    }

    /**
     * Toggle SW_RESET's SW_RST_CMD_LINE bit.
     */
    inline void toggle_SW_RESET_SW_RST_CMD_LINE()
    {
        SW_RESET ^= 1u << 1u;
    }

    /**
     * Get SW_RESET's SW_RST_DAT_LINE bit.
     */
    SDMMC_SW_RESET_SW_RST_DAT_LINE get_SW_RESET_SW_RST_DAT_LINE()
    {
        return SDMMC_SW_RESET_SW_RST_DAT_LINE(SW_RESET & (1u << 2u));
    }

    /**
     * Set SW_RESET's SW_RST_DAT_LINE bit.
     */
    inline void set_SW_RESET_SW_RST_DAT_LINE()
    {
        SW_RESET |= 1u << 2u;
    }

    /**
     * Clear SW_RESET's SW_RST_DAT_LINE bit.
     */
    inline void clear_SW_RESET_SW_RST_DAT_LINE()
    {
        SW_RESET &= ~(1u << 2u);
    }

    /**
     * Toggle SW_RESET's SW_RST_DAT_LINE bit.
     */
    inline void toggle_SW_RESET_SW_RST_DAT_LINE()
    {
        SW_RESET ^= 1u << 2u;
    }

    /**
     * Get INT_STATUS_NORM's CMD_COMPLETE bit.
     */
    SDMMC_INT_STATUS_NORM_CMD_COMPLETE get_INT_STATUS_NORM_CMD_COMPLETE()
    {
        return SDMMC_INT_STATUS_NORM_CMD_COMPLETE(INT_STATUS_NORM &
                                                  (1u << 0u));
    }

    /**
     * Set INT_STATUS_NORM's CMD_COMPLETE bit.
     */
    inline void set_INT_STATUS_NORM_CMD_COMPLETE()
    {
        INT_STATUS_NORM |= 1u << 0u;
    }

    /**
     * Clear INT_STATUS_NORM's CMD_COMPLETE bit.
     */
    inline void clear_INT_STATUS_NORM_CMD_COMPLETE()
    {
        INT_STATUS_NORM &= ~(1u << 0u);
    }

    /**
     * Toggle INT_STATUS_NORM's CMD_COMPLETE bit.
     */
    inline void toggle_INT_STATUS_NORM_CMD_COMPLETE()
    {
        INT_STATUS_NORM ^= 1u << 0u;
    }

    /**
     * Get INT_STATUS_NORM's TX_COMPLETE bit.
     */
    SDMMC_INT_STATUS_NORM_TX_COMPLETE get_INT_STATUS_NORM_TX_COMPLETE()
    {
        return SDMMC_INT_STATUS_NORM_TX_COMPLETE(INT_STATUS_NORM & (1u << 1u));
    }

    /**
     * Set INT_STATUS_NORM's TX_COMPLETE bit.
     */
    inline void set_INT_STATUS_NORM_TX_COMPLETE()
    {
        INT_STATUS_NORM |= 1u << 1u;
    }

    /**
     * Clear INT_STATUS_NORM's TX_COMPLETE bit.
     */
    inline void clear_INT_STATUS_NORM_TX_COMPLETE()
    {
        INT_STATUS_NORM &= ~(1u << 1u);
    }

    /**
     * Toggle INT_STATUS_NORM's TX_COMPLETE bit.
     */
    inline void toggle_INT_STATUS_NORM_TX_COMPLETE()
    {
        INT_STATUS_NORM ^= 1u << 1u;
    }

    /**
     * Get INT_STATUS_NORM's BLOCK_GAP_EVENT bit.
     */
    SDMMC_INT_STATUS_NORM_BLOCK_GAP_EVENT get_INT_STATUS_NORM_BLOCK_GAP_EVENT()
    {
        return SDMMC_INT_STATUS_NORM_BLOCK_GAP_EVENT(INT_STATUS_NORM &
                                                     (1u << 2u));
    }

    /**
     * Set INT_STATUS_NORM's BLOCK_GAP_EVENT bit.
     */
    inline void set_INT_STATUS_NORM_BLOCK_GAP_EVENT()
    {
        INT_STATUS_NORM |= 1u << 2u;
    }

    /**
     * Clear INT_STATUS_NORM's BLOCK_GAP_EVENT bit.
     */
    inline void clear_INT_STATUS_NORM_BLOCK_GAP_EVENT()
    {
        INT_STATUS_NORM &= ~(1u << 2u);
    }

    /**
     * Toggle INT_STATUS_NORM's BLOCK_GAP_EVENT bit.
     */
    inline void toggle_INT_STATUS_NORM_BLOCK_GAP_EVENT()
    {
        INT_STATUS_NORM ^= 1u << 2u;
    }

    /**
     * Get INT_STATUS_NORM's BUFF_WRITE_READY bit.
     */
    SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY
    get_INT_STATUS_NORM_BUFF_WRITE_READY()
    {
        return SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY(INT_STATUS_NORM &
                                                      (1u << 4u));
    }

    /**
     * Set INT_STATUS_NORM's BUFF_WRITE_READY bit.
     */
    inline void set_INT_STATUS_NORM_BUFF_WRITE_READY()
    {
        INT_STATUS_NORM |= 1u << 4u;
    }

    /**
     * Clear INT_STATUS_NORM's BUFF_WRITE_READY bit.
     */
    inline void clear_INT_STATUS_NORM_BUFF_WRITE_READY()
    {
        INT_STATUS_NORM &= ~(1u << 4u);
    }

    /**
     * Toggle INT_STATUS_NORM's BUFF_WRITE_READY bit.
     */
    inline void toggle_INT_STATUS_NORM_BUFF_WRITE_READY()
    {
        INT_STATUS_NORM ^= 1u << 4u;
    }

    /**
     * Get INT_STATUS_NORM's BUFF_READ_READY bit.
     */
    SDMMC_INT_STATUS_NORM_BUFF_READ_READY get_INT_STATUS_NORM_BUFF_READ_READY()
    {
        return SDMMC_INT_STATUS_NORM_BUFF_READ_READY(INT_STATUS_NORM &
                                                     (1u << 5u));
    }

    /**
     * Set INT_STATUS_NORM's BUFF_READ_READY bit.
     */
    inline void set_INT_STATUS_NORM_BUFF_READ_READY()
    {
        INT_STATUS_NORM |= 1u << 5u;
    }

    /**
     * Clear INT_STATUS_NORM's BUFF_READ_READY bit.
     */
    inline void clear_INT_STATUS_NORM_BUFF_READ_READY()
    {
        INT_STATUS_NORM &= ~(1u << 5u);
    }

    /**
     * Toggle INT_STATUS_NORM's BUFF_READ_READY bit.
     */
    inline void toggle_INT_STATUS_NORM_BUFF_READ_READY()
    {
        INT_STATUS_NORM ^= 1u << 5u;
    }

    /**
     * Get INT_STATUS_NORM's CARD_INS bit.
     */
    SDMMC_INT_STATUS_NORM_CARD_INS get_INT_STATUS_NORM_CARD_INS()
    {
        return SDMMC_INT_STATUS_NORM_CARD_INS(INT_STATUS_NORM & (1u << 6u));
    }

    /**
     * Set INT_STATUS_NORM's CARD_INS bit.
     */
    inline void set_INT_STATUS_NORM_CARD_INS()
    {
        INT_STATUS_NORM |= 1u << 6u;
    }

    /**
     * Clear INT_STATUS_NORM's CARD_INS bit.
     */
    inline void clear_INT_STATUS_NORM_CARD_INS()
    {
        INT_STATUS_NORM &= ~(1u << 6u);
    }

    /**
     * Toggle INT_STATUS_NORM's CARD_INS bit.
     */
    inline void toggle_INT_STATUS_NORM_CARD_INS()
    {
        INT_STATUS_NORM ^= 1u << 6u;
    }

    /**
     * Get INT_STATUS_NORM's CARD_REMOVAL bit.
     */
    SDMMC_INT_STATUS_NORM_CARD_REMOVAL get_INT_STATUS_NORM_CARD_REMOVAL()
    {
        return SDMMC_INT_STATUS_NORM_CARD_REMOVAL(INT_STATUS_NORM &
                                                  (1u << 7u));
    }

    /**
     * Set INT_STATUS_NORM's CARD_REMOVAL bit.
     */
    inline void set_INT_STATUS_NORM_CARD_REMOVAL()
    {
        INT_STATUS_NORM |= 1u << 7u;
    }

    /**
     * Clear INT_STATUS_NORM's CARD_REMOVAL bit.
     */
    inline void clear_INT_STATUS_NORM_CARD_REMOVAL()
    {
        INT_STATUS_NORM &= ~(1u << 7u);
    }

    /**
     * Toggle INT_STATUS_NORM's CARD_REMOVAL bit.
     */
    inline void toggle_INT_STATUS_NORM_CARD_REMOVAL()
    {
        INT_STATUS_NORM ^= 1u << 7u;
    }

    /**
     * Get INT_STATUS_NORM's CARD_INT bit.
     */
    SDMMC_INT_STATUS_NORM_CARD_INT get_INT_STATUS_NORM_CARD_INT()
    {
        return SDMMC_INT_STATUS_NORM_CARD_INT(INT_STATUS_NORM & (1u << 8u));
    }

    /**
     * Get INT_STATUS_NORM's ERR_INT bit.
     */
    SDMMC_INT_STATUS_NORM_ERR_INT get_INT_STATUS_NORM_ERR_INT()
    {
        return SDMMC_INT_STATUS_NORM_ERR_INT(INT_STATUS_NORM & (1u << 15u));
    }

    /**
     * Get INT_STATUS_ERR's CMD_TIMEOUT_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_CMD_TIMEOUT_ERR get_INT_STATUS_ERR_CMD_TIMEOUT_ERR()
    {
        return SDMMC_INT_STATUS_ERR_CMD_TIMEOUT_ERR(INT_STATUS_ERR &
                                                    (1u << 0u));
    }

    /**
     * Set INT_STATUS_ERR's CMD_TIMEOUT_ERR bit.
     */
    inline void set_INT_STATUS_ERR_CMD_TIMEOUT_ERR()
    {
        INT_STATUS_ERR |= 1u << 0u;
    }

    /**
     * Clear INT_STATUS_ERR's CMD_TIMEOUT_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_CMD_TIMEOUT_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 0u);
    }

    /**
     * Toggle INT_STATUS_ERR's CMD_TIMEOUT_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_CMD_TIMEOUT_ERR()
    {
        INT_STATUS_ERR ^= 1u << 0u;
    }

    /**
     * Get INT_STATUS_ERR's CMD_CRC_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_CMD_CRC_ERR get_INT_STATUS_ERR_CMD_CRC_ERR()
    {
        return SDMMC_INT_STATUS_ERR_CMD_CRC_ERR(INT_STATUS_ERR & (1u << 1u));
    }

    /**
     * Set INT_STATUS_ERR's CMD_CRC_ERR bit.
     */
    inline void set_INT_STATUS_ERR_CMD_CRC_ERR()
    {
        INT_STATUS_ERR |= 1u << 1u;
    }

    /**
     * Clear INT_STATUS_ERR's CMD_CRC_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_CMD_CRC_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 1u);
    }

    /**
     * Toggle INT_STATUS_ERR's CMD_CRC_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_CMD_CRC_ERR()
    {
        INT_STATUS_ERR ^= 1u << 1u;
    }

    /**
     * Get INT_STATUS_ERR's CMD_END_BIT_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_CMD_END_BIT_ERR get_INT_STATUS_ERR_CMD_END_BIT_ERR()
    {
        return SDMMC_INT_STATUS_ERR_CMD_END_BIT_ERR(INT_STATUS_ERR &
                                                    (1u << 2u));
    }

    /**
     * Set INT_STATUS_ERR's CMD_END_BIT_ERR bit.
     */
    inline void set_INT_STATUS_ERR_CMD_END_BIT_ERR()
    {
        INT_STATUS_ERR |= 1u << 2u;
    }

    /**
     * Clear INT_STATUS_ERR's CMD_END_BIT_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_CMD_END_BIT_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 2u);
    }

    /**
     * Toggle INT_STATUS_ERR's CMD_END_BIT_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_CMD_END_BIT_ERR()
    {
        INT_STATUS_ERR ^= 1u << 2u;
    }

    /**
     * Get INT_STATUS_ERR's CMD_IND_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_CMD_IND_ERR get_INT_STATUS_ERR_CMD_IND_ERR()
    {
        return SDMMC_INT_STATUS_ERR_CMD_IND_ERR(INT_STATUS_ERR & (1u << 3u));
    }

    /**
     * Set INT_STATUS_ERR's CMD_IND_ERR bit.
     */
    inline void set_INT_STATUS_ERR_CMD_IND_ERR()
    {
        INT_STATUS_ERR |= 1u << 3u;
    }

    /**
     * Clear INT_STATUS_ERR's CMD_IND_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_CMD_IND_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 3u);
    }

    /**
     * Toggle INT_STATUS_ERR's CMD_IND_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_CMD_IND_ERR()
    {
        INT_STATUS_ERR ^= 1u << 3u;
    }

    /**
     * Get INT_STATUS_ERR's DATA_TIMEOUT_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_DATA_TIMEOUT_ERR get_INT_STATUS_ERR_DATA_TIMEOUT_ERR()
    {
        return SDMMC_INT_STATUS_ERR_DATA_TIMEOUT_ERR(INT_STATUS_ERR &
                                                     (1u << 4u));
    }

    /**
     * Set INT_STATUS_ERR's DATA_TIMEOUT_ERR bit.
     */
    inline void set_INT_STATUS_ERR_DATA_TIMEOUT_ERR()
    {
        INT_STATUS_ERR |= 1u << 4u;
    }

    /**
     * Clear INT_STATUS_ERR's DATA_TIMEOUT_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_DATA_TIMEOUT_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 4u);
    }

    /**
     * Toggle INT_STATUS_ERR's DATA_TIMEOUT_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_DATA_TIMEOUT_ERR()
    {
        INT_STATUS_ERR ^= 1u << 4u;
    }

    /**
     * Get INT_STATUS_ERR's DATA_CRC_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_DATA_CRC_ERR get_INT_STATUS_ERR_DATA_CRC_ERR()
    {
        return SDMMC_INT_STATUS_ERR_DATA_CRC_ERR(INT_STATUS_ERR & (1u << 5u));
    }

    /**
     * Set INT_STATUS_ERR's DATA_CRC_ERR bit.
     */
    inline void set_INT_STATUS_ERR_DATA_CRC_ERR()
    {
        INT_STATUS_ERR |= 1u << 5u;
    }

    /**
     * Clear INT_STATUS_ERR's DATA_CRC_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_DATA_CRC_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 5u);
    }

    /**
     * Toggle INT_STATUS_ERR's DATA_CRC_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_DATA_CRC_ERR()
    {
        INT_STATUS_ERR ^= 1u << 5u;
    }

    /**
     * Get INT_STATUS_ERR's DATA_END_BIT_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_DATA_END_BIT_ERR get_INT_STATUS_ERR_DATA_END_BIT_ERR()
    {
        return SDMMC_INT_STATUS_ERR_DATA_END_BIT_ERR(INT_STATUS_ERR &
                                                     (1u << 6u));
    }

    /**
     * Set INT_STATUS_ERR's DATA_END_BIT_ERR bit.
     */
    inline void set_INT_STATUS_ERR_DATA_END_BIT_ERR()
    {
        INT_STATUS_ERR |= 1u << 6u;
    }

    /**
     * Clear INT_STATUS_ERR's DATA_END_BIT_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_DATA_END_BIT_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 6u);
    }

    /**
     * Toggle INT_STATUS_ERR's DATA_END_BIT_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_DATA_END_BIT_ERR()
    {
        INT_STATUS_ERR ^= 1u << 6u;
    }

    /**
     * Get INT_STATUS_ERR's CURRENT_LIMIT_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_CURRENT_LIMIT_ERR
    get_INT_STATUS_ERR_CURRENT_LIMIT_ERR()
    {
        return SDMMC_INT_STATUS_ERR_CURRENT_LIMIT_ERR(INT_STATUS_ERR &
                                                      (1u << 7u));
    }

    /**
     * Set INT_STATUS_ERR's CURRENT_LIMIT_ERR bit.
     */
    inline void set_INT_STATUS_ERR_CURRENT_LIMIT_ERR()
    {
        INT_STATUS_ERR |= 1u << 7u;
    }

    /**
     * Clear INT_STATUS_ERR's CURRENT_LIMIT_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_CURRENT_LIMIT_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 7u);
    }

    /**
     * Toggle INT_STATUS_ERR's CURRENT_LIMIT_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_CURRENT_LIMIT_ERR()
    {
        INT_STATUS_ERR ^= 1u << 7u;
    }

    /**
     * Get INT_STATUS_ERR's ACMD_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_ACMD_ERR get_INT_STATUS_ERR_ACMD_ERR()
    {
        return SDMMC_INT_STATUS_ERR_ACMD_ERR(INT_STATUS_ERR & (1u << 8u));
    }

    /**
     * Set INT_STATUS_ERR's ACMD_ERR bit.
     */
    inline void set_INT_STATUS_ERR_ACMD_ERR()
    {
        INT_STATUS_ERR |= 1u << 8u;
    }

    /**
     * Clear INT_STATUS_ERR's ACMD_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_ACMD_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 8u);
    }

    /**
     * Toggle INT_STATUS_ERR's ACMD_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_ACMD_ERR()
    {
        INT_STATUS_ERR ^= 1u << 8u;
    }

    /**
     * Get INT_STATUS_ERR's CEATA_ERR bit.
     */
    SDMMC_INT_STATUS_ERR_CEATA_ERR get_INT_STATUS_ERR_CEATA_ERR()
    {
        return SDMMC_INT_STATUS_ERR_CEATA_ERR(INT_STATUS_ERR & (1u << 13u));
    }

    /**
     * Set INT_STATUS_ERR's CEATA_ERR bit.
     */
    inline void set_INT_STATUS_ERR_CEATA_ERR()
    {
        INT_STATUS_ERR |= 1u << 13u;
    }

    /**
     * Clear INT_STATUS_ERR's CEATA_ERR bit.
     */
    inline void clear_INT_STATUS_ERR_CEATA_ERR()
    {
        INT_STATUS_ERR &= ~(1u << 13u);
    }

    /**
     * Toggle INT_STATUS_ERR's CEATA_ERR bit.
     */
    inline void toggle_INT_STATUS_ERR_CEATA_ERR()
    {
        INT_STATUS_ERR ^= 1u << 13u;
    }

    /**
     * Get EN_INT_STATUS_NORM's CMD_COMPLETE_EN bit.
     */
    SDMMC_EN_INT_STATUS_NORM_CMD_COMPLETE_EN
    get_EN_INT_STATUS_NORM_CMD_COMPLETE_EN()
    {
        return SDMMC_EN_INT_STATUS_NORM_CMD_COMPLETE_EN(EN_INT_STATUS_NORM &
                                                        (1u << 0u));
    }

    /**
     * Set EN_INT_STATUS_NORM's CMD_COMPLETE_EN bit.
     */
    inline void set_EN_INT_STATUS_NORM_CMD_COMPLETE_EN()
    {
        EN_INT_STATUS_NORM |= 1u << 0u;
    }

    /**
     * Clear EN_INT_STATUS_NORM's CMD_COMPLETE_EN bit.
     */
    inline void clear_EN_INT_STATUS_NORM_CMD_COMPLETE_EN()
    {
        EN_INT_STATUS_NORM &= ~(1u << 0u);
    }

    /**
     * Toggle EN_INT_STATUS_NORM's CMD_COMPLETE_EN bit.
     */
    inline void toggle_EN_INT_STATUS_NORM_CMD_COMPLETE_EN()
    {
        EN_INT_STATUS_NORM ^= 1u << 0u;
    }

    /**
     * Get EN_INT_STATUS_NORM's TX_COMPLETE_EN bit.
     */
    SDMMC_EN_INT_STATUS_NORM_TX_COMPLETE_EN
    get_EN_INT_STATUS_NORM_TX_COMPLETE_EN()
    {
        return SDMMC_EN_INT_STATUS_NORM_TX_COMPLETE_EN(EN_INT_STATUS_NORM &
                                                       (1u << 1u));
    }

    /**
     * Set EN_INT_STATUS_NORM's TX_COMPLETE_EN bit.
     */
    inline void set_EN_INT_STATUS_NORM_TX_COMPLETE_EN()
    {
        EN_INT_STATUS_NORM |= 1u << 1u;
    }

    /**
     * Clear EN_INT_STATUS_NORM's TX_COMPLETE_EN bit.
     */
    inline void clear_EN_INT_STATUS_NORM_TX_COMPLETE_EN()
    {
        EN_INT_STATUS_NORM &= ~(1u << 1u);
    }

    /**
     * Toggle EN_INT_STATUS_NORM's TX_COMPLETE_EN bit.
     */
    inline void toggle_EN_INT_STATUS_NORM_TX_COMPLETE_EN()
    {
        EN_INT_STATUS_NORM ^= 1u << 1u;
    }

    /**
     * Get EN_INT_STATUS_NORM's BLOCK_GAP_EVENT_EN bit.
     */
    SDMMC_EN_INT_STATUS_NORM_BLOCK_GAP_EVENT_EN
    get_EN_INT_STATUS_NORM_BLOCK_GAP_EVENT_EN()
    {
        return SDMMC_EN_INT_STATUS_NORM_BLOCK_GAP_EVENT_EN(EN_INT_STATUS_NORM &
                                                           (1u << 2u));
    }

    /**
     * Set EN_INT_STATUS_NORM's BLOCK_GAP_EVENT_EN bit.
     */
    inline void set_EN_INT_STATUS_NORM_BLOCK_GAP_EVENT_EN()
    {
        EN_INT_STATUS_NORM |= 1u << 2u;
    }

    /**
     * Clear EN_INT_STATUS_NORM's BLOCK_GAP_EVENT_EN bit.
     */
    inline void clear_EN_INT_STATUS_NORM_BLOCK_GAP_EVENT_EN()
    {
        EN_INT_STATUS_NORM &= ~(1u << 2u);
    }

    /**
     * Toggle EN_INT_STATUS_NORM's BLOCK_GAP_EVENT_EN bit.
     */
    inline void toggle_EN_INT_STATUS_NORM_BLOCK_GAP_EVENT_EN()
    {
        EN_INT_STATUS_NORM ^= 1u << 2u;
    }

    /**
     * Get EN_INT_STATUS_NORM's BUFF_WRITE_READY_EN bit.
     */
    SDMMC_EN_INT_STATUS_NORM_BUFF_WRITE_READY_EN
    get_EN_INT_STATUS_NORM_BUFF_WRITE_READY_EN()
    {
        return SDMMC_EN_INT_STATUS_NORM_BUFF_WRITE_READY_EN(
            EN_INT_STATUS_NORM & (1u << 4u));
    }

    /**
     * Set EN_INT_STATUS_NORM's BUFF_WRITE_READY_EN bit.
     */
    inline void set_EN_INT_STATUS_NORM_BUFF_WRITE_READY_EN()
    {
        EN_INT_STATUS_NORM |= 1u << 4u;
    }

    /**
     * Clear EN_INT_STATUS_NORM's BUFF_WRITE_READY_EN bit.
     */
    inline void clear_EN_INT_STATUS_NORM_BUFF_WRITE_READY_EN()
    {
        EN_INT_STATUS_NORM &= ~(1u << 4u);
    }

    /**
     * Toggle EN_INT_STATUS_NORM's BUFF_WRITE_READY_EN bit.
     */
    inline void toggle_EN_INT_STATUS_NORM_BUFF_WRITE_READY_EN()
    {
        EN_INT_STATUS_NORM ^= 1u << 4u;
    }

    /**
     * Get EN_INT_STATUS_NORM's BUFF_READ_READY_EN bit.
     */
    SDMMC_EN_INT_STATUS_NORM_BUFF_READ_READY_EN
    get_EN_INT_STATUS_NORM_BUFF_READ_READY_EN()
    {
        return SDMMC_EN_INT_STATUS_NORM_BUFF_READ_READY_EN(EN_INT_STATUS_NORM &
                                                           (1u << 5u));
    }

    /**
     * Set EN_INT_STATUS_NORM's BUFF_READ_READY_EN bit.
     */
    inline void set_EN_INT_STATUS_NORM_BUFF_READ_READY_EN()
    {
        EN_INT_STATUS_NORM |= 1u << 5u;
    }

    /**
     * Clear EN_INT_STATUS_NORM's BUFF_READ_READY_EN bit.
     */
    inline void clear_EN_INT_STATUS_NORM_BUFF_READ_READY_EN()
    {
        EN_INT_STATUS_NORM &= ~(1u << 5u);
    }

    /**
     * Toggle EN_INT_STATUS_NORM's BUFF_READ_READY_EN bit.
     */
    inline void toggle_EN_INT_STATUS_NORM_BUFF_READ_READY_EN()
    {
        EN_INT_STATUS_NORM ^= 1u << 5u;
    }

    /**
     * Get EN_INT_STATUS_NORM's CARD_INS_EN bit.
     */
    SDMMC_EN_INT_STATUS_NORM_CARD_INS_EN get_EN_INT_STATUS_NORM_CARD_INS_EN()
    {
        return SDMMC_EN_INT_STATUS_NORM_CARD_INS_EN(EN_INT_STATUS_NORM &
                                                    (1u << 6u));
    }

    /**
     * Set EN_INT_STATUS_NORM's CARD_INS_EN bit.
     */
    inline void set_EN_INT_STATUS_NORM_CARD_INS_EN()
    {
        EN_INT_STATUS_NORM |= 1u << 6u;
    }

    /**
     * Clear EN_INT_STATUS_NORM's CARD_INS_EN bit.
     */
    inline void clear_EN_INT_STATUS_NORM_CARD_INS_EN()
    {
        EN_INT_STATUS_NORM &= ~(1u << 6u);
    }

    /**
     * Toggle EN_INT_STATUS_NORM's CARD_INS_EN bit.
     */
    inline void toggle_EN_INT_STATUS_NORM_CARD_INS_EN()
    {
        EN_INT_STATUS_NORM ^= 1u << 6u;
    }

    /**
     * Get EN_INT_STATUS_NORM's CARD_REMOVAL_EN bit.
     */
    SDMMC_EN_INT_STATUS_NORM_CARD_REMOVAL_EN
    get_EN_INT_STATUS_NORM_CARD_REMOVAL_EN()
    {
        return SDMMC_EN_INT_STATUS_NORM_CARD_REMOVAL_EN(EN_INT_STATUS_NORM &
                                                        (1u << 7u));
    }

    /**
     * Set EN_INT_STATUS_NORM's CARD_REMOVAL_EN bit.
     */
    inline void set_EN_INT_STATUS_NORM_CARD_REMOVAL_EN()
    {
        EN_INT_STATUS_NORM |= 1u << 7u;
    }

    /**
     * Clear EN_INT_STATUS_NORM's CARD_REMOVAL_EN bit.
     */
    inline void clear_EN_INT_STATUS_NORM_CARD_REMOVAL_EN()
    {
        EN_INT_STATUS_NORM &= ~(1u << 7u);
    }

    /**
     * Toggle EN_INT_STATUS_NORM's CARD_REMOVAL_EN bit.
     */
    inline void toggle_EN_INT_STATUS_NORM_CARD_REMOVAL_EN()
    {
        EN_INT_STATUS_NORM ^= 1u << 7u;
    }

    /**
     * Get EN_INT_STATUS_NORM's CARD_INT_EN bit.
     */
    SDMMC_EN_INT_STATUS_NORM_CARD_INT_EN get_EN_INT_STATUS_NORM_CARD_INT_EN()
    {
        return SDMMC_EN_INT_STATUS_NORM_CARD_INT_EN(EN_INT_STATUS_NORM &
                                                    (1u << 8u));
    }

    /**
     * Set EN_INT_STATUS_NORM's CARD_INT_EN bit.
     */
    inline void set_EN_INT_STATUS_NORM_CARD_INT_EN()
    {
        EN_INT_STATUS_NORM |= 1u << 8u;
    }

    /**
     * Clear EN_INT_STATUS_NORM's CARD_INT_EN bit.
     */
    inline void clear_EN_INT_STATUS_NORM_CARD_INT_EN()
    {
        EN_INT_STATUS_NORM &= ~(1u << 8u);
    }

    /**
     * Toggle EN_INT_STATUS_NORM's CARD_INT_EN bit.
     */
    inline void toggle_EN_INT_STATUS_NORM_CARD_INT_EN()
    {
        EN_INT_STATUS_NORM ^= 1u << 8u;
    }

    /**
     * Get EN_INT_STATUS_NORM's FIXED_TO_0 bit.
     */
    bool get_EN_INT_STATUS_NORM_FIXED_TO_0()
    {
        return EN_INT_STATUS_NORM & (1u << 15u);
    }

    /**
     * Get EN_INT_STATUS_ERR's CMD_TIMEOUT_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_CMD_TIMEOUT_ERR_EN
    get_EN_INT_STATUS_ERR_CMD_TIMEOUT_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_CMD_TIMEOUT_ERR_EN(EN_INT_STATUS_ERR &
                                                          (1u << 0u));
    }

    /**
     * Set EN_INT_STATUS_ERR's CMD_TIMEOUT_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_CMD_TIMEOUT_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 0u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's CMD_TIMEOUT_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_CMD_TIMEOUT_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 0u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's CMD_TIMEOUT_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_CMD_TIMEOUT_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 0u;
    }

    /**
     * Get EN_INT_STATUS_ERR's CMD_CRC_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_CMD_CRC_ERR_EN
    get_EN_INT_STATUS_ERR_CMD_CRC_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_CMD_CRC_ERR_EN(EN_INT_STATUS_ERR &
                                                      (1u << 1u));
    }

    /**
     * Set EN_INT_STATUS_ERR's CMD_CRC_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_CMD_CRC_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 1u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's CMD_CRC_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_CMD_CRC_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 1u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's CMD_CRC_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_CMD_CRC_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 1u;
    }

    /**
     * Get EN_INT_STATUS_ERR's CMD_END_BIT_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_CMD_END_BIT_ERR_EN
    get_EN_INT_STATUS_ERR_CMD_END_BIT_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_CMD_END_BIT_ERR_EN(EN_INT_STATUS_ERR &
                                                          (1u << 2u));
    }

    /**
     * Set EN_INT_STATUS_ERR's CMD_END_BIT_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_CMD_END_BIT_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 2u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's CMD_END_BIT_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_CMD_END_BIT_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 2u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's CMD_END_BIT_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_CMD_END_BIT_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 2u;
    }

    /**
     * Get EN_INT_STATUS_ERR's CMD_IND_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_CMD_IND_ERR_EN
    get_EN_INT_STATUS_ERR_CMD_IND_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_CMD_IND_ERR_EN(EN_INT_STATUS_ERR &
                                                      (1u << 3u));
    }

    /**
     * Set EN_INT_STATUS_ERR's CMD_IND_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_CMD_IND_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 3u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's CMD_IND_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_CMD_IND_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 3u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's CMD_IND_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_CMD_IND_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 3u;
    }

    /**
     * Get EN_INT_STATUS_ERR's DATA_TIMEOUT_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_DATA_TIMEOUT_ERR_EN
    get_EN_INT_STATUS_ERR_DATA_TIMEOUT_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_DATA_TIMEOUT_ERR_EN(EN_INT_STATUS_ERR &
                                                           (1u << 4u));
    }

    /**
     * Set EN_INT_STATUS_ERR's DATA_TIMEOUT_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_DATA_TIMEOUT_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 4u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's DATA_TIMEOUT_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_DATA_TIMEOUT_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 4u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's DATA_TIMEOUT_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_DATA_TIMEOUT_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 4u;
    }

    /**
     * Get EN_INT_STATUS_ERR's DATA_CRC_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_DATA_CRC_ERR_EN
    get_EN_INT_STATUS_ERR_DATA_CRC_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_DATA_CRC_ERR_EN(EN_INT_STATUS_ERR &
                                                       (1u << 5u));
    }

    /**
     * Set EN_INT_STATUS_ERR's DATA_CRC_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_DATA_CRC_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 5u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's DATA_CRC_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_DATA_CRC_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 5u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's DATA_CRC_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_DATA_CRC_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 5u;
    }

    /**
     * Get EN_INT_STATUS_ERR's DATA_END_BIT_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_DATA_END_BIT_ERR_EN
    get_EN_INT_STATUS_ERR_DATA_END_BIT_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_DATA_END_BIT_ERR_EN(EN_INT_STATUS_ERR &
                                                           (1u << 6u));
    }

    /**
     * Set EN_INT_STATUS_ERR's DATA_END_BIT_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_DATA_END_BIT_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 6u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's DATA_END_BIT_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_DATA_END_BIT_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 6u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's DATA_END_BIT_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_DATA_END_BIT_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 6u;
    }

    /**
     * Get EN_INT_STATUS_ERR's CURRENT_LIMIT_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_CURRENT_LIMIT_ERR_EN
    get_EN_INT_STATUS_ERR_CURRENT_LIMIT_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_CURRENT_LIMIT_ERR_EN(EN_INT_STATUS_ERR &
                                                            (1u << 7u));
    }

    /**
     * Set EN_INT_STATUS_ERR's CURRENT_LIMIT_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_CURRENT_LIMIT_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 7u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's CURRENT_LIMIT_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_CURRENT_LIMIT_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 7u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's CURRENT_LIMIT_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_CURRENT_LIMIT_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 7u;
    }

    /**
     * Get EN_INT_STATUS_ERR's ACMD_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_ACMD_ERR_EN get_EN_INT_STATUS_ERR_ACMD_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_ACMD_ERR_EN(EN_INT_STATUS_ERR &
                                                   (1u << 8u));
    }

    /**
     * Set EN_INT_STATUS_ERR's ACMD_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_ACMD_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 8u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's ACMD_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_ACMD_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 8u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's ACMD_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_ACMD_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 8u;
    }

    /**
     * Get EN_INT_STATUS_ERR's TARGET_RESP_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_TARGET_RESP_ERR_EN
    get_EN_INT_STATUS_ERR_TARGET_RESP_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_TARGET_RESP_ERR_EN(EN_INT_STATUS_ERR &
                                                          (1u << 12u));
    }

    /**
     * Set EN_INT_STATUS_ERR's TARGET_RESP_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_TARGET_RESP_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 12u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's TARGET_RESP_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_TARGET_RESP_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 12u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's TARGET_RESP_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_TARGET_RESP_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 12u;
    }

    /**
     * Get EN_INT_STATUS_ERR's CEATA_ERR_EN bit.
     */
    SDMMC_EN_INT_STATUS_ERR_CEATA_ERR_EN get_EN_INT_STATUS_ERR_CEATA_ERR_EN()
    {
        return SDMMC_EN_INT_STATUS_ERR_CEATA_ERR_EN(EN_INT_STATUS_ERR &
                                                    (1u << 13u));
    }

    /**
     * Set EN_INT_STATUS_ERR's CEATA_ERR_EN bit.
     */
    inline void set_EN_INT_STATUS_ERR_CEATA_ERR_EN()
    {
        EN_INT_STATUS_ERR |= 1u << 13u;
    }

    /**
     * Clear EN_INT_STATUS_ERR's CEATA_ERR_EN bit.
     */
    inline void clear_EN_INT_STATUS_ERR_CEATA_ERR_EN()
    {
        EN_INT_STATUS_ERR &= ~(1u << 13u);
    }

    /**
     * Toggle EN_INT_STATUS_ERR's CEATA_ERR_EN bit.
     */
    inline void toggle_EN_INT_STATUS_ERR_CEATA_ERR_EN()
    {
        EN_INT_STATUS_ERR ^= 1u << 13u;
    }

    /**
     * Get EN_INT_SIGNAL_NORM's CMD_COMPLETE_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_NORM_CMD_COMPLETE_EN
    get_EN_INT_SIGNAL_NORM_CMD_COMPLETE_EN()
    {
        return SDMMC_EN_INT_SIGNAL_NORM_CMD_COMPLETE_EN(EN_INT_SIGNAL_NORM &
                                                        (1u << 0u));
    }

    /**
     * Set EN_INT_SIGNAL_NORM's CMD_COMPLETE_EN bit.
     */
    inline void set_EN_INT_SIGNAL_NORM_CMD_COMPLETE_EN()
    {
        EN_INT_SIGNAL_NORM |= 1u << 0u;
    }

    /**
     * Clear EN_INT_SIGNAL_NORM's CMD_COMPLETE_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_NORM_CMD_COMPLETE_EN()
    {
        EN_INT_SIGNAL_NORM &= ~(1u << 0u);
    }

    /**
     * Toggle EN_INT_SIGNAL_NORM's CMD_COMPLETE_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_NORM_CMD_COMPLETE_EN()
    {
        EN_INT_SIGNAL_NORM ^= 1u << 0u;
    }

    /**
     * Get EN_INT_SIGNAL_NORM's TX_COMPLETE_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_NORM_TX_COMPLETE_EN
    get_EN_INT_SIGNAL_NORM_TX_COMPLETE_EN()
    {
        return SDMMC_EN_INT_SIGNAL_NORM_TX_COMPLETE_EN(EN_INT_SIGNAL_NORM &
                                                       (1u << 1u));
    }

    /**
     * Set EN_INT_SIGNAL_NORM's TX_COMPLETE_EN bit.
     */
    inline void set_EN_INT_SIGNAL_NORM_TX_COMPLETE_EN()
    {
        EN_INT_SIGNAL_NORM |= 1u << 1u;
    }

    /**
     * Clear EN_INT_SIGNAL_NORM's TX_COMPLETE_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_NORM_TX_COMPLETE_EN()
    {
        EN_INT_SIGNAL_NORM &= ~(1u << 1u);
    }

    /**
     * Toggle EN_INT_SIGNAL_NORM's TX_COMPLETE_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_NORM_TX_COMPLETE_EN()
    {
        EN_INT_SIGNAL_NORM ^= 1u << 1u;
    }

    /**
     * Get EN_INT_SIGNAL_NORM's BLOCK_GAP_EVENT_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_NORM_BLOCK_GAP_EVENT_EN
    get_EN_INT_SIGNAL_NORM_BLOCK_GAP_EVENT_EN()
    {
        return SDMMC_EN_INT_SIGNAL_NORM_BLOCK_GAP_EVENT_EN(EN_INT_SIGNAL_NORM &
                                                           (1u << 2u));
    }

    /**
     * Set EN_INT_SIGNAL_NORM's BLOCK_GAP_EVENT_EN bit.
     */
    inline void set_EN_INT_SIGNAL_NORM_BLOCK_GAP_EVENT_EN()
    {
        EN_INT_SIGNAL_NORM |= 1u << 2u;
    }

    /**
     * Clear EN_INT_SIGNAL_NORM's BLOCK_GAP_EVENT_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_NORM_BLOCK_GAP_EVENT_EN()
    {
        EN_INT_SIGNAL_NORM &= ~(1u << 2u);
    }

    /**
     * Toggle EN_INT_SIGNAL_NORM's BLOCK_GAP_EVENT_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_NORM_BLOCK_GAP_EVENT_EN()
    {
        EN_INT_SIGNAL_NORM ^= 1u << 2u;
    }

    /**
     * Get EN_INT_SIGNAL_NORM's BUFF_WRITE_READY_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_NORM_BUFF_WRITE_READY_EN
    get_EN_INT_SIGNAL_NORM_BUFF_WRITE_READY_EN()
    {
        return SDMMC_EN_INT_SIGNAL_NORM_BUFF_WRITE_READY_EN(
            EN_INT_SIGNAL_NORM & (1u << 4u));
    }

    /**
     * Set EN_INT_SIGNAL_NORM's BUFF_WRITE_READY_EN bit.
     */
    inline void set_EN_INT_SIGNAL_NORM_BUFF_WRITE_READY_EN()
    {
        EN_INT_SIGNAL_NORM |= 1u << 4u;
    }

    /**
     * Clear EN_INT_SIGNAL_NORM's BUFF_WRITE_READY_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_NORM_BUFF_WRITE_READY_EN()
    {
        EN_INT_SIGNAL_NORM &= ~(1u << 4u);
    }

    /**
     * Toggle EN_INT_SIGNAL_NORM's BUFF_WRITE_READY_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_NORM_BUFF_WRITE_READY_EN()
    {
        EN_INT_SIGNAL_NORM ^= 1u << 4u;
    }

    /**
     * Get EN_INT_SIGNAL_NORM's BUFF_READ_READY_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_NORM_BUFF_READ_READY_EN
    get_EN_INT_SIGNAL_NORM_BUFF_READ_READY_EN()
    {
        return SDMMC_EN_INT_SIGNAL_NORM_BUFF_READ_READY_EN(EN_INT_SIGNAL_NORM &
                                                           (1u << 5u));
    }

    /**
     * Set EN_INT_SIGNAL_NORM's BUFF_READ_READY_EN bit.
     */
    inline void set_EN_INT_SIGNAL_NORM_BUFF_READ_READY_EN()
    {
        EN_INT_SIGNAL_NORM |= 1u << 5u;
    }

    /**
     * Clear EN_INT_SIGNAL_NORM's BUFF_READ_READY_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_NORM_BUFF_READ_READY_EN()
    {
        EN_INT_SIGNAL_NORM &= ~(1u << 5u);
    }

    /**
     * Toggle EN_INT_SIGNAL_NORM's BUFF_READ_READY_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_NORM_BUFF_READ_READY_EN()
    {
        EN_INT_SIGNAL_NORM ^= 1u << 5u;
    }

    /**
     * Get EN_INT_SIGNAL_NORM's CARD_INS_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_NORM_CARD_INS_EN get_EN_INT_SIGNAL_NORM_CARD_INS_EN()
    {
        return SDMMC_EN_INT_SIGNAL_NORM_CARD_INS_EN(EN_INT_SIGNAL_NORM &
                                                    (1u << 6u));
    }

    /**
     * Set EN_INT_SIGNAL_NORM's CARD_INS_EN bit.
     */
    inline void set_EN_INT_SIGNAL_NORM_CARD_INS_EN()
    {
        EN_INT_SIGNAL_NORM |= 1u << 6u;
    }

    /**
     * Clear EN_INT_SIGNAL_NORM's CARD_INS_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_NORM_CARD_INS_EN()
    {
        EN_INT_SIGNAL_NORM &= ~(1u << 6u);
    }

    /**
     * Toggle EN_INT_SIGNAL_NORM's CARD_INS_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_NORM_CARD_INS_EN()
    {
        EN_INT_SIGNAL_NORM ^= 1u << 6u;
    }

    /**
     * Get EN_INT_SIGNAL_NORM's CARD_REMOVAL_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_NORM_CARD_REMOVAL_EN
    get_EN_INT_SIGNAL_NORM_CARD_REMOVAL_EN()
    {
        return SDMMC_EN_INT_SIGNAL_NORM_CARD_REMOVAL_EN(EN_INT_SIGNAL_NORM &
                                                        (1u << 7u));
    }

    /**
     * Set EN_INT_SIGNAL_NORM's CARD_REMOVAL_EN bit.
     */
    inline void set_EN_INT_SIGNAL_NORM_CARD_REMOVAL_EN()
    {
        EN_INT_SIGNAL_NORM |= 1u << 7u;
    }

    /**
     * Clear EN_INT_SIGNAL_NORM's CARD_REMOVAL_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_NORM_CARD_REMOVAL_EN()
    {
        EN_INT_SIGNAL_NORM &= ~(1u << 7u);
    }

    /**
     * Toggle EN_INT_SIGNAL_NORM's CARD_REMOVAL_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_NORM_CARD_REMOVAL_EN()
    {
        EN_INT_SIGNAL_NORM ^= 1u << 7u;
    }

    /**
     * Get EN_INT_SIGNAL_NORM's CARD_INT_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_NORM_CARD_INT_EN get_EN_INT_SIGNAL_NORM_CARD_INT_EN()
    {
        return SDMMC_EN_INT_SIGNAL_NORM_CARD_INT_EN(EN_INT_SIGNAL_NORM &
                                                    (1u << 8u));
    }

    /**
     * Set EN_INT_SIGNAL_NORM's CARD_INT_EN bit.
     */
    inline void set_EN_INT_SIGNAL_NORM_CARD_INT_EN()
    {
        EN_INT_SIGNAL_NORM |= 1u << 8u;
    }

    /**
     * Clear EN_INT_SIGNAL_NORM's CARD_INT_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_NORM_CARD_INT_EN()
    {
        EN_INT_SIGNAL_NORM &= ~(1u << 8u);
    }

    /**
     * Toggle EN_INT_SIGNAL_NORM's CARD_INT_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_NORM_CARD_INT_EN()
    {
        EN_INT_SIGNAL_NORM ^= 1u << 8u;
    }

    /**
     * Get EN_INT_SIGNAL_NORM's FIXED_TO_0 bit.
     */
    bool get_EN_INT_SIGNAL_NORM_FIXED_TO_0()
    {
        return EN_INT_SIGNAL_NORM & (1u << 15u);
    }

    /**
     * Get EN_INT_SIGNAL_ERR's CMD_TIMEOUT_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_CMD_TIMEOUT_ERR_EN
    get_EN_INT_SIGNAL_ERR_CMD_TIMEOUT_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_CMD_TIMEOUT_ERR_EN(EN_INT_SIGNAL_ERR &
                                                          (1u << 0u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's CMD_TIMEOUT_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_CMD_TIMEOUT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 0u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's CMD_TIMEOUT_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_CMD_TIMEOUT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 0u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's CMD_TIMEOUT_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_CMD_TIMEOUT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 0u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's CMD_CRC_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_CMD_CRC_ERR_EN
    get_EN_INT_SIGNAL_ERR_CMD_CRC_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_CMD_CRC_ERR_EN(EN_INT_SIGNAL_ERR &
                                                      (1u << 1u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's CMD_CRC_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_CMD_CRC_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 1u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's CMD_CRC_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_CMD_CRC_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 1u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's CMD_CRC_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_CMD_CRC_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 1u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's CMD_END_BIT_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_CMD_END_BIT_ERR_EN
    get_EN_INT_SIGNAL_ERR_CMD_END_BIT_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_CMD_END_BIT_ERR_EN(EN_INT_SIGNAL_ERR &
                                                          (1u << 2u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's CMD_END_BIT_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_CMD_END_BIT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 2u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's CMD_END_BIT_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_CMD_END_BIT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 2u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's CMD_END_BIT_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_CMD_END_BIT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 2u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's CMD_IND_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_CMD_IND_ERR_EN
    get_EN_INT_SIGNAL_ERR_CMD_IND_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_CMD_IND_ERR_EN(EN_INT_SIGNAL_ERR &
                                                      (1u << 3u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's CMD_IND_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_CMD_IND_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 3u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's CMD_IND_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_CMD_IND_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 3u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's CMD_IND_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_CMD_IND_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 3u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's DATA_TIMEOUT_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_DATA_TIMEOUT_ERR_EN
    get_EN_INT_SIGNAL_ERR_DATA_TIMEOUT_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_DATA_TIMEOUT_ERR_EN(EN_INT_SIGNAL_ERR &
                                                           (1u << 4u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's DATA_TIMEOUT_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_DATA_TIMEOUT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 4u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's DATA_TIMEOUT_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_DATA_TIMEOUT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 4u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's DATA_TIMEOUT_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_DATA_TIMEOUT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 4u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's DATA_CRC_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_DATA_CRC_ERR_EN
    get_EN_INT_SIGNAL_ERR_DATA_CRC_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_DATA_CRC_ERR_EN(EN_INT_SIGNAL_ERR &
                                                       (1u << 5u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's DATA_CRC_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_DATA_CRC_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 5u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's DATA_CRC_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_DATA_CRC_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 5u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's DATA_CRC_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_DATA_CRC_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 5u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's DATA_END_BIT_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_DATA_END_BIT_ERR_EN
    get_EN_INT_SIGNAL_ERR_DATA_END_BIT_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_DATA_END_BIT_ERR_EN(EN_INT_SIGNAL_ERR &
                                                           (1u << 6u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's DATA_END_BIT_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_DATA_END_BIT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 6u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's DATA_END_BIT_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_DATA_END_BIT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 6u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's DATA_END_BIT_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_DATA_END_BIT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 6u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's CURRENT_LIMIT_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_CURRENT_LIMIT_ERR_EN
    get_EN_INT_SIGNAL_ERR_CURRENT_LIMIT_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_CURRENT_LIMIT_ERR_EN(EN_INT_SIGNAL_ERR &
                                                            (1u << 7u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's CURRENT_LIMIT_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_CURRENT_LIMIT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 7u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's CURRENT_LIMIT_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_CURRENT_LIMIT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 7u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's CURRENT_LIMIT_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_CURRENT_LIMIT_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 7u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's ACMD_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_ACMD_ERR_EN get_EN_INT_SIGNAL_ERR_ACMD_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_ACMD_ERR_EN(EN_INT_SIGNAL_ERR &
                                                   (1u << 8u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's ACMD_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_ACMD_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 8u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's ACMD_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_ACMD_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 8u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's ACMD_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_ACMD_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 8u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's TARGET_RESP_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_TARGET_RESP_ERR_EN
    get_EN_INT_SIGNAL_ERR_TARGET_RESP_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_TARGET_RESP_ERR_EN(EN_INT_SIGNAL_ERR &
                                                          (1u << 12u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's TARGET_RESP_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_TARGET_RESP_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 12u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's TARGET_RESP_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_TARGET_RESP_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 12u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's TARGET_RESP_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_TARGET_RESP_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 12u;
    }

    /**
     * Get EN_INT_SIGNAL_ERR's CEATA_ERR_EN bit.
     */
    SDMMC_EN_INT_SIGNAL_ERR_CEATA_ERR_EN get_EN_INT_SIGNAL_ERR_CEATA_ERR_EN()
    {
        return SDMMC_EN_INT_SIGNAL_ERR_CEATA_ERR_EN(EN_INT_SIGNAL_ERR &
                                                    (1u << 13u));
    }

    /**
     * Set EN_INT_SIGNAL_ERR's CEATA_ERR_EN bit.
     */
    inline void set_EN_INT_SIGNAL_ERR_CEATA_ERR_EN()
    {
        EN_INT_SIGNAL_ERR |= 1u << 13u;
    }

    /**
     * Clear EN_INT_SIGNAL_ERR's CEATA_ERR_EN bit.
     */
    inline void clear_EN_INT_SIGNAL_ERR_CEATA_ERR_EN()
    {
        EN_INT_SIGNAL_ERR &= ~(1u << 13u);
    }

    /**
     * Toggle EN_INT_SIGNAL_ERR's CEATA_ERR_EN bit.
     */
    inline void toggle_EN_INT_SIGNAL_ERR_CEATA_ERR_EN()
    {
        EN_INT_SIGNAL_ERR ^= 1u << 13u;
    }

    /**
     * Get ACMD_ERR_STATUS's ACMD12_NOT_EXEC_ERR bit.
     */
    SDMMC_ACMD_ERR_STATUS_ACMD12_NOT_EXEC_ERR
    get_ACMD_ERR_STATUS_ACMD12_NOT_EXEC_ERR()
    {
        return SDMMC_ACMD_ERR_STATUS_ACMD12_NOT_EXEC_ERR(ACMD_ERR_STATUS &
                                                         (1u << 0u));
    }

    /**
     * Get ACMD_ERR_STATUS's ACMD_TIMEOUT_ERR bit.
     */
    SDMMC_ACMD_ERR_STATUS_ACMD_TIMEOUT_ERR
    get_ACMD_ERR_STATUS_ACMD_TIMEOUT_ERR()
    {
        return SDMMC_ACMD_ERR_STATUS_ACMD_TIMEOUT_ERR(ACMD_ERR_STATUS &
                                                      (1u << 1u));
    }

    /**
     * Get ACMD_ERR_STATUS's ACMD_CRC_ERR bit.
     */
    SDMMC_ACMD_ERR_STATUS_ACMD_CRC_ERR get_ACMD_ERR_STATUS_ACMD_CRC_ERR()
    {
        return SDMMC_ACMD_ERR_STATUS_ACMD_CRC_ERR(ACMD_ERR_STATUS &
                                                  (1u << 2u));
    }

    /**
     * Get ACMD_ERR_STATUS's ACMD_END_BIT_ERR bit.
     */
    SDMMC_ACMD_ERR_STATUS_ACMD_END_BIT_ERR
    get_ACMD_ERR_STATUS_ACMD_END_BIT_ERR()
    {
        return SDMMC_ACMD_ERR_STATUS_ACMD_END_BIT_ERR(ACMD_ERR_STATUS &
                                                      (1u << 3u));
    }

    /**
     * Get ACMD_ERR_STATUS's ACMD_IND_ERR bit.
     */
    SDMMC_ACMD_ERR_STATUS_ACMD_IND_ERR get_ACMD_ERR_STATUS_ACMD_IND_ERR()
    {
        return SDMMC_ACMD_ERR_STATUS_ACMD_IND_ERR(ACMD_ERR_STATUS &
                                                  (1u << 4u));
    }

    /**
     * Get ACMD_ERR_STATUS's CMD_NOT_ISSUED_BY_ACMD12_ERR bit.
     */
    SDMMC_ACMD_ERR_STATUS_CMD_NOT_ISSUED_BY_ACMD12_ERR
    get_ACMD_ERR_STATUS_CMD_NOT_ISSUED_BY_ACMD12_ERR()
    {
        return SDMMC_ACMD_ERR_STATUS_CMD_NOT_ISSUED_BY_ACMD12_ERR(
            ACMD_ERR_STATUS & (1u << 7u));
    }

    /**
     * Get CAPABILITIES's SLOT_TYPE field.
     */
    SDMMC_CAPABILITIES_SLOT_TYPE get_CAPABILITIES_SLOT_TYPE()
    {
        return SDMMC_CAPABILITIES_SLOT_TYPE((CAPABILITIES >> 30u) & 0b11u);
    }

    /**
     * Get CAPABILITIES's ASYNC_INT_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_ASYNC_INT_SUPPORT get_CAPABILITIES_ASYNC_INT_SUPPORT()
    {
        return SDMMC_CAPABILITIES_ASYNC_INT_SUPPORT(CAPABILITIES &
                                                    (1u << 29u));
    }

    /**
     * Get CAPABILITIES's SYSBUS_64_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_SYSBUS_64_SUPPORT get_CAPABILITIES_SYSBUS_64_SUPPORT()
    {
        return SDMMC_CAPABILITIES_SYSBUS_64_SUPPORT(CAPABILITIES &
                                                    (1u << 28u));
    }

    /**
     * Get CAPABILITIES's VOLTAGE_SUPPORT_1_8V bit.
     */
    SDMMC_CAPABILITIES_VOLTAGE_SUPPORT_1_8V
    get_CAPABILITIES_VOLTAGE_SUPPORT_1_8V()
    {
        return SDMMC_CAPABILITIES_VOLTAGE_SUPPORT_1_8V(CAPABILITIES &
                                                       (1u << 26u));
    }

    /**
     * Get CAPABILITIES's VOLTAGE_SUPPORT_3V bit.
     */
    SDMMC_CAPABILITIES_VOLTAGE_SUPPORT_3V get_CAPABILITIES_VOLTAGE_SUPPORT_3V()
    {
        return SDMMC_CAPABILITIES_VOLTAGE_SUPPORT_3V(CAPABILITIES &
                                                     (1u << 25u));
    }

    /**
     * Get CAPABILITIES's VOLTAGE_SUPPORT_3_3V bit.
     */
    SDMMC_CAPABILITIES_VOLTAGE_SUPPORT_3_3V
    get_CAPABILITIES_VOLTAGE_SUPPORT_3_3V()
    {
        return SDMMC_CAPABILITIES_VOLTAGE_SUPPORT_3_3V(CAPABILITIES &
                                                       (1u << 24u));
    }

    /**
     * Get CAPABILITIES's SUSPEND_RESUME_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_SUSPEND_RESUME_SUPPORT
    get_CAPABILITIES_SUSPEND_RESUME_SUPPORT()
    {
        return SDMMC_CAPABILITIES_SUSPEND_RESUME_SUPPORT(CAPABILITIES &
                                                         (1u << 23u));
    }

    /**
     * Get CAPABILITIES's SDMA_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_SDMA_SUPPORT get_CAPABILITIES_SDMA_SUPPORT()
    {
        return SDMMC_CAPABILITIES_SDMA_SUPPORT(CAPABILITIES & (1u << 22u));
    }

    /**
     * Get CAPABILITIES's HIGH_SPEED_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_HIGH_SPEED_SUPPORT get_CAPABILITIES_HIGH_SPEED_SUPPORT()
    {
        return SDMMC_CAPABILITIES_HIGH_SPEED_SUPPORT(CAPABILITIES &
                                                     (1u << 21u));
    }

    /**
     * Get CAPABILITIES's ADMA2_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_ADMA2_SUPPORT get_CAPABILITIES_ADMA2_SUPPORT()
    {
        return SDMMC_CAPABILITIES_ADMA2_SUPPORT(CAPABILITIES & (1u << 19u));
    }

    /**
     * Get CAPABILITIES's EXT_MEDIA_BUS_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_EXT_MEDIA_BUS_SUPPORT
    get_CAPABILITIES_EXT_MEDIA_BUS_SUPPORT()
    {
        return SDMMC_CAPABILITIES_EXT_MEDIA_BUS_SUPPORT(CAPABILITIES &
                                                        (1u << 18u));
    }

    /**
     * Get CAPABILITIES's MAX_BLOCK_LENGTH field.
     */
    SDMMC_CAPABILITIES_MAX_BLOCK_LENGTH get_CAPABILITIES_MAX_BLOCK_LENGTH()
    {
        return SDMMC_CAPABILITIES_MAX_BLOCK_LENGTH((CAPABILITIES >> 16u) &
                                                   0b11u);
    }

    /**
     * Get CAPABILITIES's BASE_SD_CLOCK_FREQ field.
     */
    SDMMC_CAPABILITIES_BASE_SD_CLOCK_FREQ get_CAPABILITIES_BASE_SD_CLOCK_FREQ()
    {
        return SDMMC_CAPABILITIES_BASE_SD_CLOCK_FREQ((CAPABILITIES >> 8u) &
                                                     0b11111111u);
    }

    /**
     * Get CAPABILITIES's TIMEOUT_CLOCK_UNIT bit.
     */
    SDMMC_CAPABILITIES_TIMEOUT_CLOCK_UNIT get_CAPABILITIES_TIMEOUT_CLOCK_UNIT()
    {
        return SDMMC_CAPABILITIES_TIMEOUT_CLOCK_UNIT(CAPABILITIES &
                                                     (1u << 7u));
    }

    /**
     * Get CAPABILITIES's TIMEOUT_CLOCK_FREQ field.
     */
    SDMMC_CAPABILITIES_TIMEOUT_CLOCK_FREQ get_CAPABILITIES_TIMEOUT_CLOCK_FREQ()
    {
        return SDMMC_CAPABILITIES_TIMEOUT_CLOCK_FREQ((CAPABILITIES >> 0u) &
                                                     0b111111u);
    }

    /**
     * Get CAPABILITIES_HI's CLK_MULT field.
     */
    SDMMC_CAPABILITIES_HI_CLK_MULT get_CAPABILITIES_HI_CLK_MULT()
    {
        return SDMMC_CAPABILITIES_HI_CLK_MULT((CAPABILITIES_HI >> 16u) &
                                              0b11111111u);
    }

    /**
     * Get CAPABILITIES_HI's RE_TUNING_MODES field.
     */
    SDMMC_CAPABILITIES_HI_RE_TUNING_MODES get_CAPABILITIES_HI_RE_TUNING_MODES()
    {
        return SDMMC_CAPABILITIES_HI_RE_TUNING_MODES((CAPABILITIES_HI >> 14u) &
                                                     0b11u);
    }

    /**
     * Get CAPABILITIES_HI's USE_TUNING_SDR50 bit.
     */
    SDMMC_CAPABILITIES_HI_USE_TUNING_SDR50
    get_CAPABILITIES_HI_USE_TUNING_SDR50()
    {
        return SDMMC_CAPABILITIES_HI_USE_TUNING_SDR50(CAPABILITIES_HI &
                                                      (1u << 13u));
    }

    /**
     * Get CAPABILITIES_HI's TIM_CNT_RETUNE field.
     */
    SDMMC_CAPABILITIES_HI_TIM_CNT_RETUNE get_CAPABILITIES_HI_TIM_CNT_RETUNE()
    {
        return SDMMC_CAPABILITIES_HI_TIM_CNT_RETUNE((CAPABILITIES_HI >> 8u) &
                                                    0b1111u);
    }

    /**
     * Get CAPABILITIES_HI's DRV_D_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_HI_DRV_D_SUPPORT get_CAPABILITIES_HI_DRV_D_SUPPORT()
    {
        return SDMMC_CAPABILITIES_HI_DRV_D_SUPPORT(CAPABILITIES_HI &
                                                   (1u << 6u));
    }

    /**
     * Get CAPABILITIES_HI's DRV_C_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_HI_DRV_C_SUPPORT get_CAPABILITIES_HI_DRV_C_SUPPORT()
    {
        return SDMMC_CAPABILITIES_HI_DRV_C_SUPPORT(CAPABILITIES_HI &
                                                   (1u << 5u));
    }

    /**
     * Get CAPABILITIES_HI's DRV_A_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_HI_DRV_A_SUPPORT get_CAPABILITIES_HI_DRV_A_SUPPORT()
    {
        return SDMMC_CAPABILITIES_HI_DRV_A_SUPPORT(CAPABILITIES_HI &
                                                   (1u << 4u));
    }

    /**
     * Get CAPABILITIES_HI's DDR50_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_HI_DDR50_SUPPORT get_CAPABILITIES_HI_DDR50_SUPPORT()
    {
        return SDMMC_CAPABILITIES_HI_DDR50_SUPPORT(CAPABILITIES_HI &
                                                   (1u << 2u));
    }

    /**
     * Get CAPABILITIES_HI's SDR104_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_HI_SDR104_SUPPORT get_CAPABILITIES_HI_SDR104_SUPPORT()
    {
        return SDMMC_CAPABILITIES_HI_SDR104_SUPPORT(CAPABILITIES_HI &
                                                    (1u << 1u));
    }

    /**
     * Get CAPABILITIES_HI's SDR50_SUPPORT bit.
     */
    SDMMC_CAPABILITIES_HI_SDR50_SUPPORT get_CAPABILITIES_HI_SDR50_SUPPORT()
    {
        return SDMMC_CAPABILITIES_HI_SDR50_SUPPORT(CAPABILITIES_HI &
                                                   (1u << 0u));
    }

    /**
     * Get MAX_CURRENT_CAP's MAX_CURRENT_FOR_3_3V field.
     */
    uint8_t get_MAX_CURRENT_CAP_MAX_CURRENT_FOR_3_3V()
    {
        return (MAX_CURRENT_CAP >> 0u) & 0b11111111u;
    }

    /**
     * Set FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_NOT_EXEC bit.
     */
    inline void set_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_NOT_EXEC()
    {
        FORCE_EVENT_ACMD_ERR_STATUS |= 1u << 0u;
    }

    /**
     * Clear FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_NOT_EXEC bit.
     */
    inline void clear_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_NOT_EXEC()
    {
        FORCE_EVENT_ACMD_ERR_STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_NOT_EXEC bit.
     */
    inline void toggle_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_NOT_EXEC()
    {
        FORCE_EVENT_ACMD_ERR_STATUS ^= 1u << 0u;
    }

    /**
     * Set FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_TIMEOUT_ERR bit.
     */
    inline void set_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_TIMEOUT_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS |= 1u << 1u;
    }

    /**
     * Clear FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_TIMEOUT_ERR bit.
     */
    inline void clear_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_TIMEOUT_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_TIMEOUT_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_TIMEOUT_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS ^= 1u << 1u;
    }

    /**
     * Set FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_CRC_ERR bit.
     */
    inline void set_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_CRC_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS |= 1u << 2u;
    }

    /**
     * Clear FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_CRC_ERR bit.
     */
    inline void clear_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_CRC_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS &= ~(1u << 2u);
    }

    /**
     * Toggle FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_CRC_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_CRC_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS ^= 1u << 2u;
    }

    /**
     * Set FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_END_BIT_ERR bit.
     */
    inline void set_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_END_BIT_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS |= 1u << 3u;
    }

    /**
     * Clear FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_END_BIT_ERR bit.
     */
    inline void clear_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_END_BIT_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS &= ~(1u << 3u);
    }

    /**
     * Toggle FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_END_BIT_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_END_BIT_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS ^= 1u << 3u;
    }

    /**
     * Set FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_IND_ERR bit.
     */
    inline void set_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_IND_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS |= 1u << 4u;
    }

    /**
     * Clear FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_IND_ERR bit.
     */
    inline void clear_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_IND_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS &= ~(1u << 4u);
    }

    /**
     * Toggle FORCE_EVENT_ACMD_ERR_STATUS's FE_ACMD_IND_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ACMD_ERR_STATUS_FE_ACMD_IND_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS ^= 1u << 4u;
    }

    /**
     * Set FORCE_EVENT_ACMD_ERR_STATUS's FE_CMD_NOT_ISSUED_ACMD12_ERR bit.
     */
    inline void set_FORCE_EVENT_ACMD_ERR_STATUS_FE_CMD_NOT_ISSUED_ACMD12_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS |= 1u << 7u;
    }

    /**
     * Clear FORCE_EVENT_ACMD_ERR_STATUS's FE_CMD_NOT_ISSUED_ACMD12_ERR bit.
     */
    inline void
    clear_FORCE_EVENT_ACMD_ERR_STATUS_FE_CMD_NOT_ISSUED_ACMD12_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS &= ~(1u << 7u);
    }

    /**
     * Toggle FORCE_EVENT_ACMD_ERR_STATUS's FE_CMD_NOT_ISSUED_ACMD12_ERR bit.
     */
    inline void
    toggle_FORCE_EVENT_ACMD_ERR_STATUS_FE_CMD_NOT_ISSUED_ACMD12_ERR()
    {
        FORCE_EVENT_ACMD_ERR_STATUS ^= 1u << 7u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_CMD_TIMEOUT_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_CMD_TIMEOUT_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 0u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_CMD_TIMEOUT_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_CMD_TIMEOUT_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_CMD_TIMEOUT_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_CMD_TIMEOUT_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 0u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_CMD_CRC_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_CMD_CRC_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 1u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_CMD_CRC_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_CMD_CRC_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_CMD_CRC_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_CMD_CRC_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 1u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_CMD_END_BIT_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_CMD_END_BIT_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 2u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_CMD_END_BIT_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_CMD_END_BIT_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 2u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_CMD_END_BIT_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_CMD_END_BIT_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 2u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_CMD_IND_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_CMD_IND_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 3u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_CMD_IND_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_CMD_IND_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 3u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_CMD_IND_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_CMD_IND_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 3u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_DATA_TIMEOUT_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_DATA_TIMEOUT_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 4u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_DATA_TIMEOUT_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_DATA_TIMEOUT_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 4u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_DATA_TIMEOUT_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_DATA_TIMEOUT_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 4u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_DATA_CRC_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_DATA_CRC_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 5u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_DATA_CRC_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_DATA_CRC_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 5u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_DATA_CRC_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_DATA_CRC_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 5u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_DATA_END_BIT_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_DATA_END_BIT_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 6u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_DATA_END_BIT_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_DATA_END_BIT_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 6u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_DATA_END_BIT_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_DATA_END_BIT_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 6u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_CURRENT_LIMIT_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_CURRENT_LIMIT_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 7u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_CURRENT_LIMIT_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_CURRENT_LIMIT_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 7u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_CURRENT_LIMIT_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_CURRENT_LIMIT_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 7u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_ACMD12_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_ACMD12_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 8u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_ACMD12_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_ACMD12_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 8u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_ACMD12_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_ACMD12_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 8u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_TARGET_RESPONSE_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_TARGET_RESPONSE_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 12u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_TARGET_RESPONSE_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_TARGET_RESPONSE_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 12u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_TARGET_RESPONSE_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_TARGET_RESPONSE_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 12u;
    }

    /**
     * Set FORCE_EVENT_ERR_STATUS's FE_CEATA_ERR bit.
     */
    inline void set_FORCE_EVENT_ERR_STATUS_FE_CEATA_ERR()
    {
        FORCE_EVENT_ERR_STATUS |= 1u << 13u;
    }

    /**
     * Clear FORCE_EVENT_ERR_STATUS's FE_CEATA_ERR bit.
     */
    inline void clear_FORCE_EVENT_ERR_STATUS_FE_CEATA_ERR()
    {
        FORCE_EVENT_ERR_STATUS &= ~(1u << 13u);
    }

    /**
     * Toggle FORCE_EVENT_ERR_STATUS's FE_CEATA_ERR bit.
     */
    inline void toggle_FORCE_EVENT_ERR_STATUS_FE_CEATA_ERR()
    {
        FORCE_EVENT_ERR_STATUS ^= 1u << 13u;
    }

    /**
     * Set DEBUG_SEL's DEBUG_SEL bit.
     */
    inline void set_DEBUG_SEL_DEBUG_SEL()
    {
        DEBUG_SEL |= 1u << 0u;
    }

    /**
     * Clear DEBUG_SEL's DEBUG_SEL bit.
     */
    inline void clear_DEBUG_SEL_DEBUG_SEL()
    {
        DEBUG_SEL &= ~(1u << 0u);
    }

    /**
     * Toggle DEBUG_SEL's DEBUG_SEL bit.
     */
    inline void toggle_DEBUG_SEL_DEBUG_SEL()
    {
        DEBUG_SEL ^= 1u << 0u;
    }

    /**
     * Get SLOT_INT_STATUS's SLOT_INT_STATUS field.
     */
    SDMMC_SLOT_INT_STATUS_SLOT_INT_STATUS get_SLOT_INT_STATUS_SLOT_INT_STATUS()
    {
        return SDMMC_SLOT_INT_STATUS_SLOT_INT_STATUS((SLOT_INT_STATUS >> 0u) &
                                                     0b11111111u);
    }
};

static_assert(sizeof(sdmmc) == sdmmc::size);

static volatile sdmmc *const SDMMC = reinterpret_cast<sdmmc *>(0x4801C000);

}; // namespace XMC4700
