/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/POSIF0_MCMF_MSS.h"
#include "../enums/POSIF0_PCONF_DSEL.h"
#include "../enums/POSIF0_PCONF_EWIE.h"
#include "../enums/POSIF0_PCONF_EWIL.h"
#include "../enums/POSIF0_PCONF_EWIS.h"
#include "../enums/POSIF0_PCONF_FSEL.h"
#include "../enums/POSIF0_PCONF_INSEL0.h"
#include "../enums/POSIF0_PCONF_INSEL1.h"
#include "../enums/POSIF0_PCONF_INSEL2.h"
#include "../enums/POSIF0_PCONF_LPC.h"
#include "../enums/POSIF0_PCONF_MCUE.h"
#include "../enums/POSIF0_PCONF_MSES.h"
#include "../enums/POSIF0_PCONF_MSETS.h"
#include "../enums/POSIF0_PCONF_MSYNS.h"
#include "../enums/POSIF0_PCONF_QDCM.h"
#include "../enums/POSIF0_PCONF_SPES.h"
#include "../enums/POSIF0_PFLGE_CHESEL.h"
#include "../enums/POSIF0_PFLGE_CNTSEL.h"
#include "../enums/POSIF0_PFLGE_DIRSEL.h"
#include "../enums/POSIF0_PFLGE_ECHE.h"
#include "../enums/POSIF0_PFLGE_ECNT.h"
#include "../enums/POSIF0_PFLGE_EDIR.h"
#include "../enums/POSIF0_PFLGE_EERR.h"
#include "../enums/POSIF0_PFLGE_EHIE.h"
#include "../enums/POSIF0_PFLGE_EINDX.h"
#include "../enums/POSIF0_PFLGE_EMST.h"
#include "../enums/POSIF0_PFLGE_EPCLK.h"
#include "../enums/POSIF0_PFLGE_ERRSEL.h"
#include "../enums/POSIF0_PFLGE_EWHE.h"
#include "../enums/POSIF0_PFLGE_HIESEL.h"
#include "../enums/POSIF0_PFLGE_INDSEL.h"
#include "../enums/POSIF0_PFLGE_MSTSEL.h"
#include "../enums/POSIF0_PFLGE_PCLSEL.h"
#include "../enums/POSIF0_PFLGE_WHESEL.h"
#include "../enums/POSIF0_PFLG_CHES.h"
#include "../enums/POSIF0_PFLG_CNTS.h"
#include "../enums/POSIF0_PFLG_DIRS.h"
#include "../enums/POSIF0_PFLG_ERRS.h"
#include "../enums/POSIF0_PFLG_HIES.h"
#include "../enums/POSIF0_PFLG_INDXS.h"
#include "../enums/POSIF0_PFLG_MSTS.h"
#include "../enums/POSIF0_PFLG_PCLKS.h"
#include "../enums/POSIF0_PFLG_WHES.h"
#include "../enums/POSIF0_PRUN_RB.h"
#include "../enums/POSIF0_PSUS_MSUS.h"
#include "../enums/POSIF0_PSUS_QSUS.h"
#include "../enums/POSIF0_QDC_DVAL.h"
#include "../enums/POSIF0_QDC_ICM.h"
#include "../enums/POSIF0_QDC_PALS.h"
#include "../enums/POSIF0_QDC_PBLS.h"
#include "../enums/POSIF0_QDC_PHS.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Position Interface 0
 */
struct [[gnu::packed]] posif
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< posif's identifier. */
    static constexpr std::size_t size = 260; /*!< posif's size in bytes. */

    /* Fields. */
    uint32_t PCONF;           /*!< (read-write) POSIF configuration */
    uint32_t PSUS;            /*!< (read-write) POSIF Suspend Config */
    uint32_t PRUNS;           /*!< (write-only) POSIF Run Bit Set */
    uint32_t PRUNC;           /*!< (write-only) POSIF Run Bit Clear */
    const uint32_t PRUN = {}; /*!< (read-only) POSIF Run Bit Status */
    static constexpr std::size_t reserved_padding0_length = 3;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    const uint32_t MIDR =
        {}; /*!< (read-only) Module Identification register */
    static constexpr std::size_t reserved_padding1_length = 3;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    const uint32_t HALP = {}; /*!< (read-only) Hall Sensor Patterns */
    uint32_t HALPS;           /*!< (read-write) Hall Sensor Shadow Patterns */
    static constexpr std::size_t reserved_padding2_length = 2;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    const uint32_t MCM = {}; /*!< (read-only) Multi-Channel Pattern */
    uint32_t MCSM;           /*!< (read-write) Multi-Channel Shadow Pattern */
    uint32_t MCMS; /*!< (write-only) Multi-Channel Pattern Control set */
    uint32_t MCMC; /*!< (write-only) Multi-Channel Pattern Control clear */
    const uint32_t MCMF =
        {}; /*!< (read-only) Multi-Channel Pattern Control flag */
    static constexpr std::size_t reserved_padding3_length = 3;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t QDC; /*!< (read-write) Quadrature Decoder Control */
    static constexpr std::size_t reserved_padding4_length = 3;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    const uint32_t PFLG = {}; /*!< (read-only) POSIF Interrupt Flags */
    uint32_t PFLGE;           /*!< (read-write) POSIF Interrupt Enable */
    uint32_t SPFLG;           /*!< (write-only) POSIF Interrupt Set */
    uint32_t RPFLG;           /*!< (write-only) POSIF Interrupt Clear */
    static constexpr std::size_t reserved_padding5_length = 32;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    const uint32_t PDBG = {}; /*!< (read-only) POSIF Debug register */

    /* Methods. */

    /**
     * Get PCONF's LPC field.
     */
    POSIF0_PCONF_LPC get_PCONF_LPC()
    {
        return POSIF0_PCONF_LPC((PCONF >> 28u) & 0b111u);
    }

    /**
     * Set PCONF's LPC field.
     */
    inline void set_PCONF_LPC(POSIF0_PCONF_LPC value)
    {
        uint32_t curr = PCONF;

        curr &= ~(0b111u << 28u);
        curr |= (std::to_underlying(value) & 0b111u) << 28u;

        PCONF = curr;
    }

    /**
     * Get PCONF's EWIL bit.
     */
    POSIF0_PCONF_EWIL get_PCONF_EWIL()
    {
        return POSIF0_PCONF_EWIL(PCONF & (1u << 27u));
    }

    /**
     * Set PCONF's EWIL bit.
     */
    inline void set_PCONF_EWIL()
    {
        PCONF |= 1u << 27u;
    }

    /**
     * Clear PCONF's EWIL bit.
     */
    inline void clear_PCONF_EWIL()
    {
        PCONF &= ~(1u << 27u);
    }

    /**
     * Toggle PCONF's EWIL bit.
     */
    inline void toggle_PCONF_EWIL()
    {
        PCONF ^= 1u << 27u;
    }

    /**
     * Get PCONF's EWIE bit.
     */
    POSIF0_PCONF_EWIE get_PCONF_EWIE()
    {
        return POSIF0_PCONF_EWIE(PCONF & (1u << 26u));
    }

    /**
     * Set PCONF's EWIE bit.
     */
    inline void set_PCONF_EWIE()
    {
        PCONF |= 1u << 26u;
    }

    /**
     * Clear PCONF's EWIE bit.
     */
    inline void clear_PCONF_EWIE()
    {
        PCONF &= ~(1u << 26u);
    }

    /**
     * Toggle PCONF's EWIE bit.
     */
    inline void toggle_PCONF_EWIE()
    {
        PCONF ^= 1u << 26u;
    }

    /**
     * Get PCONF's EWIS field.
     */
    POSIF0_PCONF_EWIS get_PCONF_EWIS()
    {
        return POSIF0_PCONF_EWIS((PCONF >> 24u) & 0b11u);
    }

    /**
     * Set PCONF's EWIS field.
     */
    inline void set_PCONF_EWIS(POSIF0_PCONF_EWIS value)
    {
        uint32_t curr = PCONF;

        curr &= ~(0b11u << 24u);
        curr |= (std::to_underlying(value) & 0b11u) << 24u;

        PCONF = curr;
    }

    /**
     * Get PCONF's MSYNS field.
     */
    POSIF0_PCONF_MSYNS get_PCONF_MSYNS()
    {
        return POSIF0_PCONF_MSYNS((PCONF >> 22u) & 0b11u);
    }

    /**
     * Set PCONF's MSYNS field.
     */
    inline void set_PCONF_MSYNS(POSIF0_PCONF_MSYNS value)
    {
        uint32_t curr = PCONF;

        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(value) & 0b11u) << 22u;

        PCONF = curr;
    }

    /**
     * Get PCONF's MSES bit.
     */
    POSIF0_PCONF_MSES get_PCONF_MSES()
    {
        return POSIF0_PCONF_MSES(PCONF & (1u << 21u));
    }

    /**
     * Set PCONF's MSES bit.
     */
    inline void set_PCONF_MSES()
    {
        PCONF |= 1u << 21u;
    }

    /**
     * Clear PCONF's MSES bit.
     */
    inline void clear_PCONF_MSES()
    {
        PCONF &= ~(1u << 21u);
    }

    /**
     * Toggle PCONF's MSES bit.
     */
    inline void toggle_PCONF_MSES()
    {
        PCONF ^= 1u << 21u;
    }

    /**
     * Get PCONF's MSETS field.
     */
    POSIF0_PCONF_MSETS get_PCONF_MSETS()
    {
        return POSIF0_PCONF_MSETS((PCONF >> 18u) & 0b111u);
    }

    /**
     * Set PCONF's MSETS field.
     */
    inline void set_PCONF_MSETS(POSIF0_PCONF_MSETS value)
    {
        uint32_t curr = PCONF;

        curr &= ~(0b111u << 18u);
        curr |= (std::to_underlying(value) & 0b111u) << 18u;

        PCONF = curr;
    }

    /**
     * Get PCONF's SPES bit.
     */
    POSIF0_PCONF_SPES get_PCONF_SPES()
    {
        return POSIF0_PCONF_SPES(PCONF & (1u << 17u));
    }

    /**
     * Set PCONF's SPES bit.
     */
    inline void set_PCONF_SPES()
    {
        PCONF |= 1u << 17u;
    }

    /**
     * Clear PCONF's SPES bit.
     */
    inline void clear_PCONF_SPES()
    {
        PCONF &= ~(1u << 17u);
    }

    /**
     * Toggle PCONF's SPES bit.
     */
    inline void toggle_PCONF_SPES()
    {
        PCONF ^= 1u << 17u;
    }

    /**
     * Get PCONF's DSEL bit.
     */
    POSIF0_PCONF_DSEL get_PCONF_DSEL()
    {
        return POSIF0_PCONF_DSEL(PCONF & (1u << 16u));
    }

    /**
     * Set PCONF's DSEL bit.
     */
    inline void set_PCONF_DSEL()
    {
        PCONF |= 1u << 16u;
    }

    /**
     * Clear PCONF's DSEL bit.
     */
    inline void clear_PCONF_DSEL()
    {
        PCONF &= ~(1u << 16u);
    }

    /**
     * Toggle PCONF's DSEL bit.
     */
    inline void toggle_PCONF_DSEL()
    {
        PCONF ^= 1u << 16u;
    }

    /**
     * Get PCONF's INSEL2 field.
     */
    POSIF0_PCONF_INSEL2 get_PCONF_INSEL2()
    {
        return POSIF0_PCONF_INSEL2((PCONF >> 12u) & 0b11u);
    }

    /**
     * Set PCONF's INSEL2 field.
     */
    inline void set_PCONF_INSEL2(POSIF0_PCONF_INSEL2 value)
    {
        uint32_t curr = PCONF;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        PCONF = curr;
    }

    /**
     * Get PCONF's INSEL1 field.
     */
    POSIF0_PCONF_INSEL1 get_PCONF_INSEL1()
    {
        return POSIF0_PCONF_INSEL1((PCONF >> 10u) & 0b11u);
    }

    /**
     * Set PCONF's INSEL1 field.
     */
    inline void set_PCONF_INSEL1(POSIF0_PCONF_INSEL1 value)
    {
        uint32_t curr = PCONF;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        PCONF = curr;
    }

    /**
     * Get PCONF's INSEL0 field.
     */
    POSIF0_PCONF_INSEL0 get_PCONF_INSEL0()
    {
        return POSIF0_PCONF_INSEL0((PCONF >> 8u) & 0b11u);
    }

    /**
     * Set PCONF's INSEL0 field.
     */
    inline void set_PCONF_INSEL0(POSIF0_PCONF_INSEL0 value)
    {
        uint32_t curr = PCONF;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        PCONF = curr;
    }

    /**
     * Get PCONF's MCUE bit.
     */
    POSIF0_PCONF_MCUE get_PCONF_MCUE()
    {
        return POSIF0_PCONF_MCUE(PCONF & (1u << 5u));
    }

    /**
     * Set PCONF's MCUE bit.
     */
    inline void set_PCONF_MCUE()
    {
        PCONF |= 1u << 5u;
    }

    /**
     * Clear PCONF's MCUE bit.
     */
    inline void clear_PCONF_MCUE()
    {
        PCONF &= ~(1u << 5u);
    }

    /**
     * Toggle PCONF's MCUE bit.
     */
    inline void toggle_PCONF_MCUE()
    {
        PCONF ^= 1u << 5u;
    }

    /**
     * Get PCONF's HIDG bit.
     */
    bool get_PCONF_HIDG()
    {
        return PCONF & (1u << 4u);
    }

    /**
     * Set PCONF's HIDG bit.
     */
    inline void set_PCONF_HIDG()
    {
        PCONF |= 1u << 4u;
    }

    /**
     * Clear PCONF's HIDG bit.
     */
    inline void clear_PCONF_HIDG()
    {
        PCONF &= ~(1u << 4u);
    }

    /**
     * Toggle PCONF's HIDG bit.
     */
    inline void toggle_PCONF_HIDG()
    {
        PCONF ^= 1u << 4u;
    }

    /**
     * Get PCONF's QDCM bit.
     */
    POSIF0_PCONF_QDCM get_PCONF_QDCM()
    {
        return POSIF0_PCONF_QDCM(PCONF & (1u << 2u));
    }

    /**
     * Set PCONF's QDCM bit.
     */
    inline void set_PCONF_QDCM()
    {
        PCONF |= 1u << 2u;
    }

    /**
     * Clear PCONF's QDCM bit.
     */
    inline void clear_PCONF_QDCM()
    {
        PCONF &= ~(1u << 2u);
    }

    /**
     * Toggle PCONF's QDCM bit.
     */
    inline void toggle_PCONF_QDCM()
    {
        PCONF ^= 1u << 2u;
    }

    /**
     * Get PCONF's FSEL field.
     */
    POSIF0_PCONF_FSEL get_PCONF_FSEL()
    {
        return POSIF0_PCONF_FSEL((PCONF >> 0u) & 0b11u);
    }

    /**
     * Set PCONF's FSEL field.
     */
    inline void set_PCONF_FSEL(POSIF0_PCONF_FSEL value)
    {
        uint32_t curr = PCONF;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        PCONF = curr;
    }

    /**
     * Get PSUS's MSUS field.
     */
    POSIF0_PSUS_MSUS get_PSUS_MSUS()
    {
        return POSIF0_PSUS_MSUS((PSUS >> 2u) & 0b11u);
    }

    /**
     * Set PSUS's MSUS field.
     */
    inline void set_PSUS_MSUS(POSIF0_PSUS_MSUS value)
    {
        uint32_t curr = PSUS;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        PSUS = curr;
    }

    /**
     * Get PSUS's QSUS field.
     */
    POSIF0_PSUS_QSUS get_PSUS_QSUS()
    {
        return POSIF0_PSUS_QSUS((PSUS >> 0u) & 0b11u);
    }

    /**
     * Set PSUS's QSUS field.
     */
    inline void set_PSUS_QSUS(POSIF0_PSUS_QSUS value)
    {
        uint32_t curr = PSUS;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        PSUS = curr;
    }

    /**
     * Set PRUNS's SRB bit.
     */
    inline void set_PRUNS_SRB()
    {
        PRUNS |= 1u << 0u;
    }

    /**
     * Clear PRUNS's SRB bit.
     */
    inline void clear_PRUNS_SRB()
    {
        PRUNS &= ~(1u << 0u);
    }

    /**
     * Toggle PRUNS's SRB bit.
     */
    inline void toggle_PRUNS_SRB()
    {
        PRUNS ^= 1u << 0u;
    }

    /**
     * Set PRUNC's CSM bit.
     */
    inline void set_PRUNC_CSM()
    {
        PRUNC |= 1u << 1u;
    }

    /**
     * Clear PRUNC's CSM bit.
     */
    inline void clear_PRUNC_CSM()
    {
        PRUNC &= ~(1u << 1u);
    }

    /**
     * Toggle PRUNC's CSM bit.
     */
    inline void toggle_PRUNC_CSM()
    {
        PRUNC ^= 1u << 1u;
    }

    /**
     * Set PRUNC's CRB bit.
     */
    inline void set_PRUNC_CRB()
    {
        PRUNC |= 1u << 0u;
    }

    /**
     * Clear PRUNC's CRB bit.
     */
    inline void clear_PRUNC_CRB()
    {
        PRUNC &= ~(1u << 0u);
    }

    /**
     * Toggle PRUNC's CRB bit.
     */
    inline void toggle_PRUNC_CRB()
    {
        PRUNC ^= 1u << 0u;
    }

    /**
     * Get PRUN's RB bit.
     */
    POSIF0_PRUN_RB get_PRUN_RB()
    {
        return POSIF0_PRUN_RB(PRUN & (1u << 0u));
    }

    /**
     * Get MIDR's MODN field.
     */
    uint16_t get_MIDR_MODN()
    {
        return (MIDR >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get MIDR's MODT field.
     */
    uint8_t get_MIDR_MODT()
    {
        return (MIDR >> 8u) & 0b11111111u;
    }

    /**
     * Get MIDR's MODR field.
     */
    uint8_t get_MIDR_MODR()
    {
        return (MIDR >> 0u) & 0b11111111u;
    }

    /**
     * Get HALP's HEP field.
     */
    uint8_t get_HALP_HEP()
    {
        return (HALP >> 3u) & 0b111u;
    }

    /**
     * Get HALP's HCP field.
     */
    uint8_t get_HALP_HCP()
    {
        return (HALP >> 0u) & 0b111u;
    }

    /**
     * Get HALPS's HEPS field.
     */
    uint8_t get_HALPS_HEPS()
    {
        return (HALPS >> 3u) & 0b111u;
    }

    /**
     * Set HALPS's HEPS field.
     */
    inline void set_HALPS_HEPS(uint8_t value)
    {
        uint32_t curr = HALPS;

        curr &= ~(0b111u << 3u);
        curr |= (value & 0b111u) << 3u;

        HALPS = curr;
    }

    /**
     * Get HALPS's HCPS field.
     */
    uint8_t get_HALPS_HCPS()
    {
        return (HALPS >> 0u) & 0b111u;
    }

    /**
     * Set HALPS's HCPS field.
     */
    inline void set_HALPS_HCPS(uint8_t value)
    {
        uint32_t curr = HALPS;

        curr &= ~(0b111u << 0u);
        curr |= (value & 0b111u) << 0u;

        HALPS = curr;
    }

    /**
     * Get MCM's MCMP field.
     */
    uint16_t get_MCM_MCMP()
    {
        return (MCM >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get MCSM's MCMPS field.
     */
    uint16_t get_MCSM_MCMPS()
    {
        return (MCSM >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set MCSM's MCMPS field.
     */
    inline void set_MCSM_MCMPS(uint16_t value)
    {
        uint32_t curr = MCSM;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        MCSM = curr;
    }

    /**
     * Set MCMS's STMR bit.
     */
    inline void set_MCMS_STMR()
    {
        MCMS |= 1u << 2u;
    }

    /**
     * Clear MCMS's STMR bit.
     */
    inline void clear_MCMS_STMR()
    {
        MCMS &= ~(1u << 2u);
    }

    /**
     * Toggle MCMS's STMR bit.
     */
    inline void toggle_MCMS_STMR()
    {
        MCMS ^= 1u << 2u;
    }

    /**
     * Set MCMS's STHR bit.
     */
    inline void set_MCMS_STHR()
    {
        MCMS |= 1u << 1u;
    }

    /**
     * Clear MCMS's STHR bit.
     */
    inline void clear_MCMS_STHR()
    {
        MCMS &= ~(1u << 1u);
    }

    /**
     * Toggle MCMS's STHR bit.
     */
    inline void toggle_MCMS_STHR()
    {
        MCMS ^= 1u << 1u;
    }

    /**
     * Set MCMS's MNPS bit.
     */
    inline void set_MCMS_MNPS()
    {
        MCMS |= 1u << 0u;
    }

    /**
     * Clear MCMS's MNPS bit.
     */
    inline void clear_MCMS_MNPS()
    {
        MCMS &= ~(1u << 0u);
    }

    /**
     * Toggle MCMS's MNPS bit.
     */
    inline void toggle_MCMS_MNPS()
    {
        MCMS ^= 1u << 0u;
    }

    /**
     * Set MCMC's MPC bit.
     */
    inline void set_MCMC_MPC()
    {
        MCMC |= 1u << 1u;
    }

    /**
     * Clear MCMC's MPC bit.
     */
    inline void clear_MCMC_MPC()
    {
        MCMC &= ~(1u << 1u);
    }

    /**
     * Toggle MCMC's MPC bit.
     */
    inline void toggle_MCMC_MPC()
    {
        MCMC ^= 1u << 1u;
    }

    /**
     * Set MCMC's MNPC bit.
     */
    inline void set_MCMC_MNPC()
    {
        MCMC |= 1u << 0u;
    }

    /**
     * Clear MCMC's MNPC bit.
     */
    inline void clear_MCMC_MNPC()
    {
        MCMC &= ~(1u << 0u);
    }

    /**
     * Toggle MCMC's MNPC bit.
     */
    inline void toggle_MCMC_MNPC()
    {
        MCMC ^= 1u << 0u;
    }

    /**
     * Get MCMF's MSS bit.
     */
    POSIF0_MCMF_MSS get_MCMF_MSS()
    {
        return POSIF0_MCMF_MSS(MCMF & (1u << 0u));
    }

    /**
     * Get QDC's DVAL bit.
     */
    POSIF0_QDC_DVAL get_QDC_DVAL()
    {
        return POSIF0_QDC_DVAL(QDC & (1u << 8u));
    }

    /**
     * Get QDC's ICM field.
     */
    POSIF0_QDC_ICM get_QDC_ICM()
    {
        return POSIF0_QDC_ICM((QDC >> 4u) & 0b11u);
    }

    /**
     * Set QDC's ICM field.
     */
    inline void set_QDC_ICM(POSIF0_QDC_ICM value)
    {
        uint32_t curr = QDC;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        QDC = curr;
    }

    /**
     * Get QDC's PHS bit.
     */
    POSIF0_QDC_PHS get_QDC_PHS()
    {
        return POSIF0_QDC_PHS(QDC & (1u << 2u));
    }

    /**
     * Set QDC's PHS bit.
     */
    inline void set_QDC_PHS()
    {
        QDC |= 1u << 2u;
    }

    /**
     * Clear QDC's PHS bit.
     */
    inline void clear_QDC_PHS()
    {
        QDC &= ~(1u << 2u);
    }

    /**
     * Toggle QDC's PHS bit.
     */
    inline void toggle_QDC_PHS()
    {
        QDC ^= 1u << 2u;
    }

    /**
     * Get QDC's PBLS bit.
     */
    POSIF0_QDC_PBLS get_QDC_PBLS()
    {
        return POSIF0_QDC_PBLS(QDC & (1u << 1u));
    }

    /**
     * Set QDC's PBLS bit.
     */
    inline void set_QDC_PBLS()
    {
        QDC |= 1u << 1u;
    }

    /**
     * Clear QDC's PBLS bit.
     */
    inline void clear_QDC_PBLS()
    {
        QDC &= ~(1u << 1u);
    }

    /**
     * Toggle QDC's PBLS bit.
     */
    inline void toggle_QDC_PBLS()
    {
        QDC ^= 1u << 1u;
    }

    /**
     * Get QDC's PALS bit.
     */
    POSIF0_QDC_PALS get_QDC_PALS()
    {
        return POSIF0_QDC_PALS(QDC & (1u << 0u));
    }

    /**
     * Set QDC's PALS bit.
     */
    inline void set_QDC_PALS()
    {
        QDC |= 1u << 0u;
    }

    /**
     * Clear QDC's PALS bit.
     */
    inline void clear_QDC_PALS()
    {
        QDC &= ~(1u << 0u);
    }

    /**
     * Toggle QDC's PALS bit.
     */
    inline void toggle_QDC_PALS()
    {
        QDC ^= 1u << 0u;
    }

    /**
     * Get PFLG's PCLKS bit.
     */
    POSIF0_PFLG_PCLKS get_PFLG_PCLKS()
    {
        return POSIF0_PFLG_PCLKS(PFLG & (1u << 12u));
    }

    /**
     * Get PFLG's DIRS bit.
     */
    POSIF0_PFLG_DIRS get_PFLG_DIRS()
    {
        return POSIF0_PFLG_DIRS(PFLG & (1u << 11u));
    }

    /**
     * Get PFLG's CNTS bit.
     */
    POSIF0_PFLG_CNTS get_PFLG_CNTS()
    {
        return POSIF0_PFLG_CNTS(PFLG & (1u << 10u));
    }

    /**
     * Get PFLG's ERRS bit.
     */
    POSIF0_PFLG_ERRS get_PFLG_ERRS()
    {
        return POSIF0_PFLG_ERRS(PFLG & (1u << 9u));
    }

    /**
     * Get PFLG's INDXS bit.
     */
    POSIF0_PFLG_INDXS get_PFLG_INDXS()
    {
        return POSIF0_PFLG_INDXS(PFLG & (1u << 8u));
    }

    /**
     * Get PFLG's MSTS bit.
     */
    POSIF0_PFLG_MSTS get_PFLG_MSTS()
    {
        return POSIF0_PFLG_MSTS(PFLG & (1u << 4u));
    }

    /**
     * Get PFLG's HIES bit.
     */
    POSIF0_PFLG_HIES get_PFLG_HIES()
    {
        return POSIF0_PFLG_HIES(PFLG & (1u << 2u));
    }

    /**
     * Get PFLG's WHES bit.
     */
    POSIF0_PFLG_WHES get_PFLG_WHES()
    {
        return POSIF0_PFLG_WHES(PFLG & (1u << 1u));
    }

    /**
     * Get PFLG's CHES bit.
     */
    POSIF0_PFLG_CHES get_PFLG_CHES()
    {
        return POSIF0_PFLG_CHES(PFLG & (1u << 0u));
    }

    /**
     * Get PFLGE's PCLSEL bit.
     */
    POSIF0_PFLGE_PCLSEL get_PFLGE_PCLSEL()
    {
        return POSIF0_PFLGE_PCLSEL(PFLGE & (1u << 28u));
    }

    /**
     * Set PFLGE's PCLSEL bit.
     */
    inline void set_PFLGE_PCLSEL()
    {
        PFLGE |= 1u << 28u;
    }

    /**
     * Clear PFLGE's PCLSEL bit.
     */
    inline void clear_PFLGE_PCLSEL()
    {
        PFLGE &= ~(1u << 28u);
    }

    /**
     * Toggle PFLGE's PCLSEL bit.
     */
    inline void toggle_PFLGE_PCLSEL()
    {
        PFLGE ^= 1u << 28u;
    }

    /**
     * Get PFLGE's DIRSEL bit.
     */
    POSIF0_PFLGE_DIRSEL get_PFLGE_DIRSEL()
    {
        return POSIF0_PFLGE_DIRSEL(PFLGE & (1u << 27u));
    }

    /**
     * Set PFLGE's DIRSEL bit.
     */
    inline void set_PFLGE_DIRSEL()
    {
        PFLGE |= 1u << 27u;
    }

    /**
     * Clear PFLGE's DIRSEL bit.
     */
    inline void clear_PFLGE_DIRSEL()
    {
        PFLGE &= ~(1u << 27u);
    }

    /**
     * Toggle PFLGE's DIRSEL bit.
     */
    inline void toggle_PFLGE_DIRSEL()
    {
        PFLGE ^= 1u << 27u;
    }

    /**
     * Get PFLGE's CNTSEL bit.
     */
    POSIF0_PFLGE_CNTSEL get_PFLGE_CNTSEL()
    {
        return POSIF0_PFLGE_CNTSEL(PFLGE & (1u << 26u));
    }

    /**
     * Set PFLGE's CNTSEL bit.
     */
    inline void set_PFLGE_CNTSEL()
    {
        PFLGE |= 1u << 26u;
    }

    /**
     * Clear PFLGE's CNTSEL bit.
     */
    inline void clear_PFLGE_CNTSEL()
    {
        PFLGE &= ~(1u << 26u);
    }

    /**
     * Toggle PFLGE's CNTSEL bit.
     */
    inline void toggle_PFLGE_CNTSEL()
    {
        PFLGE ^= 1u << 26u;
    }

    /**
     * Get PFLGE's ERRSEL bit.
     */
    POSIF0_PFLGE_ERRSEL get_PFLGE_ERRSEL()
    {
        return POSIF0_PFLGE_ERRSEL(PFLGE & (1u << 25u));
    }

    /**
     * Set PFLGE's ERRSEL bit.
     */
    inline void set_PFLGE_ERRSEL()
    {
        PFLGE |= 1u << 25u;
    }

    /**
     * Clear PFLGE's ERRSEL bit.
     */
    inline void clear_PFLGE_ERRSEL()
    {
        PFLGE &= ~(1u << 25u);
    }

    /**
     * Toggle PFLGE's ERRSEL bit.
     */
    inline void toggle_PFLGE_ERRSEL()
    {
        PFLGE ^= 1u << 25u;
    }

    /**
     * Get PFLGE's INDSEL bit.
     */
    POSIF0_PFLGE_INDSEL get_PFLGE_INDSEL()
    {
        return POSIF0_PFLGE_INDSEL(PFLGE & (1u << 24u));
    }

    /**
     * Set PFLGE's INDSEL bit.
     */
    inline void set_PFLGE_INDSEL()
    {
        PFLGE |= 1u << 24u;
    }

    /**
     * Clear PFLGE's INDSEL bit.
     */
    inline void clear_PFLGE_INDSEL()
    {
        PFLGE &= ~(1u << 24u);
    }

    /**
     * Toggle PFLGE's INDSEL bit.
     */
    inline void toggle_PFLGE_INDSEL()
    {
        PFLGE ^= 1u << 24u;
    }

    /**
     * Get PFLGE's MSTSEL bit.
     */
    POSIF0_PFLGE_MSTSEL get_PFLGE_MSTSEL()
    {
        return POSIF0_PFLGE_MSTSEL(PFLGE & (1u << 20u));
    }

    /**
     * Set PFLGE's MSTSEL bit.
     */
    inline void set_PFLGE_MSTSEL()
    {
        PFLGE |= 1u << 20u;
    }

    /**
     * Clear PFLGE's MSTSEL bit.
     */
    inline void clear_PFLGE_MSTSEL()
    {
        PFLGE &= ~(1u << 20u);
    }

    /**
     * Toggle PFLGE's MSTSEL bit.
     */
    inline void toggle_PFLGE_MSTSEL()
    {
        PFLGE ^= 1u << 20u;
    }

    /**
     * Get PFLGE's HIESEL bit.
     */
    POSIF0_PFLGE_HIESEL get_PFLGE_HIESEL()
    {
        return POSIF0_PFLGE_HIESEL(PFLGE & (1u << 18u));
    }

    /**
     * Set PFLGE's HIESEL bit.
     */
    inline void set_PFLGE_HIESEL()
    {
        PFLGE |= 1u << 18u;
    }

    /**
     * Clear PFLGE's HIESEL bit.
     */
    inline void clear_PFLGE_HIESEL()
    {
        PFLGE &= ~(1u << 18u);
    }

    /**
     * Toggle PFLGE's HIESEL bit.
     */
    inline void toggle_PFLGE_HIESEL()
    {
        PFLGE ^= 1u << 18u;
    }

    /**
     * Get PFLGE's WHESEL bit.
     */
    POSIF0_PFLGE_WHESEL get_PFLGE_WHESEL()
    {
        return POSIF0_PFLGE_WHESEL(PFLGE & (1u << 17u));
    }

    /**
     * Set PFLGE's WHESEL bit.
     */
    inline void set_PFLGE_WHESEL()
    {
        PFLGE |= 1u << 17u;
    }

    /**
     * Clear PFLGE's WHESEL bit.
     */
    inline void clear_PFLGE_WHESEL()
    {
        PFLGE &= ~(1u << 17u);
    }

    /**
     * Toggle PFLGE's WHESEL bit.
     */
    inline void toggle_PFLGE_WHESEL()
    {
        PFLGE ^= 1u << 17u;
    }

    /**
     * Get PFLGE's CHESEL bit.
     */
    POSIF0_PFLGE_CHESEL get_PFLGE_CHESEL()
    {
        return POSIF0_PFLGE_CHESEL(PFLGE & (1u << 16u));
    }

    /**
     * Set PFLGE's CHESEL bit.
     */
    inline void set_PFLGE_CHESEL()
    {
        PFLGE |= 1u << 16u;
    }

    /**
     * Clear PFLGE's CHESEL bit.
     */
    inline void clear_PFLGE_CHESEL()
    {
        PFLGE &= ~(1u << 16u);
    }

    /**
     * Toggle PFLGE's CHESEL bit.
     */
    inline void toggle_PFLGE_CHESEL()
    {
        PFLGE ^= 1u << 16u;
    }

    /**
     * Get PFLGE's EPCLK bit.
     */
    POSIF0_PFLGE_EPCLK get_PFLGE_EPCLK()
    {
        return POSIF0_PFLGE_EPCLK(PFLGE & (1u << 12u));
    }

    /**
     * Set PFLGE's EPCLK bit.
     */
    inline void set_PFLGE_EPCLK()
    {
        PFLGE |= 1u << 12u;
    }

    /**
     * Clear PFLGE's EPCLK bit.
     */
    inline void clear_PFLGE_EPCLK()
    {
        PFLGE &= ~(1u << 12u);
    }

    /**
     * Toggle PFLGE's EPCLK bit.
     */
    inline void toggle_PFLGE_EPCLK()
    {
        PFLGE ^= 1u << 12u;
    }

    /**
     * Get PFLGE's EDIR bit.
     */
    POSIF0_PFLGE_EDIR get_PFLGE_EDIR()
    {
        return POSIF0_PFLGE_EDIR(PFLGE & (1u << 11u));
    }

    /**
     * Set PFLGE's EDIR bit.
     */
    inline void set_PFLGE_EDIR()
    {
        PFLGE |= 1u << 11u;
    }

    /**
     * Clear PFLGE's EDIR bit.
     */
    inline void clear_PFLGE_EDIR()
    {
        PFLGE &= ~(1u << 11u);
    }

    /**
     * Toggle PFLGE's EDIR bit.
     */
    inline void toggle_PFLGE_EDIR()
    {
        PFLGE ^= 1u << 11u;
    }

    /**
     * Get PFLGE's ECNT bit.
     */
    POSIF0_PFLGE_ECNT get_PFLGE_ECNT()
    {
        return POSIF0_PFLGE_ECNT(PFLGE & (1u << 10u));
    }

    /**
     * Set PFLGE's ECNT bit.
     */
    inline void set_PFLGE_ECNT()
    {
        PFLGE |= 1u << 10u;
    }

    /**
     * Clear PFLGE's ECNT bit.
     */
    inline void clear_PFLGE_ECNT()
    {
        PFLGE &= ~(1u << 10u);
    }

    /**
     * Toggle PFLGE's ECNT bit.
     */
    inline void toggle_PFLGE_ECNT()
    {
        PFLGE ^= 1u << 10u;
    }

    /**
     * Get PFLGE's EERR bit.
     */
    POSIF0_PFLGE_EERR get_PFLGE_EERR()
    {
        return POSIF0_PFLGE_EERR(PFLGE & (1u << 9u));
    }

    /**
     * Set PFLGE's EERR bit.
     */
    inline void set_PFLGE_EERR()
    {
        PFLGE |= 1u << 9u;
    }

    /**
     * Clear PFLGE's EERR bit.
     */
    inline void clear_PFLGE_EERR()
    {
        PFLGE &= ~(1u << 9u);
    }

    /**
     * Toggle PFLGE's EERR bit.
     */
    inline void toggle_PFLGE_EERR()
    {
        PFLGE ^= 1u << 9u;
    }

    /**
     * Get PFLGE's EINDX bit.
     */
    POSIF0_PFLGE_EINDX get_PFLGE_EINDX()
    {
        return POSIF0_PFLGE_EINDX(PFLGE & (1u << 8u));
    }

    /**
     * Set PFLGE's EINDX bit.
     */
    inline void set_PFLGE_EINDX()
    {
        PFLGE |= 1u << 8u;
    }

    /**
     * Clear PFLGE's EINDX bit.
     */
    inline void clear_PFLGE_EINDX()
    {
        PFLGE &= ~(1u << 8u);
    }

    /**
     * Toggle PFLGE's EINDX bit.
     */
    inline void toggle_PFLGE_EINDX()
    {
        PFLGE ^= 1u << 8u;
    }

    /**
     * Get PFLGE's EMST bit.
     */
    POSIF0_PFLGE_EMST get_PFLGE_EMST()
    {
        return POSIF0_PFLGE_EMST(PFLGE & (1u << 4u));
    }

    /**
     * Set PFLGE's EMST bit.
     */
    inline void set_PFLGE_EMST()
    {
        PFLGE |= 1u << 4u;
    }

    /**
     * Clear PFLGE's EMST bit.
     */
    inline void clear_PFLGE_EMST()
    {
        PFLGE &= ~(1u << 4u);
    }

    /**
     * Toggle PFLGE's EMST bit.
     */
    inline void toggle_PFLGE_EMST()
    {
        PFLGE ^= 1u << 4u;
    }

    /**
     * Get PFLGE's EHIE bit.
     */
    POSIF0_PFLGE_EHIE get_PFLGE_EHIE()
    {
        return POSIF0_PFLGE_EHIE(PFLGE & (1u << 2u));
    }

    /**
     * Set PFLGE's EHIE bit.
     */
    inline void set_PFLGE_EHIE()
    {
        PFLGE |= 1u << 2u;
    }

    /**
     * Clear PFLGE's EHIE bit.
     */
    inline void clear_PFLGE_EHIE()
    {
        PFLGE &= ~(1u << 2u);
    }

    /**
     * Toggle PFLGE's EHIE bit.
     */
    inline void toggle_PFLGE_EHIE()
    {
        PFLGE ^= 1u << 2u;
    }

    /**
     * Get PFLGE's EWHE bit.
     */
    POSIF0_PFLGE_EWHE get_PFLGE_EWHE()
    {
        return POSIF0_PFLGE_EWHE(PFLGE & (1u << 1u));
    }

    /**
     * Set PFLGE's EWHE bit.
     */
    inline void set_PFLGE_EWHE()
    {
        PFLGE |= 1u << 1u;
    }

    /**
     * Clear PFLGE's EWHE bit.
     */
    inline void clear_PFLGE_EWHE()
    {
        PFLGE &= ~(1u << 1u);
    }

    /**
     * Toggle PFLGE's EWHE bit.
     */
    inline void toggle_PFLGE_EWHE()
    {
        PFLGE ^= 1u << 1u;
    }

    /**
     * Get PFLGE's ECHE bit.
     */
    POSIF0_PFLGE_ECHE get_PFLGE_ECHE()
    {
        return POSIF0_PFLGE_ECHE(PFLGE & (1u << 0u));
    }

    /**
     * Set PFLGE's ECHE bit.
     */
    inline void set_PFLGE_ECHE()
    {
        PFLGE |= 1u << 0u;
    }

    /**
     * Clear PFLGE's ECHE bit.
     */
    inline void clear_PFLGE_ECHE()
    {
        PFLGE &= ~(1u << 0u);
    }

    /**
     * Toggle PFLGE's ECHE bit.
     */
    inline void toggle_PFLGE_ECHE()
    {
        PFLGE ^= 1u << 0u;
    }

    /**
     * Set SPFLG's SPCLK bit.
     */
    inline void set_SPFLG_SPCLK()
    {
        SPFLG |= 1u << 12u;
    }

    /**
     * Clear SPFLG's SPCLK bit.
     */
    inline void clear_SPFLG_SPCLK()
    {
        SPFLG &= ~(1u << 12u);
    }

    /**
     * Toggle SPFLG's SPCLK bit.
     */
    inline void toggle_SPFLG_SPCLK()
    {
        SPFLG ^= 1u << 12u;
    }

    /**
     * Set SPFLG's SDIR bit.
     */
    inline void set_SPFLG_SDIR()
    {
        SPFLG |= 1u << 11u;
    }

    /**
     * Clear SPFLG's SDIR bit.
     */
    inline void clear_SPFLG_SDIR()
    {
        SPFLG &= ~(1u << 11u);
    }

    /**
     * Toggle SPFLG's SDIR bit.
     */
    inline void toggle_SPFLG_SDIR()
    {
        SPFLG ^= 1u << 11u;
    }

    /**
     * Set SPFLG's SCNT bit.
     */
    inline void set_SPFLG_SCNT()
    {
        SPFLG |= 1u << 10u;
    }

    /**
     * Clear SPFLG's SCNT bit.
     */
    inline void clear_SPFLG_SCNT()
    {
        SPFLG &= ~(1u << 10u);
    }

    /**
     * Toggle SPFLG's SCNT bit.
     */
    inline void toggle_SPFLG_SCNT()
    {
        SPFLG ^= 1u << 10u;
    }

    /**
     * Set SPFLG's SERR bit.
     */
    inline void set_SPFLG_SERR()
    {
        SPFLG |= 1u << 9u;
    }

    /**
     * Clear SPFLG's SERR bit.
     */
    inline void clear_SPFLG_SERR()
    {
        SPFLG &= ~(1u << 9u);
    }

    /**
     * Toggle SPFLG's SERR bit.
     */
    inline void toggle_SPFLG_SERR()
    {
        SPFLG ^= 1u << 9u;
    }

    /**
     * Set SPFLG's SINDX bit.
     */
    inline void set_SPFLG_SINDX()
    {
        SPFLG |= 1u << 8u;
    }

    /**
     * Clear SPFLG's SINDX bit.
     */
    inline void clear_SPFLG_SINDX()
    {
        SPFLG &= ~(1u << 8u);
    }

    /**
     * Toggle SPFLG's SINDX bit.
     */
    inline void toggle_SPFLG_SINDX()
    {
        SPFLG ^= 1u << 8u;
    }

    /**
     * Set SPFLG's SMST bit.
     */
    inline void set_SPFLG_SMST()
    {
        SPFLG |= 1u << 4u;
    }

    /**
     * Clear SPFLG's SMST bit.
     */
    inline void clear_SPFLG_SMST()
    {
        SPFLG &= ~(1u << 4u);
    }

    /**
     * Toggle SPFLG's SMST bit.
     */
    inline void toggle_SPFLG_SMST()
    {
        SPFLG ^= 1u << 4u;
    }

    /**
     * Set SPFLG's SHIE bit.
     */
    inline void set_SPFLG_SHIE()
    {
        SPFLG |= 1u << 2u;
    }

    /**
     * Clear SPFLG's SHIE bit.
     */
    inline void clear_SPFLG_SHIE()
    {
        SPFLG &= ~(1u << 2u);
    }

    /**
     * Toggle SPFLG's SHIE bit.
     */
    inline void toggle_SPFLG_SHIE()
    {
        SPFLG ^= 1u << 2u;
    }

    /**
     * Set SPFLG's SWHE bit.
     */
    inline void set_SPFLG_SWHE()
    {
        SPFLG |= 1u << 1u;
    }

    /**
     * Clear SPFLG's SWHE bit.
     */
    inline void clear_SPFLG_SWHE()
    {
        SPFLG &= ~(1u << 1u);
    }

    /**
     * Toggle SPFLG's SWHE bit.
     */
    inline void toggle_SPFLG_SWHE()
    {
        SPFLG ^= 1u << 1u;
    }

    /**
     * Set SPFLG's SCHE bit.
     */
    inline void set_SPFLG_SCHE()
    {
        SPFLG |= 1u << 0u;
    }

    /**
     * Clear SPFLG's SCHE bit.
     */
    inline void clear_SPFLG_SCHE()
    {
        SPFLG &= ~(1u << 0u);
    }

    /**
     * Toggle SPFLG's SCHE bit.
     */
    inline void toggle_SPFLG_SCHE()
    {
        SPFLG ^= 1u << 0u;
    }

    /**
     * Set RPFLG's RPCLK bit.
     */
    inline void set_RPFLG_RPCLK()
    {
        RPFLG |= 1u << 12u;
    }

    /**
     * Clear RPFLG's RPCLK bit.
     */
    inline void clear_RPFLG_RPCLK()
    {
        RPFLG &= ~(1u << 12u);
    }

    /**
     * Toggle RPFLG's RPCLK bit.
     */
    inline void toggle_RPFLG_RPCLK()
    {
        RPFLG ^= 1u << 12u;
    }

    /**
     * Set RPFLG's RDIR bit.
     */
    inline void set_RPFLG_RDIR()
    {
        RPFLG |= 1u << 11u;
    }

    /**
     * Clear RPFLG's RDIR bit.
     */
    inline void clear_RPFLG_RDIR()
    {
        RPFLG &= ~(1u << 11u);
    }

    /**
     * Toggle RPFLG's RDIR bit.
     */
    inline void toggle_RPFLG_RDIR()
    {
        RPFLG ^= 1u << 11u;
    }

    /**
     * Set RPFLG's RCNT bit.
     */
    inline void set_RPFLG_RCNT()
    {
        RPFLG |= 1u << 10u;
    }

    /**
     * Clear RPFLG's RCNT bit.
     */
    inline void clear_RPFLG_RCNT()
    {
        RPFLG &= ~(1u << 10u);
    }

    /**
     * Toggle RPFLG's RCNT bit.
     */
    inline void toggle_RPFLG_RCNT()
    {
        RPFLG ^= 1u << 10u;
    }

    /**
     * Set RPFLG's RERR bit.
     */
    inline void set_RPFLG_RERR()
    {
        RPFLG |= 1u << 9u;
    }

    /**
     * Clear RPFLG's RERR bit.
     */
    inline void clear_RPFLG_RERR()
    {
        RPFLG &= ~(1u << 9u);
    }

    /**
     * Toggle RPFLG's RERR bit.
     */
    inline void toggle_RPFLG_RERR()
    {
        RPFLG ^= 1u << 9u;
    }

    /**
     * Set RPFLG's RINDX bit.
     */
    inline void set_RPFLG_RINDX()
    {
        RPFLG |= 1u << 8u;
    }

    /**
     * Clear RPFLG's RINDX bit.
     */
    inline void clear_RPFLG_RINDX()
    {
        RPFLG &= ~(1u << 8u);
    }

    /**
     * Toggle RPFLG's RINDX bit.
     */
    inline void toggle_RPFLG_RINDX()
    {
        RPFLG ^= 1u << 8u;
    }

    /**
     * Set RPFLG's RMST bit.
     */
    inline void set_RPFLG_RMST()
    {
        RPFLG |= 1u << 4u;
    }

    /**
     * Clear RPFLG's RMST bit.
     */
    inline void clear_RPFLG_RMST()
    {
        RPFLG &= ~(1u << 4u);
    }

    /**
     * Toggle RPFLG's RMST bit.
     */
    inline void toggle_RPFLG_RMST()
    {
        RPFLG ^= 1u << 4u;
    }

    /**
     * Set RPFLG's RHIE bit.
     */
    inline void set_RPFLG_RHIE()
    {
        RPFLG |= 1u << 2u;
    }

    /**
     * Clear RPFLG's RHIE bit.
     */
    inline void clear_RPFLG_RHIE()
    {
        RPFLG &= ~(1u << 2u);
    }

    /**
     * Toggle RPFLG's RHIE bit.
     */
    inline void toggle_RPFLG_RHIE()
    {
        RPFLG ^= 1u << 2u;
    }

    /**
     * Set RPFLG's RWHE bit.
     */
    inline void set_RPFLG_RWHE()
    {
        RPFLG |= 1u << 1u;
    }

    /**
     * Clear RPFLG's RWHE bit.
     */
    inline void clear_RPFLG_RWHE()
    {
        RPFLG &= ~(1u << 1u);
    }

    /**
     * Toggle RPFLG's RWHE bit.
     */
    inline void toggle_RPFLG_RWHE()
    {
        RPFLG ^= 1u << 1u;
    }

    /**
     * Set RPFLG's RCHE bit.
     */
    inline void set_RPFLG_RCHE()
    {
        RPFLG |= 1u << 0u;
    }

    /**
     * Clear RPFLG's RCHE bit.
     */
    inline void clear_RPFLG_RCHE()
    {
        RPFLG &= ~(1u << 0u);
    }

    /**
     * Toggle RPFLG's RCHE bit.
     */
    inline void toggle_RPFLG_RCHE()
    {
        RPFLG ^= 1u << 0u;
    }

    /**
     * Get PDBG's LPP2 field.
     */
    uint8_t get_PDBG_LPP2()
    {
        return (PDBG >> 22u) & 0b111111u;
    }

    /**
     * Get PDBG's LPP1 field.
     */
    uint8_t get_PDBG_LPP1()
    {
        return (PDBG >> 16u) & 0b111111u;
    }

    /**
     * Get PDBG's LPP0 field.
     */
    uint8_t get_PDBG_LPP0()
    {
        return (PDBG >> 8u) & 0b111111u;
    }

    /**
     * Get PDBG's HSP field.
     */
    uint8_t get_PDBG_HSP()
    {
        return (PDBG >> 5u) & 0b111u;
    }

    /**
     * Get PDBG's IVAL bit.
     */
    bool get_PDBG_IVAL()
    {
        return PDBG & (1u << 4u);
    }

    /**
     * Get PDBG's QPSV field.
     */
    uint8_t get_PDBG_QPSV()
    {
        return (PDBG >> 2u) & 0b11u;
    }

    /**
     * Get PDBG's QCSV field.
     */
    uint8_t get_PDBG_QCSV()
    {
        return (PDBG >> 0u) & 0b11u;
    }
};

static_assert(sizeof(posif) == posif::size);

static volatile posif *const POSIF0 = reinterpret_cast<posif *>(0x40028000);

static volatile posif *const POSIF1 = reinterpret_cast<posif *>(0x4002C000);

}; // namespace XMC4700
