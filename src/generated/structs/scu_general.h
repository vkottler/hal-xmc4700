/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include "../enums/SCU_GENERAL_CCUCON_GSC40.h"
#include "../enums/SCU_GENERAL_CCUCON_GSC41.h"
#include "../enums/SCU_GENERAL_CCUCON_GSC42.h"
#include "../enums/SCU_GENERAL_CCUCON_GSC43.h"
#include "../enums/SCU_GENERAL_CCUCON_GSC80.h"
#include "../enums/SCU_GENERAL_CCUCON_GSC81.h"
#include "../enums/SCU_GENERAL_DTSCON_PWD.h"
#include "../enums/SCU_GENERAL_DTSCON_START.h"
#include "../enums/SCU_GENERAL_DTSSTAT_BUSY.h"
#include "../enums/SCU_GENERAL_DTSSTAT_RDY.h"
#include "../enums/SCU_GENERAL_G0ORCEN_ENORC6.h"
#include "../enums/SCU_GENERAL_G0ORCEN_ENORC7.h"
#include "../enums/SCU_GENERAL_G1ORCEN_ENORC6.h"
#include "../enums/SCU_GENERAL_G1ORCEN_ENORC7.h"
#include "../enums/SCU_GENERAL_MIRRSTS_HDCLR.h"
#include "../enums/SCU_GENERAL_MIRRSTS_HDCR.h"
#include "../enums/SCU_GENERAL_MIRRSTS_HDSET.h"
#include "../enums/SCU_GENERAL_MIRRSTS_OSCSICTRL.h"
#include "../enums/SCU_GENERAL_MIRRSTS_OSCULCTRL.h"
#include "../enums/SCU_GENERAL_MIRRSTS_RMX.h"
#include "../enums/SCU_GENERAL_MIRRSTS_RTC_ATIM0.h"
#include "../enums/SCU_GENERAL_MIRRSTS_RTC_ATIM1.h"
#include "../enums/SCU_GENERAL_MIRRSTS_RTC_CLRSR.h"
#include "../enums/SCU_GENERAL_MIRRSTS_RTC_CTR.h"
#include "../enums/SCU_GENERAL_MIRRSTS_RTC_MSKSR.h"
#include "../enums/SCU_GENERAL_MIRRSTS_RTC_TIM0.h"
#include "../enums/SCU_GENERAL_MIRRSTS_RTC_TIM1.h"
#include "../enums/SCU_GENERAL_RMACR_RDWR.h"
#include "../enums/SCU_GENERAL_SDMMCDEL_TAPEN.h"
#include "../enums/SCU_GENERAL_STCON_HWCON.h"
#include "../enums/SCU_GENERAL_STCON_SWCON.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * System Control Unit
 */
struct [[gnu::packed]] scu_general
{
    /* Constant attributes. */
    static constexpr std::size_t size = 208; /*!< scu_general's size in bytes. */

    /* Fields. */
    const uint32_t ID = {};                                          /*!< (read-only) SCU Module ID Register */
    const uint32_t IDCHIP = {};                                      /*!< (read-only) Chip ID Register */
    const uint32_t IDMANUF = {};                                     /*!< (read-only) Manufactory ID Register */
    const uint32_t reserved_padding0 = {};
    uint32_t STCON;                                                  /*!< (read-write) Startup Configuration Register */
    static constexpr std::size_t reserved_padding1_length = 6;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    uint32_t GPR0;                                                   /*!< (read-write) General Purpose Register 0 */
    uint32_t GPR1;                                                   /*!< (read-write) General Purpose Register 1 */
    static constexpr std::size_t reserved_padding2_length = 6;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t CCUCON;                                                 /*!< (read-write) CCU Control Register */
    static constexpr std::size_t reserved_padding3_length = 15;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    uint32_t DTSCON;                                                 /*!< (read-write) Die Temperature Sensor Control Register */
    const uint32_t DTSSTAT = {};                                     /*!< (read-only) Die Temperature Sensor Status Register */
    static constexpr std::size_t reserved_padding4_length = 2;
    const uint32_t reserved_padding4[reserved_padding4_length] = {};
    uint32_t SDMMCDEL;                                               /*!< (read-write) SD-MMC Delay Control Register */
    uint32_t G0ORCEN;                                                /*!< (read-write) Out of Range Comparator Enable Register 0 */
    uint32_t G1ORCEN;                                                /*!< (read-write) Out of Range Comparator Enable Register 1 */
    static constexpr std::size_t reserved_padding5_length = 7;
    const uint32_t reserved_padding5[reserved_padding5_length] = {};
    const uint32_t MIRRSTS = {};                                     /*!< (read-only) Mirror Write Status Register */
    uint32_t RMACR;                                                  /*!< (read-write) Retention Memory Access Control Register */
    uint32_t RMDATA;                                                 /*!< (read-write) Retention Memory Access Data Register */

    /* Methods. */

    /**
     * Get ID's MOD_NUMBER field.
     */
    inline uint16_t get_ID_MOD_NUMBER()
    {
        return (ID >> 16u) & 0b1111111111111111u;
    }

    /**
     * Get ID's MOD_TYPE field.
     */
    inline uint8_t get_ID_MOD_TYPE()
    {
        return (ID >> 8u) & 0b11111111u;
    }

    /**
     * Get ID's MOD_REV field.
     */
    inline uint8_t get_ID_MOD_REV()
    {
        return (ID >> 0u) & 0b11111111u;
    }

    /**
     * Get all of ID's bit fields.
     */
    inline void get_ID(uint16_t &MOD_NUMBER, uint8_t &MOD_TYPE, uint8_t &MOD_REV)
    {
        uint32_t curr = ID;

        MOD_NUMBER = (curr >> 16u) & 0b1111111111111111u;
        MOD_TYPE = (curr >> 8u) & 0b11111111u;
        MOD_REV = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Get IDCHIP's IDCHIP field.
     */
    inline uint32_t get_IDCHIP_IDCHIP()
    {
        return (IDCHIP >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get IDMANUF's MANUF field.
     */
    inline uint16_t get_IDMANUF_MANUF()
    {
        return (IDMANUF >> 5u) & 0b11111111111u;
    }

    /**
     * Get IDMANUF's DEPT field.
     */
    inline uint8_t get_IDMANUF_DEPT()
    {
        return (IDMANUF >> 0u) & 0b11111u;
    }

    /**
     * Get all of IDMANUF's bit fields.
     */
    inline void get_IDMANUF(uint16_t &MANUF, uint8_t &DEPT)
    {
        uint32_t curr = IDMANUF;

        MANUF = (curr >> 5u) & 0b11111111111u;
        DEPT = (curr >> 0u) & 0b11111u;
    }

    /**
     * Get STCON's SWCON field.
     */
    inline SCU_GENERAL_STCON_SWCON get_STCON_SWCON()
    {
        return SCU_GENERAL_STCON_SWCON((STCON >> 8u) & 0b1111u);
    }

    /**
     * Set STCON's SWCON field.
     */
    inline void set_STCON_SWCON(SCU_GENERAL_STCON_SWCON value)
    {
        uint32_t curr = STCON;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        STCON = curr;
    }

    /**
     * Get STCON's HWCON field.
     */
    inline SCU_GENERAL_STCON_HWCON get_STCON_HWCON()
    {
        return SCU_GENERAL_STCON_HWCON((STCON >> 0u) & 0b11u);
    }

    /**
     * Get all of STCON's bit fields.
     */
    inline void get_STCON(SCU_GENERAL_STCON_SWCON &SWCON, SCU_GENERAL_STCON_HWCON &HWCON)
    {
        uint32_t curr = STCON;

        SWCON = SCU_GENERAL_STCON_SWCON((curr >> 8u) & 0b1111u);
        HWCON = SCU_GENERAL_STCON_HWCON((curr >> 0u) & 0b11u);
    }

    /**
     * Get GPR0's DAT field.
     */
    inline uint32_t get_GPR0_DAT()
    {
        return (GPR0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR0's DAT field.
     */
    inline void set_GPR0_DAT(uint32_t value)
    {
        uint32_t curr = GPR0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR0 = curr;
    }

    /**
     * Get GPR1's DAT field.
     */
    inline uint32_t get_GPR1_DAT()
    {
        return (GPR1 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set GPR1's DAT field.
     */
    inline void set_GPR1_DAT(uint32_t value)
    {
        uint32_t curr = GPR1;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        GPR1 = curr;
    }

    /**
     * Get CCUCON's GSC81 bit.
     */
    inline SCU_GENERAL_CCUCON_GSC81 get_CCUCON_GSC81()
    {
        return SCU_GENERAL_CCUCON_GSC81(CCUCON & (1u << 9u));
    }

    /**
     * Set CCUCON's GSC81 bit.
     */
    inline void set_CCUCON_GSC81()
    {
        CCUCON |= 1u << 9u;
    }

    /**
     * Clear CCUCON's GSC81 bit.
     */
    inline void clear_CCUCON_GSC81()
    {
        CCUCON &= ~(1u << 9u);
    }

    /**
     * Toggle CCUCON's GSC81 bit.
     */
    inline void toggle_CCUCON_GSC81()
    {
        CCUCON ^= 1u << 9u;
    }

    /**
     * Get CCUCON's GSC80 bit.
     */
    inline SCU_GENERAL_CCUCON_GSC80 get_CCUCON_GSC80()
    {
        return SCU_GENERAL_CCUCON_GSC80(CCUCON & (1u << 8u));
    }

    /**
     * Set CCUCON's GSC80 bit.
     */
    inline void set_CCUCON_GSC80()
    {
        CCUCON |= 1u << 8u;
    }

    /**
     * Clear CCUCON's GSC80 bit.
     */
    inline void clear_CCUCON_GSC80()
    {
        CCUCON &= ~(1u << 8u);
    }

    /**
     * Toggle CCUCON's GSC80 bit.
     */
    inline void toggle_CCUCON_GSC80()
    {
        CCUCON ^= 1u << 8u;
    }

    /**
     * Get CCUCON's GSC43 bit.
     */
    inline SCU_GENERAL_CCUCON_GSC43 get_CCUCON_GSC43()
    {
        return SCU_GENERAL_CCUCON_GSC43(CCUCON & (1u << 3u));
    }

    /**
     * Set CCUCON's GSC43 bit.
     */
    inline void set_CCUCON_GSC43()
    {
        CCUCON |= 1u << 3u;
    }

    /**
     * Clear CCUCON's GSC43 bit.
     */
    inline void clear_CCUCON_GSC43()
    {
        CCUCON &= ~(1u << 3u);
    }

    /**
     * Toggle CCUCON's GSC43 bit.
     */
    inline void toggle_CCUCON_GSC43()
    {
        CCUCON ^= 1u << 3u;
    }

    /**
     * Get CCUCON's GSC42 bit.
     */
    inline SCU_GENERAL_CCUCON_GSC42 get_CCUCON_GSC42()
    {
        return SCU_GENERAL_CCUCON_GSC42(CCUCON & (1u << 2u));
    }

    /**
     * Set CCUCON's GSC42 bit.
     */
    inline void set_CCUCON_GSC42()
    {
        CCUCON |= 1u << 2u;
    }

    /**
     * Clear CCUCON's GSC42 bit.
     */
    inline void clear_CCUCON_GSC42()
    {
        CCUCON &= ~(1u << 2u);
    }

    /**
     * Toggle CCUCON's GSC42 bit.
     */
    inline void toggle_CCUCON_GSC42()
    {
        CCUCON ^= 1u << 2u;
    }

    /**
     * Get CCUCON's GSC41 bit.
     */
    inline SCU_GENERAL_CCUCON_GSC41 get_CCUCON_GSC41()
    {
        return SCU_GENERAL_CCUCON_GSC41(CCUCON & (1u << 1u));
    }

    /**
     * Set CCUCON's GSC41 bit.
     */
    inline void set_CCUCON_GSC41()
    {
        CCUCON |= 1u << 1u;
    }

    /**
     * Clear CCUCON's GSC41 bit.
     */
    inline void clear_CCUCON_GSC41()
    {
        CCUCON &= ~(1u << 1u);
    }

    /**
     * Toggle CCUCON's GSC41 bit.
     */
    inline void toggle_CCUCON_GSC41()
    {
        CCUCON ^= 1u << 1u;
    }

    /**
     * Get CCUCON's GSC40 bit.
     */
    inline SCU_GENERAL_CCUCON_GSC40 get_CCUCON_GSC40()
    {
        return SCU_GENERAL_CCUCON_GSC40(CCUCON & (1u << 0u));
    }

    /**
     * Set CCUCON's GSC40 bit.
     */
    inline void set_CCUCON_GSC40()
    {
        CCUCON |= 1u << 0u;
    }

    /**
     * Clear CCUCON's GSC40 bit.
     */
    inline void clear_CCUCON_GSC40()
    {
        CCUCON &= ~(1u << 0u);
    }

    /**
     * Toggle CCUCON's GSC40 bit.
     */
    inline void toggle_CCUCON_GSC40()
    {
        CCUCON ^= 1u << 0u;
    }

    /**
     * Get all of CCUCON's bit fields.
     */
    inline void get_CCUCON(SCU_GENERAL_CCUCON_GSC81 &GSC81, SCU_GENERAL_CCUCON_GSC80 &GSC80, SCU_GENERAL_CCUCON_GSC43 &GSC43, SCU_GENERAL_CCUCON_GSC42 &GSC42, SCU_GENERAL_CCUCON_GSC41 &GSC41, SCU_GENERAL_CCUCON_GSC40 &GSC40)
    {
        uint32_t curr = CCUCON;

        GSC81 = SCU_GENERAL_CCUCON_GSC81(curr & (1u << 9u));
        GSC80 = SCU_GENERAL_CCUCON_GSC80(curr & (1u << 8u));
        GSC43 = SCU_GENERAL_CCUCON_GSC43(curr & (1u << 3u));
        GSC42 = SCU_GENERAL_CCUCON_GSC42(curr & (1u << 2u));
        GSC41 = SCU_GENERAL_CCUCON_GSC41(curr & (1u << 1u));
        GSC40 = SCU_GENERAL_CCUCON_GSC40(curr & (1u << 0u));
    }

    /**
     * Set all of CCUCON's bit fields.
     */
    inline void set_CCUCON(SCU_GENERAL_CCUCON_GSC81 GSC81, SCU_GENERAL_CCUCON_GSC80 GSC80, SCU_GENERAL_CCUCON_GSC43 GSC43, SCU_GENERAL_CCUCON_GSC42 GSC42, SCU_GENERAL_CCUCON_GSC41 GSC41, SCU_GENERAL_CCUCON_GSC40 GSC40)
    {
        uint32_t curr = CCUCON;

        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(GSC81) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(GSC80) & 0b1u) << 8u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(GSC43) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(GSC42) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(GSC41) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(GSC40) & 0b1u) << 0u;

        CCUCON = curr;
    }

    /**
     * Get DTSCON's BGTRIM field.
     */
    inline uint8_t get_DTSCON_BGTRIM()
    {
        return (DTSCON >> 20u) & 0b1111u;
    }

    /**
     * Set DTSCON's BGTRIM field.
     */
    inline void set_DTSCON_BGTRIM(uint8_t value)
    {
        uint32_t curr = DTSCON;

        curr &= ~(0b1111u << 20u);
        curr |= (value & 0b1111u) << 20u;

        DTSCON = curr;
    }

    /**
     * Get DTSCON's REFTRIM field.
     */
    inline uint8_t get_DTSCON_REFTRIM()
    {
        return (DTSCON >> 17u) & 0b111u;
    }

    /**
     * Set DTSCON's REFTRIM field.
     */
    inline void set_DTSCON_REFTRIM(uint8_t value)
    {
        uint32_t curr = DTSCON;

        curr &= ~(0b111u << 17u);
        curr |= (value & 0b111u) << 17u;

        DTSCON = curr;
    }

    /**
     * Get DTSCON's GAIN field.
     */
    inline uint8_t get_DTSCON_GAIN()
    {
        return (DTSCON >> 11u) & 0b111111u;
    }

    /**
     * Set DTSCON's GAIN field.
     */
    inline void set_DTSCON_GAIN(uint8_t value)
    {
        uint32_t curr = DTSCON;

        curr &= ~(0b111111u << 11u);
        curr |= (value & 0b111111u) << 11u;

        DTSCON = curr;
    }

    /**
     * Get DTSCON's OFFSET field.
     */
    inline uint8_t get_DTSCON_OFFSET()
    {
        return (DTSCON >> 4u) & 0b1111111u;
    }

    /**
     * Set DTSCON's OFFSET field.
     */
    inline void set_DTSCON_OFFSET(uint8_t value)
    {
        uint32_t curr = DTSCON;

        curr &= ~(0b1111111u << 4u);
        curr |= (value & 0b1111111u) << 4u;

        DTSCON = curr;
    }

    /**
     * Set DTSCON's START bit.
     */
    inline void set_DTSCON_START()
    {
        DTSCON |= 1u << 1u;
    }

    /**
     * Clear DTSCON's START bit.
     */
    inline void clear_DTSCON_START()
    {
        DTSCON &= ~(1u << 1u);
    }

    /**
     * Toggle DTSCON's START bit.
     */
    inline void toggle_DTSCON_START()
    {
        DTSCON ^= 1u << 1u;
    }

    /**
     * Get DTSCON's PWD bit.
     */
    inline SCU_GENERAL_DTSCON_PWD get_DTSCON_PWD()
    {
        return SCU_GENERAL_DTSCON_PWD(DTSCON & (1u << 0u));
    }

    /**
     * Set DTSCON's PWD bit.
     */
    inline void set_DTSCON_PWD()
    {
        DTSCON |= 1u << 0u;
    }

    /**
     * Clear DTSCON's PWD bit.
     */
    inline void clear_DTSCON_PWD()
    {
        DTSCON &= ~(1u << 0u);
    }

    /**
     * Toggle DTSCON's PWD bit.
     */
    inline void toggle_DTSCON_PWD()
    {
        DTSCON ^= 1u << 0u;
    }

    /**
     * Get all of DTSCON's bit fields.
     */
    inline void get_DTSCON(uint8_t &BGTRIM, uint8_t &REFTRIM, uint8_t &GAIN, uint8_t &OFFSET, SCU_GENERAL_DTSCON_PWD &PWD)
    {
        uint32_t curr = DTSCON;

        BGTRIM = (curr >> 20u) & 0b1111u;
        REFTRIM = (curr >> 17u) & 0b111u;
        GAIN = (curr >> 11u) & 0b111111u;
        OFFSET = (curr >> 4u) & 0b1111111u;
        PWD = SCU_GENERAL_DTSCON_PWD(curr & (1u << 0u));
    }

    /**
     * Set all of DTSCON's bit fields.
     */
    inline void set_DTSCON(uint8_t BGTRIM, uint8_t REFTRIM, uint8_t GAIN, uint8_t OFFSET, SCU_GENERAL_DTSCON_START START, SCU_GENERAL_DTSCON_PWD PWD)
    {
        uint32_t curr = DTSCON;

        curr &= ~(0b1111u << 20u);
        curr |= (BGTRIM & 0b1111u) << 20u;
        curr &= ~(0b111u << 17u);
        curr |= (REFTRIM & 0b111u) << 17u;
        curr &= ~(0b111111u << 11u);
        curr |= (GAIN & 0b111111u) << 11u;
        curr &= ~(0b1111111u << 4u);
        curr |= (OFFSET & 0b1111111u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(START) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(PWD) & 0b1u) << 0u;

        DTSCON = curr;
    }

    /**
     * Get DTSSTAT's BUSY bit.
     */
    inline SCU_GENERAL_DTSSTAT_BUSY get_DTSSTAT_BUSY()
    {
        return SCU_GENERAL_DTSSTAT_BUSY(DTSSTAT & (1u << 15u));
    }

    /**
     * Get DTSSTAT's RDY bit.
     */
    inline SCU_GENERAL_DTSSTAT_RDY get_DTSSTAT_RDY()
    {
        return SCU_GENERAL_DTSSTAT_RDY(DTSSTAT & (1u << 14u));
    }

    /**
     * Get DTSSTAT's RESULT field.
     */
    inline uint16_t get_DTSSTAT_RESULT()
    {
        return (DTSSTAT >> 0u) & 0b1111111111u;
    }

    /**
     * Get all of DTSSTAT's bit fields.
     */
    inline void get_DTSSTAT(SCU_GENERAL_DTSSTAT_BUSY &BUSY, SCU_GENERAL_DTSSTAT_RDY &RDY, uint16_t &RESULT)
    {
        uint32_t curr = DTSSTAT;

        BUSY = SCU_GENERAL_DTSSTAT_BUSY(curr & (1u << 15u));
        RDY = SCU_GENERAL_DTSSTAT_RDY(curr & (1u << 14u));
        RESULT = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Get SDMMCDEL's TAPDEL field.
     */
    inline uint8_t get_SDMMCDEL_TAPDEL()
    {
        return (SDMMCDEL >> 4u) & 0b1111u;
    }

    /**
     * Set SDMMCDEL's TAPDEL field.
     */
    inline void set_SDMMCDEL_TAPDEL(uint8_t value)
    {
        uint32_t curr = SDMMCDEL;

        curr &= ~(0b1111u << 4u);
        curr |= (value & 0b1111u) << 4u;

        SDMMCDEL = curr;
    }

    /**
     * Get SDMMCDEL's TAPEN bit.
     */
    inline SCU_GENERAL_SDMMCDEL_TAPEN get_SDMMCDEL_TAPEN()
    {
        return SCU_GENERAL_SDMMCDEL_TAPEN(SDMMCDEL & (1u << 0u));
    }

    /**
     * Set SDMMCDEL's TAPEN bit.
     */
    inline void set_SDMMCDEL_TAPEN()
    {
        SDMMCDEL |= 1u << 0u;
    }

    /**
     * Clear SDMMCDEL's TAPEN bit.
     */
    inline void clear_SDMMCDEL_TAPEN()
    {
        SDMMCDEL &= ~(1u << 0u);
    }

    /**
     * Toggle SDMMCDEL's TAPEN bit.
     */
    inline void toggle_SDMMCDEL_TAPEN()
    {
        SDMMCDEL ^= 1u << 0u;
    }

    /**
     * Get all of SDMMCDEL's bit fields.
     */
    inline void get_SDMMCDEL(uint8_t &TAPDEL, SCU_GENERAL_SDMMCDEL_TAPEN &TAPEN)
    {
        uint32_t curr = SDMMCDEL;

        TAPDEL = (curr >> 4u) & 0b1111u;
        TAPEN = SCU_GENERAL_SDMMCDEL_TAPEN(curr & (1u << 0u));
    }

    /**
     * Set all of SDMMCDEL's bit fields.
     */
    inline void set_SDMMCDEL(uint8_t TAPDEL, SCU_GENERAL_SDMMCDEL_TAPEN TAPEN)
    {
        uint32_t curr = SDMMCDEL;

        curr &= ~(0b1111u << 4u);
        curr |= (TAPDEL & 0b1111u) << 4u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(TAPEN) & 0b1u) << 0u;

        SDMMCDEL = curr;
    }

    /**
     * Get G0ORCEN's ENORC7 bit.
     */
    inline SCU_GENERAL_G0ORCEN_ENORC7 get_G0ORCEN_ENORC7()
    {
        return SCU_GENERAL_G0ORCEN_ENORC7(G0ORCEN & (1u << 7u));
    }

    /**
     * Set G0ORCEN's ENORC7 bit.
     */
    inline void set_G0ORCEN_ENORC7()
    {
        G0ORCEN |= 1u << 7u;
    }

    /**
     * Clear G0ORCEN's ENORC7 bit.
     */
    inline void clear_G0ORCEN_ENORC7()
    {
        G0ORCEN &= ~(1u << 7u);
    }

    /**
     * Toggle G0ORCEN's ENORC7 bit.
     */
    inline void toggle_G0ORCEN_ENORC7()
    {
        G0ORCEN ^= 1u << 7u;
    }

    /**
     * Get G0ORCEN's ENORC6 bit.
     */
    inline SCU_GENERAL_G0ORCEN_ENORC6 get_G0ORCEN_ENORC6()
    {
        return SCU_GENERAL_G0ORCEN_ENORC6(G0ORCEN & (1u << 6u));
    }

    /**
     * Set G0ORCEN's ENORC6 bit.
     */
    inline void set_G0ORCEN_ENORC6()
    {
        G0ORCEN |= 1u << 6u;
    }

    /**
     * Clear G0ORCEN's ENORC6 bit.
     */
    inline void clear_G0ORCEN_ENORC6()
    {
        G0ORCEN &= ~(1u << 6u);
    }

    /**
     * Toggle G0ORCEN's ENORC6 bit.
     */
    inline void toggle_G0ORCEN_ENORC6()
    {
        G0ORCEN ^= 1u << 6u;
    }

    /**
     * Get all of G0ORCEN's bit fields.
     */
    inline void get_G0ORCEN(SCU_GENERAL_G0ORCEN_ENORC7 &ENORC7, SCU_GENERAL_G0ORCEN_ENORC6 &ENORC6)
    {
        uint32_t curr = G0ORCEN;

        ENORC7 = SCU_GENERAL_G0ORCEN_ENORC7(curr & (1u << 7u));
        ENORC6 = SCU_GENERAL_G0ORCEN_ENORC6(curr & (1u << 6u));
    }

    /**
     * Set all of G0ORCEN's bit fields.
     */
    inline void set_G0ORCEN(SCU_GENERAL_G0ORCEN_ENORC7 ENORC7, SCU_GENERAL_G0ORCEN_ENORC6 ENORC6)
    {
        uint32_t curr = G0ORCEN;

        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(ENORC7) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(ENORC6) & 0b1u) << 6u;

        G0ORCEN = curr;
    }

    /**
     * Get G1ORCEN's ENORC7 bit.
     */
    inline SCU_GENERAL_G1ORCEN_ENORC7 get_G1ORCEN_ENORC7()
    {
        return SCU_GENERAL_G1ORCEN_ENORC7(G1ORCEN & (1u << 7u));
    }

    /**
     * Set G1ORCEN's ENORC7 bit.
     */
    inline void set_G1ORCEN_ENORC7()
    {
        G1ORCEN |= 1u << 7u;
    }

    /**
     * Clear G1ORCEN's ENORC7 bit.
     */
    inline void clear_G1ORCEN_ENORC7()
    {
        G1ORCEN &= ~(1u << 7u);
    }

    /**
     * Toggle G1ORCEN's ENORC7 bit.
     */
    inline void toggle_G1ORCEN_ENORC7()
    {
        G1ORCEN ^= 1u << 7u;
    }

    /**
     * Get G1ORCEN's ENORC6 bit.
     */
    inline SCU_GENERAL_G1ORCEN_ENORC6 get_G1ORCEN_ENORC6()
    {
        return SCU_GENERAL_G1ORCEN_ENORC6(G1ORCEN & (1u << 6u));
    }

    /**
     * Set G1ORCEN's ENORC6 bit.
     */
    inline void set_G1ORCEN_ENORC6()
    {
        G1ORCEN |= 1u << 6u;
    }

    /**
     * Clear G1ORCEN's ENORC6 bit.
     */
    inline void clear_G1ORCEN_ENORC6()
    {
        G1ORCEN &= ~(1u << 6u);
    }

    /**
     * Toggle G1ORCEN's ENORC6 bit.
     */
    inline void toggle_G1ORCEN_ENORC6()
    {
        G1ORCEN ^= 1u << 6u;
    }

    /**
     * Get all of G1ORCEN's bit fields.
     */
    inline void get_G1ORCEN(SCU_GENERAL_G1ORCEN_ENORC7 &ENORC7, SCU_GENERAL_G1ORCEN_ENORC6 &ENORC6)
    {
        uint32_t curr = G1ORCEN;

        ENORC7 = SCU_GENERAL_G1ORCEN_ENORC7(curr & (1u << 7u));
        ENORC6 = SCU_GENERAL_G1ORCEN_ENORC6(curr & (1u << 6u));
    }

    /**
     * Set all of G1ORCEN's bit fields.
     */
    inline void set_G1ORCEN(SCU_GENERAL_G1ORCEN_ENORC7 ENORC7, SCU_GENERAL_G1ORCEN_ENORC6 ENORC6)
    {
        uint32_t curr = G1ORCEN;

        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(ENORC7) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(ENORC6) & 0b1u) << 6u;

        G1ORCEN = curr;
    }

    /**
     * Get MIRRSTS's RTC_CLRSR bit.
     */
    inline SCU_GENERAL_MIRRSTS_RTC_CLRSR get_MIRRSTS_RTC_CLRSR()
    {
        return SCU_GENERAL_MIRRSTS_RTC_CLRSR(MIRRSTS & (1u << 15u));
    }

    /**
     * Get MIRRSTS's RTC_MSKSR bit.
     */
    inline SCU_GENERAL_MIRRSTS_RTC_MSKSR get_MIRRSTS_RTC_MSKSR()
    {
        return SCU_GENERAL_MIRRSTS_RTC_MSKSR(MIRRSTS & (1u << 14u));
    }

    /**
     * Get MIRRSTS's RMX bit.
     */
    inline SCU_GENERAL_MIRRSTS_RMX get_MIRRSTS_RMX()
    {
        return SCU_GENERAL_MIRRSTS_RMX(MIRRSTS & (1u << 13u));
    }

    /**
     * Get MIRRSTS's RTC_TIM1 bit.
     */
    inline SCU_GENERAL_MIRRSTS_RTC_TIM1 get_MIRRSTS_RTC_TIM1()
    {
        return SCU_GENERAL_MIRRSTS_RTC_TIM1(MIRRSTS & (1u << 12u));
    }

    /**
     * Get MIRRSTS's RTC_TIM0 bit.
     */
    inline SCU_GENERAL_MIRRSTS_RTC_TIM0 get_MIRRSTS_RTC_TIM0()
    {
        return SCU_GENERAL_MIRRSTS_RTC_TIM0(MIRRSTS & (1u << 11u));
    }

    /**
     * Get MIRRSTS's RTC_ATIM1 bit.
     */
    inline SCU_GENERAL_MIRRSTS_RTC_ATIM1 get_MIRRSTS_RTC_ATIM1()
    {
        return SCU_GENERAL_MIRRSTS_RTC_ATIM1(MIRRSTS & (1u << 10u));
    }

    /**
     * Get MIRRSTS's RTC_ATIM0 bit.
     */
    inline SCU_GENERAL_MIRRSTS_RTC_ATIM0 get_MIRRSTS_RTC_ATIM0()
    {
        return SCU_GENERAL_MIRRSTS_RTC_ATIM0(MIRRSTS & (1u << 9u));
    }

    /**
     * Get MIRRSTS's RTC_CTR bit.
     */
    inline SCU_GENERAL_MIRRSTS_RTC_CTR get_MIRRSTS_RTC_CTR()
    {
        return SCU_GENERAL_MIRRSTS_RTC_CTR(MIRRSTS & (1u << 8u));
    }

    /**
     * Get MIRRSTS's OSCULCTRL bit.
     */
    inline SCU_GENERAL_MIRRSTS_OSCULCTRL get_MIRRSTS_OSCULCTRL()
    {
        return SCU_GENERAL_MIRRSTS_OSCULCTRL(MIRRSTS & (1u << 7u));
    }

    /**
     * Get MIRRSTS's OSCSICTRL bit.
     */
    inline SCU_GENERAL_MIRRSTS_OSCSICTRL get_MIRRSTS_OSCSICTRL()
    {
        return SCU_GENERAL_MIRRSTS_OSCSICTRL(MIRRSTS & (1u << 5u));
    }

    /**
     * Get MIRRSTS's HDCR bit.
     */
    inline SCU_GENERAL_MIRRSTS_HDCR get_MIRRSTS_HDCR()
    {
        return SCU_GENERAL_MIRRSTS_HDCR(MIRRSTS & (1u << 3u));
    }

    /**
     * Get MIRRSTS's HDSET bit.
     */
    inline SCU_GENERAL_MIRRSTS_HDSET get_MIRRSTS_HDSET()
    {
        return SCU_GENERAL_MIRRSTS_HDSET(MIRRSTS & (1u << 2u));
    }

    /**
     * Get MIRRSTS's HDCLR bit.
     */
    inline SCU_GENERAL_MIRRSTS_HDCLR get_MIRRSTS_HDCLR()
    {
        return SCU_GENERAL_MIRRSTS_HDCLR(MIRRSTS & (1u << 1u));
    }

    /**
     * Get all of MIRRSTS's bit fields.
     */
    inline void get_MIRRSTS(SCU_GENERAL_MIRRSTS_RTC_CLRSR &RTC_CLRSR, SCU_GENERAL_MIRRSTS_RTC_MSKSR &RTC_MSKSR, SCU_GENERAL_MIRRSTS_RMX &RMX, SCU_GENERAL_MIRRSTS_RTC_TIM1 &RTC_TIM1, SCU_GENERAL_MIRRSTS_RTC_TIM0 &RTC_TIM0, SCU_GENERAL_MIRRSTS_RTC_ATIM1 &RTC_ATIM1, SCU_GENERAL_MIRRSTS_RTC_ATIM0 &RTC_ATIM0, SCU_GENERAL_MIRRSTS_RTC_CTR &RTC_CTR, SCU_GENERAL_MIRRSTS_OSCULCTRL &OSCULCTRL, SCU_GENERAL_MIRRSTS_OSCSICTRL &OSCSICTRL, SCU_GENERAL_MIRRSTS_HDCR &HDCR, SCU_GENERAL_MIRRSTS_HDSET &HDSET, SCU_GENERAL_MIRRSTS_HDCLR &HDCLR)
    {
        uint32_t curr = MIRRSTS;

        RTC_CLRSR = SCU_GENERAL_MIRRSTS_RTC_CLRSR(curr & (1u << 15u));
        RTC_MSKSR = SCU_GENERAL_MIRRSTS_RTC_MSKSR(curr & (1u << 14u));
        RMX = SCU_GENERAL_MIRRSTS_RMX(curr & (1u << 13u));
        RTC_TIM1 = SCU_GENERAL_MIRRSTS_RTC_TIM1(curr & (1u << 12u));
        RTC_TIM0 = SCU_GENERAL_MIRRSTS_RTC_TIM0(curr & (1u << 11u));
        RTC_ATIM1 = SCU_GENERAL_MIRRSTS_RTC_ATIM1(curr & (1u << 10u));
        RTC_ATIM0 = SCU_GENERAL_MIRRSTS_RTC_ATIM0(curr & (1u << 9u));
        RTC_CTR = SCU_GENERAL_MIRRSTS_RTC_CTR(curr & (1u << 8u));
        OSCULCTRL = SCU_GENERAL_MIRRSTS_OSCULCTRL(curr & (1u << 7u));
        OSCSICTRL = SCU_GENERAL_MIRRSTS_OSCSICTRL(curr & (1u << 5u));
        HDCR = SCU_GENERAL_MIRRSTS_HDCR(curr & (1u << 3u));
        HDSET = SCU_GENERAL_MIRRSTS_HDSET(curr & (1u << 2u));
        HDCLR = SCU_GENERAL_MIRRSTS_HDCLR(curr & (1u << 1u));
    }

    /**
     * Get RMACR's ADDR field.
     */
    inline uint8_t get_RMACR_ADDR()
    {
        return (RMACR >> 16u) & 0b1111u;
    }

    /**
     * Set RMACR's ADDR field.
     */
    inline void set_RMACR_ADDR(uint8_t value)
    {
        uint32_t curr = RMACR;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        RMACR = curr;
    }

    /**
     * Get RMACR's RDWR bit.
     */
    inline SCU_GENERAL_RMACR_RDWR get_RMACR_RDWR()
    {
        return SCU_GENERAL_RMACR_RDWR(RMACR & (1u << 0u));
    }

    /**
     * Set RMACR's RDWR bit.
     */
    inline void set_RMACR_RDWR()
    {
        RMACR |= 1u << 0u;
    }

    /**
     * Clear RMACR's RDWR bit.
     */
    inline void clear_RMACR_RDWR()
    {
        RMACR &= ~(1u << 0u);
    }

    /**
     * Toggle RMACR's RDWR bit.
     */
    inline void toggle_RMACR_RDWR()
    {
        RMACR ^= 1u << 0u;
    }

    /**
     * Get all of RMACR's bit fields.
     */
    inline void get_RMACR(uint8_t &ADDR, SCU_GENERAL_RMACR_RDWR &RDWR)
    {
        uint32_t curr = RMACR;

        ADDR = (curr >> 16u) & 0b1111u;
        RDWR = SCU_GENERAL_RMACR_RDWR(curr & (1u << 0u));
    }

    /**
     * Set all of RMACR's bit fields.
     */
    inline void set_RMACR(uint8_t ADDR, SCU_GENERAL_RMACR_RDWR RDWR)
    {
        uint32_t curr = RMACR;

        curr &= ~(0b1111u << 16u);
        curr |= (ADDR & 0b1111u) << 16u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(RDWR) & 0b1u) << 0u;

        RMACR = curr;
    }

    /**
     * Get RMDATA's DATA field.
     */
    inline uint32_t get_RMDATA_DATA()
    {
        return (RMDATA >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set RMDATA's DATA field.
     */
    inline void set_RMDATA_DATA(uint32_t value)
    {
        uint32_t curr = RMDATA;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        RMDATA = curr;
    }
};

static_assert(sizeof(scu_general) == scu_general::size);

static volatile scu_general *const SCU_GENERAL = reinterpret_cast<scu_general *>(0x50004000);

}; // namespace XMC4700
