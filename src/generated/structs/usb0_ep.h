/**
 * \file
 * \brief Generated by ifgen (2.6.2).
 */
#pragma once

#include "../enums/USB0_EP0_DIEPCTL0_MPS.h"
#include "../enums/USB0_EP0_DIEPCTL0_NAKSts.h"
#include "../enums/USB0_EP0_DOEPCTL0_MPS.h"
#include "../enums/USB0_EP0_DOEPCTL0_NAKSts.h"
#include "../enums/USB0_EP0_DOEPTSIZ0_SUPCnt.h"
#include "../enums/USB0_EP0_DTXFSTS0_INEPTxFSpcAvail.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Universal Serial Bus
 */
struct [[gnu::packed]] usb0_ep
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< usb0_ep's identifier. */
    static constexpr std::size_t size = 544; /*!< usb0_ep's size in bytes. */

    /* Fields. */
    uint32_t DIEPCTL0;                                               /*!< (read-write) Device Control IN Endpoint Control Register */
    const uint32_t reserved_padding0 = {};
    uint32_t DIEPINT0;                                               /*!< (read-write) Device Endpoint Interrupt Register */
    const uint32_t reserved_padding1 = {};
    uint32_t DIEPTSIZ0;                                              /*!< (read-write) Device IN Endpoint Transfer Size Register */
    uint32_t DIEPDMA0;                                               /*!< (read-write) Device Endpoint DMA Address Register */
    const uint32_t DTXFSTS0 = {};                                    /*!< (read-only) Device IN Endpoint Transmit FIFO Status Register */
    const uint32_t DIEPDMAB0 = {};                                   /*!< (read-only) Device Endpoint DMA Buffer Address Register */
    static constexpr std::size_t reserved_padding2_length = 120;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    uint32_t DOEPCTL0;                                               /*!< (read-write) Device Control OUT Endpoint Control Register */
    const uint32_t reserved_padding3 = {};
    uint32_t DOEPINT0;                                               /*!< (read-write) Device Endpoint Interrupt Register */
    const uint32_t reserved_padding4 = {};
    uint32_t DOEPTSIZ0;                                              /*!< (read-write) Device OUT Endpoint Transfer Size Register */
    uint32_t DOEPDMA0;                                               /*!< (read-write) Device Endpoint DMA Address Register */
    const uint32_t reserved_padding5 = {};
    const uint32_t DOEPDMAB0 = {};                                   /*!< (read-only) Device Endpoint DMA Buffer Address Register */

    /* Methods. */

    /**
     * Get DIEPCTL0's EPEna bit.
     */
    bool get_DIEPCTL0_EPEna()
    {
        return DIEPCTL0 & (1u << 31u);
    }

    /**
     * Set DIEPCTL0's EPEna bit.
     */
    inline void set_DIEPCTL0_EPEna()
    {
        DIEPCTL0 |= 1u << 31u;
    }

    /**
     * Clear DIEPCTL0's EPEna bit.
     */
    inline void clear_DIEPCTL0_EPEna()
    {
        DIEPCTL0 &= ~(1u << 31u);
    }

    /**
     * Toggle DIEPCTL0's EPEna bit.
     */
    inline void toggle_DIEPCTL0_EPEna()
    {
        DIEPCTL0 ^= 1u << 31u;
    }

    /**
     * Get DIEPCTL0's EPDis bit.
     */
    bool get_DIEPCTL0_EPDis()
    {
        return DIEPCTL0 & (1u << 30u);
    }

    /**
     * Set DIEPCTL0's EPDis bit.
     */
    inline void set_DIEPCTL0_EPDis()
    {
        DIEPCTL0 |= 1u << 30u;
    }

    /**
     * Clear DIEPCTL0's EPDis bit.
     */
    inline void clear_DIEPCTL0_EPDis()
    {
        DIEPCTL0 &= ~(1u << 30u);
    }

    /**
     * Toggle DIEPCTL0's EPDis bit.
     */
    inline void toggle_DIEPCTL0_EPDis()
    {
        DIEPCTL0 ^= 1u << 30u;
    }

    /**
     * Set DIEPCTL0's SNAK bit.
     */
    inline void set_DIEPCTL0_SNAK()
    {
        DIEPCTL0 |= 1u << 27u;
    }

    /**
     * Clear DIEPCTL0's SNAK bit.
     */
    inline void clear_DIEPCTL0_SNAK()
    {
        DIEPCTL0 &= ~(1u << 27u);
    }

    /**
     * Toggle DIEPCTL0's SNAK bit.
     */
    inline void toggle_DIEPCTL0_SNAK()
    {
        DIEPCTL0 ^= 1u << 27u;
    }

    /**
     * Set DIEPCTL0's CNAK bit.
     */
    inline void set_DIEPCTL0_CNAK()
    {
        DIEPCTL0 |= 1u << 26u;
    }

    /**
     * Clear DIEPCTL0's CNAK bit.
     */
    inline void clear_DIEPCTL0_CNAK()
    {
        DIEPCTL0 &= ~(1u << 26u);
    }

    /**
     * Toggle DIEPCTL0's CNAK bit.
     */
    inline void toggle_DIEPCTL0_CNAK()
    {
        DIEPCTL0 ^= 1u << 26u;
    }

    /**
     * Get DIEPCTL0's TxFNum field.
     */
    uint8_t get_DIEPCTL0_TxFNum()
    {
        return (DIEPCTL0 >> 22u) & 0b1111u;
    }

    /**
     * Set DIEPCTL0's TxFNum field.
     */
    inline void set_DIEPCTL0_TxFNum(uint8_t value)
    {
        uint32_t curr = DIEPCTL0;

        curr &= ~(0b1111u << 22u);
        curr |= (value & 0b1111u) << 22u;

        DIEPCTL0 = curr;
    }

    /**
     * Get DIEPCTL0's Stall bit.
     */
    bool get_DIEPCTL0_Stall()
    {
        return DIEPCTL0 & (1u << 21u);
    }

    /**
     * Set DIEPCTL0's Stall bit.
     */
    inline void set_DIEPCTL0_Stall()
    {
        DIEPCTL0 |= 1u << 21u;
    }

    /**
     * Clear DIEPCTL0's Stall bit.
     */
    inline void clear_DIEPCTL0_Stall()
    {
        DIEPCTL0 &= ~(1u << 21u);
    }

    /**
     * Toggle DIEPCTL0's Stall bit.
     */
    inline void toggle_DIEPCTL0_Stall()
    {
        DIEPCTL0 ^= 1u << 21u;
    }

    /**
     * Get DIEPCTL0's EPType field.
     */
    uint8_t get_DIEPCTL0_EPType()
    {
        return (DIEPCTL0 >> 18u) & 0b11u;
    }

    /**
     * Get DIEPCTL0's NAKSts bit.
     */
    USB0_EP0_DIEPCTL0_NAKSts get_DIEPCTL0_NAKSts()
    {
        return USB0_EP0_DIEPCTL0_NAKSts(DIEPCTL0 & (1u << 17u));
    }

    /**
     * Get DIEPCTL0's USBActEP bit.
     */
    bool get_DIEPCTL0_USBActEP()
    {
        return DIEPCTL0 & (1u << 15u);
    }

    /**
     * Get DIEPCTL0's MPS field.
     */
    USB0_EP0_DIEPCTL0_MPS get_DIEPCTL0_MPS()
    {
        return USB0_EP0_DIEPCTL0_MPS((DIEPCTL0 >> 0u) & 0b11u);
    }

    /**
     * Set DIEPCTL0's MPS field.
     */
    inline void set_DIEPCTL0_MPS(USB0_EP0_DIEPCTL0_MPS value)
    {
        uint32_t curr = DIEPCTL0;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        DIEPCTL0 = curr;
    }

    /**
     * Get DIEPINT0's BNAIntr bit.
     */
    bool get_DIEPINT0_BNAIntr()
    {
        return DIEPINT0 & (1u << 9u);
    }

    /**
     * Set DIEPINT0's BNAIntr bit.
     */
    inline void set_DIEPINT0_BNAIntr()
    {
        DIEPINT0 |= 1u << 9u;
    }

    /**
     * Clear DIEPINT0's BNAIntr bit.
     */
    inline void clear_DIEPINT0_BNAIntr()
    {
        DIEPINT0 &= ~(1u << 9u);
    }

    /**
     * Toggle DIEPINT0's BNAIntr bit.
     */
    inline void toggle_DIEPINT0_BNAIntr()
    {
        DIEPINT0 ^= 1u << 9u;
    }

    /**
     * Get DIEPINT0's TxFEmp bit.
     */
    bool get_DIEPINT0_TxFEmp()
    {
        return DIEPINT0 & (1u << 7u);
    }

    /**
     * Get DIEPINT0's INEPNakEff bit.
     */
    bool get_DIEPINT0_INEPNakEff()
    {
        return DIEPINT0 & (1u << 6u);
    }

    /**
     * Set DIEPINT0's INEPNakEff bit.
     */
    inline void set_DIEPINT0_INEPNakEff()
    {
        DIEPINT0 |= 1u << 6u;
    }

    /**
     * Clear DIEPINT0's INEPNakEff bit.
     */
    inline void clear_DIEPINT0_INEPNakEff()
    {
        DIEPINT0 &= ~(1u << 6u);
    }

    /**
     * Toggle DIEPINT0's INEPNakEff bit.
     */
    inline void toggle_DIEPINT0_INEPNakEff()
    {
        DIEPINT0 ^= 1u << 6u;
    }

    /**
     * Get DIEPINT0's INTknTXFEmp bit.
     */
    bool get_DIEPINT0_INTknTXFEmp()
    {
        return DIEPINT0 & (1u << 4u);
    }

    /**
     * Set DIEPINT0's INTknTXFEmp bit.
     */
    inline void set_DIEPINT0_INTknTXFEmp()
    {
        DIEPINT0 |= 1u << 4u;
    }

    /**
     * Clear DIEPINT0's INTknTXFEmp bit.
     */
    inline void clear_DIEPINT0_INTknTXFEmp()
    {
        DIEPINT0 &= ~(1u << 4u);
    }

    /**
     * Toggle DIEPINT0's INTknTXFEmp bit.
     */
    inline void toggle_DIEPINT0_INTknTXFEmp()
    {
        DIEPINT0 ^= 1u << 4u;
    }

    /**
     * Get DIEPINT0's TimeOUT bit.
     */
    bool get_DIEPINT0_TimeOUT()
    {
        return DIEPINT0 & (1u << 3u);
    }

    /**
     * Set DIEPINT0's TimeOUT bit.
     */
    inline void set_DIEPINT0_TimeOUT()
    {
        DIEPINT0 |= 1u << 3u;
    }

    /**
     * Clear DIEPINT0's TimeOUT bit.
     */
    inline void clear_DIEPINT0_TimeOUT()
    {
        DIEPINT0 &= ~(1u << 3u);
    }

    /**
     * Toggle DIEPINT0's TimeOUT bit.
     */
    inline void toggle_DIEPINT0_TimeOUT()
    {
        DIEPINT0 ^= 1u << 3u;
    }

    /**
     * Get DIEPINT0's AHBErr bit.
     */
    bool get_DIEPINT0_AHBErr()
    {
        return DIEPINT0 & (1u << 2u);
    }

    /**
     * Set DIEPINT0's AHBErr bit.
     */
    inline void set_DIEPINT0_AHBErr()
    {
        DIEPINT0 |= 1u << 2u;
    }

    /**
     * Clear DIEPINT0's AHBErr bit.
     */
    inline void clear_DIEPINT0_AHBErr()
    {
        DIEPINT0 &= ~(1u << 2u);
    }

    /**
     * Toggle DIEPINT0's AHBErr bit.
     */
    inline void toggle_DIEPINT0_AHBErr()
    {
        DIEPINT0 ^= 1u << 2u;
    }

    /**
     * Get DIEPINT0's EPDisbld bit.
     */
    bool get_DIEPINT0_EPDisbld()
    {
        return DIEPINT0 & (1u << 1u);
    }

    /**
     * Set DIEPINT0's EPDisbld bit.
     */
    inline void set_DIEPINT0_EPDisbld()
    {
        DIEPINT0 |= 1u << 1u;
    }

    /**
     * Clear DIEPINT0's EPDisbld bit.
     */
    inline void clear_DIEPINT0_EPDisbld()
    {
        DIEPINT0 &= ~(1u << 1u);
    }

    /**
     * Toggle DIEPINT0's EPDisbld bit.
     */
    inline void toggle_DIEPINT0_EPDisbld()
    {
        DIEPINT0 ^= 1u << 1u;
    }

    /**
     * Get DIEPINT0's XferCompl bit.
     */
    bool get_DIEPINT0_XferCompl()
    {
        return DIEPINT0 & (1u << 0u);
    }

    /**
     * Set DIEPINT0's XferCompl bit.
     */
    inline void set_DIEPINT0_XferCompl()
    {
        DIEPINT0 |= 1u << 0u;
    }

    /**
     * Clear DIEPINT0's XferCompl bit.
     */
    inline void clear_DIEPINT0_XferCompl()
    {
        DIEPINT0 &= ~(1u << 0u);
    }

    /**
     * Toggle DIEPINT0's XferCompl bit.
     */
    inline void toggle_DIEPINT0_XferCompl()
    {
        DIEPINT0 ^= 1u << 0u;
    }

    /**
     * Get DIEPTSIZ0's PktCnt field.
     */
    uint8_t get_DIEPTSIZ0_PktCnt()
    {
        return (DIEPTSIZ0 >> 19u) & 0b11u;
    }

    /**
     * Set DIEPTSIZ0's PktCnt field.
     */
    inline void set_DIEPTSIZ0_PktCnt(uint8_t value)
    {
        uint32_t curr = DIEPTSIZ0;

        curr &= ~(0b11u << 19u);
        curr |= (value & 0b11u) << 19u;

        DIEPTSIZ0 = curr;
    }

    /**
     * Get DIEPTSIZ0's XferSize field.
     */
    uint8_t get_DIEPTSIZ0_XferSize()
    {
        return (DIEPTSIZ0 >> 0u) & 0b1111111u;
    }

    /**
     * Set DIEPTSIZ0's XferSize field.
     */
    inline void set_DIEPTSIZ0_XferSize(uint8_t value)
    {
        uint32_t curr = DIEPTSIZ0;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        DIEPTSIZ0 = curr;
    }

    /**
     * Get DIEPDMA0's DMAAddr field.
     */
    uint32_t get_DIEPDMA0_DMAAddr()
    {
        return (DIEPDMA0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DIEPDMA0's DMAAddr field.
     */
    inline void set_DIEPDMA0_DMAAddr(uint32_t value)
    {
        uint32_t curr = DIEPDMA0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DIEPDMA0 = curr;
    }

    /**
     * Get DTXFSTS0's INEPTxFSpcAvail field.
     */
    USB0_EP0_DTXFSTS0_INEPTxFSpcAvail get_DTXFSTS0_INEPTxFSpcAvail()
    {
        return USB0_EP0_DTXFSTS0_INEPTxFSpcAvail((DTXFSTS0 >> 0u) & 0b1111111111111111u);
    }

    /**
     * Get DIEPDMAB0's DMABufferAddr field.
     */
    uint32_t get_DIEPDMAB0_DMABufferAddr()
    {
        return (DIEPDMAB0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Get DOEPCTL0's EPEna bit.
     */
    bool get_DOEPCTL0_EPEna()
    {
        return DOEPCTL0 & (1u << 31u);
    }

    /**
     * Set DOEPCTL0's EPEna bit.
     */
    inline void set_DOEPCTL0_EPEna()
    {
        DOEPCTL0 |= 1u << 31u;
    }

    /**
     * Clear DOEPCTL0's EPEna bit.
     */
    inline void clear_DOEPCTL0_EPEna()
    {
        DOEPCTL0 &= ~(1u << 31u);
    }

    /**
     * Toggle DOEPCTL0's EPEna bit.
     */
    inline void toggle_DOEPCTL0_EPEna()
    {
        DOEPCTL0 ^= 1u << 31u;
    }

    /**
     * Get DOEPCTL0's EPDis bit.
     */
    bool get_DOEPCTL0_EPDis()
    {
        return DOEPCTL0 & (1u << 30u);
    }

    /**
     * Set DOEPCTL0's SNAK bit.
     */
    inline void set_DOEPCTL0_SNAK()
    {
        DOEPCTL0 |= 1u << 27u;
    }

    /**
     * Clear DOEPCTL0's SNAK bit.
     */
    inline void clear_DOEPCTL0_SNAK()
    {
        DOEPCTL0 &= ~(1u << 27u);
    }

    /**
     * Toggle DOEPCTL0's SNAK bit.
     */
    inline void toggle_DOEPCTL0_SNAK()
    {
        DOEPCTL0 ^= 1u << 27u;
    }

    /**
     * Set DOEPCTL0's CNAK bit.
     */
    inline void set_DOEPCTL0_CNAK()
    {
        DOEPCTL0 |= 1u << 26u;
    }

    /**
     * Clear DOEPCTL0's CNAK bit.
     */
    inline void clear_DOEPCTL0_CNAK()
    {
        DOEPCTL0 &= ~(1u << 26u);
    }

    /**
     * Toggle DOEPCTL0's CNAK bit.
     */
    inline void toggle_DOEPCTL0_CNAK()
    {
        DOEPCTL0 ^= 1u << 26u;
    }

    /**
     * Get DOEPCTL0's Stall bit.
     */
    bool get_DOEPCTL0_Stall()
    {
        return DOEPCTL0 & (1u << 21u);
    }

    /**
     * Set DOEPCTL0's Stall bit.
     */
    inline void set_DOEPCTL0_Stall()
    {
        DOEPCTL0 |= 1u << 21u;
    }

    /**
     * Clear DOEPCTL0's Stall bit.
     */
    inline void clear_DOEPCTL0_Stall()
    {
        DOEPCTL0 &= ~(1u << 21u);
    }

    /**
     * Toggle DOEPCTL0's Stall bit.
     */
    inline void toggle_DOEPCTL0_Stall()
    {
        DOEPCTL0 ^= 1u << 21u;
    }

    /**
     * Get DOEPCTL0's Snp bit.
     */
    bool get_DOEPCTL0_Snp()
    {
        return DOEPCTL0 & (1u << 20u);
    }

    /**
     * Set DOEPCTL0's Snp bit.
     */
    inline void set_DOEPCTL0_Snp()
    {
        DOEPCTL0 |= 1u << 20u;
    }

    /**
     * Clear DOEPCTL0's Snp bit.
     */
    inline void clear_DOEPCTL0_Snp()
    {
        DOEPCTL0 &= ~(1u << 20u);
    }

    /**
     * Toggle DOEPCTL0's Snp bit.
     */
    inline void toggle_DOEPCTL0_Snp()
    {
        DOEPCTL0 ^= 1u << 20u;
    }

    /**
     * Get DOEPCTL0's EPType field.
     */
    uint8_t get_DOEPCTL0_EPType()
    {
        return (DOEPCTL0 >> 18u) & 0b11u;
    }

    /**
     * Get DOEPCTL0's NAKSts bit.
     */
    USB0_EP0_DOEPCTL0_NAKSts get_DOEPCTL0_NAKSts()
    {
        return USB0_EP0_DOEPCTL0_NAKSts(DOEPCTL0 & (1u << 17u));
    }

    /**
     * Get DOEPCTL0's USBActEP bit.
     */
    bool get_DOEPCTL0_USBActEP()
    {
        return DOEPCTL0 & (1u << 15u);
    }

    /**
     * Get DOEPCTL0's MPS field.
     */
    USB0_EP0_DOEPCTL0_MPS get_DOEPCTL0_MPS()
    {
        return USB0_EP0_DOEPCTL0_MPS((DOEPCTL0 >> 0u) & 0b11u);
    }

    /**
     * Get DOEPINT0's NYETIntrpt bit.
     */
    bool get_DOEPINT0_NYETIntrpt()
    {
        return DOEPINT0 & (1u << 14u);
    }

    /**
     * Set DOEPINT0's NYETIntrpt bit.
     */
    inline void set_DOEPINT0_NYETIntrpt()
    {
        DOEPINT0 |= 1u << 14u;
    }

    /**
     * Clear DOEPINT0's NYETIntrpt bit.
     */
    inline void clear_DOEPINT0_NYETIntrpt()
    {
        DOEPINT0 &= ~(1u << 14u);
    }

    /**
     * Toggle DOEPINT0's NYETIntrpt bit.
     */
    inline void toggle_DOEPINT0_NYETIntrpt()
    {
        DOEPINT0 ^= 1u << 14u;
    }

    /**
     * Get DOEPINT0's NAKIntrpt bit.
     */
    bool get_DOEPINT0_NAKIntrpt()
    {
        return DOEPINT0 & (1u << 13u);
    }

    /**
     * Set DOEPINT0's NAKIntrpt bit.
     */
    inline void set_DOEPINT0_NAKIntrpt()
    {
        DOEPINT0 |= 1u << 13u;
    }

    /**
     * Clear DOEPINT0's NAKIntrpt bit.
     */
    inline void clear_DOEPINT0_NAKIntrpt()
    {
        DOEPINT0 &= ~(1u << 13u);
    }

    /**
     * Toggle DOEPINT0's NAKIntrpt bit.
     */
    inline void toggle_DOEPINT0_NAKIntrpt()
    {
        DOEPINT0 ^= 1u << 13u;
    }

    /**
     * Get DOEPINT0's BbleErrIntrpt bit.
     */
    bool get_DOEPINT0_BbleErrIntrpt()
    {
        return DOEPINT0 & (1u << 12u);
    }

    /**
     * Set DOEPINT0's BbleErrIntrpt bit.
     */
    inline void set_DOEPINT0_BbleErrIntrpt()
    {
        DOEPINT0 |= 1u << 12u;
    }

    /**
     * Clear DOEPINT0's BbleErrIntrpt bit.
     */
    inline void clear_DOEPINT0_BbleErrIntrpt()
    {
        DOEPINT0 &= ~(1u << 12u);
    }

    /**
     * Toggle DOEPINT0's BbleErrIntrpt bit.
     */
    inline void toggle_DOEPINT0_BbleErrIntrpt()
    {
        DOEPINT0 ^= 1u << 12u;
    }

    /**
     * Get DOEPINT0's PktDrpSts bit.
     */
    bool get_DOEPINT0_PktDrpSts()
    {
        return DOEPINT0 & (1u << 11u);
    }

    /**
     * Set DOEPINT0's PktDrpSts bit.
     */
    inline void set_DOEPINT0_PktDrpSts()
    {
        DOEPINT0 |= 1u << 11u;
    }

    /**
     * Clear DOEPINT0's PktDrpSts bit.
     */
    inline void clear_DOEPINT0_PktDrpSts()
    {
        DOEPINT0 &= ~(1u << 11u);
    }

    /**
     * Toggle DOEPINT0's PktDrpSts bit.
     */
    inline void toggle_DOEPINT0_PktDrpSts()
    {
        DOEPINT0 ^= 1u << 11u;
    }

    /**
     * Get DOEPINT0's BNAIntr bit.
     */
    bool get_DOEPINT0_BNAIntr()
    {
        return DOEPINT0 & (1u << 9u);
    }

    /**
     * Set DOEPINT0's BNAIntr bit.
     */
    inline void set_DOEPINT0_BNAIntr()
    {
        DOEPINT0 |= 1u << 9u;
    }

    /**
     * Clear DOEPINT0's BNAIntr bit.
     */
    inline void clear_DOEPINT0_BNAIntr()
    {
        DOEPINT0 &= ~(1u << 9u);
    }

    /**
     * Toggle DOEPINT0's BNAIntr bit.
     */
    inline void toggle_DOEPINT0_BNAIntr()
    {
        DOEPINT0 ^= 1u << 9u;
    }

    /**
     * Get DOEPINT0's Back2BackSETup bit.
     */
    bool get_DOEPINT0_Back2BackSETup()
    {
        return DOEPINT0 & (1u << 6u);
    }

    /**
     * Set DOEPINT0's Back2BackSETup bit.
     */
    inline void set_DOEPINT0_Back2BackSETup()
    {
        DOEPINT0 |= 1u << 6u;
    }

    /**
     * Clear DOEPINT0's Back2BackSETup bit.
     */
    inline void clear_DOEPINT0_Back2BackSETup()
    {
        DOEPINT0 &= ~(1u << 6u);
    }

    /**
     * Toggle DOEPINT0's Back2BackSETup bit.
     */
    inline void toggle_DOEPINT0_Back2BackSETup()
    {
        DOEPINT0 ^= 1u << 6u;
    }

    /**
     * Get DOEPINT0's StsPhseRcvd bit.
     */
    bool get_DOEPINT0_StsPhseRcvd()
    {
        return DOEPINT0 & (1u << 5u);
    }

    /**
     * Set DOEPINT0's StsPhseRcvd bit.
     */
    inline void set_DOEPINT0_StsPhseRcvd()
    {
        DOEPINT0 |= 1u << 5u;
    }

    /**
     * Clear DOEPINT0's StsPhseRcvd bit.
     */
    inline void clear_DOEPINT0_StsPhseRcvd()
    {
        DOEPINT0 &= ~(1u << 5u);
    }

    /**
     * Toggle DOEPINT0's StsPhseRcvd bit.
     */
    inline void toggle_DOEPINT0_StsPhseRcvd()
    {
        DOEPINT0 ^= 1u << 5u;
    }

    /**
     * Get DOEPINT0's OUTTknEPdis bit.
     */
    bool get_DOEPINT0_OUTTknEPdis()
    {
        return DOEPINT0 & (1u << 4u);
    }

    /**
     * Set DOEPINT0's OUTTknEPdis bit.
     */
    inline void set_DOEPINT0_OUTTknEPdis()
    {
        DOEPINT0 |= 1u << 4u;
    }

    /**
     * Clear DOEPINT0's OUTTknEPdis bit.
     */
    inline void clear_DOEPINT0_OUTTknEPdis()
    {
        DOEPINT0 &= ~(1u << 4u);
    }

    /**
     * Toggle DOEPINT0's OUTTknEPdis bit.
     */
    inline void toggle_DOEPINT0_OUTTknEPdis()
    {
        DOEPINT0 ^= 1u << 4u;
    }

    /**
     * Get DOEPINT0's SetUp bit.
     */
    bool get_DOEPINT0_SetUp()
    {
        return DOEPINT0 & (1u << 3u);
    }

    /**
     * Set DOEPINT0's SetUp bit.
     */
    inline void set_DOEPINT0_SetUp()
    {
        DOEPINT0 |= 1u << 3u;
    }

    /**
     * Clear DOEPINT0's SetUp bit.
     */
    inline void clear_DOEPINT0_SetUp()
    {
        DOEPINT0 &= ~(1u << 3u);
    }

    /**
     * Toggle DOEPINT0's SetUp bit.
     */
    inline void toggle_DOEPINT0_SetUp()
    {
        DOEPINT0 ^= 1u << 3u;
    }

    /**
     * Get DOEPINT0's AHBErr bit.
     */
    bool get_DOEPINT0_AHBErr()
    {
        return DOEPINT0 & (1u << 2u);
    }

    /**
     * Set DOEPINT0's AHBErr bit.
     */
    inline void set_DOEPINT0_AHBErr()
    {
        DOEPINT0 |= 1u << 2u;
    }

    /**
     * Clear DOEPINT0's AHBErr bit.
     */
    inline void clear_DOEPINT0_AHBErr()
    {
        DOEPINT0 &= ~(1u << 2u);
    }

    /**
     * Toggle DOEPINT0's AHBErr bit.
     */
    inline void toggle_DOEPINT0_AHBErr()
    {
        DOEPINT0 ^= 1u << 2u;
    }

    /**
     * Get DOEPINT0's EPDisbld bit.
     */
    bool get_DOEPINT0_EPDisbld()
    {
        return DOEPINT0 & (1u << 1u);
    }

    /**
     * Set DOEPINT0's EPDisbld bit.
     */
    inline void set_DOEPINT0_EPDisbld()
    {
        DOEPINT0 |= 1u << 1u;
    }

    /**
     * Clear DOEPINT0's EPDisbld bit.
     */
    inline void clear_DOEPINT0_EPDisbld()
    {
        DOEPINT0 &= ~(1u << 1u);
    }

    /**
     * Toggle DOEPINT0's EPDisbld bit.
     */
    inline void toggle_DOEPINT0_EPDisbld()
    {
        DOEPINT0 ^= 1u << 1u;
    }

    /**
     * Get DOEPINT0's XferCompl bit.
     */
    bool get_DOEPINT0_XferCompl()
    {
        return DOEPINT0 & (1u << 0u);
    }

    /**
     * Set DOEPINT0's XferCompl bit.
     */
    inline void set_DOEPINT0_XferCompl()
    {
        DOEPINT0 |= 1u << 0u;
    }

    /**
     * Clear DOEPINT0's XferCompl bit.
     */
    inline void clear_DOEPINT0_XferCompl()
    {
        DOEPINT0 &= ~(1u << 0u);
    }

    /**
     * Toggle DOEPINT0's XferCompl bit.
     */
    inline void toggle_DOEPINT0_XferCompl()
    {
        DOEPINT0 ^= 1u << 0u;
    }

    /**
     * Get DOEPTSIZ0's SUPCnt field.
     */
    USB0_EP0_DOEPTSIZ0_SUPCnt get_DOEPTSIZ0_SUPCnt()
    {
        return USB0_EP0_DOEPTSIZ0_SUPCnt((DOEPTSIZ0 >> 29u) & 0b11u);
    }

    /**
     * Set DOEPTSIZ0's SUPCnt field.
     */
    inline void set_DOEPTSIZ0_SUPCnt(USB0_EP0_DOEPTSIZ0_SUPCnt value)
    {
        uint32_t curr = DOEPTSIZ0;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        DOEPTSIZ0 = curr;
    }

    /**
     * Get DOEPTSIZ0's PktCnt field.
     */
    uint8_t get_DOEPTSIZ0_PktCnt()
    {
        return (DOEPTSIZ0 >> 19u) & 0b11u;
    }

    /**
     * Set DOEPTSIZ0's PktCnt field.
     */
    inline void set_DOEPTSIZ0_PktCnt(uint8_t value)
    {
        uint32_t curr = DOEPTSIZ0;

        curr &= ~(0b11u << 19u);
        curr |= (value & 0b11u) << 19u;

        DOEPTSIZ0 = curr;
    }

    /**
     * Get DOEPTSIZ0's XferSize field.
     */
    uint8_t get_DOEPTSIZ0_XferSize()
    {
        return (DOEPTSIZ0 >> 0u) & 0b1111111u;
    }

    /**
     * Set DOEPTSIZ0's XferSize field.
     */
    inline void set_DOEPTSIZ0_XferSize(uint8_t value)
    {
        uint32_t curr = DOEPTSIZ0;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        DOEPTSIZ0 = curr;
    }

    /**
     * Get DOEPDMA0's DMAAddr field.
     */
    uint32_t get_DOEPDMA0_DMAAddr()
    {
        return (DOEPDMA0 >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set DOEPDMA0's DMAAddr field.
     */
    inline void set_DOEPDMA0_DMAAddr(uint32_t value)
    {
        uint32_t curr = DOEPDMA0;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        DOEPDMA0 = curr;
    }

    /**
     * Get DOEPDMAB0's DMABufferAddr field.
     */
    uint32_t get_DOEPDMAB0_DMABufferAddr()
    {
        return (DOEPDMAB0 >> 0u) & 0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(usb0_ep) == usb0_ep::size);

static volatile usb0_ep *const USB0_EP0 = reinterpret_cast<usb0_ep *>(0x50040900);

}; // namespace XMC4700
