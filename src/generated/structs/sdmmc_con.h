/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/SDMMC_CON_SDMMC_CON_CDSEL.h"
#include "../enums/SDMMC_CON_SDMMC_CON_CDSVAL.h"
#include "../enums/SDMMC_CON_SDMMC_CON_WPSEL.h"
#include "../enums/SDMMC_CON_SDMMC_CON_WPSVAL.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * SD and Multimediacard Control Register
 */
struct [[gnu::packed]] sdmmc_con
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;      /*!< sdmmc_con's identifier. */
    static constexpr std::size_t size = 4; /*!< sdmmc_con's size in bytes. */

    /* Fields. */
    uint32_t SDMMC_CON; /*!< (read-write) SDMMC Configuration */

    /* Methods. */

    /**
     * Get SDMMC_CON's CDSVAL bit.
     */
    SDMMC_CON_SDMMC_CON_CDSVAL get_SDMMC_CON_CDSVAL()
    {
        return SDMMC_CON_SDMMC_CON_CDSVAL(SDMMC_CON & (1u << 20u));
    }

    /**
     * Set SDMMC_CON's CDSVAL bit.
     */
    inline void set_SDMMC_CON_CDSVAL()
    {
        SDMMC_CON |= 1u << 20u;
    }

    /**
     * Clear SDMMC_CON's CDSVAL bit.
     */
    inline void clear_SDMMC_CON_CDSVAL()
    {
        SDMMC_CON &= ~(1u << 20u);
    }

    /**
     * Toggle SDMMC_CON's CDSVAL bit.
     */
    inline void toggle_SDMMC_CON_CDSVAL()
    {
        SDMMC_CON ^= 1u << 20u;
    }

    /**
     * Get SDMMC_CON's CDSEL bit.
     */
    SDMMC_CON_SDMMC_CON_CDSEL get_SDMMC_CON_CDSEL()
    {
        return SDMMC_CON_SDMMC_CON_CDSEL(SDMMC_CON & (1u << 16u));
    }

    /**
     * Set SDMMC_CON's CDSEL bit.
     */
    inline void set_SDMMC_CON_CDSEL()
    {
        SDMMC_CON |= 1u << 16u;
    }

    /**
     * Clear SDMMC_CON's CDSEL bit.
     */
    inline void clear_SDMMC_CON_CDSEL()
    {
        SDMMC_CON &= ~(1u << 16u);
    }

    /**
     * Toggle SDMMC_CON's CDSEL bit.
     */
    inline void toggle_SDMMC_CON_CDSEL()
    {
        SDMMC_CON ^= 1u << 16u;
    }

    /**
     * Get SDMMC_CON's WPSVAL bit.
     */
    SDMMC_CON_SDMMC_CON_WPSVAL get_SDMMC_CON_WPSVAL()
    {
        return SDMMC_CON_SDMMC_CON_WPSVAL(SDMMC_CON & (1u << 4u));
    }

    /**
     * Set SDMMC_CON's WPSVAL bit.
     */
    inline void set_SDMMC_CON_WPSVAL()
    {
        SDMMC_CON |= 1u << 4u;
    }

    /**
     * Clear SDMMC_CON's WPSVAL bit.
     */
    inline void clear_SDMMC_CON_WPSVAL()
    {
        SDMMC_CON &= ~(1u << 4u);
    }

    /**
     * Toggle SDMMC_CON's WPSVAL bit.
     */
    inline void toggle_SDMMC_CON_WPSVAL()
    {
        SDMMC_CON ^= 1u << 4u;
    }

    /**
     * Get SDMMC_CON's WPSEL bit.
     */
    SDMMC_CON_SDMMC_CON_WPSEL get_SDMMC_CON_WPSEL()
    {
        return SDMMC_CON_SDMMC_CON_WPSEL(SDMMC_CON & (1u << 0u));
    }

    /**
     * Set SDMMC_CON's WPSEL bit.
     */
    inline void set_SDMMC_CON_WPSEL()
    {
        SDMMC_CON |= 1u << 0u;
    }

    /**
     * Clear SDMMC_CON's WPSEL bit.
     */
    inline void clear_SDMMC_CON_WPSEL()
    {
        SDMMC_CON &= ~(1u << 0u);
    }

    /**
     * Toggle SDMMC_CON's WPSEL bit.
     */
    inline void toggle_SDMMC_CON_WPSEL()
    {
        SDMMC_CON ^= 1u << 0u;
    }
};

static_assert(sizeof(sdmmc_con) == sdmmc_con::size);

static volatile sdmmc_con *const SDMMC_CON =
    reinterpret_cast<sdmmc_con *>(0x500040B4);

}; // namespace XMC4700
