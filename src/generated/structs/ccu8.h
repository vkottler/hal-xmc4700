/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include "../enums/CCU8_C0V_FFL.h"
#include "../enums/CCU8_C1V_FFL.h"
#include "../enums/CCU8_C2V_FFL.h"
#include "../enums/CCU8_C3V_FFL.h"
#include "../enums/CCU8_CHC_ASE.h"
#include "../enums/CCU8_CHC_OCS1.h"
#include "../enums/CCU8_CHC_OCS2.h"
#include "../enums/CCU8_CHC_OCS3.h"
#include "../enums/CCU8_CHC_OCS4.h"
#include "../enums/CCU8_CMC_CAP0S.h"
#include "../enums/CCU8_CMC_CAP1S.h"
#include "../enums/CCU8_CMC_CNTS.h"
#include "../enums/CCU8_CMC_ENDS.h"
#include "../enums/CCU8_CMC_GATES.h"
#include "../enums/CCU8_CMC_OFS.h"
#include "../enums/CCU8_CMC_STRTS.h"
#include "../enums/CCU8_CMC_TCE.h"
#include "../enums/CCU8_CMC_TS.h"
#include "../enums/CCU8_CMC_UDS.h"
#include "../enums/CCU8_DTC_DCEN1.h"
#include "../enums/CCU8_DTC_DCEN2.h"
#include "../enums/CCU8_DTC_DCEN3.h"
#include "../enums/CCU8_DTC_DCEN4.h"
#include "../enums/CCU8_DTC_DTCC.h"
#include "../enums/CCU8_DTC_DTE1.h"
#include "../enums/CCU8_DTC_DTE2.h"
#include "../enums/CCU8_ECRD0_FFL.h"
#include "../enums/CCU8_ECRD0_LCV.h"
#include "../enums/CCU8_ECRD0_SPTR.h"
#include "../enums/CCU8_ECRD0_VPTR.h"
#include "../enums/CCU8_ECRD1_FFL.h"
#include "../enums/CCU8_ECRD1_LCV.h"
#include "../enums/CCU8_ECRD1_SPTR.h"
#include "../enums/CCU8_ECRD1_VPTR.h"
#include "../enums/CCU8_INS_EV0EM.h"
#include "../enums/CCU8_INS_EV0IS.h"
#include "../enums/CCU8_INS_EV0LM.h"
#include "../enums/CCU8_INS_EV1EM.h"
#include "../enums/CCU8_INS_EV1IS.h"
#include "../enums/CCU8_INS_EV1LM.h"
#include "../enums/CCU8_INS_EV2EM.h"
#include "../enums/CCU8_INS_EV2IS.h"
#include "../enums/CCU8_INS_EV2LM.h"
#include "../enums/CCU8_INS_LPF0M.h"
#include "../enums/CCU8_INS_LPF1M.h"
#include "../enums/CCU8_INS_LPF2M.h"
#include "../enums/CCU8_INTE_CMD1E.h"
#include "../enums/CCU8_INTE_CMD2E.h"
#include "../enums/CCU8_INTE_CMU1E.h"
#include "../enums/CCU8_INTE_CMU2E.h"
#include "../enums/CCU8_INTE_E0AE.h"
#include "../enums/CCU8_INTE_E1AE.h"
#include "../enums/CCU8_INTE_E2AE.h"
#include "../enums/CCU8_INTE_OME.h"
#include "../enums/CCU8_INTE_PME.h"
#include "../enums/CCU8_INTS_CMD1S.h"
#include "../enums/CCU8_INTS_CMD2S.h"
#include "../enums/CCU8_INTS_CMU1S.h"
#include "../enums/CCU8_INTS_CMU2S.h"
#include "../enums/CCU8_INTS_E0AS.h"
#include "../enums/CCU8_INTS_E1AS.h"
#include "../enums/CCU8_INTS_E2AS.h"
#include "../enums/CCU8_INTS_OMDS.h"
#include "../enums/CCU8_INTS_PMUS.h"
#include "../enums/CCU8_PSL_PSL11.h"
#include "../enums/CCU8_PSL_PSL12.h"
#include "../enums/CCU8_PSL_PSL21.h"
#include "../enums/CCU8_PSL_PSL22.h"
#include "../enums/CCU8_SRS_CM1SR.h"
#include "../enums/CCU8_SRS_CM2SR.h"
#include "../enums/CCU8_SRS_E0SR.h"
#include "../enums/CCU8_SRS_E1SR.h"
#include "../enums/CCU8_SRS_E2SR.h"
#include "../enums/CCU8_SRS_POSR.h"
#include "../enums/CCU8_STC_CSE.h"
#include "../enums/CCU8_STC_STM.h"
#include "../enums/CCU8_TCST_CDIR.h"
#include "../enums/CCU8_TCST_DTR1.h"
#include "../enums/CCU8_TCST_DTR2.h"
#include "../enums/CCU8_TCST_TRB.h"
#include "../enums/CCU8_TC_CAPC.h"
#include "../enums/CCU8_TC_CCS.h"
#include "../enums/CCU8_TC_CMOD.h"
#include "../enums/CCU8_TC_DIM.h"
#include "../enums/CCU8_TC_DITHE.h"
#include "../enums/CCU8_TC_ECM.h"
#include "../enums/CCU8_TC_EME.h"
#include "../enums/CCU8_TC_EMS.h"
#include "../enums/CCU8_TC_EMT.h"
#include "../enums/CCU8_TC_ENDM.h"
#include "../enums/CCU8_TC_FPE.h"
#include "../enums/CCU8_TC_MCME1.h"
#include "../enums/CCU8_TC_MCME2.h"
#include "../enums/CCU8_TC_SCE.h"
#include "../enums/CCU8_TC_STOS.h"
#include "../enums/CCU8_TC_STRM.h"
#include "../enums/CCU8_TC_TCM.h"
#include "../enums/CCU8_TC_TLS.h"
#include "../enums/CCU8_TC_TRAPE0.h"
#include "../enums/CCU8_TC_TRPSE.h"
#include "../enums/CCU8_TC_TRPSW.h"
#include "../enums/CCU8_TC_TSSM.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Capture Compare Unit 8 - Unit 0
 */
struct [[gnu::packed]] ccu8
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< ccu8's identifier. */
    static constexpr std::size_t size = 192; /*!< ccu8's size in bytes. */

    /* Fields. */
    uint32_t INS;             /*!< (read-write) Input Selector Configuration */
    uint32_t CMC;             /*!< (read-write) Connection Matrix Control */
    const uint32_t TCST = {}; /*!< (read-only) Slice Timer Status */
    uint32_t TCSET;           /*!< (write-only) Slice Timer Run Set */
    uint32_t TCCLR;           /*!< (write-only) Slice Timer Clear */
    uint32_t TC;              /*!< (read-write) Slice Timer Control */
    uint32_t PSL;             /*!< (read-write) Passive Level Config */
    const uint32_t DIT = {};  /*!< (read-only) Dither Config */
    uint32_t DITS;            /*!< (read-write) Dither Shadow Register */
    uint32_t PSC;             /*!< (read-write) Prescaler Control */
    uint32_t FPC;             /*!< (read-write) Floating Prescaler Control */
    uint32_t FPCS;            /*!< (read-write) Floating Prescaler Shadow */
    const uint32_t PR = {};   /*!< (read-only) Timer Period Value */
    uint32_t PRS;             /*!< (read-write) Timer Shadow Period Value */
    const uint32_t CR1 = {};  /*!< (read-only) Channel 1 Compare Value */
    uint32_t CR1S; /*!< (read-write) Channel 1 Compare Shadow Value */
    const uint32_t CR2 = {}; /*!< (read-only) Channel 2 Compare Value */
    uint32_t CR2S; /*!< (read-write) Channel 2 Compare Shadow Value */
    uint32_t CHC;  /*!< (read-write) Channel Control */
    uint32_t DTC;  /*!< (read-write) Dead Time Control */
    uint32_t DC1R; /*!< (read-write) Channel 1 Dead Time Values */
    uint32_t DC2R; /*!< (read-write) Channel 2 Dead Time Values */
    static constexpr std::size_t reserved_padding0_length = 6;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    uint32_t TIMER;          /*!< (read-write) Timer Value */
    const uint32_t C0V = {}; /*!< (read-only) Capture Register 0 */
    const uint32_t C1V = {}; /*!< (read-only) Capture Register 1 */
    const uint32_t C2V = {}; /*!< (read-only) Capture Register 2 */
    const uint32_t C3V = {}; /*!< (read-only) Capture Register 3 */
    static constexpr std::size_t reserved_padding1_length = 7;
    const uint32_t reserved_padding1[reserved_padding1_length] = {};
    const uint32_t INTS = {};  /*!< (read-only) Interrupt Status */
    uint32_t INTE;             /*!< (read-write) Interrupt Enable Control */
    uint32_t SRS;              /*!< (read-write) Service Request Selector */
    uint32_t SWS;              /*!< (write-only) Interrupt Status Set */
    uint32_t SWR;              /*!< (write-only) Interrupt Status Clear */
    uint32_t STC;              /*!< (read-write) Shadow transfer control */
    const uint32_t ECRD0 = {}; /*!< (read-only) Extended Read Back 0 */
    const uint32_t ECRD1 = {}; /*!< (read-only) Extended Read Back 1 */

    /* Methods. */

    /**
     * Get INS's LPF2M field.
     */
    CCU8_INS_LPF2M get_INS_LPF2M()
    {
        return CCU8_INS_LPF2M((INS >> 29u) & 0b11u);
    }

    /**
     * Set INS's LPF2M field.
     */
    inline void set_INS_LPF2M(CCU8_INS_LPF2M value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        INS = curr;
    }

    /**
     * Get INS's LPF1M field.
     */
    CCU8_INS_LPF1M get_INS_LPF1M()
    {
        return CCU8_INS_LPF1M((INS >> 27u) & 0b11u);
    }

    /**
     * Set INS's LPF1M field.
     */
    inline void set_INS_LPF1M(CCU8_INS_LPF1M value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        INS = curr;
    }

    /**
     * Get INS's LPF0M field.
     */
    CCU8_INS_LPF0M get_INS_LPF0M()
    {
        return CCU8_INS_LPF0M((INS >> 25u) & 0b11u);
    }

    /**
     * Set INS's LPF0M field.
     */
    inline void set_INS_LPF0M(CCU8_INS_LPF0M value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 25u);
        curr |= (std::to_underlying(value) & 0b11u) << 25u;

        INS = curr;
    }

    /**
     * Get INS's EV2LM bit.
     */
    CCU8_INS_EV2LM get_INS_EV2LM()
    {
        return CCU8_INS_EV2LM(INS & (1u << 24u));
    }

    /**
     * Set INS's EV2LM bit.
     */
    inline void set_INS_EV2LM()
    {
        INS |= 1u << 24u;
    }

    /**
     * Clear INS's EV2LM bit.
     */
    inline void clear_INS_EV2LM()
    {
        INS &= ~(1u << 24u);
    }

    /**
     * Toggle INS's EV2LM bit.
     */
    inline void toggle_INS_EV2LM()
    {
        INS ^= 1u << 24u;
    }

    /**
     * Get INS's EV1LM bit.
     */
    CCU8_INS_EV1LM get_INS_EV1LM()
    {
        return CCU8_INS_EV1LM(INS & (1u << 23u));
    }

    /**
     * Set INS's EV1LM bit.
     */
    inline void set_INS_EV1LM()
    {
        INS |= 1u << 23u;
    }

    /**
     * Clear INS's EV1LM bit.
     */
    inline void clear_INS_EV1LM()
    {
        INS &= ~(1u << 23u);
    }

    /**
     * Toggle INS's EV1LM bit.
     */
    inline void toggle_INS_EV1LM()
    {
        INS ^= 1u << 23u;
    }

    /**
     * Get INS's EV0LM bit.
     */
    CCU8_INS_EV0LM get_INS_EV0LM()
    {
        return CCU8_INS_EV0LM(INS & (1u << 22u));
    }

    /**
     * Set INS's EV0LM bit.
     */
    inline void set_INS_EV0LM()
    {
        INS |= 1u << 22u;
    }

    /**
     * Clear INS's EV0LM bit.
     */
    inline void clear_INS_EV0LM()
    {
        INS &= ~(1u << 22u);
    }

    /**
     * Toggle INS's EV0LM bit.
     */
    inline void toggle_INS_EV0LM()
    {
        INS ^= 1u << 22u;
    }

    /**
     * Get INS's EV2EM field.
     */
    CCU8_INS_EV2EM get_INS_EV2EM()
    {
        return CCU8_INS_EV2EM((INS >> 20u) & 0b11u);
    }

    /**
     * Set INS's EV2EM field.
     */
    inline void set_INS_EV2EM(CCU8_INS_EV2EM value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        INS = curr;
    }

    /**
     * Get INS's EV1EM field.
     */
    CCU8_INS_EV1EM get_INS_EV1EM()
    {
        return CCU8_INS_EV1EM((INS >> 18u) & 0b11u);
    }

    /**
     * Set INS's EV1EM field.
     */
    inline void set_INS_EV1EM(CCU8_INS_EV1EM value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        INS = curr;
    }

    /**
     * Get INS's EV0EM field.
     */
    CCU8_INS_EV0EM get_INS_EV0EM()
    {
        return CCU8_INS_EV0EM((INS >> 16u) & 0b11u);
    }

    /**
     * Set INS's EV0EM field.
     */
    inline void set_INS_EV0EM(CCU8_INS_EV0EM value)
    {
        uint32_t curr = INS;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        INS = curr;
    }

    /**
     * Get INS's EV2IS field.
     */
    CCU8_INS_EV2IS get_INS_EV2IS()
    {
        return CCU8_INS_EV2IS((INS >> 8u) & 0b1111u);
    }

    /**
     * Set INS's EV2IS field.
     */
    inline void set_INS_EV2IS(CCU8_INS_EV2IS value)
    {
        uint32_t curr = INS;

        curr &= ~(0b1111u << 8u);
        curr |= (std::to_underlying(value) & 0b1111u) << 8u;

        INS = curr;
    }

    /**
     * Get INS's EV1IS field.
     */
    CCU8_INS_EV1IS get_INS_EV1IS()
    {
        return CCU8_INS_EV1IS((INS >> 4u) & 0b1111u);
    }

    /**
     * Set INS's EV1IS field.
     */
    inline void set_INS_EV1IS(CCU8_INS_EV1IS value)
    {
        uint32_t curr = INS;

        curr &= ~(0b1111u << 4u);
        curr |= (std::to_underlying(value) & 0b1111u) << 4u;

        INS = curr;
    }

    /**
     * Get INS's EV0IS field.
     */
    CCU8_INS_EV0IS get_INS_EV0IS()
    {
        return CCU8_INS_EV0IS((INS >> 0u) & 0b1111u);
    }

    /**
     * Set INS's EV0IS field.
     */
    inline void set_INS_EV0IS(CCU8_INS_EV0IS value)
    {
        uint32_t curr = INS;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        INS = curr;
    }

    /**
     * Get CMC's TCE bit.
     */
    CCU8_CMC_TCE get_CMC_TCE()
    {
        return CCU8_CMC_TCE(CMC & (1u << 20u));
    }

    /**
     * Set CMC's TCE bit.
     */
    inline void set_CMC_TCE()
    {
        CMC |= 1u << 20u;
    }

    /**
     * Clear CMC's TCE bit.
     */
    inline void clear_CMC_TCE()
    {
        CMC &= ~(1u << 20u);
    }

    /**
     * Toggle CMC's TCE bit.
     */
    inline void toggle_CMC_TCE()
    {
        CMC ^= 1u << 20u;
    }

    /**
     * Get CMC's MOS field.
     */
    uint8_t get_CMC_MOS()
    {
        return (CMC >> 18u) & 0b11u;
    }

    /**
     * Set CMC's MOS field.
     */
    inline void set_CMC_MOS(uint8_t value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 18u);
        curr |= (value & 0b11u) << 18u;

        CMC = curr;
    }

    /**
     * Get CMC's TS bit.
     */
    CCU8_CMC_TS get_CMC_TS()
    {
        return CCU8_CMC_TS(CMC & (1u << 17u));
    }

    /**
     * Set CMC's TS bit.
     */
    inline void set_CMC_TS()
    {
        CMC |= 1u << 17u;
    }

    /**
     * Clear CMC's TS bit.
     */
    inline void clear_CMC_TS()
    {
        CMC &= ~(1u << 17u);
    }

    /**
     * Toggle CMC's TS bit.
     */
    inline void toggle_CMC_TS()
    {
        CMC ^= 1u << 17u;
    }

    /**
     * Get CMC's OFS bit.
     */
    CCU8_CMC_OFS get_CMC_OFS()
    {
        return CCU8_CMC_OFS(CMC & (1u << 16u));
    }

    /**
     * Set CMC's OFS bit.
     */
    inline void set_CMC_OFS()
    {
        CMC |= 1u << 16u;
    }

    /**
     * Clear CMC's OFS bit.
     */
    inline void clear_CMC_OFS()
    {
        CMC &= ~(1u << 16u);
    }

    /**
     * Toggle CMC's OFS bit.
     */
    inline void toggle_CMC_OFS()
    {
        CMC ^= 1u << 16u;
    }

    /**
     * Get CMC's CNTS field.
     */
    CCU8_CMC_CNTS get_CMC_CNTS()
    {
        return CCU8_CMC_CNTS((CMC >> 14u) & 0b11u);
    }

    /**
     * Set CMC's CNTS field.
     */
    inline void set_CMC_CNTS(CCU8_CMC_CNTS value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        CMC = curr;
    }

    /**
     * Get CMC's LDS field.
     */
    uint8_t get_CMC_LDS()
    {
        return (CMC >> 12u) & 0b11u;
    }

    /**
     * Set CMC's LDS field.
     */
    inline void set_CMC_LDS(uint8_t value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 12u);
        curr |= (value & 0b11u) << 12u;

        CMC = curr;
    }

    /**
     * Get CMC's UDS field.
     */
    CCU8_CMC_UDS get_CMC_UDS()
    {
        return CCU8_CMC_UDS((CMC >> 10u) & 0b11u);
    }

    /**
     * Set CMC's UDS field.
     */
    inline void set_CMC_UDS(CCU8_CMC_UDS value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        CMC = curr;
    }

    /**
     * Get CMC's GATES field.
     */
    CCU8_CMC_GATES get_CMC_GATES()
    {
        return CCU8_CMC_GATES((CMC >> 8u) & 0b11u);
    }

    /**
     * Set CMC's GATES field.
     */
    inline void set_CMC_GATES(CCU8_CMC_GATES value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        CMC = curr;
    }

    /**
     * Get CMC's CAP1S field.
     */
    CCU8_CMC_CAP1S get_CMC_CAP1S()
    {
        return CCU8_CMC_CAP1S((CMC >> 6u) & 0b11u);
    }

    /**
     * Set CMC's CAP1S field.
     */
    inline void set_CMC_CAP1S(CCU8_CMC_CAP1S value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CMC = curr;
    }

    /**
     * Get CMC's CAP0S field.
     */
    CCU8_CMC_CAP0S get_CMC_CAP0S()
    {
        return CCU8_CMC_CAP0S((CMC >> 4u) & 0b11u);
    }

    /**
     * Set CMC's CAP0S field.
     */
    inline void set_CMC_CAP0S(CCU8_CMC_CAP0S value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        CMC = curr;
    }

    /**
     * Get CMC's ENDS field.
     */
    CCU8_CMC_ENDS get_CMC_ENDS()
    {
        return CCU8_CMC_ENDS((CMC >> 2u) & 0b11u);
    }

    /**
     * Set CMC's ENDS field.
     */
    inline void set_CMC_ENDS(CCU8_CMC_ENDS value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        CMC = curr;
    }

    /**
     * Get CMC's STRTS field.
     */
    CCU8_CMC_STRTS get_CMC_STRTS()
    {
        return CCU8_CMC_STRTS((CMC >> 0u) & 0b11u);
    }

    /**
     * Set CMC's STRTS field.
     */
    inline void set_CMC_STRTS(CCU8_CMC_STRTS value)
    {
        uint32_t curr = CMC;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        CMC = curr;
    }

    /**
     * Get TCST's DTR2 bit.
     */
    CCU8_TCST_DTR2 get_TCST_DTR2()
    {
        return CCU8_TCST_DTR2(TCST & (1u << 4u));
    }

    /**
     * Get TCST's DTR1 bit.
     */
    CCU8_TCST_DTR1 get_TCST_DTR1()
    {
        return CCU8_TCST_DTR1(TCST & (1u << 3u));
    }

    /**
     * Get TCST's CDIR bit.
     */
    CCU8_TCST_CDIR get_TCST_CDIR()
    {
        return CCU8_TCST_CDIR(TCST & (1u << 1u));
    }

    /**
     * Get TCST's TRB bit.
     */
    CCU8_TCST_TRB get_TCST_TRB()
    {
        return CCU8_TCST_TRB(TCST & (1u << 0u));
    }

    /**
     * Set TCSET's TRBS bit.
     */
    inline void set_TCSET_TRBS()
    {
        TCSET |= 1u << 0u;
    }

    /**
     * Clear TCSET's TRBS bit.
     */
    inline void clear_TCSET_TRBS()
    {
        TCSET &= ~(1u << 0u);
    }

    /**
     * Toggle TCSET's TRBS bit.
     */
    inline void toggle_TCSET_TRBS()
    {
        TCSET ^= 1u << 0u;
    }

    /**
     * Set TCCLR's DTC2C bit.
     */
    inline void set_TCCLR_DTC2C()
    {
        TCCLR |= 1u << 4u;
    }

    /**
     * Clear TCCLR's DTC2C bit.
     */
    inline void clear_TCCLR_DTC2C()
    {
        TCCLR &= ~(1u << 4u);
    }

    /**
     * Toggle TCCLR's DTC2C bit.
     */
    inline void toggle_TCCLR_DTC2C()
    {
        TCCLR ^= 1u << 4u;
    }

    /**
     * Set TCCLR's DTC1C bit.
     */
    inline void set_TCCLR_DTC1C()
    {
        TCCLR |= 1u << 3u;
    }

    /**
     * Clear TCCLR's DTC1C bit.
     */
    inline void clear_TCCLR_DTC1C()
    {
        TCCLR &= ~(1u << 3u);
    }

    /**
     * Toggle TCCLR's DTC1C bit.
     */
    inline void toggle_TCCLR_DTC1C()
    {
        TCCLR ^= 1u << 3u;
    }

    /**
     * Set TCCLR's DITC bit.
     */
    inline void set_TCCLR_DITC()
    {
        TCCLR |= 1u << 2u;
    }

    /**
     * Clear TCCLR's DITC bit.
     */
    inline void clear_TCCLR_DITC()
    {
        TCCLR &= ~(1u << 2u);
    }

    /**
     * Toggle TCCLR's DITC bit.
     */
    inline void toggle_TCCLR_DITC()
    {
        TCCLR ^= 1u << 2u;
    }

    /**
     * Set TCCLR's TCC bit.
     */
    inline void set_TCCLR_TCC()
    {
        TCCLR |= 1u << 1u;
    }

    /**
     * Clear TCCLR's TCC bit.
     */
    inline void clear_TCCLR_TCC()
    {
        TCCLR &= ~(1u << 1u);
    }

    /**
     * Toggle TCCLR's TCC bit.
     */
    inline void toggle_TCCLR_TCC()
    {
        TCCLR ^= 1u << 1u;
    }

    /**
     * Set TCCLR's TRBC bit.
     */
    inline void set_TCCLR_TRBC()
    {
        TCCLR |= 1u << 0u;
    }

    /**
     * Clear TCCLR's TRBC bit.
     */
    inline void clear_TCCLR_TRBC()
    {
        TCCLR &= ~(1u << 0u);
    }

    /**
     * Toggle TCCLR's TRBC bit.
     */
    inline void toggle_TCCLR_TRBC()
    {
        TCCLR ^= 1u << 0u;
    }

    /**
     * Get TC's STOS field.
     */
    CCU8_TC_STOS get_TC_STOS()
    {
        return CCU8_TC_STOS((TC >> 29u) & 0b11u);
    }

    /**
     * Set TC's STOS field.
     */
    inline void set_TC_STOS(CCU8_TC_STOS value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        TC = curr;
    }

    /**
     * Get TC's EME field.
     */
    CCU8_TC_EME get_TC_EME()
    {
        return CCU8_TC_EME((TC >> 27u) & 0b11u);
    }

    /**
     * Set TC's EME field.
     */
    inline void set_TC_EME(CCU8_TC_EME value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        TC = curr;
    }

    /**
     * Get TC's MCME2 bit.
     */
    CCU8_TC_MCME2 get_TC_MCME2()
    {
        return CCU8_TC_MCME2(TC & (1u << 26u));
    }

    /**
     * Set TC's MCME2 bit.
     */
    inline void set_TC_MCME2()
    {
        TC |= 1u << 26u;
    }

    /**
     * Clear TC's MCME2 bit.
     */
    inline void clear_TC_MCME2()
    {
        TC &= ~(1u << 26u);
    }

    /**
     * Toggle TC's MCME2 bit.
     */
    inline void toggle_TC_MCME2()
    {
        TC ^= 1u << 26u;
    }

    /**
     * Get TC's MCME1 bit.
     */
    CCU8_TC_MCME1 get_TC_MCME1()
    {
        return CCU8_TC_MCME1(TC & (1u << 25u));
    }

    /**
     * Set TC's MCME1 bit.
     */
    inline void set_TC_MCME1()
    {
        TC |= 1u << 25u;
    }

    /**
     * Clear TC's MCME1 bit.
     */
    inline void clear_TC_MCME1()
    {
        TC &= ~(1u << 25u);
    }

    /**
     * Toggle TC's MCME1 bit.
     */
    inline void toggle_TC_MCME1()
    {
        TC ^= 1u << 25u;
    }

    /**
     * Get TC's EMT bit.
     */
    CCU8_TC_EMT get_TC_EMT()
    {
        return CCU8_TC_EMT(TC & (1u << 24u));
    }

    /**
     * Set TC's EMT bit.
     */
    inline void set_TC_EMT()
    {
        TC |= 1u << 24u;
    }

    /**
     * Clear TC's EMT bit.
     */
    inline void clear_TC_EMT()
    {
        TC &= ~(1u << 24u);
    }

    /**
     * Toggle TC's EMT bit.
     */
    inline void toggle_TC_EMT()
    {
        TC ^= 1u << 24u;
    }

    /**
     * Get TC's EMS bit.
     */
    CCU8_TC_EMS get_TC_EMS()
    {
        return CCU8_TC_EMS(TC & (1u << 23u));
    }

    /**
     * Set TC's EMS bit.
     */
    inline void set_TC_EMS()
    {
        TC |= 1u << 23u;
    }

    /**
     * Clear TC's EMS bit.
     */
    inline void clear_TC_EMS()
    {
        TC &= ~(1u << 23u);
    }

    /**
     * Toggle TC's EMS bit.
     */
    inline void toggle_TC_EMS()
    {
        TC ^= 1u << 23u;
    }

    /**
     * Get TC's TRPSW bit.
     */
    CCU8_TC_TRPSW get_TC_TRPSW()
    {
        return CCU8_TC_TRPSW(TC & (1u << 22u));
    }

    /**
     * Set TC's TRPSW bit.
     */
    inline void set_TC_TRPSW()
    {
        TC |= 1u << 22u;
    }

    /**
     * Clear TC's TRPSW bit.
     */
    inline void clear_TC_TRPSW()
    {
        TC &= ~(1u << 22u);
    }

    /**
     * Toggle TC's TRPSW bit.
     */
    inline void toggle_TC_TRPSW()
    {
        TC ^= 1u << 22u;
    }

    /**
     * Get TC's TRPSE bit.
     */
    CCU8_TC_TRPSE get_TC_TRPSE()
    {
        return CCU8_TC_TRPSE(TC & (1u << 21u));
    }

    /**
     * Set TC's TRPSE bit.
     */
    inline void set_TC_TRPSE()
    {
        TC |= 1u << 21u;
    }

    /**
     * Clear TC's TRPSE bit.
     */
    inline void clear_TC_TRPSE()
    {
        TC &= ~(1u << 21u);
    }

    /**
     * Toggle TC's TRPSE bit.
     */
    inline void toggle_TC_TRPSE()
    {
        TC ^= 1u << 21u;
    }

    /**
     * Get TC's TRAPE3 bit.
     */
    bool get_TC_TRAPE3()
    {
        return TC & (1u << 20u);
    }

    /**
     * Set TC's TRAPE3 bit.
     */
    inline void set_TC_TRAPE3()
    {
        TC |= 1u << 20u;
    }

    /**
     * Clear TC's TRAPE3 bit.
     */
    inline void clear_TC_TRAPE3()
    {
        TC &= ~(1u << 20u);
    }

    /**
     * Toggle TC's TRAPE3 bit.
     */
    inline void toggle_TC_TRAPE3()
    {
        TC ^= 1u << 20u;
    }

    /**
     * Get TC's TRAPE2 bit.
     */
    bool get_TC_TRAPE2()
    {
        return TC & (1u << 19u);
    }

    /**
     * Set TC's TRAPE2 bit.
     */
    inline void set_TC_TRAPE2()
    {
        TC |= 1u << 19u;
    }

    /**
     * Clear TC's TRAPE2 bit.
     */
    inline void clear_TC_TRAPE2()
    {
        TC &= ~(1u << 19u);
    }

    /**
     * Toggle TC's TRAPE2 bit.
     */
    inline void toggle_TC_TRAPE2()
    {
        TC ^= 1u << 19u;
    }

    /**
     * Get TC's TRAPE1 bit.
     */
    bool get_TC_TRAPE1()
    {
        return TC & (1u << 18u);
    }

    /**
     * Set TC's TRAPE1 bit.
     */
    inline void set_TC_TRAPE1()
    {
        TC |= 1u << 18u;
    }

    /**
     * Clear TC's TRAPE1 bit.
     */
    inline void clear_TC_TRAPE1()
    {
        TC &= ~(1u << 18u);
    }

    /**
     * Toggle TC's TRAPE1 bit.
     */
    inline void toggle_TC_TRAPE1()
    {
        TC ^= 1u << 18u;
    }

    /**
     * Get TC's TRAPE0 bit.
     */
    CCU8_TC_TRAPE0 get_TC_TRAPE0()
    {
        return CCU8_TC_TRAPE0(TC & (1u << 17u));
    }

    /**
     * Set TC's TRAPE0 bit.
     */
    inline void set_TC_TRAPE0()
    {
        TC |= 1u << 17u;
    }

    /**
     * Clear TC's TRAPE0 bit.
     */
    inline void clear_TC_TRAPE0()
    {
        TC &= ~(1u << 17u);
    }

    /**
     * Toggle TC's TRAPE0 bit.
     */
    inline void toggle_TC_TRAPE0()
    {
        TC ^= 1u << 17u;
    }

    /**
     * Get TC's FPE bit.
     */
    CCU8_TC_FPE get_TC_FPE()
    {
        return CCU8_TC_FPE(TC & (1u << 16u));
    }

    /**
     * Set TC's FPE bit.
     */
    inline void set_TC_FPE()
    {
        TC |= 1u << 16u;
    }

    /**
     * Clear TC's FPE bit.
     */
    inline void clear_TC_FPE()
    {
        TC &= ~(1u << 16u);
    }

    /**
     * Toggle TC's FPE bit.
     */
    inline void toggle_TC_FPE()
    {
        TC ^= 1u << 16u;
    }

    /**
     * Get TC's DIM bit.
     */
    CCU8_TC_DIM get_TC_DIM()
    {
        return CCU8_TC_DIM(TC & (1u << 15u));
    }

    /**
     * Set TC's DIM bit.
     */
    inline void set_TC_DIM()
    {
        TC |= 1u << 15u;
    }

    /**
     * Clear TC's DIM bit.
     */
    inline void clear_TC_DIM()
    {
        TC &= ~(1u << 15u);
    }

    /**
     * Toggle TC's DIM bit.
     */
    inline void toggle_TC_DIM()
    {
        TC ^= 1u << 15u;
    }

    /**
     * Get TC's DITHE field.
     */
    CCU8_TC_DITHE get_TC_DITHE()
    {
        return CCU8_TC_DITHE((TC >> 13u) & 0b11u);
    }

    /**
     * Set TC's DITHE field.
     */
    inline void set_TC_DITHE(CCU8_TC_DITHE value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 13u);
        curr |= (std::to_underlying(value) & 0b11u) << 13u;

        TC = curr;
    }

    /**
     * Get TC's CCS bit.
     */
    CCU8_TC_CCS get_TC_CCS()
    {
        return CCU8_TC_CCS(TC & (1u << 12u));
    }

    /**
     * Set TC's CCS bit.
     */
    inline void set_TC_CCS()
    {
        TC |= 1u << 12u;
    }

    /**
     * Clear TC's CCS bit.
     */
    inline void clear_TC_CCS()
    {
        TC &= ~(1u << 12u);
    }

    /**
     * Toggle TC's CCS bit.
     */
    inline void toggle_TC_CCS()
    {
        TC ^= 1u << 12u;
    }

    /**
     * Get TC's SCE bit.
     */
    CCU8_TC_SCE get_TC_SCE()
    {
        return CCU8_TC_SCE(TC & (1u << 11u));
    }

    /**
     * Set TC's SCE bit.
     */
    inline void set_TC_SCE()
    {
        TC |= 1u << 11u;
    }

    /**
     * Clear TC's SCE bit.
     */
    inline void clear_TC_SCE()
    {
        TC &= ~(1u << 11u);
    }

    /**
     * Toggle TC's SCE bit.
     */
    inline void toggle_TC_SCE()
    {
        TC ^= 1u << 11u;
    }

    /**
     * Get TC's STRM bit.
     */
    CCU8_TC_STRM get_TC_STRM()
    {
        return CCU8_TC_STRM(TC & (1u << 10u));
    }

    /**
     * Set TC's STRM bit.
     */
    inline void set_TC_STRM()
    {
        TC |= 1u << 10u;
    }

    /**
     * Clear TC's STRM bit.
     */
    inline void clear_TC_STRM()
    {
        TC &= ~(1u << 10u);
    }

    /**
     * Toggle TC's STRM bit.
     */
    inline void toggle_TC_STRM()
    {
        TC ^= 1u << 10u;
    }

    /**
     * Get TC's ENDM field.
     */
    CCU8_TC_ENDM get_TC_ENDM()
    {
        return CCU8_TC_ENDM((TC >> 8u) & 0b11u);
    }

    /**
     * Set TC's ENDM field.
     */
    inline void set_TC_ENDM(CCU8_TC_ENDM value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        TC = curr;
    }

    /**
     * Get TC's TLS bit.
     */
    CCU8_TC_TLS get_TC_TLS()
    {
        return CCU8_TC_TLS(TC & (1u << 7u));
    }

    /**
     * Set TC's TLS bit.
     */
    inline void set_TC_TLS()
    {
        TC |= 1u << 7u;
    }

    /**
     * Clear TC's TLS bit.
     */
    inline void clear_TC_TLS()
    {
        TC &= ~(1u << 7u);
    }

    /**
     * Toggle TC's TLS bit.
     */
    inline void toggle_TC_TLS()
    {
        TC ^= 1u << 7u;
    }

    /**
     * Get TC's CAPC field.
     */
    CCU8_TC_CAPC get_TC_CAPC()
    {
        return CCU8_TC_CAPC((TC >> 5u) & 0b11u);
    }

    /**
     * Set TC's CAPC field.
     */
    inline void set_TC_CAPC(CCU8_TC_CAPC value)
    {
        uint32_t curr = TC;

        curr &= ~(0b11u << 5u);
        curr |= (std::to_underlying(value) & 0b11u) << 5u;

        TC = curr;
    }

    /**
     * Get TC's ECM bit.
     */
    CCU8_TC_ECM get_TC_ECM()
    {
        return CCU8_TC_ECM(TC & (1u << 4u));
    }

    /**
     * Set TC's ECM bit.
     */
    inline void set_TC_ECM()
    {
        TC |= 1u << 4u;
    }

    /**
     * Clear TC's ECM bit.
     */
    inline void clear_TC_ECM()
    {
        TC &= ~(1u << 4u);
    }

    /**
     * Toggle TC's ECM bit.
     */
    inline void toggle_TC_ECM()
    {
        TC ^= 1u << 4u;
    }

    /**
     * Get TC's CMOD bit.
     */
    CCU8_TC_CMOD get_TC_CMOD()
    {
        return CCU8_TC_CMOD(TC & (1u << 3u));
    }

    /**
     * Get TC's CLST bit.
     */
    bool get_TC_CLST()
    {
        return TC & (1u << 2u);
    }

    /**
     * Set TC's CLST bit.
     */
    inline void set_TC_CLST()
    {
        TC |= 1u << 2u;
    }

    /**
     * Clear TC's CLST bit.
     */
    inline void clear_TC_CLST()
    {
        TC &= ~(1u << 2u);
    }

    /**
     * Toggle TC's CLST bit.
     */
    inline void toggle_TC_CLST()
    {
        TC ^= 1u << 2u;
    }

    /**
     * Get TC's TSSM bit.
     */
    CCU8_TC_TSSM get_TC_TSSM()
    {
        return CCU8_TC_TSSM(TC & (1u << 1u));
    }

    /**
     * Set TC's TSSM bit.
     */
    inline void set_TC_TSSM()
    {
        TC |= 1u << 1u;
    }

    /**
     * Clear TC's TSSM bit.
     */
    inline void clear_TC_TSSM()
    {
        TC &= ~(1u << 1u);
    }

    /**
     * Toggle TC's TSSM bit.
     */
    inline void toggle_TC_TSSM()
    {
        TC ^= 1u << 1u;
    }

    /**
     * Get TC's TCM bit.
     */
    CCU8_TC_TCM get_TC_TCM()
    {
        return CCU8_TC_TCM(TC & (1u << 0u));
    }

    /**
     * Set TC's TCM bit.
     */
    inline void set_TC_TCM()
    {
        TC |= 1u << 0u;
    }

    /**
     * Clear TC's TCM bit.
     */
    inline void clear_TC_TCM()
    {
        TC &= ~(1u << 0u);
    }

    /**
     * Toggle TC's TCM bit.
     */
    inline void toggle_TC_TCM()
    {
        TC ^= 1u << 0u;
    }

    /**
     * Get PSL's PSL22 bit.
     */
    CCU8_PSL_PSL22 get_PSL_PSL22()
    {
        return CCU8_PSL_PSL22(PSL & (1u << 3u));
    }

    /**
     * Set PSL's PSL22 bit.
     */
    inline void set_PSL_PSL22()
    {
        PSL |= 1u << 3u;
    }

    /**
     * Clear PSL's PSL22 bit.
     */
    inline void clear_PSL_PSL22()
    {
        PSL &= ~(1u << 3u);
    }

    /**
     * Toggle PSL's PSL22 bit.
     */
    inline void toggle_PSL_PSL22()
    {
        PSL ^= 1u << 3u;
    }

    /**
     * Get PSL's PSL21 bit.
     */
    CCU8_PSL_PSL21 get_PSL_PSL21()
    {
        return CCU8_PSL_PSL21(PSL & (1u << 2u));
    }

    /**
     * Set PSL's PSL21 bit.
     */
    inline void set_PSL_PSL21()
    {
        PSL |= 1u << 2u;
    }

    /**
     * Clear PSL's PSL21 bit.
     */
    inline void clear_PSL_PSL21()
    {
        PSL &= ~(1u << 2u);
    }

    /**
     * Toggle PSL's PSL21 bit.
     */
    inline void toggle_PSL_PSL21()
    {
        PSL ^= 1u << 2u;
    }

    /**
     * Get PSL's PSL12 bit.
     */
    CCU8_PSL_PSL12 get_PSL_PSL12()
    {
        return CCU8_PSL_PSL12(PSL & (1u << 1u));
    }

    /**
     * Set PSL's PSL12 bit.
     */
    inline void set_PSL_PSL12()
    {
        PSL |= 1u << 1u;
    }

    /**
     * Clear PSL's PSL12 bit.
     */
    inline void clear_PSL_PSL12()
    {
        PSL &= ~(1u << 1u);
    }

    /**
     * Toggle PSL's PSL12 bit.
     */
    inline void toggle_PSL_PSL12()
    {
        PSL ^= 1u << 1u;
    }

    /**
     * Get PSL's PSL11 bit.
     */
    CCU8_PSL_PSL11 get_PSL_PSL11()
    {
        return CCU8_PSL_PSL11(PSL & (1u << 0u));
    }

    /**
     * Set PSL's PSL11 bit.
     */
    inline void set_PSL_PSL11()
    {
        PSL |= 1u << 0u;
    }

    /**
     * Clear PSL's PSL11 bit.
     */
    inline void clear_PSL_PSL11()
    {
        PSL &= ~(1u << 0u);
    }

    /**
     * Toggle PSL's PSL11 bit.
     */
    inline void toggle_PSL_PSL11()
    {
        PSL ^= 1u << 0u;
    }

    /**
     * Get DIT's DCNT field.
     */
    uint8_t get_DIT_DCNT()
    {
        return (DIT >> 8u) & 0b1111u;
    }

    /**
     * Get DIT's DCV field.
     */
    uint8_t get_DIT_DCV()
    {
        return (DIT >> 0u) & 0b1111u;
    }

    /**
     * Get DITS's DCVS field.
     */
    uint8_t get_DITS_DCVS()
    {
        return (DITS >> 0u) & 0b1111u;
    }

    /**
     * Set DITS's DCVS field.
     */
    inline void set_DITS_DCVS(uint8_t value)
    {
        uint32_t curr = DITS;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        DITS = curr;
    }

    /**
     * Get PSC's PSIV field.
     */
    uint8_t get_PSC_PSIV()
    {
        return (PSC >> 0u) & 0b1111u;
    }

    /**
     * Set PSC's PSIV field.
     */
    inline void set_PSC_PSIV(uint8_t value)
    {
        uint32_t curr = PSC;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        PSC = curr;
    }

    /**
     * Get FPC's PVAL field.
     */
    uint8_t get_FPC_PVAL()
    {
        return (FPC >> 8u) & 0b1111u;
    }

    /**
     * Set FPC's PVAL field.
     */
    inline void set_FPC_PVAL(uint8_t value)
    {
        uint32_t curr = FPC;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        FPC = curr;
    }

    /**
     * Get FPC's PCMP field.
     */
    uint8_t get_FPC_PCMP()
    {
        return (FPC >> 0u) & 0b1111u;
    }

    /**
     * Get FPCS's PCMP field.
     */
    uint8_t get_FPCS_PCMP()
    {
        return (FPCS >> 0u) & 0b1111u;
    }

    /**
     * Set FPCS's PCMP field.
     */
    inline void set_FPCS_PCMP(uint8_t value)
    {
        uint32_t curr = FPCS;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        FPCS = curr;
    }

    /**
     * Get PR's PR field.
     */
    uint16_t get_PR_PR()
    {
        return (PR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get PRS's PRS field.
     */
    uint16_t get_PRS_PRS()
    {
        return (PRS >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set PRS's PRS field.
     */
    inline void set_PRS_PRS(uint16_t value)
    {
        uint32_t curr = PRS;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        PRS = curr;
    }

    /**
     * Get CR1's CR1 field.
     */
    uint16_t get_CR1_CR1()
    {
        return (CR1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get CR1S's CR1S field.
     */
    uint16_t get_CR1S_CR1S()
    {
        return (CR1S >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CR1S's CR1S field.
     */
    inline void set_CR1S_CR1S(uint16_t value)
    {
        uint32_t curr = CR1S;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CR1S = curr;
    }

    /**
     * Get CR2's CR2 field.
     */
    uint16_t get_CR2_CR2()
    {
        return (CR2 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get CR2S's CR2S field.
     */
    uint16_t get_CR2S_CR2S()
    {
        return (CR2S >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CR2S's CR2S field.
     */
    inline void set_CR2S_CR2S(uint16_t value)
    {
        uint32_t curr = CR2S;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CR2S = curr;
    }

    /**
     * Get CHC's OCS4 bit.
     */
    CCU8_CHC_OCS4 get_CHC_OCS4()
    {
        return CCU8_CHC_OCS4(CHC & (1u << 4u));
    }

    /**
     * Set CHC's OCS4 bit.
     */
    inline void set_CHC_OCS4()
    {
        CHC |= 1u << 4u;
    }

    /**
     * Clear CHC's OCS4 bit.
     */
    inline void clear_CHC_OCS4()
    {
        CHC &= ~(1u << 4u);
    }

    /**
     * Toggle CHC's OCS4 bit.
     */
    inline void toggle_CHC_OCS4()
    {
        CHC ^= 1u << 4u;
    }

    /**
     * Get CHC's OCS3 bit.
     */
    CCU8_CHC_OCS3 get_CHC_OCS3()
    {
        return CCU8_CHC_OCS3(CHC & (1u << 3u));
    }

    /**
     * Set CHC's OCS3 bit.
     */
    inline void set_CHC_OCS3()
    {
        CHC |= 1u << 3u;
    }

    /**
     * Clear CHC's OCS3 bit.
     */
    inline void clear_CHC_OCS3()
    {
        CHC &= ~(1u << 3u);
    }

    /**
     * Toggle CHC's OCS3 bit.
     */
    inline void toggle_CHC_OCS3()
    {
        CHC ^= 1u << 3u;
    }

    /**
     * Get CHC's OCS2 bit.
     */
    CCU8_CHC_OCS2 get_CHC_OCS2()
    {
        return CCU8_CHC_OCS2(CHC & (1u << 2u));
    }

    /**
     * Set CHC's OCS2 bit.
     */
    inline void set_CHC_OCS2()
    {
        CHC |= 1u << 2u;
    }

    /**
     * Clear CHC's OCS2 bit.
     */
    inline void clear_CHC_OCS2()
    {
        CHC &= ~(1u << 2u);
    }

    /**
     * Toggle CHC's OCS2 bit.
     */
    inline void toggle_CHC_OCS2()
    {
        CHC ^= 1u << 2u;
    }

    /**
     * Get CHC's OCS1 bit.
     */
    CCU8_CHC_OCS1 get_CHC_OCS1()
    {
        return CCU8_CHC_OCS1(CHC & (1u << 1u));
    }

    /**
     * Set CHC's OCS1 bit.
     */
    inline void set_CHC_OCS1()
    {
        CHC |= 1u << 1u;
    }

    /**
     * Clear CHC's OCS1 bit.
     */
    inline void clear_CHC_OCS1()
    {
        CHC &= ~(1u << 1u);
    }

    /**
     * Toggle CHC's OCS1 bit.
     */
    inline void toggle_CHC_OCS1()
    {
        CHC ^= 1u << 1u;
    }

    /**
     * Get CHC's ASE bit.
     */
    CCU8_CHC_ASE get_CHC_ASE()
    {
        return CCU8_CHC_ASE(CHC & (1u << 0u));
    }

    /**
     * Set CHC's ASE bit.
     */
    inline void set_CHC_ASE()
    {
        CHC |= 1u << 0u;
    }

    /**
     * Clear CHC's ASE bit.
     */
    inline void clear_CHC_ASE()
    {
        CHC &= ~(1u << 0u);
    }

    /**
     * Toggle CHC's ASE bit.
     */
    inline void toggle_CHC_ASE()
    {
        CHC ^= 1u << 0u;
    }

    /**
     * Get DTC's DTCC field.
     */
    CCU8_DTC_DTCC get_DTC_DTCC()
    {
        return CCU8_DTC_DTCC((DTC >> 6u) & 0b11u);
    }

    /**
     * Set DTC's DTCC field.
     */
    inline void set_DTC_DTCC(CCU8_DTC_DTCC value)
    {
        uint32_t curr = DTC;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        DTC = curr;
    }

    /**
     * Get DTC's DCEN4 bit.
     */
    CCU8_DTC_DCEN4 get_DTC_DCEN4()
    {
        return CCU8_DTC_DCEN4(DTC & (1u << 5u));
    }

    /**
     * Set DTC's DCEN4 bit.
     */
    inline void set_DTC_DCEN4()
    {
        DTC |= 1u << 5u;
    }

    /**
     * Clear DTC's DCEN4 bit.
     */
    inline void clear_DTC_DCEN4()
    {
        DTC &= ~(1u << 5u);
    }

    /**
     * Toggle DTC's DCEN4 bit.
     */
    inline void toggle_DTC_DCEN4()
    {
        DTC ^= 1u << 5u;
    }

    /**
     * Get DTC's DCEN3 bit.
     */
    CCU8_DTC_DCEN3 get_DTC_DCEN3()
    {
        return CCU8_DTC_DCEN3(DTC & (1u << 4u));
    }

    /**
     * Set DTC's DCEN3 bit.
     */
    inline void set_DTC_DCEN3()
    {
        DTC |= 1u << 4u;
    }

    /**
     * Clear DTC's DCEN3 bit.
     */
    inline void clear_DTC_DCEN3()
    {
        DTC &= ~(1u << 4u);
    }

    /**
     * Toggle DTC's DCEN3 bit.
     */
    inline void toggle_DTC_DCEN3()
    {
        DTC ^= 1u << 4u;
    }

    /**
     * Get DTC's DCEN2 bit.
     */
    CCU8_DTC_DCEN2 get_DTC_DCEN2()
    {
        return CCU8_DTC_DCEN2(DTC & (1u << 3u));
    }

    /**
     * Set DTC's DCEN2 bit.
     */
    inline void set_DTC_DCEN2()
    {
        DTC |= 1u << 3u;
    }

    /**
     * Clear DTC's DCEN2 bit.
     */
    inline void clear_DTC_DCEN2()
    {
        DTC &= ~(1u << 3u);
    }

    /**
     * Toggle DTC's DCEN2 bit.
     */
    inline void toggle_DTC_DCEN2()
    {
        DTC ^= 1u << 3u;
    }

    /**
     * Get DTC's DCEN1 bit.
     */
    CCU8_DTC_DCEN1 get_DTC_DCEN1()
    {
        return CCU8_DTC_DCEN1(DTC & (1u << 2u));
    }

    /**
     * Set DTC's DCEN1 bit.
     */
    inline void set_DTC_DCEN1()
    {
        DTC |= 1u << 2u;
    }

    /**
     * Clear DTC's DCEN1 bit.
     */
    inline void clear_DTC_DCEN1()
    {
        DTC &= ~(1u << 2u);
    }

    /**
     * Toggle DTC's DCEN1 bit.
     */
    inline void toggle_DTC_DCEN1()
    {
        DTC ^= 1u << 2u;
    }

    /**
     * Get DTC's DTE2 bit.
     */
    CCU8_DTC_DTE2 get_DTC_DTE2()
    {
        return CCU8_DTC_DTE2(DTC & (1u << 1u));
    }

    /**
     * Set DTC's DTE2 bit.
     */
    inline void set_DTC_DTE2()
    {
        DTC |= 1u << 1u;
    }

    /**
     * Clear DTC's DTE2 bit.
     */
    inline void clear_DTC_DTE2()
    {
        DTC &= ~(1u << 1u);
    }

    /**
     * Toggle DTC's DTE2 bit.
     */
    inline void toggle_DTC_DTE2()
    {
        DTC ^= 1u << 1u;
    }

    /**
     * Get DTC's DTE1 bit.
     */
    CCU8_DTC_DTE1 get_DTC_DTE1()
    {
        return CCU8_DTC_DTE1(DTC & (1u << 0u));
    }

    /**
     * Set DTC's DTE1 bit.
     */
    inline void set_DTC_DTE1()
    {
        DTC |= 1u << 0u;
    }

    /**
     * Clear DTC's DTE1 bit.
     */
    inline void clear_DTC_DTE1()
    {
        DTC &= ~(1u << 0u);
    }

    /**
     * Toggle DTC's DTE1 bit.
     */
    inline void toggle_DTC_DTE1()
    {
        DTC ^= 1u << 0u;
    }

    /**
     * Get DC1R's DT1F field.
     */
    uint8_t get_DC1R_DT1F()
    {
        return (DC1R >> 8u) & 0b11111111u;
    }

    /**
     * Set DC1R's DT1F field.
     */
    inline void set_DC1R_DT1F(uint8_t value)
    {
        uint32_t curr = DC1R;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        DC1R = curr;
    }

    /**
     * Get DC1R's DT1R field.
     */
    uint8_t get_DC1R_DT1R()
    {
        return (DC1R >> 0u) & 0b11111111u;
    }

    /**
     * Set DC1R's DT1R field.
     */
    inline void set_DC1R_DT1R(uint8_t value)
    {
        uint32_t curr = DC1R;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        DC1R = curr;
    }

    /**
     * Get DC2R's DT2F field.
     */
    uint8_t get_DC2R_DT2F()
    {
        return (DC2R >> 8u) & 0b11111111u;
    }

    /**
     * Set DC2R's DT2F field.
     */
    inline void set_DC2R_DT2F(uint8_t value)
    {
        uint32_t curr = DC2R;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        DC2R = curr;
    }

    /**
     * Get DC2R's DT2R field.
     */
    uint8_t get_DC2R_DT2R()
    {
        return (DC2R >> 0u) & 0b11111111u;
    }

    /**
     * Set DC2R's DT2R field.
     */
    inline void set_DC2R_DT2R(uint8_t value)
    {
        uint32_t curr = DC2R;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        DC2R = curr;
    }

    /**
     * Get TIMER's TVAL field.
     */
    uint16_t get_TIMER_TVAL()
    {
        return (TIMER >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TIMER's TVAL field.
     */
    inline void set_TIMER_TVAL(uint16_t value)
    {
        uint32_t curr = TIMER;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TIMER = curr;
    }

    /**
     * Get C0V's FFL bit.
     */
    CCU8_C0V_FFL get_C0V_FFL()
    {
        return CCU8_C0V_FFL(C0V & (1u << 20u));
    }

    /**
     * Get C0V's FPCV field.
     */
    uint8_t get_C0V_FPCV()
    {
        return (C0V >> 16u) & 0b1111u;
    }

    /**
     * Get C0V's CAPTV field.
     */
    uint16_t get_C0V_CAPTV()
    {
        return (C0V >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get C1V's FFL bit.
     */
    CCU8_C1V_FFL get_C1V_FFL()
    {
        return CCU8_C1V_FFL(C1V & (1u << 20u));
    }

    /**
     * Get C1V's FPCV field.
     */
    uint8_t get_C1V_FPCV()
    {
        return (C1V >> 16u) & 0b1111u;
    }

    /**
     * Get C1V's CAPTV field.
     */
    uint16_t get_C1V_CAPTV()
    {
        return (C1V >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get C2V's FFL bit.
     */
    CCU8_C2V_FFL get_C2V_FFL()
    {
        return CCU8_C2V_FFL(C2V & (1u << 20u));
    }

    /**
     * Get C2V's FPCV field.
     */
    uint8_t get_C2V_FPCV()
    {
        return (C2V >> 16u) & 0b1111u;
    }

    /**
     * Get C2V's CAPTV field.
     */
    uint16_t get_C2V_CAPTV()
    {
        return (C2V >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get C3V's FFL bit.
     */
    CCU8_C3V_FFL get_C3V_FFL()
    {
        return CCU8_C3V_FFL(C3V & (1u << 20u));
    }

    /**
     * Get C3V's FPCV field.
     */
    uint8_t get_C3V_FPCV()
    {
        return (C3V >> 16u) & 0b1111u;
    }

    /**
     * Get C3V's CAPTV field.
     */
    uint16_t get_C3V_CAPTV()
    {
        return (C3V >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get INTS's TRPF bit.
     */
    bool get_INTS_TRPF()
    {
        return INTS & (1u << 11u);
    }

    /**
     * Get INTS's E2AS bit.
     */
    CCU8_INTS_E2AS get_INTS_E2AS()
    {
        return CCU8_INTS_E2AS(INTS & (1u << 10u));
    }

    /**
     * Get INTS's E1AS bit.
     */
    CCU8_INTS_E1AS get_INTS_E1AS()
    {
        return CCU8_INTS_E1AS(INTS & (1u << 9u));
    }

    /**
     * Get INTS's E0AS bit.
     */
    CCU8_INTS_E0AS get_INTS_E0AS()
    {
        return CCU8_INTS_E0AS(INTS & (1u << 8u));
    }

    /**
     * Get INTS's CMD2S bit.
     */
    CCU8_INTS_CMD2S get_INTS_CMD2S()
    {
        return CCU8_INTS_CMD2S(INTS & (1u << 5u));
    }

    /**
     * Get INTS's CMU2S bit.
     */
    CCU8_INTS_CMU2S get_INTS_CMU2S()
    {
        return CCU8_INTS_CMU2S(INTS & (1u << 4u));
    }

    /**
     * Get INTS's CMD1S bit.
     */
    CCU8_INTS_CMD1S get_INTS_CMD1S()
    {
        return CCU8_INTS_CMD1S(INTS & (1u << 3u));
    }

    /**
     * Get INTS's CMU1S bit.
     */
    CCU8_INTS_CMU1S get_INTS_CMU1S()
    {
        return CCU8_INTS_CMU1S(INTS & (1u << 2u));
    }

    /**
     * Get INTS's OMDS bit.
     */
    CCU8_INTS_OMDS get_INTS_OMDS()
    {
        return CCU8_INTS_OMDS(INTS & (1u << 1u));
    }

    /**
     * Get INTS's PMUS bit.
     */
    CCU8_INTS_PMUS get_INTS_PMUS()
    {
        return CCU8_INTS_PMUS(INTS & (1u << 0u));
    }

    /**
     * Get INTE's E2AE bit.
     */
    CCU8_INTE_E2AE get_INTE_E2AE()
    {
        return CCU8_INTE_E2AE(INTE & (1u << 10u));
    }

    /**
     * Set INTE's E2AE bit.
     */
    inline void set_INTE_E2AE()
    {
        INTE |= 1u << 10u;
    }

    /**
     * Clear INTE's E2AE bit.
     */
    inline void clear_INTE_E2AE()
    {
        INTE &= ~(1u << 10u);
    }

    /**
     * Toggle INTE's E2AE bit.
     */
    inline void toggle_INTE_E2AE()
    {
        INTE ^= 1u << 10u;
    }

    /**
     * Get INTE's E1AE bit.
     */
    CCU8_INTE_E1AE get_INTE_E1AE()
    {
        return CCU8_INTE_E1AE(INTE & (1u << 9u));
    }

    /**
     * Set INTE's E1AE bit.
     */
    inline void set_INTE_E1AE()
    {
        INTE |= 1u << 9u;
    }

    /**
     * Clear INTE's E1AE bit.
     */
    inline void clear_INTE_E1AE()
    {
        INTE &= ~(1u << 9u);
    }

    /**
     * Toggle INTE's E1AE bit.
     */
    inline void toggle_INTE_E1AE()
    {
        INTE ^= 1u << 9u;
    }

    /**
     * Get INTE's E0AE bit.
     */
    CCU8_INTE_E0AE get_INTE_E0AE()
    {
        return CCU8_INTE_E0AE(INTE & (1u << 8u));
    }

    /**
     * Set INTE's E0AE bit.
     */
    inline void set_INTE_E0AE()
    {
        INTE |= 1u << 8u;
    }

    /**
     * Clear INTE's E0AE bit.
     */
    inline void clear_INTE_E0AE()
    {
        INTE &= ~(1u << 8u);
    }

    /**
     * Toggle INTE's E0AE bit.
     */
    inline void toggle_INTE_E0AE()
    {
        INTE ^= 1u << 8u;
    }

    /**
     * Get INTE's CMD2E bit.
     */
    CCU8_INTE_CMD2E get_INTE_CMD2E()
    {
        return CCU8_INTE_CMD2E(INTE & (1u << 5u));
    }

    /**
     * Set INTE's CMD2E bit.
     */
    inline void set_INTE_CMD2E()
    {
        INTE |= 1u << 5u;
    }

    /**
     * Clear INTE's CMD2E bit.
     */
    inline void clear_INTE_CMD2E()
    {
        INTE &= ~(1u << 5u);
    }

    /**
     * Toggle INTE's CMD2E bit.
     */
    inline void toggle_INTE_CMD2E()
    {
        INTE ^= 1u << 5u;
    }

    /**
     * Get INTE's CMU2E bit.
     */
    CCU8_INTE_CMU2E get_INTE_CMU2E()
    {
        return CCU8_INTE_CMU2E(INTE & (1u << 4u));
    }

    /**
     * Set INTE's CMU2E bit.
     */
    inline void set_INTE_CMU2E()
    {
        INTE |= 1u << 4u;
    }

    /**
     * Clear INTE's CMU2E bit.
     */
    inline void clear_INTE_CMU2E()
    {
        INTE &= ~(1u << 4u);
    }

    /**
     * Toggle INTE's CMU2E bit.
     */
    inline void toggle_INTE_CMU2E()
    {
        INTE ^= 1u << 4u;
    }

    /**
     * Get INTE's CMD1E bit.
     */
    CCU8_INTE_CMD1E get_INTE_CMD1E()
    {
        return CCU8_INTE_CMD1E(INTE & (1u << 3u));
    }

    /**
     * Set INTE's CMD1E bit.
     */
    inline void set_INTE_CMD1E()
    {
        INTE |= 1u << 3u;
    }

    /**
     * Clear INTE's CMD1E bit.
     */
    inline void clear_INTE_CMD1E()
    {
        INTE &= ~(1u << 3u);
    }

    /**
     * Toggle INTE's CMD1E bit.
     */
    inline void toggle_INTE_CMD1E()
    {
        INTE ^= 1u << 3u;
    }

    /**
     * Get INTE's CMU1E bit.
     */
    CCU8_INTE_CMU1E get_INTE_CMU1E()
    {
        return CCU8_INTE_CMU1E(INTE & (1u << 2u));
    }

    /**
     * Set INTE's CMU1E bit.
     */
    inline void set_INTE_CMU1E()
    {
        INTE |= 1u << 2u;
    }

    /**
     * Clear INTE's CMU1E bit.
     */
    inline void clear_INTE_CMU1E()
    {
        INTE &= ~(1u << 2u);
    }

    /**
     * Toggle INTE's CMU1E bit.
     */
    inline void toggle_INTE_CMU1E()
    {
        INTE ^= 1u << 2u;
    }

    /**
     * Get INTE's OME bit.
     */
    CCU8_INTE_OME get_INTE_OME()
    {
        return CCU8_INTE_OME(INTE & (1u << 1u));
    }

    /**
     * Set INTE's OME bit.
     */
    inline void set_INTE_OME()
    {
        INTE |= 1u << 1u;
    }

    /**
     * Clear INTE's OME bit.
     */
    inline void clear_INTE_OME()
    {
        INTE &= ~(1u << 1u);
    }

    /**
     * Toggle INTE's OME bit.
     */
    inline void toggle_INTE_OME()
    {
        INTE ^= 1u << 1u;
    }

    /**
     * Get INTE's PME bit.
     */
    CCU8_INTE_PME get_INTE_PME()
    {
        return CCU8_INTE_PME(INTE & (1u << 0u));
    }

    /**
     * Set INTE's PME bit.
     */
    inline void set_INTE_PME()
    {
        INTE |= 1u << 0u;
    }

    /**
     * Clear INTE's PME bit.
     */
    inline void clear_INTE_PME()
    {
        INTE &= ~(1u << 0u);
    }

    /**
     * Toggle INTE's PME bit.
     */
    inline void toggle_INTE_PME()
    {
        INTE ^= 1u << 0u;
    }

    /**
     * Get SRS's E2SR field.
     */
    CCU8_SRS_E2SR get_SRS_E2SR()
    {
        return CCU8_SRS_E2SR((SRS >> 12u) & 0b11u);
    }

    /**
     * Set SRS's E2SR field.
     */
    inline void set_SRS_E2SR(CCU8_SRS_E2SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        SRS = curr;
    }

    /**
     * Get SRS's E1SR field.
     */
    CCU8_SRS_E1SR get_SRS_E1SR()
    {
        return CCU8_SRS_E1SR((SRS >> 10u) & 0b11u);
    }

    /**
     * Set SRS's E1SR field.
     */
    inline void set_SRS_E1SR(CCU8_SRS_E1SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        SRS = curr;
    }

    /**
     * Get SRS's E0SR field.
     */
    CCU8_SRS_E0SR get_SRS_E0SR()
    {
        return CCU8_SRS_E0SR((SRS >> 8u) & 0b11u);
    }

    /**
     * Set SRS's E0SR field.
     */
    inline void set_SRS_E0SR(CCU8_SRS_E0SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        SRS = curr;
    }

    /**
     * Get SRS's CM2SR field.
     */
    CCU8_SRS_CM2SR get_SRS_CM2SR()
    {
        return CCU8_SRS_CM2SR((SRS >> 4u) & 0b11u);
    }

    /**
     * Set SRS's CM2SR field.
     */
    inline void set_SRS_CM2SR(CCU8_SRS_CM2SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        SRS = curr;
    }

    /**
     * Get SRS's CM1SR field.
     */
    CCU8_SRS_CM1SR get_SRS_CM1SR()
    {
        return CCU8_SRS_CM1SR((SRS >> 2u) & 0b11u);
    }

    /**
     * Set SRS's CM1SR field.
     */
    inline void set_SRS_CM1SR(CCU8_SRS_CM1SR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        SRS = curr;
    }

    /**
     * Get SRS's POSR field.
     */
    CCU8_SRS_POSR get_SRS_POSR()
    {
        return CCU8_SRS_POSR((SRS >> 0u) & 0b11u);
    }

    /**
     * Set SRS's POSR field.
     */
    inline void set_SRS_POSR(CCU8_SRS_POSR value)
    {
        uint32_t curr = SRS;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        SRS = curr;
    }

    /**
     * Set SWS's STRPF bit.
     */
    inline void set_SWS_STRPF()
    {
        SWS |= 1u << 11u;
    }

    /**
     * Clear SWS's STRPF bit.
     */
    inline void clear_SWS_STRPF()
    {
        SWS &= ~(1u << 11u);
    }

    /**
     * Toggle SWS's STRPF bit.
     */
    inline void toggle_SWS_STRPF()
    {
        SWS ^= 1u << 11u;
    }

    /**
     * Set SWS's SE2A bit.
     */
    inline void set_SWS_SE2A()
    {
        SWS |= 1u << 10u;
    }

    /**
     * Clear SWS's SE2A bit.
     */
    inline void clear_SWS_SE2A()
    {
        SWS &= ~(1u << 10u);
    }

    /**
     * Toggle SWS's SE2A bit.
     */
    inline void toggle_SWS_SE2A()
    {
        SWS ^= 1u << 10u;
    }

    /**
     * Set SWS's SE1A bit.
     */
    inline void set_SWS_SE1A()
    {
        SWS |= 1u << 9u;
    }

    /**
     * Clear SWS's SE1A bit.
     */
    inline void clear_SWS_SE1A()
    {
        SWS &= ~(1u << 9u);
    }

    /**
     * Toggle SWS's SE1A bit.
     */
    inline void toggle_SWS_SE1A()
    {
        SWS ^= 1u << 9u;
    }

    /**
     * Set SWS's SE0A bit.
     */
    inline void set_SWS_SE0A()
    {
        SWS |= 1u << 8u;
    }

    /**
     * Clear SWS's SE0A bit.
     */
    inline void clear_SWS_SE0A()
    {
        SWS &= ~(1u << 8u);
    }

    /**
     * Toggle SWS's SE0A bit.
     */
    inline void toggle_SWS_SE0A()
    {
        SWS ^= 1u << 8u;
    }

    /**
     * Set SWS's SCM2D bit.
     */
    inline void set_SWS_SCM2D()
    {
        SWS |= 1u << 5u;
    }

    /**
     * Clear SWS's SCM2D bit.
     */
    inline void clear_SWS_SCM2D()
    {
        SWS &= ~(1u << 5u);
    }

    /**
     * Toggle SWS's SCM2D bit.
     */
    inline void toggle_SWS_SCM2D()
    {
        SWS ^= 1u << 5u;
    }

    /**
     * Set SWS's SCM2U bit.
     */
    inline void set_SWS_SCM2U()
    {
        SWS |= 1u << 4u;
    }

    /**
     * Clear SWS's SCM2U bit.
     */
    inline void clear_SWS_SCM2U()
    {
        SWS &= ~(1u << 4u);
    }

    /**
     * Toggle SWS's SCM2U bit.
     */
    inline void toggle_SWS_SCM2U()
    {
        SWS ^= 1u << 4u;
    }

    /**
     * Set SWS's SCM1D bit.
     */
    inline void set_SWS_SCM1D()
    {
        SWS |= 1u << 3u;
    }

    /**
     * Clear SWS's SCM1D bit.
     */
    inline void clear_SWS_SCM1D()
    {
        SWS &= ~(1u << 3u);
    }

    /**
     * Toggle SWS's SCM1D bit.
     */
    inline void toggle_SWS_SCM1D()
    {
        SWS ^= 1u << 3u;
    }

    /**
     * Set SWS's SCM1U bit.
     */
    inline void set_SWS_SCM1U()
    {
        SWS |= 1u << 2u;
    }

    /**
     * Clear SWS's SCM1U bit.
     */
    inline void clear_SWS_SCM1U()
    {
        SWS &= ~(1u << 2u);
    }

    /**
     * Toggle SWS's SCM1U bit.
     */
    inline void toggle_SWS_SCM1U()
    {
        SWS ^= 1u << 2u;
    }

    /**
     * Set SWS's SOM bit.
     */
    inline void set_SWS_SOM()
    {
        SWS |= 1u << 1u;
    }

    /**
     * Clear SWS's SOM bit.
     */
    inline void clear_SWS_SOM()
    {
        SWS &= ~(1u << 1u);
    }

    /**
     * Toggle SWS's SOM bit.
     */
    inline void toggle_SWS_SOM()
    {
        SWS ^= 1u << 1u;
    }

    /**
     * Set SWS's SPM bit.
     */
    inline void set_SWS_SPM()
    {
        SWS |= 1u << 0u;
    }

    /**
     * Clear SWS's SPM bit.
     */
    inline void clear_SWS_SPM()
    {
        SWS &= ~(1u << 0u);
    }

    /**
     * Toggle SWS's SPM bit.
     */
    inline void toggle_SWS_SPM()
    {
        SWS ^= 1u << 0u;
    }

    /**
     * Set SWR's RTRPF bit.
     */
    inline void set_SWR_RTRPF()
    {
        SWR |= 1u << 11u;
    }

    /**
     * Clear SWR's RTRPF bit.
     */
    inline void clear_SWR_RTRPF()
    {
        SWR &= ~(1u << 11u);
    }

    /**
     * Toggle SWR's RTRPF bit.
     */
    inline void toggle_SWR_RTRPF()
    {
        SWR ^= 1u << 11u;
    }

    /**
     * Set SWR's RE2A bit.
     */
    inline void set_SWR_RE2A()
    {
        SWR |= 1u << 10u;
    }

    /**
     * Clear SWR's RE2A bit.
     */
    inline void clear_SWR_RE2A()
    {
        SWR &= ~(1u << 10u);
    }

    /**
     * Toggle SWR's RE2A bit.
     */
    inline void toggle_SWR_RE2A()
    {
        SWR ^= 1u << 10u;
    }

    /**
     * Set SWR's RE1A bit.
     */
    inline void set_SWR_RE1A()
    {
        SWR |= 1u << 9u;
    }

    /**
     * Clear SWR's RE1A bit.
     */
    inline void clear_SWR_RE1A()
    {
        SWR &= ~(1u << 9u);
    }

    /**
     * Toggle SWR's RE1A bit.
     */
    inline void toggle_SWR_RE1A()
    {
        SWR ^= 1u << 9u;
    }

    /**
     * Set SWR's RE0A bit.
     */
    inline void set_SWR_RE0A()
    {
        SWR |= 1u << 8u;
    }

    /**
     * Clear SWR's RE0A bit.
     */
    inline void clear_SWR_RE0A()
    {
        SWR &= ~(1u << 8u);
    }

    /**
     * Toggle SWR's RE0A bit.
     */
    inline void toggle_SWR_RE0A()
    {
        SWR ^= 1u << 8u;
    }

    /**
     * Set SWR's RCM2D bit.
     */
    inline void set_SWR_RCM2D()
    {
        SWR |= 1u << 5u;
    }

    /**
     * Clear SWR's RCM2D bit.
     */
    inline void clear_SWR_RCM2D()
    {
        SWR &= ~(1u << 5u);
    }

    /**
     * Toggle SWR's RCM2D bit.
     */
    inline void toggle_SWR_RCM2D()
    {
        SWR ^= 1u << 5u;
    }

    /**
     * Set SWR's RCM2U bit.
     */
    inline void set_SWR_RCM2U()
    {
        SWR |= 1u << 4u;
    }

    /**
     * Clear SWR's RCM2U bit.
     */
    inline void clear_SWR_RCM2U()
    {
        SWR &= ~(1u << 4u);
    }

    /**
     * Toggle SWR's RCM2U bit.
     */
    inline void toggle_SWR_RCM2U()
    {
        SWR ^= 1u << 4u;
    }

    /**
     * Set SWR's RCM1D bit.
     */
    inline void set_SWR_RCM1D()
    {
        SWR |= 1u << 3u;
    }

    /**
     * Clear SWR's RCM1D bit.
     */
    inline void clear_SWR_RCM1D()
    {
        SWR &= ~(1u << 3u);
    }

    /**
     * Toggle SWR's RCM1D bit.
     */
    inline void toggle_SWR_RCM1D()
    {
        SWR ^= 1u << 3u;
    }

    /**
     * Set SWR's RCM1U bit.
     */
    inline void set_SWR_RCM1U()
    {
        SWR |= 1u << 2u;
    }

    /**
     * Clear SWR's RCM1U bit.
     */
    inline void clear_SWR_RCM1U()
    {
        SWR &= ~(1u << 2u);
    }

    /**
     * Toggle SWR's RCM1U bit.
     */
    inline void toggle_SWR_RCM1U()
    {
        SWR ^= 1u << 2u;
    }

    /**
     * Set SWR's ROM bit.
     */
    inline void set_SWR_ROM()
    {
        SWR |= 1u << 1u;
    }

    /**
     * Clear SWR's ROM bit.
     */
    inline void clear_SWR_ROM()
    {
        SWR &= ~(1u << 1u);
    }

    /**
     * Toggle SWR's ROM bit.
     */
    inline void toggle_SWR_ROM()
    {
        SWR ^= 1u << 1u;
    }

    /**
     * Set SWR's RPM bit.
     */
    inline void set_SWR_RPM()
    {
        SWR |= 1u << 0u;
    }

    /**
     * Clear SWR's RPM bit.
     */
    inline void clear_SWR_RPM()
    {
        SWR &= ~(1u << 0u);
    }

    /**
     * Toggle SWR's RPM bit.
     */
    inline void toggle_SWR_RPM()
    {
        SWR ^= 1u << 0u;
    }

    /**
     * Get STC's STM field.
     */
    CCU8_STC_STM get_STC_STM()
    {
        return CCU8_STC_STM((STC >> 1u) & 0b11u);
    }

    /**
     * Set STC's STM field.
     */
    inline void set_STC_STM(CCU8_STC_STM value)
    {
        uint32_t curr = STC;

        curr &= ~(0b11u << 1u);
        curr |= (std::to_underlying(value) & 0b11u) << 1u;

        STC = curr;
    }

    /**
     * Get STC's CSE bit.
     */
    CCU8_STC_CSE get_STC_CSE()
    {
        return CCU8_STC_CSE(STC & (1u << 0u));
    }

    /**
     * Set STC's CSE bit.
     */
    inline void set_STC_CSE()
    {
        STC |= 1u << 0u;
    }

    /**
     * Clear STC's CSE bit.
     */
    inline void clear_STC_CSE()
    {
        STC &= ~(1u << 0u);
    }

    /**
     * Toggle STC's CSE bit.
     */
    inline void toggle_STC_CSE()
    {
        STC ^= 1u << 0u;
    }

    /**
     * Get ECRD0's LCV bit.
     */
    CCU8_ECRD0_LCV get_ECRD0_LCV()
    {
        return CCU8_ECRD0_LCV(ECRD0 & (1u << 25u));
    }

    /**
     * Get ECRD0's FFL bit.
     */
    CCU8_ECRD0_FFL get_ECRD0_FFL()
    {
        return CCU8_ECRD0_FFL(ECRD0 & (1u << 24u));
    }

    /**
     * Get ECRD0's VPTR field.
     */
    CCU8_ECRD0_VPTR get_ECRD0_VPTR()
    {
        return CCU8_ECRD0_VPTR((ECRD0 >> 22u) & 0b11u);
    }

    /**
     * Get ECRD0's SPTR field.
     */
    CCU8_ECRD0_SPTR get_ECRD0_SPTR()
    {
        return CCU8_ECRD0_SPTR((ECRD0 >> 20u) & 0b11u);
    }

    /**
     * Get ECRD0's FPCV field.
     */
    uint8_t get_ECRD0_FPCV()
    {
        return (ECRD0 >> 16u) & 0b1111u;
    }

    /**
     * Get ECRD0's CAPV field.
     */
    uint16_t get_ECRD0_CAPV()
    {
        return (ECRD0 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get ECRD1's LCV bit.
     */
    CCU8_ECRD1_LCV get_ECRD1_LCV()
    {
        return CCU8_ECRD1_LCV(ECRD1 & (1u << 25u));
    }

    /**
     * Get ECRD1's FFL bit.
     */
    CCU8_ECRD1_FFL get_ECRD1_FFL()
    {
        return CCU8_ECRD1_FFL(ECRD1 & (1u << 24u));
    }

    /**
     * Get ECRD1's VPTR field.
     */
    CCU8_ECRD1_VPTR get_ECRD1_VPTR()
    {
        return CCU8_ECRD1_VPTR((ECRD1 >> 22u) & 0b11u);
    }

    /**
     * Get ECRD1's SPTR field.
     */
    CCU8_ECRD1_SPTR get_ECRD1_SPTR()
    {
        return CCU8_ECRD1_SPTR((ECRD1 >> 20u) & 0b11u);
    }

    /**
     * Get ECRD1's FPCV field.
     */
    uint8_t get_ECRD1_FPCV()
    {
        return (ECRD1 >> 16u) & 0b1111u;
    }

    /**
     * Get ECRD1's CAPV field.
     */
    uint16_t get_ECRD1_CAPV()
    {
        return (ECRD1 >> 0u) & 0b1111111111111111u;
    }
};

static_assert(sizeof(ccu8) == ccu8::size);

static volatile ccu8 *const CCU80_CC80 = reinterpret_cast<ccu8 *>(0x40020100);

static volatile ccu8 *const CCU80 = reinterpret_cast<ccu8 *>(0x40020000);

static volatile ccu8 *const CCU81 = reinterpret_cast<ccu8 *>(0x40024000);

static volatile ccu8 *const CCU80_CC81 = reinterpret_cast<ccu8 *>(0x40020200);

static volatile ccu8 *const CCU80_CC82 = reinterpret_cast<ccu8 *>(0x40020300);

static volatile ccu8 *const CCU80_CC83 = reinterpret_cast<ccu8 *>(0x40020400);

static volatile ccu8 *const CCU81_CC80 = reinterpret_cast<ccu8 *>(0x40024100);

static volatile ccu8 *const CCU81_CC81 = reinterpret_cast<ccu8 *>(0x40024200);

static volatile ccu8 *const CCU81_CC82 = reinterpret_cast<ccu8 *>(0x40024300);

static volatile ccu8 *const CCU81_CC83 = reinterpret_cast<ccu8 *>(0x40024400);

}; // namespace XMC4700
