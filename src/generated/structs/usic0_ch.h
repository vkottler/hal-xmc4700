/**
 * \file
 * \brief Generated by ifgen (2.6.2).
 */
#pragma once

#include "../enums/USIC0_CH0_BRG_CLKSEL.h"
#include "../enums/USIC0_CH0_BRG_CTQSEL.h"
#include "../enums/USIC0_CH0_BRG_MCLKCFG.h"
#include "../enums/USIC0_CH0_BRG_PPPEN.h"
#include "../enums/USIC0_CH0_BRG_SCLKCFG.h"
#include "../enums/USIC0_CH0_BRG_SCLKOSEL.h"
#include "../enums/USIC0_CH0_BRG_TMEN.h"
#include "../enums/USIC0_CH0_BYPCR_BDEN.h"
#include "../enums/USIC0_CH0_BYPCR_BDSSM.h"
#include "../enums/USIC0_CH0_BYPCR_BDV.h"
#include "../enums/USIC0_CH0_BYPCR_BDVTR.h"
#include "../enums/USIC0_CH0_BYPCR_BPRIO.h"
#include "../enums/USIC0_CH0_CCFG_ASC.h"
#include "../enums/USIC0_CH0_CCFG_IIC.h"
#include "../enums/USIC0_CH0_CCFG_IIS.h"
#include "../enums/USIC0_CH0_CCFG_RB.h"
#include "../enums/USIC0_CH0_CCFG_SSC.h"
#include "../enums/USIC0_CH0_CCFG_TB.h"
#include "../enums/USIC0_CH0_CCR_AIEN.h"
#include "../enums/USIC0_CH0_CCR_BRGIEN.h"
#include "../enums/USIC0_CH0_CCR_DLIEN.h"
#include "../enums/USIC0_CH0_CCR_HPCEN.h"
#include "../enums/USIC0_CH0_CCR_MODE.h"
#include "../enums/USIC0_CH0_CCR_PM.h"
#include "../enums/USIC0_CH0_CCR_RIEN.h"
#include "../enums/USIC0_CH0_CCR_RSIEN.h"
#include "../enums/USIC0_CH0_CCR_TBIEN.h"
#include "../enums/USIC0_CH0_CCR_TSIEN.h"
#include "../enums/USIC0_CH0_DX0CR_CM.h"
#include "../enums/USIC0_CH0_DX0CR_DFEN.h"
#include "../enums/USIC0_CH0_DX0CR_DPOL.h"
#include "../enums/USIC0_CH0_DX0CR_DSEL.h"
#include "../enums/USIC0_CH0_DX0CR_DSEN.h"
#include "../enums/USIC0_CH0_DX0CR_DXS.h"
#include "../enums/USIC0_CH0_DX0CR_INSW.h"
#include "../enums/USIC0_CH0_DX0CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX1CR_CM.h"
#include "../enums/USIC0_CH0_DX1CR_DCEN.h"
#include "../enums/USIC0_CH0_DX1CR_DFEN.h"
#include "../enums/USIC0_CH0_DX1CR_DPOL.h"
#include "../enums/USIC0_CH0_DX1CR_DSEL.h"
#include "../enums/USIC0_CH0_DX1CR_DSEN.h"
#include "../enums/USIC0_CH0_DX1CR_DXS.h"
#include "../enums/USIC0_CH0_DX1CR_INSW.h"
#include "../enums/USIC0_CH0_DX1CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX2CR_CM.h"
#include "../enums/USIC0_CH0_DX2CR_DFEN.h"
#include "../enums/USIC0_CH0_DX2CR_DPOL.h"
#include "../enums/USIC0_CH0_DX2CR_DSEL.h"
#include "../enums/USIC0_CH0_DX2CR_DSEN.h"
#include "../enums/USIC0_CH0_DX2CR_DXS.h"
#include "../enums/USIC0_CH0_DX2CR_INSW.h"
#include "../enums/USIC0_CH0_DX2CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX3CR_CM.h"
#include "../enums/USIC0_CH0_DX3CR_DFEN.h"
#include "../enums/USIC0_CH0_DX3CR_DPOL.h"
#include "../enums/USIC0_CH0_DX3CR_DSEL.h"
#include "../enums/USIC0_CH0_DX3CR_DSEN.h"
#include "../enums/USIC0_CH0_DX3CR_DXS.h"
#include "../enums/USIC0_CH0_DX3CR_INSW.h"
#include "../enums/USIC0_CH0_DX3CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX4CR_CM.h"
#include "../enums/USIC0_CH0_DX4CR_DFEN.h"
#include "../enums/USIC0_CH0_DX4CR_DPOL.h"
#include "../enums/USIC0_CH0_DX4CR_DSEL.h"
#include "../enums/USIC0_CH0_DX4CR_DSEN.h"
#include "../enums/USIC0_CH0_DX4CR_DXS.h"
#include "../enums/USIC0_CH0_DX4CR_INSW.h"
#include "../enums/USIC0_CH0_DX4CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX5CR_CM.h"
#include "../enums/USIC0_CH0_DX5CR_DFEN.h"
#include "../enums/USIC0_CH0_DX5CR_DPOL.h"
#include "../enums/USIC0_CH0_DX5CR_DSEL.h"
#include "../enums/USIC0_CH0_DX5CR_DSEN.h"
#include "../enums/USIC0_CH0_DX5CR_DXS.h"
#include "../enums/USIC0_CH0_DX5CR_INSW.h"
#include "../enums/USIC0_CH0_DX5CR_SFSEL.h"
#include "../enums/USIC0_CH0_FDR_DM.h"
#include "../enums/USIC0_CH0_FMR_ATVC.h"
#include "../enums/USIC0_CH0_FMR_CRDV0.h"
#include "../enums/USIC0_CH0_FMR_CRDV1.h"
#include "../enums/USIC0_CH0_FMR_MTDV.h"
#include "../enums/USIC0_CH0_FMR_SIO0.h"
#include "../enums/USIC0_CH0_FMR_SIO1.h"
#include "../enums/USIC0_CH0_FMR_SIO2.h"
#include "../enums/USIC0_CH0_FMR_SIO3.h"
#include "../enums/USIC0_CH0_FMR_SIO4.h"
#include "../enums/USIC0_CH0_FMR_SIO5.h"
#include "../enums/USIC0_CH0_INPR_TSINP.h"
#include "../enums/USIC0_CH0_KSCFG_BPMODEN.h"
#include "../enums/USIC0_CH0_KSCFG_BPNOM.h"
#include "../enums/USIC0_CH0_KSCFG_BPSUM.h"
#include "../enums/USIC0_CH0_KSCFG_MODEN.h"
#include "../enums/USIC0_CH0_KSCFG_NOMCFG.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_CDEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_FEIEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_FFIEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_IDM.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_MCLK.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_PL.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_RNIEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_RSTEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_SBIEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_SMD.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_STPB.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_TSTEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_ACK00.h"
#include "../enums/USIC0_CH0_PCR_IICMode_ACKIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_ARLIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_ERRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_MCLK.h"
#include "../enums/USIC0_CH0_PCR_IICMode_NACKIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_PCRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_RSCRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_SACKDIS.h"
#include "../enums/USIC0_CH0_PCR_IICMode_SCRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_SRRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_STIM.h"
#include "../enums/USIC0_CH0_PCR_IISMode_DTEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_DX2TIEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_ENDIEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_MCLK.h"
#include "../enums/USIC0_CH0_PCR_IISMode_SELINV.h"
#include "../enums/USIC0_CH0_PCR_IISMode_WAFEIEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_WAGEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_WAREIEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_CTQSEL1.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_DX2TIEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_FEM.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_MCLK.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_MSLSEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_MSLSIEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_PARIEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_SELCTR.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_SELINV.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_SELO.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_SLPHSEL.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_TIWEN.h"
#include "../enums/USIC0_CH0_PSCR_CAIF.h"
#include "../enums/USIC0_CH0_PSCR_CBRGIF.h"
#include "../enums/USIC0_CH0_PSCR_CDLIF.h"
#include "../enums/USIC0_CH0_PSCR_CRIF.h"
#include "../enums/USIC0_CH0_PSCR_CRSIF.h"
#include "../enums/USIC0_CH0_PSCR_CST0.h"
#include "../enums/USIC0_CH0_PSCR_CST1.h"
#include "../enums/USIC0_CH0_PSCR_CST2.h"
#include "../enums/USIC0_CH0_PSCR_CST3.h"
#include "../enums/USIC0_CH0_PSCR_CST4.h"
#include "../enums/USIC0_CH0_PSCR_CST5.h"
#include "../enums/USIC0_CH0_PSCR_CST6.h"
#include "../enums/USIC0_CH0_PSCR_CST7.h"
#include "../enums/USIC0_CH0_PSCR_CST8.h"
#include "../enums/USIC0_CH0_PSCR_CST9.h"
#include "../enums/USIC0_CH0_PSCR_CTBIF.h"
#include "../enums/USIC0_CH0_PSCR_CTSIF.h"
#include "../enums/USIC0_CH0_PSR_AIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_AIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_BUSY.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_COL.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_DLIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_FER0.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_FER1.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RFF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RNS.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RSIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RXIDLE.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_SBD.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_TBIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_TFF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_TSIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_TXIDLE.h"
#include "../enums/USIC0_CH0_PSR_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_DLIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_ACK.h"
#include "../enums/USIC0_CH0_PSR_IICMode_AIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_ARL.h"
#include "../enums/USIC0_CH0_PSR_IICMode_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_DLIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_ERR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_NACK.h"
#include "../enums/USIC0_CH0_PSR_IICMode_PCR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_RIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_RSCR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_RSIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_SCR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_SLSEL.h"
#include "../enums/USIC0_CH0_PSR_IICMode_SRR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_TBIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_TSIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_WTDF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_AIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_DLIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_DX2S.h"
#include "../enums/USIC0_CH0_PSR_IISMode_DX2TEV.h"
#include "../enums/USIC0_CH0_PSR_IISMode_END.h"
#include "../enums/USIC0_CH0_PSR_IISMode_RIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_RSIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_TBIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_TSIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_WA.h"
#include "../enums/USIC0_CH0_PSR_IISMode_WAFE.h"
#include "../enums/USIC0_CH0_PSR_IISMode_WARE.h"
#include "../enums/USIC0_CH0_PSR_RIF.h"
#include "../enums/USIC0_CH0_PSR_RSIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_AIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_DLIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_DX2S.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_DX2TEV.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_MSLS.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_MSLSEV.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_PARERR.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_RIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_RSIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_TBIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_TSIF.h"
#include "../enums/USIC0_CH0_PSR_TBIF.h"
#include "../enums/USIC0_CH0_PSR_TSIF.h"
#include "../enums/USIC0_CH0_RBCTR_ARBIEN.h"
#include "../enums/USIC0_CH0_RBCTR_ARBINP.h"
#include "../enums/USIC0_CH0_RBCTR_LOF.h"
#include "../enums/USIC0_CH0_RBCTR_RBERIEN.h"
#include "../enums/USIC0_CH0_RBCTR_RCIM.h"
#include "../enums/USIC0_CH0_RBCTR_RNM.h"
#include "../enums/USIC0_CH0_RBCTR_SIZE.h"
#include "../enums/USIC0_CH0_RBCTR_SRBIEN.h"
#include "../enums/USIC0_CH0_RBCTR_SRBINP.h"
#include "../enums/USIC0_CH0_RBCTR_SRBTEN.h"
#include "../enums/USIC0_CH0_RBCTR_SRBTM.h"
#include "../enums/USIC0_CH0_RBUF01SR_DS0.h"
#include "../enums/USIC0_CH0_RBUF01SR_DS1.h"
#include "../enums/USIC0_CH0_RBUF01SR_PERR0.h"
#include "../enums/USIC0_CH0_RBUF01SR_PERR1.h"
#include "../enums/USIC0_CH0_RBUF01SR_RDV00.h"
#include "../enums/USIC0_CH0_RBUF01SR_RDV01.h"
#include "../enums/USIC0_CH0_RBUF01SR_RDV10.h"
#include "../enums/USIC0_CH0_RBUF01SR_RDV11.h"
#include "../enums/USIC0_CH0_RBUF01SR_SOF0.h"
#include "../enums/USIC0_CH0_RBUF01SR_SOF1.h"
#include "../enums/USIC0_CH0_RBUF01SR_WLEN1.h"
#include "../enums/USIC0_CH0_SCTR_DOCFG.h"
#include "../enums/USIC0_CH0_SCTR_DSM.h"
#include "../enums/USIC0_CH0_SCTR_HPCDIR.h"
#include "../enums/USIC0_CH0_SCTR_PDL.h"
#include "../enums/USIC0_CH0_SCTR_SDIR.h"
#include "../enums/USIC0_CH0_SCTR_TRM.h"
#include "../enums/USIC0_CH0_SCTR_WLE.h"
#include "../enums/USIC0_CH0_TBCTR_ATBINP.h"
#include "../enums/USIC0_CH0_TBCTR_LOF.h"
#include "../enums/USIC0_CH0_TBCTR_SIZE.h"
#include "../enums/USIC0_CH0_TBCTR_STBIEN.h"
#include "../enums/USIC0_CH0_TBCTR_STBINP.h"
#include "../enums/USIC0_CH0_TBCTR_STBTEN.h"
#include "../enums/USIC0_CH0_TBCTR_STBTM.h"
#include "../enums/USIC0_CH0_TBCTR_TBERIEN.h"
#include "../enums/USIC0_CH0_TCSR_EOF.h"
#include "../enums/USIC0_CH0_TCSR_FLEMD.h"
#include "../enums/USIC0_CH0_TCSR_HPCMD.h"
#include "../enums/USIC0_CH0_TCSR_SELMD.h"
#include "../enums/USIC0_CH0_TCSR_SOF.h"
#include "../enums/USIC0_CH0_TCSR_TDEN.h"
#include "../enums/USIC0_CH0_TCSR_TDSSM.h"
#include "../enums/USIC0_CH0_TCSR_TDV.h"
#include "../enums/USIC0_CH0_TCSR_TDVTR.h"
#include "../enums/USIC0_CH0_TCSR_TE.h"
#include "../enums/USIC0_CH0_TCSR_TSOF.h"
#include "../enums/USIC0_CH0_TCSR_TV.h"
#include "../enums/USIC0_CH0_TCSR_TVC.h"
#include "../enums/USIC0_CH0_TCSR_WA.h"
#include "../enums/USIC0_CH0_TCSR_WAMD.h"
#include "../enums/USIC0_CH0_TCSR_WLEMD.h"
#include "../enums/USIC0_CH0_TRBSCR_CARBI.h"
#include "../enums/USIC0_CH0_TRBSCR_CBDV.h"
#include "../enums/USIC0_CH0_TRBSCR_CRBERI.h"
#include "../enums/USIC0_CH0_TRBSCR_CSRBI.h"
#include "../enums/USIC0_CH0_TRBSCR_CSTBI.h"
#include "../enums/USIC0_CH0_TRBSCR_CTBERI.h"
#include "../enums/USIC0_CH0_TRBSCR_FLUSHRB.h"
#include "../enums/USIC0_CH0_TRBSCR_FLUSHTB.h"
#include "../enums/USIC0_CH0_TRBSR_ARBI.h"
#include "../enums/USIC0_CH0_TRBSR_RBERI.h"
#include "../enums/USIC0_CH0_TRBSR_RBUS.h"
#include "../enums/USIC0_CH0_TRBSR_REMPTY.h"
#include "../enums/USIC0_CH0_TRBSR_RFULL.h"
#include "../enums/USIC0_CH0_TRBSR_SRBI.h"
#include "../enums/USIC0_CH0_TRBSR_SRBT.h"
#include "../enums/USIC0_CH0_TRBSR_STBI.h"
#include "../enums/USIC0_CH0_TRBSR_STBT.h"
#include "../enums/USIC0_CH0_TRBSR_TBERI.h"
#include "../enums/USIC0_CH0_TRBSR_TBUS.h"
#include "../enums/USIC0_CH0_TRBSR_TEMPTY.h"
#include "../enums/USIC0_CH0_TRBSR_TFULL.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Universal Serial Interface Controller 0
 */
struct [[gnu::packed]] usic0_ch
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< usic0_ch's identifier. */
    static constexpr std::size_t size = 512; /*!< usic0_ch's size in bytes. */

    /* Fields. */
    union
    {
        uint32_t PCR; /* (read-write) Protocol Control Register */
        uint32_t PCR_ASCMode; /* (read-write) Protocol Control Register [ASC Mode] */
        uint32_t PCR_SSCMode; /* (read-write) Protocol Control Register [SSC Mode] */
        uint32_t PCR_IICMode; /* (read-write) Protocol Control Register [IIC Mode] */
        uint32_t PCR_IISMode; /* (read-write) Protocol Control Register [IIS Mode] */
    };
    union
    {
        uint32_t PSR; /* (read-write) Protocol Status Register */
        uint32_t PSR_ASCMode; /* (read-write) Protocol Status Register [ASC Mode] */
        uint32_t PSR_SSCMode; /* (read-write) Protocol Status Register [SSC Mode] */
        uint32_t PSR_IICMode; /* (read-write) Protocol Status Register [IIC Mode] */
        uint32_t PSR_IISMode; /* (read-write) Protocol Status Register [IIS Mode] */
    };
    const uint32_t reserved_padding0 = {};
    const uint32_t CCFG = {};                                        /*!< (read-only) Channel Configuration Register */
    const uint32_t reserved_padding1 = {};
    uint32_t KSCFG;                                                  /*!< (read-write) Kernel State Configuration Register */
    uint32_t FDR;                                                    /*!< (read-write) Fractional Divider Register */
    uint32_t BRG;                                                    /*!< (read-write) Baud Rate Generator Register */
    uint32_t INPR;                                                   /*!< (read-write) Interrupt Node Pointer Register */
    uint32_t DX0CR;                                                  /*!< (read-write) Input Control Register 0 */
    uint32_t DX1CR;                                                  /*!< (read-write) Input Control Register 1 */
    uint32_t DX2CR;                                                  /*!< (read-write) Input Control Register 2 */
    uint32_t DX3CR;                                                  /*!< (read-write) Input Control Register 3 */
    uint32_t DX4CR;                                                  /*!< (read-write) Input Control Register 4 */
    uint32_t DX5CR;                                                  /*!< (read-write) Input Control Register 5 */
    uint32_t SCTR;                                                   /*!< (read-write) Shift Control Register */
    uint32_t TCSR;                                                   /*!< (read-write) Transmit Control/Status Register */
    uint32_t CCR;                                                    /*!< (read-write) Channel Control Register */
    uint32_t CMTR;                                                   /*!< (read-write) Capture Mode Timer Register */
    uint32_t PSCR;                                                   /*!< (write-only) Protocol Status Clear Register */
    const uint32_t RBUFSR = {};                                      /*!< (read-only) Receiver Buffer Status Register */
    const uint32_t RBUF = {};                                        /*!< (read-only) Receiver Buffer Register */
    const uint32_t RBUFD = {};                                       /*!< (read-only) Receiver Buffer Register for Debugger */
    const uint32_t RBUF0 = {};                                       /*!< (read-only) Receiver Buffer Register 0 */
    const uint32_t RBUF1 = {};                                       /*!< (read-only) Receiver Buffer Register 1 */
    const uint32_t RBUF01SR = {};                                    /*!< (read-only) Receiver Buffer 01 Status Register */
    uint32_t FMR;                                                    /*!< (write-only) Flag Modification Register */
    static constexpr std::size_t reserved_padding2_length = 5;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    static constexpr std::size_t TBUF_length = 32;
    uint32_t TBUF[TBUF_length];                                      /*!< (read-write) Transmit Buffer */
    uint32_t BYP;                                                    /*!< (read-write) Bypass Data Register */
    uint32_t BYPCR;                                                  /*!< (read-write) Bypass Control Register */
    uint32_t TBCTR;                                                  /*!< (read-write) Transmitter Buffer Control Register */
    uint32_t RBCTR;                                                  /*!< (read-write) Receiver Buffer Control Register */
    const uint32_t TRBPTR = {};                                      /*!< (read-only) Transmit/Receive Buffer Pointer Register */
    uint32_t TRBSR;                                                  /*!< (read-write) Transmit/Receive Buffer Status Register */
    uint32_t TRBSCR;                                                 /*!< (write-only) Transmit/Receive Buffer Status Clear Register */
    const uint32_t OUTR = {};                                        /*!< (read-only) Receiver Buffer Output Register */
    const uint32_t OUTDR = {};                                       /*!< (read-only) Receiver Buffer Output Register L for Debugger */
    static constexpr std::size_t reserved_padding3_length = 23;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    static constexpr std::size_t IN_length = 32;
    uint32_t IN[IN_length];                                          /*!< (write-only) Transmit FIFO Buffer */

    /* Methods. */

    /**
     * Get CCFG's TB bit.
     */
    USIC0_CH0_CCFG_TB get_CCFG_TB()
    {
        return USIC0_CH0_CCFG_TB(CCFG & (1u << 7u));
    }

    /**
     * Get CCFG's RB bit.
     */
    USIC0_CH0_CCFG_RB get_CCFG_RB()
    {
        return USIC0_CH0_CCFG_RB(CCFG & (1u << 6u));
    }

    /**
     * Get CCFG's IIS bit.
     */
    USIC0_CH0_CCFG_IIS get_CCFG_IIS()
    {
        return USIC0_CH0_CCFG_IIS(CCFG & (1u << 3u));
    }

    /**
     * Get CCFG's IIC bit.
     */
    USIC0_CH0_CCFG_IIC get_CCFG_IIC()
    {
        return USIC0_CH0_CCFG_IIC(CCFG & (1u << 2u));
    }

    /**
     * Get CCFG's ASC bit.
     */
    USIC0_CH0_CCFG_ASC get_CCFG_ASC()
    {
        return USIC0_CH0_CCFG_ASC(CCFG & (1u << 1u));
    }

    /**
     * Get CCFG's SSC bit.
     */
    USIC0_CH0_CCFG_SSC get_CCFG_SSC()
    {
        return USIC0_CH0_CCFG_SSC(CCFG & (1u << 0u));
    }

    /**
     * Set KSCFG's BPSUM bit.
     */
    inline void set_KSCFG_BPSUM()
    {
        KSCFG |= 1u << 11u;
    }

    /**
     * Clear KSCFG's BPSUM bit.
     */
    inline void clear_KSCFG_BPSUM()
    {
        KSCFG &= ~(1u << 11u);
    }

    /**
     * Toggle KSCFG's BPSUM bit.
     */
    inline void toggle_KSCFG_BPSUM()
    {
        KSCFG ^= 1u << 11u;
    }

    /**
     * Get KSCFG's SUMCFG field.
     */
    uint8_t get_KSCFG_SUMCFG()
    {
        return (KSCFG >> 8u) & 0b11u;
    }

    /**
     * Set KSCFG's SUMCFG field.
     */
    inline void set_KSCFG_SUMCFG(uint8_t value)
    {
        uint32_t curr = KSCFG;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        KSCFG = curr;
    }

    /**
     * Set KSCFG's BPNOM bit.
     */
    inline void set_KSCFG_BPNOM()
    {
        KSCFG |= 1u << 7u;
    }

    /**
     * Clear KSCFG's BPNOM bit.
     */
    inline void clear_KSCFG_BPNOM()
    {
        KSCFG &= ~(1u << 7u);
    }

    /**
     * Toggle KSCFG's BPNOM bit.
     */
    inline void toggle_KSCFG_BPNOM()
    {
        KSCFG ^= 1u << 7u;
    }

    /**
     * Get KSCFG's NOMCFG field.
     */
    USIC0_CH0_KSCFG_NOMCFG get_KSCFG_NOMCFG()
    {
        return USIC0_CH0_KSCFG_NOMCFG((KSCFG >> 4u) & 0b11u);
    }

    /**
     * Set KSCFG's NOMCFG field.
     */
    inline void set_KSCFG_NOMCFG(USIC0_CH0_KSCFG_NOMCFG value)
    {
        uint32_t curr = KSCFG;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        KSCFG = curr;
    }

    /**
     * Set KSCFG's BPMODEN bit.
     */
    inline void set_KSCFG_BPMODEN()
    {
        KSCFG |= 1u << 1u;
    }

    /**
     * Clear KSCFG's BPMODEN bit.
     */
    inline void clear_KSCFG_BPMODEN()
    {
        KSCFG &= ~(1u << 1u);
    }

    /**
     * Toggle KSCFG's BPMODEN bit.
     */
    inline void toggle_KSCFG_BPMODEN()
    {
        KSCFG ^= 1u << 1u;
    }

    /**
     * Get KSCFG's MODEN bit.
     */
    USIC0_CH0_KSCFG_MODEN get_KSCFG_MODEN()
    {
        return USIC0_CH0_KSCFG_MODEN(KSCFG & (1u << 0u));
    }

    /**
     * Set KSCFG's MODEN bit.
     */
    inline void set_KSCFG_MODEN()
    {
        KSCFG |= 1u << 0u;
    }

    /**
     * Clear KSCFG's MODEN bit.
     */
    inline void clear_KSCFG_MODEN()
    {
        KSCFG &= ~(1u << 0u);
    }

    /**
     * Toggle KSCFG's MODEN bit.
     */
    inline void toggle_KSCFG_MODEN()
    {
        KSCFG ^= 1u << 0u;
    }

    /**
     * Get FDR's RESULT field.
     */
    uint16_t get_FDR_RESULT()
    {
        return (FDR >> 16u) & 0b1111111111u;
    }

    /**
     * Get FDR's DM field.
     */
    USIC0_CH0_FDR_DM get_FDR_DM()
    {
        return USIC0_CH0_FDR_DM((FDR >> 14u) & 0b11u);
    }

    /**
     * Set FDR's DM field.
     */
    inline void set_FDR_DM(USIC0_CH0_FDR_DM value)
    {
        uint32_t curr = FDR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        FDR = curr;
    }

    /**
     * Get FDR's STEP field.
     */
    uint16_t get_FDR_STEP()
    {
        return (FDR >> 0u) & 0b1111111111u;
    }

    /**
     * Set FDR's STEP field.
     */
    inline void set_FDR_STEP(uint16_t value)
    {
        uint32_t curr = FDR;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        FDR = curr;
    }

    /**
     * Get BRG's SCLKCFG field.
     */
    USIC0_CH0_BRG_SCLKCFG get_BRG_SCLKCFG()
    {
        return USIC0_CH0_BRG_SCLKCFG((BRG >> 30u) & 0b11u);
    }

    /**
     * Set BRG's SCLKCFG field.
     */
    inline void set_BRG_SCLKCFG(USIC0_CH0_BRG_SCLKCFG value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        BRG = curr;
    }

    /**
     * Get BRG's MCLKCFG bit.
     */
    USIC0_CH0_BRG_MCLKCFG get_BRG_MCLKCFG()
    {
        return USIC0_CH0_BRG_MCLKCFG(BRG & (1u << 29u));
    }

    /**
     * Set BRG's MCLKCFG bit.
     */
    inline void set_BRG_MCLKCFG()
    {
        BRG |= 1u << 29u;
    }

    /**
     * Clear BRG's MCLKCFG bit.
     */
    inline void clear_BRG_MCLKCFG()
    {
        BRG &= ~(1u << 29u);
    }

    /**
     * Toggle BRG's MCLKCFG bit.
     */
    inline void toggle_BRG_MCLKCFG()
    {
        BRG ^= 1u << 29u;
    }

    /**
     * Get BRG's SCLKOSEL bit.
     */
    USIC0_CH0_BRG_SCLKOSEL get_BRG_SCLKOSEL()
    {
        return USIC0_CH0_BRG_SCLKOSEL(BRG & (1u << 28u));
    }

    /**
     * Set BRG's SCLKOSEL bit.
     */
    inline void set_BRG_SCLKOSEL()
    {
        BRG |= 1u << 28u;
    }

    /**
     * Clear BRG's SCLKOSEL bit.
     */
    inline void clear_BRG_SCLKOSEL()
    {
        BRG &= ~(1u << 28u);
    }

    /**
     * Toggle BRG's SCLKOSEL bit.
     */
    inline void toggle_BRG_SCLKOSEL()
    {
        BRG ^= 1u << 28u;
    }

    /**
     * Get BRG's PDIV field.
     */
    uint16_t get_BRG_PDIV()
    {
        return (BRG >> 16u) & 0b1111111111u;
    }

    /**
     * Set BRG's PDIV field.
     */
    inline void set_BRG_PDIV(uint16_t value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        BRG = curr;
    }

    /**
     * Get BRG's DCTQ field.
     */
    uint8_t get_BRG_DCTQ()
    {
        return (BRG >> 10u) & 0b11111u;
    }

    /**
     * Set BRG's DCTQ field.
     */
    inline void set_BRG_DCTQ(uint8_t value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11111u << 10u);
        curr |= (value & 0b11111u) << 10u;

        BRG = curr;
    }

    /**
     * Get BRG's PCTQ field.
     */
    uint8_t get_BRG_PCTQ()
    {
        return (BRG >> 8u) & 0b11u;
    }

    /**
     * Set BRG's PCTQ field.
     */
    inline void set_BRG_PCTQ(uint8_t value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        BRG = curr;
    }

    /**
     * Get BRG's CTQSEL field.
     */
    USIC0_CH0_BRG_CTQSEL get_BRG_CTQSEL()
    {
        return USIC0_CH0_BRG_CTQSEL((BRG >> 6u) & 0b11u);
    }

    /**
     * Set BRG's CTQSEL field.
     */
    inline void set_BRG_CTQSEL(USIC0_CH0_BRG_CTQSEL value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BRG = curr;
    }

    /**
     * Get BRG's PPPEN bit.
     */
    USIC0_CH0_BRG_PPPEN get_BRG_PPPEN()
    {
        return USIC0_CH0_BRG_PPPEN(BRG & (1u << 4u));
    }

    /**
     * Set BRG's PPPEN bit.
     */
    inline void set_BRG_PPPEN()
    {
        BRG |= 1u << 4u;
    }

    /**
     * Clear BRG's PPPEN bit.
     */
    inline void clear_BRG_PPPEN()
    {
        BRG &= ~(1u << 4u);
    }

    /**
     * Toggle BRG's PPPEN bit.
     */
    inline void toggle_BRG_PPPEN()
    {
        BRG ^= 1u << 4u;
    }

    /**
     * Get BRG's TMEN bit.
     */
    USIC0_CH0_BRG_TMEN get_BRG_TMEN()
    {
        return USIC0_CH0_BRG_TMEN(BRG & (1u << 3u));
    }

    /**
     * Set BRG's TMEN bit.
     */
    inline void set_BRG_TMEN()
    {
        BRG |= 1u << 3u;
    }

    /**
     * Clear BRG's TMEN bit.
     */
    inline void clear_BRG_TMEN()
    {
        BRG &= ~(1u << 3u);
    }

    /**
     * Toggle BRG's TMEN bit.
     */
    inline void toggle_BRG_TMEN()
    {
        BRG ^= 1u << 3u;
    }

    /**
     * Get BRG's CLKSEL field.
     */
    USIC0_CH0_BRG_CLKSEL get_BRG_CLKSEL()
    {
        return USIC0_CH0_BRG_CLKSEL((BRG >> 0u) & 0b11u);
    }

    /**
     * Set BRG's CLKSEL field.
     */
    inline void set_BRG_CLKSEL(USIC0_CH0_BRG_CLKSEL value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BRG = curr;
    }

    /**
     * Get INPR's PINP field.
     */
    uint8_t get_INPR_PINP()
    {
        return (INPR >> 16u) & 0b111u;
    }

    /**
     * Set INPR's PINP field.
     */
    inline void set_INPR_PINP(uint8_t value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 16u);
        curr |= (value & 0b111u) << 16u;

        INPR = curr;
    }

    /**
     * Get INPR's AINP field.
     */
    uint8_t get_INPR_AINP()
    {
        return (INPR >> 12u) & 0b111u;
    }

    /**
     * Set INPR's AINP field.
     */
    inline void set_INPR_AINP(uint8_t value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        INPR = curr;
    }

    /**
     * Get INPR's RINP field.
     */
    uint8_t get_INPR_RINP()
    {
        return (INPR >> 8u) & 0b111u;
    }

    /**
     * Set INPR's RINP field.
     */
    inline void set_INPR_RINP(uint8_t value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 8u);
        curr |= (value & 0b111u) << 8u;

        INPR = curr;
    }

    /**
     * Get INPR's TBINP field.
     */
    uint8_t get_INPR_TBINP()
    {
        return (INPR >> 4u) & 0b111u;
    }

    /**
     * Set INPR's TBINP field.
     */
    inline void set_INPR_TBINP(uint8_t value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 4u);
        curr |= (value & 0b111u) << 4u;

        INPR = curr;
    }

    /**
     * Get INPR's TSINP field.
     */
    USIC0_CH0_INPR_TSINP get_INPR_TSINP()
    {
        return USIC0_CH0_INPR_TSINP((INPR >> 0u) & 0b111u);
    }

    /**
     * Set INPR's TSINP field.
     */
    inline void set_INPR_TSINP(USIC0_CH0_INPR_TSINP value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        INPR = curr;
    }

    /**
     * Get DX0CR's DXS bit.
     */
    USIC0_CH0_DX0CR_DXS get_DX0CR_DXS()
    {
        return USIC0_CH0_DX0CR_DXS(DX0CR & (1u << 15u));
    }

    /**
     * Get DX0CR's CM field.
     */
    USIC0_CH0_DX0CR_CM get_DX0CR_CM()
    {
        return USIC0_CH0_DX0CR_CM((DX0CR >> 10u) & 0b11u);
    }

    /**
     * Set DX0CR's CM field.
     */
    inline void set_DX0CR_CM(USIC0_CH0_DX0CR_CM value)
    {
        uint32_t curr = DX0CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX0CR = curr;
    }

    /**
     * Get DX0CR's SFSEL bit.
     */
    USIC0_CH0_DX0CR_SFSEL get_DX0CR_SFSEL()
    {
        return USIC0_CH0_DX0CR_SFSEL(DX0CR & (1u << 9u));
    }

    /**
     * Set DX0CR's SFSEL bit.
     */
    inline void set_DX0CR_SFSEL()
    {
        DX0CR |= 1u << 9u;
    }

    /**
     * Clear DX0CR's SFSEL bit.
     */
    inline void clear_DX0CR_SFSEL()
    {
        DX0CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX0CR's SFSEL bit.
     */
    inline void toggle_DX0CR_SFSEL()
    {
        DX0CR ^= 1u << 9u;
    }

    /**
     * Get DX0CR's DPOL bit.
     */
    USIC0_CH0_DX0CR_DPOL get_DX0CR_DPOL()
    {
        return USIC0_CH0_DX0CR_DPOL(DX0CR & (1u << 8u));
    }

    /**
     * Set DX0CR's DPOL bit.
     */
    inline void set_DX0CR_DPOL()
    {
        DX0CR |= 1u << 8u;
    }

    /**
     * Clear DX0CR's DPOL bit.
     */
    inline void clear_DX0CR_DPOL()
    {
        DX0CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX0CR's DPOL bit.
     */
    inline void toggle_DX0CR_DPOL()
    {
        DX0CR ^= 1u << 8u;
    }

    /**
     * Get DX0CR's DSEN bit.
     */
    USIC0_CH0_DX0CR_DSEN get_DX0CR_DSEN()
    {
        return USIC0_CH0_DX0CR_DSEN(DX0CR & (1u << 6u));
    }

    /**
     * Set DX0CR's DSEN bit.
     */
    inline void set_DX0CR_DSEN()
    {
        DX0CR |= 1u << 6u;
    }

    /**
     * Clear DX0CR's DSEN bit.
     */
    inline void clear_DX0CR_DSEN()
    {
        DX0CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX0CR's DSEN bit.
     */
    inline void toggle_DX0CR_DSEN()
    {
        DX0CR ^= 1u << 6u;
    }

    /**
     * Get DX0CR's DFEN bit.
     */
    USIC0_CH0_DX0CR_DFEN get_DX0CR_DFEN()
    {
        return USIC0_CH0_DX0CR_DFEN(DX0CR & (1u << 5u));
    }

    /**
     * Set DX0CR's DFEN bit.
     */
    inline void set_DX0CR_DFEN()
    {
        DX0CR |= 1u << 5u;
    }

    /**
     * Clear DX0CR's DFEN bit.
     */
    inline void clear_DX0CR_DFEN()
    {
        DX0CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX0CR's DFEN bit.
     */
    inline void toggle_DX0CR_DFEN()
    {
        DX0CR ^= 1u << 5u;
    }

    /**
     * Get DX0CR's INSW bit.
     */
    USIC0_CH0_DX0CR_INSW get_DX0CR_INSW()
    {
        return USIC0_CH0_DX0CR_INSW(DX0CR & (1u << 4u));
    }

    /**
     * Set DX0CR's INSW bit.
     */
    inline void set_DX0CR_INSW()
    {
        DX0CR |= 1u << 4u;
    }

    /**
     * Clear DX0CR's INSW bit.
     */
    inline void clear_DX0CR_INSW()
    {
        DX0CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX0CR's INSW bit.
     */
    inline void toggle_DX0CR_INSW()
    {
        DX0CR ^= 1u << 4u;
    }

    /**
     * Get DX0CR's DSEL field.
     */
    USIC0_CH0_DX0CR_DSEL get_DX0CR_DSEL()
    {
        return USIC0_CH0_DX0CR_DSEL((DX0CR >> 0u) & 0b111u);
    }

    /**
     * Set DX0CR's DSEL field.
     */
    inline void set_DX0CR_DSEL(USIC0_CH0_DX0CR_DSEL value)
    {
        uint32_t curr = DX0CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX0CR = curr;
    }

    /**
     * Get DX1CR's DXS bit.
     */
    USIC0_CH0_DX1CR_DXS get_DX1CR_DXS()
    {
        return USIC0_CH0_DX1CR_DXS(DX1CR & (1u << 15u));
    }

    /**
     * Get DX1CR's CM field.
     */
    USIC0_CH0_DX1CR_CM get_DX1CR_CM()
    {
        return USIC0_CH0_DX1CR_CM((DX1CR >> 10u) & 0b11u);
    }

    /**
     * Set DX1CR's CM field.
     */
    inline void set_DX1CR_CM(USIC0_CH0_DX1CR_CM value)
    {
        uint32_t curr = DX1CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX1CR = curr;
    }

    /**
     * Get DX1CR's SFSEL bit.
     */
    USIC0_CH0_DX1CR_SFSEL get_DX1CR_SFSEL()
    {
        return USIC0_CH0_DX1CR_SFSEL(DX1CR & (1u << 9u));
    }

    /**
     * Set DX1CR's SFSEL bit.
     */
    inline void set_DX1CR_SFSEL()
    {
        DX1CR |= 1u << 9u;
    }

    /**
     * Clear DX1CR's SFSEL bit.
     */
    inline void clear_DX1CR_SFSEL()
    {
        DX1CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX1CR's SFSEL bit.
     */
    inline void toggle_DX1CR_SFSEL()
    {
        DX1CR ^= 1u << 9u;
    }

    /**
     * Get DX1CR's DPOL bit.
     */
    USIC0_CH0_DX1CR_DPOL get_DX1CR_DPOL()
    {
        return USIC0_CH0_DX1CR_DPOL(DX1CR & (1u << 8u));
    }

    /**
     * Set DX1CR's DPOL bit.
     */
    inline void set_DX1CR_DPOL()
    {
        DX1CR |= 1u << 8u;
    }

    /**
     * Clear DX1CR's DPOL bit.
     */
    inline void clear_DX1CR_DPOL()
    {
        DX1CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX1CR's DPOL bit.
     */
    inline void toggle_DX1CR_DPOL()
    {
        DX1CR ^= 1u << 8u;
    }

    /**
     * Get DX1CR's DSEN bit.
     */
    USIC0_CH0_DX1CR_DSEN get_DX1CR_DSEN()
    {
        return USIC0_CH0_DX1CR_DSEN(DX1CR & (1u << 6u));
    }

    /**
     * Set DX1CR's DSEN bit.
     */
    inline void set_DX1CR_DSEN()
    {
        DX1CR |= 1u << 6u;
    }

    /**
     * Clear DX1CR's DSEN bit.
     */
    inline void clear_DX1CR_DSEN()
    {
        DX1CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX1CR's DSEN bit.
     */
    inline void toggle_DX1CR_DSEN()
    {
        DX1CR ^= 1u << 6u;
    }

    /**
     * Get DX1CR's DFEN bit.
     */
    USIC0_CH0_DX1CR_DFEN get_DX1CR_DFEN()
    {
        return USIC0_CH0_DX1CR_DFEN(DX1CR & (1u << 5u));
    }

    /**
     * Set DX1CR's DFEN bit.
     */
    inline void set_DX1CR_DFEN()
    {
        DX1CR |= 1u << 5u;
    }

    /**
     * Clear DX1CR's DFEN bit.
     */
    inline void clear_DX1CR_DFEN()
    {
        DX1CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX1CR's DFEN bit.
     */
    inline void toggle_DX1CR_DFEN()
    {
        DX1CR ^= 1u << 5u;
    }

    /**
     * Get DX1CR's INSW bit.
     */
    USIC0_CH0_DX1CR_INSW get_DX1CR_INSW()
    {
        return USIC0_CH0_DX1CR_INSW(DX1CR & (1u << 4u));
    }

    /**
     * Set DX1CR's INSW bit.
     */
    inline void set_DX1CR_INSW()
    {
        DX1CR |= 1u << 4u;
    }

    /**
     * Clear DX1CR's INSW bit.
     */
    inline void clear_DX1CR_INSW()
    {
        DX1CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX1CR's INSW bit.
     */
    inline void toggle_DX1CR_INSW()
    {
        DX1CR ^= 1u << 4u;
    }

    /**
     * Get DX1CR's DCEN bit.
     */
    USIC0_CH0_DX1CR_DCEN get_DX1CR_DCEN()
    {
        return USIC0_CH0_DX1CR_DCEN(DX1CR & (1u << 3u));
    }

    /**
     * Set DX1CR's DCEN bit.
     */
    inline void set_DX1CR_DCEN()
    {
        DX1CR |= 1u << 3u;
    }

    /**
     * Clear DX1CR's DCEN bit.
     */
    inline void clear_DX1CR_DCEN()
    {
        DX1CR &= ~(1u << 3u);
    }

    /**
     * Toggle DX1CR's DCEN bit.
     */
    inline void toggle_DX1CR_DCEN()
    {
        DX1CR ^= 1u << 3u;
    }

    /**
     * Get DX1CR's DSEL field.
     */
    USIC0_CH0_DX1CR_DSEL get_DX1CR_DSEL()
    {
        return USIC0_CH0_DX1CR_DSEL((DX1CR >> 0u) & 0b111u);
    }

    /**
     * Set DX1CR's DSEL field.
     */
    inline void set_DX1CR_DSEL(USIC0_CH0_DX1CR_DSEL value)
    {
        uint32_t curr = DX1CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX1CR = curr;
    }

    /**
     * Get DX2CR's DXS bit.
     */
    USIC0_CH0_DX2CR_DXS get_DX2CR_DXS()
    {
        return USIC0_CH0_DX2CR_DXS(DX2CR & (1u << 15u));
    }

    /**
     * Get DX2CR's CM field.
     */
    USIC0_CH0_DX2CR_CM get_DX2CR_CM()
    {
        return USIC0_CH0_DX2CR_CM((DX2CR >> 10u) & 0b11u);
    }

    /**
     * Set DX2CR's CM field.
     */
    inline void set_DX2CR_CM(USIC0_CH0_DX2CR_CM value)
    {
        uint32_t curr = DX2CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX2CR = curr;
    }

    /**
     * Get DX2CR's SFSEL bit.
     */
    USIC0_CH0_DX2CR_SFSEL get_DX2CR_SFSEL()
    {
        return USIC0_CH0_DX2CR_SFSEL(DX2CR & (1u << 9u));
    }

    /**
     * Set DX2CR's SFSEL bit.
     */
    inline void set_DX2CR_SFSEL()
    {
        DX2CR |= 1u << 9u;
    }

    /**
     * Clear DX2CR's SFSEL bit.
     */
    inline void clear_DX2CR_SFSEL()
    {
        DX2CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX2CR's SFSEL bit.
     */
    inline void toggle_DX2CR_SFSEL()
    {
        DX2CR ^= 1u << 9u;
    }

    /**
     * Get DX2CR's DPOL bit.
     */
    USIC0_CH0_DX2CR_DPOL get_DX2CR_DPOL()
    {
        return USIC0_CH0_DX2CR_DPOL(DX2CR & (1u << 8u));
    }

    /**
     * Set DX2CR's DPOL bit.
     */
    inline void set_DX2CR_DPOL()
    {
        DX2CR |= 1u << 8u;
    }

    /**
     * Clear DX2CR's DPOL bit.
     */
    inline void clear_DX2CR_DPOL()
    {
        DX2CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX2CR's DPOL bit.
     */
    inline void toggle_DX2CR_DPOL()
    {
        DX2CR ^= 1u << 8u;
    }

    /**
     * Get DX2CR's DSEN bit.
     */
    USIC0_CH0_DX2CR_DSEN get_DX2CR_DSEN()
    {
        return USIC0_CH0_DX2CR_DSEN(DX2CR & (1u << 6u));
    }

    /**
     * Set DX2CR's DSEN bit.
     */
    inline void set_DX2CR_DSEN()
    {
        DX2CR |= 1u << 6u;
    }

    /**
     * Clear DX2CR's DSEN bit.
     */
    inline void clear_DX2CR_DSEN()
    {
        DX2CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX2CR's DSEN bit.
     */
    inline void toggle_DX2CR_DSEN()
    {
        DX2CR ^= 1u << 6u;
    }

    /**
     * Get DX2CR's DFEN bit.
     */
    USIC0_CH0_DX2CR_DFEN get_DX2CR_DFEN()
    {
        return USIC0_CH0_DX2CR_DFEN(DX2CR & (1u << 5u));
    }

    /**
     * Set DX2CR's DFEN bit.
     */
    inline void set_DX2CR_DFEN()
    {
        DX2CR |= 1u << 5u;
    }

    /**
     * Clear DX2CR's DFEN bit.
     */
    inline void clear_DX2CR_DFEN()
    {
        DX2CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX2CR's DFEN bit.
     */
    inline void toggle_DX2CR_DFEN()
    {
        DX2CR ^= 1u << 5u;
    }

    /**
     * Get DX2CR's INSW bit.
     */
    USIC0_CH0_DX2CR_INSW get_DX2CR_INSW()
    {
        return USIC0_CH0_DX2CR_INSW(DX2CR & (1u << 4u));
    }

    /**
     * Set DX2CR's INSW bit.
     */
    inline void set_DX2CR_INSW()
    {
        DX2CR |= 1u << 4u;
    }

    /**
     * Clear DX2CR's INSW bit.
     */
    inline void clear_DX2CR_INSW()
    {
        DX2CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX2CR's INSW bit.
     */
    inline void toggle_DX2CR_INSW()
    {
        DX2CR ^= 1u << 4u;
    }

    /**
     * Get DX2CR's DSEL field.
     */
    USIC0_CH0_DX2CR_DSEL get_DX2CR_DSEL()
    {
        return USIC0_CH0_DX2CR_DSEL((DX2CR >> 0u) & 0b111u);
    }

    /**
     * Set DX2CR's DSEL field.
     */
    inline void set_DX2CR_DSEL(USIC0_CH0_DX2CR_DSEL value)
    {
        uint32_t curr = DX2CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX2CR = curr;
    }

    /**
     * Get DX3CR's DXS bit.
     */
    USIC0_CH0_DX3CR_DXS get_DX3CR_DXS()
    {
        return USIC0_CH0_DX3CR_DXS(DX3CR & (1u << 15u));
    }

    /**
     * Get DX3CR's CM field.
     */
    USIC0_CH0_DX3CR_CM get_DX3CR_CM()
    {
        return USIC0_CH0_DX3CR_CM((DX3CR >> 10u) & 0b11u);
    }

    /**
     * Set DX3CR's CM field.
     */
    inline void set_DX3CR_CM(USIC0_CH0_DX3CR_CM value)
    {
        uint32_t curr = DX3CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX3CR = curr;
    }

    /**
     * Get DX3CR's SFSEL bit.
     */
    USIC0_CH0_DX3CR_SFSEL get_DX3CR_SFSEL()
    {
        return USIC0_CH0_DX3CR_SFSEL(DX3CR & (1u << 9u));
    }

    /**
     * Set DX3CR's SFSEL bit.
     */
    inline void set_DX3CR_SFSEL()
    {
        DX3CR |= 1u << 9u;
    }

    /**
     * Clear DX3CR's SFSEL bit.
     */
    inline void clear_DX3CR_SFSEL()
    {
        DX3CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX3CR's SFSEL bit.
     */
    inline void toggle_DX3CR_SFSEL()
    {
        DX3CR ^= 1u << 9u;
    }

    /**
     * Get DX3CR's DPOL bit.
     */
    USIC0_CH0_DX3CR_DPOL get_DX3CR_DPOL()
    {
        return USIC0_CH0_DX3CR_DPOL(DX3CR & (1u << 8u));
    }

    /**
     * Set DX3CR's DPOL bit.
     */
    inline void set_DX3CR_DPOL()
    {
        DX3CR |= 1u << 8u;
    }

    /**
     * Clear DX3CR's DPOL bit.
     */
    inline void clear_DX3CR_DPOL()
    {
        DX3CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX3CR's DPOL bit.
     */
    inline void toggle_DX3CR_DPOL()
    {
        DX3CR ^= 1u << 8u;
    }

    /**
     * Get DX3CR's DSEN bit.
     */
    USIC0_CH0_DX3CR_DSEN get_DX3CR_DSEN()
    {
        return USIC0_CH0_DX3CR_DSEN(DX3CR & (1u << 6u));
    }

    /**
     * Set DX3CR's DSEN bit.
     */
    inline void set_DX3CR_DSEN()
    {
        DX3CR |= 1u << 6u;
    }

    /**
     * Clear DX3CR's DSEN bit.
     */
    inline void clear_DX3CR_DSEN()
    {
        DX3CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX3CR's DSEN bit.
     */
    inline void toggle_DX3CR_DSEN()
    {
        DX3CR ^= 1u << 6u;
    }

    /**
     * Get DX3CR's DFEN bit.
     */
    USIC0_CH0_DX3CR_DFEN get_DX3CR_DFEN()
    {
        return USIC0_CH0_DX3CR_DFEN(DX3CR & (1u << 5u));
    }

    /**
     * Set DX3CR's DFEN bit.
     */
    inline void set_DX3CR_DFEN()
    {
        DX3CR |= 1u << 5u;
    }

    /**
     * Clear DX3CR's DFEN bit.
     */
    inline void clear_DX3CR_DFEN()
    {
        DX3CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX3CR's DFEN bit.
     */
    inline void toggle_DX3CR_DFEN()
    {
        DX3CR ^= 1u << 5u;
    }

    /**
     * Get DX3CR's INSW bit.
     */
    USIC0_CH0_DX3CR_INSW get_DX3CR_INSW()
    {
        return USIC0_CH0_DX3CR_INSW(DX3CR & (1u << 4u));
    }

    /**
     * Set DX3CR's INSW bit.
     */
    inline void set_DX3CR_INSW()
    {
        DX3CR |= 1u << 4u;
    }

    /**
     * Clear DX3CR's INSW bit.
     */
    inline void clear_DX3CR_INSW()
    {
        DX3CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX3CR's INSW bit.
     */
    inline void toggle_DX3CR_INSW()
    {
        DX3CR ^= 1u << 4u;
    }

    /**
     * Get DX3CR's DSEL field.
     */
    USIC0_CH0_DX3CR_DSEL get_DX3CR_DSEL()
    {
        return USIC0_CH0_DX3CR_DSEL((DX3CR >> 0u) & 0b111u);
    }

    /**
     * Set DX3CR's DSEL field.
     */
    inline void set_DX3CR_DSEL(USIC0_CH0_DX3CR_DSEL value)
    {
        uint32_t curr = DX3CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX3CR = curr;
    }

    /**
     * Get DX4CR's DXS bit.
     */
    USIC0_CH0_DX4CR_DXS get_DX4CR_DXS()
    {
        return USIC0_CH0_DX4CR_DXS(DX4CR & (1u << 15u));
    }

    /**
     * Get DX4CR's CM field.
     */
    USIC0_CH0_DX4CR_CM get_DX4CR_CM()
    {
        return USIC0_CH0_DX4CR_CM((DX4CR >> 10u) & 0b11u);
    }

    /**
     * Set DX4CR's CM field.
     */
    inline void set_DX4CR_CM(USIC0_CH0_DX4CR_CM value)
    {
        uint32_t curr = DX4CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX4CR = curr;
    }

    /**
     * Get DX4CR's SFSEL bit.
     */
    USIC0_CH0_DX4CR_SFSEL get_DX4CR_SFSEL()
    {
        return USIC0_CH0_DX4CR_SFSEL(DX4CR & (1u << 9u));
    }

    /**
     * Set DX4CR's SFSEL bit.
     */
    inline void set_DX4CR_SFSEL()
    {
        DX4CR |= 1u << 9u;
    }

    /**
     * Clear DX4CR's SFSEL bit.
     */
    inline void clear_DX4CR_SFSEL()
    {
        DX4CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX4CR's SFSEL bit.
     */
    inline void toggle_DX4CR_SFSEL()
    {
        DX4CR ^= 1u << 9u;
    }

    /**
     * Get DX4CR's DPOL bit.
     */
    USIC0_CH0_DX4CR_DPOL get_DX4CR_DPOL()
    {
        return USIC0_CH0_DX4CR_DPOL(DX4CR & (1u << 8u));
    }

    /**
     * Set DX4CR's DPOL bit.
     */
    inline void set_DX4CR_DPOL()
    {
        DX4CR |= 1u << 8u;
    }

    /**
     * Clear DX4CR's DPOL bit.
     */
    inline void clear_DX4CR_DPOL()
    {
        DX4CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX4CR's DPOL bit.
     */
    inline void toggle_DX4CR_DPOL()
    {
        DX4CR ^= 1u << 8u;
    }

    /**
     * Get DX4CR's DSEN bit.
     */
    USIC0_CH0_DX4CR_DSEN get_DX4CR_DSEN()
    {
        return USIC0_CH0_DX4CR_DSEN(DX4CR & (1u << 6u));
    }

    /**
     * Set DX4CR's DSEN bit.
     */
    inline void set_DX4CR_DSEN()
    {
        DX4CR |= 1u << 6u;
    }

    /**
     * Clear DX4CR's DSEN bit.
     */
    inline void clear_DX4CR_DSEN()
    {
        DX4CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX4CR's DSEN bit.
     */
    inline void toggle_DX4CR_DSEN()
    {
        DX4CR ^= 1u << 6u;
    }

    /**
     * Get DX4CR's DFEN bit.
     */
    USIC0_CH0_DX4CR_DFEN get_DX4CR_DFEN()
    {
        return USIC0_CH0_DX4CR_DFEN(DX4CR & (1u << 5u));
    }

    /**
     * Set DX4CR's DFEN bit.
     */
    inline void set_DX4CR_DFEN()
    {
        DX4CR |= 1u << 5u;
    }

    /**
     * Clear DX4CR's DFEN bit.
     */
    inline void clear_DX4CR_DFEN()
    {
        DX4CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX4CR's DFEN bit.
     */
    inline void toggle_DX4CR_DFEN()
    {
        DX4CR ^= 1u << 5u;
    }

    /**
     * Get DX4CR's INSW bit.
     */
    USIC0_CH0_DX4CR_INSW get_DX4CR_INSW()
    {
        return USIC0_CH0_DX4CR_INSW(DX4CR & (1u << 4u));
    }

    /**
     * Set DX4CR's INSW bit.
     */
    inline void set_DX4CR_INSW()
    {
        DX4CR |= 1u << 4u;
    }

    /**
     * Clear DX4CR's INSW bit.
     */
    inline void clear_DX4CR_INSW()
    {
        DX4CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX4CR's INSW bit.
     */
    inline void toggle_DX4CR_INSW()
    {
        DX4CR ^= 1u << 4u;
    }

    /**
     * Get DX4CR's DSEL field.
     */
    USIC0_CH0_DX4CR_DSEL get_DX4CR_DSEL()
    {
        return USIC0_CH0_DX4CR_DSEL((DX4CR >> 0u) & 0b111u);
    }

    /**
     * Set DX4CR's DSEL field.
     */
    inline void set_DX4CR_DSEL(USIC0_CH0_DX4CR_DSEL value)
    {
        uint32_t curr = DX4CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX4CR = curr;
    }

    /**
     * Get DX5CR's DXS bit.
     */
    USIC0_CH0_DX5CR_DXS get_DX5CR_DXS()
    {
        return USIC0_CH0_DX5CR_DXS(DX5CR & (1u << 15u));
    }

    /**
     * Get DX5CR's CM field.
     */
    USIC0_CH0_DX5CR_CM get_DX5CR_CM()
    {
        return USIC0_CH0_DX5CR_CM((DX5CR >> 10u) & 0b11u);
    }

    /**
     * Set DX5CR's CM field.
     */
    inline void set_DX5CR_CM(USIC0_CH0_DX5CR_CM value)
    {
        uint32_t curr = DX5CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX5CR = curr;
    }

    /**
     * Get DX5CR's SFSEL bit.
     */
    USIC0_CH0_DX5CR_SFSEL get_DX5CR_SFSEL()
    {
        return USIC0_CH0_DX5CR_SFSEL(DX5CR & (1u << 9u));
    }

    /**
     * Set DX5CR's SFSEL bit.
     */
    inline void set_DX5CR_SFSEL()
    {
        DX5CR |= 1u << 9u;
    }

    /**
     * Clear DX5CR's SFSEL bit.
     */
    inline void clear_DX5CR_SFSEL()
    {
        DX5CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX5CR's SFSEL bit.
     */
    inline void toggle_DX5CR_SFSEL()
    {
        DX5CR ^= 1u << 9u;
    }

    /**
     * Get DX5CR's DPOL bit.
     */
    USIC0_CH0_DX5CR_DPOL get_DX5CR_DPOL()
    {
        return USIC0_CH0_DX5CR_DPOL(DX5CR & (1u << 8u));
    }

    /**
     * Set DX5CR's DPOL bit.
     */
    inline void set_DX5CR_DPOL()
    {
        DX5CR |= 1u << 8u;
    }

    /**
     * Clear DX5CR's DPOL bit.
     */
    inline void clear_DX5CR_DPOL()
    {
        DX5CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX5CR's DPOL bit.
     */
    inline void toggle_DX5CR_DPOL()
    {
        DX5CR ^= 1u << 8u;
    }

    /**
     * Get DX5CR's DSEN bit.
     */
    USIC0_CH0_DX5CR_DSEN get_DX5CR_DSEN()
    {
        return USIC0_CH0_DX5CR_DSEN(DX5CR & (1u << 6u));
    }

    /**
     * Set DX5CR's DSEN bit.
     */
    inline void set_DX5CR_DSEN()
    {
        DX5CR |= 1u << 6u;
    }

    /**
     * Clear DX5CR's DSEN bit.
     */
    inline void clear_DX5CR_DSEN()
    {
        DX5CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX5CR's DSEN bit.
     */
    inline void toggle_DX5CR_DSEN()
    {
        DX5CR ^= 1u << 6u;
    }

    /**
     * Get DX5CR's DFEN bit.
     */
    USIC0_CH0_DX5CR_DFEN get_DX5CR_DFEN()
    {
        return USIC0_CH0_DX5CR_DFEN(DX5CR & (1u << 5u));
    }

    /**
     * Set DX5CR's DFEN bit.
     */
    inline void set_DX5CR_DFEN()
    {
        DX5CR |= 1u << 5u;
    }

    /**
     * Clear DX5CR's DFEN bit.
     */
    inline void clear_DX5CR_DFEN()
    {
        DX5CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX5CR's DFEN bit.
     */
    inline void toggle_DX5CR_DFEN()
    {
        DX5CR ^= 1u << 5u;
    }

    /**
     * Get DX5CR's INSW bit.
     */
    USIC0_CH0_DX5CR_INSW get_DX5CR_INSW()
    {
        return USIC0_CH0_DX5CR_INSW(DX5CR & (1u << 4u));
    }

    /**
     * Set DX5CR's INSW bit.
     */
    inline void set_DX5CR_INSW()
    {
        DX5CR |= 1u << 4u;
    }

    /**
     * Clear DX5CR's INSW bit.
     */
    inline void clear_DX5CR_INSW()
    {
        DX5CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX5CR's INSW bit.
     */
    inline void toggle_DX5CR_INSW()
    {
        DX5CR ^= 1u << 4u;
    }

    /**
     * Get DX5CR's DSEL field.
     */
    USIC0_CH0_DX5CR_DSEL get_DX5CR_DSEL()
    {
        return USIC0_CH0_DX5CR_DSEL((DX5CR >> 0u) & 0b111u);
    }

    /**
     * Set DX5CR's DSEL field.
     */
    inline void set_DX5CR_DSEL(USIC0_CH0_DX5CR_DSEL value)
    {
        uint32_t curr = DX5CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX5CR = curr;
    }

    /**
     * Get SCTR's WLE field.
     */
    USIC0_CH0_SCTR_WLE get_SCTR_WLE()
    {
        return USIC0_CH0_SCTR_WLE((SCTR >> 24u) & 0b1111u);
    }

    /**
     * Set SCTR's WLE field.
     */
    inline void set_SCTR_WLE(USIC0_CH0_SCTR_WLE value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        SCTR = curr;
    }

    /**
     * Get SCTR's FLE field.
     */
    uint8_t get_SCTR_FLE()
    {
        return (SCTR >> 16u) & 0b111111u;
    }

    /**
     * Set SCTR's FLE field.
     */
    inline void set_SCTR_FLE(uint8_t value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b111111u << 16u);
        curr |= (value & 0b111111u) << 16u;

        SCTR = curr;
    }

    /**
     * Get SCTR's TRM field.
     */
    USIC0_CH0_SCTR_TRM get_SCTR_TRM()
    {
        return USIC0_CH0_SCTR_TRM((SCTR >> 8u) & 0b11u);
    }

    /**
     * Set SCTR's TRM field.
     */
    inline void set_SCTR_TRM(USIC0_CH0_SCTR_TRM value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        SCTR = curr;
    }

    /**
     * Get SCTR's DOCFG field.
     */
    USIC0_CH0_SCTR_DOCFG get_SCTR_DOCFG()
    {
        return USIC0_CH0_SCTR_DOCFG((SCTR >> 6u) & 0b11u);
    }

    /**
     * Set SCTR's DOCFG field.
     */
    inline void set_SCTR_DOCFG(USIC0_CH0_SCTR_DOCFG value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        SCTR = curr;
    }

    /**
     * Get SCTR's HPCDIR bit.
     */
    USIC0_CH0_SCTR_HPCDIR get_SCTR_HPCDIR()
    {
        return USIC0_CH0_SCTR_HPCDIR(SCTR & (1u << 4u));
    }

    /**
     * Set SCTR's HPCDIR bit.
     */
    inline void set_SCTR_HPCDIR()
    {
        SCTR |= 1u << 4u;
    }

    /**
     * Clear SCTR's HPCDIR bit.
     */
    inline void clear_SCTR_HPCDIR()
    {
        SCTR &= ~(1u << 4u);
    }

    /**
     * Toggle SCTR's HPCDIR bit.
     */
    inline void toggle_SCTR_HPCDIR()
    {
        SCTR ^= 1u << 4u;
    }

    /**
     * Get SCTR's DSM field.
     */
    USIC0_CH0_SCTR_DSM get_SCTR_DSM()
    {
        return USIC0_CH0_SCTR_DSM((SCTR >> 2u) & 0b11u);
    }

    /**
     * Set SCTR's DSM field.
     */
    inline void set_SCTR_DSM(USIC0_CH0_SCTR_DSM value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        SCTR = curr;
    }

    /**
     * Get SCTR's PDL bit.
     */
    USIC0_CH0_SCTR_PDL get_SCTR_PDL()
    {
        return USIC0_CH0_SCTR_PDL(SCTR & (1u << 1u));
    }

    /**
     * Set SCTR's PDL bit.
     */
    inline void set_SCTR_PDL()
    {
        SCTR |= 1u << 1u;
    }

    /**
     * Clear SCTR's PDL bit.
     */
    inline void clear_SCTR_PDL()
    {
        SCTR &= ~(1u << 1u);
    }

    /**
     * Toggle SCTR's PDL bit.
     */
    inline void toggle_SCTR_PDL()
    {
        SCTR ^= 1u << 1u;
    }

    /**
     * Get SCTR's SDIR bit.
     */
    USIC0_CH0_SCTR_SDIR get_SCTR_SDIR()
    {
        return USIC0_CH0_SCTR_SDIR(SCTR & (1u << 0u));
    }

    /**
     * Set SCTR's SDIR bit.
     */
    inline void set_SCTR_SDIR()
    {
        SCTR |= 1u << 0u;
    }

    /**
     * Clear SCTR's SDIR bit.
     */
    inline void clear_SCTR_SDIR()
    {
        SCTR &= ~(1u << 0u);
    }

    /**
     * Toggle SCTR's SDIR bit.
     */
    inline void toggle_SCTR_SDIR()
    {
        SCTR ^= 1u << 0u;
    }

    /**
     * Get TCSR's TE bit.
     */
    USIC0_CH0_TCSR_TE get_TCSR_TE()
    {
        return USIC0_CH0_TCSR_TE(TCSR & (1u << 28u));
    }

    /**
     * Get TCSR's TVC bit.
     */
    USIC0_CH0_TCSR_TVC get_TCSR_TVC()
    {
        return USIC0_CH0_TCSR_TVC(TCSR & (1u << 27u));
    }

    /**
     * Get TCSR's TV bit.
     */
    USIC0_CH0_TCSR_TV get_TCSR_TV()
    {
        return USIC0_CH0_TCSR_TV(TCSR & (1u << 26u));
    }

    /**
     * Get TCSR's TSOF bit.
     */
    USIC0_CH0_TCSR_TSOF get_TCSR_TSOF()
    {
        return USIC0_CH0_TCSR_TSOF(TCSR & (1u << 24u));
    }

    /**
     * Get TCSR's WA bit.
     */
    USIC0_CH0_TCSR_WA get_TCSR_WA()
    {
        return USIC0_CH0_TCSR_WA(TCSR & (1u << 13u));
    }

    /**
     * Set TCSR's WA bit.
     */
    inline void set_TCSR_WA()
    {
        TCSR |= 1u << 13u;
    }

    /**
     * Clear TCSR's WA bit.
     */
    inline void clear_TCSR_WA()
    {
        TCSR &= ~(1u << 13u);
    }

    /**
     * Toggle TCSR's WA bit.
     */
    inline void toggle_TCSR_WA()
    {
        TCSR ^= 1u << 13u;
    }

    /**
     * Get TCSR's TDVTR bit.
     */
    USIC0_CH0_TCSR_TDVTR get_TCSR_TDVTR()
    {
        return USIC0_CH0_TCSR_TDVTR(TCSR & (1u << 12u));
    }

    /**
     * Set TCSR's TDVTR bit.
     */
    inline void set_TCSR_TDVTR()
    {
        TCSR |= 1u << 12u;
    }

    /**
     * Clear TCSR's TDVTR bit.
     */
    inline void clear_TCSR_TDVTR()
    {
        TCSR &= ~(1u << 12u);
    }

    /**
     * Toggle TCSR's TDVTR bit.
     */
    inline void toggle_TCSR_TDVTR()
    {
        TCSR ^= 1u << 12u;
    }

    /**
     * Get TCSR's TDEN field.
     */
    USIC0_CH0_TCSR_TDEN get_TCSR_TDEN()
    {
        return USIC0_CH0_TCSR_TDEN((TCSR >> 10u) & 0b11u);
    }

    /**
     * Set TCSR's TDEN field.
     */
    inline void set_TCSR_TDEN(USIC0_CH0_TCSR_TDEN value)
    {
        uint32_t curr = TCSR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        TCSR = curr;
    }

    /**
     * Get TCSR's TDSSM bit.
     */
    USIC0_CH0_TCSR_TDSSM get_TCSR_TDSSM()
    {
        return USIC0_CH0_TCSR_TDSSM(TCSR & (1u << 8u));
    }

    /**
     * Set TCSR's TDSSM bit.
     */
    inline void set_TCSR_TDSSM()
    {
        TCSR |= 1u << 8u;
    }

    /**
     * Clear TCSR's TDSSM bit.
     */
    inline void clear_TCSR_TDSSM()
    {
        TCSR &= ~(1u << 8u);
    }

    /**
     * Toggle TCSR's TDSSM bit.
     */
    inline void toggle_TCSR_TDSSM()
    {
        TCSR ^= 1u << 8u;
    }

    /**
     * Get TCSR's TDV bit.
     */
    USIC0_CH0_TCSR_TDV get_TCSR_TDV()
    {
        return USIC0_CH0_TCSR_TDV(TCSR & (1u << 7u));
    }

    /**
     * Get TCSR's EOF bit.
     */
    USIC0_CH0_TCSR_EOF get_TCSR_EOF()
    {
        return USIC0_CH0_TCSR_EOF(TCSR & (1u << 6u));
    }

    /**
     * Set TCSR's EOF bit.
     */
    inline void set_TCSR_EOF()
    {
        TCSR |= 1u << 6u;
    }

    /**
     * Clear TCSR's EOF bit.
     */
    inline void clear_TCSR_EOF()
    {
        TCSR &= ~(1u << 6u);
    }

    /**
     * Toggle TCSR's EOF bit.
     */
    inline void toggle_TCSR_EOF()
    {
        TCSR ^= 1u << 6u;
    }

    /**
     * Get TCSR's SOF bit.
     */
    USIC0_CH0_TCSR_SOF get_TCSR_SOF()
    {
        return USIC0_CH0_TCSR_SOF(TCSR & (1u << 5u));
    }

    /**
     * Set TCSR's SOF bit.
     */
    inline void set_TCSR_SOF()
    {
        TCSR |= 1u << 5u;
    }

    /**
     * Clear TCSR's SOF bit.
     */
    inline void clear_TCSR_SOF()
    {
        TCSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCSR's SOF bit.
     */
    inline void toggle_TCSR_SOF()
    {
        TCSR ^= 1u << 5u;
    }

    /**
     * Get TCSR's HPCMD bit.
     */
    USIC0_CH0_TCSR_HPCMD get_TCSR_HPCMD()
    {
        return USIC0_CH0_TCSR_HPCMD(TCSR & (1u << 4u));
    }

    /**
     * Set TCSR's HPCMD bit.
     */
    inline void set_TCSR_HPCMD()
    {
        TCSR |= 1u << 4u;
    }

    /**
     * Clear TCSR's HPCMD bit.
     */
    inline void clear_TCSR_HPCMD()
    {
        TCSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCSR's HPCMD bit.
     */
    inline void toggle_TCSR_HPCMD()
    {
        TCSR ^= 1u << 4u;
    }

    /**
     * Get TCSR's WAMD bit.
     */
    USIC0_CH0_TCSR_WAMD get_TCSR_WAMD()
    {
        return USIC0_CH0_TCSR_WAMD(TCSR & (1u << 3u));
    }

    /**
     * Set TCSR's WAMD bit.
     */
    inline void set_TCSR_WAMD()
    {
        TCSR |= 1u << 3u;
    }

    /**
     * Clear TCSR's WAMD bit.
     */
    inline void clear_TCSR_WAMD()
    {
        TCSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCSR's WAMD bit.
     */
    inline void toggle_TCSR_WAMD()
    {
        TCSR ^= 1u << 3u;
    }

    /**
     * Get TCSR's FLEMD bit.
     */
    USIC0_CH0_TCSR_FLEMD get_TCSR_FLEMD()
    {
        return USIC0_CH0_TCSR_FLEMD(TCSR & (1u << 2u));
    }

    /**
     * Set TCSR's FLEMD bit.
     */
    inline void set_TCSR_FLEMD()
    {
        TCSR |= 1u << 2u;
    }

    /**
     * Clear TCSR's FLEMD bit.
     */
    inline void clear_TCSR_FLEMD()
    {
        TCSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCSR's FLEMD bit.
     */
    inline void toggle_TCSR_FLEMD()
    {
        TCSR ^= 1u << 2u;
    }

    /**
     * Get TCSR's SELMD bit.
     */
    USIC0_CH0_TCSR_SELMD get_TCSR_SELMD()
    {
        return USIC0_CH0_TCSR_SELMD(TCSR & (1u << 1u));
    }

    /**
     * Set TCSR's SELMD bit.
     */
    inline void set_TCSR_SELMD()
    {
        TCSR |= 1u << 1u;
    }

    /**
     * Clear TCSR's SELMD bit.
     */
    inline void clear_TCSR_SELMD()
    {
        TCSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCSR's SELMD bit.
     */
    inline void toggle_TCSR_SELMD()
    {
        TCSR ^= 1u << 1u;
    }

    /**
     * Get TCSR's WLEMD bit.
     */
    USIC0_CH0_TCSR_WLEMD get_TCSR_WLEMD()
    {
        return USIC0_CH0_TCSR_WLEMD(TCSR & (1u << 0u));
    }

    /**
     * Set TCSR's WLEMD bit.
     */
    inline void set_TCSR_WLEMD()
    {
        TCSR |= 1u << 0u;
    }

    /**
     * Clear TCSR's WLEMD bit.
     */
    inline void clear_TCSR_WLEMD()
    {
        TCSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCSR's WLEMD bit.
     */
    inline void toggle_TCSR_WLEMD()
    {
        TCSR ^= 1u << 0u;
    }

    /**
     * Get PCR's CTR31 bit.
     */
    bool get_PCR_CTR31()
    {
        return PCR & (1u << 31u);
    }

    /**
     * Set PCR's CTR31 bit.
     */
    inline void set_PCR_CTR31()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's CTR31 bit.
     */
    inline void clear_PCR_CTR31()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's CTR31 bit.
     */
    inline void toggle_PCR_CTR31()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's CTR30 bit.
     */
    bool get_PCR_CTR30()
    {
        return PCR & (1u << 30u);
    }

    /**
     * Set PCR's CTR30 bit.
     */
    inline void set_PCR_CTR30()
    {
        PCR |= 1u << 30u;
    }

    /**
     * Clear PCR's CTR30 bit.
     */
    inline void clear_PCR_CTR30()
    {
        PCR &= ~(1u << 30u);
    }

    /**
     * Toggle PCR's CTR30 bit.
     */
    inline void toggle_PCR_CTR30()
    {
        PCR ^= 1u << 30u;
    }

    /**
     * Get PCR's CTR29 bit.
     */
    bool get_PCR_CTR29()
    {
        return PCR & (1u << 29u);
    }

    /**
     * Set PCR's CTR29 bit.
     */
    inline void set_PCR_CTR29()
    {
        PCR |= 1u << 29u;
    }

    /**
     * Clear PCR's CTR29 bit.
     */
    inline void clear_PCR_CTR29()
    {
        PCR &= ~(1u << 29u);
    }

    /**
     * Toggle PCR's CTR29 bit.
     */
    inline void toggle_PCR_CTR29()
    {
        PCR ^= 1u << 29u;
    }

    /**
     * Get PCR's CTR28 bit.
     */
    bool get_PCR_CTR28()
    {
        return PCR & (1u << 28u);
    }

    /**
     * Set PCR's CTR28 bit.
     */
    inline void set_PCR_CTR28()
    {
        PCR |= 1u << 28u;
    }

    /**
     * Clear PCR's CTR28 bit.
     */
    inline void clear_PCR_CTR28()
    {
        PCR &= ~(1u << 28u);
    }

    /**
     * Toggle PCR's CTR28 bit.
     */
    inline void toggle_PCR_CTR28()
    {
        PCR ^= 1u << 28u;
    }

    /**
     * Get PCR's CTR27 bit.
     */
    bool get_PCR_CTR27()
    {
        return PCR & (1u << 27u);
    }

    /**
     * Set PCR's CTR27 bit.
     */
    inline void set_PCR_CTR27()
    {
        PCR |= 1u << 27u;
    }

    /**
     * Clear PCR's CTR27 bit.
     */
    inline void clear_PCR_CTR27()
    {
        PCR &= ~(1u << 27u);
    }

    /**
     * Toggle PCR's CTR27 bit.
     */
    inline void toggle_PCR_CTR27()
    {
        PCR ^= 1u << 27u;
    }

    /**
     * Get PCR's CTR26 bit.
     */
    bool get_PCR_CTR26()
    {
        return PCR & (1u << 26u);
    }

    /**
     * Set PCR's CTR26 bit.
     */
    inline void set_PCR_CTR26()
    {
        PCR |= 1u << 26u;
    }

    /**
     * Clear PCR's CTR26 bit.
     */
    inline void clear_PCR_CTR26()
    {
        PCR &= ~(1u << 26u);
    }

    /**
     * Toggle PCR's CTR26 bit.
     */
    inline void toggle_PCR_CTR26()
    {
        PCR ^= 1u << 26u;
    }

    /**
     * Get PCR's CTR25 bit.
     */
    bool get_PCR_CTR25()
    {
        return PCR & (1u << 25u);
    }

    /**
     * Set PCR's CTR25 bit.
     */
    inline void set_PCR_CTR25()
    {
        PCR |= 1u << 25u;
    }

    /**
     * Clear PCR's CTR25 bit.
     */
    inline void clear_PCR_CTR25()
    {
        PCR &= ~(1u << 25u);
    }

    /**
     * Toggle PCR's CTR25 bit.
     */
    inline void toggle_PCR_CTR25()
    {
        PCR ^= 1u << 25u;
    }

    /**
     * Get PCR's CTR24 bit.
     */
    bool get_PCR_CTR24()
    {
        return PCR & (1u << 24u);
    }

    /**
     * Set PCR's CTR24 bit.
     */
    inline void set_PCR_CTR24()
    {
        PCR |= 1u << 24u;
    }

    /**
     * Clear PCR's CTR24 bit.
     */
    inline void clear_PCR_CTR24()
    {
        PCR &= ~(1u << 24u);
    }

    /**
     * Toggle PCR's CTR24 bit.
     */
    inline void toggle_PCR_CTR24()
    {
        PCR ^= 1u << 24u;
    }

    /**
     * Get PCR's CTR23 bit.
     */
    bool get_PCR_CTR23()
    {
        return PCR & (1u << 23u);
    }

    /**
     * Set PCR's CTR23 bit.
     */
    inline void set_PCR_CTR23()
    {
        PCR |= 1u << 23u;
    }

    /**
     * Clear PCR's CTR23 bit.
     */
    inline void clear_PCR_CTR23()
    {
        PCR &= ~(1u << 23u);
    }

    /**
     * Toggle PCR's CTR23 bit.
     */
    inline void toggle_PCR_CTR23()
    {
        PCR ^= 1u << 23u;
    }

    /**
     * Get PCR's CTR22 bit.
     */
    bool get_PCR_CTR22()
    {
        return PCR & (1u << 22u);
    }

    /**
     * Set PCR's CTR22 bit.
     */
    inline void set_PCR_CTR22()
    {
        PCR |= 1u << 22u;
    }

    /**
     * Clear PCR's CTR22 bit.
     */
    inline void clear_PCR_CTR22()
    {
        PCR &= ~(1u << 22u);
    }

    /**
     * Toggle PCR's CTR22 bit.
     */
    inline void toggle_PCR_CTR22()
    {
        PCR ^= 1u << 22u;
    }

    /**
     * Get PCR's CTR21 bit.
     */
    bool get_PCR_CTR21()
    {
        return PCR & (1u << 21u);
    }

    /**
     * Set PCR's CTR21 bit.
     */
    inline void set_PCR_CTR21()
    {
        PCR |= 1u << 21u;
    }

    /**
     * Clear PCR's CTR21 bit.
     */
    inline void clear_PCR_CTR21()
    {
        PCR &= ~(1u << 21u);
    }

    /**
     * Toggle PCR's CTR21 bit.
     */
    inline void toggle_PCR_CTR21()
    {
        PCR ^= 1u << 21u;
    }

    /**
     * Get PCR's CTR20 bit.
     */
    bool get_PCR_CTR20()
    {
        return PCR & (1u << 20u);
    }

    /**
     * Set PCR's CTR20 bit.
     */
    inline void set_PCR_CTR20()
    {
        PCR |= 1u << 20u;
    }

    /**
     * Clear PCR's CTR20 bit.
     */
    inline void clear_PCR_CTR20()
    {
        PCR &= ~(1u << 20u);
    }

    /**
     * Toggle PCR's CTR20 bit.
     */
    inline void toggle_PCR_CTR20()
    {
        PCR ^= 1u << 20u;
    }

    /**
     * Get PCR's CTR19 bit.
     */
    bool get_PCR_CTR19()
    {
        return PCR & (1u << 19u);
    }

    /**
     * Set PCR's CTR19 bit.
     */
    inline void set_PCR_CTR19()
    {
        PCR |= 1u << 19u;
    }

    /**
     * Clear PCR's CTR19 bit.
     */
    inline void clear_PCR_CTR19()
    {
        PCR &= ~(1u << 19u);
    }

    /**
     * Toggle PCR's CTR19 bit.
     */
    inline void toggle_PCR_CTR19()
    {
        PCR ^= 1u << 19u;
    }

    /**
     * Get PCR's CTR18 bit.
     */
    bool get_PCR_CTR18()
    {
        return PCR & (1u << 18u);
    }

    /**
     * Set PCR's CTR18 bit.
     */
    inline void set_PCR_CTR18()
    {
        PCR |= 1u << 18u;
    }

    /**
     * Clear PCR's CTR18 bit.
     */
    inline void clear_PCR_CTR18()
    {
        PCR &= ~(1u << 18u);
    }

    /**
     * Toggle PCR's CTR18 bit.
     */
    inline void toggle_PCR_CTR18()
    {
        PCR ^= 1u << 18u;
    }

    /**
     * Get PCR's CTR17 bit.
     */
    bool get_PCR_CTR17()
    {
        return PCR & (1u << 17u);
    }

    /**
     * Set PCR's CTR17 bit.
     */
    inline void set_PCR_CTR17()
    {
        PCR |= 1u << 17u;
    }

    /**
     * Clear PCR's CTR17 bit.
     */
    inline void clear_PCR_CTR17()
    {
        PCR &= ~(1u << 17u);
    }

    /**
     * Toggle PCR's CTR17 bit.
     */
    inline void toggle_PCR_CTR17()
    {
        PCR ^= 1u << 17u;
    }

    /**
     * Get PCR's CTR16 bit.
     */
    bool get_PCR_CTR16()
    {
        return PCR & (1u << 16u);
    }

    /**
     * Set PCR's CTR16 bit.
     */
    inline void set_PCR_CTR16()
    {
        PCR |= 1u << 16u;
    }

    /**
     * Clear PCR's CTR16 bit.
     */
    inline void clear_PCR_CTR16()
    {
        PCR &= ~(1u << 16u);
    }

    /**
     * Toggle PCR's CTR16 bit.
     */
    inline void toggle_PCR_CTR16()
    {
        PCR ^= 1u << 16u;
    }

    /**
     * Get PCR's CTR15 bit.
     */
    bool get_PCR_CTR15()
    {
        return PCR & (1u << 15u);
    }

    /**
     * Set PCR's CTR15 bit.
     */
    inline void set_PCR_CTR15()
    {
        PCR |= 1u << 15u;
    }

    /**
     * Clear PCR's CTR15 bit.
     */
    inline void clear_PCR_CTR15()
    {
        PCR &= ~(1u << 15u);
    }

    /**
     * Toggle PCR's CTR15 bit.
     */
    inline void toggle_PCR_CTR15()
    {
        PCR ^= 1u << 15u;
    }

    /**
     * Get PCR's CTR14 bit.
     */
    bool get_PCR_CTR14()
    {
        return PCR & (1u << 14u);
    }

    /**
     * Set PCR's CTR14 bit.
     */
    inline void set_PCR_CTR14()
    {
        PCR |= 1u << 14u;
    }

    /**
     * Clear PCR's CTR14 bit.
     */
    inline void clear_PCR_CTR14()
    {
        PCR &= ~(1u << 14u);
    }

    /**
     * Toggle PCR's CTR14 bit.
     */
    inline void toggle_PCR_CTR14()
    {
        PCR ^= 1u << 14u;
    }

    /**
     * Get PCR's CTR13 bit.
     */
    bool get_PCR_CTR13()
    {
        return PCR & (1u << 13u);
    }

    /**
     * Set PCR's CTR13 bit.
     */
    inline void set_PCR_CTR13()
    {
        PCR |= 1u << 13u;
    }

    /**
     * Clear PCR's CTR13 bit.
     */
    inline void clear_PCR_CTR13()
    {
        PCR &= ~(1u << 13u);
    }

    /**
     * Toggle PCR's CTR13 bit.
     */
    inline void toggle_PCR_CTR13()
    {
        PCR ^= 1u << 13u;
    }

    /**
     * Get PCR's CTR12 bit.
     */
    bool get_PCR_CTR12()
    {
        return PCR & (1u << 12u);
    }

    /**
     * Set PCR's CTR12 bit.
     */
    inline void set_PCR_CTR12()
    {
        PCR |= 1u << 12u;
    }

    /**
     * Clear PCR's CTR12 bit.
     */
    inline void clear_PCR_CTR12()
    {
        PCR &= ~(1u << 12u);
    }

    /**
     * Toggle PCR's CTR12 bit.
     */
    inline void toggle_PCR_CTR12()
    {
        PCR ^= 1u << 12u;
    }

    /**
     * Get PCR's CTR11 bit.
     */
    bool get_PCR_CTR11()
    {
        return PCR & (1u << 11u);
    }

    /**
     * Set PCR's CTR11 bit.
     */
    inline void set_PCR_CTR11()
    {
        PCR |= 1u << 11u;
    }

    /**
     * Clear PCR's CTR11 bit.
     */
    inline void clear_PCR_CTR11()
    {
        PCR &= ~(1u << 11u);
    }

    /**
     * Toggle PCR's CTR11 bit.
     */
    inline void toggle_PCR_CTR11()
    {
        PCR ^= 1u << 11u;
    }

    /**
     * Get PCR's CTR10 bit.
     */
    bool get_PCR_CTR10()
    {
        return PCR & (1u << 10u);
    }

    /**
     * Set PCR's CTR10 bit.
     */
    inline void set_PCR_CTR10()
    {
        PCR |= 1u << 10u;
    }

    /**
     * Clear PCR's CTR10 bit.
     */
    inline void clear_PCR_CTR10()
    {
        PCR &= ~(1u << 10u);
    }

    /**
     * Toggle PCR's CTR10 bit.
     */
    inline void toggle_PCR_CTR10()
    {
        PCR ^= 1u << 10u;
    }

    /**
     * Get PCR's CTR9 bit.
     */
    bool get_PCR_CTR9()
    {
        return PCR & (1u << 9u);
    }

    /**
     * Set PCR's CTR9 bit.
     */
    inline void set_PCR_CTR9()
    {
        PCR |= 1u << 9u;
    }

    /**
     * Clear PCR's CTR9 bit.
     */
    inline void clear_PCR_CTR9()
    {
        PCR &= ~(1u << 9u);
    }

    /**
     * Toggle PCR's CTR9 bit.
     */
    inline void toggle_PCR_CTR9()
    {
        PCR ^= 1u << 9u;
    }

    /**
     * Get PCR's CTR8 bit.
     */
    bool get_PCR_CTR8()
    {
        return PCR & (1u << 8u);
    }

    /**
     * Set PCR's CTR8 bit.
     */
    inline void set_PCR_CTR8()
    {
        PCR |= 1u << 8u;
    }

    /**
     * Clear PCR's CTR8 bit.
     */
    inline void clear_PCR_CTR8()
    {
        PCR &= ~(1u << 8u);
    }

    /**
     * Toggle PCR's CTR8 bit.
     */
    inline void toggle_PCR_CTR8()
    {
        PCR ^= 1u << 8u;
    }

    /**
     * Get PCR's CTR7 bit.
     */
    bool get_PCR_CTR7()
    {
        return PCR & (1u << 7u);
    }

    /**
     * Set PCR's CTR7 bit.
     */
    inline void set_PCR_CTR7()
    {
        PCR |= 1u << 7u;
    }

    /**
     * Clear PCR's CTR7 bit.
     */
    inline void clear_PCR_CTR7()
    {
        PCR &= ~(1u << 7u);
    }

    /**
     * Toggle PCR's CTR7 bit.
     */
    inline void toggle_PCR_CTR7()
    {
        PCR ^= 1u << 7u;
    }

    /**
     * Get PCR's CTR6 bit.
     */
    bool get_PCR_CTR6()
    {
        return PCR & (1u << 6u);
    }

    /**
     * Set PCR's CTR6 bit.
     */
    inline void set_PCR_CTR6()
    {
        PCR |= 1u << 6u;
    }

    /**
     * Clear PCR's CTR6 bit.
     */
    inline void clear_PCR_CTR6()
    {
        PCR &= ~(1u << 6u);
    }

    /**
     * Toggle PCR's CTR6 bit.
     */
    inline void toggle_PCR_CTR6()
    {
        PCR ^= 1u << 6u;
    }

    /**
     * Get PCR's CTR5 bit.
     */
    bool get_PCR_CTR5()
    {
        return PCR & (1u << 5u);
    }

    /**
     * Set PCR's CTR5 bit.
     */
    inline void set_PCR_CTR5()
    {
        PCR |= 1u << 5u;
    }

    /**
     * Clear PCR's CTR5 bit.
     */
    inline void clear_PCR_CTR5()
    {
        PCR &= ~(1u << 5u);
    }

    /**
     * Toggle PCR's CTR5 bit.
     */
    inline void toggle_PCR_CTR5()
    {
        PCR ^= 1u << 5u;
    }

    /**
     * Get PCR's CTR4 bit.
     */
    bool get_PCR_CTR4()
    {
        return PCR & (1u << 4u);
    }

    /**
     * Set PCR's CTR4 bit.
     */
    inline void set_PCR_CTR4()
    {
        PCR |= 1u << 4u;
    }

    /**
     * Clear PCR's CTR4 bit.
     */
    inline void clear_PCR_CTR4()
    {
        PCR &= ~(1u << 4u);
    }

    /**
     * Toggle PCR's CTR4 bit.
     */
    inline void toggle_PCR_CTR4()
    {
        PCR ^= 1u << 4u;
    }

    /**
     * Get PCR's CTR3 bit.
     */
    bool get_PCR_CTR3()
    {
        return PCR & (1u << 3u);
    }

    /**
     * Set PCR's CTR3 bit.
     */
    inline void set_PCR_CTR3()
    {
        PCR |= 1u << 3u;
    }

    /**
     * Clear PCR's CTR3 bit.
     */
    inline void clear_PCR_CTR3()
    {
        PCR &= ~(1u << 3u);
    }

    /**
     * Toggle PCR's CTR3 bit.
     */
    inline void toggle_PCR_CTR3()
    {
        PCR ^= 1u << 3u;
    }

    /**
     * Get PCR's CTR2 bit.
     */
    bool get_PCR_CTR2()
    {
        return PCR & (1u << 2u);
    }

    /**
     * Set PCR's CTR2 bit.
     */
    inline void set_PCR_CTR2()
    {
        PCR |= 1u << 2u;
    }

    /**
     * Clear PCR's CTR2 bit.
     */
    inline void clear_PCR_CTR2()
    {
        PCR &= ~(1u << 2u);
    }

    /**
     * Toggle PCR's CTR2 bit.
     */
    inline void toggle_PCR_CTR2()
    {
        PCR ^= 1u << 2u;
    }

    /**
     * Get PCR's CTR1 bit.
     */
    bool get_PCR_CTR1()
    {
        return PCR & (1u << 1u);
    }

    /**
     * Set PCR's CTR1 bit.
     */
    inline void set_PCR_CTR1()
    {
        PCR |= 1u << 1u;
    }

    /**
     * Clear PCR's CTR1 bit.
     */
    inline void clear_PCR_CTR1()
    {
        PCR &= ~(1u << 1u);
    }

    /**
     * Toggle PCR's CTR1 bit.
     */
    inline void toggle_PCR_CTR1()
    {
        PCR ^= 1u << 1u;
    }

    /**
     * Get PCR's CTR0 bit.
     */
    bool get_PCR_CTR0()
    {
        return PCR & (1u << 0u);
    }

    /**
     * Set PCR's CTR0 bit.
     */
    inline void set_PCR_CTR0()
    {
        PCR |= 1u << 0u;
    }

    /**
     * Clear PCR's CTR0 bit.
     */
    inline void clear_PCR_CTR0()
    {
        PCR &= ~(1u << 0u);
    }

    /**
     * Toggle PCR's CTR0 bit.
     */
    inline void toggle_PCR_CTR0()
    {
        PCR ^= 1u << 0u;
    }

    /**
     * Get PCR's MCLK bit.
     */
    USIC0_CH0_PCR_ASCMode_MCLK get_PCR_ASCMode_MCLK()
    {
        return USIC0_CH0_PCR_ASCMode_MCLK(PCR_ASCMode & (1u << 31u));
    }

    /**
     * Set PCR's MCLK bit.
     */
    inline void set_PCR_ASCMode_MCLK()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's MCLK bit.
     */
    inline void clear_PCR_ASCMode_MCLK()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's MCLK bit.
     */
    inline void toggle_PCR_ASCMode_MCLK()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's TSTEN bit.
     */
    USIC0_CH0_PCR_ASCMode_TSTEN get_PCR_ASCMode_TSTEN()
    {
        return USIC0_CH0_PCR_ASCMode_TSTEN(PCR_ASCMode & (1u << 17u));
    }

    /**
     * Set PCR's TSTEN bit.
     */
    inline void set_PCR_ASCMode_TSTEN()
    {
        PCR |= 1u << 17u;
    }

    /**
     * Clear PCR's TSTEN bit.
     */
    inline void clear_PCR_ASCMode_TSTEN()
    {
        PCR &= ~(1u << 17u);
    }

    /**
     * Toggle PCR's TSTEN bit.
     */
    inline void toggle_PCR_ASCMode_TSTEN()
    {
        PCR ^= 1u << 17u;
    }

    /**
     * Get PCR's RSTEN bit.
     */
    USIC0_CH0_PCR_ASCMode_RSTEN get_PCR_ASCMode_RSTEN()
    {
        return USIC0_CH0_PCR_ASCMode_RSTEN(PCR_ASCMode & (1u << 16u));
    }

    /**
     * Set PCR's RSTEN bit.
     */
    inline void set_PCR_ASCMode_RSTEN()
    {
        PCR |= 1u << 16u;
    }

    /**
     * Clear PCR's RSTEN bit.
     */
    inline void clear_PCR_ASCMode_RSTEN()
    {
        PCR &= ~(1u << 16u);
    }

    /**
     * Toggle PCR's RSTEN bit.
     */
    inline void toggle_PCR_ASCMode_RSTEN()
    {
        PCR ^= 1u << 16u;
    }

    /**
     * Get PCR's PL field.
     */
    USIC0_CH0_PCR_ASCMode_PL get_PCR_ASCMode_PL()
    {
        return USIC0_CH0_PCR_ASCMode_PL((PCR_ASCMode >> 13u) & 0b111u);
    }

    /**
     * Set PCR's PL field.
     */
    inline void set_PCR_ASCMode_PL(USIC0_CH0_PCR_ASCMode_PL value)
    {
        uint32_t curr = PCR_ASCMode;

        curr &= ~(0b111u << 13u);
        curr |= (std::to_underlying(value) & 0b111u) << 13u;

        PCR_ASCMode = curr;
    }

    /**
     * Get PCR's SP field.
     */
    uint8_t get_PCR_ASCMode_SP()
    {
        return (PCR_ASCMode >> 8u) & 0b11111u;
    }

    /**
     * Set PCR's SP field.
     */
    inline void set_PCR_ASCMode_SP(uint8_t value)
    {
        uint32_t curr = PCR_ASCMode;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        PCR_ASCMode = curr;
    }

    /**
     * Get PCR's FFIEN bit.
     */
    USIC0_CH0_PCR_ASCMode_FFIEN get_PCR_ASCMode_FFIEN()
    {
        return USIC0_CH0_PCR_ASCMode_FFIEN(PCR_ASCMode & (1u << 7u));
    }

    /**
     * Set PCR's FFIEN bit.
     */
    inline void set_PCR_ASCMode_FFIEN()
    {
        PCR |= 1u << 7u;
    }

    /**
     * Clear PCR's FFIEN bit.
     */
    inline void clear_PCR_ASCMode_FFIEN()
    {
        PCR &= ~(1u << 7u);
    }

    /**
     * Toggle PCR's FFIEN bit.
     */
    inline void toggle_PCR_ASCMode_FFIEN()
    {
        PCR ^= 1u << 7u;
    }

    /**
     * Get PCR's FEIEN bit.
     */
    USIC0_CH0_PCR_ASCMode_FEIEN get_PCR_ASCMode_FEIEN()
    {
        return USIC0_CH0_PCR_ASCMode_FEIEN(PCR_ASCMode & (1u << 6u));
    }

    /**
     * Set PCR's FEIEN bit.
     */
    inline void set_PCR_ASCMode_FEIEN()
    {
        PCR |= 1u << 6u;
    }

    /**
     * Clear PCR's FEIEN bit.
     */
    inline void clear_PCR_ASCMode_FEIEN()
    {
        PCR &= ~(1u << 6u);
    }

    /**
     * Toggle PCR's FEIEN bit.
     */
    inline void toggle_PCR_ASCMode_FEIEN()
    {
        PCR ^= 1u << 6u;
    }

    /**
     * Get PCR's RNIEN bit.
     */
    USIC0_CH0_PCR_ASCMode_RNIEN get_PCR_ASCMode_RNIEN()
    {
        return USIC0_CH0_PCR_ASCMode_RNIEN(PCR_ASCMode & (1u << 5u));
    }

    /**
     * Set PCR's RNIEN bit.
     */
    inline void set_PCR_ASCMode_RNIEN()
    {
        PCR |= 1u << 5u;
    }

    /**
     * Clear PCR's RNIEN bit.
     */
    inline void clear_PCR_ASCMode_RNIEN()
    {
        PCR &= ~(1u << 5u);
    }

    /**
     * Toggle PCR's RNIEN bit.
     */
    inline void toggle_PCR_ASCMode_RNIEN()
    {
        PCR ^= 1u << 5u;
    }

    /**
     * Get PCR's CDEN bit.
     */
    USIC0_CH0_PCR_ASCMode_CDEN get_PCR_ASCMode_CDEN()
    {
        return USIC0_CH0_PCR_ASCMode_CDEN(PCR_ASCMode & (1u << 4u));
    }

    /**
     * Set PCR's CDEN bit.
     */
    inline void set_PCR_ASCMode_CDEN()
    {
        PCR |= 1u << 4u;
    }

    /**
     * Clear PCR's CDEN bit.
     */
    inline void clear_PCR_ASCMode_CDEN()
    {
        PCR &= ~(1u << 4u);
    }

    /**
     * Toggle PCR's CDEN bit.
     */
    inline void toggle_PCR_ASCMode_CDEN()
    {
        PCR ^= 1u << 4u;
    }

    /**
     * Get PCR's SBIEN bit.
     */
    USIC0_CH0_PCR_ASCMode_SBIEN get_PCR_ASCMode_SBIEN()
    {
        return USIC0_CH0_PCR_ASCMode_SBIEN(PCR_ASCMode & (1u << 3u));
    }

    /**
     * Set PCR's SBIEN bit.
     */
    inline void set_PCR_ASCMode_SBIEN()
    {
        PCR |= 1u << 3u;
    }

    /**
     * Clear PCR's SBIEN bit.
     */
    inline void clear_PCR_ASCMode_SBIEN()
    {
        PCR &= ~(1u << 3u);
    }

    /**
     * Toggle PCR's SBIEN bit.
     */
    inline void toggle_PCR_ASCMode_SBIEN()
    {
        PCR ^= 1u << 3u;
    }

    /**
     * Get PCR's IDM bit.
     */
    USIC0_CH0_PCR_ASCMode_IDM get_PCR_ASCMode_IDM()
    {
        return USIC0_CH0_PCR_ASCMode_IDM(PCR_ASCMode & (1u << 2u));
    }

    /**
     * Set PCR's IDM bit.
     */
    inline void set_PCR_ASCMode_IDM()
    {
        PCR |= 1u << 2u;
    }

    /**
     * Clear PCR's IDM bit.
     */
    inline void clear_PCR_ASCMode_IDM()
    {
        PCR &= ~(1u << 2u);
    }

    /**
     * Toggle PCR's IDM bit.
     */
    inline void toggle_PCR_ASCMode_IDM()
    {
        PCR ^= 1u << 2u;
    }

    /**
     * Get PCR's STPB bit.
     */
    USIC0_CH0_PCR_ASCMode_STPB get_PCR_ASCMode_STPB()
    {
        return USIC0_CH0_PCR_ASCMode_STPB(PCR_ASCMode & (1u << 1u));
    }

    /**
     * Set PCR's STPB bit.
     */
    inline void set_PCR_ASCMode_STPB()
    {
        PCR |= 1u << 1u;
    }

    /**
     * Clear PCR's STPB bit.
     */
    inline void clear_PCR_ASCMode_STPB()
    {
        PCR &= ~(1u << 1u);
    }

    /**
     * Toggle PCR's STPB bit.
     */
    inline void toggle_PCR_ASCMode_STPB()
    {
        PCR ^= 1u << 1u;
    }

    /**
     * Get PCR's SMD bit.
     */
    USIC0_CH0_PCR_ASCMode_SMD get_PCR_ASCMode_SMD()
    {
        return USIC0_CH0_PCR_ASCMode_SMD(PCR_ASCMode & (1u << 0u));
    }

    /**
     * Set PCR's SMD bit.
     */
    inline void set_PCR_ASCMode_SMD()
    {
        PCR |= 1u << 0u;
    }

    /**
     * Clear PCR's SMD bit.
     */
    inline void clear_PCR_ASCMode_SMD()
    {
        PCR &= ~(1u << 0u);
    }

    /**
     * Toggle PCR's SMD bit.
     */
    inline void toggle_PCR_ASCMode_SMD()
    {
        PCR ^= 1u << 0u;
    }

    /**
     * Get PCR's MCLK bit.
     */
    USIC0_CH0_PCR_SSCMode_MCLK get_PCR_SSCMode_MCLK()
    {
        return USIC0_CH0_PCR_SSCMode_MCLK(PCR_SSCMode & (1u << 31u));
    }

    /**
     * Set PCR's MCLK bit.
     */
    inline void set_PCR_SSCMode_MCLK()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's MCLK bit.
     */
    inline void clear_PCR_SSCMode_MCLK()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's MCLK bit.
     */
    inline void toggle_PCR_SSCMode_MCLK()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's SLPHSEL bit.
     */
    USIC0_CH0_PCR_SSCMode_SLPHSEL get_PCR_SSCMode_SLPHSEL()
    {
        return USIC0_CH0_PCR_SSCMode_SLPHSEL(PCR_SSCMode & (1u << 25u));
    }

    /**
     * Set PCR's SLPHSEL bit.
     */
    inline void set_PCR_SSCMode_SLPHSEL()
    {
        PCR |= 1u << 25u;
    }

    /**
     * Clear PCR's SLPHSEL bit.
     */
    inline void clear_PCR_SSCMode_SLPHSEL()
    {
        PCR &= ~(1u << 25u);
    }

    /**
     * Toggle PCR's SLPHSEL bit.
     */
    inline void toggle_PCR_SSCMode_SLPHSEL()
    {
        PCR ^= 1u << 25u;
    }

    /**
     * Get PCR's TIWEN bit.
     */
    USIC0_CH0_PCR_SSCMode_TIWEN get_PCR_SSCMode_TIWEN()
    {
        return USIC0_CH0_PCR_SSCMode_TIWEN(PCR_SSCMode & (1u << 24u));
    }

    /**
     * Set PCR's TIWEN bit.
     */
    inline void set_PCR_SSCMode_TIWEN()
    {
        PCR |= 1u << 24u;
    }

    /**
     * Clear PCR's TIWEN bit.
     */
    inline void clear_PCR_SSCMode_TIWEN()
    {
        PCR &= ~(1u << 24u);
    }

    /**
     * Toggle PCR's TIWEN bit.
     */
    inline void toggle_PCR_SSCMode_TIWEN()
    {
        PCR ^= 1u << 24u;
    }

    /**
     * Get PCR's SELO field.
     */
    USIC0_CH0_PCR_SSCMode_SELO get_PCR_SSCMode_SELO()
    {
        return USIC0_CH0_PCR_SSCMode_SELO((PCR_SSCMode >> 16u) & 0b11111111u);
    }

    /**
     * Set PCR's SELO field.
     */
    inline void set_PCR_SSCMode_SELO(USIC0_CH0_PCR_SSCMode_SELO value)
    {
        uint32_t curr = PCR_SSCMode;

        curr &= ~(0b11111111u << 16u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 16u;

        PCR_SSCMode = curr;
    }

    /**
     * Get PCR's DX2TIEN bit.
     */
    USIC0_CH0_PCR_SSCMode_DX2TIEN get_PCR_SSCMode_DX2TIEN()
    {
        return USIC0_CH0_PCR_SSCMode_DX2TIEN(PCR_SSCMode & (1u << 15u));
    }

    /**
     * Set PCR's DX2TIEN bit.
     */
    inline void set_PCR_SSCMode_DX2TIEN()
    {
        PCR |= 1u << 15u;
    }

    /**
     * Clear PCR's DX2TIEN bit.
     */
    inline void clear_PCR_SSCMode_DX2TIEN()
    {
        PCR &= ~(1u << 15u);
    }

    /**
     * Toggle PCR's DX2TIEN bit.
     */
    inline void toggle_PCR_SSCMode_DX2TIEN()
    {
        PCR ^= 1u << 15u;
    }

    /**
     * Get PCR's MSLSIEN bit.
     */
    USIC0_CH0_PCR_SSCMode_MSLSIEN get_PCR_SSCMode_MSLSIEN()
    {
        return USIC0_CH0_PCR_SSCMode_MSLSIEN(PCR_SSCMode & (1u << 14u));
    }

    /**
     * Set PCR's MSLSIEN bit.
     */
    inline void set_PCR_SSCMode_MSLSIEN()
    {
        PCR |= 1u << 14u;
    }

    /**
     * Clear PCR's MSLSIEN bit.
     */
    inline void clear_PCR_SSCMode_MSLSIEN()
    {
        PCR &= ~(1u << 14u);
    }

    /**
     * Toggle PCR's MSLSIEN bit.
     */
    inline void toggle_PCR_SSCMode_MSLSIEN()
    {
        PCR ^= 1u << 14u;
    }

    /**
     * Get PCR's PARIEN bit.
     */
    USIC0_CH0_PCR_SSCMode_PARIEN get_PCR_SSCMode_PARIEN()
    {
        return USIC0_CH0_PCR_SSCMode_PARIEN(PCR_SSCMode & (1u << 13u));
    }

    /**
     * Set PCR's PARIEN bit.
     */
    inline void set_PCR_SSCMode_PARIEN()
    {
        PCR |= 1u << 13u;
    }

    /**
     * Clear PCR's PARIEN bit.
     */
    inline void clear_PCR_SSCMode_PARIEN()
    {
        PCR &= ~(1u << 13u);
    }

    /**
     * Toggle PCR's PARIEN bit.
     */
    inline void toggle_PCR_SSCMode_PARIEN()
    {
        PCR ^= 1u << 13u;
    }

    /**
     * Get PCR's DCTQ1 field.
     */
    uint8_t get_PCR_SSCMode_DCTQ1()
    {
        return (PCR_SSCMode >> 8u) & 0b11111u;
    }

    /**
     * Set PCR's DCTQ1 field.
     */
    inline void set_PCR_SSCMode_DCTQ1(uint8_t value)
    {
        uint32_t curr = PCR_SSCMode;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        PCR_SSCMode = curr;
    }

    /**
     * Get PCR's PCTQ1 field.
     */
    uint8_t get_PCR_SSCMode_PCTQ1()
    {
        return (PCR_SSCMode >> 6u) & 0b11u;
    }

    /**
     * Set PCR's PCTQ1 field.
     */
    inline void set_PCR_SSCMode_PCTQ1(uint8_t value)
    {
        uint32_t curr = PCR_SSCMode;

        curr &= ~(0b11u << 6u);
        curr |= (value & 0b11u) << 6u;

        PCR_SSCMode = curr;
    }

    /**
     * Get PCR's CTQSEL1 field.
     */
    USIC0_CH0_PCR_SSCMode_CTQSEL1 get_PCR_SSCMode_CTQSEL1()
    {
        return USIC0_CH0_PCR_SSCMode_CTQSEL1((PCR_SSCMode >> 4u) & 0b11u);
    }

    /**
     * Set PCR's CTQSEL1 field.
     */
    inline void set_PCR_SSCMode_CTQSEL1(USIC0_CH0_PCR_SSCMode_CTQSEL1 value)
    {
        uint32_t curr = PCR_SSCMode;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        PCR_SSCMode = curr;
    }

    /**
     * Get PCR's FEM bit.
     */
    USIC0_CH0_PCR_SSCMode_FEM get_PCR_SSCMode_FEM()
    {
        return USIC0_CH0_PCR_SSCMode_FEM(PCR_SSCMode & (1u << 3u));
    }

    /**
     * Set PCR's FEM bit.
     */
    inline void set_PCR_SSCMode_FEM()
    {
        PCR |= 1u << 3u;
    }

    /**
     * Clear PCR's FEM bit.
     */
    inline void clear_PCR_SSCMode_FEM()
    {
        PCR &= ~(1u << 3u);
    }

    /**
     * Toggle PCR's FEM bit.
     */
    inline void toggle_PCR_SSCMode_FEM()
    {
        PCR ^= 1u << 3u;
    }

    /**
     * Get PCR's SELINV bit.
     */
    USIC0_CH0_PCR_SSCMode_SELINV get_PCR_SSCMode_SELINV()
    {
        return USIC0_CH0_PCR_SSCMode_SELINV(PCR_SSCMode & (1u << 2u));
    }

    /**
     * Set PCR's SELINV bit.
     */
    inline void set_PCR_SSCMode_SELINV()
    {
        PCR |= 1u << 2u;
    }

    /**
     * Clear PCR's SELINV bit.
     */
    inline void clear_PCR_SSCMode_SELINV()
    {
        PCR &= ~(1u << 2u);
    }

    /**
     * Toggle PCR's SELINV bit.
     */
    inline void toggle_PCR_SSCMode_SELINV()
    {
        PCR ^= 1u << 2u;
    }

    /**
     * Get PCR's SELCTR bit.
     */
    USIC0_CH0_PCR_SSCMode_SELCTR get_PCR_SSCMode_SELCTR()
    {
        return USIC0_CH0_PCR_SSCMode_SELCTR(PCR_SSCMode & (1u << 1u));
    }

    /**
     * Set PCR's SELCTR bit.
     */
    inline void set_PCR_SSCMode_SELCTR()
    {
        PCR |= 1u << 1u;
    }

    /**
     * Clear PCR's SELCTR bit.
     */
    inline void clear_PCR_SSCMode_SELCTR()
    {
        PCR &= ~(1u << 1u);
    }

    /**
     * Toggle PCR's SELCTR bit.
     */
    inline void toggle_PCR_SSCMode_SELCTR()
    {
        PCR ^= 1u << 1u;
    }

    /**
     * Get PCR's MSLSEN bit.
     */
    USIC0_CH0_PCR_SSCMode_MSLSEN get_PCR_SSCMode_MSLSEN()
    {
        return USIC0_CH0_PCR_SSCMode_MSLSEN(PCR_SSCMode & (1u << 0u));
    }

    /**
     * Set PCR's MSLSEN bit.
     */
    inline void set_PCR_SSCMode_MSLSEN()
    {
        PCR |= 1u << 0u;
    }

    /**
     * Clear PCR's MSLSEN bit.
     */
    inline void clear_PCR_SSCMode_MSLSEN()
    {
        PCR &= ~(1u << 0u);
    }

    /**
     * Toggle PCR's MSLSEN bit.
     */
    inline void toggle_PCR_SSCMode_MSLSEN()
    {
        PCR ^= 1u << 0u;
    }

    /**
     * Get PCR's MCLK bit.
     */
    USIC0_CH0_PCR_IICMode_MCLK get_PCR_IICMode_MCLK()
    {
        return USIC0_CH0_PCR_IICMode_MCLK(PCR_IICMode & (1u << 31u));
    }

    /**
     * Set PCR's MCLK bit.
     */
    inline void set_PCR_IICMode_MCLK()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's MCLK bit.
     */
    inline void clear_PCR_IICMode_MCLK()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's MCLK bit.
     */
    inline void toggle_PCR_IICMode_MCLK()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's ACKIEN bit.
     */
    USIC0_CH0_PCR_IICMode_ACKIEN get_PCR_IICMode_ACKIEN()
    {
        return USIC0_CH0_PCR_IICMode_ACKIEN(PCR_IICMode & (1u << 30u));
    }

    /**
     * Set PCR's ACKIEN bit.
     */
    inline void set_PCR_IICMode_ACKIEN()
    {
        PCR |= 1u << 30u;
    }

    /**
     * Clear PCR's ACKIEN bit.
     */
    inline void clear_PCR_IICMode_ACKIEN()
    {
        PCR &= ~(1u << 30u);
    }

    /**
     * Toggle PCR's ACKIEN bit.
     */
    inline void toggle_PCR_IICMode_ACKIEN()
    {
        PCR ^= 1u << 30u;
    }

    /**
     * Get PCR's HDEL field.
     */
    uint8_t get_PCR_IICMode_HDEL()
    {
        return (PCR_IICMode >> 26u) & 0b1111u;
    }

    /**
     * Set PCR's HDEL field.
     */
    inline void set_PCR_IICMode_HDEL(uint8_t value)
    {
        uint32_t curr = PCR_IICMode;

        curr &= ~(0b1111u << 26u);
        curr |= (value & 0b1111u) << 26u;

        PCR_IICMode = curr;
    }

    /**
     * Get PCR's SACKDIS bit.
     */
    USIC0_CH0_PCR_IICMode_SACKDIS get_PCR_IICMode_SACKDIS()
    {
        return USIC0_CH0_PCR_IICMode_SACKDIS(PCR_IICMode & (1u << 25u));
    }

    /**
     * Set PCR's SACKDIS bit.
     */
    inline void set_PCR_IICMode_SACKDIS()
    {
        PCR |= 1u << 25u;
    }

    /**
     * Clear PCR's SACKDIS bit.
     */
    inline void clear_PCR_IICMode_SACKDIS()
    {
        PCR &= ~(1u << 25u);
    }

    /**
     * Toggle PCR's SACKDIS bit.
     */
    inline void toggle_PCR_IICMode_SACKDIS()
    {
        PCR ^= 1u << 25u;
    }

    /**
     * Get PCR's ERRIEN bit.
     */
    USIC0_CH0_PCR_IICMode_ERRIEN get_PCR_IICMode_ERRIEN()
    {
        return USIC0_CH0_PCR_IICMode_ERRIEN(PCR_IICMode & (1u << 24u));
    }

    /**
     * Set PCR's ERRIEN bit.
     */
    inline void set_PCR_IICMode_ERRIEN()
    {
        PCR |= 1u << 24u;
    }

    /**
     * Clear PCR's ERRIEN bit.
     */
    inline void clear_PCR_IICMode_ERRIEN()
    {
        PCR &= ~(1u << 24u);
    }

    /**
     * Toggle PCR's ERRIEN bit.
     */
    inline void toggle_PCR_IICMode_ERRIEN()
    {
        PCR ^= 1u << 24u;
    }

    /**
     * Get PCR's SRRIEN bit.
     */
    USIC0_CH0_PCR_IICMode_SRRIEN get_PCR_IICMode_SRRIEN()
    {
        return USIC0_CH0_PCR_IICMode_SRRIEN(PCR_IICMode & (1u << 23u));
    }

    /**
     * Set PCR's SRRIEN bit.
     */
    inline void set_PCR_IICMode_SRRIEN()
    {
        PCR |= 1u << 23u;
    }

    /**
     * Clear PCR's SRRIEN bit.
     */
    inline void clear_PCR_IICMode_SRRIEN()
    {
        PCR &= ~(1u << 23u);
    }

    /**
     * Toggle PCR's SRRIEN bit.
     */
    inline void toggle_PCR_IICMode_SRRIEN()
    {
        PCR ^= 1u << 23u;
    }

    /**
     * Get PCR's ARLIEN bit.
     */
    USIC0_CH0_PCR_IICMode_ARLIEN get_PCR_IICMode_ARLIEN()
    {
        return USIC0_CH0_PCR_IICMode_ARLIEN(PCR_IICMode & (1u << 22u));
    }

    /**
     * Set PCR's ARLIEN bit.
     */
    inline void set_PCR_IICMode_ARLIEN()
    {
        PCR |= 1u << 22u;
    }

    /**
     * Clear PCR's ARLIEN bit.
     */
    inline void clear_PCR_IICMode_ARLIEN()
    {
        PCR &= ~(1u << 22u);
    }

    /**
     * Toggle PCR's ARLIEN bit.
     */
    inline void toggle_PCR_IICMode_ARLIEN()
    {
        PCR ^= 1u << 22u;
    }

    /**
     * Get PCR's NACKIEN bit.
     */
    USIC0_CH0_PCR_IICMode_NACKIEN get_PCR_IICMode_NACKIEN()
    {
        return USIC0_CH0_PCR_IICMode_NACKIEN(PCR_IICMode & (1u << 21u));
    }

    /**
     * Set PCR's NACKIEN bit.
     */
    inline void set_PCR_IICMode_NACKIEN()
    {
        PCR |= 1u << 21u;
    }

    /**
     * Clear PCR's NACKIEN bit.
     */
    inline void clear_PCR_IICMode_NACKIEN()
    {
        PCR &= ~(1u << 21u);
    }

    /**
     * Toggle PCR's NACKIEN bit.
     */
    inline void toggle_PCR_IICMode_NACKIEN()
    {
        PCR ^= 1u << 21u;
    }

    /**
     * Get PCR's PCRIEN bit.
     */
    USIC0_CH0_PCR_IICMode_PCRIEN get_PCR_IICMode_PCRIEN()
    {
        return USIC0_CH0_PCR_IICMode_PCRIEN(PCR_IICMode & (1u << 20u));
    }

    /**
     * Set PCR's PCRIEN bit.
     */
    inline void set_PCR_IICMode_PCRIEN()
    {
        PCR |= 1u << 20u;
    }

    /**
     * Clear PCR's PCRIEN bit.
     */
    inline void clear_PCR_IICMode_PCRIEN()
    {
        PCR &= ~(1u << 20u);
    }

    /**
     * Toggle PCR's PCRIEN bit.
     */
    inline void toggle_PCR_IICMode_PCRIEN()
    {
        PCR ^= 1u << 20u;
    }

    /**
     * Get PCR's RSCRIEN bit.
     */
    USIC0_CH0_PCR_IICMode_RSCRIEN get_PCR_IICMode_RSCRIEN()
    {
        return USIC0_CH0_PCR_IICMode_RSCRIEN(PCR_IICMode & (1u << 19u));
    }

    /**
     * Set PCR's RSCRIEN bit.
     */
    inline void set_PCR_IICMode_RSCRIEN()
    {
        PCR |= 1u << 19u;
    }

    /**
     * Clear PCR's RSCRIEN bit.
     */
    inline void clear_PCR_IICMode_RSCRIEN()
    {
        PCR &= ~(1u << 19u);
    }

    /**
     * Toggle PCR's RSCRIEN bit.
     */
    inline void toggle_PCR_IICMode_RSCRIEN()
    {
        PCR ^= 1u << 19u;
    }

    /**
     * Get PCR's SCRIEN bit.
     */
    USIC0_CH0_PCR_IICMode_SCRIEN get_PCR_IICMode_SCRIEN()
    {
        return USIC0_CH0_PCR_IICMode_SCRIEN(PCR_IICMode & (1u << 18u));
    }

    /**
     * Set PCR's SCRIEN bit.
     */
    inline void set_PCR_IICMode_SCRIEN()
    {
        PCR |= 1u << 18u;
    }

    /**
     * Clear PCR's SCRIEN bit.
     */
    inline void clear_PCR_IICMode_SCRIEN()
    {
        PCR &= ~(1u << 18u);
    }

    /**
     * Toggle PCR's SCRIEN bit.
     */
    inline void toggle_PCR_IICMode_SCRIEN()
    {
        PCR ^= 1u << 18u;
    }

    /**
     * Get PCR's STIM bit.
     */
    USIC0_CH0_PCR_IICMode_STIM get_PCR_IICMode_STIM()
    {
        return USIC0_CH0_PCR_IICMode_STIM(PCR_IICMode & (1u << 17u));
    }

    /**
     * Set PCR's STIM bit.
     */
    inline void set_PCR_IICMode_STIM()
    {
        PCR |= 1u << 17u;
    }

    /**
     * Clear PCR's STIM bit.
     */
    inline void clear_PCR_IICMode_STIM()
    {
        PCR &= ~(1u << 17u);
    }

    /**
     * Toggle PCR's STIM bit.
     */
    inline void toggle_PCR_IICMode_STIM()
    {
        PCR ^= 1u << 17u;
    }

    /**
     * Get PCR's ACK00 bit.
     */
    USIC0_CH0_PCR_IICMode_ACK00 get_PCR_IICMode_ACK00()
    {
        return USIC0_CH0_PCR_IICMode_ACK00(PCR_IICMode & (1u << 16u));
    }

    /**
     * Set PCR's ACK00 bit.
     */
    inline void set_PCR_IICMode_ACK00()
    {
        PCR |= 1u << 16u;
    }

    /**
     * Clear PCR's ACK00 bit.
     */
    inline void clear_PCR_IICMode_ACK00()
    {
        PCR &= ~(1u << 16u);
    }

    /**
     * Toggle PCR's ACK00 bit.
     */
    inline void toggle_PCR_IICMode_ACK00()
    {
        PCR ^= 1u << 16u;
    }

    /**
     * Get PCR's SLAD field.
     */
    uint16_t get_PCR_IICMode_SLAD()
    {
        return (PCR_IICMode >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set PCR's SLAD field.
     */
    inline void set_PCR_IICMode_SLAD(uint16_t value)
    {
        uint32_t curr = PCR_IICMode;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        PCR_IICMode = curr;
    }

    /**
     * Get PCR's MCLK bit.
     */
    USIC0_CH0_PCR_IISMode_MCLK get_PCR_IISMode_MCLK()
    {
        return USIC0_CH0_PCR_IISMode_MCLK(PCR_IISMode & (1u << 31u));
    }

    /**
     * Set PCR's MCLK bit.
     */
    inline void set_PCR_IISMode_MCLK()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's MCLK bit.
     */
    inline void clear_PCR_IISMode_MCLK()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's MCLK bit.
     */
    inline void toggle_PCR_IISMode_MCLK()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's TDEL field.
     */
    uint8_t get_PCR_IISMode_TDEL()
    {
        return (PCR_IISMode >> 16u) & 0b111111u;
    }

    /**
     * Set PCR's TDEL field.
     */
    inline void set_PCR_IISMode_TDEL(uint8_t value)
    {
        uint32_t curr = PCR_IISMode;

        curr &= ~(0b111111u << 16u);
        curr |= (value & 0b111111u) << 16u;

        PCR_IISMode = curr;
    }

    /**
     * Get PCR's DX2TIEN bit.
     */
    USIC0_CH0_PCR_IISMode_DX2TIEN get_PCR_IISMode_DX2TIEN()
    {
        return USIC0_CH0_PCR_IISMode_DX2TIEN(PCR_IISMode & (1u << 15u));
    }

    /**
     * Set PCR's DX2TIEN bit.
     */
    inline void set_PCR_IISMode_DX2TIEN()
    {
        PCR |= 1u << 15u;
    }

    /**
     * Clear PCR's DX2TIEN bit.
     */
    inline void clear_PCR_IISMode_DX2TIEN()
    {
        PCR &= ~(1u << 15u);
    }

    /**
     * Toggle PCR's DX2TIEN bit.
     */
    inline void toggle_PCR_IISMode_DX2TIEN()
    {
        PCR ^= 1u << 15u;
    }

    /**
     * Get PCR's ENDIEN bit.
     */
    USIC0_CH0_PCR_IISMode_ENDIEN get_PCR_IISMode_ENDIEN()
    {
        return USIC0_CH0_PCR_IISMode_ENDIEN(PCR_IISMode & (1u << 6u));
    }

    /**
     * Set PCR's ENDIEN bit.
     */
    inline void set_PCR_IISMode_ENDIEN()
    {
        PCR |= 1u << 6u;
    }

    /**
     * Clear PCR's ENDIEN bit.
     */
    inline void clear_PCR_IISMode_ENDIEN()
    {
        PCR &= ~(1u << 6u);
    }

    /**
     * Toggle PCR's ENDIEN bit.
     */
    inline void toggle_PCR_IISMode_ENDIEN()
    {
        PCR ^= 1u << 6u;
    }

    /**
     * Get PCR's WAREIEN bit.
     */
    USIC0_CH0_PCR_IISMode_WAREIEN get_PCR_IISMode_WAREIEN()
    {
        return USIC0_CH0_PCR_IISMode_WAREIEN(PCR_IISMode & (1u << 5u));
    }

    /**
     * Set PCR's WAREIEN bit.
     */
    inline void set_PCR_IISMode_WAREIEN()
    {
        PCR |= 1u << 5u;
    }

    /**
     * Clear PCR's WAREIEN bit.
     */
    inline void clear_PCR_IISMode_WAREIEN()
    {
        PCR &= ~(1u << 5u);
    }

    /**
     * Toggle PCR's WAREIEN bit.
     */
    inline void toggle_PCR_IISMode_WAREIEN()
    {
        PCR ^= 1u << 5u;
    }

    /**
     * Get PCR's WAFEIEN bit.
     */
    USIC0_CH0_PCR_IISMode_WAFEIEN get_PCR_IISMode_WAFEIEN()
    {
        return USIC0_CH0_PCR_IISMode_WAFEIEN(PCR_IISMode & (1u << 4u));
    }

    /**
     * Set PCR's WAFEIEN bit.
     */
    inline void set_PCR_IISMode_WAFEIEN()
    {
        PCR |= 1u << 4u;
    }

    /**
     * Clear PCR's WAFEIEN bit.
     */
    inline void clear_PCR_IISMode_WAFEIEN()
    {
        PCR &= ~(1u << 4u);
    }

    /**
     * Toggle PCR's WAFEIEN bit.
     */
    inline void toggle_PCR_IISMode_WAFEIEN()
    {
        PCR ^= 1u << 4u;
    }

    /**
     * Get PCR's SELINV bit.
     */
    USIC0_CH0_PCR_IISMode_SELINV get_PCR_IISMode_SELINV()
    {
        return USIC0_CH0_PCR_IISMode_SELINV(PCR_IISMode & (1u << 2u));
    }

    /**
     * Set PCR's SELINV bit.
     */
    inline void set_PCR_IISMode_SELINV()
    {
        PCR |= 1u << 2u;
    }

    /**
     * Clear PCR's SELINV bit.
     */
    inline void clear_PCR_IISMode_SELINV()
    {
        PCR &= ~(1u << 2u);
    }

    /**
     * Toggle PCR's SELINV bit.
     */
    inline void toggle_PCR_IISMode_SELINV()
    {
        PCR ^= 1u << 2u;
    }

    /**
     * Get PCR's DTEN bit.
     */
    USIC0_CH0_PCR_IISMode_DTEN get_PCR_IISMode_DTEN()
    {
        return USIC0_CH0_PCR_IISMode_DTEN(PCR_IISMode & (1u << 1u));
    }

    /**
     * Set PCR's DTEN bit.
     */
    inline void set_PCR_IISMode_DTEN()
    {
        PCR |= 1u << 1u;
    }

    /**
     * Clear PCR's DTEN bit.
     */
    inline void clear_PCR_IISMode_DTEN()
    {
        PCR &= ~(1u << 1u);
    }

    /**
     * Toggle PCR's DTEN bit.
     */
    inline void toggle_PCR_IISMode_DTEN()
    {
        PCR ^= 1u << 1u;
    }

    /**
     * Get PCR's WAGEN bit.
     */
    USIC0_CH0_PCR_IISMode_WAGEN get_PCR_IISMode_WAGEN()
    {
        return USIC0_CH0_PCR_IISMode_WAGEN(PCR_IISMode & (1u << 0u));
    }

    /**
     * Set PCR's WAGEN bit.
     */
    inline void set_PCR_IISMode_WAGEN()
    {
        PCR |= 1u << 0u;
    }

    /**
     * Clear PCR's WAGEN bit.
     */
    inline void clear_PCR_IISMode_WAGEN()
    {
        PCR &= ~(1u << 0u);
    }

    /**
     * Toggle PCR's WAGEN bit.
     */
    inline void toggle_PCR_IISMode_WAGEN()
    {
        PCR ^= 1u << 0u;
    }

    /**
     * Get CCR's BRGIEN bit.
     */
    USIC0_CH0_CCR_BRGIEN get_CCR_BRGIEN()
    {
        return USIC0_CH0_CCR_BRGIEN(CCR & (1u << 16u));
    }

    /**
     * Set CCR's BRGIEN bit.
     */
    inline void set_CCR_BRGIEN()
    {
        CCR |= 1u << 16u;
    }

    /**
     * Clear CCR's BRGIEN bit.
     */
    inline void clear_CCR_BRGIEN()
    {
        CCR &= ~(1u << 16u);
    }

    /**
     * Toggle CCR's BRGIEN bit.
     */
    inline void toggle_CCR_BRGIEN()
    {
        CCR ^= 1u << 16u;
    }

    /**
     * Get CCR's AIEN bit.
     */
    USIC0_CH0_CCR_AIEN get_CCR_AIEN()
    {
        return USIC0_CH0_CCR_AIEN(CCR & (1u << 15u));
    }

    /**
     * Set CCR's AIEN bit.
     */
    inline void set_CCR_AIEN()
    {
        CCR |= 1u << 15u;
    }

    /**
     * Clear CCR's AIEN bit.
     */
    inline void clear_CCR_AIEN()
    {
        CCR &= ~(1u << 15u);
    }

    /**
     * Toggle CCR's AIEN bit.
     */
    inline void toggle_CCR_AIEN()
    {
        CCR ^= 1u << 15u;
    }

    /**
     * Get CCR's RIEN bit.
     */
    USIC0_CH0_CCR_RIEN get_CCR_RIEN()
    {
        return USIC0_CH0_CCR_RIEN(CCR & (1u << 14u));
    }

    /**
     * Set CCR's RIEN bit.
     */
    inline void set_CCR_RIEN()
    {
        CCR |= 1u << 14u;
    }

    /**
     * Clear CCR's RIEN bit.
     */
    inline void clear_CCR_RIEN()
    {
        CCR &= ~(1u << 14u);
    }

    /**
     * Toggle CCR's RIEN bit.
     */
    inline void toggle_CCR_RIEN()
    {
        CCR ^= 1u << 14u;
    }

    /**
     * Get CCR's TBIEN bit.
     */
    USIC0_CH0_CCR_TBIEN get_CCR_TBIEN()
    {
        return USIC0_CH0_CCR_TBIEN(CCR & (1u << 13u));
    }

    /**
     * Set CCR's TBIEN bit.
     */
    inline void set_CCR_TBIEN()
    {
        CCR |= 1u << 13u;
    }

    /**
     * Clear CCR's TBIEN bit.
     */
    inline void clear_CCR_TBIEN()
    {
        CCR &= ~(1u << 13u);
    }

    /**
     * Toggle CCR's TBIEN bit.
     */
    inline void toggle_CCR_TBIEN()
    {
        CCR ^= 1u << 13u;
    }

    /**
     * Get CCR's TSIEN bit.
     */
    USIC0_CH0_CCR_TSIEN get_CCR_TSIEN()
    {
        return USIC0_CH0_CCR_TSIEN(CCR & (1u << 12u));
    }

    /**
     * Set CCR's TSIEN bit.
     */
    inline void set_CCR_TSIEN()
    {
        CCR |= 1u << 12u;
    }

    /**
     * Clear CCR's TSIEN bit.
     */
    inline void clear_CCR_TSIEN()
    {
        CCR &= ~(1u << 12u);
    }

    /**
     * Toggle CCR's TSIEN bit.
     */
    inline void toggle_CCR_TSIEN()
    {
        CCR ^= 1u << 12u;
    }

    /**
     * Get CCR's DLIEN bit.
     */
    USIC0_CH0_CCR_DLIEN get_CCR_DLIEN()
    {
        return USIC0_CH0_CCR_DLIEN(CCR & (1u << 11u));
    }

    /**
     * Set CCR's DLIEN bit.
     */
    inline void set_CCR_DLIEN()
    {
        CCR |= 1u << 11u;
    }

    /**
     * Clear CCR's DLIEN bit.
     */
    inline void clear_CCR_DLIEN()
    {
        CCR &= ~(1u << 11u);
    }

    /**
     * Toggle CCR's DLIEN bit.
     */
    inline void toggle_CCR_DLIEN()
    {
        CCR ^= 1u << 11u;
    }

    /**
     * Get CCR's RSIEN bit.
     */
    USIC0_CH0_CCR_RSIEN get_CCR_RSIEN()
    {
        return USIC0_CH0_CCR_RSIEN(CCR & (1u << 10u));
    }

    /**
     * Set CCR's RSIEN bit.
     */
    inline void set_CCR_RSIEN()
    {
        CCR |= 1u << 10u;
    }

    /**
     * Clear CCR's RSIEN bit.
     */
    inline void clear_CCR_RSIEN()
    {
        CCR &= ~(1u << 10u);
    }

    /**
     * Toggle CCR's RSIEN bit.
     */
    inline void toggle_CCR_RSIEN()
    {
        CCR ^= 1u << 10u;
    }

    /**
     * Get CCR's PM field.
     */
    USIC0_CH0_CCR_PM get_CCR_PM()
    {
        return USIC0_CH0_CCR_PM((CCR >> 8u) & 0b11u);
    }

    /**
     * Set CCR's PM field.
     */
    inline void set_CCR_PM(USIC0_CH0_CCR_PM value)
    {
        uint32_t curr = CCR;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        CCR = curr;
    }

    /**
     * Get CCR's HPCEN field.
     */
    USIC0_CH0_CCR_HPCEN get_CCR_HPCEN()
    {
        return USIC0_CH0_CCR_HPCEN((CCR >> 6u) & 0b11u);
    }

    /**
     * Set CCR's HPCEN field.
     */
    inline void set_CCR_HPCEN(USIC0_CH0_CCR_HPCEN value)
    {
        uint32_t curr = CCR;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CCR = curr;
    }

    /**
     * Get CCR's MODE field.
     */
    USIC0_CH0_CCR_MODE get_CCR_MODE()
    {
        return USIC0_CH0_CCR_MODE((CCR >> 0u) & 0b1111u);
    }

    /**
     * Set CCR's MODE field.
     */
    inline void set_CCR_MODE(USIC0_CH0_CCR_MODE value)
    {
        uint32_t curr = CCR;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CCR = curr;
    }

    /**
     * Get CMTR's CTV field.
     */
    uint16_t get_CMTR_CTV()
    {
        return (CMTR >> 0u) & 0b1111111111u;
    }

    /**
     * Set CMTR's CTV field.
     */
    inline void set_CMTR_CTV(uint16_t value)
    {
        uint32_t curr = CMTR;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        CMTR = curr;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    USIC0_CH0_PSR_BRGIF get_PSR_BRGIF()
    {
        return USIC0_CH0_PSR_BRGIF(PSR & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    USIC0_CH0_PSR_AIF get_PSR_AIF()
    {
        return USIC0_CH0_PSR_AIF(PSR & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    USIC0_CH0_PSR_RIF get_PSR_RIF()
    {
        return USIC0_CH0_PSR_RIF(PSR & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    USIC0_CH0_PSR_TBIF get_PSR_TBIF()
    {
        return USIC0_CH0_PSR_TBIF(PSR & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    USIC0_CH0_PSR_TSIF get_PSR_TSIF()
    {
        return USIC0_CH0_PSR_TSIF(PSR & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    USIC0_CH0_PSR_DLIF get_PSR_DLIF()
    {
        return USIC0_CH0_PSR_DLIF(PSR & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    USIC0_CH0_PSR_RSIF get_PSR_RSIF()
    {
        return USIC0_CH0_PSR_RSIF(PSR & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's ST9 bit.
     */
    bool get_PSR_ST9()
    {
        return PSR & (1u << 9u);
    }

    /**
     * Set PSR's ST9 bit.
     */
    inline void set_PSR_ST9()
    {
        PSR |= 1u << 9u;
    }

    /**
     * Clear PSR's ST9 bit.
     */
    inline void clear_PSR_ST9()
    {
        PSR &= ~(1u << 9u);
    }

    /**
     * Toggle PSR's ST9 bit.
     */
    inline void toggle_PSR_ST9()
    {
        PSR ^= 1u << 9u;
    }

    /**
     * Get PSR's ST8 bit.
     */
    bool get_PSR_ST8()
    {
        return PSR & (1u << 8u);
    }

    /**
     * Set PSR's ST8 bit.
     */
    inline void set_PSR_ST8()
    {
        PSR |= 1u << 8u;
    }

    /**
     * Clear PSR's ST8 bit.
     */
    inline void clear_PSR_ST8()
    {
        PSR &= ~(1u << 8u);
    }

    /**
     * Toggle PSR's ST8 bit.
     */
    inline void toggle_PSR_ST8()
    {
        PSR ^= 1u << 8u;
    }

    /**
     * Get PSR's ST7 bit.
     */
    bool get_PSR_ST7()
    {
        return PSR & (1u << 7u);
    }

    /**
     * Set PSR's ST7 bit.
     */
    inline void set_PSR_ST7()
    {
        PSR |= 1u << 7u;
    }

    /**
     * Clear PSR's ST7 bit.
     */
    inline void clear_PSR_ST7()
    {
        PSR &= ~(1u << 7u);
    }

    /**
     * Toggle PSR's ST7 bit.
     */
    inline void toggle_PSR_ST7()
    {
        PSR ^= 1u << 7u;
    }

    /**
     * Get PSR's ST6 bit.
     */
    bool get_PSR_ST6()
    {
        return PSR & (1u << 6u);
    }

    /**
     * Set PSR's ST6 bit.
     */
    inline void set_PSR_ST6()
    {
        PSR |= 1u << 6u;
    }

    /**
     * Clear PSR's ST6 bit.
     */
    inline void clear_PSR_ST6()
    {
        PSR &= ~(1u << 6u);
    }

    /**
     * Toggle PSR's ST6 bit.
     */
    inline void toggle_PSR_ST6()
    {
        PSR ^= 1u << 6u;
    }

    /**
     * Get PSR's ST5 bit.
     */
    bool get_PSR_ST5()
    {
        return PSR & (1u << 5u);
    }

    /**
     * Set PSR's ST5 bit.
     */
    inline void set_PSR_ST5()
    {
        PSR |= 1u << 5u;
    }

    /**
     * Clear PSR's ST5 bit.
     */
    inline void clear_PSR_ST5()
    {
        PSR &= ~(1u << 5u);
    }

    /**
     * Toggle PSR's ST5 bit.
     */
    inline void toggle_PSR_ST5()
    {
        PSR ^= 1u << 5u;
    }

    /**
     * Get PSR's ST4 bit.
     */
    bool get_PSR_ST4()
    {
        return PSR & (1u << 4u);
    }

    /**
     * Set PSR's ST4 bit.
     */
    inline void set_PSR_ST4()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's ST4 bit.
     */
    inline void clear_PSR_ST4()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's ST4 bit.
     */
    inline void toggle_PSR_ST4()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's ST3 bit.
     */
    bool get_PSR_ST3()
    {
        return PSR & (1u << 3u);
    }

    /**
     * Set PSR's ST3 bit.
     */
    inline void set_PSR_ST3()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's ST3 bit.
     */
    inline void clear_PSR_ST3()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's ST3 bit.
     */
    inline void toggle_PSR_ST3()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's ST2 bit.
     */
    bool get_PSR_ST2()
    {
        return PSR & (1u << 2u);
    }

    /**
     * Set PSR's ST2 bit.
     */
    inline void set_PSR_ST2()
    {
        PSR |= 1u << 2u;
    }

    /**
     * Clear PSR's ST2 bit.
     */
    inline void clear_PSR_ST2()
    {
        PSR &= ~(1u << 2u);
    }

    /**
     * Toggle PSR's ST2 bit.
     */
    inline void toggle_PSR_ST2()
    {
        PSR ^= 1u << 2u;
    }

    /**
     * Get PSR's ST1 bit.
     */
    bool get_PSR_ST1()
    {
        return PSR & (1u << 1u);
    }

    /**
     * Set PSR's ST1 bit.
     */
    inline void set_PSR_ST1()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's ST1 bit.
     */
    inline void clear_PSR_ST1()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's ST1 bit.
     */
    inline void toggle_PSR_ST1()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's ST0 bit.
     */
    bool get_PSR_ST0()
    {
        return PSR & (1u << 0u);
    }

    /**
     * Set PSR's ST0 bit.
     */
    inline void set_PSR_ST0()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's ST0 bit.
     */
    inline void clear_PSR_ST0()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's ST0 bit.
     */
    inline void toggle_PSR_ST0()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    USIC0_CH0_PSR_ASCMode_BRGIF get_PSR_ASCMode_BRGIF()
    {
        return USIC0_CH0_PSR_ASCMode_BRGIF(PSR_ASCMode & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_ASCMode_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_ASCMode_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_ASCMode_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    USIC0_CH0_PSR_ASCMode_AIF get_PSR_ASCMode_AIF()
    {
        return USIC0_CH0_PSR_ASCMode_AIF(PSR_ASCMode & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_ASCMode_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_ASCMode_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_ASCMode_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    USIC0_CH0_PSR_ASCMode_RIF get_PSR_ASCMode_RIF()
    {
        return USIC0_CH0_PSR_ASCMode_RIF(PSR_ASCMode & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_ASCMode_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_ASCMode_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_ASCMode_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    USIC0_CH0_PSR_ASCMode_TBIF get_PSR_ASCMode_TBIF()
    {
        return USIC0_CH0_PSR_ASCMode_TBIF(PSR_ASCMode & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_ASCMode_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_ASCMode_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_ASCMode_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    USIC0_CH0_PSR_ASCMode_TSIF get_PSR_ASCMode_TSIF()
    {
        return USIC0_CH0_PSR_ASCMode_TSIF(PSR_ASCMode & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_ASCMode_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_ASCMode_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_ASCMode_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    USIC0_CH0_PSR_ASCMode_DLIF get_PSR_ASCMode_DLIF()
    {
        return USIC0_CH0_PSR_ASCMode_DLIF(PSR_ASCMode & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_ASCMode_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_ASCMode_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_ASCMode_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    USIC0_CH0_PSR_ASCMode_RSIF get_PSR_ASCMode_RSIF()
    {
        return USIC0_CH0_PSR_ASCMode_RSIF(PSR_ASCMode & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_ASCMode_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_ASCMode_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_ASCMode_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's BUSY bit.
     */
    USIC0_CH0_PSR_ASCMode_BUSY get_PSR_ASCMode_BUSY()
    {
        return USIC0_CH0_PSR_ASCMode_BUSY(PSR_ASCMode & (1u << 9u));
    }

    /**
     * Get PSR's TFF bit.
     */
    USIC0_CH0_PSR_ASCMode_TFF get_PSR_ASCMode_TFF()
    {
        return USIC0_CH0_PSR_ASCMode_TFF(PSR_ASCMode & (1u << 8u));
    }

    /**
     * Set PSR's TFF bit.
     */
    inline void set_PSR_ASCMode_TFF()
    {
        PSR |= 1u << 8u;
    }

    /**
     * Clear PSR's TFF bit.
     */
    inline void clear_PSR_ASCMode_TFF()
    {
        PSR &= ~(1u << 8u);
    }

    /**
     * Toggle PSR's TFF bit.
     */
    inline void toggle_PSR_ASCMode_TFF()
    {
        PSR ^= 1u << 8u;
    }

    /**
     * Get PSR's RFF bit.
     */
    USIC0_CH0_PSR_ASCMode_RFF get_PSR_ASCMode_RFF()
    {
        return USIC0_CH0_PSR_ASCMode_RFF(PSR_ASCMode & (1u << 7u));
    }

    /**
     * Set PSR's RFF bit.
     */
    inline void set_PSR_ASCMode_RFF()
    {
        PSR |= 1u << 7u;
    }

    /**
     * Clear PSR's RFF bit.
     */
    inline void clear_PSR_ASCMode_RFF()
    {
        PSR &= ~(1u << 7u);
    }

    /**
     * Toggle PSR's RFF bit.
     */
    inline void toggle_PSR_ASCMode_RFF()
    {
        PSR ^= 1u << 7u;
    }

    /**
     * Get PSR's FER1 bit.
     */
    USIC0_CH0_PSR_ASCMode_FER1 get_PSR_ASCMode_FER1()
    {
        return USIC0_CH0_PSR_ASCMode_FER1(PSR_ASCMode & (1u << 6u));
    }

    /**
     * Set PSR's FER1 bit.
     */
    inline void set_PSR_ASCMode_FER1()
    {
        PSR |= 1u << 6u;
    }

    /**
     * Clear PSR's FER1 bit.
     */
    inline void clear_PSR_ASCMode_FER1()
    {
        PSR &= ~(1u << 6u);
    }

    /**
     * Toggle PSR's FER1 bit.
     */
    inline void toggle_PSR_ASCMode_FER1()
    {
        PSR ^= 1u << 6u;
    }

    /**
     * Get PSR's FER0 bit.
     */
    USIC0_CH0_PSR_ASCMode_FER0 get_PSR_ASCMode_FER0()
    {
        return USIC0_CH0_PSR_ASCMode_FER0(PSR_ASCMode & (1u << 5u));
    }

    /**
     * Set PSR's FER0 bit.
     */
    inline void set_PSR_ASCMode_FER0()
    {
        PSR |= 1u << 5u;
    }

    /**
     * Clear PSR's FER0 bit.
     */
    inline void clear_PSR_ASCMode_FER0()
    {
        PSR &= ~(1u << 5u);
    }

    /**
     * Toggle PSR's FER0 bit.
     */
    inline void toggle_PSR_ASCMode_FER0()
    {
        PSR ^= 1u << 5u;
    }

    /**
     * Get PSR's RNS bit.
     */
    USIC0_CH0_PSR_ASCMode_RNS get_PSR_ASCMode_RNS()
    {
        return USIC0_CH0_PSR_ASCMode_RNS(PSR_ASCMode & (1u << 4u));
    }

    /**
     * Set PSR's RNS bit.
     */
    inline void set_PSR_ASCMode_RNS()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's RNS bit.
     */
    inline void clear_PSR_ASCMode_RNS()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's RNS bit.
     */
    inline void toggle_PSR_ASCMode_RNS()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's COL bit.
     */
    USIC0_CH0_PSR_ASCMode_COL get_PSR_ASCMode_COL()
    {
        return USIC0_CH0_PSR_ASCMode_COL(PSR_ASCMode & (1u << 3u));
    }

    /**
     * Set PSR's COL bit.
     */
    inline void set_PSR_ASCMode_COL()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's COL bit.
     */
    inline void clear_PSR_ASCMode_COL()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's COL bit.
     */
    inline void toggle_PSR_ASCMode_COL()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's SBD bit.
     */
    USIC0_CH0_PSR_ASCMode_SBD get_PSR_ASCMode_SBD()
    {
        return USIC0_CH0_PSR_ASCMode_SBD(PSR_ASCMode & (1u << 2u));
    }

    /**
     * Set PSR's SBD bit.
     */
    inline void set_PSR_ASCMode_SBD()
    {
        PSR |= 1u << 2u;
    }

    /**
     * Clear PSR's SBD bit.
     */
    inline void clear_PSR_ASCMode_SBD()
    {
        PSR &= ~(1u << 2u);
    }

    /**
     * Toggle PSR's SBD bit.
     */
    inline void toggle_PSR_ASCMode_SBD()
    {
        PSR ^= 1u << 2u;
    }

    /**
     * Get PSR's RXIDLE bit.
     */
    USIC0_CH0_PSR_ASCMode_RXIDLE get_PSR_ASCMode_RXIDLE()
    {
        return USIC0_CH0_PSR_ASCMode_RXIDLE(PSR_ASCMode & (1u << 1u));
    }

    /**
     * Set PSR's RXIDLE bit.
     */
    inline void set_PSR_ASCMode_RXIDLE()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's RXIDLE bit.
     */
    inline void clear_PSR_ASCMode_RXIDLE()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's RXIDLE bit.
     */
    inline void toggle_PSR_ASCMode_RXIDLE()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's TXIDLE bit.
     */
    USIC0_CH0_PSR_ASCMode_TXIDLE get_PSR_ASCMode_TXIDLE()
    {
        return USIC0_CH0_PSR_ASCMode_TXIDLE(PSR_ASCMode & (1u << 0u));
    }

    /**
     * Set PSR's TXIDLE bit.
     */
    inline void set_PSR_ASCMode_TXIDLE()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's TXIDLE bit.
     */
    inline void clear_PSR_ASCMode_TXIDLE()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's TXIDLE bit.
     */
    inline void toggle_PSR_ASCMode_TXIDLE()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    USIC0_CH0_PSR_SSCMode_BRGIF get_PSR_SSCMode_BRGIF()
    {
        return USIC0_CH0_PSR_SSCMode_BRGIF(PSR_SSCMode & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_SSCMode_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_SSCMode_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_SSCMode_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    USIC0_CH0_PSR_SSCMode_AIF get_PSR_SSCMode_AIF()
    {
        return USIC0_CH0_PSR_SSCMode_AIF(PSR_SSCMode & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_SSCMode_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_SSCMode_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_SSCMode_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    USIC0_CH0_PSR_SSCMode_RIF get_PSR_SSCMode_RIF()
    {
        return USIC0_CH0_PSR_SSCMode_RIF(PSR_SSCMode & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_SSCMode_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_SSCMode_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_SSCMode_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    USIC0_CH0_PSR_SSCMode_TBIF get_PSR_SSCMode_TBIF()
    {
        return USIC0_CH0_PSR_SSCMode_TBIF(PSR_SSCMode & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_SSCMode_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_SSCMode_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_SSCMode_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    USIC0_CH0_PSR_SSCMode_TSIF get_PSR_SSCMode_TSIF()
    {
        return USIC0_CH0_PSR_SSCMode_TSIF(PSR_SSCMode & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_SSCMode_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_SSCMode_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_SSCMode_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    USIC0_CH0_PSR_SSCMode_DLIF get_PSR_SSCMode_DLIF()
    {
        return USIC0_CH0_PSR_SSCMode_DLIF(PSR_SSCMode & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_SSCMode_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_SSCMode_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_SSCMode_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    USIC0_CH0_PSR_SSCMode_RSIF get_PSR_SSCMode_RSIF()
    {
        return USIC0_CH0_PSR_SSCMode_RSIF(PSR_SSCMode & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_SSCMode_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_SSCMode_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_SSCMode_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's PARERR bit.
     */
    USIC0_CH0_PSR_SSCMode_PARERR get_PSR_SSCMode_PARERR()
    {
        return USIC0_CH0_PSR_SSCMode_PARERR(PSR_SSCMode & (1u << 4u));
    }

    /**
     * Set PSR's PARERR bit.
     */
    inline void set_PSR_SSCMode_PARERR()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's PARERR bit.
     */
    inline void clear_PSR_SSCMode_PARERR()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's PARERR bit.
     */
    inline void toggle_PSR_SSCMode_PARERR()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's DX2TEV bit.
     */
    USIC0_CH0_PSR_SSCMode_DX2TEV get_PSR_SSCMode_DX2TEV()
    {
        return USIC0_CH0_PSR_SSCMode_DX2TEV(PSR_SSCMode & (1u << 3u));
    }

    /**
     * Set PSR's DX2TEV bit.
     */
    inline void set_PSR_SSCMode_DX2TEV()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's DX2TEV bit.
     */
    inline void clear_PSR_SSCMode_DX2TEV()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's DX2TEV bit.
     */
    inline void toggle_PSR_SSCMode_DX2TEV()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's MSLSEV bit.
     */
    USIC0_CH0_PSR_SSCMode_MSLSEV get_PSR_SSCMode_MSLSEV()
    {
        return USIC0_CH0_PSR_SSCMode_MSLSEV(PSR_SSCMode & (1u << 2u));
    }

    /**
     * Set PSR's MSLSEV bit.
     */
    inline void set_PSR_SSCMode_MSLSEV()
    {
        PSR |= 1u << 2u;
    }

    /**
     * Clear PSR's MSLSEV bit.
     */
    inline void clear_PSR_SSCMode_MSLSEV()
    {
        PSR &= ~(1u << 2u);
    }

    /**
     * Toggle PSR's MSLSEV bit.
     */
    inline void toggle_PSR_SSCMode_MSLSEV()
    {
        PSR ^= 1u << 2u;
    }

    /**
     * Get PSR's DX2S bit.
     */
    USIC0_CH0_PSR_SSCMode_DX2S get_PSR_SSCMode_DX2S()
    {
        return USIC0_CH0_PSR_SSCMode_DX2S(PSR_SSCMode & (1u << 1u));
    }

    /**
     * Set PSR's DX2S bit.
     */
    inline void set_PSR_SSCMode_DX2S()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's DX2S bit.
     */
    inline void clear_PSR_SSCMode_DX2S()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's DX2S bit.
     */
    inline void toggle_PSR_SSCMode_DX2S()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's MSLS bit.
     */
    USIC0_CH0_PSR_SSCMode_MSLS get_PSR_SSCMode_MSLS()
    {
        return USIC0_CH0_PSR_SSCMode_MSLS(PSR_SSCMode & (1u << 0u));
    }

    /**
     * Set PSR's MSLS bit.
     */
    inline void set_PSR_SSCMode_MSLS()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's MSLS bit.
     */
    inline void clear_PSR_SSCMode_MSLS()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's MSLS bit.
     */
    inline void toggle_PSR_SSCMode_MSLS()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    USIC0_CH0_PSR_IICMode_BRGIF get_PSR_IICMode_BRGIF()
    {
        return USIC0_CH0_PSR_IICMode_BRGIF(PSR_IICMode & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_IICMode_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_IICMode_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_IICMode_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    USIC0_CH0_PSR_IICMode_AIF get_PSR_IICMode_AIF()
    {
        return USIC0_CH0_PSR_IICMode_AIF(PSR_IICMode & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_IICMode_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_IICMode_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_IICMode_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    USIC0_CH0_PSR_IICMode_RIF get_PSR_IICMode_RIF()
    {
        return USIC0_CH0_PSR_IICMode_RIF(PSR_IICMode & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_IICMode_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_IICMode_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_IICMode_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    USIC0_CH0_PSR_IICMode_TBIF get_PSR_IICMode_TBIF()
    {
        return USIC0_CH0_PSR_IICMode_TBIF(PSR_IICMode & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_IICMode_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_IICMode_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_IICMode_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    USIC0_CH0_PSR_IICMode_TSIF get_PSR_IICMode_TSIF()
    {
        return USIC0_CH0_PSR_IICMode_TSIF(PSR_IICMode & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_IICMode_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_IICMode_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_IICMode_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    USIC0_CH0_PSR_IICMode_DLIF get_PSR_IICMode_DLIF()
    {
        return USIC0_CH0_PSR_IICMode_DLIF(PSR_IICMode & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_IICMode_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_IICMode_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_IICMode_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    USIC0_CH0_PSR_IICMode_RSIF get_PSR_IICMode_RSIF()
    {
        return USIC0_CH0_PSR_IICMode_RSIF(PSR_IICMode & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_IICMode_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_IICMode_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_IICMode_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's ACK bit.
     */
    USIC0_CH0_PSR_IICMode_ACK get_PSR_IICMode_ACK()
    {
        return USIC0_CH0_PSR_IICMode_ACK(PSR_IICMode & (1u << 9u));
    }

    /**
     * Set PSR's ACK bit.
     */
    inline void set_PSR_IICMode_ACK()
    {
        PSR |= 1u << 9u;
    }

    /**
     * Clear PSR's ACK bit.
     */
    inline void clear_PSR_IICMode_ACK()
    {
        PSR &= ~(1u << 9u);
    }

    /**
     * Toggle PSR's ACK bit.
     */
    inline void toggle_PSR_IICMode_ACK()
    {
        PSR ^= 1u << 9u;
    }

    /**
     * Get PSR's ERR bit.
     */
    USIC0_CH0_PSR_IICMode_ERR get_PSR_IICMode_ERR()
    {
        return USIC0_CH0_PSR_IICMode_ERR(PSR_IICMode & (1u << 8u));
    }

    /**
     * Set PSR's ERR bit.
     */
    inline void set_PSR_IICMode_ERR()
    {
        PSR |= 1u << 8u;
    }

    /**
     * Clear PSR's ERR bit.
     */
    inline void clear_PSR_IICMode_ERR()
    {
        PSR &= ~(1u << 8u);
    }

    /**
     * Toggle PSR's ERR bit.
     */
    inline void toggle_PSR_IICMode_ERR()
    {
        PSR ^= 1u << 8u;
    }

    /**
     * Get PSR's SRR bit.
     */
    USIC0_CH0_PSR_IICMode_SRR get_PSR_IICMode_SRR()
    {
        return USIC0_CH0_PSR_IICMode_SRR(PSR_IICMode & (1u << 7u));
    }

    /**
     * Set PSR's SRR bit.
     */
    inline void set_PSR_IICMode_SRR()
    {
        PSR |= 1u << 7u;
    }

    /**
     * Clear PSR's SRR bit.
     */
    inline void clear_PSR_IICMode_SRR()
    {
        PSR &= ~(1u << 7u);
    }

    /**
     * Toggle PSR's SRR bit.
     */
    inline void toggle_PSR_IICMode_SRR()
    {
        PSR ^= 1u << 7u;
    }

    /**
     * Get PSR's ARL bit.
     */
    USIC0_CH0_PSR_IICMode_ARL get_PSR_IICMode_ARL()
    {
        return USIC0_CH0_PSR_IICMode_ARL(PSR_IICMode & (1u << 6u));
    }

    /**
     * Set PSR's ARL bit.
     */
    inline void set_PSR_IICMode_ARL()
    {
        PSR |= 1u << 6u;
    }

    /**
     * Clear PSR's ARL bit.
     */
    inline void clear_PSR_IICMode_ARL()
    {
        PSR &= ~(1u << 6u);
    }

    /**
     * Toggle PSR's ARL bit.
     */
    inline void toggle_PSR_IICMode_ARL()
    {
        PSR ^= 1u << 6u;
    }

    /**
     * Get PSR's NACK bit.
     */
    USIC0_CH0_PSR_IICMode_NACK get_PSR_IICMode_NACK()
    {
        return USIC0_CH0_PSR_IICMode_NACK(PSR_IICMode & (1u << 5u));
    }

    /**
     * Set PSR's NACK bit.
     */
    inline void set_PSR_IICMode_NACK()
    {
        PSR |= 1u << 5u;
    }

    /**
     * Clear PSR's NACK bit.
     */
    inline void clear_PSR_IICMode_NACK()
    {
        PSR &= ~(1u << 5u);
    }

    /**
     * Toggle PSR's NACK bit.
     */
    inline void toggle_PSR_IICMode_NACK()
    {
        PSR ^= 1u << 5u;
    }

    /**
     * Get PSR's PCR bit.
     */
    USIC0_CH0_PSR_IICMode_PCR get_PSR_IICMode_PCR()
    {
        return USIC0_CH0_PSR_IICMode_PCR(PSR_IICMode & (1u << 4u));
    }

    /**
     * Set PSR's PCR bit.
     */
    inline void set_PSR_IICMode_PCR()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's PCR bit.
     */
    inline void clear_PSR_IICMode_PCR()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's PCR bit.
     */
    inline void toggle_PSR_IICMode_PCR()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's RSCR bit.
     */
    USIC0_CH0_PSR_IICMode_RSCR get_PSR_IICMode_RSCR()
    {
        return USIC0_CH0_PSR_IICMode_RSCR(PSR_IICMode & (1u << 3u));
    }

    /**
     * Set PSR's RSCR bit.
     */
    inline void set_PSR_IICMode_RSCR()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's RSCR bit.
     */
    inline void clear_PSR_IICMode_RSCR()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's RSCR bit.
     */
    inline void toggle_PSR_IICMode_RSCR()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's SCR bit.
     */
    USIC0_CH0_PSR_IICMode_SCR get_PSR_IICMode_SCR()
    {
        return USIC0_CH0_PSR_IICMode_SCR(PSR_IICMode & (1u << 2u));
    }

    /**
     * Set PSR's SCR bit.
     */
    inline void set_PSR_IICMode_SCR()
    {
        PSR |= 1u << 2u;
    }

    /**
     * Clear PSR's SCR bit.
     */
    inline void clear_PSR_IICMode_SCR()
    {
        PSR &= ~(1u << 2u);
    }

    /**
     * Toggle PSR's SCR bit.
     */
    inline void toggle_PSR_IICMode_SCR()
    {
        PSR ^= 1u << 2u;
    }

    /**
     * Get PSR's WTDF bit.
     */
    USIC0_CH0_PSR_IICMode_WTDF get_PSR_IICMode_WTDF()
    {
        return USIC0_CH0_PSR_IICMode_WTDF(PSR_IICMode & (1u << 1u));
    }

    /**
     * Set PSR's WTDF bit.
     */
    inline void set_PSR_IICMode_WTDF()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's WTDF bit.
     */
    inline void clear_PSR_IICMode_WTDF()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's WTDF bit.
     */
    inline void toggle_PSR_IICMode_WTDF()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's SLSEL bit.
     */
    USIC0_CH0_PSR_IICMode_SLSEL get_PSR_IICMode_SLSEL()
    {
        return USIC0_CH0_PSR_IICMode_SLSEL(PSR_IICMode & (1u << 0u));
    }

    /**
     * Set PSR's SLSEL bit.
     */
    inline void set_PSR_IICMode_SLSEL()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's SLSEL bit.
     */
    inline void clear_PSR_IICMode_SLSEL()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's SLSEL bit.
     */
    inline void toggle_PSR_IICMode_SLSEL()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    USIC0_CH0_PSR_IISMode_BRGIF get_PSR_IISMode_BRGIF()
    {
        return USIC0_CH0_PSR_IISMode_BRGIF(PSR_IISMode & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_IISMode_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_IISMode_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_IISMode_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    USIC0_CH0_PSR_IISMode_AIF get_PSR_IISMode_AIF()
    {
        return USIC0_CH0_PSR_IISMode_AIF(PSR_IISMode & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_IISMode_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_IISMode_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_IISMode_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    USIC0_CH0_PSR_IISMode_RIF get_PSR_IISMode_RIF()
    {
        return USIC0_CH0_PSR_IISMode_RIF(PSR_IISMode & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_IISMode_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_IISMode_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_IISMode_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    USIC0_CH0_PSR_IISMode_TBIF get_PSR_IISMode_TBIF()
    {
        return USIC0_CH0_PSR_IISMode_TBIF(PSR_IISMode & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_IISMode_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_IISMode_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_IISMode_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    USIC0_CH0_PSR_IISMode_TSIF get_PSR_IISMode_TSIF()
    {
        return USIC0_CH0_PSR_IISMode_TSIF(PSR_IISMode & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_IISMode_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_IISMode_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_IISMode_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    USIC0_CH0_PSR_IISMode_DLIF get_PSR_IISMode_DLIF()
    {
        return USIC0_CH0_PSR_IISMode_DLIF(PSR_IISMode & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_IISMode_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_IISMode_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_IISMode_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    USIC0_CH0_PSR_IISMode_RSIF get_PSR_IISMode_RSIF()
    {
        return USIC0_CH0_PSR_IISMode_RSIF(PSR_IISMode & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_IISMode_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_IISMode_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_IISMode_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's END bit.
     */
    USIC0_CH0_PSR_IISMode_END get_PSR_IISMode_END()
    {
        return USIC0_CH0_PSR_IISMode_END(PSR_IISMode & (1u << 6u));
    }

    /**
     * Set PSR's END bit.
     */
    inline void set_PSR_IISMode_END()
    {
        PSR |= 1u << 6u;
    }

    /**
     * Clear PSR's END bit.
     */
    inline void clear_PSR_IISMode_END()
    {
        PSR &= ~(1u << 6u);
    }

    /**
     * Toggle PSR's END bit.
     */
    inline void toggle_PSR_IISMode_END()
    {
        PSR ^= 1u << 6u;
    }

    /**
     * Get PSR's WARE bit.
     */
    USIC0_CH0_PSR_IISMode_WARE get_PSR_IISMode_WARE()
    {
        return USIC0_CH0_PSR_IISMode_WARE(PSR_IISMode & (1u << 5u));
    }

    /**
     * Set PSR's WARE bit.
     */
    inline void set_PSR_IISMode_WARE()
    {
        PSR |= 1u << 5u;
    }

    /**
     * Clear PSR's WARE bit.
     */
    inline void clear_PSR_IISMode_WARE()
    {
        PSR &= ~(1u << 5u);
    }

    /**
     * Toggle PSR's WARE bit.
     */
    inline void toggle_PSR_IISMode_WARE()
    {
        PSR ^= 1u << 5u;
    }

    /**
     * Get PSR's WAFE bit.
     */
    USIC0_CH0_PSR_IISMode_WAFE get_PSR_IISMode_WAFE()
    {
        return USIC0_CH0_PSR_IISMode_WAFE(PSR_IISMode & (1u << 4u));
    }

    /**
     * Set PSR's WAFE bit.
     */
    inline void set_PSR_IISMode_WAFE()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's WAFE bit.
     */
    inline void clear_PSR_IISMode_WAFE()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's WAFE bit.
     */
    inline void toggle_PSR_IISMode_WAFE()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's DX2TEV bit.
     */
    USIC0_CH0_PSR_IISMode_DX2TEV get_PSR_IISMode_DX2TEV()
    {
        return USIC0_CH0_PSR_IISMode_DX2TEV(PSR_IISMode & (1u << 3u));
    }

    /**
     * Set PSR's DX2TEV bit.
     */
    inline void set_PSR_IISMode_DX2TEV()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's DX2TEV bit.
     */
    inline void clear_PSR_IISMode_DX2TEV()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's DX2TEV bit.
     */
    inline void toggle_PSR_IISMode_DX2TEV()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's DX2S bit.
     */
    USIC0_CH0_PSR_IISMode_DX2S get_PSR_IISMode_DX2S()
    {
        return USIC0_CH0_PSR_IISMode_DX2S(PSR_IISMode & (1u << 1u));
    }

    /**
     * Set PSR's DX2S bit.
     */
    inline void set_PSR_IISMode_DX2S()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's DX2S bit.
     */
    inline void clear_PSR_IISMode_DX2S()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's DX2S bit.
     */
    inline void toggle_PSR_IISMode_DX2S()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's WA bit.
     */
    USIC0_CH0_PSR_IISMode_WA get_PSR_IISMode_WA()
    {
        return USIC0_CH0_PSR_IISMode_WA(PSR_IISMode & (1u << 0u));
    }

    /**
     * Set PSR's WA bit.
     */
    inline void set_PSR_IISMode_WA()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's WA bit.
     */
    inline void clear_PSR_IISMode_WA()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's WA bit.
     */
    inline void toggle_PSR_IISMode_WA()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Set PSCR's CBRGIF bit.
     */
    inline void set_PSCR_CBRGIF()
    {
        PSCR |= 1u << 16u;
    }

    /**
     * Clear PSCR's CBRGIF bit.
     */
    inline void clear_PSCR_CBRGIF()
    {
        PSCR &= ~(1u << 16u);
    }

    /**
     * Toggle PSCR's CBRGIF bit.
     */
    inline void toggle_PSCR_CBRGIF()
    {
        PSCR ^= 1u << 16u;
    }

    /**
     * Set PSCR's CAIF bit.
     */
    inline void set_PSCR_CAIF()
    {
        PSCR |= 1u << 15u;
    }

    /**
     * Clear PSCR's CAIF bit.
     */
    inline void clear_PSCR_CAIF()
    {
        PSCR &= ~(1u << 15u);
    }

    /**
     * Toggle PSCR's CAIF bit.
     */
    inline void toggle_PSCR_CAIF()
    {
        PSCR ^= 1u << 15u;
    }

    /**
     * Set PSCR's CRIF bit.
     */
    inline void set_PSCR_CRIF()
    {
        PSCR |= 1u << 14u;
    }

    /**
     * Clear PSCR's CRIF bit.
     */
    inline void clear_PSCR_CRIF()
    {
        PSCR &= ~(1u << 14u);
    }

    /**
     * Toggle PSCR's CRIF bit.
     */
    inline void toggle_PSCR_CRIF()
    {
        PSCR ^= 1u << 14u;
    }

    /**
     * Set PSCR's CTBIF bit.
     */
    inline void set_PSCR_CTBIF()
    {
        PSCR |= 1u << 13u;
    }

    /**
     * Clear PSCR's CTBIF bit.
     */
    inline void clear_PSCR_CTBIF()
    {
        PSCR &= ~(1u << 13u);
    }

    /**
     * Toggle PSCR's CTBIF bit.
     */
    inline void toggle_PSCR_CTBIF()
    {
        PSCR ^= 1u << 13u;
    }

    /**
     * Set PSCR's CTSIF bit.
     */
    inline void set_PSCR_CTSIF()
    {
        PSCR |= 1u << 12u;
    }

    /**
     * Clear PSCR's CTSIF bit.
     */
    inline void clear_PSCR_CTSIF()
    {
        PSCR &= ~(1u << 12u);
    }

    /**
     * Toggle PSCR's CTSIF bit.
     */
    inline void toggle_PSCR_CTSIF()
    {
        PSCR ^= 1u << 12u;
    }

    /**
     * Set PSCR's CDLIF bit.
     */
    inline void set_PSCR_CDLIF()
    {
        PSCR |= 1u << 11u;
    }

    /**
     * Clear PSCR's CDLIF bit.
     */
    inline void clear_PSCR_CDLIF()
    {
        PSCR &= ~(1u << 11u);
    }

    /**
     * Toggle PSCR's CDLIF bit.
     */
    inline void toggle_PSCR_CDLIF()
    {
        PSCR ^= 1u << 11u;
    }

    /**
     * Set PSCR's CRSIF bit.
     */
    inline void set_PSCR_CRSIF()
    {
        PSCR |= 1u << 10u;
    }

    /**
     * Clear PSCR's CRSIF bit.
     */
    inline void clear_PSCR_CRSIF()
    {
        PSCR &= ~(1u << 10u);
    }

    /**
     * Toggle PSCR's CRSIF bit.
     */
    inline void toggle_PSCR_CRSIF()
    {
        PSCR ^= 1u << 10u;
    }

    /**
     * Set PSCR's CST9 bit.
     */
    inline void set_PSCR_CST9()
    {
        PSCR |= 1u << 9u;
    }

    /**
     * Clear PSCR's CST9 bit.
     */
    inline void clear_PSCR_CST9()
    {
        PSCR &= ~(1u << 9u);
    }

    /**
     * Toggle PSCR's CST9 bit.
     */
    inline void toggle_PSCR_CST9()
    {
        PSCR ^= 1u << 9u;
    }

    /**
     * Set PSCR's CST8 bit.
     */
    inline void set_PSCR_CST8()
    {
        PSCR |= 1u << 8u;
    }

    /**
     * Clear PSCR's CST8 bit.
     */
    inline void clear_PSCR_CST8()
    {
        PSCR &= ~(1u << 8u);
    }

    /**
     * Toggle PSCR's CST8 bit.
     */
    inline void toggle_PSCR_CST8()
    {
        PSCR ^= 1u << 8u;
    }

    /**
     * Set PSCR's CST7 bit.
     */
    inline void set_PSCR_CST7()
    {
        PSCR |= 1u << 7u;
    }

    /**
     * Clear PSCR's CST7 bit.
     */
    inline void clear_PSCR_CST7()
    {
        PSCR &= ~(1u << 7u);
    }

    /**
     * Toggle PSCR's CST7 bit.
     */
    inline void toggle_PSCR_CST7()
    {
        PSCR ^= 1u << 7u;
    }

    /**
     * Set PSCR's CST6 bit.
     */
    inline void set_PSCR_CST6()
    {
        PSCR |= 1u << 6u;
    }

    /**
     * Clear PSCR's CST6 bit.
     */
    inline void clear_PSCR_CST6()
    {
        PSCR &= ~(1u << 6u);
    }

    /**
     * Toggle PSCR's CST6 bit.
     */
    inline void toggle_PSCR_CST6()
    {
        PSCR ^= 1u << 6u;
    }

    /**
     * Set PSCR's CST5 bit.
     */
    inline void set_PSCR_CST5()
    {
        PSCR |= 1u << 5u;
    }

    /**
     * Clear PSCR's CST5 bit.
     */
    inline void clear_PSCR_CST5()
    {
        PSCR &= ~(1u << 5u);
    }

    /**
     * Toggle PSCR's CST5 bit.
     */
    inline void toggle_PSCR_CST5()
    {
        PSCR ^= 1u << 5u;
    }

    /**
     * Set PSCR's CST4 bit.
     */
    inline void set_PSCR_CST4()
    {
        PSCR |= 1u << 4u;
    }

    /**
     * Clear PSCR's CST4 bit.
     */
    inline void clear_PSCR_CST4()
    {
        PSCR &= ~(1u << 4u);
    }

    /**
     * Toggle PSCR's CST4 bit.
     */
    inline void toggle_PSCR_CST4()
    {
        PSCR ^= 1u << 4u;
    }

    /**
     * Set PSCR's CST3 bit.
     */
    inline void set_PSCR_CST3()
    {
        PSCR |= 1u << 3u;
    }

    /**
     * Clear PSCR's CST3 bit.
     */
    inline void clear_PSCR_CST3()
    {
        PSCR &= ~(1u << 3u);
    }

    /**
     * Toggle PSCR's CST3 bit.
     */
    inline void toggle_PSCR_CST3()
    {
        PSCR ^= 1u << 3u;
    }

    /**
     * Set PSCR's CST2 bit.
     */
    inline void set_PSCR_CST2()
    {
        PSCR |= 1u << 2u;
    }

    /**
     * Clear PSCR's CST2 bit.
     */
    inline void clear_PSCR_CST2()
    {
        PSCR &= ~(1u << 2u);
    }

    /**
     * Toggle PSCR's CST2 bit.
     */
    inline void toggle_PSCR_CST2()
    {
        PSCR ^= 1u << 2u;
    }

    /**
     * Set PSCR's CST1 bit.
     */
    inline void set_PSCR_CST1()
    {
        PSCR |= 1u << 1u;
    }

    /**
     * Clear PSCR's CST1 bit.
     */
    inline void clear_PSCR_CST1()
    {
        PSCR &= ~(1u << 1u);
    }

    /**
     * Toggle PSCR's CST1 bit.
     */
    inline void toggle_PSCR_CST1()
    {
        PSCR ^= 1u << 1u;
    }

    /**
     * Set PSCR's CST0 bit.
     */
    inline void set_PSCR_CST0()
    {
        PSCR |= 1u << 0u;
    }

    /**
     * Clear PSCR's CST0 bit.
     */
    inline void clear_PSCR_CST0()
    {
        PSCR &= ~(1u << 0u);
    }

    /**
     * Toggle PSCR's CST0 bit.
     */
    inline void toggle_PSCR_CST0()
    {
        PSCR ^= 1u << 0u;
    }

    /**
     * Get RBUFSR's DS bit.
     */
    bool get_RBUFSR_DS()
    {
        return RBUFSR & (1u << 15u);
    }

    /**
     * Get RBUFSR's RDV1 bit.
     */
    bool get_RBUFSR_RDV1()
    {
        return RBUFSR & (1u << 14u);
    }

    /**
     * Get RBUFSR's RDV0 bit.
     */
    bool get_RBUFSR_RDV0()
    {
        return RBUFSR & (1u << 13u);
    }

    /**
     * Get RBUFSR's PERR bit.
     */
    bool get_RBUFSR_PERR()
    {
        return RBUFSR & (1u << 9u);
    }

    /**
     * Get RBUFSR's PAR bit.
     */
    bool get_RBUFSR_PAR()
    {
        return RBUFSR & (1u << 8u);
    }

    /**
     * Get RBUFSR's SOF bit.
     */
    bool get_RBUFSR_SOF()
    {
        return RBUFSR & (1u << 6u);
    }

    /**
     * Get RBUFSR's WLEN field.
     */
    uint8_t get_RBUFSR_WLEN()
    {
        return (RBUFSR >> 0u) & 0b1111u;
    }

    /**
     * Get RBUF's DSR field.
     */
    uint16_t get_RBUF_DSR()
    {
        return (RBUF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RBUFD's DSR field.
     */
    uint16_t get_RBUFD_DSR()
    {
        return (RBUFD >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RBUF0's DSR0 field.
     */
    uint16_t get_RBUF0_DSR0()
    {
        return (RBUF0 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RBUF1's DSR1 field.
     */
    uint16_t get_RBUF1_DSR1()
    {
        return (RBUF1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RBUF01SR's DS1 bit.
     */
    USIC0_CH0_RBUF01SR_DS1 get_RBUF01SR_DS1()
    {
        return USIC0_CH0_RBUF01SR_DS1(RBUF01SR & (1u << 31u));
    }

    /**
     * Get RBUF01SR's RDV11 bit.
     */
    USIC0_CH0_RBUF01SR_RDV11 get_RBUF01SR_RDV11()
    {
        return USIC0_CH0_RBUF01SR_RDV11(RBUF01SR & (1u << 30u));
    }

    /**
     * Get RBUF01SR's RDV10 bit.
     */
    USIC0_CH0_RBUF01SR_RDV10 get_RBUF01SR_RDV10()
    {
        return USIC0_CH0_RBUF01SR_RDV10(RBUF01SR & (1u << 29u));
    }

    /**
     * Get RBUF01SR's PERR1 bit.
     */
    USIC0_CH0_RBUF01SR_PERR1 get_RBUF01SR_PERR1()
    {
        return USIC0_CH0_RBUF01SR_PERR1(RBUF01SR & (1u << 25u));
    }

    /**
     * Get RBUF01SR's PAR1 bit.
     */
    bool get_RBUF01SR_PAR1()
    {
        return RBUF01SR & (1u << 24u);
    }

    /**
     * Get RBUF01SR's SOF1 bit.
     */
    USIC0_CH0_RBUF01SR_SOF1 get_RBUF01SR_SOF1()
    {
        return USIC0_CH0_RBUF01SR_SOF1(RBUF01SR & (1u << 22u));
    }

    /**
     * Get RBUF01SR's WLEN1 field.
     */
    USIC0_CH0_RBUF01SR_WLEN1 get_RBUF01SR_WLEN1()
    {
        return USIC0_CH0_RBUF01SR_WLEN1((RBUF01SR >> 16u) & 0b1111u);
    }

    /**
     * Get RBUF01SR's DS0 bit.
     */
    USIC0_CH0_RBUF01SR_DS0 get_RBUF01SR_DS0()
    {
        return USIC0_CH0_RBUF01SR_DS0(RBUF01SR & (1u << 15u));
    }

    /**
     * Get RBUF01SR's RDV01 bit.
     */
    USIC0_CH0_RBUF01SR_RDV01 get_RBUF01SR_RDV01()
    {
        return USIC0_CH0_RBUF01SR_RDV01(RBUF01SR & (1u << 14u));
    }

    /**
     * Get RBUF01SR's RDV00 bit.
     */
    USIC0_CH0_RBUF01SR_RDV00 get_RBUF01SR_RDV00()
    {
        return USIC0_CH0_RBUF01SR_RDV00(RBUF01SR & (1u << 13u));
    }

    /**
     * Get RBUF01SR's PERR0 bit.
     */
    USIC0_CH0_RBUF01SR_PERR0 get_RBUF01SR_PERR0()
    {
        return USIC0_CH0_RBUF01SR_PERR0(RBUF01SR & (1u << 9u));
    }

    /**
     * Get RBUF01SR's PAR0 bit.
     */
    bool get_RBUF01SR_PAR0()
    {
        return RBUF01SR & (1u << 8u);
    }

    /**
     * Get RBUF01SR's SOF0 bit.
     */
    USIC0_CH0_RBUF01SR_SOF0 get_RBUF01SR_SOF0()
    {
        return USIC0_CH0_RBUF01SR_SOF0(RBUF01SR & (1u << 6u));
    }

    /**
     * Get RBUF01SR's WLEN0 field.
     */
    uint8_t get_RBUF01SR_WLEN0()
    {
        return (RBUF01SR >> 0u) & 0b1111u;
    }

    /**
     * Set FMR's SIO5 bit.
     */
    inline void set_FMR_SIO5()
    {
        FMR |= 1u << 21u;
    }

    /**
     * Clear FMR's SIO5 bit.
     */
    inline void clear_FMR_SIO5()
    {
        FMR &= ~(1u << 21u);
    }

    /**
     * Toggle FMR's SIO5 bit.
     */
    inline void toggle_FMR_SIO5()
    {
        FMR ^= 1u << 21u;
    }

    /**
     * Set FMR's SIO4 bit.
     */
    inline void set_FMR_SIO4()
    {
        FMR |= 1u << 20u;
    }

    /**
     * Clear FMR's SIO4 bit.
     */
    inline void clear_FMR_SIO4()
    {
        FMR &= ~(1u << 20u);
    }

    /**
     * Toggle FMR's SIO4 bit.
     */
    inline void toggle_FMR_SIO4()
    {
        FMR ^= 1u << 20u;
    }

    /**
     * Set FMR's SIO3 bit.
     */
    inline void set_FMR_SIO3()
    {
        FMR |= 1u << 19u;
    }

    /**
     * Clear FMR's SIO3 bit.
     */
    inline void clear_FMR_SIO3()
    {
        FMR &= ~(1u << 19u);
    }

    /**
     * Toggle FMR's SIO3 bit.
     */
    inline void toggle_FMR_SIO3()
    {
        FMR ^= 1u << 19u;
    }

    /**
     * Set FMR's SIO2 bit.
     */
    inline void set_FMR_SIO2()
    {
        FMR |= 1u << 18u;
    }

    /**
     * Clear FMR's SIO2 bit.
     */
    inline void clear_FMR_SIO2()
    {
        FMR &= ~(1u << 18u);
    }

    /**
     * Toggle FMR's SIO2 bit.
     */
    inline void toggle_FMR_SIO2()
    {
        FMR ^= 1u << 18u;
    }

    /**
     * Set FMR's SIO1 bit.
     */
    inline void set_FMR_SIO1()
    {
        FMR |= 1u << 17u;
    }

    /**
     * Clear FMR's SIO1 bit.
     */
    inline void clear_FMR_SIO1()
    {
        FMR &= ~(1u << 17u);
    }

    /**
     * Toggle FMR's SIO1 bit.
     */
    inline void toggle_FMR_SIO1()
    {
        FMR ^= 1u << 17u;
    }

    /**
     * Set FMR's SIO0 bit.
     */
    inline void set_FMR_SIO0()
    {
        FMR |= 1u << 16u;
    }

    /**
     * Clear FMR's SIO0 bit.
     */
    inline void clear_FMR_SIO0()
    {
        FMR &= ~(1u << 16u);
    }

    /**
     * Toggle FMR's SIO0 bit.
     */
    inline void toggle_FMR_SIO0()
    {
        FMR ^= 1u << 16u;
    }

    /**
     * Set FMR's CRDV1 bit.
     */
    inline void set_FMR_CRDV1()
    {
        FMR |= 1u << 15u;
    }

    /**
     * Clear FMR's CRDV1 bit.
     */
    inline void clear_FMR_CRDV1()
    {
        FMR &= ~(1u << 15u);
    }

    /**
     * Toggle FMR's CRDV1 bit.
     */
    inline void toggle_FMR_CRDV1()
    {
        FMR ^= 1u << 15u;
    }

    /**
     * Set FMR's CRDV0 bit.
     */
    inline void set_FMR_CRDV0()
    {
        FMR |= 1u << 14u;
    }

    /**
     * Clear FMR's CRDV0 bit.
     */
    inline void clear_FMR_CRDV0()
    {
        FMR &= ~(1u << 14u);
    }

    /**
     * Toggle FMR's CRDV0 bit.
     */
    inline void toggle_FMR_CRDV0()
    {
        FMR ^= 1u << 14u;
    }

    /**
     * Set FMR's ATVC bit.
     */
    inline void set_FMR_ATVC()
    {
        FMR |= 1u << 4u;
    }

    /**
     * Clear FMR's ATVC bit.
     */
    inline void clear_FMR_ATVC()
    {
        FMR &= ~(1u << 4u);
    }

    /**
     * Toggle FMR's ATVC bit.
     */
    inline void toggle_FMR_ATVC()
    {
        FMR ^= 1u << 4u;
    }

    /**
     * Set FMR's MTDV field.
     */
    inline void set_FMR_MTDV(USIC0_CH0_FMR_MTDV value)
    {
        uint32_t curr = FMR;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        FMR = curr;
    }

    /**
     * Get TBUF's TDATA field.
     */
    uint16_t get_TBUF_TDATA(std::size_t index)
    {
        return (TBUF[index] >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TBUF's TDATA field.
     */
    inline void set_TBUF_TDATA(std::size_t index, uint16_t value)
    {
        uint32_t curr = TBUF[index];

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TBUF[index] = curr;
    }

    /**
     * Get BYP's BDATA field.
     */
    uint16_t get_BYP_BDATA()
    {
        return (BYP >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set BYP's BDATA field.
     */
    inline void set_BYP_BDATA(uint16_t value)
    {
        uint32_t curr = BYP;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        BYP = curr;
    }

    /**
     * Get BYPCR's BHPC field.
     */
    uint8_t get_BYPCR_BHPC()
    {
        return (BYPCR >> 21u) & 0b111u;
    }

    /**
     * Set BYPCR's BHPC field.
     */
    inline void set_BYPCR_BHPC(uint8_t value)
    {
        uint32_t curr = BYPCR;

        curr &= ~(0b111u << 21u);
        curr |= (value & 0b111u) << 21u;

        BYPCR = curr;
    }

    /**
     * Get BYPCR's BSELO field.
     */
    uint8_t get_BYPCR_BSELO()
    {
        return (BYPCR >> 16u) & 0b11111u;
    }

    /**
     * Set BYPCR's BSELO field.
     */
    inline void set_BYPCR_BSELO(uint8_t value)
    {
        uint32_t curr = BYPCR;

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        BYPCR = curr;
    }

    /**
     * Get BYPCR's BDV bit.
     */
    USIC0_CH0_BYPCR_BDV get_BYPCR_BDV()
    {
        return USIC0_CH0_BYPCR_BDV(BYPCR & (1u << 15u));
    }

    /**
     * Get BYPCR's BPRIO bit.
     */
    USIC0_CH0_BYPCR_BPRIO get_BYPCR_BPRIO()
    {
        return USIC0_CH0_BYPCR_BPRIO(BYPCR & (1u << 13u));
    }

    /**
     * Set BYPCR's BPRIO bit.
     */
    inline void set_BYPCR_BPRIO()
    {
        BYPCR |= 1u << 13u;
    }

    /**
     * Clear BYPCR's BPRIO bit.
     */
    inline void clear_BYPCR_BPRIO()
    {
        BYPCR &= ~(1u << 13u);
    }

    /**
     * Toggle BYPCR's BPRIO bit.
     */
    inline void toggle_BYPCR_BPRIO()
    {
        BYPCR ^= 1u << 13u;
    }

    /**
     * Get BYPCR's BDVTR bit.
     */
    USIC0_CH0_BYPCR_BDVTR get_BYPCR_BDVTR()
    {
        return USIC0_CH0_BYPCR_BDVTR(BYPCR & (1u << 12u));
    }

    /**
     * Set BYPCR's BDVTR bit.
     */
    inline void set_BYPCR_BDVTR()
    {
        BYPCR |= 1u << 12u;
    }

    /**
     * Clear BYPCR's BDVTR bit.
     */
    inline void clear_BYPCR_BDVTR()
    {
        BYPCR &= ~(1u << 12u);
    }

    /**
     * Toggle BYPCR's BDVTR bit.
     */
    inline void toggle_BYPCR_BDVTR()
    {
        BYPCR ^= 1u << 12u;
    }

    /**
     * Get BYPCR's BDEN field.
     */
    USIC0_CH0_BYPCR_BDEN get_BYPCR_BDEN()
    {
        return USIC0_CH0_BYPCR_BDEN((BYPCR >> 10u) & 0b11u);
    }

    /**
     * Set BYPCR's BDEN field.
     */
    inline void set_BYPCR_BDEN(USIC0_CH0_BYPCR_BDEN value)
    {
        uint32_t curr = BYPCR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BYPCR = curr;
    }

    /**
     * Get BYPCR's BDSSM bit.
     */
    USIC0_CH0_BYPCR_BDSSM get_BYPCR_BDSSM()
    {
        return USIC0_CH0_BYPCR_BDSSM(BYPCR & (1u << 8u));
    }

    /**
     * Set BYPCR's BDSSM bit.
     */
    inline void set_BYPCR_BDSSM()
    {
        BYPCR |= 1u << 8u;
    }

    /**
     * Clear BYPCR's BDSSM bit.
     */
    inline void clear_BYPCR_BDSSM()
    {
        BYPCR &= ~(1u << 8u);
    }

    /**
     * Toggle BYPCR's BDSSM bit.
     */
    inline void toggle_BYPCR_BDSSM()
    {
        BYPCR ^= 1u << 8u;
    }

    /**
     * Get BYPCR's BWLE field.
     */
    uint8_t get_BYPCR_BWLE()
    {
        return (BYPCR >> 0u) & 0b1111u;
    }

    /**
     * Set BYPCR's BWLE field.
     */
    inline void set_BYPCR_BWLE(uint8_t value)
    {
        uint32_t curr = BYPCR;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        BYPCR = curr;
    }

    /**
     * Get TBCTR's TBERIEN bit.
     */
    USIC0_CH0_TBCTR_TBERIEN get_TBCTR_TBERIEN()
    {
        return USIC0_CH0_TBCTR_TBERIEN(TBCTR & (1u << 31u));
    }

    /**
     * Set TBCTR's TBERIEN bit.
     */
    inline void set_TBCTR_TBERIEN()
    {
        TBCTR |= 1u << 31u;
    }

    /**
     * Clear TBCTR's TBERIEN bit.
     */
    inline void clear_TBCTR_TBERIEN()
    {
        TBCTR &= ~(1u << 31u);
    }

    /**
     * Toggle TBCTR's TBERIEN bit.
     */
    inline void toggle_TBCTR_TBERIEN()
    {
        TBCTR ^= 1u << 31u;
    }

    /**
     * Get TBCTR's STBIEN bit.
     */
    USIC0_CH0_TBCTR_STBIEN get_TBCTR_STBIEN()
    {
        return USIC0_CH0_TBCTR_STBIEN(TBCTR & (1u << 30u));
    }

    /**
     * Set TBCTR's STBIEN bit.
     */
    inline void set_TBCTR_STBIEN()
    {
        TBCTR |= 1u << 30u;
    }

    /**
     * Clear TBCTR's STBIEN bit.
     */
    inline void clear_TBCTR_STBIEN()
    {
        TBCTR &= ~(1u << 30u);
    }

    /**
     * Toggle TBCTR's STBIEN bit.
     */
    inline void toggle_TBCTR_STBIEN()
    {
        TBCTR ^= 1u << 30u;
    }

    /**
     * Get TBCTR's LOF bit.
     */
    USIC0_CH0_TBCTR_LOF get_TBCTR_LOF()
    {
        return USIC0_CH0_TBCTR_LOF(TBCTR & (1u << 28u));
    }

    /**
     * Set TBCTR's LOF bit.
     */
    inline void set_TBCTR_LOF()
    {
        TBCTR |= 1u << 28u;
    }

    /**
     * Clear TBCTR's LOF bit.
     */
    inline void clear_TBCTR_LOF()
    {
        TBCTR &= ~(1u << 28u);
    }

    /**
     * Toggle TBCTR's LOF bit.
     */
    inline void toggle_TBCTR_LOF()
    {
        TBCTR ^= 1u << 28u;
    }

    /**
     * Get TBCTR's SIZE field.
     */
    USIC0_CH0_TBCTR_SIZE get_TBCTR_SIZE()
    {
        return USIC0_CH0_TBCTR_SIZE((TBCTR >> 24u) & 0b111u);
    }

    /**
     * Set TBCTR's SIZE field.
     */
    inline void set_TBCTR_SIZE(USIC0_CH0_TBCTR_SIZE value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        TBCTR = curr;
    }

    /**
     * Get TBCTR's ATBINP field.
     */
    USIC0_CH0_TBCTR_ATBINP get_TBCTR_ATBINP()
    {
        return USIC0_CH0_TBCTR_ATBINP((TBCTR >> 19u) & 0b111u);
    }

    /**
     * Set TBCTR's ATBINP field.
     */
    inline void set_TBCTR_ATBINP(USIC0_CH0_TBCTR_ATBINP value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111u << 19u);
        curr |= (std::to_underlying(value) & 0b111u) << 19u;

        TBCTR = curr;
    }

    /**
     * Get TBCTR's STBINP field.
     */
    USIC0_CH0_TBCTR_STBINP get_TBCTR_STBINP()
    {
        return USIC0_CH0_TBCTR_STBINP((TBCTR >> 16u) & 0b111u);
    }

    /**
     * Set TBCTR's STBINP field.
     */
    inline void set_TBCTR_STBINP(USIC0_CH0_TBCTR_STBINP value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        TBCTR = curr;
    }

    /**
     * Get TBCTR's STBTEN bit.
     */
    USIC0_CH0_TBCTR_STBTEN get_TBCTR_STBTEN()
    {
        return USIC0_CH0_TBCTR_STBTEN(TBCTR & (1u << 15u));
    }

    /**
     * Set TBCTR's STBTEN bit.
     */
    inline void set_TBCTR_STBTEN()
    {
        TBCTR |= 1u << 15u;
    }

    /**
     * Clear TBCTR's STBTEN bit.
     */
    inline void clear_TBCTR_STBTEN()
    {
        TBCTR &= ~(1u << 15u);
    }

    /**
     * Toggle TBCTR's STBTEN bit.
     */
    inline void toggle_TBCTR_STBTEN()
    {
        TBCTR ^= 1u << 15u;
    }

    /**
     * Get TBCTR's STBTM bit.
     */
    USIC0_CH0_TBCTR_STBTM get_TBCTR_STBTM()
    {
        return USIC0_CH0_TBCTR_STBTM(TBCTR & (1u << 14u));
    }

    /**
     * Set TBCTR's STBTM bit.
     */
    inline void set_TBCTR_STBTM()
    {
        TBCTR |= 1u << 14u;
    }

    /**
     * Clear TBCTR's STBTM bit.
     */
    inline void clear_TBCTR_STBTM()
    {
        TBCTR &= ~(1u << 14u);
    }

    /**
     * Toggle TBCTR's STBTM bit.
     */
    inline void toggle_TBCTR_STBTM()
    {
        TBCTR ^= 1u << 14u;
    }

    /**
     * Get TBCTR's LIMIT field.
     */
    uint8_t get_TBCTR_LIMIT()
    {
        return (TBCTR >> 8u) & 0b111111u;
    }

    /**
     * Set TBCTR's LIMIT field.
     */
    inline void set_TBCTR_LIMIT(uint8_t value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        TBCTR = curr;
    }

    /**
     * Set TBCTR's DPTR field.
     */
    inline void set_TBCTR_DPTR(uint8_t value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        TBCTR = curr;
    }

    /**
     * Get RBCTR's RBERIEN bit.
     */
    USIC0_CH0_RBCTR_RBERIEN get_RBCTR_RBERIEN()
    {
        return USIC0_CH0_RBCTR_RBERIEN(RBCTR & (1u << 31u));
    }

    /**
     * Set RBCTR's RBERIEN bit.
     */
    inline void set_RBCTR_RBERIEN()
    {
        RBCTR |= 1u << 31u;
    }

    /**
     * Clear RBCTR's RBERIEN bit.
     */
    inline void clear_RBCTR_RBERIEN()
    {
        RBCTR &= ~(1u << 31u);
    }

    /**
     * Toggle RBCTR's RBERIEN bit.
     */
    inline void toggle_RBCTR_RBERIEN()
    {
        RBCTR ^= 1u << 31u;
    }

    /**
     * Get RBCTR's SRBIEN bit.
     */
    USIC0_CH0_RBCTR_SRBIEN get_RBCTR_SRBIEN()
    {
        return USIC0_CH0_RBCTR_SRBIEN(RBCTR & (1u << 30u));
    }

    /**
     * Set RBCTR's SRBIEN bit.
     */
    inline void set_RBCTR_SRBIEN()
    {
        RBCTR |= 1u << 30u;
    }

    /**
     * Clear RBCTR's SRBIEN bit.
     */
    inline void clear_RBCTR_SRBIEN()
    {
        RBCTR &= ~(1u << 30u);
    }

    /**
     * Toggle RBCTR's SRBIEN bit.
     */
    inline void toggle_RBCTR_SRBIEN()
    {
        RBCTR ^= 1u << 30u;
    }

    /**
     * Get RBCTR's ARBIEN bit.
     */
    USIC0_CH0_RBCTR_ARBIEN get_RBCTR_ARBIEN()
    {
        return USIC0_CH0_RBCTR_ARBIEN(RBCTR & (1u << 29u));
    }

    /**
     * Set RBCTR's ARBIEN bit.
     */
    inline void set_RBCTR_ARBIEN()
    {
        RBCTR |= 1u << 29u;
    }

    /**
     * Clear RBCTR's ARBIEN bit.
     */
    inline void clear_RBCTR_ARBIEN()
    {
        RBCTR &= ~(1u << 29u);
    }

    /**
     * Toggle RBCTR's ARBIEN bit.
     */
    inline void toggle_RBCTR_ARBIEN()
    {
        RBCTR ^= 1u << 29u;
    }

    /**
     * Get RBCTR's LOF bit.
     */
    USIC0_CH0_RBCTR_LOF get_RBCTR_LOF()
    {
        return USIC0_CH0_RBCTR_LOF(RBCTR & (1u << 28u));
    }

    /**
     * Set RBCTR's LOF bit.
     */
    inline void set_RBCTR_LOF()
    {
        RBCTR |= 1u << 28u;
    }

    /**
     * Clear RBCTR's LOF bit.
     */
    inline void clear_RBCTR_LOF()
    {
        RBCTR &= ~(1u << 28u);
    }

    /**
     * Toggle RBCTR's LOF bit.
     */
    inline void toggle_RBCTR_LOF()
    {
        RBCTR ^= 1u << 28u;
    }

    /**
     * Get RBCTR's RNM bit.
     */
    USIC0_CH0_RBCTR_RNM get_RBCTR_RNM()
    {
        return USIC0_CH0_RBCTR_RNM(RBCTR & (1u << 27u));
    }

    /**
     * Set RBCTR's RNM bit.
     */
    inline void set_RBCTR_RNM()
    {
        RBCTR |= 1u << 27u;
    }

    /**
     * Clear RBCTR's RNM bit.
     */
    inline void clear_RBCTR_RNM()
    {
        RBCTR &= ~(1u << 27u);
    }

    /**
     * Toggle RBCTR's RNM bit.
     */
    inline void toggle_RBCTR_RNM()
    {
        RBCTR ^= 1u << 27u;
    }

    /**
     * Get RBCTR's SIZE field.
     */
    USIC0_CH0_RBCTR_SIZE get_RBCTR_SIZE()
    {
        return USIC0_CH0_RBCTR_SIZE((RBCTR >> 24u) & 0b111u);
    }

    /**
     * Set RBCTR's SIZE field.
     */
    inline void set_RBCTR_SIZE(USIC0_CH0_RBCTR_SIZE value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        RBCTR = curr;
    }

    /**
     * Get RBCTR's RCIM field.
     */
    USIC0_CH0_RBCTR_RCIM get_RBCTR_RCIM()
    {
        return USIC0_CH0_RBCTR_RCIM((RBCTR >> 22u) & 0b11u);
    }

    /**
     * Set RBCTR's RCIM field.
     */
    inline void set_RBCTR_RCIM(USIC0_CH0_RBCTR_RCIM value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(value) & 0b11u) << 22u;

        RBCTR = curr;
    }

    /**
     * Get RBCTR's ARBINP field.
     */
    USIC0_CH0_RBCTR_ARBINP get_RBCTR_ARBINP()
    {
        return USIC0_CH0_RBCTR_ARBINP((RBCTR >> 19u) & 0b111u);
    }

    /**
     * Set RBCTR's ARBINP field.
     */
    inline void set_RBCTR_ARBINP(USIC0_CH0_RBCTR_ARBINP value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111u << 19u);
        curr |= (std::to_underlying(value) & 0b111u) << 19u;

        RBCTR = curr;
    }

    /**
     * Get RBCTR's SRBINP field.
     */
    USIC0_CH0_RBCTR_SRBINP get_RBCTR_SRBINP()
    {
        return USIC0_CH0_RBCTR_SRBINP((RBCTR >> 16u) & 0b111u);
    }

    /**
     * Set RBCTR's SRBINP field.
     */
    inline void set_RBCTR_SRBINP(USIC0_CH0_RBCTR_SRBINP value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        RBCTR = curr;
    }

    /**
     * Get RBCTR's SRBTEN bit.
     */
    USIC0_CH0_RBCTR_SRBTEN get_RBCTR_SRBTEN()
    {
        return USIC0_CH0_RBCTR_SRBTEN(RBCTR & (1u << 15u));
    }

    /**
     * Set RBCTR's SRBTEN bit.
     */
    inline void set_RBCTR_SRBTEN()
    {
        RBCTR |= 1u << 15u;
    }

    /**
     * Clear RBCTR's SRBTEN bit.
     */
    inline void clear_RBCTR_SRBTEN()
    {
        RBCTR &= ~(1u << 15u);
    }

    /**
     * Toggle RBCTR's SRBTEN bit.
     */
    inline void toggle_RBCTR_SRBTEN()
    {
        RBCTR ^= 1u << 15u;
    }

    /**
     * Get RBCTR's SRBTM bit.
     */
    USIC0_CH0_RBCTR_SRBTM get_RBCTR_SRBTM()
    {
        return USIC0_CH0_RBCTR_SRBTM(RBCTR & (1u << 14u));
    }

    /**
     * Set RBCTR's SRBTM bit.
     */
    inline void set_RBCTR_SRBTM()
    {
        RBCTR |= 1u << 14u;
    }

    /**
     * Clear RBCTR's SRBTM bit.
     */
    inline void clear_RBCTR_SRBTM()
    {
        RBCTR &= ~(1u << 14u);
    }

    /**
     * Toggle RBCTR's SRBTM bit.
     */
    inline void toggle_RBCTR_SRBTM()
    {
        RBCTR ^= 1u << 14u;
    }

    /**
     * Get RBCTR's LIMIT field.
     */
    uint8_t get_RBCTR_LIMIT()
    {
        return (RBCTR >> 8u) & 0b111111u;
    }

    /**
     * Set RBCTR's LIMIT field.
     */
    inline void set_RBCTR_LIMIT(uint8_t value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        RBCTR = curr;
    }

    /**
     * Set RBCTR's DPTR field.
     */
    inline void set_RBCTR_DPTR(uint8_t value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        RBCTR = curr;
    }

    /**
     * Get TRBPTR's RDOPTR field.
     */
    uint8_t get_TRBPTR_RDOPTR()
    {
        return (TRBPTR >> 24u) & 0b111111u;
    }

    /**
     * Get TRBPTR's RDIPTR field.
     */
    uint8_t get_TRBPTR_RDIPTR()
    {
        return (TRBPTR >> 16u) & 0b111111u;
    }

    /**
     * Get TRBPTR's TDOPTR field.
     */
    uint8_t get_TRBPTR_TDOPTR()
    {
        return (TRBPTR >> 8u) & 0b111111u;
    }

    /**
     * Get TRBPTR's TDIPTR field.
     */
    uint8_t get_TRBPTR_TDIPTR()
    {
        return (TRBPTR >> 0u) & 0b111111u;
    }

    /**
     * Get TRBSR's TBFLVL field.
     */
    uint8_t get_TRBSR_TBFLVL()
    {
        return (TRBSR >> 24u) & 0b1111111u;
    }

    /**
     * Get TRBSR's RBFLVL field.
     */
    uint8_t get_TRBSR_RBFLVL()
    {
        return (TRBSR >> 16u) & 0b1111111u;
    }

    /**
     * Get TRBSR's STBT bit.
     */
    USIC0_CH0_TRBSR_STBT get_TRBSR_STBT()
    {
        return USIC0_CH0_TRBSR_STBT(TRBSR & (1u << 14u));
    }

    /**
     * Get TRBSR's TBUS bit.
     */
    USIC0_CH0_TRBSR_TBUS get_TRBSR_TBUS()
    {
        return USIC0_CH0_TRBSR_TBUS(TRBSR & (1u << 13u));
    }

    /**
     * Get TRBSR's TFULL bit.
     */
    USIC0_CH0_TRBSR_TFULL get_TRBSR_TFULL()
    {
        return USIC0_CH0_TRBSR_TFULL(TRBSR & (1u << 12u));
    }

    /**
     * Get TRBSR's TEMPTY bit.
     */
    USIC0_CH0_TRBSR_TEMPTY get_TRBSR_TEMPTY()
    {
        return USIC0_CH0_TRBSR_TEMPTY(TRBSR & (1u << 11u));
    }

    /**
     * Get TRBSR's TBERI bit.
     */
    USIC0_CH0_TRBSR_TBERI get_TRBSR_TBERI()
    {
        return USIC0_CH0_TRBSR_TBERI(TRBSR & (1u << 9u));
    }

    /**
     * Set TRBSR's TBERI bit.
     */
    inline void set_TRBSR_TBERI()
    {
        TRBSR |= 1u << 9u;
    }

    /**
     * Clear TRBSR's TBERI bit.
     */
    inline void clear_TRBSR_TBERI()
    {
        TRBSR &= ~(1u << 9u);
    }

    /**
     * Toggle TRBSR's TBERI bit.
     */
    inline void toggle_TRBSR_TBERI()
    {
        TRBSR ^= 1u << 9u;
    }

    /**
     * Get TRBSR's STBI bit.
     */
    USIC0_CH0_TRBSR_STBI get_TRBSR_STBI()
    {
        return USIC0_CH0_TRBSR_STBI(TRBSR & (1u << 8u));
    }

    /**
     * Set TRBSR's STBI bit.
     */
    inline void set_TRBSR_STBI()
    {
        TRBSR |= 1u << 8u;
    }

    /**
     * Clear TRBSR's STBI bit.
     */
    inline void clear_TRBSR_STBI()
    {
        TRBSR &= ~(1u << 8u);
    }

    /**
     * Toggle TRBSR's STBI bit.
     */
    inline void toggle_TRBSR_STBI()
    {
        TRBSR ^= 1u << 8u;
    }

    /**
     * Get TRBSR's SRBT bit.
     */
    USIC0_CH0_TRBSR_SRBT get_TRBSR_SRBT()
    {
        return USIC0_CH0_TRBSR_SRBT(TRBSR & (1u << 6u));
    }

    /**
     * Get TRBSR's RBUS bit.
     */
    USIC0_CH0_TRBSR_RBUS get_TRBSR_RBUS()
    {
        return USIC0_CH0_TRBSR_RBUS(TRBSR & (1u << 5u));
    }

    /**
     * Get TRBSR's RFULL bit.
     */
    USIC0_CH0_TRBSR_RFULL get_TRBSR_RFULL()
    {
        return USIC0_CH0_TRBSR_RFULL(TRBSR & (1u << 4u));
    }

    /**
     * Get TRBSR's REMPTY bit.
     */
    USIC0_CH0_TRBSR_REMPTY get_TRBSR_REMPTY()
    {
        return USIC0_CH0_TRBSR_REMPTY(TRBSR & (1u << 3u));
    }

    /**
     * Get TRBSR's ARBI bit.
     */
    USIC0_CH0_TRBSR_ARBI get_TRBSR_ARBI()
    {
        return USIC0_CH0_TRBSR_ARBI(TRBSR & (1u << 2u));
    }

    /**
     * Set TRBSR's ARBI bit.
     */
    inline void set_TRBSR_ARBI()
    {
        TRBSR |= 1u << 2u;
    }

    /**
     * Clear TRBSR's ARBI bit.
     */
    inline void clear_TRBSR_ARBI()
    {
        TRBSR &= ~(1u << 2u);
    }

    /**
     * Toggle TRBSR's ARBI bit.
     */
    inline void toggle_TRBSR_ARBI()
    {
        TRBSR ^= 1u << 2u;
    }

    /**
     * Get TRBSR's RBERI bit.
     */
    USIC0_CH0_TRBSR_RBERI get_TRBSR_RBERI()
    {
        return USIC0_CH0_TRBSR_RBERI(TRBSR & (1u << 1u));
    }

    /**
     * Set TRBSR's RBERI bit.
     */
    inline void set_TRBSR_RBERI()
    {
        TRBSR |= 1u << 1u;
    }

    /**
     * Clear TRBSR's RBERI bit.
     */
    inline void clear_TRBSR_RBERI()
    {
        TRBSR &= ~(1u << 1u);
    }

    /**
     * Toggle TRBSR's RBERI bit.
     */
    inline void toggle_TRBSR_RBERI()
    {
        TRBSR ^= 1u << 1u;
    }

    /**
     * Get TRBSR's SRBI bit.
     */
    USIC0_CH0_TRBSR_SRBI get_TRBSR_SRBI()
    {
        return USIC0_CH0_TRBSR_SRBI(TRBSR & (1u << 0u));
    }

    /**
     * Set TRBSR's SRBI bit.
     */
    inline void set_TRBSR_SRBI()
    {
        TRBSR |= 1u << 0u;
    }

    /**
     * Clear TRBSR's SRBI bit.
     */
    inline void clear_TRBSR_SRBI()
    {
        TRBSR &= ~(1u << 0u);
    }

    /**
     * Toggle TRBSR's SRBI bit.
     */
    inline void toggle_TRBSR_SRBI()
    {
        TRBSR ^= 1u << 0u;
    }

    /**
     * Set TRBSCR's FLUSHTB bit.
     */
    inline void set_TRBSCR_FLUSHTB()
    {
        TRBSCR |= 1u << 15u;
    }

    /**
     * Clear TRBSCR's FLUSHTB bit.
     */
    inline void clear_TRBSCR_FLUSHTB()
    {
        TRBSCR &= ~(1u << 15u);
    }

    /**
     * Toggle TRBSCR's FLUSHTB bit.
     */
    inline void toggle_TRBSCR_FLUSHTB()
    {
        TRBSCR ^= 1u << 15u;
    }

    /**
     * Set TRBSCR's FLUSHRB bit.
     */
    inline void set_TRBSCR_FLUSHRB()
    {
        TRBSCR |= 1u << 14u;
    }

    /**
     * Clear TRBSCR's FLUSHRB bit.
     */
    inline void clear_TRBSCR_FLUSHRB()
    {
        TRBSCR &= ~(1u << 14u);
    }

    /**
     * Toggle TRBSCR's FLUSHRB bit.
     */
    inline void toggle_TRBSCR_FLUSHRB()
    {
        TRBSCR ^= 1u << 14u;
    }

    /**
     * Set TRBSCR's CBDV bit.
     */
    inline void set_TRBSCR_CBDV()
    {
        TRBSCR |= 1u << 10u;
    }

    /**
     * Clear TRBSCR's CBDV bit.
     */
    inline void clear_TRBSCR_CBDV()
    {
        TRBSCR &= ~(1u << 10u);
    }

    /**
     * Toggle TRBSCR's CBDV bit.
     */
    inline void toggle_TRBSCR_CBDV()
    {
        TRBSCR ^= 1u << 10u;
    }

    /**
     * Set TRBSCR's CTBERI bit.
     */
    inline void set_TRBSCR_CTBERI()
    {
        TRBSCR |= 1u << 9u;
    }

    /**
     * Clear TRBSCR's CTBERI bit.
     */
    inline void clear_TRBSCR_CTBERI()
    {
        TRBSCR &= ~(1u << 9u);
    }

    /**
     * Toggle TRBSCR's CTBERI bit.
     */
    inline void toggle_TRBSCR_CTBERI()
    {
        TRBSCR ^= 1u << 9u;
    }

    /**
     * Set TRBSCR's CSTBI bit.
     */
    inline void set_TRBSCR_CSTBI()
    {
        TRBSCR |= 1u << 8u;
    }

    /**
     * Clear TRBSCR's CSTBI bit.
     */
    inline void clear_TRBSCR_CSTBI()
    {
        TRBSCR &= ~(1u << 8u);
    }

    /**
     * Toggle TRBSCR's CSTBI bit.
     */
    inline void toggle_TRBSCR_CSTBI()
    {
        TRBSCR ^= 1u << 8u;
    }

    /**
     * Set TRBSCR's CARBI bit.
     */
    inline void set_TRBSCR_CARBI()
    {
        TRBSCR |= 1u << 2u;
    }

    /**
     * Clear TRBSCR's CARBI bit.
     */
    inline void clear_TRBSCR_CARBI()
    {
        TRBSCR &= ~(1u << 2u);
    }

    /**
     * Toggle TRBSCR's CARBI bit.
     */
    inline void toggle_TRBSCR_CARBI()
    {
        TRBSCR ^= 1u << 2u;
    }

    /**
     * Set TRBSCR's CRBERI bit.
     */
    inline void set_TRBSCR_CRBERI()
    {
        TRBSCR |= 1u << 1u;
    }

    /**
     * Clear TRBSCR's CRBERI bit.
     */
    inline void clear_TRBSCR_CRBERI()
    {
        TRBSCR &= ~(1u << 1u);
    }

    /**
     * Toggle TRBSCR's CRBERI bit.
     */
    inline void toggle_TRBSCR_CRBERI()
    {
        TRBSCR ^= 1u << 1u;
    }

    /**
     * Set TRBSCR's CSRBI bit.
     */
    inline void set_TRBSCR_CSRBI()
    {
        TRBSCR |= 1u << 0u;
    }

    /**
     * Clear TRBSCR's CSRBI bit.
     */
    inline void clear_TRBSCR_CSRBI()
    {
        TRBSCR &= ~(1u << 0u);
    }

    /**
     * Toggle TRBSCR's CSRBI bit.
     */
    inline void toggle_TRBSCR_CSRBI()
    {
        TRBSCR ^= 1u << 0u;
    }

    /**
     * Get OUTR's RCI field.
     */
    uint8_t get_OUTR_RCI()
    {
        return (OUTR >> 16u) & 0b11111u;
    }

    /**
     * Get OUTR's DSR field.
     */
    uint16_t get_OUTR_DSR()
    {
        return (OUTR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get OUTDR's RCI field.
     */
    uint8_t get_OUTDR_RCI()
    {
        return (OUTDR >> 16u) & 0b11111u;
    }

    /**
     * Get OUTDR's DSR field.
     */
    uint16_t get_OUTDR_DSR()
    {
        return (OUTDR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set IN's TDATA field.
     */
    inline void set_IN_TDATA(std::size_t index, uint16_t value)
    {
        uint32_t curr = IN[index];

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        IN[index] = curr;
    }
};

static_assert(sizeof(usic0_ch) == usic0_ch::size);

static volatile usic0_ch *const USIC0_CH0 = reinterpret_cast<usic0_ch *>(0x40030000);

static volatile usic0_ch *const USIC0_CH1 = reinterpret_cast<usic0_ch *>(0x40030200);

static volatile usic0_ch *const USIC1_CH0 = reinterpret_cast<usic0_ch *>(0x48020000);

static volatile usic0_ch *const USIC1_CH1 = reinterpret_cast<usic0_ch *>(0x48020200);

static volatile usic0_ch *const USIC2_CH0 = reinterpret_cast<usic0_ch *>(0x48024000);

static volatile usic0_ch *const USIC2_CH1 = reinterpret_cast<usic0_ch *>(0x48024200);

}; // namespace XMC4700
