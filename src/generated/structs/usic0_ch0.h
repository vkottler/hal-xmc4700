/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include "../enums/USIC0_CH0_BRG_CLKSEL.h"
#include "../enums/USIC0_CH0_BRG_CTQSEL.h"
#include "../enums/USIC0_CH0_BRG_MCLKCFG.h"
#include "../enums/USIC0_CH0_BRG_PPPEN.h"
#include "../enums/USIC0_CH0_BRG_SCLKCFG.h"
#include "../enums/USIC0_CH0_BRG_SCLKOSEL.h"
#include "../enums/USIC0_CH0_BRG_TMEN.h"
#include "../enums/USIC0_CH0_BYPCR_BDEN.h"
#include "../enums/USIC0_CH0_BYPCR_BDSSM.h"
#include "../enums/USIC0_CH0_BYPCR_BDV.h"
#include "../enums/USIC0_CH0_BYPCR_BDVTR.h"
#include "../enums/USIC0_CH0_BYPCR_BPRIO.h"
#include "../enums/USIC0_CH0_CCFG_ASC.h"
#include "../enums/USIC0_CH0_CCFG_IIC.h"
#include "../enums/USIC0_CH0_CCFG_IIS.h"
#include "../enums/USIC0_CH0_CCFG_RB.h"
#include "../enums/USIC0_CH0_CCFG_SSC.h"
#include "../enums/USIC0_CH0_CCFG_TB.h"
#include "../enums/USIC0_CH0_CCR_AIEN.h"
#include "../enums/USIC0_CH0_CCR_BRGIEN.h"
#include "../enums/USIC0_CH0_CCR_DLIEN.h"
#include "../enums/USIC0_CH0_CCR_HPCEN.h"
#include "../enums/USIC0_CH0_CCR_MODE.h"
#include "../enums/USIC0_CH0_CCR_PM.h"
#include "../enums/USIC0_CH0_CCR_RIEN.h"
#include "../enums/USIC0_CH0_CCR_RSIEN.h"
#include "../enums/USIC0_CH0_CCR_TBIEN.h"
#include "../enums/USIC0_CH0_CCR_TSIEN.h"
#include "../enums/USIC0_CH0_DX0CR_CM.h"
#include "../enums/USIC0_CH0_DX0CR_DFEN.h"
#include "../enums/USIC0_CH0_DX0CR_DPOL.h"
#include "../enums/USIC0_CH0_DX0CR_DSEL.h"
#include "../enums/USIC0_CH0_DX0CR_DSEN.h"
#include "../enums/USIC0_CH0_DX0CR_DXS.h"
#include "../enums/USIC0_CH0_DX0CR_INSW.h"
#include "../enums/USIC0_CH0_DX0CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX1CR_CM.h"
#include "../enums/USIC0_CH0_DX1CR_DCEN.h"
#include "../enums/USIC0_CH0_DX1CR_DFEN.h"
#include "../enums/USIC0_CH0_DX1CR_DPOL.h"
#include "../enums/USIC0_CH0_DX1CR_DSEL.h"
#include "../enums/USIC0_CH0_DX1CR_DSEN.h"
#include "../enums/USIC0_CH0_DX1CR_DXS.h"
#include "../enums/USIC0_CH0_DX1CR_INSW.h"
#include "../enums/USIC0_CH0_DX1CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX2CR_CM.h"
#include "../enums/USIC0_CH0_DX2CR_DFEN.h"
#include "../enums/USIC0_CH0_DX2CR_DPOL.h"
#include "../enums/USIC0_CH0_DX2CR_DSEL.h"
#include "../enums/USIC0_CH0_DX2CR_DSEN.h"
#include "../enums/USIC0_CH0_DX2CR_DXS.h"
#include "../enums/USIC0_CH0_DX2CR_INSW.h"
#include "../enums/USIC0_CH0_DX2CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX3CR_CM.h"
#include "../enums/USIC0_CH0_DX3CR_DFEN.h"
#include "../enums/USIC0_CH0_DX3CR_DPOL.h"
#include "../enums/USIC0_CH0_DX3CR_DSEL.h"
#include "../enums/USIC0_CH0_DX3CR_DSEN.h"
#include "../enums/USIC0_CH0_DX3CR_DXS.h"
#include "../enums/USIC0_CH0_DX3CR_INSW.h"
#include "../enums/USIC0_CH0_DX3CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX4CR_CM.h"
#include "../enums/USIC0_CH0_DX4CR_DFEN.h"
#include "../enums/USIC0_CH0_DX4CR_DPOL.h"
#include "../enums/USIC0_CH0_DX4CR_DSEL.h"
#include "../enums/USIC0_CH0_DX4CR_DSEN.h"
#include "../enums/USIC0_CH0_DX4CR_DXS.h"
#include "../enums/USIC0_CH0_DX4CR_INSW.h"
#include "../enums/USIC0_CH0_DX4CR_SFSEL.h"
#include "../enums/USIC0_CH0_DX5CR_CM.h"
#include "../enums/USIC0_CH0_DX5CR_DFEN.h"
#include "../enums/USIC0_CH0_DX5CR_DPOL.h"
#include "../enums/USIC0_CH0_DX5CR_DSEL.h"
#include "../enums/USIC0_CH0_DX5CR_DSEN.h"
#include "../enums/USIC0_CH0_DX5CR_DXS.h"
#include "../enums/USIC0_CH0_DX5CR_INSW.h"
#include "../enums/USIC0_CH0_DX5CR_SFSEL.h"
#include "../enums/USIC0_CH0_FDR_DM.h"
#include "../enums/USIC0_CH0_FMR_ATVC.h"
#include "../enums/USIC0_CH0_FMR_CRDV0.h"
#include "../enums/USIC0_CH0_FMR_CRDV1.h"
#include "../enums/USIC0_CH0_FMR_MTDV.h"
#include "../enums/USIC0_CH0_FMR_SIO0.h"
#include "../enums/USIC0_CH0_FMR_SIO1.h"
#include "../enums/USIC0_CH0_FMR_SIO2.h"
#include "../enums/USIC0_CH0_FMR_SIO3.h"
#include "../enums/USIC0_CH0_FMR_SIO4.h"
#include "../enums/USIC0_CH0_FMR_SIO5.h"
#include "../enums/USIC0_CH0_INPR_TSINP.h"
#include "../enums/USIC0_CH0_KSCFG_BPMODEN.h"
#include "../enums/USIC0_CH0_KSCFG_BPNOM.h"
#include "../enums/USIC0_CH0_KSCFG_BPSUM.h"
#include "../enums/USIC0_CH0_KSCFG_MODEN.h"
#include "../enums/USIC0_CH0_KSCFG_NOMCFG.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_CDEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_FEIEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_FFIEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_IDM.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_MCLK.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_PL.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_RNIEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_RSTEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_SBIEN.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_SMD.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_STPB.h"
#include "../enums/USIC0_CH0_PCR_ASCMode_TSTEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_ACK00.h"
#include "../enums/USIC0_CH0_PCR_IICMode_ACKIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_ARLIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_ERRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_MCLK.h"
#include "../enums/USIC0_CH0_PCR_IICMode_NACKIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_PCRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_RSCRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_SACKDIS.h"
#include "../enums/USIC0_CH0_PCR_IICMode_SCRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_SRRIEN.h"
#include "../enums/USIC0_CH0_PCR_IICMode_STIM.h"
#include "../enums/USIC0_CH0_PCR_IISMode_DTEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_DX2TIEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_ENDIEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_MCLK.h"
#include "../enums/USIC0_CH0_PCR_IISMode_SELINV.h"
#include "../enums/USIC0_CH0_PCR_IISMode_WAFEIEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_WAGEN.h"
#include "../enums/USIC0_CH0_PCR_IISMode_WAREIEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_CTQSEL1.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_DX2TIEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_FEM.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_MCLK.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_MSLSEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_MSLSIEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_PARIEN.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_SELCTR.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_SELINV.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_SELO.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_SLPHSEL.h"
#include "../enums/USIC0_CH0_PCR_SSCMode_TIWEN.h"
#include "../enums/USIC0_CH0_PSCR_CAIF.h"
#include "../enums/USIC0_CH0_PSCR_CBRGIF.h"
#include "../enums/USIC0_CH0_PSCR_CDLIF.h"
#include "../enums/USIC0_CH0_PSCR_CRIF.h"
#include "../enums/USIC0_CH0_PSCR_CRSIF.h"
#include "../enums/USIC0_CH0_PSCR_CST0.h"
#include "../enums/USIC0_CH0_PSCR_CST1.h"
#include "../enums/USIC0_CH0_PSCR_CST2.h"
#include "../enums/USIC0_CH0_PSCR_CST3.h"
#include "../enums/USIC0_CH0_PSCR_CST4.h"
#include "../enums/USIC0_CH0_PSCR_CST5.h"
#include "../enums/USIC0_CH0_PSCR_CST6.h"
#include "../enums/USIC0_CH0_PSCR_CST7.h"
#include "../enums/USIC0_CH0_PSCR_CST8.h"
#include "../enums/USIC0_CH0_PSCR_CST9.h"
#include "../enums/USIC0_CH0_PSCR_CTBIF.h"
#include "../enums/USIC0_CH0_PSCR_CTSIF.h"
#include "../enums/USIC0_CH0_PSR_AIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_AIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_BUSY.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_COL.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_DLIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_FER0.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_FER1.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RFF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RNS.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RSIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_RXIDLE.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_SBD.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_TBIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_TFF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_TSIF.h"
#include "../enums/USIC0_CH0_PSR_ASCMode_TXIDLE.h"
#include "../enums/USIC0_CH0_PSR_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_DLIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_ACK.h"
#include "../enums/USIC0_CH0_PSR_IICMode_AIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_ARL.h"
#include "../enums/USIC0_CH0_PSR_IICMode_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_DLIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_ERR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_NACK.h"
#include "../enums/USIC0_CH0_PSR_IICMode_PCR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_RIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_RSCR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_RSIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_SCR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_SLSEL.h"
#include "../enums/USIC0_CH0_PSR_IICMode_SRR.h"
#include "../enums/USIC0_CH0_PSR_IICMode_TBIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_TSIF.h"
#include "../enums/USIC0_CH0_PSR_IICMode_WTDF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_AIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_DLIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_DX2S.h"
#include "../enums/USIC0_CH0_PSR_IISMode_DX2TEV.h"
#include "../enums/USIC0_CH0_PSR_IISMode_END.h"
#include "../enums/USIC0_CH0_PSR_IISMode_RIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_RSIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_TBIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_TSIF.h"
#include "../enums/USIC0_CH0_PSR_IISMode_WA.h"
#include "../enums/USIC0_CH0_PSR_IISMode_WAFE.h"
#include "../enums/USIC0_CH0_PSR_IISMode_WARE.h"
#include "../enums/USIC0_CH0_PSR_RIF.h"
#include "../enums/USIC0_CH0_PSR_RSIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_AIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_BRGIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_DLIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_DX2S.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_DX2TEV.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_MSLS.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_MSLSEV.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_PARERR.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_RIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_RSIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_TBIF.h"
#include "../enums/USIC0_CH0_PSR_SSCMode_TSIF.h"
#include "../enums/USIC0_CH0_PSR_TBIF.h"
#include "../enums/USIC0_CH0_PSR_TSIF.h"
#include "../enums/USIC0_CH0_RBCTR_ARBIEN.h"
#include "../enums/USIC0_CH0_RBCTR_ARBINP.h"
#include "../enums/USIC0_CH0_RBCTR_LOF.h"
#include "../enums/USIC0_CH0_RBCTR_RBERIEN.h"
#include "../enums/USIC0_CH0_RBCTR_RCIM.h"
#include "../enums/USIC0_CH0_RBCTR_RNM.h"
#include "../enums/USIC0_CH0_RBCTR_SIZE.h"
#include "../enums/USIC0_CH0_RBCTR_SRBIEN.h"
#include "../enums/USIC0_CH0_RBCTR_SRBINP.h"
#include "../enums/USIC0_CH0_RBCTR_SRBTEN.h"
#include "../enums/USIC0_CH0_RBCTR_SRBTM.h"
#include "../enums/USIC0_CH0_RBUF01SR_DS0.h"
#include "../enums/USIC0_CH0_RBUF01SR_DS1.h"
#include "../enums/USIC0_CH0_RBUF01SR_PERR0.h"
#include "../enums/USIC0_CH0_RBUF01SR_PERR1.h"
#include "../enums/USIC0_CH0_RBUF01SR_RDV00.h"
#include "../enums/USIC0_CH0_RBUF01SR_RDV01.h"
#include "../enums/USIC0_CH0_RBUF01SR_RDV10.h"
#include "../enums/USIC0_CH0_RBUF01SR_RDV11.h"
#include "../enums/USIC0_CH0_RBUF01SR_SOF0.h"
#include "../enums/USIC0_CH0_RBUF01SR_SOF1.h"
#include "../enums/USIC0_CH0_RBUF01SR_WLEN1.h"
#include "../enums/USIC0_CH0_SCTR_DOCFG.h"
#include "../enums/USIC0_CH0_SCTR_DSM.h"
#include "../enums/USIC0_CH0_SCTR_HPCDIR.h"
#include "../enums/USIC0_CH0_SCTR_PDL.h"
#include "../enums/USIC0_CH0_SCTR_SDIR.h"
#include "../enums/USIC0_CH0_SCTR_TRM.h"
#include "../enums/USIC0_CH0_SCTR_WLE.h"
#include "../enums/USIC0_CH0_TBCTR_ATBINP.h"
#include "../enums/USIC0_CH0_TBCTR_LOF.h"
#include "../enums/USIC0_CH0_TBCTR_SIZE.h"
#include "../enums/USIC0_CH0_TBCTR_STBIEN.h"
#include "../enums/USIC0_CH0_TBCTR_STBINP.h"
#include "../enums/USIC0_CH0_TBCTR_STBTEN.h"
#include "../enums/USIC0_CH0_TBCTR_STBTM.h"
#include "../enums/USIC0_CH0_TBCTR_TBERIEN.h"
#include "../enums/USIC0_CH0_TCSR_EOF.h"
#include "../enums/USIC0_CH0_TCSR_FLEMD.h"
#include "../enums/USIC0_CH0_TCSR_HPCMD.h"
#include "../enums/USIC0_CH0_TCSR_SELMD.h"
#include "../enums/USIC0_CH0_TCSR_SOF.h"
#include "../enums/USIC0_CH0_TCSR_TDEN.h"
#include "../enums/USIC0_CH0_TCSR_TDSSM.h"
#include "../enums/USIC0_CH0_TCSR_TDV.h"
#include "../enums/USIC0_CH0_TCSR_TDVTR.h"
#include "../enums/USIC0_CH0_TCSR_TE.h"
#include "../enums/USIC0_CH0_TCSR_TSOF.h"
#include "../enums/USIC0_CH0_TCSR_TV.h"
#include "../enums/USIC0_CH0_TCSR_TVC.h"
#include "../enums/USIC0_CH0_TCSR_WA.h"
#include "../enums/USIC0_CH0_TCSR_WAMD.h"
#include "../enums/USIC0_CH0_TCSR_WLEMD.h"
#include "../enums/USIC0_CH0_TRBSCR_CARBI.h"
#include "../enums/USIC0_CH0_TRBSCR_CBDV.h"
#include "../enums/USIC0_CH0_TRBSCR_CRBERI.h"
#include "../enums/USIC0_CH0_TRBSCR_CSRBI.h"
#include "../enums/USIC0_CH0_TRBSCR_CSTBI.h"
#include "../enums/USIC0_CH0_TRBSCR_CTBERI.h"
#include "../enums/USIC0_CH0_TRBSCR_FLUSHRB.h"
#include "../enums/USIC0_CH0_TRBSCR_FLUSHTB.h"
#include "../enums/USIC0_CH0_TRBSR_ARBI.h"
#include "../enums/USIC0_CH0_TRBSR_RBERI.h"
#include "../enums/USIC0_CH0_TRBSR_RBUS.h"
#include "../enums/USIC0_CH0_TRBSR_REMPTY.h"
#include "../enums/USIC0_CH0_TRBSR_RFULL.h"
#include "../enums/USIC0_CH0_TRBSR_SRBI.h"
#include "../enums/USIC0_CH0_TRBSR_SRBT.h"
#include "../enums/USIC0_CH0_TRBSR_STBI.h"
#include "../enums/USIC0_CH0_TRBSR_STBT.h"
#include "../enums/USIC0_CH0_TRBSR_TBERI.h"
#include "../enums/USIC0_CH0_TRBSR_TBUS.h"
#include "../enums/USIC0_CH0_TRBSR_TEMPTY.h"
#include "../enums/USIC0_CH0_TRBSR_TFULL.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Universal Serial Interface Controller 0
 */
struct [[gnu::packed]] usic0_ch0
{
    /* Constant attributes. */
    static constexpr std::size_t size = 512; /*!< usic0_ch0's size in bytes. */

    /* Fields. */
    union
    {
        uint32_t PCR; /* (read-write) Protocol Control Register */
        uint32_t PCR_ASCMode; /* (read-write) Protocol Control Register [ASC Mode] */
        uint32_t PCR_SSCMode; /* (read-write) Protocol Control Register [SSC Mode] */
        uint32_t PCR_IICMode; /* (read-write) Protocol Control Register [IIC Mode] */
        uint32_t PCR_IISMode; /* (read-write) Protocol Control Register [IIS Mode] */
    };
    union
    {
        uint32_t PSR; /* (read-write) Protocol Status Register */
        uint32_t PSR_ASCMode; /* (read-write) Protocol Status Register [ASC Mode] */
        uint32_t PSR_SSCMode; /* (read-write) Protocol Status Register [SSC Mode] */
        uint32_t PSR_IICMode; /* (read-write) Protocol Status Register [IIC Mode] */
        uint32_t PSR_IISMode; /* (read-write) Protocol Status Register [IIS Mode] */
    };
    const uint32_t reserved_padding0 = {};
    const uint32_t CCFG = {};                                        /*!< (read-only) Channel Configuration Register */
    const uint32_t reserved_padding1 = {};
    uint32_t KSCFG;                                                  /*!< (read-write) Kernel State Configuration Register */
    uint32_t FDR;                                                    /*!< (read-write) Fractional Divider Register */
    uint32_t BRG;                                                    /*!< (read-write) Baud Rate Generator Register */
    uint32_t INPR;                                                   /*!< (read-write) Interrupt Node Pointer Register */
    uint32_t DX0CR;                                                  /*!< (read-write) Input Control Register 0 */
    uint32_t DX1CR;                                                  /*!< (read-write) Input Control Register 1 */
    uint32_t DX2CR;                                                  /*!< (read-write) Input Control Register 2 */
    uint32_t DX3CR;                                                  /*!< (read-write) Input Control Register 3 */
    uint32_t DX4CR;                                                  /*!< (read-write) Input Control Register 4 */
    uint32_t DX5CR;                                                  /*!< (read-write) Input Control Register 5 */
    uint32_t SCTR;                                                   /*!< (read-write) Shift Control Register */
    uint32_t TCSR;                                                   /*!< (read-write) Transmit Control/Status Register */
    uint32_t CCR;                                                    /*!< (read-write) Channel Control Register */
    uint32_t CMTR;                                                   /*!< (read-write) Capture Mode Timer Register */
    uint32_t PSCR;                                                   /*!< (write-only) Protocol Status Clear Register */
    const uint32_t RBUFSR = {};                                      /*!< (read-only) Receiver Buffer Status Register */
    const uint32_t RBUF = {};                                        /*!< (read-only) Receiver Buffer Register */
    const uint32_t RBUFD = {};                                       /*!< (read-only) Receiver Buffer Register for Debugger */
    const uint32_t RBUF0 = {};                                       /*!< (read-only) Receiver Buffer Register 0 */
    const uint32_t RBUF1 = {};                                       /*!< (read-only) Receiver Buffer Register 1 */
    const uint32_t RBUF01SR = {};                                    /*!< (read-only) Receiver Buffer 01 Status Register */
    uint32_t FMR;                                                    /*!< (write-only) Flag Modification Register */
    static constexpr std::size_t reserved_padding2_length = 5;
    const uint32_t reserved_padding2[reserved_padding2_length] = {};
    static constexpr std::size_t TBUF_length = 32;
    uint32_t TBUF[TBUF_length];                                      /*!< (read-write) Transmit Buffer */
    uint32_t BYP;                                                    /*!< (read-write) Bypass Data Register */
    uint32_t BYPCR;                                                  /*!< (read-write) Bypass Control Register */
    uint32_t TBCTR;                                                  /*!< (read-write) Transmitter Buffer Control Register */
    uint32_t RBCTR;                                                  /*!< (read-write) Receiver Buffer Control Register */
    const uint32_t TRBPTR = {};                                      /*!< (read-only) Transmit/Receive Buffer Pointer Register */
    uint32_t TRBSR;                                                  /*!< (read-write) Transmit/Receive Buffer Status Register */
    uint32_t TRBSCR;                                                 /*!< (write-only) Transmit/Receive Buffer Status Clear Register */
    const uint32_t OUTR = {};                                        /*!< (read-only) Receiver Buffer Output Register */
    const uint32_t OUTDR = {};                                       /*!< (read-only) Receiver Buffer Output Register L for Debugger */
    static constexpr std::size_t reserved_padding3_length = 23;
    const uint32_t reserved_padding3[reserved_padding3_length] = {};
    static constexpr std::size_t IN_length = 32;
    uint32_t IN[IN_length];                                          /*!< (write-only) Transmit FIFO Buffer */

    /* Methods. */

    /**
     * Get CCFG's TB bit.
     */
    inline USIC0_CH0_CCFG_TB get_CCFG_TB()
    {
        return USIC0_CH0_CCFG_TB(CCFG & (1u << 7u));
    }

    /**
     * Get CCFG's RB bit.
     */
    inline USIC0_CH0_CCFG_RB get_CCFG_RB()
    {
        return USIC0_CH0_CCFG_RB(CCFG & (1u << 6u));
    }

    /**
     * Get CCFG's IIS bit.
     */
    inline USIC0_CH0_CCFG_IIS get_CCFG_IIS()
    {
        return USIC0_CH0_CCFG_IIS(CCFG & (1u << 3u));
    }

    /**
     * Get CCFG's IIC bit.
     */
    inline USIC0_CH0_CCFG_IIC get_CCFG_IIC()
    {
        return USIC0_CH0_CCFG_IIC(CCFG & (1u << 2u));
    }

    /**
     * Get CCFG's ASC bit.
     */
    inline USIC0_CH0_CCFG_ASC get_CCFG_ASC()
    {
        return USIC0_CH0_CCFG_ASC(CCFG & (1u << 1u));
    }

    /**
     * Get CCFG's SSC bit.
     */
    inline USIC0_CH0_CCFG_SSC get_CCFG_SSC()
    {
        return USIC0_CH0_CCFG_SSC(CCFG & (1u << 0u));
    }

    /**
     * Get all of CCFG's bit fields.
     */
    inline void get_CCFG(USIC0_CH0_CCFG_TB &TB, USIC0_CH0_CCFG_RB &RB, USIC0_CH0_CCFG_IIS &IIS, USIC0_CH0_CCFG_IIC &IIC, USIC0_CH0_CCFG_ASC &ASC, USIC0_CH0_CCFG_SSC &SSC)
    {
        uint32_t curr = CCFG;

        TB = USIC0_CH0_CCFG_TB(curr & (1u << 7u));
        RB = USIC0_CH0_CCFG_RB(curr & (1u << 6u));
        IIS = USIC0_CH0_CCFG_IIS(curr & (1u << 3u));
        IIC = USIC0_CH0_CCFG_IIC(curr & (1u << 2u));
        ASC = USIC0_CH0_CCFG_ASC(curr & (1u << 1u));
        SSC = USIC0_CH0_CCFG_SSC(curr & (1u << 0u));
    }

    /**
     * Set KSCFG's BPSUM bit.
     */
    inline void set_KSCFG_BPSUM()
    {
        KSCFG |= 1u << 11u;
    }

    /**
     * Clear KSCFG's BPSUM bit.
     */
    inline void clear_KSCFG_BPSUM()
    {
        KSCFG &= ~(1u << 11u);
    }

    /**
     * Toggle KSCFG's BPSUM bit.
     */
    inline void toggle_KSCFG_BPSUM()
    {
        KSCFG ^= 1u << 11u;
    }

    /**
     * Get KSCFG's SUMCFG field.
     */
    inline uint8_t get_KSCFG_SUMCFG()
    {
        return (KSCFG >> 8u) & 0b11u;
    }

    /**
     * Set KSCFG's SUMCFG field.
     */
    inline void set_KSCFG_SUMCFG(uint8_t value)
    {
        uint32_t curr = KSCFG;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        KSCFG = curr;
    }

    /**
     * Set KSCFG's BPNOM bit.
     */
    inline void set_KSCFG_BPNOM()
    {
        KSCFG |= 1u << 7u;
    }

    /**
     * Clear KSCFG's BPNOM bit.
     */
    inline void clear_KSCFG_BPNOM()
    {
        KSCFG &= ~(1u << 7u);
    }

    /**
     * Toggle KSCFG's BPNOM bit.
     */
    inline void toggle_KSCFG_BPNOM()
    {
        KSCFG ^= 1u << 7u;
    }

    /**
     * Get KSCFG's NOMCFG field.
     */
    inline USIC0_CH0_KSCFG_NOMCFG get_KSCFG_NOMCFG()
    {
        return USIC0_CH0_KSCFG_NOMCFG((KSCFG >> 4u) & 0b11u);
    }

    /**
     * Set KSCFG's NOMCFG field.
     */
    inline void set_KSCFG_NOMCFG(USIC0_CH0_KSCFG_NOMCFG value)
    {
        uint32_t curr = KSCFG;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        KSCFG = curr;
    }

    /**
     * Set KSCFG's BPMODEN bit.
     */
    inline void set_KSCFG_BPMODEN()
    {
        KSCFG |= 1u << 1u;
    }

    /**
     * Clear KSCFG's BPMODEN bit.
     */
    inline void clear_KSCFG_BPMODEN()
    {
        KSCFG &= ~(1u << 1u);
    }

    /**
     * Toggle KSCFG's BPMODEN bit.
     */
    inline void toggle_KSCFG_BPMODEN()
    {
        KSCFG ^= 1u << 1u;
    }

    /**
     * Get KSCFG's MODEN bit.
     */
    inline USIC0_CH0_KSCFG_MODEN get_KSCFG_MODEN()
    {
        return USIC0_CH0_KSCFG_MODEN(KSCFG & (1u << 0u));
    }

    /**
     * Set KSCFG's MODEN bit.
     */
    inline void set_KSCFG_MODEN()
    {
        KSCFG |= 1u << 0u;
    }

    /**
     * Clear KSCFG's MODEN bit.
     */
    inline void clear_KSCFG_MODEN()
    {
        KSCFG &= ~(1u << 0u);
    }

    /**
     * Toggle KSCFG's MODEN bit.
     */
    inline void toggle_KSCFG_MODEN()
    {
        KSCFG ^= 1u << 0u;
    }

    /**
     * Get all of KSCFG's bit fields.
     */
    inline void get_KSCFG(uint8_t &SUMCFG, USIC0_CH0_KSCFG_NOMCFG &NOMCFG, USIC0_CH0_KSCFG_MODEN &MODEN)
    {
        uint32_t curr = KSCFG;

        SUMCFG = (curr >> 8u) & 0b11u;
        NOMCFG = USIC0_CH0_KSCFG_NOMCFG((curr >> 4u) & 0b11u);
        MODEN = USIC0_CH0_KSCFG_MODEN(curr & (1u << 0u));
    }

    /**
     * Set all of KSCFG's bit fields.
     */
    inline void set_KSCFG(USIC0_CH0_KSCFG_BPSUM BPSUM, uint8_t SUMCFG, USIC0_CH0_KSCFG_BPNOM BPNOM, USIC0_CH0_KSCFG_NOMCFG NOMCFG, USIC0_CH0_KSCFG_BPMODEN BPMODEN, USIC0_CH0_KSCFG_MODEN MODEN)
    {
        uint32_t curr = KSCFG;

        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(BPSUM) & 0b1u) << 11u;
        curr &= ~(0b11u << 8u);
        curr |= (SUMCFG & 0b11u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(BPNOM) & 0b1u) << 7u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(NOMCFG) & 0b11u) << 4u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(BPMODEN) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(MODEN) & 0b1u) << 0u;

        KSCFG = curr;
    }

    /**
     * Get FDR's RESULT field.
     */
    inline uint16_t get_FDR_RESULT()
    {
        return (FDR >> 16u) & 0b1111111111u;
    }

    /**
     * Get FDR's DM field.
     */
    inline USIC0_CH0_FDR_DM get_FDR_DM()
    {
        return USIC0_CH0_FDR_DM((FDR >> 14u) & 0b11u);
    }

    /**
     * Set FDR's DM field.
     */
    inline void set_FDR_DM(USIC0_CH0_FDR_DM value)
    {
        uint32_t curr = FDR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(value) & 0b11u) << 14u;

        FDR = curr;
    }

    /**
     * Get FDR's STEP field.
     */
    inline uint16_t get_FDR_STEP()
    {
        return (FDR >> 0u) & 0b1111111111u;
    }

    /**
     * Set FDR's STEP field.
     */
    inline void set_FDR_STEP(uint16_t value)
    {
        uint32_t curr = FDR;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        FDR = curr;
    }

    /**
     * Get all of FDR's bit fields.
     */
    inline void get_FDR(uint16_t &RESULT, USIC0_CH0_FDR_DM &DM, uint16_t &STEP)
    {
        uint32_t curr = FDR;

        RESULT = (curr >> 16u) & 0b1111111111u;
        DM = USIC0_CH0_FDR_DM((curr >> 14u) & 0b11u);
        STEP = (curr >> 0u) & 0b1111111111u;
    }

    /**
     * Set all of FDR's bit fields.
     */
    inline void set_FDR(USIC0_CH0_FDR_DM DM, uint16_t STEP)
    {
        uint32_t curr = FDR;

        curr &= ~(0b11u << 14u);
        curr |= (std::to_underlying(DM) & 0b11u) << 14u;
        curr &= ~(0b1111111111u << 0u);
        curr |= (STEP & 0b1111111111u) << 0u;

        FDR = curr;
    }

    /**
     * Get BRG's SCLKCFG field.
     */
    inline USIC0_CH0_BRG_SCLKCFG get_BRG_SCLKCFG()
    {
        return USIC0_CH0_BRG_SCLKCFG((BRG >> 30u) & 0b11u);
    }

    /**
     * Set BRG's SCLKCFG field.
     */
    inline void set_BRG_SCLKCFG(USIC0_CH0_BRG_SCLKCFG value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(value) & 0b11u) << 30u;

        BRG = curr;
    }

    /**
     * Get BRG's MCLKCFG bit.
     */
    inline USIC0_CH0_BRG_MCLKCFG get_BRG_MCLKCFG()
    {
        return USIC0_CH0_BRG_MCLKCFG(BRG & (1u << 29u));
    }

    /**
     * Set BRG's MCLKCFG bit.
     */
    inline void set_BRG_MCLKCFG()
    {
        BRG |= 1u << 29u;
    }

    /**
     * Clear BRG's MCLKCFG bit.
     */
    inline void clear_BRG_MCLKCFG()
    {
        BRG &= ~(1u << 29u);
    }

    /**
     * Toggle BRG's MCLKCFG bit.
     */
    inline void toggle_BRG_MCLKCFG()
    {
        BRG ^= 1u << 29u;
    }

    /**
     * Get BRG's SCLKOSEL bit.
     */
    inline USIC0_CH0_BRG_SCLKOSEL get_BRG_SCLKOSEL()
    {
        return USIC0_CH0_BRG_SCLKOSEL(BRG & (1u << 28u));
    }

    /**
     * Set BRG's SCLKOSEL bit.
     */
    inline void set_BRG_SCLKOSEL()
    {
        BRG |= 1u << 28u;
    }

    /**
     * Clear BRG's SCLKOSEL bit.
     */
    inline void clear_BRG_SCLKOSEL()
    {
        BRG &= ~(1u << 28u);
    }

    /**
     * Toggle BRG's SCLKOSEL bit.
     */
    inline void toggle_BRG_SCLKOSEL()
    {
        BRG ^= 1u << 28u;
    }

    /**
     * Get BRG's PDIV field.
     */
    inline uint16_t get_BRG_PDIV()
    {
        return (BRG >> 16u) & 0b1111111111u;
    }

    /**
     * Set BRG's PDIV field.
     */
    inline void set_BRG_PDIV(uint16_t value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        BRG = curr;
    }

    /**
     * Get BRG's DCTQ field.
     */
    inline uint8_t get_BRG_DCTQ()
    {
        return (BRG >> 10u) & 0b11111u;
    }

    /**
     * Set BRG's DCTQ field.
     */
    inline void set_BRG_DCTQ(uint8_t value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11111u << 10u);
        curr |= (value & 0b11111u) << 10u;

        BRG = curr;
    }

    /**
     * Get BRG's PCTQ field.
     */
    inline uint8_t get_BRG_PCTQ()
    {
        return (BRG >> 8u) & 0b11u;
    }

    /**
     * Set BRG's PCTQ field.
     */
    inline void set_BRG_PCTQ(uint8_t value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        BRG = curr;
    }

    /**
     * Get BRG's CTQSEL field.
     */
    inline USIC0_CH0_BRG_CTQSEL get_BRG_CTQSEL()
    {
        return USIC0_CH0_BRG_CTQSEL((BRG >> 6u) & 0b11u);
    }

    /**
     * Set BRG's CTQSEL field.
     */
    inline void set_BRG_CTQSEL(USIC0_CH0_BRG_CTQSEL value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        BRG = curr;
    }

    /**
     * Get BRG's PPPEN bit.
     */
    inline USIC0_CH0_BRG_PPPEN get_BRG_PPPEN()
    {
        return USIC0_CH0_BRG_PPPEN(BRG & (1u << 4u));
    }

    /**
     * Set BRG's PPPEN bit.
     */
    inline void set_BRG_PPPEN()
    {
        BRG |= 1u << 4u;
    }

    /**
     * Clear BRG's PPPEN bit.
     */
    inline void clear_BRG_PPPEN()
    {
        BRG &= ~(1u << 4u);
    }

    /**
     * Toggle BRG's PPPEN bit.
     */
    inline void toggle_BRG_PPPEN()
    {
        BRG ^= 1u << 4u;
    }

    /**
     * Get BRG's TMEN bit.
     */
    inline USIC0_CH0_BRG_TMEN get_BRG_TMEN()
    {
        return USIC0_CH0_BRG_TMEN(BRG & (1u << 3u));
    }

    /**
     * Set BRG's TMEN bit.
     */
    inline void set_BRG_TMEN()
    {
        BRG |= 1u << 3u;
    }

    /**
     * Clear BRG's TMEN bit.
     */
    inline void clear_BRG_TMEN()
    {
        BRG &= ~(1u << 3u);
    }

    /**
     * Toggle BRG's TMEN bit.
     */
    inline void toggle_BRG_TMEN()
    {
        BRG ^= 1u << 3u;
    }

    /**
     * Get BRG's CLKSEL field.
     */
    inline USIC0_CH0_BRG_CLKSEL get_BRG_CLKSEL()
    {
        return USIC0_CH0_BRG_CLKSEL((BRG >> 0u) & 0b11u);
    }

    /**
     * Set BRG's CLKSEL field.
     */
    inline void set_BRG_CLKSEL(USIC0_CH0_BRG_CLKSEL value)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        BRG = curr;
    }

    /**
     * Get all of BRG's bit fields.
     */
    inline void get_BRG(USIC0_CH0_BRG_SCLKCFG &SCLKCFG, USIC0_CH0_BRG_MCLKCFG &MCLKCFG, USIC0_CH0_BRG_SCLKOSEL &SCLKOSEL, uint16_t &PDIV, uint8_t &DCTQ, uint8_t &PCTQ, USIC0_CH0_BRG_CTQSEL &CTQSEL, USIC0_CH0_BRG_PPPEN &PPPEN, USIC0_CH0_BRG_TMEN &TMEN, USIC0_CH0_BRG_CLKSEL &CLKSEL)
    {
        uint32_t curr = BRG;

        SCLKCFG = USIC0_CH0_BRG_SCLKCFG((curr >> 30u) & 0b11u);
        MCLKCFG = USIC0_CH0_BRG_MCLKCFG(curr & (1u << 29u));
        SCLKOSEL = USIC0_CH0_BRG_SCLKOSEL(curr & (1u << 28u));
        PDIV = (curr >> 16u) & 0b1111111111u;
        DCTQ = (curr >> 10u) & 0b11111u;
        PCTQ = (curr >> 8u) & 0b11u;
        CTQSEL = USIC0_CH0_BRG_CTQSEL((curr >> 6u) & 0b11u);
        PPPEN = USIC0_CH0_BRG_PPPEN(curr & (1u << 4u));
        TMEN = USIC0_CH0_BRG_TMEN(curr & (1u << 3u));
        CLKSEL = USIC0_CH0_BRG_CLKSEL((curr >> 0u) & 0b11u);
    }

    /**
     * Set all of BRG's bit fields.
     */
    inline void set_BRG(USIC0_CH0_BRG_SCLKCFG SCLKCFG, USIC0_CH0_BRG_MCLKCFG MCLKCFG, USIC0_CH0_BRG_SCLKOSEL SCLKOSEL, uint16_t PDIV, uint8_t DCTQ, uint8_t PCTQ, USIC0_CH0_BRG_CTQSEL CTQSEL, USIC0_CH0_BRG_PPPEN PPPEN, USIC0_CH0_BRG_TMEN TMEN, USIC0_CH0_BRG_CLKSEL CLKSEL)
    {
        uint32_t curr = BRG;

        curr &= ~(0b11u << 30u);
        curr |= (std::to_underlying(SCLKCFG) & 0b11u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(MCLKCFG) & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (std::to_underlying(SCLKOSEL) & 0b1u) << 28u;
        curr &= ~(0b1111111111u << 16u);
        curr |= (PDIV & 0b1111111111u) << 16u;
        curr &= ~(0b11111u << 10u);
        curr |= (DCTQ & 0b11111u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (PCTQ & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(CTQSEL) & 0b11u) << 6u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(PPPEN) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(TMEN) & 0b1u) << 3u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(CLKSEL) & 0b11u) << 0u;

        BRG = curr;
    }

    /**
     * Get INPR's PINP field.
     */
    inline uint8_t get_INPR_PINP()
    {
        return (INPR >> 16u) & 0b111u;
    }

    /**
     * Set INPR's PINP field.
     */
    inline void set_INPR_PINP(uint8_t value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 16u);
        curr |= (value & 0b111u) << 16u;

        INPR = curr;
    }

    /**
     * Get INPR's AINP field.
     */
    inline uint8_t get_INPR_AINP()
    {
        return (INPR >> 12u) & 0b111u;
    }

    /**
     * Set INPR's AINP field.
     */
    inline void set_INPR_AINP(uint8_t value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 12u);
        curr |= (value & 0b111u) << 12u;

        INPR = curr;
    }

    /**
     * Get INPR's RINP field.
     */
    inline uint8_t get_INPR_RINP()
    {
        return (INPR >> 8u) & 0b111u;
    }

    /**
     * Set INPR's RINP field.
     */
    inline void set_INPR_RINP(uint8_t value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 8u);
        curr |= (value & 0b111u) << 8u;

        INPR = curr;
    }

    /**
     * Get INPR's TBINP field.
     */
    inline uint8_t get_INPR_TBINP()
    {
        return (INPR >> 4u) & 0b111u;
    }

    /**
     * Set INPR's TBINP field.
     */
    inline void set_INPR_TBINP(uint8_t value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 4u);
        curr |= (value & 0b111u) << 4u;

        INPR = curr;
    }

    /**
     * Get INPR's TSINP field.
     */
    inline USIC0_CH0_INPR_TSINP get_INPR_TSINP()
    {
        return USIC0_CH0_INPR_TSINP((INPR >> 0u) & 0b111u);
    }

    /**
     * Set INPR's TSINP field.
     */
    inline void set_INPR_TSINP(USIC0_CH0_INPR_TSINP value)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        INPR = curr;
    }

    /**
     * Get all of INPR's bit fields.
     */
    inline void get_INPR(uint8_t &PINP, uint8_t &AINP, uint8_t &RINP, uint8_t &TBINP, USIC0_CH0_INPR_TSINP &TSINP)
    {
        uint32_t curr = INPR;

        PINP = (curr >> 16u) & 0b111u;
        AINP = (curr >> 12u) & 0b111u;
        RINP = (curr >> 8u) & 0b111u;
        TBINP = (curr >> 4u) & 0b111u;
        TSINP = USIC0_CH0_INPR_TSINP((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of INPR's bit fields.
     */
    inline void set_INPR(uint8_t PINP, uint8_t AINP, uint8_t RINP, uint8_t TBINP, USIC0_CH0_INPR_TSINP TSINP)
    {
        uint32_t curr = INPR;

        curr &= ~(0b111u << 16u);
        curr |= (PINP & 0b111u) << 16u;
        curr &= ~(0b111u << 12u);
        curr |= (AINP & 0b111u) << 12u;
        curr &= ~(0b111u << 8u);
        curr |= (RINP & 0b111u) << 8u;
        curr &= ~(0b111u << 4u);
        curr |= (TBINP & 0b111u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(TSINP) & 0b111u) << 0u;

        INPR = curr;
    }

    /**
     * Get DX0CR's DXS bit.
     */
    inline USIC0_CH0_DX0CR_DXS get_DX0CR_DXS()
    {
        return USIC0_CH0_DX0CR_DXS(DX0CR & (1u << 15u));
    }

    /**
     * Get DX0CR's CM field.
     */
    inline USIC0_CH0_DX0CR_CM get_DX0CR_CM()
    {
        return USIC0_CH0_DX0CR_CM((DX0CR >> 10u) & 0b11u);
    }

    /**
     * Set DX0CR's CM field.
     */
    inline void set_DX0CR_CM(USIC0_CH0_DX0CR_CM value)
    {
        uint32_t curr = DX0CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX0CR = curr;
    }

    /**
     * Get DX0CR's SFSEL bit.
     */
    inline USIC0_CH0_DX0CR_SFSEL get_DX0CR_SFSEL()
    {
        return USIC0_CH0_DX0CR_SFSEL(DX0CR & (1u << 9u));
    }

    /**
     * Set DX0CR's SFSEL bit.
     */
    inline void set_DX0CR_SFSEL()
    {
        DX0CR |= 1u << 9u;
    }

    /**
     * Clear DX0CR's SFSEL bit.
     */
    inline void clear_DX0CR_SFSEL()
    {
        DX0CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX0CR's SFSEL bit.
     */
    inline void toggle_DX0CR_SFSEL()
    {
        DX0CR ^= 1u << 9u;
    }

    /**
     * Get DX0CR's DPOL bit.
     */
    inline USIC0_CH0_DX0CR_DPOL get_DX0CR_DPOL()
    {
        return USIC0_CH0_DX0CR_DPOL(DX0CR & (1u << 8u));
    }

    /**
     * Set DX0CR's DPOL bit.
     */
    inline void set_DX0CR_DPOL()
    {
        DX0CR |= 1u << 8u;
    }

    /**
     * Clear DX0CR's DPOL bit.
     */
    inline void clear_DX0CR_DPOL()
    {
        DX0CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX0CR's DPOL bit.
     */
    inline void toggle_DX0CR_DPOL()
    {
        DX0CR ^= 1u << 8u;
    }

    /**
     * Get DX0CR's DSEN bit.
     */
    inline USIC0_CH0_DX0CR_DSEN get_DX0CR_DSEN()
    {
        return USIC0_CH0_DX0CR_DSEN(DX0CR & (1u << 6u));
    }

    /**
     * Set DX0CR's DSEN bit.
     */
    inline void set_DX0CR_DSEN()
    {
        DX0CR |= 1u << 6u;
    }

    /**
     * Clear DX0CR's DSEN bit.
     */
    inline void clear_DX0CR_DSEN()
    {
        DX0CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX0CR's DSEN bit.
     */
    inline void toggle_DX0CR_DSEN()
    {
        DX0CR ^= 1u << 6u;
    }

    /**
     * Get DX0CR's DFEN bit.
     */
    inline USIC0_CH0_DX0CR_DFEN get_DX0CR_DFEN()
    {
        return USIC0_CH0_DX0CR_DFEN(DX0CR & (1u << 5u));
    }

    /**
     * Set DX0CR's DFEN bit.
     */
    inline void set_DX0CR_DFEN()
    {
        DX0CR |= 1u << 5u;
    }

    /**
     * Clear DX0CR's DFEN bit.
     */
    inline void clear_DX0CR_DFEN()
    {
        DX0CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX0CR's DFEN bit.
     */
    inline void toggle_DX0CR_DFEN()
    {
        DX0CR ^= 1u << 5u;
    }

    /**
     * Get DX0CR's INSW bit.
     */
    inline USIC0_CH0_DX0CR_INSW get_DX0CR_INSW()
    {
        return USIC0_CH0_DX0CR_INSW(DX0CR & (1u << 4u));
    }

    /**
     * Set DX0CR's INSW bit.
     */
    inline void set_DX0CR_INSW()
    {
        DX0CR |= 1u << 4u;
    }

    /**
     * Clear DX0CR's INSW bit.
     */
    inline void clear_DX0CR_INSW()
    {
        DX0CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX0CR's INSW bit.
     */
    inline void toggle_DX0CR_INSW()
    {
        DX0CR ^= 1u << 4u;
    }

    /**
     * Get DX0CR's DSEL field.
     */
    inline USIC0_CH0_DX0CR_DSEL get_DX0CR_DSEL()
    {
        return USIC0_CH0_DX0CR_DSEL((DX0CR >> 0u) & 0b111u);
    }

    /**
     * Set DX0CR's DSEL field.
     */
    inline void set_DX0CR_DSEL(USIC0_CH0_DX0CR_DSEL value)
    {
        uint32_t curr = DX0CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX0CR = curr;
    }

    /**
     * Get all of DX0CR's bit fields.
     */
    inline void get_DX0CR(USIC0_CH0_DX0CR_DXS &DXS, USIC0_CH0_DX0CR_CM &CM, USIC0_CH0_DX0CR_SFSEL &SFSEL, USIC0_CH0_DX0CR_DPOL &DPOL, USIC0_CH0_DX0CR_DSEN &DSEN, USIC0_CH0_DX0CR_DFEN &DFEN, USIC0_CH0_DX0CR_INSW &INSW, USIC0_CH0_DX0CR_DSEL &DSEL)
    {
        uint32_t curr = DX0CR;

        DXS = USIC0_CH0_DX0CR_DXS(curr & (1u << 15u));
        CM = USIC0_CH0_DX0CR_CM((curr >> 10u) & 0b11u);
        SFSEL = USIC0_CH0_DX0CR_SFSEL(curr & (1u << 9u));
        DPOL = USIC0_CH0_DX0CR_DPOL(curr & (1u << 8u));
        DSEN = USIC0_CH0_DX0CR_DSEN(curr & (1u << 6u));
        DFEN = USIC0_CH0_DX0CR_DFEN(curr & (1u << 5u));
        INSW = USIC0_CH0_DX0CR_INSW(curr & (1u << 4u));
        DSEL = USIC0_CH0_DX0CR_DSEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of DX0CR's bit fields.
     */
    inline void set_DX0CR(USIC0_CH0_DX0CR_CM CM, USIC0_CH0_DX0CR_SFSEL SFSEL, USIC0_CH0_DX0CR_DPOL DPOL, USIC0_CH0_DX0CR_DSEN DSEN, USIC0_CH0_DX0CR_DFEN DFEN, USIC0_CH0_DX0CR_INSW INSW, USIC0_CH0_DX0CR_DSEL DSEL)
    {
        uint32_t curr = DX0CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(CM) & 0b11u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(SFSEL) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(DPOL) & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(DSEN) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DFEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(INSW) & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(DSEL) & 0b111u) << 0u;

        DX0CR = curr;
    }

    /**
     * Get DX1CR's DXS bit.
     */
    inline USIC0_CH0_DX1CR_DXS get_DX1CR_DXS()
    {
        return USIC0_CH0_DX1CR_DXS(DX1CR & (1u << 15u));
    }

    /**
     * Get DX1CR's CM field.
     */
    inline USIC0_CH0_DX1CR_CM get_DX1CR_CM()
    {
        return USIC0_CH0_DX1CR_CM((DX1CR >> 10u) & 0b11u);
    }

    /**
     * Set DX1CR's CM field.
     */
    inline void set_DX1CR_CM(USIC0_CH0_DX1CR_CM value)
    {
        uint32_t curr = DX1CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX1CR = curr;
    }

    /**
     * Get DX1CR's SFSEL bit.
     */
    inline USIC0_CH0_DX1CR_SFSEL get_DX1CR_SFSEL()
    {
        return USIC0_CH0_DX1CR_SFSEL(DX1CR & (1u << 9u));
    }

    /**
     * Set DX1CR's SFSEL bit.
     */
    inline void set_DX1CR_SFSEL()
    {
        DX1CR |= 1u << 9u;
    }

    /**
     * Clear DX1CR's SFSEL bit.
     */
    inline void clear_DX1CR_SFSEL()
    {
        DX1CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX1CR's SFSEL bit.
     */
    inline void toggle_DX1CR_SFSEL()
    {
        DX1CR ^= 1u << 9u;
    }

    /**
     * Get DX1CR's DPOL bit.
     */
    inline USIC0_CH0_DX1CR_DPOL get_DX1CR_DPOL()
    {
        return USIC0_CH0_DX1CR_DPOL(DX1CR & (1u << 8u));
    }

    /**
     * Set DX1CR's DPOL bit.
     */
    inline void set_DX1CR_DPOL()
    {
        DX1CR |= 1u << 8u;
    }

    /**
     * Clear DX1CR's DPOL bit.
     */
    inline void clear_DX1CR_DPOL()
    {
        DX1CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX1CR's DPOL bit.
     */
    inline void toggle_DX1CR_DPOL()
    {
        DX1CR ^= 1u << 8u;
    }

    /**
     * Get DX1CR's DSEN bit.
     */
    inline USIC0_CH0_DX1CR_DSEN get_DX1CR_DSEN()
    {
        return USIC0_CH0_DX1CR_DSEN(DX1CR & (1u << 6u));
    }

    /**
     * Set DX1CR's DSEN bit.
     */
    inline void set_DX1CR_DSEN()
    {
        DX1CR |= 1u << 6u;
    }

    /**
     * Clear DX1CR's DSEN bit.
     */
    inline void clear_DX1CR_DSEN()
    {
        DX1CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX1CR's DSEN bit.
     */
    inline void toggle_DX1CR_DSEN()
    {
        DX1CR ^= 1u << 6u;
    }

    /**
     * Get DX1CR's DFEN bit.
     */
    inline USIC0_CH0_DX1CR_DFEN get_DX1CR_DFEN()
    {
        return USIC0_CH0_DX1CR_DFEN(DX1CR & (1u << 5u));
    }

    /**
     * Set DX1CR's DFEN bit.
     */
    inline void set_DX1CR_DFEN()
    {
        DX1CR |= 1u << 5u;
    }

    /**
     * Clear DX1CR's DFEN bit.
     */
    inline void clear_DX1CR_DFEN()
    {
        DX1CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX1CR's DFEN bit.
     */
    inline void toggle_DX1CR_DFEN()
    {
        DX1CR ^= 1u << 5u;
    }

    /**
     * Get DX1CR's INSW bit.
     */
    inline USIC0_CH0_DX1CR_INSW get_DX1CR_INSW()
    {
        return USIC0_CH0_DX1CR_INSW(DX1CR & (1u << 4u));
    }

    /**
     * Set DX1CR's INSW bit.
     */
    inline void set_DX1CR_INSW()
    {
        DX1CR |= 1u << 4u;
    }

    /**
     * Clear DX1CR's INSW bit.
     */
    inline void clear_DX1CR_INSW()
    {
        DX1CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX1CR's INSW bit.
     */
    inline void toggle_DX1CR_INSW()
    {
        DX1CR ^= 1u << 4u;
    }

    /**
     * Get DX1CR's DCEN bit.
     */
    inline USIC0_CH0_DX1CR_DCEN get_DX1CR_DCEN()
    {
        return USIC0_CH0_DX1CR_DCEN(DX1CR & (1u << 3u));
    }

    /**
     * Set DX1CR's DCEN bit.
     */
    inline void set_DX1CR_DCEN()
    {
        DX1CR |= 1u << 3u;
    }

    /**
     * Clear DX1CR's DCEN bit.
     */
    inline void clear_DX1CR_DCEN()
    {
        DX1CR &= ~(1u << 3u);
    }

    /**
     * Toggle DX1CR's DCEN bit.
     */
    inline void toggle_DX1CR_DCEN()
    {
        DX1CR ^= 1u << 3u;
    }

    /**
     * Get DX1CR's DSEL field.
     */
    inline USIC0_CH0_DX1CR_DSEL get_DX1CR_DSEL()
    {
        return USIC0_CH0_DX1CR_DSEL((DX1CR >> 0u) & 0b111u);
    }

    /**
     * Set DX1CR's DSEL field.
     */
    inline void set_DX1CR_DSEL(USIC0_CH0_DX1CR_DSEL value)
    {
        uint32_t curr = DX1CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX1CR = curr;
    }

    /**
     * Get all of DX1CR's bit fields.
     */
    inline void get_DX1CR(USIC0_CH0_DX1CR_DXS &DXS, USIC0_CH0_DX1CR_CM &CM, USIC0_CH0_DX1CR_SFSEL &SFSEL, USIC0_CH0_DX1CR_DPOL &DPOL, USIC0_CH0_DX1CR_DSEN &DSEN, USIC0_CH0_DX1CR_DFEN &DFEN, USIC0_CH0_DX1CR_INSW &INSW, USIC0_CH0_DX1CR_DCEN &DCEN, USIC0_CH0_DX1CR_DSEL &DSEL)
    {
        uint32_t curr = DX1CR;

        DXS = USIC0_CH0_DX1CR_DXS(curr & (1u << 15u));
        CM = USIC0_CH0_DX1CR_CM((curr >> 10u) & 0b11u);
        SFSEL = USIC0_CH0_DX1CR_SFSEL(curr & (1u << 9u));
        DPOL = USIC0_CH0_DX1CR_DPOL(curr & (1u << 8u));
        DSEN = USIC0_CH0_DX1CR_DSEN(curr & (1u << 6u));
        DFEN = USIC0_CH0_DX1CR_DFEN(curr & (1u << 5u));
        INSW = USIC0_CH0_DX1CR_INSW(curr & (1u << 4u));
        DCEN = USIC0_CH0_DX1CR_DCEN(curr & (1u << 3u));
        DSEL = USIC0_CH0_DX1CR_DSEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of DX1CR's bit fields.
     */
    inline void set_DX1CR(USIC0_CH0_DX1CR_CM CM, USIC0_CH0_DX1CR_SFSEL SFSEL, USIC0_CH0_DX1CR_DPOL DPOL, USIC0_CH0_DX1CR_DSEN DSEN, USIC0_CH0_DX1CR_DFEN DFEN, USIC0_CH0_DX1CR_INSW INSW, USIC0_CH0_DX1CR_DCEN DCEN, USIC0_CH0_DX1CR_DSEL DSEL)
    {
        uint32_t curr = DX1CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(CM) & 0b11u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(SFSEL) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(DPOL) & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(DSEN) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DFEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(INSW) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(DCEN) & 0b1u) << 3u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(DSEL) & 0b111u) << 0u;

        DX1CR = curr;
    }

    /**
     * Get DX2CR's DXS bit.
     */
    inline USIC0_CH0_DX2CR_DXS get_DX2CR_DXS()
    {
        return USIC0_CH0_DX2CR_DXS(DX2CR & (1u << 15u));
    }

    /**
     * Get DX2CR's CM field.
     */
    inline USIC0_CH0_DX2CR_CM get_DX2CR_CM()
    {
        return USIC0_CH0_DX2CR_CM((DX2CR >> 10u) & 0b11u);
    }

    /**
     * Set DX2CR's CM field.
     */
    inline void set_DX2CR_CM(USIC0_CH0_DX2CR_CM value)
    {
        uint32_t curr = DX2CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX2CR = curr;
    }

    /**
     * Get DX2CR's SFSEL bit.
     */
    inline USIC0_CH0_DX2CR_SFSEL get_DX2CR_SFSEL()
    {
        return USIC0_CH0_DX2CR_SFSEL(DX2CR & (1u << 9u));
    }

    /**
     * Set DX2CR's SFSEL bit.
     */
    inline void set_DX2CR_SFSEL()
    {
        DX2CR |= 1u << 9u;
    }

    /**
     * Clear DX2CR's SFSEL bit.
     */
    inline void clear_DX2CR_SFSEL()
    {
        DX2CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX2CR's SFSEL bit.
     */
    inline void toggle_DX2CR_SFSEL()
    {
        DX2CR ^= 1u << 9u;
    }

    /**
     * Get DX2CR's DPOL bit.
     */
    inline USIC0_CH0_DX2CR_DPOL get_DX2CR_DPOL()
    {
        return USIC0_CH0_DX2CR_DPOL(DX2CR & (1u << 8u));
    }

    /**
     * Set DX2CR's DPOL bit.
     */
    inline void set_DX2CR_DPOL()
    {
        DX2CR |= 1u << 8u;
    }

    /**
     * Clear DX2CR's DPOL bit.
     */
    inline void clear_DX2CR_DPOL()
    {
        DX2CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX2CR's DPOL bit.
     */
    inline void toggle_DX2CR_DPOL()
    {
        DX2CR ^= 1u << 8u;
    }

    /**
     * Get DX2CR's DSEN bit.
     */
    inline USIC0_CH0_DX2CR_DSEN get_DX2CR_DSEN()
    {
        return USIC0_CH0_DX2CR_DSEN(DX2CR & (1u << 6u));
    }

    /**
     * Set DX2CR's DSEN bit.
     */
    inline void set_DX2CR_DSEN()
    {
        DX2CR |= 1u << 6u;
    }

    /**
     * Clear DX2CR's DSEN bit.
     */
    inline void clear_DX2CR_DSEN()
    {
        DX2CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX2CR's DSEN bit.
     */
    inline void toggle_DX2CR_DSEN()
    {
        DX2CR ^= 1u << 6u;
    }

    /**
     * Get DX2CR's DFEN bit.
     */
    inline USIC0_CH0_DX2CR_DFEN get_DX2CR_DFEN()
    {
        return USIC0_CH0_DX2CR_DFEN(DX2CR & (1u << 5u));
    }

    /**
     * Set DX2CR's DFEN bit.
     */
    inline void set_DX2CR_DFEN()
    {
        DX2CR |= 1u << 5u;
    }

    /**
     * Clear DX2CR's DFEN bit.
     */
    inline void clear_DX2CR_DFEN()
    {
        DX2CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX2CR's DFEN bit.
     */
    inline void toggle_DX2CR_DFEN()
    {
        DX2CR ^= 1u << 5u;
    }

    /**
     * Get DX2CR's INSW bit.
     */
    inline USIC0_CH0_DX2CR_INSW get_DX2CR_INSW()
    {
        return USIC0_CH0_DX2CR_INSW(DX2CR & (1u << 4u));
    }

    /**
     * Set DX2CR's INSW bit.
     */
    inline void set_DX2CR_INSW()
    {
        DX2CR |= 1u << 4u;
    }

    /**
     * Clear DX2CR's INSW bit.
     */
    inline void clear_DX2CR_INSW()
    {
        DX2CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX2CR's INSW bit.
     */
    inline void toggle_DX2CR_INSW()
    {
        DX2CR ^= 1u << 4u;
    }

    /**
     * Get DX2CR's DSEL field.
     */
    inline USIC0_CH0_DX2CR_DSEL get_DX2CR_DSEL()
    {
        return USIC0_CH0_DX2CR_DSEL((DX2CR >> 0u) & 0b111u);
    }

    /**
     * Set DX2CR's DSEL field.
     */
    inline void set_DX2CR_DSEL(USIC0_CH0_DX2CR_DSEL value)
    {
        uint32_t curr = DX2CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX2CR = curr;
    }

    /**
     * Get all of DX2CR's bit fields.
     */
    inline void get_DX2CR(USIC0_CH0_DX2CR_DXS &DXS, USIC0_CH0_DX2CR_CM &CM, USIC0_CH0_DX2CR_SFSEL &SFSEL, USIC0_CH0_DX2CR_DPOL &DPOL, USIC0_CH0_DX2CR_DSEN &DSEN, USIC0_CH0_DX2CR_DFEN &DFEN, USIC0_CH0_DX2CR_INSW &INSW, USIC0_CH0_DX2CR_DSEL &DSEL)
    {
        uint32_t curr = DX2CR;

        DXS = USIC0_CH0_DX2CR_DXS(curr & (1u << 15u));
        CM = USIC0_CH0_DX2CR_CM((curr >> 10u) & 0b11u);
        SFSEL = USIC0_CH0_DX2CR_SFSEL(curr & (1u << 9u));
        DPOL = USIC0_CH0_DX2CR_DPOL(curr & (1u << 8u));
        DSEN = USIC0_CH0_DX2CR_DSEN(curr & (1u << 6u));
        DFEN = USIC0_CH0_DX2CR_DFEN(curr & (1u << 5u));
        INSW = USIC0_CH0_DX2CR_INSW(curr & (1u << 4u));
        DSEL = USIC0_CH0_DX2CR_DSEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of DX2CR's bit fields.
     */
    inline void set_DX2CR(USIC0_CH0_DX2CR_CM CM, USIC0_CH0_DX2CR_SFSEL SFSEL, USIC0_CH0_DX2CR_DPOL DPOL, USIC0_CH0_DX2CR_DSEN DSEN, USIC0_CH0_DX2CR_DFEN DFEN, USIC0_CH0_DX2CR_INSW INSW, USIC0_CH0_DX2CR_DSEL DSEL)
    {
        uint32_t curr = DX2CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(CM) & 0b11u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(SFSEL) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(DPOL) & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(DSEN) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DFEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(INSW) & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(DSEL) & 0b111u) << 0u;

        DX2CR = curr;
    }

    /**
     * Get DX3CR's DXS bit.
     */
    inline USIC0_CH0_DX3CR_DXS get_DX3CR_DXS()
    {
        return USIC0_CH0_DX3CR_DXS(DX3CR & (1u << 15u));
    }

    /**
     * Get DX3CR's CM field.
     */
    inline USIC0_CH0_DX3CR_CM get_DX3CR_CM()
    {
        return USIC0_CH0_DX3CR_CM((DX3CR >> 10u) & 0b11u);
    }

    /**
     * Set DX3CR's CM field.
     */
    inline void set_DX3CR_CM(USIC0_CH0_DX3CR_CM value)
    {
        uint32_t curr = DX3CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX3CR = curr;
    }

    /**
     * Get DX3CR's SFSEL bit.
     */
    inline USIC0_CH0_DX3CR_SFSEL get_DX3CR_SFSEL()
    {
        return USIC0_CH0_DX3CR_SFSEL(DX3CR & (1u << 9u));
    }

    /**
     * Set DX3CR's SFSEL bit.
     */
    inline void set_DX3CR_SFSEL()
    {
        DX3CR |= 1u << 9u;
    }

    /**
     * Clear DX3CR's SFSEL bit.
     */
    inline void clear_DX3CR_SFSEL()
    {
        DX3CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX3CR's SFSEL bit.
     */
    inline void toggle_DX3CR_SFSEL()
    {
        DX3CR ^= 1u << 9u;
    }

    /**
     * Get DX3CR's DPOL bit.
     */
    inline USIC0_CH0_DX3CR_DPOL get_DX3CR_DPOL()
    {
        return USIC0_CH0_DX3CR_DPOL(DX3CR & (1u << 8u));
    }

    /**
     * Set DX3CR's DPOL bit.
     */
    inline void set_DX3CR_DPOL()
    {
        DX3CR |= 1u << 8u;
    }

    /**
     * Clear DX3CR's DPOL bit.
     */
    inline void clear_DX3CR_DPOL()
    {
        DX3CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX3CR's DPOL bit.
     */
    inline void toggle_DX3CR_DPOL()
    {
        DX3CR ^= 1u << 8u;
    }

    /**
     * Get DX3CR's DSEN bit.
     */
    inline USIC0_CH0_DX3CR_DSEN get_DX3CR_DSEN()
    {
        return USIC0_CH0_DX3CR_DSEN(DX3CR & (1u << 6u));
    }

    /**
     * Set DX3CR's DSEN bit.
     */
    inline void set_DX3CR_DSEN()
    {
        DX3CR |= 1u << 6u;
    }

    /**
     * Clear DX3CR's DSEN bit.
     */
    inline void clear_DX3CR_DSEN()
    {
        DX3CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX3CR's DSEN bit.
     */
    inline void toggle_DX3CR_DSEN()
    {
        DX3CR ^= 1u << 6u;
    }

    /**
     * Get DX3CR's DFEN bit.
     */
    inline USIC0_CH0_DX3CR_DFEN get_DX3CR_DFEN()
    {
        return USIC0_CH0_DX3CR_DFEN(DX3CR & (1u << 5u));
    }

    /**
     * Set DX3CR's DFEN bit.
     */
    inline void set_DX3CR_DFEN()
    {
        DX3CR |= 1u << 5u;
    }

    /**
     * Clear DX3CR's DFEN bit.
     */
    inline void clear_DX3CR_DFEN()
    {
        DX3CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX3CR's DFEN bit.
     */
    inline void toggle_DX3CR_DFEN()
    {
        DX3CR ^= 1u << 5u;
    }

    /**
     * Get DX3CR's INSW bit.
     */
    inline USIC0_CH0_DX3CR_INSW get_DX3CR_INSW()
    {
        return USIC0_CH0_DX3CR_INSW(DX3CR & (1u << 4u));
    }

    /**
     * Set DX3CR's INSW bit.
     */
    inline void set_DX3CR_INSW()
    {
        DX3CR |= 1u << 4u;
    }

    /**
     * Clear DX3CR's INSW bit.
     */
    inline void clear_DX3CR_INSW()
    {
        DX3CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX3CR's INSW bit.
     */
    inline void toggle_DX3CR_INSW()
    {
        DX3CR ^= 1u << 4u;
    }

    /**
     * Get DX3CR's DSEL field.
     */
    inline USIC0_CH0_DX3CR_DSEL get_DX3CR_DSEL()
    {
        return USIC0_CH0_DX3CR_DSEL((DX3CR >> 0u) & 0b111u);
    }

    /**
     * Set DX3CR's DSEL field.
     */
    inline void set_DX3CR_DSEL(USIC0_CH0_DX3CR_DSEL value)
    {
        uint32_t curr = DX3CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX3CR = curr;
    }

    /**
     * Get all of DX3CR's bit fields.
     */
    inline void get_DX3CR(USIC0_CH0_DX3CR_DXS &DXS, USIC0_CH0_DX3CR_CM &CM, USIC0_CH0_DX3CR_SFSEL &SFSEL, USIC0_CH0_DX3CR_DPOL &DPOL, USIC0_CH0_DX3CR_DSEN &DSEN, USIC0_CH0_DX3CR_DFEN &DFEN, USIC0_CH0_DX3CR_INSW &INSW, USIC0_CH0_DX3CR_DSEL &DSEL)
    {
        uint32_t curr = DX3CR;

        DXS = USIC0_CH0_DX3CR_DXS(curr & (1u << 15u));
        CM = USIC0_CH0_DX3CR_CM((curr >> 10u) & 0b11u);
        SFSEL = USIC0_CH0_DX3CR_SFSEL(curr & (1u << 9u));
        DPOL = USIC0_CH0_DX3CR_DPOL(curr & (1u << 8u));
        DSEN = USIC0_CH0_DX3CR_DSEN(curr & (1u << 6u));
        DFEN = USIC0_CH0_DX3CR_DFEN(curr & (1u << 5u));
        INSW = USIC0_CH0_DX3CR_INSW(curr & (1u << 4u));
        DSEL = USIC0_CH0_DX3CR_DSEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of DX3CR's bit fields.
     */
    inline void set_DX3CR(USIC0_CH0_DX3CR_CM CM, USIC0_CH0_DX3CR_SFSEL SFSEL, USIC0_CH0_DX3CR_DPOL DPOL, USIC0_CH0_DX3CR_DSEN DSEN, USIC0_CH0_DX3CR_DFEN DFEN, USIC0_CH0_DX3CR_INSW INSW, USIC0_CH0_DX3CR_DSEL DSEL)
    {
        uint32_t curr = DX3CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(CM) & 0b11u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(SFSEL) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(DPOL) & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(DSEN) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DFEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(INSW) & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(DSEL) & 0b111u) << 0u;

        DX3CR = curr;
    }

    /**
     * Get DX4CR's DXS bit.
     */
    inline USIC0_CH0_DX4CR_DXS get_DX4CR_DXS()
    {
        return USIC0_CH0_DX4CR_DXS(DX4CR & (1u << 15u));
    }

    /**
     * Get DX4CR's CM field.
     */
    inline USIC0_CH0_DX4CR_CM get_DX4CR_CM()
    {
        return USIC0_CH0_DX4CR_CM((DX4CR >> 10u) & 0b11u);
    }

    /**
     * Set DX4CR's CM field.
     */
    inline void set_DX4CR_CM(USIC0_CH0_DX4CR_CM value)
    {
        uint32_t curr = DX4CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX4CR = curr;
    }

    /**
     * Get DX4CR's SFSEL bit.
     */
    inline USIC0_CH0_DX4CR_SFSEL get_DX4CR_SFSEL()
    {
        return USIC0_CH0_DX4CR_SFSEL(DX4CR & (1u << 9u));
    }

    /**
     * Set DX4CR's SFSEL bit.
     */
    inline void set_DX4CR_SFSEL()
    {
        DX4CR |= 1u << 9u;
    }

    /**
     * Clear DX4CR's SFSEL bit.
     */
    inline void clear_DX4CR_SFSEL()
    {
        DX4CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX4CR's SFSEL bit.
     */
    inline void toggle_DX4CR_SFSEL()
    {
        DX4CR ^= 1u << 9u;
    }

    /**
     * Get DX4CR's DPOL bit.
     */
    inline USIC0_CH0_DX4CR_DPOL get_DX4CR_DPOL()
    {
        return USIC0_CH0_DX4CR_DPOL(DX4CR & (1u << 8u));
    }

    /**
     * Set DX4CR's DPOL bit.
     */
    inline void set_DX4CR_DPOL()
    {
        DX4CR |= 1u << 8u;
    }

    /**
     * Clear DX4CR's DPOL bit.
     */
    inline void clear_DX4CR_DPOL()
    {
        DX4CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX4CR's DPOL bit.
     */
    inline void toggle_DX4CR_DPOL()
    {
        DX4CR ^= 1u << 8u;
    }

    /**
     * Get DX4CR's DSEN bit.
     */
    inline USIC0_CH0_DX4CR_DSEN get_DX4CR_DSEN()
    {
        return USIC0_CH0_DX4CR_DSEN(DX4CR & (1u << 6u));
    }

    /**
     * Set DX4CR's DSEN bit.
     */
    inline void set_DX4CR_DSEN()
    {
        DX4CR |= 1u << 6u;
    }

    /**
     * Clear DX4CR's DSEN bit.
     */
    inline void clear_DX4CR_DSEN()
    {
        DX4CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX4CR's DSEN bit.
     */
    inline void toggle_DX4CR_DSEN()
    {
        DX4CR ^= 1u << 6u;
    }

    /**
     * Get DX4CR's DFEN bit.
     */
    inline USIC0_CH0_DX4CR_DFEN get_DX4CR_DFEN()
    {
        return USIC0_CH0_DX4CR_DFEN(DX4CR & (1u << 5u));
    }

    /**
     * Set DX4CR's DFEN bit.
     */
    inline void set_DX4CR_DFEN()
    {
        DX4CR |= 1u << 5u;
    }

    /**
     * Clear DX4CR's DFEN bit.
     */
    inline void clear_DX4CR_DFEN()
    {
        DX4CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX4CR's DFEN bit.
     */
    inline void toggle_DX4CR_DFEN()
    {
        DX4CR ^= 1u << 5u;
    }

    /**
     * Get DX4CR's INSW bit.
     */
    inline USIC0_CH0_DX4CR_INSW get_DX4CR_INSW()
    {
        return USIC0_CH0_DX4CR_INSW(DX4CR & (1u << 4u));
    }

    /**
     * Set DX4CR's INSW bit.
     */
    inline void set_DX4CR_INSW()
    {
        DX4CR |= 1u << 4u;
    }

    /**
     * Clear DX4CR's INSW bit.
     */
    inline void clear_DX4CR_INSW()
    {
        DX4CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX4CR's INSW bit.
     */
    inline void toggle_DX4CR_INSW()
    {
        DX4CR ^= 1u << 4u;
    }

    /**
     * Get DX4CR's DSEL field.
     */
    inline USIC0_CH0_DX4CR_DSEL get_DX4CR_DSEL()
    {
        return USIC0_CH0_DX4CR_DSEL((DX4CR >> 0u) & 0b111u);
    }

    /**
     * Set DX4CR's DSEL field.
     */
    inline void set_DX4CR_DSEL(USIC0_CH0_DX4CR_DSEL value)
    {
        uint32_t curr = DX4CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX4CR = curr;
    }

    /**
     * Get all of DX4CR's bit fields.
     */
    inline void get_DX4CR(USIC0_CH0_DX4CR_DXS &DXS, USIC0_CH0_DX4CR_CM &CM, USIC0_CH0_DX4CR_SFSEL &SFSEL, USIC0_CH0_DX4CR_DPOL &DPOL, USIC0_CH0_DX4CR_DSEN &DSEN, USIC0_CH0_DX4CR_DFEN &DFEN, USIC0_CH0_DX4CR_INSW &INSW, USIC0_CH0_DX4CR_DSEL &DSEL)
    {
        uint32_t curr = DX4CR;

        DXS = USIC0_CH0_DX4CR_DXS(curr & (1u << 15u));
        CM = USIC0_CH0_DX4CR_CM((curr >> 10u) & 0b11u);
        SFSEL = USIC0_CH0_DX4CR_SFSEL(curr & (1u << 9u));
        DPOL = USIC0_CH0_DX4CR_DPOL(curr & (1u << 8u));
        DSEN = USIC0_CH0_DX4CR_DSEN(curr & (1u << 6u));
        DFEN = USIC0_CH0_DX4CR_DFEN(curr & (1u << 5u));
        INSW = USIC0_CH0_DX4CR_INSW(curr & (1u << 4u));
        DSEL = USIC0_CH0_DX4CR_DSEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of DX4CR's bit fields.
     */
    inline void set_DX4CR(USIC0_CH0_DX4CR_CM CM, USIC0_CH0_DX4CR_SFSEL SFSEL, USIC0_CH0_DX4CR_DPOL DPOL, USIC0_CH0_DX4CR_DSEN DSEN, USIC0_CH0_DX4CR_DFEN DFEN, USIC0_CH0_DX4CR_INSW INSW, USIC0_CH0_DX4CR_DSEL DSEL)
    {
        uint32_t curr = DX4CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(CM) & 0b11u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(SFSEL) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(DPOL) & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(DSEN) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DFEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(INSW) & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(DSEL) & 0b111u) << 0u;

        DX4CR = curr;
    }

    /**
     * Get DX5CR's DXS bit.
     */
    inline USIC0_CH0_DX5CR_DXS get_DX5CR_DXS()
    {
        return USIC0_CH0_DX5CR_DXS(DX5CR & (1u << 15u));
    }

    /**
     * Get DX5CR's CM field.
     */
    inline USIC0_CH0_DX5CR_CM get_DX5CR_CM()
    {
        return USIC0_CH0_DX5CR_CM((DX5CR >> 10u) & 0b11u);
    }

    /**
     * Set DX5CR's CM field.
     */
    inline void set_DX5CR_CM(USIC0_CH0_DX5CR_CM value)
    {
        uint32_t curr = DX5CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        DX5CR = curr;
    }

    /**
     * Get DX5CR's SFSEL bit.
     */
    inline USIC0_CH0_DX5CR_SFSEL get_DX5CR_SFSEL()
    {
        return USIC0_CH0_DX5CR_SFSEL(DX5CR & (1u << 9u));
    }

    /**
     * Set DX5CR's SFSEL bit.
     */
    inline void set_DX5CR_SFSEL()
    {
        DX5CR |= 1u << 9u;
    }

    /**
     * Clear DX5CR's SFSEL bit.
     */
    inline void clear_DX5CR_SFSEL()
    {
        DX5CR &= ~(1u << 9u);
    }

    /**
     * Toggle DX5CR's SFSEL bit.
     */
    inline void toggle_DX5CR_SFSEL()
    {
        DX5CR ^= 1u << 9u;
    }

    /**
     * Get DX5CR's DPOL bit.
     */
    inline USIC0_CH0_DX5CR_DPOL get_DX5CR_DPOL()
    {
        return USIC0_CH0_DX5CR_DPOL(DX5CR & (1u << 8u));
    }

    /**
     * Set DX5CR's DPOL bit.
     */
    inline void set_DX5CR_DPOL()
    {
        DX5CR |= 1u << 8u;
    }

    /**
     * Clear DX5CR's DPOL bit.
     */
    inline void clear_DX5CR_DPOL()
    {
        DX5CR &= ~(1u << 8u);
    }

    /**
     * Toggle DX5CR's DPOL bit.
     */
    inline void toggle_DX5CR_DPOL()
    {
        DX5CR ^= 1u << 8u;
    }

    /**
     * Get DX5CR's DSEN bit.
     */
    inline USIC0_CH0_DX5CR_DSEN get_DX5CR_DSEN()
    {
        return USIC0_CH0_DX5CR_DSEN(DX5CR & (1u << 6u));
    }

    /**
     * Set DX5CR's DSEN bit.
     */
    inline void set_DX5CR_DSEN()
    {
        DX5CR |= 1u << 6u;
    }

    /**
     * Clear DX5CR's DSEN bit.
     */
    inline void clear_DX5CR_DSEN()
    {
        DX5CR &= ~(1u << 6u);
    }

    /**
     * Toggle DX5CR's DSEN bit.
     */
    inline void toggle_DX5CR_DSEN()
    {
        DX5CR ^= 1u << 6u;
    }

    /**
     * Get DX5CR's DFEN bit.
     */
    inline USIC0_CH0_DX5CR_DFEN get_DX5CR_DFEN()
    {
        return USIC0_CH0_DX5CR_DFEN(DX5CR & (1u << 5u));
    }

    /**
     * Set DX5CR's DFEN bit.
     */
    inline void set_DX5CR_DFEN()
    {
        DX5CR |= 1u << 5u;
    }

    /**
     * Clear DX5CR's DFEN bit.
     */
    inline void clear_DX5CR_DFEN()
    {
        DX5CR &= ~(1u << 5u);
    }

    /**
     * Toggle DX5CR's DFEN bit.
     */
    inline void toggle_DX5CR_DFEN()
    {
        DX5CR ^= 1u << 5u;
    }

    /**
     * Get DX5CR's INSW bit.
     */
    inline USIC0_CH0_DX5CR_INSW get_DX5CR_INSW()
    {
        return USIC0_CH0_DX5CR_INSW(DX5CR & (1u << 4u));
    }

    /**
     * Set DX5CR's INSW bit.
     */
    inline void set_DX5CR_INSW()
    {
        DX5CR |= 1u << 4u;
    }

    /**
     * Clear DX5CR's INSW bit.
     */
    inline void clear_DX5CR_INSW()
    {
        DX5CR &= ~(1u << 4u);
    }

    /**
     * Toggle DX5CR's INSW bit.
     */
    inline void toggle_DX5CR_INSW()
    {
        DX5CR ^= 1u << 4u;
    }

    /**
     * Get DX5CR's DSEL field.
     */
    inline USIC0_CH0_DX5CR_DSEL get_DX5CR_DSEL()
    {
        return USIC0_CH0_DX5CR_DSEL((DX5CR >> 0u) & 0b111u);
    }

    /**
     * Set DX5CR's DSEL field.
     */
    inline void set_DX5CR_DSEL(USIC0_CH0_DX5CR_DSEL value)
    {
        uint32_t curr = DX5CR;

        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(value) & 0b111u) << 0u;

        DX5CR = curr;
    }

    /**
     * Get all of DX5CR's bit fields.
     */
    inline void get_DX5CR(USIC0_CH0_DX5CR_DXS &DXS, USIC0_CH0_DX5CR_CM &CM, USIC0_CH0_DX5CR_SFSEL &SFSEL, USIC0_CH0_DX5CR_DPOL &DPOL, USIC0_CH0_DX5CR_DSEN &DSEN, USIC0_CH0_DX5CR_DFEN &DFEN, USIC0_CH0_DX5CR_INSW &INSW, USIC0_CH0_DX5CR_DSEL &DSEL)
    {
        uint32_t curr = DX5CR;

        DXS = USIC0_CH0_DX5CR_DXS(curr & (1u << 15u));
        CM = USIC0_CH0_DX5CR_CM((curr >> 10u) & 0b11u);
        SFSEL = USIC0_CH0_DX5CR_SFSEL(curr & (1u << 9u));
        DPOL = USIC0_CH0_DX5CR_DPOL(curr & (1u << 8u));
        DSEN = USIC0_CH0_DX5CR_DSEN(curr & (1u << 6u));
        DFEN = USIC0_CH0_DX5CR_DFEN(curr & (1u << 5u));
        INSW = USIC0_CH0_DX5CR_INSW(curr & (1u << 4u));
        DSEL = USIC0_CH0_DX5CR_DSEL((curr >> 0u) & 0b111u);
    }

    /**
     * Set all of DX5CR's bit fields.
     */
    inline void set_DX5CR(USIC0_CH0_DX5CR_CM CM, USIC0_CH0_DX5CR_SFSEL SFSEL, USIC0_CH0_DX5CR_DPOL DPOL, USIC0_CH0_DX5CR_DSEN DSEN, USIC0_CH0_DX5CR_DFEN DFEN, USIC0_CH0_DX5CR_INSW INSW, USIC0_CH0_DX5CR_DSEL DSEL)
    {
        uint32_t curr = DX5CR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(CM) & 0b11u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(SFSEL) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(DPOL) & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(DSEN) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(DFEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(INSW) & 0b1u) << 4u;
        curr &= ~(0b111u << 0u);
        curr |= (std::to_underlying(DSEL) & 0b111u) << 0u;

        DX5CR = curr;
    }

    /**
     * Get SCTR's WLE field.
     */
    inline USIC0_CH0_SCTR_WLE get_SCTR_WLE()
    {
        return USIC0_CH0_SCTR_WLE((SCTR >> 24u) & 0b1111u);
    }

    /**
     * Set SCTR's WLE field.
     */
    inline void set_SCTR_WLE(USIC0_CH0_SCTR_WLE value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(value) & 0b1111u) << 24u;

        SCTR = curr;
    }

    /**
     * Get SCTR's FLE field.
     */
    inline uint8_t get_SCTR_FLE()
    {
        return (SCTR >> 16u) & 0b111111u;
    }

    /**
     * Set SCTR's FLE field.
     */
    inline void set_SCTR_FLE(uint8_t value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b111111u << 16u);
        curr |= (value & 0b111111u) << 16u;

        SCTR = curr;
    }

    /**
     * Get SCTR's TRM field.
     */
    inline USIC0_CH0_SCTR_TRM get_SCTR_TRM()
    {
        return USIC0_CH0_SCTR_TRM((SCTR >> 8u) & 0b11u);
    }

    /**
     * Set SCTR's TRM field.
     */
    inline void set_SCTR_TRM(USIC0_CH0_SCTR_TRM value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        SCTR = curr;
    }

    /**
     * Get SCTR's DOCFG field.
     */
    inline USIC0_CH0_SCTR_DOCFG get_SCTR_DOCFG()
    {
        return USIC0_CH0_SCTR_DOCFG((SCTR >> 6u) & 0b11u);
    }

    /**
     * Set SCTR's DOCFG field.
     */
    inline void set_SCTR_DOCFG(USIC0_CH0_SCTR_DOCFG value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        SCTR = curr;
    }

    /**
     * Get SCTR's HPCDIR bit.
     */
    inline USIC0_CH0_SCTR_HPCDIR get_SCTR_HPCDIR()
    {
        return USIC0_CH0_SCTR_HPCDIR(SCTR & (1u << 4u));
    }

    /**
     * Set SCTR's HPCDIR bit.
     */
    inline void set_SCTR_HPCDIR()
    {
        SCTR |= 1u << 4u;
    }

    /**
     * Clear SCTR's HPCDIR bit.
     */
    inline void clear_SCTR_HPCDIR()
    {
        SCTR &= ~(1u << 4u);
    }

    /**
     * Toggle SCTR's HPCDIR bit.
     */
    inline void toggle_SCTR_HPCDIR()
    {
        SCTR ^= 1u << 4u;
    }

    /**
     * Get SCTR's DSM field.
     */
    inline USIC0_CH0_SCTR_DSM get_SCTR_DSM()
    {
        return USIC0_CH0_SCTR_DSM((SCTR >> 2u) & 0b11u);
    }

    /**
     * Set SCTR's DSM field.
     */
    inline void set_SCTR_DSM(USIC0_CH0_SCTR_DSM value)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(value) & 0b11u) << 2u;

        SCTR = curr;
    }

    /**
     * Get SCTR's PDL bit.
     */
    inline USIC0_CH0_SCTR_PDL get_SCTR_PDL()
    {
        return USIC0_CH0_SCTR_PDL(SCTR & (1u << 1u));
    }

    /**
     * Set SCTR's PDL bit.
     */
    inline void set_SCTR_PDL()
    {
        SCTR |= 1u << 1u;
    }

    /**
     * Clear SCTR's PDL bit.
     */
    inline void clear_SCTR_PDL()
    {
        SCTR &= ~(1u << 1u);
    }

    /**
     * Toggle SCTR's PDL bit.
     */
    inline void toggle_SCTR_PDL()
    {
        SCTR ^= 1u << 1u;
    }

    /**
     * Get SCTR's SDIR bit.
     */
    inline USIC0_CH0_SCTR_SDIR get_SCTR_SDIR()
    {
        return USIC0_CH0_SCTR_SDIR(SCTR & (1u << 0u));
    }

    /**
     * Set SCTR's SDIR bit.
     */
    inline void set_SCTR_SDIR()
    {
        SCTR |= 1u << 0u;
    }

    /**
     * Clear SCTR's SDIR bit.
     */
    inline void clear_SCTR_SDIR()
    {
        SCTR &= ~(1u << 0u);
    }

    /**
     * Toggle SCTR's SDIR bit.
     */
    inline void toggle_SCTR_SDIR()
    {
        SCTR ^= 1u << 0u;
    }

    /**
     * Get all of SCTR's bit fields.
     */
    inline void get_SCTR(USIC0_CH0_SCTR_WLE &WLE, uint8_t &FLE, USIC0_CH0_SCTR_TRM &TRM, USIC0_CH0_SCTR_DOCFG &DOCFG, USIC0_CH0_SCTR_HPCDIR &HPCDIR, USIC0_CH0_SCTR_DSM &DSM, USIC0_CH0_SCTR_PDL &PDL, USIC0_CH0_SCTR_SDIR &SDIR)
    {
        uint32_t curr = SCTR;

        WLE = USIC0_CH0_SCTR_WLE((curr >> 24u) & 0b1111u);
        FLE = (curr >> 16u) & 0b111111u;
        TRM = USIC0_CH0_SCTR_TRM((curr >> 8u) & 0b11u);
        DOCFG = USIC0_CH0_SCTR_DOCFG((curr >> 6u) & 0b11u);
        HPCDIR = USIC0_CH0_SCTR_HPCDIR(curr & (1u << 4u));
        DSM = USIC0_CH0_SCTR_DSM((curr >> 2u) & 0b11u);
        PDL = USIC0_CH0_SCTR_PDL(curr & (1u << 1u));
        SDIR = USIC0_CH0_SCTR_SDIR(curr & (1u << 0u));
    }

    /**
     * Set all of SCTR's bit fields.
     */
    inline void set_SCTR(USIC0_CH0_SCTR_WLE WLE, uint8_t FLE, USIC0_CH0_SCTR_TRM TRM, USIC0_CH0_SCTR_DOCFG DOCFG, USIC0_CH0_SCTR_HPCDIR HPCDIR, USIC0_CH0_SCTR_DSM DSM, USIC0_CH0_SCTR_PDL PDL, USIC0_CH0_SCTR_SDIR SDIR)
    {
        uint32_t curr = SCTR;

        curr &= ~(0b1111u << 24u);
        curr |= (std::to_underlying(WLE) & 0b1111u) << 24u;
        curr &= ~(0b111111u << 16u);
        curr |= (FLE & 0b111111u) << 16u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(TRM) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(DOCFG) & 0b11u) << 6u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(HPCDIR) & 0b1u) << 4u;
        curr &= ~(0b11u << 2u);
        curr |= (std::to_underlying(DSM) & 0b11u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(PDL) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(SDIR) & 0b1u) << 0u;

        SCTR = curr;
    }

    /**
     * Get TCSR's TE bit.
     */
    inline USIC0_CH0_TCSR_TE get_TCSR_TE()
    {
        return USIC0_CH0_TCSR_TE(TCSR & (1u << 28u));
    }

    /**
     * Get TCSR's TVC bit.
     */
    inline USIC0_CH0_TCSR_TVC get_TCSR_TVC()
    {
        return USIC0_CH0_TCSR_TVC(TCSR & (1u << 27u));
    }

    /**
     * Get TCSR's TV bit.
     */
    inline USIC0_CH0_TCSR_TV get_TCSR_TV()
    {
        return USIC0_CH0_TCSR_TV(TCSR & (1u << 26u));
    }

    /**
     * Get TCSR's TSOF bit.
     */
    inline USIC0_CH0_TCSR_TSOF get_TCSR_TSOF()
    {
        return USIC0_CH0_TCSR_TSOF(TCSR & (1u << 24u));
    }

    /**
     * Get TCSR's WA bit.
     */
    inline USIC0_CH0_TCSR_WA get_TCSR_WA()
    {
        return USIC0_CH0_TCSR_WA(TCSR & (1u << 13u));
    }

    /**
     * Set TCSR's WA bit.
     */
    inline void set_TCSR_WA()
    {
        TCSR |= 1u << 13u;
    }

    /**
     * Clear TCSR's WA bit.
     */
    inline void clear_TCSR_WA()
    {
        TCSR &= ~(1u << 13u);
    }

    /**
     * Toggle TCSR's WA bit.
     */
    inline void toggle_TCSR_WA()
    {
        TCSR ^= 1u << 13u;
    }

    /**
     * Get TCSR's TDVTR bit.
     */
    inline USIC0_CH0_TCSR_TDVTR get_TCSR_TDVTR()
    {
        return USIC0_CH0_TCSR_TDVTR(TCSR & (1u << 12u));
    }

    /**
     * Set TCSR's TDVTR bit.
     */
    inline void set_TCSR_TDVTR()
    {
        TCSR |= 1u << 12u;
    }

    /**
     * Clear TCSR's TDVTR bit.
     */
    inline void clear_TCSR_TDVTR()
    {
        TCSR &= ~(1u << 12u);
    }

    /**
     * Toggle TCSR's TDVTR bit.
     */
    inline void toggle_TCSR_TDVTR()
    {
        TCSR ^= 1u << 12u;
    }

    /**
     * Get TCSR's TDEN field.
     */
    inline USIC0_CH0_TCSR_TDEN get_TCSR_TDEN()
    {
        return USIC0_CH0_TCSR_TDEN((TCSR >> 10u) & 0b11u);
    }

    /**
     * Set TCSR's TDEN field.
     */
    inline void set_TCSR_TDEN(USIC0_CH0_TCSR_TDEN value)
    {
        uint32_t curr = TCSR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        TCSR = curr;
    }

    /**
     * Get TCSR's TDSSM bit.
     */
    inline USIC0_CH0_TCSR_TDSSM get_TCSR_TDSSM()
    {
        return USIC0_CH0_TCSR_TDSSM(TCSR & (1u << 8u));
    }

    /**
     * Set TCSR's TDSSM bit.
     */
    inline void set_TCSR_TDSSM()
    {
        TCSR |= 1u << 8u;
    }

    /**
     * Clear TCSR's TDSSM bit.
     */
    inline void clear_TCSR_TDSSM()
    {
        TCSR &= ~(1u << 8u);
    }

    /**
     * Toggle TCSR's TDSSM bit.
     */
    inline void toggle_TCSR_TDSSM()
    {
        TCSR ^= 1u << 8u;
    }

    /**
     * Get TCSR's TDV bit.
     */
    inline USIC0_CH0_TCSR_TDV get_TCSR_TDV()
    {
        return USIC0_CH0_TCSR_TDV(TCSR & (1u << 7u));
    }

    /**
     * Get TCSR's EOF bit.
     */
    inline USIC0_CH0_TCSR_EOF get_TCSR_EOF()
    {
        return USIC0_CH0_TCSR_EOF(TCSR & (1u << 6u));
    }

    /**
     * Set TCSR's EOF bit.
     */
    inline void set_TCSR_EOF()
    {
        TCSR |= 1u << 6u;
    }

    /**
     * Clear TCSR's EOF bit.
     */
    inline void clear_TCSR_EOF()
    {
        TCSR &= ~(1u << 6u);
    }

    /**
     * Toggle TCSR's EOF bit.
     */
    inline void toggle_TCSR_EOF()
    {
        TCSR ^= 1u << 6u;
    }

    /**
     * Get TCSR's SOF bit.
     */
    inline USIC0_CH0_TCSR_SOF get_TCSR_SOF()
    {
        return USIC0_CH0_TCSR_SOF(TCSR & (1u << 5u));
    }

    /**
     * Set TCSR's SOF bit.
     */
    inline void set_TCSR_SOF()
    {
        TCSR |= 1u << 5u;
    }

    /**
     * Clear TCSR's SOF bit.
     */
    inline void clear_TCSR_SOF()
    {
        TCSR &= ~(1u << 5u);
    }

    /**
     * Toggle TCSR's SOF bit.
     */
    inline void toggle_TCSR_SOF()
    {
        TCSR ^= 1u << 5u;
    }

    /**
     * Get TCSR's HPCMD bit.
     */
    inline USIC0_CH0_TCSR_HPCMD get_TCSR_HPCMD()
    {
        return USIC0_CH0_TCSR_HPCMD(TCSR & (1u << 4u));
    }

    /**
     * Set TCSR's HPCMD bit.
     */
    inline void set_TCSR_HPCMD()
    {
        TCSR |= 1u << 4u;
    }

    /**
     * Clear TCSR's HPCMD bit.
     */
    inline void clear_TCSR_HPCMD()
    {
        TCSR &= ~(1u << 4u);
    }

    /**
     * Toggle TCSR's HPCMD bit.
     */
    inline void toggle_TCSR_HPCMD()
    {
        TCSR ^= 1u << 4u;
    }

    /**
     * Get TCSR's WAMD bit.
     */
    inline USIC0_CH0_TCSR_WAMD get_TCSR_WAMD()
    {
        return USIC0_CH0_TCSR_WAMD(TCSR & (1u << 3u));
    }

    /**
     * Set TCSR's WAMD bit.
     */
    inline void set_TCSR_WAMD()
    {
        TCSR |= 1u << 3u;
    }

    /**
     * Clear TCSR's WAMD bit.
     */
    inline void clear_TCSR_WAMD()
    {
        TCSR &= ~(1u << 3u);
    }

    /**
     * Toggle TCSR's WAMD bit.
     */
    inline void toggle_TCSR_WAMD()
    {
        TCSR ^= 1u << 3u;
    }

    /**
     * Get TCSR's FLEMD bit.
     */
    inline USIC0_CH0_TCSR_FLEMD get_TCSR_FLEMD()
    {
        return USIC0_CH0_TCSR_FLEMD(TCSR & (1u << 2u));
    }

    /**
     * Set TCSR's FLEMD bit.
     */
    inline void set_TCSR_FLEMD()
    {
        TCSR |= 1u << 2u;
    }

    /**
     * Clear TCSR's FLEMD bit.
     */
    inline void clear_TCSR_FLEMD()
    {
        TCSR &= ~(1u << 2u);
    }

    /**
     * Toggle TCSR's FLEMD bit.
     */
    inline void toggle_TCSR_FLEMD()
    {
        TCSR ^= 1u << 2u;
    }

    /**
     * Get TCSR's SELMD bit.
     */
    inline USIC0_CH0_TCSR_SELMD get_TCSR_SELMD()
    {
        return USIC0_CH0_TCSR_SELMD(TCSR & (1u << 1u));
    }

    /**
     * Set TCSR's SELMD bit.
     */
    inline void set_TCSR_SELMD()
    {
        TCSR |= 1u << 1u;
    }

    /**
     * Clear TCSR's SELMD bit.
     */
    inline void clear_TCSR_SELMD()
    {
        TCSR &= ~(1u << 1u);
    }

    /**
     * Toggle TCSR's SELMD bit.
     */
    inline void toggle_TCSR_SELMD()
    {
        TCSR ^= 1u << 1u;
    }

    /**
     * Get TCSR's WLEMD bit.
     */
    inline USIC0_CH0_TCSR_WLEMD get_TCSR_WLEMD()
    {
        return USIC0_CH0_TCSR_WLEMD(TCSR & (1u << 0u));
    }

    /**
     * Set TCSR's WLEMD bit.
     */
    inline void set_TCSR_WLEMD()
    {
        TCSR |= 1u << 0u;
    }

    /**
     * Clear TCSR's WLEMD bit.
     */
    inline void clear_TCSR_WLEMD()
    {
        TCSR &= ~(1u << 0u);
    }

    /**
     * Toggle TCSR's WLEMD bit.
     */
    inline void toggle_TCSR_WLEMD()
    {
        TCSR ^= 1u << 0u;
    }

    /**
     * Get all of TCSR's bit fields.
     */
    inline void get_TCSR(USIC0_CH0_TCSR_TE &TE, USIC0_CH0_TCSR_TVC &TVC, USIC0_CH0_TCSR_TV &TV, USIC0_CH0_TCSR_TSOF &TSOF, USIC0_CH0_TCSR_WA &WA, USIC0_CH0_TCSR_TDVTR &TDVTR, USIC0_CH0_TCSR_TDEN &TDEN, USIC0_CH0_TCSR_TDSSM &TDSSM, USIC0_CH0_TCSR_TDV &TDV, USIC0_CH0_TCSR_EOF &EOF, USIC0_CH0_TCSR_SOF &SOF, USIC0_CH0_TCSR_HPCMD &HPCMD, USIC0_CH0_TCSR_WAMD &WAMD, USIC0_CH0_TCSR_FLEMD &FLEMD, USIC0_CH0_TCSR_SELMD &SELMD, USIC0_CH0_TCSR_WLEMD &WLEMD)
    {
        uint32_t curr = TCSR;

        TE = USIC0_CH0_TCSR_TE(curr & (1u << 28u));
        TVC = USIC0_CH0_TCSR_TVC(curr & (1u << 27u));
        TV = USIC0_CH0_TCSR_TV(curr & (1u << 26u));
        TSOF = USIC0_CH0_TCSR_TSOF(curr & (1u << 24u));
        WA = USIC0_CH0_TCSR_WA(curr & (1u << 13u));
        TDVTR = USIC0_CH0_TCSR_TDVTR(curr & (1u << 12u));
        TDEN = USIC0_CH0_TCSR_TDEN((curr >> 10u) & 0b11u);
        TDSSM = USIC0_CH0_TCSR_TDSSM(curr & (1u << 8u));
        TDV = USIC0_CH0_TCSR_TDV(curr & (1u << 7u));
        EOF = USIC0_CH0_TCSR_EOF(curr & (1u << 6u));
        SOF = USIC0_CH0_TCSR_SOF(curr & (1u << 5u));
        HPCMD = USIC0_CH0_TCSR_HPCMD(curr & (1u << 4u));
        WAMD = USIC0_CH0_TCSR_WAMD(curr & (1u << 3u));
        FLEMD = USIC0_CH0_TCSR_FLEMD(curr & (1u << 2u));
        SELMD = USIC0_CH0_TCSR_SELMD(curr & (1u << 1u));
        WLEMD = USIC0_CH0_TCSR_WLEMD(curr & (1u << 0u));
    }

    /**
     * Set all of TCSR's bit fields.
     */
    inline void set_TCSR(USIC0_CH0_TCSR_WA WA, USIC0_CH0_TCSR_TDVTR TDVTR, USIC0_CH0_TCSR_TDEN TDEN, USIC0_CH0_TCSR_TDSSM TDSSM, USIC0_CH0_TCSR_EOF EOF, USIC0_CH0_TCSR_SOF SOF, USIC0_CH0_TCSR_HPCMD HPCMD, USIC0_CH0_TCSR_WAMD WAMD, USIC0_CH0_TCSR_FLEMD FLEMD, USIC0_CH0_TCSR_SELMD SELMD, USIC0_CH0_TCSR_WLEMD WLEMD)
    {
        uint32_t curr = TCSR;

        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(WA) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(TDVTR) & 0b1u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(TDEN) & 0b11u) << 10u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(TDSSM) & 0b1u) << 8u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(EOF) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(SOF) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(HPCMD) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(WAMD) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(FLEMD) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(SELMD) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(WLEMD) & 0b1u) << 0u;

        TCSR = curr;
    }

    /**
     * Get PCR's CTR31 bit.
     */
    inline bool get_PCR_CTR31()
    {
        return PCR & (1u << 31u);
    }

    /**
     * Set PCR's CTR31 bit.
     */
    inline void set_PCR_CTR31()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's CTR31 bit.
     */
    inline void clear_PCR_CTR31()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's CTR31 bit.
     */
    inline void toggle_PCR_CTR31()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's CTR30 bit.
     */
    inline bool get_PCR_CTR30()
    {
        return PCR & (1u << 30u);
    }

    /**
     * Set PCR's CTR30 bit.
     */
    inline void set_PCR_CTR30()
    {
        PCR |= 1u << 30u;
    }

    /**
     * Clear PCR's CTR30 bit.
     */
    inline void clear_PCR_CTR30()
    {
        PCR &= ~(1u << 30u);
    }

    /**
     * Toggle PCR's CTR30 bit.
     */
    inline void toggle_PCR_CTR30()
    {
        PCR ^= 1u << 30u;
    }

    /**
     * Get PCR's CTR29 bit.
     */
    inline bool get_PCR_CTR29()
    {
        return PCR & (1u << 29u);
    }

    /**
     * Set PCR's CTR29 bit.
     */
    inline void set_PCR_CTR29()
    {
        PCR |= 1u << 29u;
    }

    /**
     * Clear PCR's CTR29 bit.
     */
    inline void clear_PCR_CTR29()
    {
        PCR &= ~(1u << 29u);
    }

    /**
     * Toggle PCR's CTR29 bit.
     */
    inline void toggle_PCR_CTR29()
    {
        PCR ^= 1u << 29u;
    }

    /**
     * Get PCR's CTR28 bit.
     */
    inline bool get_PCR_CTR28()
    {
        return PCR & (1u << 28u);
    }

    /**
     * Set PCR's CTR28 bit.
     */
    inline void set_PCR_CTR28()
    {
        PCR |= 1u << 28u;
    }

    /**
     * Clear PCR's CTR28 bit.
     */
    inline void clear_PCR_CTR28()
    {
        PCR &= ~(1u << 28u);
    }

    /**
     * Toggle PCR's CTR28 bit.
     */
    inline void toggle_PCR_CTR28()
    {
        PCR ^= 1u << 28u;
    }

    /**
     * Get PCR's CTR27 bit.
     */
    inline bool get_PCR_CTR27()
    {
        return PCR & (1u << 27u);
    }

    /**
     * Set PCR's CTR27 bit.
     */
    inline void set_PCR_CTR27()
    {
        PCR |= 1u << 27u;
    }

    /**
     * Clear PCR's CTR27 bit.
     */
    inline void clear_PCR_CTR27()
    {
        PCR &= ~(1u << 27u);
    }

    /**
     * Toggle PCR's CTR27 bit.
     */
    inline void toggle_PCR_CTR27()
    {
        PCR ^= 1u << 27u;
    }

    /**
     * Get PCR's CTR26 bit.
     */
    inline bool get_PCR_CTR26()
    {
        return PCR & (1u << 26u);
    }

    /**
     * Set PCR's CTR26 bit.
     */
    inline void set_PCR_CTR26()
    {
        PCR |= 1u << 26u;
    }

    /**
     * Clear PCR's CTR26 bit.
     */
    inline void clear_PCR_CTR26()
    {
        PCR &= ~(1u << 26u);
    }

    /**
     * Toggle PCR's CTR26 bit.
     */
    inline void toggle_PCR_CTR26()
    {
        PCR ^= 1u << 26u;
    }

    /**
     * Get PCR's CTR25 bit.
     */
    inline bool get_PCR_CTR25()
    {
        return PCR & (1u << 25u);
    }

    /**
     * Set PCR's CTR25 bit.
     */
    inline void set_PCR_CTR25()
    {
        PCR |= 1u << 25u;
    }

    /**
     * Clear PCR's CTR25 bit.
     */
    inline void clear_PCR_CTR25()
    {
        PCR &= ~(1u << 25u);
    }

    /**
     * Toggle PCR's CTR25 bit.
     */
    inline void toggle_PCR_CTR25()
    {
        PCR ^= 1u << 25u;
    }

    /**
     * Get PCR's CTR24 bit.
     */
    inline bool get_PCR_CTR24()
    {
        return PCR & (1u << 24u);
    }

    /**
     * Set PCR's CTR24 bit.
     */
    inline void set_PCR_CTR24()
    {
        PCR |= 1u << 24u;
    }

    /**
     * Clear PCR's CTR24 bit.
     */
    inline void clear_PCR_CTR24()
    {
        PCR &= ~(1u << 24u);
    }

    /**
     * Toggle PCR's CTR24 bit.
     */
    inline void toggle_PCR_CTR24()
    {
        PCR ^= 1u << 24u;
    }

    /**
     * Get PCR's CTR23 bit.
     */
    inline bool get_PCR_CTR23()
    {
        return PCR & (1u << 23u);
    }

    /**
     * Set PCR's CTR23 bit.
     */
    inline void set_PCR_CTR23()
    {
        PCR |= 1u << 23u;
    }

    /**
     * Clear PCR's CTR23 bit.
     */
    inline void clear_PCR_CTR23()
    {
        PCR &= ~(1u << 23u);
    }

    /**
     * Toggle PCR's CTR23 bit.
     */
    inline void toggle_PCR_CTR23()
    {
        PCR ^= 1u << 23u;
    }

    /**
     * Get PCR's CTR22 bit.
     */
    inline bool get_PCR_CTR22()
    {
        return PCR & (1u << 22u);
    }

    /**
     * Set PCR's CTR22 bit.
     */
    inline void set_PCR_CTR22()
    {
        PCR |= 1u << 22u;
    }

    /**
     * Clear PCR's CTR22 bit.
     */
    inline void clear_PCR_CTR22()
    {
        PCR &= ~(1u << 22u);
    }

    /**
     * Toggle PCR's CTR22 bit.
     */
    inline void toggle_PCR_CTR22()
    {
        PCR ^= 1u << 22u;
    }

    /**
     * Get PCR's CTR21 bit.
     */
    inline bool get_PCR_CTR21()
    {
        return PCR & (1u << 21u);
    }

    /**
     * Set PCR's CTR21 bit.
     */
    inline void set_PCR_CTR21()
    {
        PCR |= 1u << 21u;
    }

    /**
     * Clear PCR's CTR21 bit.
     */
    inline void clear_PCR_CTR21()
    {
        PCR &= ~(1u << 21u);
    }

    /**
     * Toggle PCR's CTR21 bit.
     */
    inline void toggle_PCR_CTR21()
    {
        PCR ^= 1u << 21u;
    }

    /**
     * Get PCR's CTR20 bit.
     */
    inline bool get_PCR_CTR20()
    {
        return PCR & (1u << 20u);
    }

    /**
     * Set PCR's CTR20 bit.
     */
    inline void set_PCR_CTR20()
    {
        PCR |= 1u << 20u;
    }

    /**
     * Clear PCR's CTR20 bit.
     */
    inline void clear_PCR_CTR20()
    {
        PCR &= ~(1u << 20u);
    }

    /**
     * Toggle PCR's CTR20 bit.
     */
    inline void toggle_PCR_CTR20()
    {
        PCR ^= 1u << 20u;
    }

    /**
     * Get PCR's CTR19 bit.
     */
    inline bool get_PCR_CTR19()
    {
        return PCR & (1u << 19u);
    }

    /**
     * Set PCR's CTR19 bit.
     */
    inline void set_PCR_CTR19()
    {
        PCR |= 1u << 19u;
    }

    /**
     * Clear PCR's CTR19 bit.
     */
    inline void clear_PCR_CTR19()
    {
        PCR &= ~(1u << 19u);
    }

    /**
     * Toggle PCR's CTR19 bit.
     */
    inline void toggle_PCR_CTR19()
    {
        PCR ^= 1u << 19u;
    }

    /**
     * Get PCR's CTR18 bit.
     */
    inline bool get_PCR_CTR18()
    {
        return PCR & (1u << 18u);
    }

    /**
     * Set PCR's CTR18 bit.
     */
    inline void set_PCR_CTR18()
    {
        PCR |= 1u << 18u;
    }

    /**
     * Clear PCR's CTR18 bit.
     */
    inline void clear_PCR_CTR18()
    {
        PCR &= ~(1u << 18u);
    }

    /**
     * Toggle PCR's CTR18 bit.
     */
    inline void toggle_PCR_CTR18()
    {
        PCR ^= 1u << 18u;
    }

    /**
     * Get PCR's CTR17 bit.
     */
    inline bool get_PCR_CTR17()
    {
        return PCR & (1u << 17u);
    }

    /**
     * Set PCR's CTR17 bit.
     */
    inline void set_PCR_CTR17()
    {
        PCR |= 1u << 17u;
    }

    /**
     * Clear PCR's CTR17 bit.
     */
    inline void clear_PCR_CTR17()
    {
        PCR &= ~(1u << 17u);
    }

    /**
     * Toggle PCR's CTR17 bit.
     */
    inline void toggle_PCR_CTR17()
    {
        PCR ^= 1u << 17u;
    }

    /**
     * Get PCR's CTR16 bit.
     */
    inline bool get_PCR_CTR16()
    {
        return PCR & (1u << 16u);
    }

    /**
     * Set PCR's CTR16 bit.
     */
    inline void set_PCR_CTR16()
    {
        PCR |= 1u << 16u;
    }

    /**
     * Clear PCR's CTR16 bit.
     */
    inline void clear_PCR_CTR16()
    {
        PCR &= ~(1u << 16u);
    }

    /**
     * Toggle PCR's CTR16 bit.
     */
    inline void toggle_PCR_CTR16()
    {
        PCR ^= 1u << 16u;
    }

    /**
     * Get PCR's CTR15 bit.
     */
    inline bool get_PCR_CTR15()
    {
        return PCR & (1u << 15u);
    }

    /**
     * Set PCR's CTR15 bit.
     */
    inline void set_PCR_CTR15()
    {
        PCR |= 1u << 15u;
    }

    /**
     * Clear PCR's CTR15 bit.
     */
    inline void clear_PCR_CTR15()
    {
        PCR &= ~(1u << 15u);
    }

    /**
     * Toggle PCR's CTR15 bit.
     */
    inline void toggle_PCR_CTR15()
    {
        PCR ^= 1u << 15u;
    }

    /**
     * Get PCR's CTR14 bit.
     */
    inline bool get_PCR_CTR14()
    {
        return PCR & (1u << 14u);
    }

    /**
     * Set PCR's CTR14 bit.
     */
    inline void set_PCR_CTR14()
    {
        PCR |= 1u << 14u;
    }

    /**
     * Clear PCR's CTR14 bit.
     */
    inline void clear_PCR_CTR14()
    {
        PCR &= ~(1u << 14u);
    }

    /**
     * Toggle PCR's CTR14 bit.
     */
    inline void toggle_PCR_CTR14()
    {
        PCR ^= 1u << 14u;
    }

    /**
     * Get PCR's CTR13 bit.
     */
    inline bool get_PCR_CTR13()
    {
        return PCR & (1u << 13u);
    }

    /**
     * Set PCR's CTR13 bit.
     */
    inline void set_PCR_CTR13()
    {
        PCR |= 1u << 13u;
    }

    /**
     * Clear PCR's CTR13 bit.
     */
    inline void clear_PCR_CTR13()
    {
        PCR &= ~(1u << 13u);
    }

    /**
     * Toggle PCR's CTR13 bit.
     */
    inline void toggle_PCR_CTR13()
    {
        PCR ^= 1u << 13u;
    }

    /**
     * Get PCR's CTR12 bit.
     */
    inline bool get_PCR_CTR12()
    {
        return PCR & (1u << 12u);
    }

    /**
     * Set PCR's CTR12 bit.
     */
    inline void set_PCR_CTR12()
    {
        PCR |= 1u << 12u;
    }

    /**
     * Clear PCR's CTR12 bit.
     */
    inline void clear_PCR_CTR12()
    {
        PCR &= ~(1u << 12u);
    }

    /**
     * Toggle PCR's CTR12 bit.
     */
    inline void toggle_PCR_CTR12()
    {
        PCR ^= 1u << 12u;
    }

    /**
     * Get PCR's CTR11 bit.
     */
    inline bool get_PCR_CTR11()
    {
        return PCR & (1u << 11u);
    }

    /**
     * Set PCR's CTR11 bit.
     */
    inline void set_PCR_CTR11()
    {
        PCR |= 1u << 11u;
    }

    /**
     * Clear PCR's CTR11 bit.
     */
    inline void clear_PCR_CTR11()
    {
        PCR &= ~(1u << 11u);
    }

    /**
     * Toggle PCR's CTR11 bit.
     */
    inline void toggle_PCR_CTR11()
    {
        PCR ^= 1u << 11u;
    }

    /**
     * Get PCR's CTR10 bit.
     */
    inline bool get_PCR_CTR10()
    {
        return PCR & (1u << 10u);
    }

    /**
     * Set PCR's CTR10 bit.
     */
    inline void set_PCR_CTR10()
    {
        PCR |= 1u << 10u;
    }

    /**
     * Clear PCR's CTR10 bit.
     */
    inline void clear_PCR_CTR10()
    {
        PCR &= ~(1u << 10u);
    }

    /**
     * Toggle PCR's CTR10 bit.
     */
    inline void toggle_PCR_CTR10()
    {
        PCR ^= 1u << 10u;
    }

    /**
     * Get PCR's CTR9 bit.
     */
    inline bool get_PCR_CTR9()
    {
        return PCR & (1u << 9u);
    }

    /**
     * Set PCR's CTR9 bit.
     */
    inline void set_PCR_CTR9()
    {
        PCR |= 1u << 9u;
    }

    /**
     * Clear PCR's CTR9 bit.
     */
    inline void clear_PCR_CTR9()
    {
        PCR &= ~(1u << 9u);
    }

    /**
     * Toggle PCR's CTR9 bit.
     */
    inline void toggle_PCR_CTR9()
    {
        PCR ^= 1u << 9u;
    }

    /**
     * Get PCR's CTR8 bit.
     */
    inline bool get_PCR_CTR8()
    {
        return PCR & (1u << 8u);
    }

    /**
     * Set PCR's CTR8 bit.
     */
    inline void set_PCR_CTR8()
    {
        PCR |= 1u << 8u;
    }

    /**
     * Clear PCR's CTR8 bit.
     */
    inline void clear_PCR_CTR8()
    {
        PCR &= ~(1u << 8u);
    }

    /**
     * Toggle PCR's CTR8 bit.
     */
    inline void toggle_PCR_CTR8()
    {
        PCR ^= 1u << 8u;
    }

    /**
     * Get PCR's CTR7 bit.
     */
    inline bool get_PCR_CTR7()
    {
        return PCR & (1u << 7u);
    }

    /**
     * Set PCR's CTR7 bit.
     */
    inline void set_PCR_CTR7()
    {
        PCR |= 1u << 7u;
    }

    /**
     * Clear PCR's CTR7 bit.
     */
    inline void clear_PCR_CTR7()
    {
        PCR &= ~(1u << 7u);
    }

    /**
     * Toggle PCR's CTR7 bit.
     */
    inline void toggle_PCR_CTR7()
    {
        PCR ^= 1u << 7u;
    }

    /**
     * Get PCR's CTR6 bit.
     */
    inline bool get_PCR_CTR6()
    {
        return PCR & (1u << 6u);
    }

    /**
     * Set PCR's CTR6 bit.
     */
    inline void set_PCR_CTR6()
    {
        PCR |= 1u << 6u;
    }

    /**
     * Clear PCR's CTR6 bit.
     */
    inline void clear_PCR_CTR6()
    {
        PCR &= ~(1u << 6u);
    }

    /**
     * Toggle PCR's CTR6 bit.
     */
    inline void toggle_PCR_CTR6()
    {
        PCR ^= 1u << 6u;
    }

    /**
     * Get PCR's CTR5 bit.
     */
    inline bool get_PCR_CTR5()
    {
        return PCR & (1u << 5u);
    }

    /**
     * Set PCR's CTR5 bit.
     */
    inline void set_PCR_CTR5()
    {
        PCR |= 1u << 5u;
    }

    /**
     * Clear PCR's CTR5 bit.
     */
    inline void clear_PCR_CTR5()
    {
        PCR &= ~(1u << 5u);
    }

    /**
     * Toggle PCR's CTR5 bit.
     */
    inline void toggle_PCR_CTR5()
    {
        PCR ^= 1u << 5u;
    }

    /**
     * Get PCR's CTR4 bit.
     */
    inline bool get_PCR_CTR4()
    {
        return PCR & (1u << 4u);
    }

    /**
     * Set PCR's CTR4 bit.
     */
    inline void set_PCR_CTR4()
    {
        PCR |= 1u << 4u;
    }

    /**
     * Clear PCR's CTR4 bit.
     */
    inline void clear_PCR_CTR4()
    {
        PCR &= ~(1u << 4u);
    }

    /**
     * Toggle PCR's CTR4 bit.
     */
    inline void toggle_PCR_CTR4()
    {
        PCR ^= 1u << 4u;
    }

    /**
     * Get PCR's CTR3 bit.
     */
    inline bool get_PCR_CTR3()
    {
        return PCR & (1u << 3u);
    }

    /**
     * Set PCR's CTR3 bit.
     */
    inline void set_PCR_CTR3()
    {
        PCR |= 1u << 3u;
    }

    /**
     * Clear PCR's CTR3 bit.
     */
    inline void clear_PCR_CTR3()
    {
        PCR &= ~(1u << 3u);
    }

    /**
     * Toggle PCR's CTR3 bit.
     */
    inline void toggle_PCR_CTR3()
    {
        PCR ^= 1u << 3u;
    }

    /**
     * Get PCR's CTR2 bit.
     */
    inline bool get_PCR_CTR2()
    {
        return PCR & (1u << 2u);
    }

    /**
     * Set PCR's CTR2 bit.
     */
    inline void set_PCR_CTR2()
    {
        PCR |= 1u << 2u;
    }

    /**
     * Clear PCR's CTR2 bit.
     */
    inline void clear_PCR_CTR2()
    {
        PCR &= ~(1u << 2u);
    }

    /**
     * Toggle PCR's CTR2 bit.
     */
    inline void toggle_PCR_CTR2()
    {
        PCR ^= 1u << 2u;
    }

    /**
     * Get PCR's CTR1 bit.
     */
    inline bool get_PCR_CTR1()
    {
        return PCR & (1u << 1u);
    }

    /**
     * Set PCR's CTR1 bit.
     */
    inline void set_PCR_CTR1()
    {
        PCR |= 1u << 1u;
    }

    /**
     * Clear PCR's CTR1 bit.
     */
    inline void clear_PCR_CTR1()
    {
        PCR &= ~(1u << 1u);
    }

    /**
     * Toggle PCR's CTR1 bit.
     */
    inline void toggle_PCR_CTR1()
    {
        PCR ^= 1u << 1u;
    }

    /**
     * Get PCR's CTR0 bit.
     */
    inline bool get_PCR_CTR0()
    {
        return PCR & (1u << 0u);
    }

    /**
     * Set PCR's CTR0 bit.
     */
    inline void set_PCR_CTR0()
    {
        PCR |= 1u << 0u;
    }

    /**
     * Clear PCR's CTR0 bit.
     */
    inline void clear_PCR_CTR0()
    {
        PCR &= ~(1u << 0u);
    }

    /**
     * Toggle PCR's CTR0 bit.
     */
    inline void toggle_PCR_CTR0()
    {
        PCR ^= 1u << 0u;
    }

    /**
     * Get all of PCR's bit fields.
     */
    inline void get_PCR(bool &CTR31, bool &CTR30, bool &CTR29, bool &CTR28, bool &CTR27, bool &CTR26, bool &CTR25, bool &CTR24, bool &CTR23, bool &CTR22, bool &CTR21, bool &CTR20, bool &CTR19, bool &CTR18, bool &CTR17, bool &CTR16, bool &CTR15, bool &CTR14, bool &CTR13, bool &CTR12, bool &CTR11, bool &CTR10, bool &CTR9, bool &CTR8, bool &CTR7, bool &CTR6, bool &CTR5, bool &CTR4, bool &CTR3, bool &CTR2, bool &CTR1, bool &CTR0)
    {
        uint32_t curr = PCR;

        CTR31 = curr & (1u << 31u);
        CTR30 = curr & (1u << 30u);
        CTR29 = curr & (1u << 29u);
        CTR28 = curr & (1u << 28u);
        CTR27 = curr & (1u << 27u);
        CTR26 = curr & (1u << 26u);
        CTR25 = curr & (1u << 25u);
        CTR24 = curr & (1u << 24u);
        CTR23 = curr & (1u << 23u);
        CTR22 = curr & (1u << 22u);
        CTR21 = curr & (1u << 21u);
        CTR20 = curr & (1u << 20u);
        CTR19 = curr & (1u << 19u);
        CTR18 = curr & (1u << 18u);
        CTR17 = curr & (1u << 17u);
        CTR16 = curr & (1u << 16u);
        CTR15 = curr & (1u << 15u);
        CTR14 = curr & (1u << 14u);
        CTR13 = curr & (1u << 13u);
        CTR12 = curr & (1u << 12u);
        CTR11 = curr & (1u << 11u);
        CTR10 = curr & (1u << 10u);
        CTR9 = curr & (1u << 9u);
        CTR8 = curr & (1u << 8u);
        CTR7 = curr & (1u << 7u);
        CTR6 = curr & (1u << 6u);
        CTR5 = curr & (1u << 5u);
        CTR4 = curr & (1u << 4u);
        CTR3 = curr & (1u << 3u);
        CTR2 = curr & (1u << 2u);
        CTR1 = curr & (1u << 1u);
        CTR0 = curr & (1u << 0u);
    }

    /**
     * Set all of PCR's bit fields.
     */
    inline void set_PCR(bool CTR31, bool CTR30, bool CTR29, bool CTR28, bool CTR27, bool CTR26, bool CTR25, bool CTR24, bool CTR23, bool CTR22, bool CTR21, bool CTR20, bool CTR19, bool CTR18, bool CTR17, bool CTR16, bool CTR15, bool CTR14, bool CTR13, bool CTR12, bool CTR11, bool CTR10, bool CTR9, bool CTR8, bool CTR7, bool CTR6, bool CTR5, bool CTR4, bool CTR3, bool CTR2, bool CTR1, bool CTR0)
    {
        uint32_t curr = PCR;

        curr &= ~(0b1u << 31u);
        curr |= (CTR31 & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (CTR30 & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (CTR29 & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (CTR28 & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (CTR27 & 0b1u) << 27u;
        curr &= ~(0b1u << 26u);
        curr |= (CTR26 & 0b1u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (CTR25 & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (CTR24 & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (CTR23 & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (CTR22 & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (CTR21 & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (CTR20 & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (CTR19 & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (CTR18 & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (CTR17 & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (CTR16 & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (CTR15 & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (CTR14 & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (CTR13 & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (CTR12 & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (CTR11 & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (CTR10 & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (CTR9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (CTR8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (CTR7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (CTR6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (CTR5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (CTR4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CTR3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CTR2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (CTR1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (CTR0 & 0b1u) << 0u;

        PCR = curr;
    }

    /**
     * Get PCR's MCLK bit.
     */
    inline USIC0_CH0_PCR_ASCMode_MCLK get_PCR_ASCMode_MCLK()
    {
        return USIC0_CH0_PCR_ASCMode_MCLK(PCR_ASCMode & (1u << 31u));
    }

    /**
     * Set PCR's MCLK bit.
     */
    inline void set_PCR_ASCMode_MCLK()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's MCLK bit.
     */
    inline void clear_PCR_ASCMode_MCLK()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's MCLK bit.
     */
    inline void toggle_PCR_ASCMode_MCLK()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's TSTEN bit.
     */
    inline USIC0_CH0_PCR_ASCMode_TSTEN get_PCR_ASCMode_TSTEN()
    {
        return USIC0_CH0_PCR_ASCMode_TSTEN(PCR_ASCMode & (1u << 17u));
    }

    /**
     * Set PCR's TSTEN bit.
     */
    inline void set_PCR_ASCMode_TSTEN()
    {
        PCR |= 1u << 17u;
    }

    /**
     * Clear PCR's TSTEN bit.
     */
    inline void clear_PCR_ASCMode_TSTEN()
    {
        PCR &= ~(1u << 17u);
    }

    /**
     * Toggle PCR's TSTEN bit.
     */
    inline void toggle_PCR_ASCMode_TSTEN()
    {
        PCR ^= 1u << 17u;
    }

    /**
     * Get PCR's RSTEN bit.
     */
    inline USIC0_CH0_PCR_ASCMode_RSTEN get_PCR_ASCMode_RSTEN()
    {
        return USIC0_CH0_PCR_ASCMode_RSTEN(PCR_ASCMode & (1u << 16u));
    }

    /**
     * Set PCR's RSTEN bit.
     */
    inline void set_PCR_ASCMode_RSTEN()
    {
        PCR |= 1u << 16u;
    }

    /**
     * Clear PCR's RSTEN bit.
     */
    inline void clear_PCR_ASCMode_RSTEN()
    {
        PCR &= ~(1u << 16u);
    }

    /**
     * Toggle PCR's RSTEN bit.
     */
    inline void toggle_PCR_ASCMode_RSTEN()
    {
        PCR ^= 1u << 16u;
    }

    /**
     * Get PCR's PL field.
     */
    inline USIC0_CH0_PCR_ASCMode_PL get_PCR_ASCMode_PL()
    {
        return USIC0_CH0_PCR_ASCMode_PL((PCR_ASCMode >> 13u) & 0b111u);
    }

    /**
     * Set PCR's PL field.
     */
    inline void set_PCR_ASCMode_PL(USIC0_CH0_PCR_ASCMode_PL value)
    {
        uint32_t curr = PCR_ASCMode;

        curr &= ~(0b111u << 13u);
        curr |= (std::to_underlying(value) & 0b111u) << 13u;

        PCR_ASCMode = curr;
    }

    /**
     * Get PCR's SP field.
     */
    inline uint8_t get_PCR_ASCMode_SP()
    {
        return (PCR_ASCMode >> 8u) & 0b11111u;
    }

    /**
     * Set PCR's SP field.
     */
    inline void set_PCR_ASCMode_SP(uint8_t value)
    {
        uint32_t curr = PCR_ASCMode;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        PCR_ASCMode = curr;
    }

    /**
     * Get PCR's FFIEN bit.
     */
    inline USIC0_CH0_PCR_ASCMode_FFIEN get_PCR_ASCMode_FFIEN()
    {
        return USIC0_CH0_PCR_ASCMode_FFIEN(PCR_ASCMode & (1u << 7u));
    }

    /**
     * Set PCR's FFIEN bit.
     */
    inline void set_PCR_ASCMode_FFIEN()
    {
        PCR |= 1u << 7u;
    }

    /**
     * Clear PCR's FFIEN bit.
     */
    inline void clear_PCR_ASCMode_FFIEN()
    {
        PCR &= ~(1u << 7u);
    }

    /**
     * Toggle PCR's FFIEN bit.
     */
    inline void toggle_PCR_ASCMode_FFIEN()
    {
        PCR ^= 1u << 7u;
    }

    /**
     * Get PCR's FEIEN bit.
     */
    inline USIC0_CH0_PCR_ASCMode_FEIEN get_PCR_ASCMode_FEIEN()
    {
        return USIC0_CH0_PCR_ASCMode_FEIEN(PCR_ASCMode & (1u << 6u));
    }

    /**
     * Set PCR's FEIEN bit.
     */
    inline void set_PCR_ASCMode_FEIEN()
    {
        PCR |= 1u << 6u;
    }

    /**
     * Clear PCR's FEIEN bit.
     */
    inline void clear_PCR_ASCMode_FEIEN()
    {
        PCR &= ~(1u << 6u);
    }

    /**
     * Toggle PCR's FEIEN bit.
     */
    inline void toggle_PCR_ASCMode_FEIEN()
    {
        PCR ^= 1u << 6u;
    }

    /**
     * Get PCR's RNIEN bit.
     */
    inline USIC0_CH0_PCR_ASCMode_RNIEN get_PCR_ASCMode_RNIEN()
    {
        return USIC0_CH0_PCR_ASCMode_RNIEN(PCR_ASCMode & (1u << 5u));
    }

    /**
     * Set PCR's RNIEN bit.
     */
    inline void set_PCR_ASCMode_RNIEN()
    {
        PCR |= 1u << 5u;
    }

    /**
     * Clear PCR's RNIEN bit.
     */
    inline void clear_PCR_ASCMode_RNIEN()
    {
        PCR &= ~(1u << 5u);
    }

    /**
     * Toggle PCR's RNIEN bit.
     */
    inline void toggle_PCR_ASCMode_RNIEN()
    {
        PCR ^= 1u << 5u;
    }

    /**
     * Get PCR's CDEN bit.
     */
    inline USIC0_CH0_PCR_ASCMode_CDEN get_PCR_ASCMode_CDEN()
    {
        return USIC0_CH0_PCR_ASCMode_CDEN(PCR_ASCMode & (1u << 4u));
    }

    /**
     * Set PCR's CDEN bit.
     */
    inline void set_PCR_ASCMode_CDEN()
    {
        PCR |= 1u << 4u;
    }

    /**
     * Clear PCR's CDEN bit.
     */
    inline void clear_PCR_ASCMode_CDEN()
    {
        PCR &= ~(1u << 4u);
    }

    /**
     * Toggle PCR's CDEN bit.
     */
    inline void toggle_PCR_ASCMode_CDEN()
    {
        PCR ^= 1u << 4u;
    }

    /**
     * Get PCR's SBIEN bit.
     */
    inline USIC0_CH0_PCR_ASCMode_SBIEN get_PCR_ASCMode_SBIEN()
    {
        return USIC0_CH0_PCR_ASCMode_SBIEN(PCR_ASCMode & (1u << 3u));
    }

    /**
     * Set PCR's SBIEN bit.
     */
    inline void set_PCR_ASCMode_SBIEN()
    {
        PCR |= 1u << 3u;
    }

    /**
     * Clear PCR's SBIEN bit.
     */
    inline void clear_PCR_ASCMode_SBIEN()
    {
        PCR &= ~(1u << 3u);
    }

    /**
     * Toggle PCR's SBIEN bit.
     */
    inline void toggle_PCR_ASCMode_SBIEN()
    {
        PCR ^= 1u << 3u;
    }

    /**
     * Get PCR's IDM bit.
     */
    inline USIC0_CH0_PCR_ASCMode_IDM get_PCR_ASCMode_IDM()
    {
        return USIC0_CH0_PCR_ASCMode_IDM(PCR_ASCMode & (1u << 2u));
    }

    /**
     * Set PCR's IDM bit.
     */
    inline void set_PCR_ASCMode_IDM()
    {
        PCR |= 1u << 2u;
    }

    /**
     * Clear PCR's IDM bit.
     */
    inline void clear_PCR_ASCMode_IDM()
    {
        PCR &= ~(1u << 2u);
    }

    /**
     * Toggle PCR's IDM bit.
     */
    inline void toggle_PCR_ASCMode_IDM()
    {
        PCR ^= 1u << 2u;
    }

    /**
     * Get PCR's STPB bit.
     */
    inline USIC0_CH0_PCR_ASCMode_STPB get_PCR_ASCMode_STPB()
    {
        return USIC0_CH0_PCR_ASCMode_STPB(PCR_ASCMode & (1u << 1u));
    }

    /**
     * Set PCR's STPB bit.
     */
    inline void set_PCR_ASCMode_STPB()
    {
        PCR |= 1u << 1u;
    }

    /**
     * Clear PCR's STPB bit.
     */
    inline void clear_PCR_ASCMode_STPB()
    {
        PCR &= ~(1u << 1u);
    }

    /**
     * Toggle PCR's STPB bit.
     */
    inline void toggle_PCR_ASCMode_STPB()
    {
        PCR ^= 1u << 1u;
    }

    /**
     * Get PCR's SMD bit.
     */
    inline USIC0_CH0_PCR_ASCMode_SMD get_PCR_ASCMode_SMD()
    {
        return USIC0_CH0_PCR_ASCMode_SMD(PCR_ASCMode & (1u << 0u));
    }

    /**
     * Set PCR's SMD bit.
     */
    inline void set_PCR_ASCMode_SMD()
    {
        PCR |= 1u << 0u;
    }

    /**
     * Clear PCR's SMD bit.
     */
    inline void clear_PCR_ASCMode_SMD()
    {
        PCR &= ~(1u << 0u);
    }

    /**
     * Toggle PCR's SMD bit.
     */
    inline void toggle_PCR_ASCMode_SMD()
    {
        PCR ^= 1u << 0u;
    }

    /**
     * Get all of PCR_ASCMode's bit fields.
     */
    inline void get_PCR_ASCMode(USIC0_CH0_PCR_ASCMode_MCLK &MCLK, USIC0_CH0_PCR_ASCMode_TSTEN &TSTEN, USIC0_CH0_PCR_ASCMode_RSTEN &RSTEN, USIC0_CH0_PCR_ASCMode_PL &PL, uint8_t &SP, USIC0_CH0_PCR_ASCMode_FFIEN &FFIEN, USIC0_CH0_PCR_ASCMode_FEIEN &FEIEN, USIC0_CH0_PCR_ASCMode_RNIEN &RNIEN, USIC0_CH0_PCR_ASCMode_CDEN &CDEN, USIC0_CH0_PCR_ASCMode_SBIEN &SBIEN, USIC0_CH0_PCR_ASCMode_IDM &IDM, USIC0_CH0_PCR_ASCMode_STPB &STPB, USIC0_CH0_PCR_ASCMode_SMD &SMD)
    {
        uint32_t curr = PCR_ASCMode;

        MCLK = USIC0_CH0_PCR_ASCMode_MCLK(curr & (1u << 31u));
        TSTEN = USIC0_CH0_PCR_ASCMode_TSTEN(curr & (1u << 17u));
        RSTEN = USIC0_CH0_PCR_ASCMode_RSTEN(curr & (1u << 16u));
        PL = USIC0_CH0_PCR_ASCMode_PL((curr >> 13u) & 0b111u);
        SP = (curr >> 8u) & 0b11111u;
        FFIEN = USIC0_CH0_PCR_ASCMode_FFIEN(curr & (1u << 7u));
        FEIEN = USIC0_CH0_PCR_ASCMode_FEIEN(curr & (1u << 6u));
        RNIEN = USIC0_CH0_PCR_ASCMode_RNIEN(curr & (1u << 5u));
        CDEN = USIC0_CH0_PCR_ASCMode_CDEN(curr & (1u << 4u));
        SBIEN = USIC0_CH0_PCR_ASCMode_SBIEN(curr & (1u << 3u));
        IDM = USIC0_CH0_PCR_ASCMode_IDM(curr & (1u << 2u));
        STPB = USIC0_CH0_PCR_ASCMode_STPB(curr & (1u << 1u));
        SMD = USIC0_CH0_PCR_ASCMode_SMD(curr & (1u << 0u));
    }

    /**
     * Set all of PCR_ASCMode's bit fields.
     */
    inline void set_PCR_ASCMode(USIC0_CH0_PCR_ASCMode_MCLK MCLK, USIC0_CH0_PCR_ASCMode_TSTEN TSTEN, USIC0_CH0_PCR_ASCMode_RSTEN RSTEN, USIC0_CH0_PCR_ASCMode_PL PL, uint8_t SP, USIC0_CH0_PCR_ASCMode_FFIEN FFIEN, USIC0_CH0_PCR_ASCMode_FEIEN FEIEN, USIC0_CH0_PCR_ASCMode_RNIEN RNIEN, USIC0_CH0_PCR_ASCMode_CDEN CDEN, USIC0_CH0_PCR_ASCMode_SBIEN SBIEN, USIC0_CH0_PCR_ASCMode_IDM IDM, USIC0_CH0_PCR_ASCMode_STPB STPB, USIC0_CH0_PCR_ASCMode_SMD SMD)
    {
        uint32_t curr = PCR_ASCMode;

        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(MCLK) & 0b1u) << 31u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(TSTEN) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(RSTEN) & 0b1u) << 16u;
        curr &= ~(0b111u << 13u);
        curr |= (std::to_underlying(PL) & 0b111u) << 13u;
        curr &= ~(0b11111u << 8u);
        curr |= (SP & 0b11111u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(FFIEN) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(FEIEN) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(RNIEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(CDEN) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(SBIEN) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(IDM) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(STPB) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(SMD) & 0b1u) << 0u;

        PCR_ASCMode = curr;
    }

    /**
     * Get PCR's MCLK bit.
     */
    inline USIC0_CH0_PCR_SSCMode_MCLK get_PCR_SSCMode_MCLK()
    {
        return USIC0_CH0_PCR_SSCMode_MCLK(PCR_SSCMode & (1u << 31u));
    }

    /**
     * Set PCR's MCLK bit.
     */
    inline void set_PCR_SSCMode_MCLK()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's MCLK bit.
     */
    inline void clear_PCR_SSCMode_MCLK()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's MCLK bit.
     */
    inline void toggle_PCR_SSCMode_MCLK()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's SLPHSEL bit.
     */
    inline USIC0_CH0_PCR_SSCMode_SLPHSEL get_PCR_SSCMode_SLPHSEL()
    {
        return USIC0_CH0_PCR_SSCMode_SLPHSEL(PCR_SSCMode & (1u << 25u));
    }

    /**
     * Set PCR's SLPHSEL bit.
     */
    inline void set_PCR_SSCMode_SLPHSEL()
    {
        PCR |= 1u << 25u;
    }

    /**
     * Clear PCR's SLPHSEL bit.
     */
    inline void clear_PCR_SSCMode_SLPHSEL()
    {
        PCR &= ~(1u << 25u);
    }

    /**
     * Toggle PCR's SLPHSEL bit.
     */
    inline void toggle_PCR_SSCMode_SLPHSEL()
    {
        PCR ^= 1u << 25u;
    }

    /**
     * Get PCR's TIWEN bit.
     */
    inline USIC0_CH0_PCR_SSCMode_TIWEN get_PCR_SSCMode_TIWEN()
    {
        return USIC0_CH0_PCR_SSCMode_TIWEN(PCR_SSCMode & (1u << 24u));
    }

    /**
     * Set PCR's TIWEN bit.
     */
    inline void set_PCR_SSCMode_TIWEN()
    {
        PCR |= 1u << 24u;
    }

    /**
     * Clear PCR's TIWEN bit.
     */
    inline void clear_PCR_SSCMode_TIWEN()
    {
        PCR &= ~(1u << 24u);
    }

    /**
     * Toggle PCR's TIWEN bit.
     */
    inline void toggle_PCR_SSCMode_TIWEN()
    {
        PCR ^= 1u << 24u;
    }

    /**
     * Get PCR's SELO field.
     */
    inline USIC0_CH0_PCR_SSCMode_SELO get_PCR_SSCMode_SELO()
    {
        return USIC0_CH0_PCR_SSCMode_SELO((PCR_SSCMode >> 16u) & 0b11111111u);
    }

    /**
     * Set PCR's SELO field.
     */
    inline void set_PCR_SSCMode_SELO(USIC0_CH0_PCR_SSCMode_SELO value)
    {
        uint32_t curr = PCR_SSCMode;

        curr &= ~(0b11111111u << 16u);
        curr |= (std::to_underlying(value) & 0b11111111u) << 16u;

        PCR_SSCMode = curr;
    }

    /**
     * Get PCR's DX2TIEN bit.
     */
    inline USIC0_CH0_PCR_SSCMode_DX2TIEN get_PCR_SSCMode_DX2TIEN()
    {
        return USIC0_CH0_PCR_SSCMode_DX2TIEN(PCR_SSCMode & (1u << 15u));
    }

    /**
     * Set PCR's DX2TIEN bit.
     */
    inline void set_PCR_SSCMode_DX2TIEN()
    {
        PCR |= 1u << 15u;
    }

    /**
     * Clear PCR's DX2TIEN bit.
     */
    inline void clear_PCR_SSCMode_DX2TIEN()
    {
        PCR &= ~(1u << 15u);
    }

    /**
     * Toggle PCR's DX2TIEN bit.
     */
    inline void toggle_PCR_SSCMode_DX2TIEN()
    {
        PCR ^= 1u << 15u;
    }

    /**
     * Get PCR's MSLSIEN bit.
     */
    inline USIC0_CH0_PCR_SSCMode_MSLSIEN get_PCR_SSCMode_MSLSIEN()
    {
        return USIC0_CH0_PCR_SSCMode_MSLSIEN(PCR_SSCMode & (1u << 14u));
    }

    /**
     * Set PCR's MSLSIEN bit.
     */
    inline void set_PCR_SSCMode_MSLSIEN()
    {
        PCR |= 1u << 14u;
    }

    /**
     * Clear PCR's MSLSIEN bit.
     */
    inline void clear_PCR_SSCMode_MSLSIEN()
    {
        PCR &= ~(1u << 14u);
    }

    /**
     * Toggle PCR's MSLSIEN bit.
     */
    inline void toggle_PCR_SSCMode_MSLSIEN()
    {
        PCR ^= 1u << 14u;
    }

    /**
     * Get PCR's PARIEN bit.
     */
    inline USIC0_CH0_PCR_SSCMode_PARIEN get_PCR_SSCMode_PARIEN()
    {
        return USIC0_CH0_PCR_SSCMode_PARIEN(PCR_SSCMode & (1u << 13u));
    }

    /**
     * Set PCR's PARIEN bit.
     */
    inline void set_PCR_SSCMode_PARIEN()
    {
        PCR |= 1u << 13u;
    }

    /**
     * Clear PCR's PARIEN bit.
     */
    inline void clear_PCR_SSCMode_PARIEN()
    {
        PCR &= ~(1u << 13u);
    }

    /**
     * Toggle PCR's PARIEN bit.
     */
    inline void toggle_PCR_SSCMode_PARIEN()
    {
        PCR ^= 1u << 13u;
    }

    /**
     * Get PCR's DCTQ1 field.
     */
    inline uint8_t get_PCR_SSCMode_DCTQ1()
    {
        return (PCR_SSCMode >> 8u) & 0b11111u;
    }

    /**
     * Set PCR's DCTQ1 field.
     */
    inline void set_PCR_SSCMode_DCTQ1(uint8_t value)
    {
        uint32_t curr = PCR_SSCMode;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        PCR_SSCMode = curr;
    }

    /**
     * Get PCR's PCTQ1 field.
     */
    inline uint8_t get_PCR_SSCMode_PCTQ1()
    {
        return (PCR_SSCMode >> 6u) & 0b11u;
    }

    /**
     * Set PCR's PCTQ1 field.
     */
    inline void set_PCR_SSCMode_PCTQ1(uint8_t value)
    {
        uint32_t curr = PCR_SSCMode;

        curr &= ~(0b11u << 6u);
        curr |= (value & 0b11u) << 6u;

        PCR_SSCMode = curr;
    }

    /**
     * Get PCR's CTQSEL1 field.
     */
    inline USIC0_CH0_PCR_SSCMode_CTQSEL1 get_PCR_SSCMode_CTQSEL1()
    {
        return USIC0_CH0_PCR_SSCMode_CTQSEL1((PCR_SSCMode >> 4u) & 0b11u);
    }

    /**
     * Set PCR's CTQSEL1 field.
     */
    inline void set_PCR_SSCMode_CTQSEL1(USIC0_CH0_PCR_SSCMode_CTQSEL1 value)
    {
        uint32_t curr = PCR_SSCMode;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        PCR_SSCMode = curr;
    }

    /**
     * Get PCR's FEM bit.
     */
    inline USIC0_CH0_PCR_SSCMode_FEM get_PCR_SSCMode_FEM()
    {
        return USIC0_CH0_PCR_SSCMode_FEM(PCR_SSCMode & (1u << 3u));
    }

    /**
     * Set PCR's FEM bit.
     */
    inline void set_PCR_SSCMode_FEM()
    {
        PCR |= 1u << 3u;
    }

    /**
     * Clear PCR's FEM bit.
     */
    inline void clear_PCR_SSCMode_FEM()
    {
        PCR &= ~(1u << 3u);
    }

    /**
     * Toggle PCR's FEM bit.
     */
    inline void toggle_PCR_SSCMode_FEM()
    {
        PCR ^= 1u << 3u;
    }

    /**
     * Get PCR's SELINV bit.
     */
    inline USIC0_CH0_PCR_SSCMode_SELINV get_PCR_SSCMode_SELINV()
    {
        return USIC0_CH0_PCR_SSCMode_SELINV(PCR_SSCMode & (1u << 2u));
    }

    /**
     * Set PCR's SELINV bit.
     */
    inline void set_PCR_SSCMode_SELINV()
    {
        PCR |= 1u << 2u;
    }

    /**
     * Clear PCR's SELINV bit.
     */
    inline void clear_PCR_SSCMode_SELINV()
    {
        PCR &= ~(1u << 2u);
    }

    /**
     * Toggle PCR's SELINV bit.
     */
    inline void toggle_PCR_SSCMode_SELINV()
    {
        PCR ^= 1u << 2u;
    }

    /**
     * Get PCR's SELCTR bit.
     */
    inline USIC0_CH0_PCR_SSCMode_SELCTR get_PCR_SSCMode_SELCTR()
    {
        return USIC0_CH0_PCR_SSCMode_SELCTR(PCR_SSCMode & (1u << 1u));
    }

    /**
     * Set PCR's SELCTR bit.
     */
    inline void set_PCR_SSCMode_SELCTR()
    {
        PCR |= 1u << 1u;
    }

    /**
     * Clear PCR's SELCTR bit.
     */
    inline void clear_PCR_SSCMode_SELCTR()
    {
        PCR &= ~(1u << 1u);
    }

    /**
     * Toggle PCR's SELCTR bit.
     */
    inline void toggle_PCR_SSCMode_SELCTR()
    {
        PCR ^= 1u << 1u;
    }

    /**
     * Get PCR's MSLSEN bit.
     */
    inline USIC0_CH0_PCR_SSCMode_MSLSEN get_PCR_SSCMode_MSLSEN()
    {
        return USIC0_CH0_PCR_SSCMode_MSLSEN(PCR_SSCMode & (1u << 0u));
    }

    /**
     * Set PCR's MSLSEN bit.
     */
    inline void set_PCR_SSCMode_MSLSEN()
    {
        PCR |= 1u << 0u;
    }

    /**
     * Clear PCR's MSLSEN bit.
     */
    inline void clear_PCR_SSCMode_MSLSEN()
    {
        PCR &= ~(1u << 0u);
    }

    /**
     * Toggle PCR's MSLSEN bit.
     */
    inline void toggle_PCR_SSCMode_MSLSEN()
    {
        PCR ^= 1u << 0u;
    }

    /**
     * Get all of PCR_SSCMode's bit fields.
     */
    inline void get_PCR_SSCMode(USIC0_CH0_PCR_SSCMode_MCLK &MCLK, USIC0_CH0_PCR_SSCMode_SLPHSEL &SLPHSEL, USIC0_CH0_PCR_SSCMode_TIWEN &TIWEN, USIC0_CH0_PCR_SSCMode_SELO &SELO, USIC0_CH0_PCR_SSCMode_DX2TIEN &DX2TIEN, USIC0_CH0_PCR_SSCMode_MSLSIEN &MSLSIEN, USIC0_CH0_PCR_SSCMode_PARIEN &PARIEN, uint8_t &DCTQ1, uint8_t &PCTQ1, USIC0_CH0_PCR_SSCMode_CTQSEL1 &CTQSEL1, USIC0_CH0_PCR_SSCMode_FEM &FEM, USIC0_CH0_PCR_SSCMode_SELINV &SELINV, USIC0_CH0_PCR_SSCMode_SELCTR &SELCTR, USIC0_CH0_PCR_SSCMode_MSLSEN &MSLSEN)
    {
        uint32_t curr = PCR_SSCMode;

        MCLK = USIC0_CH0_PCR_SSCMode_MCLK(curr & (1u << 31u));
        SLPHSEL = USIC0_CH0_PCR_SSCMode_SLPHSEL(curr & (1u << 25u));
        TIWEN = USIC0_CH0_PCR_SSCMode_TIWEN(curr & (1u << 24u));
        SELO = USIC0_CH0_PCR_SSCMode_SELO((curr >> 16u) & 0b11111111u);
        DX2TIEN = USIC0_CH0_PCR_SSCMode_DX2TIEN(curr & (1u << 15u));
        MSLSIEN = USIC0_CH0_PCR_SSCMode_MSLSIEN(curr & (1u << 14u));
        PARIEN = USIC0_CH0_PCR_SSCMode_PARIEN(curr & (1u << 13u));
        DCTQ1 = (curr >> 8u) & 0b11111u;
        PCTQ1 = (curr >> 6u) & 0b11u;
        CTQSEL1 = USIC0_CH0_PCR_SSCMode_CTQSEL1((curr >> 4u) & 0b11u);
        FEM = USIC0_CH0_PCR_SSCMode_FEM(curr & (1u << 3u));
        SELINV = USIC0_CH0_PCR_SSCMode_SELINV(curr & (1u << 2u));
        SELCTR = USIC0_CH0_PCR_SSCMode_SELCTR(curr & (1u << 1u));
        MSLSEN = USIC0_CH0_PCR_SSCMode_MSLSEN(curr & (1u << 0u));
    }

    /**
     * Set all of PCR_SSCMode's bit fields.
     */
    inline void set_PCR_SSCMode(USIC0_CH0_PCR_SSCMode_MCLK MCLK, USIC0_CH0_PCR_SSCMode_SLPHSEL SLPHSEL, USIC0_CH0_PCR_SSCMode_TIWEN TIWEN, USIC0_CH0_PCR_SSCMode_SELO SELO, USIC0_CH0_PCR_SSCMode_DX2TIEN DX2TIEN, USIC0_CH0_PCR_SSCMode_MSLSIEN MSLSIEN, USIC0_CH0_PCR_SSCMode_PARIEN PARIEN, uint8_t DCTQ1, uint8_t PCTQ1, USIC0_CH0_PCR_SSCMode_CTQSEL1 CTQSEL1, USIC0_CH0_PCR_SSCMode_FEM FEM, USIC0_CH0_PCR_SSCMode_SELINV SELINV, USIC0_CH0_PCR_SSCMode_SELCTR SELCTR, USIC0_CH0_PCR_SSCMode_MSLSEN MSLSEN)
    {
        uint32_t curr = PCR_SSCMode;

        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(MCLK) & 0b1u) << 31u;
        curr &= ~(0b1u << 25u);
        curr |= (std::to_underlying(SLPHSEL) & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (std::to_underlying(TIWEN) & 0b1u) << 24u;
        curr &= ~(0b11111111u << 16u);
        curr |= (std::to_underlying(SELO) & 0b11111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(DX2TIEN) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(MSLSIEN) & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(PARIEN) & 0b1u) << 13u;
        curr &= ~(0b11111u << 8u);
        curr |= (DCTQ1 & 0b11111u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (PCTQ1 & 0b11u) << 6u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(CTQSEL1) & 0b11u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(FEM) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(SELINV) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(SELCTR) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(MSLSEN) & 0b1u) << 0u;

        PCR_SSCMode = curr;
    }

    /**
     * Get PCR's MCLK bit.
     */
    inline USIC0_CH0_PCR_IICMode_MCLK get_PCR_IICMode_MCLK()
    {
        return USIC0_CH0_PCR_IICMode_MCLK(PCR_IICMode & (1u << 31u));
    }

    /**
     * Set PCR's MCLK bit.
     */
    inline void set_PCR_IICMode_MCLK()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's MCLK bit.
     */
    inline void clear_PCR_IICMode_MCLK()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's MCLK bit.
     */
    inline void toggle_PCR_IICMode_MCLK()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's ACKIEN bit.
     */
    inline USIC0_CH0_PCR_IICMode_ACKIEN get_PCR_IICMode_ACKIEN()
    {
        return USIC0_CH0_PCR_IICMode_ACKIEN(PCR_IICMode & (1u << 30u));
    }

    /**
     * Set PCR's ACKIEN bit.
     */
    inline void set_PCR_IICMode_ACKIEN()
    {
        PCR |= 1u << 30u;
    }

    /**
     * Clear PCR's ACKIEN bit.
     */
    inline void clear_PCR_IICMode_ACKIEN()
    {
        PCR &= ~(1u << 30u);
    }

    /**
     * Toggle PCR's ACKIEN bit.
     */
    inline void toggle_PCR_IICMode_ACKIEN()
    {
        PCR ^= 1u << 30u;
    }

    /**
     * Get PCR's HDEL field.
     */
    inline uint8_t get_PCR_IICMode_HDEL()
    {
        return (PCR_IICMode >> 26u) & 0b1111u;
    }

    /**
     * Set PCR's HDEL field.
     */
    inline void set_PCR_IICMode_HDEL(uint8_t value)
    {
        uint32_t curr = PCR_IICMode;

        curr &= ~(0b1111u << 26u);
        curr |= (value & 0b1111u) << 26u;

        PCR_IICMode = curr;
    }

    /**
     * Get PCR's SACKDIS bit.
     */
    inline USIC0_CH0_PCR_IICMode_SACKDIS get_PCR_IICMode_SACKDIS()
    {
        return USIC0_CH0_PCR_IICMode_SACKDIS(PCR_IICMode & (1u << 25u));
    }

    /**
     * Set PCR's SACKDIS bit.
     */
    inline void set_PCR_IICMode_SACKDIS()
    {
        PCR |= 1u << 25u;
    }

    /**
     * Clear PCR's SACKDIS bit.
     */
    inline void clear_PCR_IICMode_SACKDIS()
    {
        PCR &= ~(1u << 25u);
    }

    /**
     * Toggle PCR's SACKDIS bit.
     */
    inline void toggle_PCR_IICMode_SACKDIS()
    {
        PCR ^= 1u << 25u;
    }

    /**
     * Get PCR's ERRIEN bit.
     */
    inline USIC0_CH0_PCR_IICMode_ERRIEN get_PCR_IICMode_ERRIEN()
    {
        return USIC0_CH0_PCR_IICMode_ERRIEN(PCR_IICMode & (1u << 24u));
    }

    /**
     * Set PCR's ERRIEN bit.
     */
    inline void set_PCR_IICMode_ERRIEN()
    {
        PCR |= 1u << 24u;
    }

    /**
     * Clear PCR's ERRIEN bit.
     */
    inline void clear_PCR_IICMode_ERRIEN()
    {
        PCR &= ~(1u << 24u);
    }

    /**
     * Toggle PCR's ERRIEN bit.
     */
    inline void toggle_PCR_IICMode_ERRIEN()
    {
        PCR ^= 1u << 24u;
    }

    /**
     * Get PCR's SRRIEN bit.
     */
    inline USIC0_CH0_PCR_IICMode_SRRIEN get_PCR_IICMode_SRRIEN()
    {
        return USIC0_CH0_PCR_IICMode_SRRIEN(PCR_IICMode & (1u << 23u));
    }

    /**
     * Set PCR's SRRIEN bit.
     */
    inline void set_PCR_IICMode_SRRIEN()
    {
        PCR |= 1u << 23u;
    }

    /**
     * Clear PCR's SRRIEN bit.
     */
    inline void clear_PCR_IICMode_SRRIEN()
    {
        PCR &= ~(1u << 23u);
    }

    /**
     * Toggle PCR's SRRIEN bit.
     */
    inline void toggle_PCR_IICMode_SRRIEN()
    {
        PCR ^= 1u << 23u;
    }

    /**
     * Get PCR's ARLIEN bit.
     */
    inline USIC0_CH0_PCR_IICMode_ARLIEN get_PCR_IICMode_ARLIEN()
    {
        return USIC0_CH0_PCR_IICMode_ARLIEN(PCR_IICMode & (1u << 22u));
    }

    /**
     * Set PCR's ARLIEN bit.
     */
    inline void set_PCR_IICMode_ARLIEN()
    {
        PCR |= 1u << 22u;
    }

    /**
     * Clear PCR's ARLIEN bit.
     */
    inline void clear_PCR_IICMode_ARLIEN()
    {
        PCR &= ~(1u << 22u);
    }

    /**
     * Toggle PCR's ARLIEN bit.
     */
    inline void toggle_PCR_IICMode_ARLIEN()
    {
        PCR ^= 1u << 22u;
    }

    /**
     * Get PCR's NACKIEN bit.
     */
    inline USIC0_CH0_PCR_IICMode_NACKIEN get_PCR_IICMode_NACKIEN()
    {
        return USIC0_CH0_PCR_IICMode_NACKIEN(PCR_IICMode & (1u << 21u));
    }

    /**
     * Set PCR's NACKIEN bit.
     */
    inline void set_PCR_IICMode_NACKIEN()
    {
        PCR |= 1u << 21u;
    }

    /**
     * Clear PCR's NACKIEN bit.
     */
    inline void clear_PCR_IICMode_NACKIEN()
    {
        PCR &= ~(1u << 21u);
    }

    /**
     * Toggle PCR's NACKIEN bit.
     */
    inline void toggle_PCR_IICMode_NACKIEN()
    {
        PCR ^= 1u << 21u;
    }

    /**
     * Get PCR's PCRIEN bit.
     */
    inline USIC0_CH0_PCR_IICMode_PCRIEN get_PCR_IICMode_PCRIEN()
    {
        return USIC0_CH0_PCR_IICMode_PCRIEN(PCR_IICMode & (1u << 20u));
    }

    /**
     * Set PCR's PCRIEN bit.
     */
    inline void set_PCR_IICMode_PCRIEN()
    {
        PCR |= 1u << 20u;
    }

    /**
     * Clear PCR's PCRIEN bit.
     */
    inline void clear_PCR_IICMode_PCRIEN()
    {
        PCR &= ~(1u << 20u);
    }

    /**
     * Toggle PCR's PCRIEN bit.
     */
    inline void toggle_PCR_IICMode_PCRIEN()
    {
        PCR ^= 1u << 20u;
    }

    /**
     * Get PCR's RSCRIEN bit.
     */
    inline USIC0_CH0_PCR_IICMode_RSCRIEN get_PCR_IICMode_RSCRIEN()
    {
        return USIC0_CH0_PCR_IICMode_RSCRIEN(PCR_IICMode & (1u << 19u));
    }

    /**
     * Set PCR's RSCRIEN bit.
     */
    inline void set_PCR_IICMode_RSCRIEN()
    {
        PCR |= 1u << 19u;
    }

    /**
     * Clear PCR's RSCRIEN bit.
     */
    inline void clear_PCR_IICMode_RSCRIEN()
    {
        PCR &= ~(1u << 19u);
    }

    /**
     * Toggle PCR's RSCRIEN bit.
     */
    inline void toggle_PCR_IICMode_RSCRIEN()
    {
        PCR ^= 1u << 19u;
    }

    /**
     * Get PCR's SCRIEN bit.
     */
    inline USIC0_CH0_PCR_IICMode_SCRIEN get_PCR_IICMode_SCRIEN()
    {
        return USIC0_CH0_PCR_IICMode_SCRIEN(PCR_IICMode & (1u << 18u));
    }

    /**
     * Set PCR's SCRIEN bit.
     */
    inline void set_PCR_IICMode_SCRIEN()
    {
        PCR |= 1u << 18u;
    }

    /**
     * Clear PCR's SCRIEN bit.
     */
    inline void clear_PCR_IICMode_SCRIEN()
    {
        PCR &= ~(1u << 18u);
    }

    /**
     * Toggle PCR's SCRIEN bit.
     */
    inline void toggle_PCR_IICMode_SCRIEN()
    {
        PCR ^= 1u << 18u;
    }

    /**
     * Get PCR's STIM bit.
     */
    inline USIC0_CH0_PCR_IICMode_STIM get_PCR_IICMode_STIM()
    {
        return USIC0_CH0_PCR_IICMode_STIM(PCR_IICMode & (1u << 17u));
    }

    /**
     * Set PCR's STIM bit.
     */
    inline void set_PCR_IICMode_STIM()
    {
        PCR |= 1u << 17u;
    }

    /**
     * Clear PCR's STIM bit.
     */
    inline void clear_PCR_IICMode_STIM()
    {
        PCR &= ~(1u << 17u);
    }

    /**
     * Toggle PCR's STIM bit.
     */
    inline void toggle_PCR_IICMode_STIM()
    {
        PCR ^= 1u << 17u;
    }

    /**
     * Get PCR's ACK00 bit.
     */
    inline USIC0_CH0_PCR_IICMode_ACK00 get_PCR_IICMode_ACK00()
    {
        return USIC0_CH0_PCR_IICMode_ACK00(PCR_IICMode & (1u << 16u));
    }

    /**
     * Set PCR's ACK00 bit.
     */
    inline void set_PCR_IICMode_ACK00()
    {
        PCR |= 1u << 16u;
    }

    /**
     * Clear PCR's ACK00 bit.
     */
    inline void clear_PCR_IICMode_ACK00()
    {
        PCR &= ~(1u << 16u);
    }

    /**
     * Toggle PCR's ACK00 bit.
     */
    inline void toggle_PCR_IICMode_ACK00()
    {
        PCR ^= 1u << 16u;
    }

    /**
     * Get PCR's SLAD field.
     */
    inline uint16_t get_PCR_IICMode_SLAD()
    {
        return (PCR_IICMode >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set PCR's SLAD field.
     */
    inline void set_PCR_IICMode_SLAD(uint16_t value)
    {
        uint32_t curr = PCR_IICMode;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        PCR_IICMode = curr;
    }

    /**
     * Get all of PCR_IICMode's bit fields.
     */
    inline void get_PCR_IICMode(USIC0_CH0_PCR_IICMode_MCLK &MCLK, USIC0_CH0_PCR_IICMode_ACKIEN &ACKIEN, uint8_t &HDEL, USIC0_CH0_PCR_IICMode_SACKDIS &SACKDIS, USIC0_CH0_PCR_IICMode_ERRIEN &ERRIEN, USIC0_CH0_PCR_IICMode_SRRIEN &SRRIEN, USIC0_CH0_PCR_IICMode_ARLIEN &ARLIEN, USIC0_CH0_PCR_IICMode_NACKIEN &NACKIEN, USIC0_CH0_PCR_IICMode_PCRIEN &PCRIEN, USIC0_CH0_PCR_IICMode_RSCRIEN &RSCRIEN, USIC0_CH0_PCR_IICMode_SCRIEN &SCRIEN, USIC0_CH0_PCR_IICMode_STIM &STIM, USIC0_CH0_PCR_IICMode_ACK00 &ACK00, uint16_t &SLAD)
    {
        uint32_t curr = PCR_IICMode;

        MCLK = USIC0_CH0_PCR_IICMode_MCLK(curr & (1u << 31u));
        ACKIEN = USIC0_CH0_PCR_IICMode_ACKIEN(curr & (1u << 30u));
        HDEL = (curr >> 26u) & 0b1111u;
        SACKDIS = USIC0_CH0_PCR_IICMode_SACKDIS(curr & (1u << 25u));
        ERRIEN = USIC0_CH0_PCR_IICMode_ERRIEN(curr & (1u << 24u));
        SRRIEN = USIC0_CH0_PCR_IICMode_SRRIEN(curr & (1u << 23u));
        ARLIEN = USIC0_CH0_PCR_IICMode_ARLIEN(curr & (1u << 22u));
        NACKIEN = USIC0_CH0_PCR_IICMode_NACKIEN(curr & (1u << 21u));
        PCRIEN = USIC0_CH0_PCR_IICMode_PCRIEN(curr & (1u << 20u));
        RSCRIEN = USIC0_CH0_PCR_IICMode_RSCRIEN(curr & (1u << 19u));
        SCRIEN = USIC0_CH0_PCR_IICMode_SCRIEN(curr & (1u << 18u));
        STIM = USIC0_CH0_PCR_IICMode_STIM(curr & (1u << 17u));
        ACK00 = USIC0_CH0_PCR_IICMode_ACK00(curr & (1u << 16u));
        SLAD = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set all of PCR_IICMode's bit fields.
     */
    inline void set_PCR_IICMode(USIC0_CH0_PCR_IICMode_MCLK MCLK, USIC0_CH0_PCR_IICMode_ACKIEN ACKIEN, uint8_t HDEL, USIC0_CH0_PCR_IICMode_SACKDIS SACKDIS, USIC0_CH0_PCR_IICMode_ERRIEN ERRIEN, USIC0_CH0_PCR_IICMode_SRRIEN SRRIEN, USIC0_CH0_PCR_IICMode_ARLIEN ARLIEN, USIC0_CH0_PCR_IICMode_NACKIEN NACKIEN, USIC0_CH0_PCR_IICMode_PCRIEN PCRIEN, USIC0_CH0_PCR_IICMode_RSCRIEN RSCRIEN, USIC0_CH0_PCR_IICMode_SCRIEN SCRIEN, USIC0_CH0_PCR_IICMode_STIM STIM, USIC0_CH0_PCR_IICMode_ACK00 ACK00, uint16_t SLAD)
    {
        uint32_t curr = PCR_IICMode;

        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(MCLK) & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (std::to_underlying(ACKIEN) & 0b1u) << 30u;
        curr &= ~(0b1111u << 26u);
        curr |= (HDEL & 0b1111u) << 26u;
        curr &= ~(0b1u << 25u);
        curr |= (std::to_underlying(SACKDIS) & 0b1u) << 25u;
        curr &= ~(0b1u << 24u);
        curr |= (std::to_underlying(ERRIEN) & 0b1u) << 24u;
        curr &= ~(0b1u << 23u);
        curr |= (std::to_underlying(SRRIEN) & 0b1u) << 23u;
        curr &= ~(0b1u << 22u);
        curr |= (std::to_underlying(ARLIEN) & 0b1u) << 22u;
        curr &= ~(0b1u << 21u);
        curr |= (std::to_underlying(NACKIEN) & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(PCRIEN) & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(RSCRIEN) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(SCRIEN) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(STIM) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(ACK00) & 0b1u) << 16u;
        curr &= ~(0b1111111111111111u << 0u);
        curr |= (SLAD & 0b1111111111111111u) << 0u;

        PCR_IICMode = curr;
    }

    /**
     * Get PCR's MCLK bit.
     */
    inline USIC0_CH0_PCR_IISMode_MCLK get_PCR_IISMode_MCLK()
    {
        return USIC0_CH0_PCR_IISMode_MCLK(PCR_IISMode & (1u << 31u));
    }

    /**
     * Set PCR's MCLK bit.
     */
    inline void set_PCR_IISMode_MCLK()
    {
        PCR |= 1u << 31u;
    }

    /**
     * Clear PCR's MCLK bit.
     */
    inline void clear_PCR_IISMode_MCLK()
    {
        PCR &= ~(1u << 31u);
    }

    /**
     * Toggle PCR's MCLK bit.
     */
    inline void toggle_PCR_IISMode_MCLK()
    {
        PCR ^= 1u << 31u;
    }

    /**
     * Get PCR's TDEL field.
     */
    inline uint8_t get_PCR_IISMode_TDEL()
    {
        return (PCR_IISMode >> 16u) & 0b111111u;
    }

    /**
     * Set PCR's TDEL field.
     */
    inline void set_PCR_IISMode_TDEL(uint8_t value)
    {
        uint32_t curr = PCR_IISMode;

        curr &= ~(0b111111u << 16u);
        curr |= (value & 0b111111u) << 16u;

        PCR_IISMode = curr;
    }

    /**
     * Get PCR's DX2TIEN bit.
     */
    inline USIC0_CH0_PCR_IISMode_DX2TIEN get_PCR_IISMode_DX2TIEN()
    {
        return USIC0_CH0_PCR_IISMode_DX2TIEN(PCR_IISMode & (1u << 15u));
    }

    /**
     * Set PCR's DX2TIEN bit.
     */
    inline void set_PCR_IISMode_DX2TIEN()
    {
        PCR |= 1u << 15u;
    }

    /**
     * Clear PCR's DX2TIEN bit.
     */
    inline void clear_PCR_IISMode_DX2TIEN()
    {
        PCR &= ~(1u << 15u);
    }

    /**
     * Toggle PCR's DX2TIEN bit.
     */
    inline void toggle_PCR_IISMode_DX2TIEN()
    {
        PCR ^= 1u << 15u;
    }

    /**
     * Get PCR's ENDIEN bit.
     */
    inline USIC0_CH0_PCR_IISMode_ENDIEN get_PCR_IISMode_ENDIEN()
    {
        return USIC0_CH0_PCR_IISMode_ENDIEN(PCR_IISMode & (1u << 6u));
    }

    /**
     * Set PCR's ENDIEN bit.
     */
    inline void set_PCR_IISMode_ENDIEN()
    {
        PCR |= 1u << 6u;
    }

    /**
     * Clear PCR's ENDIEN bit.
     */
    inline void clear_PCR_IISMode_ENDIEN()
    {
        PCR &= ~(1u << 6u);
    }

    /**
     * Toggle PCR's ENDIEN bit.
     */
    inline void toggle_PCR_IISMode_ENDIEN()
    {
        PCR ^= 1u << 6u;
    }

    /**
     * Get PCR's WAREIEN bit.
     */
    inline USIC0_CH0_PCR_IISMode_WAREIEN get_PCR_IISMode_WAREIEN()
    {
        return USIC0_CH0_PCR_IISMode_WAREIEN(PCR_IISMode & (1u << 5u));
    }

    /**
     * Set PCR's WAREIEN bit.
     */
    inline void set_PCR_IISMode_WAREIEN()
    {
        PCR |= 1u << 5u;
    }

    /**
     * Clear PCR's WAREIEN bit.
     */
    inline void clear_PCR_IISMode_WAREIEN()
    {
        PCR &= ~(1u << 5u);
    }

    /**
     * Toggle PCR's WAREIEN bit.
     */
    inline void toggle_PCR_IISMode_WAREIEN()
    {
        PCR ^= 1u << 5u;
    }

    /**
     * Get PCR's WAFEIEN bit.
     */
    inline USIC0_CH0_PCR_IISMode_WAFEIEN get_PCR_IISMode_WAFEIEN()
    {
        return USIC0_CH0_PCR_IISMode_WAFEIEN(PCR_IISMode & (1u << 4u));
    }

    /**
     * Set PCR's WAFEIEN bit.
     */
    inline void set_PCR_IISMode_WAFEIEN()
    {
        PCR |= 1u << 4u;
    }

    /**
     * Clear PCR's WAFEIEN bit.
     */
    inline void clear_PCR_IISMode_WAFEIEN()
    {
        PCR &= ~(1u << 4u);
    }

    /**
     * Toggle PCR's WAFEIEN bit.
     */
    inline void toggle_PCR_IISMode_WAFEIEN()
    {
        PCR ^= 1u << 4u;
    }

    /**
     * Get PCR's SELINV bit.
     */
    inline USIC0_CH0_PCR_IISMode_SELINV get_PCR_IISMode_SELINV()
    {
        return USIC0_CH0_PCR_IISMode_SELINV(PCR_IISMode & (1u << 2u));
    }

    /**
     * Set PCR's SELINV bit.
     */
    inline void set_PCR_IISMode_SELINV()
    {
        PCR |= 1u << 2u;
    }

    /**
     * Clear PCR's SELINV bit.
     */
    inline void clear_PCR_IISMode_SELINV()
    {
        PCR &= ~(1u << 2u);
    }

    /**
     * Toggle PCR's SELINV bit.
     */
    inline void toggle_PCR_IISMode_SELINV()
    {
        PCR ^= 1u << 2u;
    }

    /**
     * Get PCR's DTEN bit.
     */
    inline USIC0_CH0_PCR_IISMode_DTEN get_PCR_IISMode_DTEN()
    {
        return USIC0_CH0_PCR_IISMode_DTEN(PCR_IISMode & (1u << 1u));
    }

    /**
     * Set PCR's DTEN bit.
     */
    inline void set_PCR_IISMode_DTEN()
    {
        PCR |= 1u << 1u;
    }

    /**
     * Clear PCR's DTEN bit.
     */
    inline void clear_PCR_IISMode_DTEN()
    {
        PCR &= ~(1u << 1u);
    }

    /**
     * Toggle PCR's DTEN bit.
     */
    inline void toggle_PCR_IISMode_DTEN()
    {
        PCR ^= 1u << 1u;
    }

    /**
     * Get PCR's WAGEN bit.
     */
    inline USIC0_CH0_PCR_IISMode_WAGEN get_PCR_IISMode_WAGEN()
    {
        return USIC0_CH0_PCR_IISMode_WAGEN(PCR_IISMode & (1u << 0u));
    }

    /**
     * Set PCR's WAGEN bit.
     */
    inline void set_PCR_IISMode_WAGEN()
    {
        PCR |= 1u << 0u;
    }

    /**
     * Clear PCR's WAGEN bit.
     */
    inline void clear_PCR_IISMode_WAGEN()
    {
        PCR &= ~(1u << 0u);
    }

    /**
     * Toggle PCR's WAGEN bit.
     */
    inline void toggle_PCR_IISMode_WAGEN()
    {
        PCR ^= 1u << 0u;
    }

    /**
     * Get all of PCR_IISMode's bit fields.
     */
    inline void get_PCR_IISMode(USIC0_CH0_PCR_IISMode_MCLK &MCLK, uint8_t &TDEL, USIC0_CH0_PCR_IISMode_DX2TIEN &DX2TIEN, USIC0_CH0_PCR_IISMode_ENDIEN &ENDIEN, USIC0_CH0_PCR_IISMode_WAREIEN &WAREIEN, USIC0_CH0_PCR_IISMode_WAFEIEN &WAFEIEN, USIC0_CH0_PCR_IISMode_SELINV &SELINV, USIC0_CH0_PCR_IISMode_DTEN &DTEN, USIC0_CH0_PCR_IISMode_WAGEN &WAGEN)
    {
        uint32_t curr = PCR_IISMode;

        MCLK = USIC0_CH0_PCR_IISMode_MCLK(curr & (1u << 31u));
        TDEL = (curr >> 16u) & 0b111111u;
        DX2TIEN = USIC0_CH0_PCR_IISMode_DX2TIEN(curr & (1u << 15u));
        ENDIEN = USIC0_CH0_PCR_IISMode_ENDIEN(curr & (1u << 6u));
        WAREIEN = USIC0_CH0_PCR_IISMode_WAREIEN(curr & (1u << 5u));
        WAFEIEN = USIC0_CH0_PCR_IISMode_WAFEIEN(curr & (1u << 4u));
        SELINV = USIC0_CH0_PCR_IISMode_SELINV(curr & (1u << 2u));
        DTEN = USIC0_CH0_PCR_IISMode_DTEN(curr & (1u << 1u));
        WAGEN = USIC0_CH0_PCR_IISMode_WAGEN(curr & (1u << 0u));
    }

    /**
     * Set all of PCR_IISMode's bit fields.
     */
    inline void set_PCR_IISMode(USIC0_CH0_PCR_IISMode_MCLK MCLK, uint8_t TDEL, USIC0_CH0_PCR_IISMode_DX2TIEN DX2TIEN, USIC0_CH0_PCR_IISMode_ENDIEN ENDIEN, USIC0_CH0_PCR_IISMode_WAREIEN WAREIEN, USIC0_CH0_PCR_IISMode_WAFEIEN WAFEIEN, USIC0_CH0_PCR_IISMode_SELINV SELINV, USIC0_CH0_PCR_IISMode_DTEN DTEN, USIC0_CH0_PCR_IISMode_WAGEN WAGEN)
    {
        uint32_t curr = PCR_IISMode;

        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(MCLK) & 0b1u) << 31u;
        curr &= ~(0b111111u << 16u);
        curr |= (TDEL & 0b111111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(DX2TIEN) & 0b1u) << 15u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(ENDIEN) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(WAREIEN) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(WAFEIEN) & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(SELINV) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(DTEN) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(WAGEN) & 0b1u) << 0u;

        PCR_IISMode = curr;
    }

    /**
     * Get CCR's BRGIEN bit.
     */
    inline USIC0_CH0_CCR_BRGIEN get_CCR_BRGIEN()
    {
        return USIC0_CH0_CCR_BRGIEN(CCR & (1u << 16u));
    }

    /**
     * Set CCR's BRGIEN bit.
     */
    inline void set_CCR_BRGIEN()
    {
        CCR |= 1u << 16u;
    }

    /**
     * Clear CCR's BRGIEN bit.
     */
    inline void clear_CCR_BRGIEN()
    {
        CCR &= ~(1u << 16u);
    }

    /**
     * Toggle CCR's BRGIEN bit.
     */
    inline void toggle_CCR_BRGIEN()
    {
        CCR ^= 1u << 16u;
    }

    /**
     * Get CCR's AIEN bit.
     */
    inline USIC0_CH0_CCR_AIEN get_CCR_AIEN()
    {
        return USIC0_CH0_CCR_AIEN(CCR & (1u << 15u));
    }

    /**
     * Set CCR's AIEN bit.
     */
    inline void set_CCR_AIEN()
    {
        CCR |= 1u << 15u;
    }

    /**
     * Clear CCR's AIEN bit.
     */
    inline void clear_CCR_AIEN()
    {
        CCR &= ~(1u << 15u);
    }

    /**
     * Toggle CCR's AIEN bit.
     */
    inline void toggle_CCR_AIEN()
    {
        CCR ^= 1u << 15u;
    }

    /**
     * Get CCR's RIEN bit.
     */
    inline USIC0_CH0_CCR_RIEN get_CCR_RIEN()
    {
        return USIC0_CH0_CCR_RIEN(CCR & (1u << 14u));
    }

    /**
     * Set CCR's RIEN bit.
     */
    inline void set_CCR_RIEN()
    {
        CCR |= 1u << 14u;
    }

    /**
     * Clear CCR's RIEN bit.
     */
    inline void clear_CCR_RIEN()
    {
        CCR &= ~(1u << 14u);
    }

    /**
     * Toggle CCR's RIEN bit.
     */
    inline void toggle_CCR_RIEN()
    {
        CCR ^= 1u << 14u;
    }

    /**
     * Get CCR's TBIEN bit.
     */
    inline USIC0_CH0_CCR_TBIEN get_CCR_TBIEN()
    {
        return USIC0_CH0_CCR_TBIEN(CCR & (1u << 13u));
    }

    /**
     * Set CCR's TBIEN bit.
     */
    inline void set_CCR_TBIEN()
    {
        CCR |= 1u << 13u;
    }

    /**
     * Clear CCR's TBIEN bit.
     */
    inline void clear_CCR_TBIEN()
    {
        CCR &= ~(1u << 13u);
    }

    /**
     * Toggle CCR's TBIEN bit.
     */
    inline void toggle_CCR_TBIEN()
    {
        CCR ^= 1u << 13u;
    }

    /**
     * Get CCR's TSIEN bit.
     */
    inline USIC0_CH0_CCR_TSIEN get_CCR_TSIEN()
    {
        return USIC0_CH0_CCR_TSIEN(CCR & (1u << 12u));
    }

    /**
     * Set CCR's TSIEN bit.
     */
    inline void set_CCR_TSIEN()
    {
        CCR |= 1u << 12u;
    }

    /**
     * Clear CCR's TSIEN bit.
     */
    inline void clear_CCR_TSIEN()
    {
        CCR &= ~(1u << 12u);
    }

    /**
     * Toggle CCR's TSIEN bit.
     */
    inline void toggle_CCR_TSIEN()
    {
        CCR ^= 1u << 12u;
    }

    /**
     * Get CCR's DLIEN bit.
     */
    inline USIC0_CH0_CCR_DLIEN get_CCR_DLIEN()
    {
        return USIC0_CH0_CCR_DLIEN(CCR & (1u << 11u));
    }

    /**
     * Set CCR's DLIEN bit.
     */
    inline void set_CCR_DLIEN()
    {
        CCR |= 1u << 11u;
    }

    /**
     * Clear CCR's DLIEN bit.
     */
    inline void clear_CCR_DLIEN()
    {
        CCR &= ~(1u << 11u);
    }

    /**
     * Toggle CCR's DLIEN bit.
     */
    inline void toggle_CCR_DLIEN()
    {
        CCR ^= 1u << 11u;
    }

    /**
     * Get CCR's RSIEN bit.
     */
    inline USIC0_CH0_CCR_RSIEN get_CCR_RSIEN()
    {
        return USIC0_CH0_CCR_RSIEN(CCR & (1u << 10u));
    }

    /**
     * Set CCR's RSIEN bit.
     */
    inline void set_CCR_RSIEN()
    {
        CCR |= 1u << 10u;
    }

    /**
     * Clear CCR's RSIEN bit.
     */
    inline void clear_CCR_RSIEN()
    {
        CCR &= ~(1u << 10u);
    }

    /**
     * Toggle CCR's RSIEN bit.
     */
    inline void toggle_CCR_RSIEN()
    {
        CCR ^= 1u << 10u;
    }

    /**
     * Get CCR's PM field.
     */
    inline USIC0_CH0_CCR_PM get_CCR_PM()
    {
        return USIC0_CH0_CCR_PM((CCR >> 8u) & 0b11u);
    }

    /**
     * Set CCR's PM field.
     */
    inline void set_CCR_PM(USIC0_CH0_CCR_PM value)
    {
        uint32_t curr = CCR;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        CCR = curr;
    }

    /**
     * Get CCR's HPCEN field.
     */
    inline USIC0_CH0_CCR_HPCEN get_CCR_HPCEN()
    {
        return USIC0_CH0_CCR_HPCEN((CCR >> 6u) & 0b11u);
    }

    /**
     * Set CCR's HPCEN field.
     */
    inline void set_CCR_HPCEN(USIC0_CH0_CCR_HPCEN value)
    {
        uint32_t curr = CCR;

        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(value) & 0b11u) << 6u;

        CCR = curr;
    }

    /**
     * Get CCR's MODE field.
     */
    inline USIC0_CH0_CCR_MODE get_CCR_MODE()
    {
        return USIC0_CH0_CCR_MODE((CCR >> 0u) & 0b1111u);
    }

    /**
     * Set CCR's MODE field.
     */
    inline void set_CCR_MODE(USIC0_CH0_CCR_MODE value)
    {
        uint32_t curr = CCR;

        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(value) & 0b1111u) << 0u;

        CCR = curr;
    }

    /**
     * Get all of CCR's bit fields.
     */
    inline void get_CCR(USIC0_CH0_CCR_BRGIEN &BRGIEN, USIC0_CH0_CCR_AIEN &AIEN, USIC0_CH0_CCR_RIEN &RIEN, USIC0_CH0_CCR_TBIEN &TBIEN, USIC0_CH0_CCR_TSIEN &TSIEN, USIC0_CH0_CCR_DLIEN &DLIEN, USIC0_CH0_CCR_RSIEN &RSIEN, USIC0_CH0_CCR_PM &PM, USIC0_CH0_CCR_HPCEN &HPCEN, USIC0_CH0_CCR_MODE &MODE)
    {
        uint32_t curr = CCR;

        BRGIEN = USIC0_CH0_CCR_BRGIEN(curr & (1u << 16u));
        AIEN = USIC0_CH0_CCR_AIEN(curr & (1u << 15u));
        RIEN = USIC0_CH0_CCR_RIEN(curr & (1u << 14u));
        TBIEN = USIC0_CH0_CCR_TBIEN(curr & (1u << 13u));
        TSIEN = USIC0_CH0_CCR_TSIEN(curr & (1u << 12u));
        DLIEN = USIC0_CH0_CCR_DLIEN(curr & (1u << 11u));
        RSIEN = USIC0_CH0_CCR_RSIEN(curr & (1u << 10u));
        PM = USIC0_CH0_CCR_PM((curr >> 8u) & 0b11u);
        HPCEN = USIC0_CH0_CCR_HPCEN((curr >> 6u) & 0b11u);
        MODE = USIC0_CH0_CCR_MODE((curr >> 0u) & 0b1111u);
    }

    /**
     * Set all of CCR's bit fields.
     */
    inline void set_CCR(USIC0_CH0_CCR_BRGIEN BRGIEN, USIC0_CH0_CCR_AIEN AIEN, USIC0_CH0_CCR_RIEN RIEN, USIC0_CH0_CCR_TBIEN TBIEN, USIC0_CH0_CCR_TSIEN TSIEN, USIC0_CH0_CCR_DLIEN DLIEN, USIC0_CH0_CCR_RSIEN RSIEN, USIC0_CH0_CCR_PM PM, USIC0_CH0_CCR_HPCEN HPCEN, USIC0_CH0_CCR_MODE MODE)
    {
        uint32_t curr = CCR;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(BRGIEN) & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(AIEN) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(RIEN) & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(TBIEN) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(TSIEN) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(DLIEN) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(RSIEN) & 0b1u) << 10u;
        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(PM) & 0b11u) << 8u;
        curr &= ~(0b11u << 6u);
        curr |= (std::to_underlying(HPCEN) & 0b11u) << 6u;
        curr &= ~(0b1111u << 0u);
        curr |= (std::to_underlying(MODE) & 0b1111u) << 0u;

        CCR = curr;
    }

    /**
     * Get CMTR's CTV field.
     */
    inline uint16_t get_CMTR_CTV()
    {
        return (CMTR >> 0u) & 0b1111111111u;
    }

    /**
     * Set CMTR's CTV field.
     */
    inline void set_CMTR_CTV(uint16_t value)
    {
        uint32_t curr = CMTR;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        CMTR = curr;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    inline USIC0_CH0_PSR_BRGIF get_PSR_BRGIF()
    {
        return USIC0_CH0_PSR_BRGIF(PSR & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    inline USIC0_CH0_PSR_AIF get_PSR_AIF()
    {
        return USIC0_CH0_PSR_AIF(PSR & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    inline USIC0_CH0_PSR_RIF get_PSR_RIF()
    {
        return USIC0_CH0_PSR_RIF(PSR & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    inline USIC0_CH0_PSR_TBIF get_PSR_TBIF()
    {
        return USIC0_CH0_PSR_TBIF(PSR & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    inline USIC0_CH0_PSR_TSIF get_PSR_TSIF()
    {
        return USIC0_CH0_PSR_TSIF(PSR & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    inline USIC0_CH0_PSR_DLIF get_PSR_DLIF()
    {
        return USIC0_CH0_PSR_DLIF(PSR & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    inline USIC0_CH0_PSR_RSIF get_PSR_RSIF()
    {
        return USIC0_CH0_PSR_RSIF(PSR & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's ST9 bit.
     */
    inline bool get_PSR_ST9()
    {
        return PSR & (1u << 9u);
    }

    /**
     * Set PSR's ST9 bit.
     */
    inline void set_PSR_ST9()
    {
        PSR |= 1u << 9u;
    }

    /**
     * Clear PSR's ST9 bit.
     */
    inline void clear_PSR_ST9()
    {
        PSR &= ~(1u << 9u);
    }

    /**
     * Toggle PSR's ST9 bit.
     */
    inline void toggle_PSR_ST9()
    {
        PSR ^= 1u << 9u;
    }

    /**
     * Get PSR's ST8 bit.
     */
    inline bool get_PSR_ST8()
    {
        return PSR & (1u << 8u);
    }

    /**
     * Set PSR's ST8 bit.
     */
    inline void set_PSR_ST8()
    {
        PSR |= 1u << 8u;
    }

    /**
     * Clear PSR's ST8 bit.
     */
    inline void clear_PSR_ST8()
    {
        PSR &= ~(1u << 8u);
    }

    /**
     * Toggle PSR's ST8 bit.
     */
    inline void toggle_PSR_ST8()
    {
        PSR ^= 1u << 8u;
    }

    /**
     * Get PSR's ST7 bit.
     */
    inline bool get_PSR_ST7()
    {
        return PSR & (1u << 7u);
    }

    /**
     * Set PSR's ST7 bit.
     */
    inline void set_PSR_ST7()
    {
        PSR |= 1u << 7u;
    }

    /**
     * Clear PSR's ST7 bit.
     */
    inline void clear_PSR_ST7()
    {
        PSR &= ~(1u << 7u);
    }

    /**
     * Toggle PSR's ST7 bit.
     */
    inline void toggle_PSR_ST7()
    {
        PSR ^= 1u << 7u;
    }

    /**
     * Get PSR's ST6 bit.
     */
    inline bool get_PSR_ST6()
    {
        return PSR & (1u << 6u);
    }

    /**
     * Set PSR's ST6 bit.
     */
    inline void set_PSR_ST6()
    {
        PSR |= 1u << 6u;
    }

    /**
     * Clear PSR's ST6 bit.
     */
    inline void clear_PSR_ST6()
    {
        PSR &= ~(1u << 6u);
    }

    /**
     * Toggle PSR's ST6 bit.
     */
    inline void toggle_PSR_ST6()
    {
        PSR ^= 1u << 6u;
    }

    /**
     * Get PSR's ST5 bit.
     */
    inline bool get_PSR_ST5()
    {
        return PSR & (1u << 5u);
    }

    /**
     * Set PSR's ST5 bit.
     */
    inline void set_PSR_ST5()
    {
        PSR |= 1u << 5u;
    }

    /**
     * Clear PSR's ST5 bit.
     */
    inline void clear_PSR_ST5()
    {
        PSR &= ~(1u << 5u);
    }

    /**
     * Toggle PSR's ST5 bit.
     */
    inline void toggle_PSR_ST5()
    {
        PSR ^= 1u << 5u;
    }

    /**
     * Get PSR's ST4 bit.
     */
    inline bool get_PSR_ST4()
    {
        return PSR & (1u << 4u);
    }

    /**
     * Set PSR's ST4 bit.
     */
    inline void set_PSR_ST4()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's ST4 bit.
     */
    inline void clear_PSR_ST4()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's ST4 bit.
     */
    inline void toggle_PSR_ST4()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's ST3 bit.
     */
    inline bool get_PSR_ST3()
    {
        return PSR & (1u << 3u);
    }

    /**
     * Set PSR's ST3 bit.
     */
    inline void set_PSR_ST3()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's ST3 bit.
     */
    inline void clear_PSR_ST3()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's ST3 bit.
     */
    inline void toggle_PSR_ST3()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's ST2 bit.
     */
    inline bool get_PSR_ST2()
    {
        return PSR & (1u << 2u);
    }

    /**
     * Set PSR's ST2 bit.
     */
    inline void set_PSR_ST2()
    {
        PSR |= 1u << 2u;
    }

    /**
     * Clear PSR's ST2 bit.
     */
    inline void clear_PSR_ST2()
    {
        PSR &= ~(1u << 2u);
    }

    /**
     * Toggle PSR's ST2 bit.
     */
    inline void toggle_PSR_ST2()
    {
        PSR ^= 1u << 2u;
    }

    /**
     * Get PSR's ST1 bit.
     */
    inline bool get_PSR_ST1()
    {
        return PSR & (1u << 1u);
    }

    /**
     * Set PSR's ST1 bit.
     */
    inline void set_PSR_ST1()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's ST1 bit.
     */
    inline void clear_PSR_ST1()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's ST1 bit.
     */
    inline void toggle_PSR_ST1()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's ST0 bit.
     */
    inline bool get_PSR_ST0()
    {
        return PSR & (1u << 0u);
    }

    /**
     * Set PSR's ST0 bit.
     */
    inline void set_PSR_ST0()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's ST0 bit.
     */
    inline void clear_PSR_ST0()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's ST0 bit.
     */
    inline void toggle_PSR_ST0()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Get all of PSR's bit fields.
     */
    inline void get_PSR(USIC0_CH0_PSR_BRGIF &BRGIF, USIC0_CH0_PSR_AIF &AIF, USIC0_CH0_PSR_RIF &RIF, USIC0_CH0_PSR_TBIF &TBIF, USIC0_CH0_PSR_TSIF &TSIF, USIC0_CH0_PSR_DLIF &DLIF, USIC0_CH0_PSR_RSIF &RSIF, bool &ST9, bool &ST8, bool &ST7, bool &ST6, bool &ST5, bool &ST4, bool &ST3, bool &ST2, bool &ST1, bool &ST0)
    {
        uint32_t curr = PSR;

        BRGIF = USIC0_CH0_PSR_BRGIF(curr & (1u << 16u));
        AIF = USIC0_CH0_PSR_AIF(curr & (1u << 15u));
        RIF = USIC0_CH0_PSR_RIF(curr & (1u << 14u));
        TBIF = USIC0_CH0_PSR_TBIF(curr & (1u << 13u));
        TSIF = USIC0_CH0_PSR_TSIF(curr & (1u << 12u));
        DLIF = USIC0_CH0_PSR_DLIF(curr & (1u << 11u));
        RSIF = USIC0_CH0_PSR_RSIF(curr & (1u << 10u));
        ST9 = curr & (1u << 9u);
        ST8 = curr & (1u << 8u);
        ST7 = curr & (1u << 7u);
        ST6 = curr & (1u << 6u);
        ST5 = curr & (1u << 5u);
        ST4 = curr & (1u << 4u);
        ST3 = curr & (1u << 3u);
        ST2 = curr & (1u << 2u);
        ST1 = curr & (1u << 1u);
        ST0 = curr & (1u << 0u);
    }

    /**
     * Set all of PSR's bit fields.
     */
    inline void set_PSR(USIC0_CH0_PSR_BRGIF BRGIF, USIC0_CH0_PSR_AIF AIF, USIC0_CH0_PSR_RIF RIF, USIC0_CH0_PSR_TBIF TBIF, USIC0_CH0_PSR_TSIF TSIF, USIC0_CH0_PSR_DLIF DLIF, USIC0_CH0_PSR_RSIF RSIF, bool ST9, bool ST8, bool ST7, bool ST6, bool ST5, bool ST4, bool ST3, bool ST2, bool ST1, bool ST0)
    {
        uint32_t curr = PSR;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(BRGIF) & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(AIF) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(RIF) & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(TBIF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(TSIF) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(DLIF) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(RSIF) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (ST9 & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (ST8 & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (ST7 & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (ST6 & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ST5 & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (ST4 & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (ST3 & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (ST2 & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ST1 & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (ST0 & 0b1u) << 0u;

        PSR = curr;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    inline USIC0_CH0_PSR_ASCMode_BRGIF get_PSR_ASCMode_BRGIF()
    {
        return USIC0_CH0_PSR_ASCMode_BRGIF(PSR_ASCMode & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_ASCMode_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_ASCMode_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_ASCMode_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    inline USIC0_CH0_PSR_ASCMode_AIF get_PSR_ASCMode_AIF()
    {
        return USIC0_CH0_PSR_ASCMode_AIF(PSR_ASCMode & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_ASCMode_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_ASCMode_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_ASCMode_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    inline USIC0_CH0_PSR_ASCMode_RIF get_PSR_ASCMode_RIF()
    {
        return USIC0_CH0_PSR_ASCMode_RIF(PSR_ASCMode & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_ASCMode_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_ASCMode_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_ASCMode_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    inline USIC0_CH0_PSR_ASCMode_TBIF get_PSR_ASCMode_TBIF()
    {
        return USIC0_CH0_PSR_ASCMode_TBIF(PSR_ASCMode & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_ASCMode_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_ASCMode_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_ASCMode_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    inline USIC0_CH0_PSR_ASCMode_TSIF get_PSR_ASCMode_TSIF()
    {
        return USIC0_CH0_PSR_ASCMode_TSIF(PSR_ASCMode & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_ASCMode_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_ASCMode_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_ASCMode_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    inline USIC0_CH0_PSR_ASCMode_DLIF get_PSR_ASCMode_DLIF()
    {
        return USIC0_CH0_PSR_ASCMode_DLIF(PSR_ASCMode & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_ASCMode_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_ASCMode_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_ASCMode_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    inline USIC0_CH0_PSR_ASCMode_RSIF get_PSR_ASCMode_RSIF()
    {
        return USIC0_CH0_PSR_ASCMode_RSIF(PSR_ASCMode & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_ASCMode_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_ASCMode_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_ASCMode_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's BUSY bit.
     */
    inline USIC0_CH0_PSR_ASCMode_BUSY get_PSR_ASCMode_BUSY()
    {
        return USIC0_CH0_PSR_ASCMode_BUSY(PSR_ASCMode & (1u << 9u));
    }

    /**
     * Get PSR's TFF bit.
     */
    inline USIC0_CH0_PSR_ASCMode_TFF get_PSR_ASCMode_TFF()
    {
        return USIC0_CH0_PSR_ASCMode_TFF(PSR_ASCMode & (1u << 8u));
    }

    /**
     * Set PSR's TFF bit.
     */
    inline void set_PSR_ASCMode_TFF()
    {
        PSR |= 1u << 8u;
    }

    /**
     * Clear PSR's TFF bit.
     */
    inline void clear_PSR_ASCMode_TFF()
    {
        PSR &= ~(1u << 8u);
    }

    /**
     * Toggle PSR's TFF bit.
     */
    inline void toggle_PSR_ASCMode_TFF()
    {
        PSR ^= 1u << 8u;
    }

    /**
     * Get PSR's RFF bit.
     */
    inline USIC0_CH0_PSR_ASCMode_RFF get_PSR_ASCMode_RFF()
    {
        return USIC0_CH0_PSR_ASCMode_RFF(PSR_ASCMode & (1u << 7u));
    }

    /**
     * Set PSR's RFF bit.
     */
    inline void set_PSR_ASCMode_RFF()
    {
        PSR |= 1u << 7u;
    }

    /**
     * Clear PSR's RFF bit.
     */
    inline void clear_PSR_ASCMode_RFF()
    {
        PSR &= ~(1u << 7u);
    }

    /**
     * Toggle PSR's RFF bit.
     */
    inline void toggle_PSR_ASCMode_RFF()
    {
        PSR ^= 1u << 7u;
    }

    /**
     * Get PSR's FER1 bit.
     */
    inline USIC0_CH0_PSR_ASCMode_FER1 get_PSR_ASCMode_FER1()
    {
        return USIC0_CH0_PSR_ASCMode_FER1(PSR_ASCMode & (1u << 6u));
    }

    /**
     * Set PSR's FER1 bit.
     */
    inline void set_PSR_ASCMode_FER1()
    {
        PSR |= 1u << 6u;
    }

    /**
     * Clear PSR's FER1 bit.
     */
    inline void clear_PSR_ASCMode_FER1()
    {
        PSR &= ~(1u << 6u);
    }

    /**
     * Toggle PSR's FER1 bit.
     */
    inline void toggle_PSR_ASCMode_FER1()
    {
        PSR ^= 1u << 6u;
    }

    /**
     * Get PSR's FER0 bit.
     */
    inline USIC0_CH0_PSR_ASCMode_FER0 get_PSR_ASCMode_FER0()
    {
        return USIC0_CH0_PSR_ASCMode_FER0(PSR_ASCMode & (1u << 5u));
    }

    /**
     * Set PSR's FER0 bit.
     */
    inline void set_PSR_ASCMode_FER0()
    {
        PSR |= 1u << 5u;
    }

    /**
     * Clear PSR's FER0 bit.
     */
    inline void clear_PSR_ASCMode_FER0()
    {
        PSR &= ~(1u << 5u);
    }

    /**
     * Toggle PSR's FER0 bit.
     */
    inline void toggle_PSR_ASCMode_FER0()
    {
        PSR ^= 1u << 5u;
    }

    /**
     * Get PSR's RNS bit.
     */
    inline USIC0_CH0_PSR_ASCMode_RNS get_PSR_ASCMode_RNS()
    {
        return USIC0_CH0_PSR_ASCMode_RNS(PSR_ASCMode & (1u << 4u));
    }

    /**
     * Set PSR's RNS bit.
     */
    inline void set_PSR_ASCMode_RNS()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's RNS bit.
     */
    inline void clear_PSR_ASCMode_RNS()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's RNS bit.
     */
    inline void toggle_PSR_ASCMode_RNS()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's COL bit.
     */
    inline USIC0_CH0_PSR_ASCMode_COL get_PSR_ASCMode_COL()
    {
        return USIC0_CH0_PSR_ASCMode_COL(PSR_ASCMode & (1u << 3u));
    }

    /**
     * Set PSR's COL bit.
     */
    inline void set_PSR_ASCMode_COL()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's COL bit.
     */
    inline void clear_PSR_ASCMode_COL()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's COL bit.
     */
    inline void toggle_PSR_ASCMode_COL()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's SBD bit.
     */
    inline USIC0_CH0_PSR_ASCMode_SBD get_PSR_ASCMode_SBD()
    {
        return USIC0_CH0_PSR_ASCMode_SBD(PSR_ASCMode & (1u << 2u));
    }

    /**
     * Set PSR's SBD bit.
     */
    inline void set_PSR_ASCMode_SBD()
    {
        PSR |= 1u << 2u;
    }

    /**
     * Clear PSR's SBD bit.
     */
    inline void clear_PSR_ASCMode_SBD()
    {
        PSR &= ~(1u << 2u);
    }

    /**
     * Toggle PSR's SBD bit.
     */
    inline void toggle_PSR_ASCMode_SBD()
    {
        PSR ^= 1u << 2u;
    }

    /**
     * Get PSR's RXIDLE bit.
     */
    inline USIC0_CH0_PSR_ASCMode_RXIDLE get_PSR_ASCMode_RXIDLE()
    {
        return USIC0_CH0_PSR_ASCMode_RXIDLE(PSR_ASCMode & (1u << 1u));
    }

    /**
     * Set PSR's RXIDLE bit.
     */
    inline void set_PSR_ASCMode_RXIDLE()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's RXIDLE bit.
     */
    inline void clear_PSR_ASCMode_RXIDLE()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's RXIDLE bit.
     */
    inline void toggle_PSR_ASCMode_RXIDLE()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's TXIDLE bit.
     */
    inline USIC0_CH0_PSR_ASCMode_TXIDLE get_PSR_ASCMode_TXIDLE()
    {
        return USIC0_CH0_PSR_ASCMode_TXIDLE(PSR_ASCMode & (1u << 0u));
    }

    /**
     * Set PSR's TXIDLE bit.
     */
    inline void set_PSR_ASCMode_TXIDLE()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's TXIDLE bit.
     */
    inline void clear_PSR_ASCMode_TXIDLE()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's TXIDLE bit.
     */
    inline void toggle_PSR_ASCMode_TXIDLE()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Get all of PSR_ASCMode's bit fields.
     */
    inline void get_PSR_ASCMode(USIC0_CH0_PSR_ASCMode_BRGIF &BRGIF, USIC0_CH0_PSR_ASCMode_AIF &AIF, USIC0_CH0_PSR_ASCMode_RIF &RIF, USIC0_CH0_PSR_ASCMode_TBIF &TBIF, USIC0_CH0_PSR_ASCMode_TSIF &TSIF, USIC0_CH0_PSR_ASCMode_DLIF &DLIF, USIC0_CH0_PSR_ASCMode_RSIF &RSIF, USIC0_CH0_PSR_ASCMode_BUSY &BUSY, USIC0_CH0_PSR_ASCMode_TFF &TFF, USIC0_CH0_PSR_ASCMode_RFF &RFF, USIC0_CH0_PSR_ASCMode_FER1 &FER1, USIC0_CH0_PSR_ASCMode_FER0 &FER0, USIC0_CH0_PSR_ASCMode_RNS &RNS, USIC0_CH0_PSR_ASCMode_COL &COL, USIC0_CH0_PSR_ASCMode_SBD &SBD, USIC0_CH0_PSR_ASCMode_RXIDLE &RXIDLE, USIC0_CH0_PSR_ASCMode_TXIDLE &TXIDLE)
    {
        uint32_t curr = PSR_ASCMode;

        BRGIF = USIC0_CH0_PSR_ASCMode_BRGIF(curr & (1u << 16u));
        AIF = USIC0_CH0_PSR_ASCMode_AIF(curr & (1u << 15u));
        RIF = USIC0_CH0_PSR_ASCMode_RIF(curr & (1u << 14u));
        TBIF = USIC0_CH0_PSR_ASCMode_TBIF(curr & (1u << 13u));
        TSIF = USIC0_CH0_PSR_ASCMode_TSIF(curr & (1u << 12u));
        DLIF = USIC0_CH0_PSR_ASCMode_DLIF(curr & (1u << 11u));
        RSIF = USIC0_CH0_PSR_ASCMode_RSIF(curr & (1u << 10u));
        BUSY = USIC0_CH0_PSR_ASCMode_BUSY(curr & (1u << 9u));
        TFF = USIC0_CH0_PSR_ASCMode_TFF(curr & (1u << 8u));
        RFF = USIC0_CH0_PSR_ASCMode_RFF(curr & (1u << 7u));
        FER1 = USIC0_CH0_PSR_ASCMode_FER1(curr & (1u << 6u));
        FER0 = USIC0_CH0_PSR_ASCMode_FER0(curr & (1u << 5u));
        RNS = USIC0_CH0_PSR_ASCMode_RNS(curr & (1u << 4u));
        COL = USIC0_CH0_PSR_ASCMode_COL(curr & (1u << 3u));
        SBD = USIC0_CH0_PSR_ASCMode_SBD(curr & (1u << 2u));
        RXIDLE = USIC0_CH0_PSR_ASCMode_RXIDLE(curr & (1u << 1u));
        TXIDLE = USIC0_CH0_PSR_ASCMode_TXIDLE(curr & (1u << 0u));
    }

    /**
     * Set all of PSR_ASCMode's bit fields.
     */
    inline void set_PSR_ASCMode(USIC0_CH0_PSR_ASCMode_BRGIF BRGIF, USIC0_CH0_PSR_ASCMode_AIF AIF, USIC0_CH0_PSR_ASCMode_RIF RIF, USIC0_CH0_PSR_ASCMode_TBIF TBIF, USIC0_CH0_PSR_ASCMode_TSIF TSIF, USIC0_CH0_PSR_ASCMode_DLIF DLIF, USIC0_CH0_PSR_ASCMode_RSIF RSIF, USIC0_CH0_PSR_ASCMode_TFF TFF, USIC0_CH0_PSR_ASCMode_RFF RFF, USIC0_CH0_PSR_ASCMode_FER1 FER1, USIC0_CH0_PSR_ASCMode_FER0 FER0, USIC0_CH0_PSR_ASCMode_RNS RNS, USIC0_CH0_PSR_ASCMode_COL COL, USIC0_CH0_PSR_ASCMode_SBD SBD, USIC0_CH0_PSR_ASCMode_RXIDLE RXIDLE, USIC0_CH0_PSR_ASCMode_TXIDLE TXIDLE)
    {
        uint32_t curr = PSR_ASCMode;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(BRGIF) & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(AIF) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(RIF) & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(TBIF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(TSIF) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(DLIF) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(RSIF) & 0b1u) << 10u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(TFF) & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(RFF) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(FER1) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(FER0) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(RNS) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(COL) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(SBD) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(RXIDLE) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(TXIDLE) & 0b1u) << 0u;

        PSR_ASCMode = curr;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    inline USIC0_CH0_PSR_SSCMode_BRGIF get_PSR_SSCMode_BRGIF()
    {
        return USIC0_CH0_PSR_SSCMode_BRGIF(PSR_SSCMode & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_SSCMode_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_SSCMode_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_SSCMode_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    inline USIC0_CH0_PSR_SSCMode_AIF get_PSR_SSCMode_AIF()
    {
        return USIC0_CH0_PSR_SSCMode_AIF(PSR_SSCMode & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_SSCMode_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_SSCMode_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_SSCMode_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    inline USIC0_CH0_PSR_SSCMode_RIF get_PSR_SSCMode_RIF()
    {
        return USIC0_CH0_PSR_SSCMode_RIF(PSR_SSCMode & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_SSCMode_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_SSCMode_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_SSCMode_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    inline USIC0_CH0_PSR_SSCMode_TBIF get_PSR_SSCMode_TBIF()
    {
        return USIC0_CH0_PSR_SSCMode_TBIF(PSR_SSCMode & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_SSCMode_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_SSCMode_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_SSCMode_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    inline USIC0_CH0_PSR_SSCMode_TSIF get_PSR_SSCMode_TSIF()
    {
        return USIC0_CH0_PSR_SSCMode_TSIF(PSR_SSCMode & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_SSCMode_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_SSCMode_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_SSCMode_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    inline USIC0_CH0_PSR_SSCMode_DLIF get_PSR_SSCMode_DLIF()
    {
        return USIC0_CH0_PSR_SSCMode_DLIF(PSR_SSCMode & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_SSCMode_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_SSCMode_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_SSCMode_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    inline USIC0_CH0_PSR_SSCMode_RSIF get_PSR_SSCMode_RSIF()
    {
        return USIC0_CH0_PSR_SSCMode_RSIF(PSR_SSCMode & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_SSCMode_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_SSCMode_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_SSCMode_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's PARERR bit.
     */
    inline USIC0_CH0_PSR_SSCMode_PARERR get_PSR_SSCMode_PARERR()
    {
        return USIC0_CH0_PSR_SSCMode_PARERR(PSR_SSCMode & (1u << 4u));
    }

    /**
     * Set PSR's PARERR bit.
     */
    inline void set_PSR_SSCMode_PARERR()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's PARERR bit.
     */
    inline void clear_PSR_SSCMode_PARERR()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's PARERR bit.
     */
    inline void toggle_PSR_SSCMode_PARERR()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's DX2TEV bit.
     */
    inline USIC0_CH0_PSR_SSCMode_DX2TEV get_PSR_SSCMode_DX2TEV()
    {
        return USIC0_CH0_PSR_SSCMode_DX2TEV(PSR_SSCMode & (1u << 3u));
    }

    /**
     * Set PSR's DX2TEV bit.
     */
    inline void set_PSR_SSCMode_DX2TEV()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's DX2TEV bit.
     */
    inline void clear_PSR_SSCMode_DX2TEV()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's DX2TEV bit.
     */
    inline void toggle_PSR_SSCMode_DX2TEV()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's MSLSEV bit.
     */
    inline USIC0_CH0_PSR_SSCMode_MSLSEV get_PSR_SSCMode_MSLSEV()
    {
        return USIC0_CH0_PSR_SSCMode_MSLSEV(PSR_SSCMode & (1u << 2u));
    }

    /**
     * Set PSR's MSLSEV bit.
     */
    inline void set_PSR_SSCMode_MSLSEV()
    {
        PSR |= 1u << 2u;
    }

    /**
     * Clear PSR's MSLSEV bit.
     */
    inline void clear_PSR_SSCMode_MSLSEV()
    {
        PSR &= ~(1u << 2u);
    }

    /**
     * Toggle PSR's MSLSEV bit.
     */
    inline void toggle_PSR_SSCMode_MSLSEV()
    {
        PSR ^= 1u << 2u;
    }

    /**
     * Get PSR's DX2S bit.
     */
    inline USIC0_CH0_PSR_SSCMode_DX2S get_PSR_SSCMode_DX2S()
    {
        return USIC0_CH0_PSR_SSCMode_DX2S(PSR_SSCMode & (1u << 1u));
    }

    /**
     * Set PSR's DX2S bit.
     */
    inline void set_PSR_SSCMode_DX2S()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's DX2S bit.
     */
    inline void clear_PSR_SSCMode_DX2S()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's DX2S bit.
     */
    inline void toggle_PSR_SSCMode_DX2S()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's MSLS bit.
     */
    inline USIC0_CH0_PSR_SSCMode_MSLS get_PSR_SSCMode_MSLS()
    {
        return USIC0_CH0_PSR_SSCMode_MSLS(PSR_SSCMode & (1u << 0u));
    }

    /**
     * Set PSR's MSLS bit.
     */
    inline void set_PSR_SSCMode_MSLS()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's MSLS bit.
     */
    inline void clear_PSR_SSCMode_MSLS()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's MSLS bit.
     */
    inline void toggle_PSR_SSCMode_MSLS()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Get all of PSR_SSCMode's bit fields.
     */
    inline void get_PSR_SSCMode(USIC0_CH0_PSR_SSCMode_BRGIF &BRGIF, USIC0_CH0_PSR_SSCMode_AIF &AIF, USIC0_CH0_PSR_SSCMode_RIF &RIF, USIC0_CH0_PSR_SSCMode_TBIF &TBIF, USIC0_CH0_PSR_SSCMode_TSIF &TSIF, USIC0_CH0_PSR_SSCMode_DLIF &DLIF, USIC0_CH0_PSR_SSCMode_RSIF &RSIF, USIC0_CH0_PSR_SSCMode_PARERR &PARERR, USIC0_CH0_PSR_SSCMode_DX2TEV &DX2TEV, USIC0_CH0_PSR_SSCMode_MSLSEV &MSLSEV, USIC0_CH0_PSR_SSCMode_DX2S &DX2S, USIC0_CH0_PSR_SSCMode_MSLS &MSLS)
    {
        uint32_t curr = PSR_SSCMode;

        BRGIF = USIC0_CH0_PSR_SSCMode_BRGIF(curr & (1u << 16u));
        AIF = USIC0_CH0_PSR_SSCMode_AIF(curr & (1u << 15u));
        RIF = USIC0_CH0_PSR_SSCMode_RIF(curr & (1u << 14u));
        TBIF = USIC0_CH0_PSR_SSCMode_TBIF(curr & (1u << 13u));
        TSIF = USIC0_CH0_PSR_SSCMode_TSIF(curr & (1u << 12u));
        DLIF = USIC0_CH0_PSR_SSCMode_DLIF(curr & (1u << 11u));
        RSIF = USIC0_CH0_PSR_SSCMode_RSIF(curr & (1u << 10u));
        PARERR = USIC0_CH0_PSR_SSCMode_PARERR(curr & (1u << 4u));
        DX2TEV = USIC0_CH0_PSR_SSCMode_DX2TEV(curr & (1u << 3u));
        MSLSEV = USIC0_CH0_PSR_SSCMode_MSLSEV(curr & (1u << 2u));
        DX2S = USIC0_CH0_PSR_SSCMode_DX2S(curr & (1u << 1u));
        MSLS = USIC0_CH0_PSR_SSCMode_MSLS(curr & (1u << 0u));
    }

    /**
     * Set all of PSR_SSCMode's bit fields.
     */
    inline void set_PSR_SSCMode(USIC0_CH0_PSR_SSCMode_BRGIF BRGIF, USIC0_CH0_PSR_SSCMode_AIF AIF, USIC0_CH0_PSR_SSCMode_RIF RIF, USIC0_CH0_PSR_SSCMode_TBIF TBIF, USIC0_CH0_PSR_SSCMode_TSIF TSIF, USIC0_CH0_PSR_SSCMode_DLIF DLIF, USIC0_CH0_PSR_SSCMode_RSIF RSIF, USIC0_CH0_PSR_SSCMode_PARERR PARERR, USIC0_CH0_PSR_SSCMode_DX2TEV DX2TEV, USIC0_CH0_PSR_SSCMode_MSLSEV MSLSEV, USIC0_CH0_PSR_SSCMode_DX2S DX2S, USIC0_CH0_PSR_SSCMode_MSLS MSLS)
    {
        uint32_t curr = PSR_SSCMode;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(BRGIF) & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(AIF) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(RIF) & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(TBIF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(TSIF) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(DLIF) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(RSIF) & 0b1u) << 10u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(PARERR) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(DX2TEV) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(MSLSEV) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(DX2S) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(MSLS) & 0b1u) << 0u;

        PSR_SSCMode = curr;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    inline USIC0_CH0_PSR_IICMode_BRGIF get_PSR_IICMode_BRGIF()
    {
        return USIC0_CH0_PSR_IICMode_BRGIF(PSR_IICMode & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_IICMode_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_IICMode_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_IICMode_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    inline USIC0_CH0_PSR_IICMode_AIF get_PSR_IICMode_AIF()
    {
        return USIC0_CH0_PSR_IICMode_AIF(PSR_IICMode & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_IICMode_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_IICMode_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_IICMode_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    inline USIC0_CH0_PSR_IICMode_RIF get_PSR_IICMode_RIF()
    {
        return USIC0_CH0_PSR_IICMode_RIF(PSR_IICMode & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_IICMode_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_IICMode_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_IICMode_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    inline USIC0_CH0_PSR_IICMode_TBIF get_PSR_IICMode_TBIF()
    {
        return USIC0_CH0_PSR_IICMode_TBIF(PSR_IICMode & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_IICMode_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_IICMode_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_IICMode_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    inline USIC0_CH0_PSR_IICMode_TSIF get_PSR_IICMode_TSIF()
    {
        return USIC0_CH0_PSR_IICMode_TSIF(PSR_IICMode & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_IICMode_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_IICMode_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_IICMode_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    inline USIC0_CH0_PSR_IICMode_DLIF get_PSR_IICMode_DLIF()
    {
        return USIC0_CH0_PSR_IICMode_DLIF(PSR_IICMode & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_IICMode_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_IICMode_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_IICMode_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    inline USIC0_CH0_PSR_IICMode_RSIF get_PSR_IICMode_RSIF()
    {
        return USIC0_CH0_PSR_IICMode_RSIF(PSR_IICMode & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_IICMode_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_IICMode_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_IICMode_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's ACK bit.
     */
    inline USIC0_CH0_PSR_IICMode_ACK get_PSR_IICMode_ACK()
    {
        return USIC0_CH0_PSR_IICMode_ACK(PSR_IICMode & (1u << 9u));
    }

    /**
     * Set PSR's ACK bit.
     */
    inline void set_PSR_IICMode_ACK()
    {
        PSR |= 1u << 9u;
    }

    /**
     * Clear PSR's ACK bit.
     */
    inline void clear_PSR_IICMode_ACK()
    {
        PSR &= ~(1u << 9u);
    }

    /**
     * Toggle PSR's ACK bit.
     */
    inline void toggle_PSR_IICMode_ACK()
    {
        PSR ^= 1u << 9u;
    }

    /**
     * Get PSR's ERR bit.
     */
    inline USIC0_CH0_PSR_IICMode_ERR get_PSR_IICMode_ERR()
    {
        return USIC0_CH0_PSR_IICMode_ERR(PSR_IICMode & (1u << 8u));
    }

    /**
     * Set PSR's ERR bit.
     */
    inline void set_PSR_IICMode_ERR()
    {
        PSR |= 1u << 8u;
    }

    /**
     * Clear PSR's ERR bit.
     */
    inline void clear_PSR_IICMode_ERR()
    {
        PSR &= ~(1u << 8u);
    }

    /**
     * Toggle PSR's ERR bit.
     */
    inline void toggle_PSR_IICMode_ERR()
    {
        PSR ^= 1u << 8u;
    }

    /**
     * Get PSR's SRR bit.
     */
    inline USIC0_CH0_PSR_IICMode_SRR get_PSR_IICMode_SRR()
    {
        return USIC0_CH0_PSR_IICMode_SRR(PSR_IICMode & (1u << 7u));
    }

    /**
     * Set PSR's SRR bit.
     */
    inline void set_PSR_IICMode_SRR()
    {
        PSR |= 1u << 7u;
    }

    /**
     * Clear PSR's SRR bit.
     */
    inline void clear_PSR_IICMode_SRR()
    {
        PSR &= ~(1u << 7u);
    }

    /**
     * Toggle PSR's SRR bit.
     */
    inline void toggle_PSR_IICMode_SRR()
    {
        PSR ^= 1u << 7u;
    }

    /**
     * Get PSR's ARL bit.
     */
    inline USIC0_CH0_PSR_IICMode_ARL get_PSR_IICMode_ARL()
    {
        return USIC0_CH0_PSR_IICMode_ARL(PSR_IICMode & (1u << 6u));
    }

    /**
     * Set PSR's ARL bit.
     */
    inline void set_PSR_IICMode_ARL()
    {
        PSR |= 1u << 6u;
    }

    /**
     * Clear PSR's ARL bit.
     */
    inline void clear_PSR_IICMode_ARL()
    {
        PSR &= ~(1u << 6u);
    }

    /**
     * Toggle PSR's ARL bit.
     */
    inline void toggle_PSR_IICMode_ARL()
    {
        PSR ^= 1u << 6u;
    }

    /**
     * Get PSR's NACK bit.
     */
    inline USIC0_CH0_PSR_IICMode_NACK get_PSR_IICMode_NACK()
    {
        return USIC0_CH0_PSR_IICMode_NACK(PSR_IICMode & (1u << 5u));
    }

    /**
     * Set PSR's NACK bit.
     */
    inline void set_PSR_IICMode_NACK()
    {
        PSR |= 1u << 5u;
    }

    /**
     * Clear PSR's NACK bit.
     */
    inline void clear_PSR_IICMode_NACK()
    {
        PSR &= ~(1u << 5u);
    }

    /**
     * Toggle PSR's NACK bit.
     */
    inline void toggle_PSR_IICMode_NACK()
    {
        PSR ^= 1u << 5u;
    }

    /**
     * Get PSR's PCR bit.
     */
    inline USIC0_CH0_PSR_IICMode_PCR get_PSR_IICMode_PCR()
    {
        return USIC0_CH0_PSR_IICMode_PCR(PSR_IICMode & (1u << 4u));
    }

    /**
     * Set PSR's PCR bit.
     */
    inline void set_PSR_IICMode_PCR()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's PCR bit.
     */
    inline void clear_PSR_IICMode_PCR()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's PCR bit.
     */
    inline void toggle_PSR_IICMode_PCR()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's RSCR bit.
     */
    inline USIC0_CH0_PSR_IICMode_RSCR get_PSR_IICMode_RSCR()
    {
        return USIC0_CH0_PSR_IICMode_RSCR(PSR_IICMode & (1u << 3u));
    }

    /**
     * Set PSR's RSCR bit.
     */
    inline void set_PSR_IICMode_RSCR()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's RSCR bit.
     */
    inline void clear_PSR_IICMode_RSCR()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's RSCR bit.
     */
    inline void toggle_PSR_IICMode_RSCR()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's SCR bit.
     */
    inline USIC0_CH0_PSR_IICMode_SCR get_PSR_IICMode_SCR()
    {
        return USIC0_CH0_PSR_IICMode_SCR(PSR_IICMode & (1u << 2u));
    }

    /**
     * Set PSR's SCR bit.
     */
    inline void set_PSR_IICMode_SCR()
    {
        PSR |= 1u << 2u;
    }

    /**
     * Clear PSR's SCR bit.
     */
    inline void clear_PSR_IICMode_SCR()
    {
        PSR &= ~(1u << 2u);
    }

    /**
     * Toggle PSR's SCR bit.
     */
    inline void toggle_PSR_IICMode_SCR()
    {
        PSR ^= 1u << 2u;
    }

    /**
     * Get PSR's WTDF bit.
     */
    inline USIC0_CH0_PSR_IICMode_WTDF get_PSR_IICMode_WTDF()
    {
        return USIC0_CH0_PSR_IICMode_WTDF(PSR_IICMode & (1u << 1u));
    }

    /**
     * Set PSR's WTDF bit.
     */
    inline void set_PSR_IICMode_WTDF()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's WTDF bit.
     */
    inline void clear_PSR_IICMode_WTDF()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's WTDF bit.
     */
    inline void toggle_PSR_IICMode_WTDF()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's SLSEL bit.
     */
    inline USIC0_CH0_PSR_IICMode_SLSEL get_PSR_IICMode_SLSEL()
    {
        return USIC0_CH0_PSR_IICMode_SLSEL(PSR_IICMode & (1u << 0u));
    }

    /**
     * Set PSR's SLSEL bit.
     */
    inline void set_PSR_IICMode_SLSEL()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's SLSEL bit.
     */
    inline void clear_PSR_IICMode_SLSEL()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's SLSEL bit.
     */
    inline void toggle_PSR_IICMode_SLSEL()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Get all of PSR_IICMode's bit fields.
     */
    inline void get_PSR_IICMode(USIC0_CH0_PSR_IICMode_BRGIF &BRGIF, USIC0_CH0_PSR_IICMode_AIF &AIF, USIC0_CH0_PSR_IICMode_RIF &RIF, USIC0_CH0_PSR_IICMode_TBIF &TBIF, USIC0_CH0_PSR_IICMode_TSIF &TSIF, USIC0_CH0_PSR_IICMode_DLIF &DLIF, USIC0_CH0_PSR_IICMode_RSIF &RSIF, USIC0_CH0_PSR_IICMode_ACK &ACK, USIC0_CH0_PSR_IICMode_ERR &ERR, USIC0_CH0_PSR_IICMode_SRR &SRR, USIC0_CH0_PSR_IICMode_ARL &ARL, USIC0_CH0_PSR_IICMode_NACK &NACK, USIC0_CH0_PSR_IICMode_PCR &PCR, USIC0_CH0_PSR_IICMode_RSCR &RSCR, USIC0_CH0_PSR_IICMode_SCR &SCR, USIC0_CH0_PSR_IICMode_WTDF &WTDF, USIC0_CH0_PSR_IICMode_SLSEL &SLSEL)
    {
        uint32_t curr = PSR_IICMode;

        BRGIF = USIC0_CH0_PSR_IICMode_BRGIF(curr & (1u << 16u));
        AIF = USIC0_CH0_PSR_IICMode_AIF(curr & (1u << 15u));
        RIF = USIC0_CH0_PSR_IICMode_RIF(curr & (1u << 14u));
        TBIF = USIC0_CH0_PSR_IICMode_TBIF(curr & (1u << 13u));
        TSIF = USIC0_CH0_PSR_IICMode_TSIF(curr & (1u << 12u));
        DLIF = USIC0_CH0_PSR_IICMode_DLIF(curr & (1u << 11u));
        RSIF = USIC0_CH0_PSR_IICMode_RSIF(curr & (1u << 10u));
        ACK = USIC0_CH0_PSR_IICMode_ACK(curr & (1u << 9u));
        ERR = USIC0_CH0_PSR_IICMode_ERR(curr & (1u << 8u));
        SRR = USIC0_CH0_PSR_IICMode_SRR(curr & (1u << 7u));
        ARL = USIC0_CH0_PSR_IICMode_ARL(curr & (1u << 6u));
        NACK = USIC0_CH0_PSR_IICMode_NACK(curr & (1u << 5u));
        PCR = USIC0_CH0_PSR_IICMode_PCR(curr & (1u << 4u));
        RSCR = USIC0_CH0_PSR_IICMode_RSCR(curr & (1u << 3u));
        SCR = USIC0_CH0_PSR_IICMode_SCR(curr & (1u << 2u));
        WTDF = USIC0_CH0_PSR_IICMode_WTDF(curr & (1u << 1u));
        SLSEL = USIC0_CH0_PSR_IICMode_SLSEL(curr & (1u << 0u));
    }

    /**
     * Set all of PSR_IICMode's bit fields.
     */
    inline void set_PSR_IICMode(USIC0_CH0_PSR_IICMode_BRGIF BRGIF, USIC0_CH0_PSR_IICMode_AIF AIF, USIC0_CH0_PSR_IICMode_RIF RIF, USIC0_CH0_PSR_IICMode_TBIF TBIF, USIC0_CH0_PSR_IICMode_TSIF TSIF, USIC0_CH0_PSR_IICMode_DLIF DLIF, USIC0_CH0_PSR_IICMode_RSIF RSIF, USIC0_CH0_PSR_IICMode_ACK ACK, USIC0_CH0_PSR_IICMode_ERR ERR, USIC0_CH0_PSR_IICMode_SRR SRR, USIC0_CH0_PSR_IICMode_ARL ARL, USIC0_CH0_PSR_IICMode_NACK NACK, USIC0_CH0_PSR_IICMode_PCR PCR, USIC0_CH0_PSR_IICMode_RSCR RSCR, USIC0_CH0_PSR_IICMode_SCR SCR, USIC0_CH0_PSR_IICMode_WTDF WTDF, USIC0_CH0_PSR_IICMode_SLSEL SLSEL)
    {
        uint32_t curr = PSR_IICMode;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(BRGIF) & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(AIF) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(RIF) & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(TBIF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(TSIF) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(DLIF) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(RSIF) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(ACK) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(ERR) & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(SRR) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(ARL) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(NACK) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(PCR) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(RSCR) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(SCR) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(WTDF) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(SLSEL) & 0b1u) << 0u;

        PSR_IICMode = curr;
    }

    /**
     * Get PSR's BRGIF bit.
     */
    inline USIC0_CH0_PSR_IISMode_BRGIF get_PSR_IISMode_BRGIF()
    {
        return USIC0_CH0_PSR_IISMode_BRGIF(PSR_IISMode & (1u << 16u));
    }

    /**
     * Set PSR's BRGIF bit.
     */
    inline void set_PSR_IISMode_BRGIF()
    {
        PSR |= 1u << 16u;
    }

    /**
     * Clear PSR's BRGIF bit.
     */
    inline void clear_PSR_IISMode_BRGIF()
    {
        PSR &= ~(1u << 16u);
    }

    /**
     * Toggle PSR's BRGIF bit.
     */
    inline void toggle_PSR_IISMode_BRGIF()
    {
        PSR ^= 1u << 16u;
    }

    /**
     * Get PSR's AIF bit.
     */
    inline USIC0_CH0_PSR_IISMode_AIF get_PSR_IISMode_AIF()
    {
        return USIC0_CH0_PSR_IISMode_AIF(PSR_IISMode & (1u << 15u));
    }

    /**
     * Set PSR's AIF bit.
     */
    inline void set_PSR_IISMode_AIF()
    {
        PSR |= 1u << 15u;
    }

    /**
     * Clear PSR's AIF bit.
     */
    inline void clear_PSR_IISMode_AIF()
    {
        PSR &= ~(1u << 15u);
    }

    /**
     * Toggle PSR's AIF bit.
     */
    inline void toggle_PSR_IISMode_AIF()
    {
        PSR ^= 1u << 15u;
    }

    /**
     * Get PSR's RIF bit.
     */
    inline USIC0_CH0_PSR_IISMode_RIF get_PSR_IISMode_RIF()
    {
        return USIC0_CH0_PSR_IISMode_RIF(PSR_IISMode & (1u << 14u));
    }

    /**
     * Set PSR's RIF bit.
     */
    inline void set_PSR_IISMode_RIF()
    {
        PSR |= 1u << 14u;
    }

    /**
     * Clear PSR's RIF bit.
     */
    inline void clear_PSR_IISMode_RIF()
    {
        PSR &= ~(1u << 14u);
    }

    /**
     * Toggle PSR's RIF bit.
     */
    inline void toggle_PSR_IISMode_RIF()
    {
        PSR ^= 1u << 14u;
    }

    /**
     * Get PSR's TBIF bit.
     */
    inline USIC0_CH0_PSR_IISMode_TBIF get_PSR_IISMode_TBIF()
    {
        return USIC0_CH0_PSR_IISMode_TBIF(PSR_IISMode & (1u << 13u));
    }

    /**
     * Set PSR's TBIF bit.
     */
    inline void set_PSR_IISMode_TBIF()
    {
        PSR |= 1u << 13u;
    }

    /**
     * Clear PSR's TBIF bit.
     */
    inline void clear_PSR_IISMode_TBIF()
    {
        PSR &= ~(1u << 13u);
    }

    /**
     * Toggle PSR's TBIF bit.
     */
    inline void toggle_PSR_IISMode_TBIF()
    {
        PSR ^= 1u << 13u;
    }

    /**
     * Get PSR's TSIF bit.
     */
    inline USIC0_CH0_PSR_IISMode_TSIF get_PSR_IISMode_TSIF()
    {
        return USIC0_CH0_PSR_IISMode_TSIF(PSR_IISMode & (1u << 12u));
    }

    /**
     * Set PSR's TSIF bit.
     */
    inline void set_PSR_IISMode_TSIF()
    {
        PSR |= 1u << 12u;
    }

    /**
     * Clear PSR's TSIF bit.
     */
    inline void clear_PSR_IISMode_TSIF()
    {
        PSR &= ~(1u << 12u);
    }

    /**
     * Toggle PSR's TSIF bit.
     */
    inline void toggle_PSR_IISMode_TSIF()
    {
        PSR ^= 1u << 12u;
    }

    /**
     * Get PSR's DLIF bit.
     */
    inline USIC0_CH0_PSR_IISMode_DLIF get_PSR_IISMode_DLIF()
    {
        return USIC0_CH0_PSR_IISMode_DLIF(PSR_IISMode & (1u << 11u));
    }

    /**
     * Set PSR's DLIF bit.
     */
    inline void set_PSR_IISMode_DLIF()
    {
        PSR |= 1u << 11u;
    }

    /**
     * Clear PSR's DLIF bit.
     */
    inline void clear_PSR_IISMode_DLIF()
    {
        PSR &= ~(1u << 11u);
    }

    /**
     * Toggle PSR's DLIF bit.
     */
    inline void toggle_PSR_IISMode_DLIF()
    {
        PSR ^= 1u << 11u;
    }

    /**
     * Get PSR's RSIF bit.
     */
    inline USIC0_CH0_PSR_IISMode_RSIF get_PSR_IISMode_RSIF()
    {
        return USIC0_CH0_PSR_IISMode_RSIF(PSR_IISMode & (1u << 10u));
    }

    /**
     * Set PSR's RSIF bit.
     */
    inline void set_PSR_IISMode_RSIF()
    {
        PSR |= 1u << 10u;
    }

    /**
     * Clear PSR's RSIF bit.
     */
    inline void clear_PSR_IISMode_RSIF()
    {
        PSR &= ~(1u << 10u);
    }

    /**
     * Toggle PSR's RSIF bit.
     */
    inline void toggle_PSR_IISMode_RSIF()
    {
        PSR ^= 1u << 10u;
    }

    /**
     * Get PSR's END bit.
     */
    inline USIC0_CH0_PSR_IISMode_END get_PSR_IISMode_END()
    {
        return USIC0_CH0_PSR_IISMode_END(PSR_IISMode & (1u << 6u));
    }

    /**
     * Set PSR's END bit.
     */
    inline void set_PSR_IISMode_END()
    {
        PSR |= 1u << 6u;
    }

    /**
     * Clear PSR's END bit.
     */
    inline void clear_PSR_IISMode_END()
    {
        PSR &= ~(1u << 6u);
    }

    /**
     * Toggle PSR's END bit.
     */
    inline void toggle_PSR_IISMode_END()
    {
        PSR ^= 1u << 6u;
    }

    /**
     * Get PSR's WARE bit.
     */
    inline USIC0_CH0_PSR_IISMode_WARE get_PSR_IISMode_WARE()
    {
        return USIC0_CH0_PSR_IISMode_WARE(PSR_IISMode & (1u << 5u));
    }

    /**
     * Set PSR's WARE bit.
     */
    inline void set_PSR_IISMode_WARE()
    {
        PSR |= 1u << 5u;
    }

    /**
     * Clear PSR's WARE bit.
     */
    inline void clear_PSR_IISMode_WARE()
    {
        PSR &= ~(1u << 5u);
    }

    /**
     * Toggle PSR's WARE bit.
     */
    inline void toggle_PSR_IISMode_WARE()
    {
        PSR ^= 1u << 5u;
    }

    /**
     * Get PSR's WAFE bit.
     */
    inline USIC0_CH0_PSR_IISMode_WAFE get_PSR_IISMode_WAFE()
    {
        return USIC0_CH0_PSR_IISMode_WAFE(PSR_IISMode & (1u << 4u));
    }

    /**
     * Set PSR's WAFE bit.
     */
    inline void set_PSR_IISMode_WAFE()
    {
        PSR |= 1u << 4u;
    }

    /**
     * Clear PSR's WAFE bit.
     */
    inline void clear_PSR_IISMode_WAFE()
    {
        PSR &= ~(1u << 4u);
    }

    /**
     * Toggle PSR's WAFE bit.
     */
    inline void toggle_PSR_IISMode_WAFE()
    {
        PSR ^= 1u << 4u;
    }

    /**
     * Get PSR's DX2TEV bit.
     */
    inline USIC0_CH0_PSR_IISMode_DX2TEV get_PSR_IISMode_DX2TEV()
    {
        return USIC0_CH0_PSR_IISMode_DX2TEV(PSR_IISMode & (1u << 3u));
    }

    /**
     * Set PSR's DX2TEV bit.
     */
    inline void set_PSR_IISMode_DX2TEV()
    {
        PSR |= 1u << 3u;
    }

    /**
     * Clear PSR's DX2TEV bit.
     */
    inline void clear_PSR_IISMode_DX2TEV()
    {
        PSR &= ~(1u << 3u);
    }

    /**
     * Toggle PSR's DX2TEV bit.
     */
    inline void toggle_PSR_IISMode_DX2TEV()
    {
        PSR ^= 1u << 3u;
    }

    /**
     * Get PSR's DX2S bit.
     */
    inline USIC0_CH0_PSR_IISMode_DX2S get_PSR_IISMode_DX2S()
    {
        return USIC0_CH0_PSR_IISMode_DX2S(PSR_IISMode & (1u << 1u));
    }

    /**
     * Set PSR's DX2S bit.
     */
    inline void set_PSR_IISMode_DX2S()
    {
        PSR |= 1u << 1u;
    }

    /**
     * Clear PSR's DX2S bit.
     */
    inline void clear_PSR_IISMode_DX2S()
    {
        PSR &= ~(1u << 1u);
    }

    /**
     * Toggle PSR's DX2S bit.
     */
    inline void toggle_PSR_IISMode_DX2S()
    {
        PSR ^= 1u << 1u;
    }

    /**
     * Get PSR's WA bit.
     */
    inline USIC0_CH0_PSR_IISMode_WA get_PSR_IISMode_WA()
    {
        return USIC0_CH0_PSR_IISMode_WA(PSR_IISMode & (1u << 0u));
    }

    /**
     * Set PSR's WA bit.
     */
    inline void set_PSR_IISMode_WA()
    {
        PSR |= 1u << 0u;
    }

    /**
     * Clear PSR's WA bit.
     */
    inline void clear_PSR_IISMode_WA()
    {
        PSR &= ~(1u << 0u);
    }

    /**
     * Toggle PSR's WA bit.
     */
    inline void toggle_PSR_IISMode_WA()
    {
        PSR ^= 1u << 0u;
    }

    /**
     * Get all of PSR_IISMode's bit fields.
     */
    inline void get_PSR_IISMode(USIC0_CH0_PSR_IISMode_BRGIF &BRGIF, USIC0_CH0_PSR_IISMode_AIF &AIF, USIC0_CH0_PSR_IISMode_RIF &RIF, USIC0_CH0_PSR_IISMode_TBIF &TBIF, USIC0_CH0_PSR_IISMode_TSIF &TSIF, USIC0_CH0_PSR_IISMode_DLIF &DLIF, USIC0_CH0_PSR_IISMode_RSIF &RSIF, USIC0_CH0_PSR_IISMode_END &END, USIC0_CH0_PSR_IISMode_WARE &WARE, USIC0_CH0_PSR_IISMode_WAFE &WAFE, USIC0_CH0_PSR_IISMode_DX2TEV &DX2TEV, USIC0_CH0_PSR_IISMode_DX2S &DX2S, USIC0_CH0_PSR_IISMode_WA &WA)
    {
        uint32_t curr = PSR_IISMode;

        BRGIF = USIC0_CH0_PSR_IISMode_BRGIF(curr & (1u << 16u));
        AIF = USIC0_CH0_PSR_IISMode_AIF(curr & (1u << 15u));
        RIF = USIC0_CH0_PSR_IISMode_RIF(curr & (1u << 14u));
        TBIF = USIC0_CH0_PSR_IISMode_TBIF(curr & (1u << 13u));
        TSIF = USIC0_CH0_PSR_IISMode_TSIF(curr & (1u << 12u));
        DLIF = USIC0_CH0_PSR_IISMode_DLIF(curr & (1u << 11u));
        RSIF = USIC0_CH0_PSR_IISMode_RSIF(curr & (1u << 10u));
        END = USIC0_CH0_PSR_IISMode_END(curr & (1u << 6u));
        WARE = USIC0_CH0_PSR_IISMode_WARE(curr & (1u << 5u));
        WAFE = USIC0_CH0_PSR_IISMode_WAFE(curr & (1u << 4u));
        DX2TEV = USIC0_CH0_PSR_IISMode_DX2TEV(curr & (1u << 3u));
        DX2S = USIC0_CH0_PSR_IISMode_DX2S(curr & (1u << 1u));
        WA = USIC0_CH0_PSR_IISMode_WA(curr & (1u << 0u));
    }

    /**
     * Set all of PSR_IISMode's bit fields.
     */
    inline void set_PSR_IISMode(USIC0_CH0_PSR_IISMode_BRGIF BRGIF, USIC0_CH0_PSR_IISMode_AIF AIF, USIC0_CH0_PSR_IISMode_RIF RIF, USIC0_CH0_PSR_IISMode_TBIF TBIF, USIC0_CH0_PSR_IISMode_TSIF TSIF, USIC0_CH0_PSR_IISMode_DLIF DLIF, USIC0_CH0_PSR_IISMode_RSIF RSIF, USIC0_CH0_PSR_IISMode_END END, USIC0_CH0_PSR_IISMode_WARE WARE, USIC0_CH0_PSR_IISMode_WAFE WAFE, USIC0_CH0_PSR_IISMode_DX2TEV DX2TEV, USIC0_CH0_PSR_IISMode_DX2S DX2S, USIC0_CH0_PSR_IISMode_WA WA)
    {
        uint32_t curr = PSR_IISMode;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(BRGIF) & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(AIF) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(RIF) & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(TBIF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(TSIF) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(DLIF) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(RSIF) & 0b1u) << 10u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(END) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(WARE) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(WAFE) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(DX2TEV) & 0b1u) << 3u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(DX2S) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(WA) & 0b1u) << 0u;

        PSR_IISMode = curr;
    }

    /**
     * Set PSCR's CBRGIF bit.
     */
    inline void set_PSCR_CBRGIF()
    {
        PSCR |= 1u << 16u;
    }

    /**
     * Clear PSCR's CBRGIF bit.
     */
    inline void clear_PSCR_CBRGIF()
    {
        PSCR &= ~(1u << 16u);
    }

    /**
     * Toggle PSCR's CBRGIF bit.
     */
    inline void toggle_PSCR_CBRGIF()
    {
        PSCR ^= 1u << 16u;
    }

    /**
     * Set PSCR's CAIF bit.
     */
    inline void set_PSCR_CAIF()
    {
        PSCR |= 1u << 15u;
    }

    /**
     * Clear PSCR's CAIF bit.
     */
    inline void clear_PSCR_CAIF()
    {
        PSCR &= ~(1u << 15u);
    }

    /**
     * Toggle PSCR's CAIF bit.
     */
    inline void toggle_PSCR_CAIF()
    {
        PSCR ^= 1u << 15u;
    }

    /**
     * Set PSCR's CRIF bit.
     */
    inline void set_PSCR_CRIF()
    {
        PSCR |= 1u << 14u;
    }

    /**
     * Clear PSCR's CRIF bit.
     */
    inline void clear_PSCR_CRIF()
    {
        PSCR &= ~(1u << 14u);
    }

    /**
     * Toggle PSCR's CRIF bit.
     */
    inline void toggle_PSCR_CRIF()
    {
        PSCR ^= 1u << 14u;
    }

    /**
     * Set PSCR's CTBIF bit.
     */
    inline void set_PSCR_CTBIF()
    {
        PSCR |= 1u << 13u;
    }

    /**
     * Clear PSCR's CTBIF bit.
     */
    inline void clear_PSCR_CTBIF()
    {
        PSCR &= ~(1u << 13u);
    }

    /**
     * Toggle PSCR's CTBIF bit.
     */
    inline void toggle_PSCR_CTBIF()
    {
        PSCR ^= 1u << 13u;
    }

    /**
     * Set PSCR's CTSIF bit.
     */
    inline void set_PSCR_CTSIF()
    {
        PSCR |= 1u << 12u;
    }

    /**
     * Clear PSCR's CTSIF bit.
     */
    inline void clear_PSCR_CTSIF()
    {
        PSCR &= ~(1u << 12u);
    }

    /**
     * Toggle PSCR's CTSIF bit.
     */
    inline void toggle_PSCR_CTSIF()
    {
        PSCR ^= 1u << 12u;
    }

    /**
     * Set PSCR's CDLIF bit.
     */
    inline void set_PSCR_CDLIF()
    {
        PSCR |= 1u << 11u;
    }

    /**
     * Clear PSCR's CDLIF bit.
     */
    inline void clear_PSCR_CDLIF()
    {
        PSCR &= ~(1u << 11u);
    }

    /**
     * Toggle PSCR's CDLIF bit.
     */
    inline void toggle_PSCR_CDLIF()
    {
        PSCR ^= 1u << 11u;
    }

    /**
     * Set PSCR's CRSIF bit.
     */
    inline void set_PSCR_CRSIF()
    {
        PSCR |= 1u << 10u;
    }

    /**
     * Clear PSCR's CRSIF bit.
     */
    inline void clear_PSCR_CRSIF()
    {
        PSCR &= ~(1u << 10u);
    }

    /**
     * Toggle PSCR's CRSIF bit.
     */
    inline void toggle_PSCR_CRSIF()
    {
        PSCR ^= 1u << 10u;
    }

    /**
     * Set PSCR's CST9 bit.
     */
    inline void set_PSCR_CST9()
    {
        PSCR |= 1u << 9u;
    }

    /**
     * Clear PSCR's CST9 bit.
     */
    inline void clear_PSCR_CST9()
    {
        PSCR &= ~(1u << 9u);
    }

    /**
     * Toggle PSCR's CST9 bit.
     */
    inline void toggle_PSCR_CST9()
    {
        PSCR ^= 1u << 9u;
    }

    /**
     * Set PSCR's CST8 bit.
     */
    inline void set_PSCR_CST8()
    {
        PSCR |= 1u << 8u;
    }

    /**
     * Clear PSCR's CST8 bit.
     */
    inline void clear_PSCR_CST8()
    {
        PSCR &= ~(1u << 8u);
    }

    /**
     * Toggle PSCR's CST8 bit.
     */
    inline void toggle_PSCR_CST8()
    {
        PSCR ^= 1u << 8u;
    }

    /**
     * Set PSCR's CST7 bit.
     */
    inline void set_PSCR_CST7()
    {
        PSCR |= 1u << 7u;
    }

    /**
     * Clear PSCR's CST7 bit.
     */
    inline void clear_PSCR_CST7()
    {
        PSCR &= ~(1u << 7u);
    }

    /**
     * Toggle PSCR's CST7 bit.
     */
    inline void toggle_PSCR_CST7()
    {
        PSCR ^= 1u << 7u;
    }

    /**
     * Set PSCR's CST6 bit.
     */
    inline void set_PSCR_CST6()
    {
        PSCR |= 1u << 6u;
    }

    /**
     * Clear PSCR's CST6 bit.
     */
    inline void clear_PSCR_CST6()
    {
        PSCR &= ~(1u << 6u);
    }

    /**
     * Toggle PSCR's CST6 bit.
     */
    inline void toggle_PSCR_CST6()
    {
        PSCR ^= 1u << 6u;
    }

    /**
     * Set PSCR's CST5 bit.
     */
    inline void set_PSCR_CST5()
    {
        PSCR |= 1u << 5u;
    }

    /**
     * Clear PSCR's CST5 bit.
     */
    inline void clear_PSCR_CST5()
    {
        PSCR &= ~(1u << 5u);
    }

    /**
     * Toggle PSCR's CST5 bit.
     */
    inline void toggle_PSCR_CST5()
    {
        PSCR ^= 1u << 5u;
    }

    /**
     * Set PSCR's CST4 bit.
     */
    inline void set_PSCR_CST4()
    {
        PSCR |= 1u << 4u;
    }

    /**
     * Clear PSCR's CST4 bit.
     */
    inline void clear_PSCR_CST4()
    {
        PSCR &= ~(1u << 4u);
    }

    /**
     * Toggle PSCR's CST4 bit.
     */
    inline void toggle_PSCR_CST4()
    {
        PSCR ^= 1u << 4u;
    }

    /**
     * Set PSCR's CST3 bit.
     */
    inline void set_PSCR_CST3()
    {
        PSCR |= 1u << 3u;
    }

    /**
     * Clear PSCR's CST3 bit.
     */
    inline void clear_PSCR_CST3()
    {
        PSCR &= ~(1u << 3u);
    }

    /**
     * Toggle PSCR's CST3 bit.
     */
    inline void toggle_PSCR_CST3()
    {
        PSCR ^= 1u << 3u;
    }

    /**
     * Set PSCR's CST2 bit.
     */
    inline void set_PSCR_CST2()
    {
        PSCR |= 1u << 2u;
    }

    /**
     * Clear PSCR's CST2 bit.
     */
    inline void clear_PSCR_CST2()
    {
        PSCR &= ~(1u << 2u);
    }

    /**
     * Toggle PSCR's CST2 bit.
     */
    inline void toggle_PSCR_CST2()
    {
        PSCR ^= 1u << 2u;
    }

    /**
     * Set PSCR's CST1 bit.
     */
    inline void set_PSCR_CST1()
    {
        PSCR |= 1u << 1u;
    }

    /**
     * Clear PSCR's CST1 bit.
     */
    inline void clear_PSCR_CST1()
    {
        PSCR &= ~(1u << 1u);
    }

    /**
     * Toggle PSCR's CST1 bit.
     */
    inline void toggle_PSCR_CST1()
    {
        PSCR ^= 1u << 1u;
    }

    /**
     * Set PSCR's CST0 bit.
     */
    inline void set_PSCR_CST0()
    {
        PSCR |= 1u << 0u;
    }

    /**
     * Clear PSCR's CST0 bit.
     */
    inline void clear_PSCR_CST0()
    {
        PSCR &= ~(1u << 0u);
    }

    /**
     * Toggle PSCR's CST0 bit.
     */
    inline void toggle_PSCR_CST0()
    {
        PSCR ^= 1u << 0u;
    }

    /**
     * Set all of PSCR's bit fields.
     */
    inline void set_PSCR(USIC0_CH0_PSCR_CBRGIF CBRGIF, USIC0_CH0_PSCR_CAIF CAIF, USIC0_CH0_PSCR_CRIF CRIF, USIC0_CH0_PSCR_CTBIF CTBIF, USIC0_CH0_PSCR_CTSIF CTSIF, USIC0_CH0_PSCR_CDLIF CDLIF, USIC0_CH0_PSCR_CRSIF CRSIF, USIC0_CH0_PSCR_CST9 CST9, USIC0_CH0_PSCR_CST8 CST8, USIC0_CH0_PSCR_CST7 CST7, USIC0_CH0_PSCR_CST6 CST6, USIC0_CH0_PSCR_CST5 CST5, USIC0_CH0_PSCR_CST4 CST4, USIC0_CH0_PSCR_CST3 CST3, USIC0_CH0_PSCR_CST2 CST2, USIC0_CH0_PSCR_CST1 CST1, USIC0_CH0_PSCR_CST0 CST0)
    {
        uint32_t curr = PSCR;

        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(CBRGIF) & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(CAIF) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(CRIF) & 0b1u) << 14u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(CTBIF) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(CTSIF) & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (std::to_underlying(CDLIF) & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(CRSIF) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(CST9) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(CST8) & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (std::to_underlying(CST7) & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (std::to_underlying(CST6) & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (std::to_underlying(CST5) & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(CST4) & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (std::to_underlying(CST3) & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CST2) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CST1) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CST0) & 0b1u) << 0u;

        PSCR = curr;
    }

    /**
     * Get RBUFSR's DS bit.
     */
    inline bool get_RBUFSR_DS()
    {
        return RBUFSR & (1u << 15u);
    }

    /**
     * Get RBUFSR's RDV1 bit.
     */
    inline bool get_RBUFSR_RDV1()
    {
        return RBUFSR & (1u << 14u);
    }

    /**
     * Get RBUFSR's RDV0 bit.
     */
    inline bool get_RBUFSR_RDV0()
    {
        return RBUFSR & (1u << 13u);
    }

    /**
     * Get RBUFSR's PERR bit.
     */
    inline bool get_RBUFSR_PERR()
    {
        return RBUFSR & (1u << 9u);
    }

    /**
     * Get RBUFSR's PAR bit.
     */
    inline bool get_RBUFSR_PAR()
    {
        return RBUFSR & (1u << 8u);
    }

    /**
     * Get RBUFSR's SOF bit.
     */
    inline bool get_RBUFSR_SOF()
    {
        return RBUFSR & (1u << 6u);
    }

    /**
     * Get RBUFSR's WLEN field.
     */
    inline uint8_t get_RBUFSR_WLEN()
    {
        return (RBUFSR >> 0u) & 0b1111u;
    }

    /**
     * Get all of RBUFSR's bit fields.
     */
    inline void get_RBUFSR(bool &DS, bool &RDV1, bool &RDV0, bool &PERR, bool &PAR, bool &SOF, uint8_t &WLEN)
    {
        uint32_t curr = RBUFSR;

        DS = curr & (1u << 15u);
        RDV1 = curr & (1u << 14u);
        RDV0 = curr & (1u << 13u);
        PERR = curr & (1u << 9u);
        PAR = curr & (1u << 8u);
        SOF = curr & (1u << 6u);
        WLEN = (curr >> 0u) & 0b1111u;
    }

    /**
     * Get RBUF's DSR field.
     */
    inline uint16_t get_RBUF_DSR()
    {
        return (RBUF >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RBUFD's DSR field.
     */
    inline uint16_t get_RBUFD_DSR()
    {
        return (RBUFD >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RBUF0's DSR0 field.
     */
    inline uint16_t get_RBUF0_DSR0()
    {
        return (RBUF0 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RBUF1's DSR1 field.
     */
    inline uint16_t get_RBUF1_DSR1()
    {
        return (RBUF1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get RBUF01SR's DS1 bit.
     */
    inline USIC0_CH0_RBUF01SR_DS1 get_RBUF01SR_DS1()
    {
        return USIC0_CH0_RBUF01SR_DS1(RBUF01SR & (1u << 31u));
    }

    /**
     * Get RBUF01SR's RDV11 bit.
     */
    inline USIC0_CH0_RBUF01SR_RDV11 get_RBUF01SR_RDV11()
    {
        return USIC0_CH0_RBUF01SR_RDV11(RBUF01SR & (1u << 30u));
    }

    /**
     * Get RBUF01SR's RDV10 bit.
     */
    inline USIC0_CH0_RBUF01SR_RDV10 get_RBUF01SR_RDV10()
    {
        return USIC0_CH0_RBUF01SR_RDV10(RBUF01SR & (1u << 29u));
    }

    /**
     * Get RBUF01SR's PERR1 bit.
     */
    inline USIC0_CH0_RBUF01SR_PERR1 get_RBUF01SR_PERR1()
    {
        return USIC0_CH0_RBUF01SR_PERR1(RBUF01SR & (1u << 25u));
    }

    /**
     * Get RBUF01SR's PAR1 bit.
     */
    inline bool get_RBUF01SR_PAR1()
    {
        return RBUF01SR & (1u << 24u);
    }

    /**
     * Get RBUF01SR's SOF1 bit.
     */
    inline USIC0_CH0_RBUF01SR_SOF1 get_RBUF01SR_SOF1()
    {
        return USIC0_CH0_RBUF01SR_SOF1(RBUF01SR & (1u << 22u));
    }

    /**
     * Get RBUF01SR's WLEN1 field.
     */
    inline USIC0_CH0_RBUF01SR_WLEN1 get_RBUF01SR_WLEN1()
    {
        return USIC0_CH0_RBUF01SR_WLEN1((RBUF01SR >> 16u) & 0b1111u);
    }

    /**
     * Get RBUF01SR's DS0 bit.
     */
    inline USIC0_CH0_RBUF01SR_DS0 get_RBUF01SR_DS0()
    {
        return USIC0_CH0_RBUF01SR_DS0(RBUF01SR & (1u << 15u));
    }

    /**
     * Get RBUF01SR's RDV01 bit.
     */
    inline USIC0_CH0_RBUF01SR_RDV01 get_RBUF01SR_RDV01()
    {
        return USIC0_CH0_RBUF01SR_RDV01(RBUF01SR & (1u << 14u));
    }

    /**
     * Get RBUF01SR's RDV00 bit.
     */
    inline USIC0_CH0_RBUF01SR_RDV00 get_RBUF01SR_RDV00()
    {
        return USIC0_CH0_RBUF01SR_RDV00(RBUF01SR & (1u << 13u));
    }

    /**
     * Get RBUF01SR's PERR0 bit.
     */
    inline USIC0_CH0_RBUF01SR_PERR0 get_RBUF01SR_PERR0()
    {
        return USIC0_CH0_RBUF01SR_PERR0(RBUF01SR & (1u << 9u));
    }

    /**
     * Get RBUF01SR's PAR0 bit.
     */
    inline bool get_RBUF01SR_PAR0()
    {
        return RBUF01SR & (1u << 8u);
    }

    /**
     * Get RBUF01SR's SOF0 bit.
     */
    inline USIC0_CH0_RBUF01SR_SOF0 get_RBUF01SR_SOF0()
    {
        return USIC0_CH0_RBUF01SR_SOF0(RBUF01SR & (1u << 6u));
    }

    /**
     * Get RBUF01SR's WLEN0 field.
     */
    inline uint8_t get_RBUF01SR_WLEN0()
    {
        return (RBUF01SR >> 0u) & 0b1111u;
    }

    /**
     * Get all of RBUF01SR's bit fields.
     */
    inline void get_RBUF01SR(USIC0_CH0_RBUF01SR_DS1 &DS1, USIC0_CH0_RBUF01SR_RDV11 &RDV11, USIC0_CH0_RBUF01SR_RDV10 &RDV10, USIC0_CH0_RBUF01SR_PERR1 &PERR1, bool &PAR1, USIC0_CH0_RBUF01SR_SOF1 &SOF1, USIC0_CH0_RBUF01SR_WLEN1 &WLEN1, USIC0_CH0_RBUF01SR_DS0 &DS0, USIC0_CH0_RBUF01SR_RDV01 &RDV01, USIC0_CH0_RBUF01SR_RDV00 &RDV00, USIC0_CH0_RBUF01SR_PERR0 &PERR0, bool &PAR0, USIC0_CH0_RBUF01SR_SOF0 &SOF0, uint8_t &WLEN0)
    {
        uint32_t curr = RBUF01SR;

        DS1 = USIC0_CH0_RBUF01SR_DS1(curr & (1u << 31u));
        RDV11 = USIC0_CH0_RBUF01SR_RDV11(curr & (1u << 30u));
        RDV10 = USIC0_CH0_RBUF01SR_RDV10(curr & (1u << 29u));
        PERR1 = USIC0_CH0_RBUF01SR_PERR1(curr & (1u << 25u));
        PAR1 = curr & (1u << 24u);
        SOF1 = USIC0_CH0_RBUF01SR_SOF1(curr & (1u << 22u));
        WLEN1 = USIC0_CH0_RBUF01SR_WLEN1((curr >> 16u) & 0b1111u);
        DS0 = USIC0_CH0_RBUF01SR_DS0(curr & (1u << 15u));
        RDV01 = USIC0_CH0_RBUF01SR_RDV01(curr & (1u << 14u));
        RDV00 = USIC0_CH0_RBUF01SR_RDV00(curr & (1u << 13u));
        PERR0 = USIC0_CH0_RBUF01SR_PERR0(curr & (1u << 9u));
        PAR0 = curr & (1u << 8u);
        SOF0 = USIC0_CH0_RBUF01SR_SOF0(curr & (1u << 6u));
        WLEN0 = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set FMR's SIO5 bit.
     */
    inline void set_FMR_SIO5()
    {
        FMR |= 1u << 21u;
    }

    /**
     * Clear FMR's SIO5 bit.
     */
    inline void clear_FMR_SIO5()
    {
        FMR &= ~(1u << 21u);
    }

    /**
     * Toggle FMR's SIO5 bit.
     */
    inline void toggle_FMR_SIO5()
    {
        FMR ^= 1u << 21u;
    }

    /**
     * Set FMR's SIO4 bit.
     */
    inline void set_FMR_SIO4()
    {
        FMR |= 1u << 20u;
    }

    /**
     * Clear FMR's SIO4 bit.
     */
    inline void clear_FMR_SIO4()
    {
        FMR &= ~(1u << 20u);
    }

    /**
     * Toggle FMR's SIO4 bit.
     */
    inline void toggle_FMR_SIO4()
    {
        FMR ^= 1u << 20u;
    }

    /**
     * Set FMR's SIO3 bit.
     */
    inline void set_FMR_SIO3()
    {
        FMR |= 1u << 19u;
    }

    /**
     * Clear FMR's SIO3 bit.
     */
    inline void clear_FMR_SIO3()
    {
        FMR &= ~(1u << 19u);
    }

    /**
     * Toggle FMR's SIO3 bit.
     */
    inline void toggle_FMR_SIO3()
    {
        FMR ^= 1u << 19u;
    }

    /**
     * Set FMR's SIO2 bit.
     */
    inline void set_FMR_SIO2()
    {
        FMR |= 1u << 18u;
    }

    /**
     * Clear FMR's SIO2 bit.
     */
    inline void clear_FMR_SIO2()
    {
        FMR &= ~(1u << 18u);
    }

    /**
     * Toggle FMR's SIO2 bit.
     */
    inline void toggle_FMR_SIO2()
    {
        FMR ^= 1u << 18u;
    }

    /**
     * Set FMR's SIO1 bit.
     */
    inline void set_FMR_SIO1()
    {
        FMR |= 1u << 17u;
    }

    /**
     * Clear FMR's SIO1 bit.
     */
    inline void clear_FMR_SIO1()
    {
        FMR &= ~(1u << 17u);
    }

    /**
     * Toggle FMR's SIO1 bit.
     */
    inline void toggle_FMR_SIO1()
    {
        FMR ^= 1u << 17u;
    }

    /**
     * Set FMR's SIO0 bit.
     */
    inline void set_FMR_SIO0()
    {
        FMR |= 1u << 16u;
    }

    /**
     * Clear FMR's SIO0 bit.
     */
    inline void clear_FMR_SIO0()
    {
        FMR &= ~(1u << 16u);
    }

    /**
     * Toggle FMR's SIO0 bit.
     */
    inline void toggle_FMR_SIO0()
    {
        FMR ^= 1u << 16u;
    }

    /**
     * Set FMR's CRDV1 bit.
     */
    inline void set_FMR_CRDV1()
    {
        FMR |= 1u << 15u;
    }

    /**
     * Clear FMR's CRDV1 bit.
     */
    inline void clear_FMR_CRDV1()
    {
        FMR &= ~(1u << 15u);
    }

    /**
     * Toggle FMR's CRDV1 bit.
     */
    inline void toggle_FMR_CRDV1()
    {
        FMR ^= 1u << 15u;
    }

    /**
     * Set FMR's CRDV0 bit.
     */
    inline void set_FMR_CRDV0()
    {
        FMR |= 1u << 14u;
    }

    /**
     * Clear FMR's CRDV0 bit.
     */
    inline void clear_FMR_CRDV0()
    {
        FMR &= ~(1u << 14u);
    }

    /**
     * Toggle FMR's CRDV0 bit.
     */
    inline void toggle_FMR_CRDV0()
    {
        FMR ^= 1u << 14u;
    }

    /**
     * Set FMR's ATVC bit.
     */
    inline void set_FMR_ATVC()
    {
        FMR |= 1u << 4u;
    }

    /**
     * Clear FMR's ATVC bit.
     */
    inline void clear_FMR_ATVC()
    {
        FMR &= ~(1u << 4u);
    }

    /**
     * Toggle FMR's ATVC bit.
     */
    inline void toggle_FMR_ATVC()
    {
        FMR ^= 1u << 4u;
    }

    /**
     * Set FMR's MTDV field.
     */
    inline void set_FMR_MTDV(USIC0_CH0_FMR_MTDV value)
    {
        uint32_t curr = FMR;

        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(value) & 0b11u) << 0u;

        FMR = curr;
    }

    /**
     * Set all of FMR's bit fields.
     */
    inline void set_FMR(USIC0_CH0_FMR_SIO5 SIO5, USIC0_CH0_FMR_SIO4 SIO4, USIC0_CH0_FMR_SIO3 SIO3, USIC0_CH0_FMR_SIO2 SIO2, USIC0_CH0_FMR_SIO1 SIO1, USIC0_CH0_FMR_SIO0 SIO0, USIC0_CH0_FMR_CRDV1 CRDV1, USIC0_CH0_FMR_CRDV0 CRDV0, USIC0_CH0_FMR_ATVC ATVC, USIC0_CH0_FMR_MTDV MTDV)
    {
        uint32_t curr = FMR;

        curr &= ~(0b1u << 21u);
        curr |= (std::to_underlying(SIO5) & 0b1u) << 21u;
        curr &= ~(0b1u << 20u);
        curr |= (std::to_underlying(SIO4) & 0b1u) << 20u;
        curr &= ~(0b1u << 19u);
        curr |= (std::to_underlying(SIO3) & 0b1u) << 19u;
        curr &= ~(0b1u << 18u);
        curr |= (std::to_underlying(SIO2) & 0b1u) << 18u;
        curr &= ~(0b1u << 17u);
        curr |= (std::to_underlying(SIO1) & 0b1u) << 17u;
        curr &= ~(0b1u << 16u);
        curr |= (std::to_underlying(SIO0) & 0b1u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(CRDV1) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(CRDV0) & 0b1u) << 14u;
        curr &= ~(0b1u << 4u);
        curr |= (std::to_underlying(ATVC) & 0b1u) << 4u;
        curr &= ~(0b11u << 0u);
        curr |= (std::to_underlying(MTDV) & 0b11u) << 0u;

        FMR = curr;
    }

    /**
     * Get TBUF's TDATA field.
     */
    inline uint16_t get_TBUF_TDATA(std::size_t index)
    {
        return (TBUF[index] >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set TBUF's TDATA field.
     */
    inline void set_TBUF_TDATA(std::size_t index, uint16_t value)
    {
        uint32_t curr = TBUF[index];

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        TBUF[index] = curr;
    }

    /**
     * Get BYP's BDATA field.
     */
    inline uint16_t get_BYP_BDATA()
    {
        return (BYP >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set BYP's BDATA field.
     */
    inline void set_BYP_BDATA(uint16_t value)
    {
        uint32_t curr = BYP;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        BYP = curr;
    }

    /**
     * Get BYPCR's BHPC field.
     */
    inline uint8_t get_BYPCR_BHPC()
    {
        return (BYPCR >> 21u) & 0b111u;
    }

    /**
     * Set BYPCR's BHPC field.
     */
    inline void set_BYPCR_BHPC(uint8_t value)
    {
        uint32_t curr = BYPCR;

        curr &= ~(0b111u << 21u);
        curr |= (value & 0b111u) << 21u;

        BYPCR = curr;
    }

    /**
     * Get BYPCR's BSELO field.
     */
    inline uint8_t get_BYPCR_BSELO()
    {
        return (BYPCR >> 16u) & 0b11111u;
    }

    /**
     * Set BYPCR's BSELO field.
     */
    inline void set_BYPCR_BSELO(uint8_t value)
    {
        uint32_t curr = BYPCR;

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        BYPCR = curr;
    }

    /**
     * Get BYPCR's BDV bit.
     */
    inline USIC0_CH0_BYPCR_BDV get_BYPCR_BDV()
    {
        return USIC0_CH0_BYPCR_BDV(BYPCR & (1u << 15u));
    }

    /**
     * Get BYPCR's BPRIO bit.
     */
    inline USIC0_CH0_BYPCR_BPRIO get_BYPCR_BPRIO()
    {
        return USIC0_CH0_BYPCR_BPRIO(BYPCR & (1u << 13u));
    }

    /**
     * Set BYPCR's BPRIO bit.
     */
    inline void set_BYPCR_BPRIO()
    {
        BYPCR |= 1u << 13u;
    }

    /**
     * Clear BYPCR's BPRIO bit.
     */
    inline void clear_BYPCR_BPRIO()
    {
        BYPCR &= ~(1u << 13u);
    }

    /**
     * Toggle BYPCR's BPRIO bit.
     */
    inline void toggle_BYPCR_BPRIO()
    {
        BYPCR ^= 1u << 13u;
    }

    /**
     * Get BYPCR's BDVTR bit.
     */
    inline USIC0_CH0_BYPCR_BDVTR get_BYPCR_BDVTR()
    {
        return USIC0_CH0_BYPCR_BDVTR(BYPCR & (1u << 12u));
    }

    /**
     * Set BYPCR's BDVTR bit.
     */
    inline void set_BYPCR_BDVTR()
    {
        BYPCR |= 1u << 12u;
    }

    /**
     * Clear BYPCR's BDVTR bit.
     */
    inline void clear_BYPCR_BDVTR()
    {
        BYPCR &= ~(1u << 12u);
    }

    /**
     * Toggle BYPCR's BDVTR bit.
     */
    inline void toggle_BYPCR_BDVTR()
    {
        BYPCR ^= 1u << 12u;
    }

    /**
     * Get BYPCR's BDEN field.
     */
    inline USIC0_CH0_BYPCR_BDEN get_BYPCR_BDEN()
    {
        return USIC0_CH0_BYPCR_BDEN((BYPCR >> 10u) & 0b11u);
    }

    /**
     * Set BYPCR's BDEN field.
     */
    inline void set_BYPCR_BDEN(USIC0_CH0_BYPCR_BDEN value)
    {
        uint32_t curr = BYPCR;

        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(value) & 0b11u) << 10u;

        BYPCR = curr;
    }

    /**
     * Get BYPCR's BDSSM bit.
     */
    inline USIC0_CH0_BYPCR_BDSSM get_BYPCR_BDSSM()
    {
        return USIC0_CH0_BYPCR_BDSSM(BYPCR & (1u << 8u));
    }

    /**
     * Set BYPCR's BDSSM bit.
     */
    inline void set_BYPCR_BDSSM()
    {
        BYPCR |= 1u << 8u;
    }

    /**
     * Clear BYPCR's BDSSM bit.
     */
    inline void clear_BYPCR_BDSSM()
    {
        BYPCR &= ~(1u << 8u);
    }

    /**
     * Toggle BYPCR's BDSSM bit.
     */
    inline void toggle_BYPCR_BDSSM()
    {
        BYPCR ^= 1u << 8u;
    }

    /**
     * Get BYPCR's BWLE field.
     */
    inline uint8_t get_BYPCR_BWLE()
    {
        return (BYPCR >> 0u) & 0b1111u;
    }

    /**
     * Set BYPCR's BWLE field.
     */
    inline void set_BYPCR_BWLE(uint8_t value)
    {
        uint32_t curr = BYPCR;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        BYPCR = curr;
    }

    /**
     * Get all of BYPCR's bit fields.
     */
    inline void get_BYPCR(uint8_t &BHPC, uint8_t &BSELO, USIC0_CH0_BYPCR_BDV &BDV, USIC0_CH0_BYPCR_BPRIO &BPRIO, USIC0_CH0_BYPCR_BDVTR &BDVTR, USIC0_CH0_BYPCR_BDEN &BDEN, USIC0_CH0_BYPCR_BDSSM &BDSSM, uint8_t &BWLE)
    {
        uint32_t curr = BYPCR;

        BHPC = (curr >> 21u) & 0b111u;
        BSELO = (curr >> 16u) & 0b11111u;
        BDV = USIC0_CH0_BYPCR_BDV(curr & (1u << 15u));
        BPRIO = USIC0_CH0_BYPCR_BPRIO(curr & (1u << 13u));
        BDVTR = USIC0_CH0_BYPCR_BDVTR(curr & (1u << 12u));
        BDEN = USIC0_CH0_BYPCR_BDEN((curr >> 10u) & 0b11u);
        BDSSM = USIC0_CH0_BYPCR_BDSSM(curr & (1u << 8u));
        BWLE = (curr >> 0u) & 0b1111u;
    }

    /**
     * Set all of BYPCR's bit fields.
     */
    inline void set_BYPCR(uint8_t BHPC, uint8_t BSELO, USIC0_CH0_BYPCR_BPRIO BPRIO, USIC0_CH0_BYPCR_BDVTR BDVTR, USIC0_CH0_BYPCR_BDEN BDEN, USIC0_CH0_BYPCR_BDSSM BDSSM, uint8_t BWLE)
    {
        uint32_t curr = BYPCR;

        curr &= ~(0b111u << 21u);
        curr |= (BHPC & 0b111u) << 21u;
        curr &= ~(0b11111u << 16u);
        curr |= (BSELO & 0b11111u) << 16u;
        curr &= ~(0b1u << 13u);
        curr |= (std::to_underlying(BPRIO) & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (std::to_underlying(BDVTR) & 0b1u) << 12u;
        curr &= ~(0b11u << 10u);
        curr |= (std::to_underlying(BDEN) & 0b11u) << 10u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(BDSSM) & 0b1u) << 8u;
        curr &= ~(0b1111u << 0u);
        curr |= (BWLE & 0b1111u) << 0u;

        BYPCR = curr;
    }

    /**
     * Get TBCTR's TBERIEN bit.
     */
    inline USIC0_CH0_TBCTR_TBERIEN get_TBCTR_TBERIEN()
    {
        return USIC0_CH0_TBCTR_TBERIEN(TBCTR & (1u << 31u));
    }

    /**
     * Set TBCTR's TBERIEN bit.
     */
    inline void set_TBCTR_TBERIEN()
    {
        TBCTR |= 1u << 31u;
    }

    /**
     * Clear TBCTR's TBERIEN bit.
     */
    inline void clear_TBCTR_TBERIEN()
    {
        TBCTR &= ~(1u << 31u);
    }

    /**
     * Toggle TBCTR's TBERIEN bit.
     */
    inline void toggle_TBCTR_TBERIEN()
    {
        TBCTR ^= 1u << 31u;
    }

    /**
     * Get TBCTR's STBIEN bit.
     */
    inline USIC0_CH0_TBCTR_STBIEN get_TBCTR_STBIEN()
    {
        return USIC0_CH0_TBCTR_STBIEN(TBCTR & (1u << 30u));
    }

    /**
     * Set TBCTR's STBIEN bit.
     */
    inline void set_TBCTR_STBIEN()
    {
        TBCTR |= 1u << 30u;
    }

    /**
     * Clear TBCTR's STBIEN bit.
     */
    inline void clear_TBCTR_STBIEN()
    {
        TBCTR &= ~(1u << 30u);
    }

    /**
     * Toggle TBCTR's STBIEN bit.
     */
    inline void toggle_TBCTR_STBIEN()
    {
        TBCTR ^= 1u << 30u;
    }

    /**
     * Get TBCTR's LOF bit.
     */
    inline USIC0_CH0_TBCTR_LOF get_TBCTR_LOF()
    {
        return USIC0_CH0_TBCTR_LOF(TBCTR & (1u << 28u));
    }

    /**
     * Set TBCTR's LOF bit.
     */
    inline void set_TBCTR_LOF()
    {
        TBCTR |= 1u << 28u;
    }

    /**
     * Clear TBCTR's LOF bit.
     */
    inline void clear_TBCTR_LOF()
    {
        TBCTR &= ~(1u << 28u);
    }

    /**
     * Toggle TBCTR's LOF bit.
     */
    inline void toggle_TBCTR_LOF()
    {
        TBCTR ^= 1u << 28u;
    }

    /**
     * Get TBCTR's SIZE field.
     */
    inline USIC0_CH0_TBCTR_SIZE get_TBCTR_SIZE()
    {
        return USIC0_CH0_TBCTR_SIZE((TBCTR >> 24u) & 0b111u);
    }

    /**
     * Set TBCTR's SIZE field.
     */
    inline void set_TBCTR_SIZE(USIC0_CH0_TBCTR_SIZE value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        TBCTR = curr;
    }

    /**
     * Get TBCTR's ATBINP field.
     */
    inline USIC0_CH0_TBCTR_ATBINP get_TBCTR_ATBINP()
    {
        return USIC0_CH0_TBCTR_ATBINP((TBCTR >> 19u) & 0b111u);
    }

    /**
     * Set TBCTR's ATBINP field.
     */
    inline void set_TBCTR_ATBINP(USIC0_CH0_TBCTR_ATBINP value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111u << 19u);
        curr |= (std::to_underlying(value) & 0b111u) << 19u;

        TBCTR = curr;
    }

    /**
     * Get TBCTR's STBINP field.
     */
    inline USIC0_CH0_TBCTR_STBINP get_TBCTR_STBINP()
    {
        return USIC0_CH0_TBCTR_STBINP((TBCTR >> 16u) & 0b111u);
    }

    /**
     * Set TBCTR's STBINP field.
     */
    inline void set_TBCTR_STBINP(USIC0_CH0_TBCTR_STBINP value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        TBCTR = curr;
    }

    /**
     * Get TBCTR's STBTEN bit.
     */
    inline USIC0_CH0_TBCTR_STBTEN get_TBCTR_STBTEN()
    {
        return USIC0_CH0_TBCTR_STBTEN(TBCTR & (1u << 15u));
    }

    /**
     * Set TBCTR's STBTEN bit.
     */
    inline void set_TBCTR_STBTEN()
    {
        TBCTR |= 1u << 15u;
    }

    /**
     * Clear TBCTR's STBTEN bit.
     */
    inline void clear_TBCTR_STBTEN()
    {
        TBCTR &= ~(1u << 15u);
    }

    /**
     * Toggle TBCTR's STBTEN bit.
     */
    inline void toggle_TBCTR_STBTEN()
    {
        TBCTR ^= 1u << 15u;
    }

    /**
     * Get TBCTR's STBTM bit.
     */
    inline USIC0_CH0_TBCTR_STBTM get_TBCTR_STBTM()
    {
        return USIC0_CH0_TBCTR_STBTM(TBCTR & (1u << 14u));
    }

    /**
     * Set TBCTR's STBTM bit.
     */
    inline void set_TBCTR_STBTM()
    {
        TBCTR |= 1u << 14u;
    }

    /**
     * Clear TBCTR's STBTM bit.
     */
    inline void clear_TBCTR_STBTM()
    {
        TBCTR &= ~(1u << 14u);
    }

    /**
     * Toggle TBCTR's STBTM bit.
     */
    inline void toggle_TBCTR_STBTM()
    {
        TBCTR ^= 1u << 14u;
    }

    /**
     * Get TBCTR's LIMIT field.
     */
    inline uint8_t get_TBCTR_LIMIT()
    {
        return (TBCTR >> 8u) & 0b111111u;
    }

    /**
     * Set TBCTR's LIMIT field.
     */
    inline void set_TBCTR_LIMIT(uint8_t value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        TBCTR = curr;
    }

    /**
     * Set TBCTR's DPTR field.
     */
    inline void set_TBCTR_DPTR(uint8_t value)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        TBCTR = curr;
    }

    /**
     * Get all of TBCTR's bit fields.
     */
    inline void get_TBCTR(USIC0_CH0_TBCTR_TBERIEN &TBERIEN, USIC0_CH0_TBCTR_STBIEN &STBIEN, USIC0_CH0_TBCTR_LOF &LOF, USIC0_CH0_TBCTR_SIZE &SIZE, USIC0_CH0_TBCTR_ATBINP &ATBINP, USIC0_CH0_TBCTR_STBINP &STBINP, USIC0_CH0_TBCTR_STBTEN &STBTEN, USIC0_CH0_TBCTR_STBTM &STBTM, uint8_t &LIMIT)
    {
        uint32_t curr = TBCTR;

        TBERIEN = USIC0_CH0_TBCTR_TBERIEN(curr & (1u << 31u));
        STBIEN = USIC0_CH0_TBCTR_STBIEN(curr & (1u << 30u));
        LOF = USIC0_CH0_TBCTR_LOF(curr & (1u << 28u));
        SIZE = USIC0_CH0_TBCTR_SIZE((curr >> 24u) & 0b111u);
        ATBINP = USIC0_CH0_TBCTR_ATBINP((curr >> 19u) & 0b111u);
        STBINP = USIC0_CH0_TBCTR_STBINP((curr >> 16u) & 0b111u);
        STBTEN = USIC0_CH0_TBCTR_STBTEN(curr & (1u << 15u));
        STBTM = USIC0_CH0_TBCTR_STBTM(curr & (1u << 14u));
        LIMIT = (curr >> 8u) & 0b111111u;
    }

    /**
     * Set all of TBCTR's bit fields.
     */
    inline void set_TBCTR(USIC0_CH0_TBCTR_TBERIEN TBERIEN, USIC0_CH0_TBCTR_STBIEN STBIEN, USIC0_CH0_TBCTR_LOF LOF, USIC0_CH0_TBCTR_SIZE SIZE, USIC0_CH0_TBCTR_ATBINP ATBINP, USIC0_CH0_TBCTR_STBINP STBINP, USIC0_CH0_TBCTR_STBTEN STBTEN, USIC0_CH0_TBCTR_STBTM STBTM, uint8_t LIMIT, uint8_t DPTR)
    {
        uint32_t curr = TBCTR;

        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(TBERIEN) & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (std::to_underlying(STBIEN) & 0b1u) << 30u;
        curr &= ~(0b1u << 28u);
        curr |= (std::to_underlying(LOF) & 0b1u) << 28u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(SIZE) & 0b111u) << 24u;
        curr &= ~(0b111u << 19u);
        curr |= (std::to_underlying(ATBINP) & 0b111u) << 19u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(STBINP) & 0b111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(STBTEN) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(STBTM) & 0b1u) << 14u;
        curr &= ~(0b111111u << 8u);
        curr |= (LIMIT & 0b111111u) << 8u;
        curr &= ~(0b111111u << 0u);
        curr |= (DPTR & 0b111111u) << 0u;

        TBCTR = curr;
    }

    /**
     * Get RBCTR's RBERIEN bit.
     */
    inline USIC0_CH0_RBCTR_RBERIEN get_RBCTR_RBERIEN()
    {
        return USIC0_CH0_RBCTR_RBERIEN(RBCTR & (1u << 31u));
    }

    /**
     * Set RBCTR's RBERIEN bit.
     */
    inline void set_RBCTR_RBERIEN()
    {
        RBCTR |= 1u << 31u;
    }

    /**
     * Clear RBCTR's RBERIEN bit.
     */
    inline void clear_RBCTR_RBERIEN()
    {
        RBCTR &= ~(1u << 31u);
    }

    /**
     * Toggle RBCTR's RBERIEN bit.
     */
    inline void toggle_RBCTR_RBERIEN()
    {
        RBCTR ^= 1u << 31u;
    }

    /**
     * Get RBCTR's SRBIEN bit.
     */
    inline USIC0_CH0_RBCTR_SRBIEN get_RBCTR_SRBIEN()
    {
        return USIC0_CH0_RBCTR_SRBIEN(RBCTR & (1u << 30u));
    }

    /**
     * Set RBCTR's SRBIEN bit.
     */
    inline void set_RBCTR_SRBIEN()
    {
        RBCTR |= 1u << 30u;
    }

    /**
     * Clear RBCTR's SRBIEN bit.
     */
    inline void clear_RBCTR_SRBIEN()
    {
        RBCTR &= ~(1u << 30u);
    }

    /**
     * Toggle RBCTR's SRBIEN bit.
     */
    inline void toggle_RBCTR_SRBIEN()
    {
        RBCTR ^= 1u << 30u;
    }

    /**
     * Get RBCTR's ARBIEN bit.
     */
    inline USIC0_CH0_RBCTR_ARBIEN get_RBCTR_ARBIEN()
    {
        return USIC0_CH0_RBCTR_ARBIEN(RBCTR & (1u << 29u));
    }

    /**
     * Set RBCTR's ARBIEN bit.
     */
    inline void set_RBCTR_ARBIEN()
    {
        RBCTR |= 1u << 29u;
    }

    /**
     * Clear RBCTR's ARBIEN bit.
     */
    inline void clear_RBCTR_ARBIEN()
    {
        RBCTR &= ~(1u << 29u);
    }

    /**
     * Toggle RBCTR's ARBIEN bit.
     */
    inline void toggle_RBCTR_ARBIEN()
    {
        RBCTR ^= 1u << 29u;
    }

    /**
     * Get RBCTR's LOF bit.
     */
    inline USIC0_CH0_RBCTR_LOF get_RBCTR_LOF()
    {
        return USIC0_CH0_RBCTR_LOF(RBCTR & (1u << 28u));
    }

    /**
     * Set RBCTR's LOF bit.
     */
    inline void set_RBCTR_LOF()
    {
        RBCTR |= 1u << 28u;
    }

    /**
     * Clear RBCTR's LOF bit.
     */
    inline void clear_RBCTR_LOF()
    {
        RBCTR &= ~(1u << 28u);
    }

    /**
     * Toggle RBCTR's LOF bit.
     */
    inline void toggle_RBCTR_LOF()
    {
        RBCTR ^= 1u << 28u;
    }

    /**
     * Get RBCTR's RNM bit.
     */
    inline USIC0_CH0_RBCTR_RNM get_RBCTR_RNM()
    {
        return USIC0_CH0_RBCTR_RNM(RBCTR & (1u << 27u));
    }

    /**
     * Set RBCTR's RNM bit.
     */
    inline void set_RBCTR_RNM()
    {
        RBCTR |= 1u << 27u;
    }

    /**
     * Clear RBCTR's RNM bit.
     */
    inline void clear_RBCTR_RNM()
    {
        RBCTR &= ~(1u << 27u);
    }

    /**
     * Toggle RBCTR's RNM bit.
     */
    inline void toggle_RBCTR_RNM()
    {
        RBCTR ^= 1u << 27u;
    }

    /**
     * Get RBCTR's SIZE field.
     */
    inline USIC0_CH0_RBCTR_SIZE get_RBCTR_SIZE()
    {
        return USIC0_CH0_RBCTR_SIZE((RBCTR >> 24u) & 0b111u);
    }

    /**
     * Set RBCTR's SIZE field.
     */
    inline void set_RBCTR_SIZE(USIC0_CH0_RBCTR_SIZE value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(value) & 0b111u) << 24u;

        RBCTR = curr;
    }

    /**
     * Get RBCTR's RCIM field.
     */
    inline USIC0_CH0_RBCTR_RCIM get_RBCTR_RCIM()
    {
        return USIC0_CH0_RBCTR_RCIM((RBCTR >> 22u) & 0b11u);
    }

    /**
     * Set RBCTR's RCIM field.
     */
    inline void set_RBCTR_RCIM(USIC0_CH0_RBCTR_RCIM value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(value) & 0b11u) << 22u;

        RBCTR = curr;
    }

    /**
     * Get RBCTR's ARBINP field.
     */
    inline USIC0_CH0_RBCTR_ARBINP get_RBCTR_ARBINP()
    {
        return USIC0_CH0_RBCTR_ARBINP((RBCTR >> 19u) & 0b111u);
    }

    /**
     * Set RBCTR's ARBINP field.
     */
    inline void set_RBCTR_ARBINP(USIC0_CH0_RBCTR_ARBINP value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111u << 19u);
        curr |= (std::to_underlying(value) & 0b111u) << 19u;

        RBCTR = curr;
    }

    /**
     * Get RBCTR's SRBINP field.
     */
    inline USIC0_CH0_RBCTR_SRBINP get_RBCTR_SRBINP()
    {
        return USIC0_CH0_RBCTR_SRBINP((RBCTR >> 16u) & 0b111u);
    }

    /**
     * Set RBCTR's SRBINP field.
     */
    inline void set_RBCTR_SRBINP(USIC0_CH0_RBCTR_SRBINP value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(value) & 0b111u) << 16u;

        RBCTR = curr;
    }

    /**
     * Get RBCTR's SRBTEN bit.
     */
    inline USIC0_CH0_RBCTR_SRBTEN get_RBCTR_SRBTEN()
    {
        return USIC0_CH0_RBCTR_SRBTEN(RBCTR & (1u << 15u));
    }

    /**
     * Set RBCTR's SRBTEN bit.
     */
    inline void set_RBCTR_SRBTEN()
    {
        RBCTR |= 1u << 15u;
    }

    /**
     * Clear RBCTR's SRBTEN bit.
     */
    inline void clear_RBCTR_SRBTEN()
    {
        RBCTR &= ~(1u << 15u);
    }

    /**
     * Toggle RBCTR's SRBTEN bit.
     */
    inline void toggle_RBCTR_SRBTEN()
    {
        RBCTR ^= 1u << 15u;
    }

    /**
     * Get RBCTR's SRBTM bit.
     */
    inline USIC0_CH0_RBCTR_SRBTM get_RBCTR_SRBTM()
    {
        return USIC0_CH0_RBCTR_SRBTM(RBCTR & (1u << 14u));
    }

    /**
     * Set RBCTR's SRBTM bit.
     */
    inline void set_RBCTR_SRBTM()
    {
        RBCTR |= 1u << 14u;
    }

    /**
     * Clear RBCTR's SRBTM bit.
     */
    inline void clear_RBCTR_SRBTM()
    {
        RBCTR &= ~(1u << 14u);
    }

    /**
     * Toggle RBCTR's SRBTM bit.
     */
    inline void toggle_RBCTR_SRBTM()
    {
        RBCTR ^= 1u << 14u;
    }

    /**
     * Get RBCTR's LIMIT field.
     */
    inline uint8_t get_RBCTR_LIMIT()
    {
        return (RBCTR >> 8u) & 0b111111u;
    }

    /**
     * Set RBCTR's LIMIT field.
     */
    inline void set_RBCTR_LIMIT(uint8_t value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        RBCTR = curr;
    }

    /**
     * Set RBCTR's DPTR field.
     */
    inline void set_RBCTR_DPTR(uint8_t value)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        RBCTR = curr;
    }

    /**
     * Get all of RBCTR's bit fields.
     */
    inline void get_RBCTR(USIC0_CH0_RBCTR_RBERIEN &RBERIEN, USIC0_CH0_RBCTR_SRBIEN &SRBIEN, USIC0_CH0_RBCTR_ARBIEN &ARBIEN, USIC0_CH0_RBCTR_LOF &LOF, USIC0_CH0_RBCTR_RNM &RNM, USIC0_CH0_RBCTR_SIZE &SIZE, USIC0_CH0_RBCTR_RCIM &RCIM, USIC0_CH0_RBCTR_ARBINP &ARBINP, USIC0_CH0_RBCTR_SRBINP &SRBINP, USIC0_CH0_RBCTR_SRBTEN &SRBTEN, USIC0_CH0_RBCTR_SRBTM &SRBTM, uint8_t &LIMIT)
    {
        uint32_t curr = RBCTR;

        RBERIEN = USIC0_CH0_RBCTR_RBERIEN(curr & (1u << 31u));
        SRBIEN = USIC0_CH0_RBCTR_SRBIEN(curr & (1u << 30u));
        ARBIEN = USIC0_CH0_RBCTR_ARBIEN(curr & (1u << 29u));
        LOF = USIC0_CH0_RBCTR_LOF(curr & (1u << 28u));
        RNM = USIC0_CH0_RBCTR_RNM(curr & (1u << 27u));
        SIZE = USIC0_CH0_RBCTR_SIZE((curr >> 24u) & 0b111u);
        RCIM = USIC0_CH0_RBCTR_RCIM((curr >> 22u) & 0b11u);
        ARBINP = USIC0_CH0_RBCTR_ARBINP((curr >> 19u) & 0b111u);
        SRBINP = USIC0_CH0_RBCTR_SRBINP((curr >> 16u) & 0b111u);
        SRBTEN = USIC0_CH0_RBCTR_SRBTEN(curr & (1u << 15u));
        SRBTM = USIC0_CH0_RBCTR_SRBTM(curr & (1u << 14u));
        LIMIT = (curr >> 8u) & 0b111111u;
    }

    /**
     * Set all of RBCTR's bit fields.
     */
    inline void set_RBCTR(USIC0_CH0_RBCTR_RBERIEN RBERIEN, USIC0_CH0_RBCTR_SRBIEN SRBIEN, USIC0_CH0_RBCTR_ARBIEN ARBIEN, USIC0_CH0_RBCTR_LOF LOF, USIC0_CH0_RBCTR_RNM RNM, USIC0_CH0_RBCTR_SIZE SIZE, USIC0_CH0_RBCTR_RCIM RCIM, USIC0_CH0_RBCTR_ARBINP ARBINP, USIC0_CH0_RBCTR_SRBINP SRBINP, USIC0_CH0_RBCTR_SRBTEN SRBTEN, USIC0_CH0_RBCTR_SRBTM SRBTM, uint8_t LIMIT, uint8_t DPTR)
    {
        uint32_t curr = RBCTR;

        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(RBERIEN) & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (std::to_underlying(SRBIEN) & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(ARBIEN) & 0b1u) << 29u;
        curr &= ~(0b1u << 28u);
        curr |= (std::to_underlying(LOF) & 0b1u) << 28u;
        curr &= ~(0b1u << 27u);
        curr |= (std::to_underlying(RNM) & 0b1u) << 27u;
        curr &= ~(0b111u << 24u);
        curr |= (std::to_underlying(SIZE) & 0b111u) << 24u;
        curr &= ~(0b11u << 22u);
        curr |= (std::to_underlying(RCIM) & 0b11u) << 22u;
        curr &= ~(0b111u << 19u);
        curr |= (std::to_underlying(ARBINP) & 0b111u) << 19u;
        curr &= ~(0b111u << 16u);
        curr |= (std::to_underlying(SRBINP) & 0b111u) << 16u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(SRBTEN) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(SRBTM) & 0b1u) << 14u;
        curr &= ~(0b111111u << 8u);
        curr |= (LIMIT & 0b111111u) << 8u;
        curr &= ~(0b111111u << 0u);
        curr |= (DPTR & 0b111111u) << 0u;

        RBCTR = curr;
    }

    /**
     * Get TRBPTR's RDOPTR field.
     */
    inline uint8_t get_TRBPTR_RDOPTR()
    {
        return (TRBPTR >> 24u) & 0b111111u;
    }

    /**
     * Get TRBPTR's RDIPTR field.
     */
    inline uint8_t get_TRBPTR_RDIPTR()
    {
        return (TRBPTR >> 16u) & 0b111111u;
    }

    /**
     * Get TRBPTR's TDOPTR field.
     */
    inline uint8_t get_TRBPTR_TDOPTR()
    {
        return (TRBPTR >> 8u) & 0b111111u;
    }

    /**
     * Get TRBPTR's TDIPTR field.
     */
    inline uint8_t get_TRBPTR_TDIPTR()
    {
        return (TRBPTR >> 0u) & 0b111111u;
    }

    /**
     * Get all of TRBPTR's bit fields.
     */
    inline void get_TRBPTR(uint8_t &RDOPTR, uint8_t &RDIPTR, uint8_t &TDOPTR, uint8_t &TDIPTR)
    {
        uint32_t curr = TRBPTR;

        RDOPTR = (curr >> 24u) & 0b111111u;
        RDIPTR = (curr >> 16u) & 0b111111u;
        TDOPTR = (curr >> 8u) & 0b111111u;
        TDIPTR = (curr >> 0u) & 0b111111u;
    }

    /**
     * Get TRBSR's TBFLVL field.
     */
    inline uint8_t get_TRBSR_TBFLVL()
    {
        return (TRBSR >> 24u) & 0b1111111u;
    }

    /**
     * Get TRBSR's RBFLVL field.
     */
    inline uint8_t get_TRBSR_RBFLVL()
    {
        return (TRBSR >> 16u) & 0b1111111u;
    }

    /**
     * Get TRBSR's STBT bit.
     */
    inline USIC0_CH0_TRBSR_STBT get_TRBSR_STBT()
    {
        return USIC0_CH0_TRBSR_STBT(TRBSR & (1u << 14u));
    }

    /**
     * Get TRBSR's TBUS bit.
     */
    inline USIC0_CH0_TRBSR_TBUS get_TRBSR_TBUS()
    {
        return USIC0_CH0_TRBSR_TBUS(TRBSR & (1u << 13u));
    }

    /**
     * Get TRBSR's TFULL bit.
     */
    inline USIC0_CH0_TRBSR_TFULL get_TRBSR_TFULL()
    {
        return USIC0_CH0_TRBSR_TFULL(TRBSR & (1u << 12u));
    }

    /**
     * Get TRBSR's TEMPTY bit.
     */
    inline USIC0_CH0_TRBSR_TEMPTY get_TRBSR_TEMPTY()
    {
        return USIC0_CH0_TRBSR_TEMPTY(TRBSR & (1u << 11u));
    }

    /**
     * Get TRBSR's TBERI bit.
     */
    inline USIC0_CH0_TRBSR_TBERI get_TRBSR_TBERI()
    {
        return USIC0_CH0_TRBSR_TBERI(TRBSR & (1u << 9u));
    }

    /**
     * Set TRBSR's TBERI bit.
     */
    inline void set_TRBSR_TBERI()
    {
        TRBSR |= 1u << 9u;
    }

    /**
     * Clear TRBSR's TBERI bit.
     */
    inline void clear_TRBSR_TBERI()
    {
        TRBSR &= ~(1u << 9u);
    }

    /**
     * Toggle TRBSR's TBERI bit.
     */
    inline void toggle_TRBSR_TBERI()
    {
        TRBSR ^= 1u << 9u;
    }

    /**
     * Get TRBSR's STBI bit.
     */
    inline USIC0_CH0_TRBSR_STBI get_TRBSR_STBI()
    {
        return USIC0_CH0_TRBSR_STBI(TRBSR & (1u << 8u));
    }

    /**
     * Set TRBSR's STBI bit.
     */
    inline void set_TRBSR_STBI()
    {
        TRBSR |= 1u << 8u;
    }

    /**
     * Clear TRBSR's STBI bit.
     */
    inline void clear_TRBSR_STBI()
    {
        TRBSR &= ~(1u << 8u);
    }

    /**
     * Toggle TRBSR's STBI bit.
     */
    inline void toggle_TRBSR_STBI()
    {
        TRBSR ^= 1u << 8u;
    }

    /**
     * Get TRBSR's SRBT bit.
     */
    inline USIC0_CH0_TRBSR_SRBT get_TRBSR_SRBT()
    {
        return USIC0_CH0_TRBSR_SRBT(TRBSR & (1u << 6u));
    }

    /**
     * Get TRBSR's RBUS bit.
     */
    inline USIC0_CH0_TRBSR_RBUS get_TRBSR_RBUS()
    {
        return USIC0_CH0_TRBSR_RBUS(TRBSR & (1u << 5u));
    }

    /**
     * Get TRBSR's RFULL bit.
     */
    inline USIC0_CH0_TRBSR_RFULL get_TRBSR_RFULL()
    {
        return USIC0_CH0_TRBSR_RFULL(TRBSR & (1u << 4u));
    }

    /**
     * Get TRBSR's REMPTY bit.
     */
    inline USIC0_CH0_TRBSR_REMPTY get_TRBSR_REMPTY()
    {
        return USIC0_CH0_TRBSR_REMPTY(TRBSR & (1u << 3u));
    }

    /**
     * Get TRBSR's ARBI bit.
     */
    inline USIC0_CH0_TRBSR_ARBI get_TRBSR_ARBI()
    {
        return USIC0_CH0_TRBSR_ARBI(TRBSR & (1u << 2u));
    }

    /**
     * Set TRBSR's ARBI bit.
     */
    inline void set_TRBSR_ARBI()
    {
        TRBSR |= 1u << 2u;
    }

    /**
     * Clear TRBSR's ARBI bit.
     */
    inline void clear_TRBSR_ARBI()
    {
        TRBSR &= ~(1u << 2u);
    }

    /**
     * Toggle TRBSR's ARBI bit.
     */
    inline void toggle_TRBSR_ARBI()
    {
        TRBSR ^= 1u << 2u;
    }

    /**
     * Get TRBSR's RBERI bit.
     */
    inline USIC0_CH0_TRBSR_RBERI get_TRBSR_RBERI()
    {
        return USIC0_CH0_TRBSR_RBERI(TRBSR & (1u << 1u));
    }

    /**
     * Set TRBSR's RBERI bit.
     */
    inline void set_TRBSR_RBERI()
    {
        TRBSR |= 1u << 1u;
    }

    /**
     * Clear TRBSR's RBERI bit.
     */
    inline void clear_TRBSR_RBERI()
    {
        TRBSR &= ~(1u << 1u);
    }

    /**
     * Toggle TRBSR's RBERI bit.
     */
    inline void toggle_TRBSR_RBERI()
    {
        TRBSR ^= 1u << 1u;
    }

    /**
     * Get TRBSR's SRBI bit.
     */
    inline USIC0_CH0_TRBSR_SRBI get_TRBSR_SRBI()
    {
        return USIC0_CH0_TRBSR_SRBI(TRBSR & (1u << 0u));
    }

    /**
     * Set TRBSR's SRBI bit.
     */
    inline void set_TRBSR_SRBI()
    {
        TRBSR |= 1u << 0u;
    }

    /**
     * Clear TRBSR's SRBI bit.
     */
    inline void clear_TRBSR_SRBI()
    {
        TRBSR &= ~(1u << 0u);
    }

    /**
     * Toggle TRBSR's SRBI bit.
     */
    inline void toggle_TRBSR_SRBI()
    {
        TRBSR ^= 1u << 0u;
    }

    /**
     * Get all of TRBSR's bit fields.
     */
    inline void get_TRBSR(uint8_t &TBFLVL, uint8_t &RBFLVL, USIC0_CH0_TRBSR_STBT &STBT, USIC0_CH0_TRBSR_TBUS &TBUS, USIC0_CH0_TRBSR_TFULL &TFULL, USIC0_CH0_TRBSR_TEMPTY &TEMPTY, USIC0_CH0_TRBSR_TBERI &TBERI, USIC0_CH0_TRBSR_STBI &STBI, USIC0_CH0_TRBSR_SRBT &SRBT, USIC0_CH0_TRBSR_RBUS &RBUS, USIC0_CH0_TRBSR_RFULL &RFULL, USIC0_CH0_TRBSR_REMPTY &REMPTY, USIC0_CH0_TRBSR_ARBI &ARBI, USIC0_CH0_TRBSR_RBERI &RBERI, USIC0_CH0_TRBSR_SRBI &SRBI)
    {
        uint32_t curr = TRBSR;

        TBFLVL = (curr >> 24u) & 0b1111111u;
        RBFLVL = (curr >> 16u) & 0b1111111u;
        STBT = USIC0_CH0_TRBSR_STBT(curr & (1u << 14u));
        TBUS = USIC0_CH0_TRBSR_TBUS(curr & (1u << 13u));
        TFULL = USIC0_CH0_TRBSR_TFULL(curr & (1u << 12u));
        TEMPTY = USIC0_CH0_TRBSR_TEMPTY(curr & (1u << 11u));
        TBERI = USIC0_CH0_TRBSR_TBERI(curr & (1u << 9u));
        STBI = USIC0_CH0_TRBSR_STBI(curr & (1u << 8u));
        SRBT = USIC0_CH0_TRBSR_SRBT(curr & (1u << 6u));
        RBUS = USIC0_CH0_TRBSR_RBUS(curr & (1u << 5u));
        RFULL = USIC0_CH0_TRBSR_RFULL(curr & (1u << 4u));
        REMPTY = USIC0_CH0_TRBSR_REMPTY(curr & (1u << 3u));
        ARBI = USIC0_CH0_TRBSR_ARBI(curr & (1u << 2u));
        RBERI = USIC0_CH0_TRBSR_RBERI(curr & (1u << 1u));
        SRBI = USIC0_CH0_TRBSR_SRBI(curr & (1u << 0u));
    }

    /**
     * Set all of TRBSR's bit fields.
     */
    inline void set_TRBSR(USIC0_CH0_TRBSR_TBERI TBERI, USIC0_CH0_TRBSR_STBI STBI, USIC0_CH0_TRBSR_ARBI ARBI, USIC0_CH0_TRBSR_RBERI RBERI, USIC0_CH0_TRBSR_SRBI SRBI)
    {
        uint32_t curr = TRBSR;

        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(TBERI) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(STBI) & 0b1u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(ARBI) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(RBERI) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(SRBI) & 0b1u) << 0u;

        TRBSR = curr;
    }

    /**
     * Set TRBSCR's FLUSHTB bit.
     */
    inline void set_TRBSCR_FLUSHTB()
    {
        TRBSCR |= 1u << 15u;
    }

    /**
     * Clear TRBSCR's FLUSHTB bit.
     */
    inline void clear_TRBSCR_FLUSHTB()
    {
        TRBSCR &= ~(1u << 15u);
    }

    /**
     * Toggle TRBSCR's FLUSHTB bit.
     */
    inline void toggle_TRBSCR_FLUSHTB()
    {
        TRBSCR ^= 1u << 15u;
    }

    /**
     * Set TRBSCR's FLUSHRB bit.
     */
    inline void set_TRBSCR_FLUSHRB()
    {
        TRBSCR |= 1u << 14u;
    }

    /**
     * Clear TRBSCR's FLUSHRB bit.
     */
    inline void clear_TRBSCR_FLUSHRB()
    {
        TRBSCR &= ~(1u << 14u);
    }

    /**
     * Toggle TRBSCR's FLUSHRB bit.
     */
    inline void toggle_TRBSCR_FLUSHRB()
    {
        TRBSCR ^= 1u << 14u;
    }

    /**
     * Set TRBSCR's CBDV bit.
     */
    inline void set_TRBSCR_CBDV()
    {
        TRBSCR |= 1u << 10u;
    }

    /**
     * Clear TRBSCR's CBDV bit.
     */
    inline void clear_TRBSCR_CBDV()
    {
        TRBSCR &= ~(1u << 10u);
    }

    /**
     * Toggle TRBSCR's CBDV bit.
     */
    inline void toggle_TRBSCR_CBDV()
    {
        TRBSCR ^= 1u << 10u;
    }

    /**
     * Set TRBSCR's CTBERI bit.
     */
    inline void set_TRBSCR_CTBERI()
    {
        TRBSCR |= 1u << 9u;
    }

    /**
     * Clear TRBSCR's CTBERI bit.
     */
    inline void clear_TRBSCR_CTBERI()
    {
        TRBSCR &= ~(1u << 9u);
    }

    /**
     * Toggle TRBSCR's CTBERI bit.
     */
    inline void toggle_TRBSCR_CTBERI()
    {
        TRBSCR ^= 1u << 9u;
    }

    /**
     * Set TRBSCR's CSTBI bit.
     */
    inline void set_TRBSCR_CSTBI()
    {
        TRBSCR |= 1u << 8u;
    }

    /**
     * Clear TRBSCR's CSTBI bit.
     */
    inline void clear_TRBSCR_CSTBI()
    {
        TRBSCR &= ~(1u << 8u);
    }

    /**
     * Toggle TRBSCR's CSTBI bit.
     */
    inline void toggle_TRBSCR_CSTBI()
    {
        TRBSCR ^= 1u << 8u;
    }

    /**
     * Set TRBSCR's CARBI bit.
     */
    inline void set_TRBSCR_CARBI()
    {
        TRBSCR |= 1u << 2u;
    }

    /**
     * Clear TRBSCR's CARBI bit.
     */
    inline void clear_TRBSCR_CARBI()
    {
        TRBSCR &= ~(1u << 2u);
    }

    /**
     * Toggle TRBSCR's CARBI bit.
     */
    inline void toggle_TRBSCR_CARBI()
    {
        TRBSCR ^= 1u << 2u;
    }

    /**
     * Set TRBSCR's CRBERI bit.
     */
    inline void set_TRBSCR_CRBERI()
    {
        TRBSCR |= 1u << 1u;
    }

    /**
     * Clear TRBSCR's CRBERI bit.
     */
    inline void clear_TRBSCR_CRBERI()
    {
        TRBSCR &= ~(1u << 1u);
    }

    /**
     * Toggle TRBSCR's CRBERI bit.
     */
    inline void toggle_TRBSCR_CRBERI()
    {
        TRBSCR ^= 1u << 1u;
    }

    /**
     * Set TRBSCR's CSRBI bit.
     */
    inline void set_TRBSCR_CSRBI()
    {
        TRBSCR |= 1u << 0u;
    }

    /**
     * Clear TRBSCR's CSRBI bit.
     */
    inline void clear_TRBSCR_CSRBI()
    {
        TRBSCR &= ~(1u << 0u);
    }

    /**
     * Toggle TRBSCR's CSRBI bit.
     */
    inline void toggle_TRBSCR_CSRBI()
    {
        TRBSCR ^= 1u << 0u;
    }

    /**
     * Set all of TRBSCR's bit fields.
     */
    inline void set_TRBSCR(USIC0_CH0_TRBSCR_FLUSHTB FLUSHTB, USIC0_CH0_TRBSCR_FLUSHRB FLUSHRB, USIC0_CH0_TRBSCR_CBDV CBDV, USIC0_CH0_TRBSCR_CTBERI CTBERI, USIC0_CH0_TRBSCR_CSTBI CSTBI, USIC0_CH0_TRBSCR_CARBI CARBI, USIC0_CH0_TRBSCR_CRBERI CRBERI, USIC0_CH0_TRBSCR_CSRBI CSRBI)
    {
        uint32_t curr = TRBSCR;

        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(FLUSHTB) & 0b1u) << 15u;
        curr &= ~(0b1u << 14u);
        curr |= (std::to_underlying(FLUSHRB) & 0b1u) << 14u;
        curr &= ~(0b1u << 10u);
        curr |= (std::to_underlying(CBDV) & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (std::to_underlying(CTBERI) & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (std::to_underlying(CSTBI) & 0b1u) << 8u;
        curr &= ~(0b1u << 2u);
        curr |= (std::to_underlying(CARBI) & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (std::to_underlying(CRBERI) & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (std::to_underlying(CSRBI) & 0b1u) << 0u;

        TRBSCR = curr;
    }

    /**
     * Get OUTR's RCI field.
     */
    inline uint8_t get_OUTR_RCI()
    {
        return (OUTR >> 16u) & 0b11111u;
    }

    /**
     * Get OUTR's DSR field.
     */
    inline uint16_t get_OUTR_DSR()
    {
        return (OUTR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of OUTR's bit fields.
     */
    inline void get_OUTR(uint8_t &RCI, uint16_t &DSR)
    {
        uint32_t curr = OUTR;

        RCI = (curr >> 16u) & 0b11111u;
        DSR = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get OUTDR's RCI field.
     */
    inline uint8_t get_OUTDR_RCI()
    {
        return (OUTDR >> 16u) & 0b11111u;
    }

    /**
     * Get OUTDR's DSR field.
     */
    inline uint16_t get_OUTDR_DSR()
    {
        return (OUTDR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Get all of OUTDR's bit fields.
     */
    inline void get_OUTDR(uint8_t &RCI, uint16_t &DSR)
    {
        uint32_t curr = OUTDR;

        RCI = (curr >> 16u) & 0b11111u;
        DSR = (curr >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set IN's TDATA field.
     */
    inline void set_IN_TDATA(std::size_t index, uint16_t value)
    {
        uint32_t curr = IN[index];

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        IN[index] = curr;
    }
};

static_assert(sizeof(usic0_ch0) == usic0_ch0::size);

static volatile usic0_ch0 *const USIC0_CH0 = reinterpret_cast<usic0_ch0 *>(0x40030000);

static volatile usic0_ch0 *const USIC0_CH1 = reinterpret_cast<usic0_ch0 *>(0x40030200);

static volatile usic0_ch0 *const USIC1_CH0 = reinterpret_cast<usic0_ch0 *>(0x48020000);

static volatile usic0_ch0 *const USIC1_CH1 = reinterpret_cast<usic0_ch0 *>(0x48020200);

static volatile usic0_ch0 *const USIC2_CH0 = reinterpret_cast<usic0_ch0 *>(0x48024000);

static volatile usic0_ch0 *const USIC2_CH1 = reinterpret_cast<usic0_ch0 *>(0x48024200);

}; // namespace XMC4700
