/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/USB0_CH0_HCCHAR_ChEna.h"
#include "../enums/USB0_CH0_HCCHAR_EPDir.h"
#include "../enums/USB0_CH0_HCCHAR_EPType.h"
#include "../enums/USB0_CH0_HCCHAR_MC_EC.h"
#include "../enums/USB0_CH0_HCCHAR_OddFrm.h"
#include "../enums/USB0_CH0_HCDMA_SCATGATHER_CTD.h"
#include "../enums/USB0_CH0_HCTSIZ_BUFFERMODE_Pid.h"
#include "../enums/USB0_CH0_HCTSIZ_SCATGATHER_Pid.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Universal Serial Bus
 */
struct [[gnu::packed]] usb0_ch
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< usb0_ch's identifier. */
    static constexpr std::size_t size = 32; /*!< usb0_ch's size in bytes. */

    /* Fields. */
    union {
        uint32_t HCTSIZ_BUFFERMODE; /* (read-write) Host Channel Transfer Size
                                       Register [BUFFERMODE] */
        uint32_t HCTSIZ_SCATGATHER; /* (read-write) Host Channel Transfer Size
                                       Register [SCATGATHER] */
    };
    union {
        uint32_t HCDMA_BUFFERMODE; /* (read-write) Host Channel DMA Address
                                      Register [BUFFERMODE] */
        uint32_t HCDMA_SCATGATHER; /* (read-write) Host Channel DMA Address
                                      Register [SCATGATHER] */
    };
    uint32_t HCCHAR; /*!< (read-write) Host Channel Characteristics Register */
    const uint32_t reserved_padding0 = {};
    uint32_t HCINT; /*!< (read-write) Host Channel Interrupt Register */
    uint32_t
        HCINTMSK; /*!< (read-write) Host Channel Interrupt Mask Register */
    const uint32_t reserved_padding1 = {};
    const uint32_t HCDMAB =
        {}; /*!< (read-only) Host Channel DMA Buffer Address Register */

    /* Methods. */

    /**
     * Get HCCHAR's ChEna bit.
     */
    USB0_CH0_HCCHAR_ChEna get_HCCHAR_ChEna()
    {
        return USB0_CH0_HCCHAR_ChEna(HCCHAR & (1u << 31u));
    }

    /**
     * Set HCCHAR's ChEna bit.
     */
    inline void set_HCCHAR_ChEna()
    {
        HCCHAR |= 1u << 31u;
    }

    /**
     * Clear HCCHAR's ChEna bit.
     */
    inline void clear_HCCHAR_ChEna()
    {
        HCCHAR &= ~(1u << 31u);
    }

    /**
     * Toggle HCCHAR's ChEna bit.
     */
    inline void toggle_HCCHAR_ChEna()
    {
        HCCHAR ^= 1u << 31u;
    }

    /**
     * Get HCCHAR's ChDis bit.
     */
    bool get_HCCHAR_ChDis()
    {
        return HCCHAR & (1u << 30u);
    }

    /**
     * Set HCCHAR's ChDis bit.
     */
    inline void set_HCCHAR_ChDis()
    {
        HCCHAR |= 1u << 30u;
    }

    /**
     * Clear HCCHAR's ChDis bit.
     */
    inline void clear_HCCHAR_ChDis()
    {
        HCCHAR &= ~(1u << 30u);
    }

    /**
     * Toggle HCCHAR's ChDis bit.
     */
    inline void toggle_HCCHAR_ChDis()
    {
        HCCHAR ^= 1u << 30u;
    }

    /**
     * Get HCCHAR's OddFrm bit.
     */
    USB0_CH0_HCCHAR_OddFrm get_HCCHAR_OddFrm()
    {
        return USB0_CH0_HCCHAR_OddFrm(HCCHAR & (1u << 29u));
    }

    /**
     * Set HCCHAR's OddFrm bit.
     */
    inline void set_HCCHAR_OddFrm()
    {
        HCCHAR |= 1u << 29u;
    }

    /**
     * Clear HCCHAR's OddFrm bit.
     */
    inline void clear_HCCHAR_OddFrm()
    {
        HCCHAR &= ~(1u << 29u);
    }

    /**
     * Toggle HCCHAR's OddFrm bit.
     */
    inline void toggle_HCCHAR_OddFrm()
    {
        HCCHAR ^= 1u << 29u;
    }

    /**
     * Get HCCHAR's DevAddr field.
     */
    uint8_t get_HCCHAR_DevAddr()
    {
        return (HCCHAR >> 22u) & 0b1111111u;
    }

    /**
     * Set HCCHAR's DevAddr field.
     */
    inline void set_HCCHAR_DevAddr(uint8_t value)
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b1111111u << 22u);
        curr |= (value & 0b1111111u) << 22u;

        HCCHAR = curr;
    }

    /**
     * Get HCCHAR's MC_EC field.
     */
    USB0_CH0_HCCHAR_MC_EC get_HCCHAR_MC_EC()
    {
        return USB0_CH0_HCCHAR_MC_EC((HCCHAR >> 20u) & 0b11u);
    }

    /**
     * Set HCCHAR's MC_EC field.
     */
    inline void set_HCCHAR_MC_EC(USB0_CH0_HCCHAR_MC_EC value)
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        HCCHAR = curr;
    }

    /**
     * Get HCCHAR's EPType field.
     */
    USB0_CH0_HCCHAR_EPType get_HCCHAR_EPType()
    {
        return USB0_CH0_HCCHAR_EPType((HCCHAR >> 18u) & 0b11u);
    }

    /**
     * Set HCCHAR's EPType field.
     */
    inline void set_HCCHAR_EPType(USB0_CH0_HCCHAR_EPType value)
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        HCCHAR = curr;
    }

    /**
     * Get HCCHAR's EPDir bit.
     */
    USB0_CH0_HCCHAR_EPDir get_HCCHAR_EPDir()
    {
        return USB0_CH0_HCCHAR_EPDir(HCCHAR & (1u << 15u));
    }

    /**
     * Set HCCHAR's EPDir bit.
     */
    inline void set_HCCHAR_EPDir()
    {
        HCCHAR |= 1u << 15u;
    }

    /**
     * Clear HCCHAR's EPDir bit.
     */
    inline void clear_HCCHAR_EPDir()
    {
        HCCHAR &= ~(1u << 15u);
    }

    /**
     * Toggle HCCHAR's EPDir bit.
     */
    inline void toggle_HCCHAR_EPDir()
    {
        HCCHAR ^= 1u << 15u;
    }

    /**
     * Get HCCHAR's EPNum field.
     */
    uint8_t get_HCCHAR_EPNum()
    {
        return (HCCHAR >> 11u) & 0b1111u;
    }

    /**
     * Set HCCHAR's EPNum field.
     */
    inline void set_HCCHAR_EPNum(uint8_t value)
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b1111u << 11u);
        curr |= (value & 0b1111u) << 11u;

        HCCHAR = curr;
    }

    /**
     * Get HCCHAR's MPS field.
     */
    uint16_t get_HCCHAR_MPS()
    {
        return (HCCHAR >> 0u) & 0b11111111111u;
    }

    /**
     * Set HCCHAR's MPS field.
     */
    inline void set_HCCHAR_MPS(uint16_t value)
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        HCCHAR = curr;
    }

    /**
     * Get HCINT's DESC_LST_ROLLIntr bit.
     */
    bool get_HCINT_DESC_LST_ROLLIntr()
    {
        return HCINT & (1u << 13u);
    }

    /**
     * Set HCINT's DESC_LST_ROLLIntr bit.
     */
    inline void set_HCINT_DESC_LST_ROLLIntr()
    {
        HCINT |= 1u << 13u;
    }

    /**
     * Clear HCINT's DESC_LST_ROLLIntr bit.
     */
    inline void clear_HCINT_DESC_LST_ROLLIntr()
    {
        HCINT &= ~(1u << 13u);
    }

    /**
     * Toggle HCINT's DESC_LST_ROLLIntr bit.
     */
    inline void toggle_HCINT_DESC_LST_ROLLIntr()
    {
        HCINT ^= 1u << 13u;
    }

    /**
     * Get HCINT's XCS_XACT_ERR bit.
     */
    bool get_HCINT_XCS_XACT_ERR()
    {
        return HCINT & (1u << 12u);
    }

    /**
     * Set HCINT's XCS_XACT_ERR bit.
     */
    inline void set_HCINT_XCS_XACT_ERR()
    {
        HCINT |= 1u << 12u;
    }

    /**
     * Clear HCINT's XCS_XACT_ERR bit.
     */
    inline void clear_HCINT_XCS_XACT_ERR()
    {
        HCINT &= ~(1u << 12u);
    }

    /**
     * Toggle HCINT's XCS_XACT_ERR bit.
     */
    inline void toggle_HCINT_XCS_XACT_ERR()
    {
        HCINT ^= 1u << 12u;
    }

    /**
     * Get HCINT's BNAIntr bit.
     */
    bool get_HCINT_BNAIntr()
    {
        return HCINT & (1u << 11u);
    }

    /**
     * Set HCINT's BNAIntr bit.
     */
    inline void set_HCINT_BNAIntr()
    {
        HCINT |= 1u << 11u;
    }

    /**
     * Clear HCINT's BNAIntr bit.
     */
    inline void clear_HCINT_BNAIntr()
    {
        HCINT &= ~(1u << 11u);
    }

    /**
     * Toggle HCINT's BNAIntr bit.
     */
    inline void toggle_HCINT_BNAIntr()
    {
        HCINT ^= 1u << 11u;
    }

    /**
     * Get HCINT's DataTglErr bit.
     */
    bool get_HCINT_DataTglErr()
    {
        return HCINT & (1u << 10u);
    }

    /**
     * Set HCINT's DataTglErr bit.
     */
    inline void set_HCINT_DataTglErr()
    {
        HCINT |= 1u << 10u;
    }

    /**
     * Clear HCINT's DataTglErr bit.
     */
    inline void clear_HCINT_DataTglErr()
    {
        HCINT &= ~(1u << 10u);
    }

    /**
     * Toggle HCINT's DataTglErr bit.
     */
    inline void toggle_HCINT_DataTglErr()
    {
        HCINT ^= 1u << 10u;
    }

    /**
     * Get HCINT's FrmOvrun bit.
     */
    bool get_HCINT_FrmOvrun()
    {
        return HCINT & (1u << 9u);
    }

    /**
     * Set HCINT's FrmOvrun bit.
     */
    inline void set_HCINT_FrmOvrun()
    {
        HCINT |= 1u << 9u;
    }

    /**
     * Clear HCINT's FrmOvrun bit.
     */
    inline void clear_HCINT_FrmOvrun()
    {
        HCINT &= ~(1u << 9u);
    }

    /**
     * Toggle HCINT's FrmOvrun bit.
     */
    inline void toggle_HCINT_FrmOvrun()
    {
        HCINT ^= 1u << 9u;
    }

    /**
     * Get HCINT's BblErr bit.
     */
    bool get_HCINT_BblErr()
    {
        return HCINT & (1u << 8u);
    }

    /**
     * Set HCINT's BblErr bit.
     */
    inline void set_HCINT_BblErr()
    {
        HCINT |= 1u << 8u;
    }

    /**
     * Clear HCINT's BblErr bit.
     */
    inline void clear_HCINT_BblErr()
    {
        HCINT &= ~(1u << 8u);
    }

    /**
     * Toggle HCINT's BblErr bit.
     */
    inline void toggle_HCINT_BblErr()
    {
        HCINT ^= 1u << 8u;
    }

    /**
     * Get HCINT's XactErr bit.
     */
    bool get_HCINT_XactErr()
    {
        return HCINT & (1u << 7u);
    }

    /**
     * Set HCINT's XactErr bit.
     */
    inline void set_HCINT_XactErr()
    {
        HCINT |= 1u << 7u;
    }

    /**
     * Clear HCINT's XactErr bit.
     */
    inline void clear_HCINT_XactErr()
    {
        HCINT &= ~(1u << 7u);
    }

    /**
     * Toggle HCINT's XactErr bit.
     */
    inline void toggle_HCINT_XactErr()
    {
        HCINT ^= 1u << 7u;
    }

    /**
     * Get HCINT's NYET bit.
     */
    bool get_HCINT_NYET()
    {
        return HCINT & (1u << 6u);
    }

    /**
     * Set HCINT's NYET bit.
     */
    inline void set_HCINT_NYET()
    {
        HCINT |= 1u << 6u;
    }

    /**
     * Clear HCINT's NYET bit.
     */
    inline void clear_HCINT_NYET()
    {
        HCINT &= ~(1u << 6u);
    }

    /**
     * Toggle HCINT's NYET bit.
     */
    inline void toggle_HCINT_NYET()
    {
        HCINT ^= 1u << 6u;
    }

    /**
     * Get HCINT's ACK bit.
     */
    bool get_HCINT_ACK()
    {
        return HCINT & (1u << 5u);
    }

    /**
     * Set HCINT's ACK bit.
     */
    inline void set_HCINT_ACK()
    {
        HCINT |= 1u << 5u;
    }

    /**
     * Clear HCINT's ACK bit.
     */
    inline void clear_HCINT_ACK()
    {
        HCINT &= ~(1u << 5u);
    }

    /**
     * Toggle HCINT's ACK bit.
     */
    inline void toggle_HCINT_ACK()
    {
        HCINT ^= 1u << 5u;
    }

    /**
     * Get HCINT's NAK bit.
     */
    bool get_HCINT_NAK()
    {
        return HCINT & (1u << 4u);
    }

    /**
     * Set HCINT's NAK bit.
     */
    inline void set_HCINT_NAK()
    {
        HCINT |= 1u << 4u;
    }

    /**
     * Clear HCINT's NAK bit.
     */
    inline void clear_HCINT_NAK()
    {
        HCINT &= ~(1u << 4u);
    }

    /**
     * Toggle HCINT's NAK bit.
     */
    inline void toggle_HCINT_NAK()
    {
        HCINT ^= 1u << 4u;
    }

    /**
     * Get HCINT's STALL bit.
     */
    bool get_HCINT_STALL()
    {
        return HCINT & (1u << 3u);
    }

    /**
     * Set HCINT's STALL bit.
     */
    inline void set_HCINT_STALL()
    {
        HCINT |= 1u << 3u;
    }

    /**
     * Clear HCINT's STALL bit.
     */
    inline void clear_HCINT_STALL()
    {
        HCINT &= ~(1u << 3u);
    }

    /**
     * Toggle HCINT's STALL bit.
     */
    inline void toggle_HCINT_STALL()
    {
        HCINT ^= 1u << 3u;
    }

    /**
     * Get HCINT's AHBErr bit.
     */
    bool get_HCINT_AHBErr()
    {
        return HCINT & (1u << 2u);
    }

    /**
     * Set HCINT's AHBErr bit.
     */
    inline void set_HCINT_AHBErr()
    {
        HCINT |= 1u << 2u;
    }

    /**
     * Clear HCINT's AHBErr bit.
     */
    inline void clear_HCINT_AHBErr()
    {
        HCINT &= ~(1u << 2u);
    }

    /**
     * Toggle HCINT's AHBErr bit.
     */
    inline void toggle_HCINT_AHBErr()
    {
        HCINT ^= 1u << 2u;
    }

    /**
     * Get HCINT's ChHltd bit.
     */
    bool get_HCINT_ChHltd()
    {
        return HCINT & (1u << 1u);
    }

    /**
     * Set HCINT's ChHltd bit.
     */
    inline void set_HCINT_ChHltd()
    {
        HCINT |= 1u << 1u;
    }

    /**
     * Clear HCINT's ChHltd bit.
     */
    inline void clear_HCINT_ChHltd()
    {
        HCINT &= ~(1u << 1u);
    }

    /**
     * Toggle HCINT's ChHltd bit.
     */
    inline void toggle_HCINT_ChHltd()
    {
        HCINT ^= 1u << 1u;
    }

    /**
     * Get HCINT's XferCompl bit.
     */
    bool get_HCINT_XferCompl()
    {
        return HCINT & (1u << 0u);
    }

    /**
     * Set HCINT's XferCompl bit.
     */
    inline void set_HCINT_XferCompl()
    {
        HCINT |= 1u << 0u;
    }

    /**
     * Clear HCINT's XferCompl bit.
     */
    inline void clear_HCINT_XferCompl()
    {
        HCINT &= ~(1u << 0u);
    }

    /**
     * Toggle HCINT's XferCompl bit.
     */
    inline void toggle_HCINT_XferCompl()
    {
        HCINT ^= 1u << 0u;
    }

    /**
     * Get HCINTMSK's DESC_LST_ROLLIntrMsk bit.
     */
    bool get_HCINTMSK_DESC_LST_ROLLIntrMsk()
    {
        return HCINTMSK & (1u << 13u);
    }

    /**
     * Set HCINTMSK's DESC_LST_ROLLIntrMsk bit.
     */
    inline void set_HCINTMSK_DESC_LST_ROLLIntrMsk()
    {
        HCINTMSK |= 1u << 13u;
    }

    /**
     * Clear HCINTMSK's DESC_LST_ROLLIntrMsk bit.
     */
    inline void clear_HCINTMSK_DESC_LST_ROLLIntrMsk()
    {
        HCINTMSK &= ~(1u << 13u);
    }

    /**
     * Toggle HCINTMSK's DESC_LST_ROLLIntrMsk bit.
     */
    inline void toggle_HCINTMSK_DESC_LST_ROLLIntrMsk()
    {
        HCINTMSK ^= 1u << 13u;
    }

    /**
     * Get HCINTMSK's BNAIntrMsk bit.
     */
    bool get_HCINTMSK_BNAIntrMsk()
    {
        return HCINTMSK & (1u << 11u);
    }

    /**
     * Set HCINTMSK's BNAIntrMsk bit.
     */
    inline void set_HCINTMSK_BNAIntrMsk()
    {
        HCINTMSK |= 1u << 11u;
    }

    /**
     * Clear HCINTMSK's BNAIntrMsk bit.
     */
    inline void clear_HCINTMSK_BNAIntrMsk()
    {
        HCINTMSK &= ~(1u << 11u);
    }

    /**
     * Toggle HCINTMSK's BNAIntrMsk bit.
     */
    inline void toggle_HCINTMSK_BNAIntrMsk()
    {
        HCINTMSK ^= 1u << 11u;
    }

    /**
     * Get HCINTMSK's DataTglErrMsk bit.
     */
    bool get_HCINTMSK_DataTglErrMsk()
    {
        return HCINTMSK & (1u << 10u);
    }

    /**
     * Set HCINTMSK's DataTglErrMsk bit.
     */
    inline void set_HCINTMSK_DataTglErrMsk()
    {
        HCINTMSK |= 1u << 10u;
    }

    /**
     * Clear HCINTMSK's DataTglErrMsk bit.
     */
    inline void clear_HCINTMSK_DataTglErrMsk()
    {
        HCINTMSK &= ~(1u << 10u);
    }

    /**
     * Toggle HCINTMSK's DataTglErrMsk bit.
     */
    inline void toggle_HCINTMSK_DataTglErrMsk()
    {
        HCINTMSK ^= 1u << 10u;
    }

    /**
     * Get HCINTMSK's FrmOvrunMsk bit.
     */
    bool get_HCINTMSK_FrmOvrunMsk()
    {
        return HCINTMSK & (1u << 9u);
    }

    /**
     * Set HCINTMSK's FrmOvrunMsk bit.
     */
    inline void set_HCINTMSK_FrmOvrunMsk()
    {
        HCINTMSK |= 1u << 9u;
    }

    /**
     * Clear HCINTMSK's FrmOvrunMsk bit.
     */
    inline void clear_HCINTMSK_FrmOvrunMsk()
    {
        HCINTMSK &= ~(1u << 9u);
    }

    /**
     * Toggle HCINTMSK's FrmOvrunMsk bit.
     */
    inline void toggle_HCINTMSK_FrmOvrunMsk()
    {
        HCINTMSK ^= 1u << 9u;
    }

    /**
     * Get HCINTMSK's BblErrMsk bit.
     */
    bool get_HCINTMSK_BblErrMsk()
    {
        return HCINTMSK & (1u << 8u);
    }

    /**
     * Set HCINTMSK's BblErrMsk bit.
     */
    inline void set_HCINTMSK_BblErrMsk()
    {
        HCINTMSK |= 1u << 8u;
    }

    /**
     * Clear HCINTMSK's BblErrMsk bit.
     */
    inline void clear_HCINTMSK_BblErrMsk()
    {
        HCINTMSK &= ~(1u << 8u);
    }

    /**
     * Toggle HCINTMSK's BblErrMsk bit.
     */
    inline void toggle_HCINTMSK_BblErrMsk()
    {
        HCINTMSK ^= 1u << 8u;
    }

    /**
     * Get HCINTMSK's XactErrMsk bit.
     */
    bool get_HCINTMSK_XactErrMsk()
    {
        return HCINTMSK & (1u << 7u);
    }

    /**
     * Set HCINTMSK's XactErrMsk bit.
     */
    inline void set_HCINTMSK_XactErrMsk()
    {
        HCINTMSK |= 1u << 7u;
    }

    /**
     * Clear HCINTMSK's XactErrMsk bit.
     */
    inline void clear_HCINTMSK_XactErrMsk()
    {
        HCINTMSK &= ~(1u << 7u);
    }

    /**
     * Toggle HCINTMSK's XactErrMsk bit.
     */
    inline void toggle_HCINTMSK_XactErrMsk()
    {
        HCINTMSK ^= 1u << 7u;
    }

    /**
     * Get HCINTMSK's NyetMsk bit.
     */
    bool get_HCINTMSK_NyetMsk()
    {
        return HCINTMSK & (1u << 6u);
    }

    /**
     * Set HCINTMSK's NyetMsk bit.
     */
    inline void set_HCINTMSK_NyetMsk()
    {
        HCINTMSK |= 1u << 6u;
    }

    /**
     * Clear HCINTMSK's NyetMsk bit.
     */
    inline void clear_HCINTMSK_NyetMsk()
    {
        HCINTMSK &= ~(1u << 6u);
    }

    /**
     * Toggle HCINTMSK's NyetMsk bit.
     */
    inline void toggle_HCINTMSK_NyetMsk()
    {
        HCINTMSK ^= 1u << 6u;
    }

    /**
     * Get HCINTMSK's AckMsk bit.
     */
    bool get_HCINTMSK_AckMsk()
    {
        return HCINTMSK & (1u << 5u);
    }

    /**
     * Set HCINTMSK's AckMsk bit.
     */
    inline void set_HCINTMSK_AckMsk()
    {
        HCINTMSK |= 1u << 5u;
    }

    /**
     * Clear HCINTMSK's AckMsk bit.
     */
    inline void clear_HCINTMSK_AckMsk()
    {
        HCINTMSK &= ~(1u << 5u);
    }

    /**
     * Toggle HCINTMSK's AckMsk bit.
     */
    inline void toggle_HCINTMSK_AckMsk()
    {
        HCINTMSK ^= 1u << 5u;
    }

    /**
     * Get HCINTMSK's NakMsk bit.
     */
    bool get_HCINTMSK_NakMsk()
    {
        return HCINTMSK & (1u << 4u);
    }

    /**
     * Set HCINTMSK's NakMsk bit.
     */
    inline void set_HCINTMSK_NakMsk()
    {
        HCINTMSK |= 1u << 4u;
    }

    /**
     * Clear HCINTMSK's NakMsk bit.
     */
    inline void clear_HCINTMSK_NakMsk()
    {
        HCINTMSK &= ~(1u << 4u);
    }

    /**
     * Toggle HCINTMSK's NakMsk bit.
     */
    inline void toggle_HCINTMSK_NakMsk()
    {
        HCINTMSK ^= 1u << 4u;
    }

    /**
     * Get HCINTMSK's StallMsk bit.
     */
    bool get_HCINTMSK_StallMsk()
    {
        return HCINTMSK & (1u << 3u);
    }

    /**
     * Set HCINTMSK's StallMsk bit.
     */
    inline void set_HCINTMSK_StallMsk()
    {
        HCINTMSK |= 1u << 3u;
    }

    /**
     * Clear HCINTMSK's StallMsk bit.
     */
    inline void clear_HCINTMSK_StallMsk()
    {
        HCINTMSK &= ~(1u << 3u);
    }

    /**
     * Toggle HCINTMSK's StallMsk bit.
     */
    inline void toggle_HCINTMSK_StallMsk()
    {
        HCINTMSK ^= 1u << 3u;
    }

    /**
     * Get HCINTMSK's AHBErrMsk bit.
     */
    bool get_HCINTMSK_AHBErrMsk()
    {
        return HCINTMSK & (1u << 2u);
    }

    /**
     * Set HCINTMSK's AHBErrMsk bit.
     */
    inline void set_HCINTMSK_AHBErrMsk()
    {
        HCINTMSK |= 1u << 2u;
    }

    /**
     * Clear HCINTMSK's AHBErrMsk bit.
     */
    inline void clear_HCINTMSK_AHBErrMsk()
    {
        HCINTMSK &= ~(1u << 2u);
    }

    /**
     * Toggle HCINTMSK's AHBErrMsk bit.
     */
    inline void toggle_HCINTMSK_AHBErrMsk()
    {
        HCINTMSK ^= 1u << 2u;
    }

    /**
     * Get HCINTMSK's ChHltdMsk bit.
     */
    bool get_HCINTMSK_ChHltdMsk()
    {
        return HCINTMSK & (1u << 1u);
    }

    /**
     * Set HCINTMSK's ChHltdMsk bit.
     */
    inline void set_HCINTMSK_ChHltdMsk()
    {
        HCINTMSK |= 1u << 1u;
    }

    /**
     * Clear HCINTMSK's ChHltdMsk bit.
     */
    inline void clear_HCINTMSK_ChHltdMsk()
    {
        HCINTMSK &= ~(1u << 1u);
    }

    /**
     * Toggle HCINTMSK's ChHltdMsk bit.
     */
    inline void toggle_HCINTMSK_ChHltdMsk()
    {
        HCINTMSK ^= 1u << 1u;
    }

    /**
     * Get HCINTMSK's XferComplMsk bit.
     */
    bool get_HCINTMSK_XferComplMsk()
    {
        return HCINTMSK & (1u << 0u);
    }

    /**
     * Set HCINTMSK's XferComplMsk bit.
     */
    inline void set_HCINTMSK_XferComplMsk()
    {
        HCINTMSK |= 1u << 0u;
    }

    /**
     * Clear HCINTMSK's XferComplMsk bit.
     */
    inline void clear_HCINTMSK_XferComplMsk()
    {
        HCINTMSK &= ~(1u << 0u);
    }

    /**
     * Toggle HCINTMSK's XferComplMsk bit.
     */
    inline void toggle_HCINTMSK_XferComplMsk()
    {
        HCINTMSK ^= 1u << 0u;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's Pid field.
     */
    USB0_CH0_HCTSIZ_BUFFERMODE_Pid get_HCTSIZ_BUFFERMODE_Pid()
    {
        return USB0_CH0_HCTSIZ_BUFFERMODE_Pid((HCTSIZ_BUFFERMODE >> 29u) &
                                              0b11u);
    }

    /**
     * Set HCTSIZ_BUFFERMODE's Pid field.
     */
    inline void set_HCTSIZ_BUFFERMODE_Pid(USB0_CH0_HCTSIZ_BUFFERMODE_Pid value)
    {
        uint32_t curr = HCTSIZ_BUFFERMODE;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        HCTSIZ_BUFFERMODE = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's PktCnt field.
     */
    uint16_t get_HCTSIZ_BUFFERMODE_PktCnt()
    {
        return (HCTSIZ_BUFFERMODE >> 19u) & 0b1111111111u;
    }

    /**
     * Set HCTSIZ_BUFFERMODE's PktCnt field.
     */
    inline void set_HCTSIZ_BUFFERMODE_PktCnt(uint16_t value)
    {
        uint32_t curr = HCTSIZ_BUFFERMODE;

        curr &= ~(0b1111111111u << 19u);
        curr |= (value & 0b1111111111u) << 19u;

        HCTSIZ_BUFFERMODE = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's XferSize field.
     */
    uint32_t get_HCTSIZ_BUFFERMODE_XferSize()
    {
        return (HCTSIZ_BUFFERMODE >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set HCTSIZ_BUFFERMODE's XferSize field.
     */
    inline void set_HCTSIZ_BUFFERMODE_XferSize(uint32_t value)
    {
        uint32_t curr = HCTSIZ_BUFFERMODE;

        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111u) << 0u;

        HCTSIZ_BUFFERMODE = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's Pid field.
     */
    USB0_CH0_HCTSIZ_SCATGATHER_Pid get_HCTSIZ_SCATGATHER_Pid()
    {
        return USB0_CH0_HCTSIZ_SCATGATHER_Pid((HCTSIZ_SCATGATHER >> 29u) &
                                              0b11u);
    }

    /**
     * Set HCTSIZ_BUFFERMODE's Pid field.
     */
    inline void set_HCTSIZ_SCATGATHER_Pid(USB0_CH0_HCTSIZ_SCATGATHER_Pid value)
    {
        uint32_t curr = HCTSIZ_SCATGATHER;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        HCTSIZ_SCATGATHER = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's NTD field.
     */
    uint8_t get_HCTSIZ_SCATGATHER_NTD()
    {
        return (HCTSIZ_SCATGATHER >> 8u) & 0b11111111u;
    }

    /**
     * Set HCTSIZ_BUFFERMODE's NTD field.
     */
    inline void set_HCTSIZ_SCATGATHER_NTD(uint8_t value)
    {
        uint32_t curr = HCTSIZ_SCATGATHER;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        HCTSIZ_SCATGATHER = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's SCHED_INFO field.
     */
    uint8_t get_HCTSIZ_SCATGATHER_SCHED_INFO()
    {
        return (HCTSIZ_SCATGATHER >> 0u) & 0b11111111u;
    }

    /**
     * Set HCTSIZ_BUFFERMODE's SCHED_INFO field.
     */
    inline void set_HCTSIZ_SCATGATHER_SCHED_INFO(uint8_t value)
    {
        uint32_t curr = HCTSIZ_SCATGATHER;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        HCTSIZ_SCATGATHER = curr;
    }

    /**
     * Get HCDMA_BUFFERMODE's DMAAddr field.
     */
    uint32_t get_HCDMA_BUFFERMODE_DMAAddr()
    {
        return (HCDMA_BUFFERMODE >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set HCDMA_BUFFERMODE's DMAAddr field.
     */
    inline void set_HCDMA_BUFFERMODE_DMAAddr(uint32_t value)
    {
        uint32_t curr = HCDMA_BUFFERMODE;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        HCDMA_BUFFERMODE = curr;
    }

    /**
     * Get HCDMA_BUFFERMODE's DMAAddr field.
     */
    uint32_t get_HCDMA_SCATGATHER_DMAAddr()
    {
        return (HCDMA_SCATGATHER >> 9u) & 0b11111111111111111111111u;
    }

    /**
     * Set HCDMA_BUFFERMODE's DMAAddr field.
     */
    inline void set_HCDMA_SCATGATHER_DMAAddr(uint32_t value)
    {
        uint32_t curr = HCDMA_SCATGATHER;

        curr &= ~(0b11111111111111111111111u << 9u);
        curr |= (value & 0b11111111111111111111111u) << 9u;

        HCDMA_SCATGATHER = curr;
    }

    /**
     * Get HCDMA_BUFFERMODE's CTD field.
     */
    USB0_CH0_HCDMA_SCATGATHER_CTD get_HCDMA_SCATGATHER_CTD()
    {
        return USB0_CH0_HCDMA_SCATGATHER_CTD((HCDMA_SCATGATHER >> 3u) &
                                             0b111111u);
    }

    /**
     * Set HCDMA_BUFFERMODE's CTD field.
     */
    inline void set_HCDMA_SCATGATHER_CTD(USB0_CH0_HCDMA_SCATGATHER_CTD value)
    {
        uint32_t curr = HCDMA_SCATGATHER;

        curr &= ~(0b111111u << 3u);
        curr |= (std::to_underlying(value) & 0b111111u) << 3u;

        HCDMA_SCATGATHER = curr;
    }

    /**
     * Get HCDMAB's Buffer_Address field.
     */
    uint32_t get_HCDMAB_Buffer_Address()
    {
        return (HCDMAB >> 0u) & 0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(usb0_ch) == usb0_ch::size);

static volatile usb0_ch *const USB0_CH0 =
    reinterpret_cast<usb0_ch *>(0x50040500);

static volatile usb0_ch *const USB0_CH1 =
    reinterpret_cast<usb0_ch *>(0x50040520);

static volatile usb0_ch *const USB0_CH2 =
    reinterpret_cast<usb0_ch *>(0x50040540);

static volatile usb0_ch *const USB0_CH3 =
    reinterpret_cast<usb0_ch *>(0x50040560);

static volatile usb0_ch *const USB0_CH4 =
    reinterpret_cast<usb0_ch *>(0x50040580);

static volatile usb0_ch *const USB0_CH5 =
    reinterpret_cast<usb0_ch *>(0x500405A0);

static volatile usb0_ch *const USB0_CH6 =
    reinterpret_cast<usb0_ch *>(0x500405C0);

static volatile usb0_ch *const USB0_CH7 =
    reinterpret_cast<usb0_ch *>(0x500405E0);

static volatile usb0_ch *const USB0_CH8 =
    reinterpret_cast<usb0_ch *>(0x50040600);

static volatile usb0_ch *const USB0_CH9 =
    reinterpret_cast<usb0_ch *>(0x50040620);

static volatile usb0_ch *const USB0_CH10 =
    reinterpret_cast<usb0_ch *>(0x50040640);

static volatile usb0_ch *const USB0_CH11 =
    reinterpret_cast<usb0_ch *>(0x50040660);

static volatile usb0_ch *const USB0_CH12 =
    reinterpret_cast<usb0_ch *>(0x50040680);

static volatile usb0_ch *const USB0_CH13 =
    reinterpret_cast<usb0_ch *>(0x500406A0);

}; // namespace XMC4700
