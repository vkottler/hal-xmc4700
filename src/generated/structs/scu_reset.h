/**
 * \file
 * \brief Generated by ifgen (3.2.0).
 */
#pragma once

#include "../enums/SCU_RESET_RSTSTAT_RSTSTAT.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * System Control Unit
 */
struct [[gnu::packed]] scu_reset
{
    /* Constant attributes. */
    static constexpr std::size_t size = 60; /*!< scu_reset's size in bytes. */

    /* Fields. */
    const uint32_t RSTSTAT = {}; /*!< (read-only) RCU Reset Status */
    uint32_t RSTSET;             /*!< (write-only) RCU Reset Set Register */
    uint32_t RSTCLR;             /*!< (write-only) RCU Reset Clear Register */
    const uint32_t PRSTAT0 =
        {};          /*!< (read-only) RCU Peripheral 0 Reset Status */
    uint32_t PRSET0; /*!< (write-only) RCU Peripheral 0 Reset Set */
    uint32_t PRCLR0; /*!< (write-only) RCU Peripheral 0 Reset Clear */
    const uint32_t PRSTAT1 =
        {};          /*!< (read-only) RCU Peripheral 1 Reset Status */
    uint32_t PRSET1; /*!< (write-only) RCU Peripheral 1 Reset Set */
    uint32_t PRCLR1; /*!< (write-only) RCU Peripheral 1 Reset Clear */
    const uint32_t PRSTAT2 =
        {};          /*!< (read-only) RCU Peripheral 2 Reset Status */
    uint32_t PRSET2; /*!< (write-only) RCU Peripheral 2 Reset Set */
    uint32_t PRCLR2; /*!< (write-only) RCU Peripheral 2 Reset Clear */
    const uint32_t PRSTAT3 =
        {};          /*!< (read-only) RCU Peripheral 3 Reset Status */
    uint32_t PRSET3; /*!< (write-only) RCU Peripheral 3 Reset Set */
    uint32_t PRCLR3; /*!< (write-only) RCU Peripheral 3 Reset Clear */

    /* Methods. */

    /**
     * Get RSTSTAT's LCKEN bit.
     *
     * Enable Lockup Status
     */
    inline bool get_RSTSTAT_LCKEN() volatile
    {
        return RSTSTAT & (1u << 10u);
    }

    /**
     * Get RSTSTAT's HIBRS bit.
     *
     * Hibernate Reset Status
     */
    inline bool get_RSTSTAT_HIBRS() volatile
    {
        return RSTSTAT & (1u << 9u);
    }

    /**
     * Get RSTSTAT's HIBWK bit.
     *
     * Hibernate Wake-up Status
     */
    inline bool get_RSTSTAT_HIBWK() volatile
    {
        return RSTSTAT & (1u << 8u);
    }

    /**
     * Get RSTSTAT's RSTSTAT field.
     *
     * Reset Status Information
     */
    inline SCU_RESET_RSTSTAT_RSTSTAT get_RSTSTAT_RSTSTAT() volatile
    {
        return SCU_RESET_RSTSTAT_RSTSTAT((RSTSTAT >> 0u) & 0b11111111u);
    }

    /**
     * Get all of RSTSTAT's bit fields.
     *
     * (read-only) RCU Reset Status
     */
    inline void get_RSTSTAT(bool &LCKEN, bool &HIBRS, bool &HIBWK,
                            SCU_RESET_RSTSTAT_RSTSTAT &RSTSTAT) volatile
    {
        uint32_t curr = RSTSTAT;

        LCKEN = curr & (1u << 10u);
        HIBRS = curr & (1u << 9u);
        HIBWK = curr & (1u << 8u);
        RSTSTAT = SCU_RESET_RSTSTAT_RSTSTAT((curr >> 0u) & 0b11111111u);
    }

    /**
     * Set RSTSET's LCKEN bit.
     *
     * Enable Lockup Reset
     */
    inline void set_RSTSET_LCKEN() volatile
    {
        RSTSET |= 1u << 10u;
    }

    /**
     * Clear RSTSET's LCKEN bit.
     *
     * Enable Lockup Reset
     */
    inline void clear_RSTSET_LCKEN() volatile
    {
        RSTSET &= ~(1u << 10u);
    }

    /**
     * Toggle RSTSET's LCKEN bit.
     *
     * Enable Lockup Reset
     */
    inline void toggle_RSTSET_LCKEN() volatile
    {
        RSTSET ^= 1u << 10u;
    }

    /**
     * Set RSTSET's HIBRS bit.
     *
     * Set Hibernate Reset
     */
    inline void set_RSTSET_HIBRS() volatile
    {
        RSTSET |= 1u << 9u;
    }

    /**
     * Clear RSTSET's HIBRS bit.
     *
     * Set Hibernate Reset
     */
    inline void clear_RSTSET_HIBRS() volatile
    {
        RSTSET &= ~(1u << 9u);
    }

    /**
     * Toggle RSTSET's HIBRS bit.
     *
     * Set Hibernate Reset
     */
    inline void toggle_RSTSET_HIBRS() volatile
    {
        RSTSET ^= 1u << 9u;
    }

    /**
     * Set RSTSET's HIBWK bit.
     *
     * Set Hibernate Wake-up Reset Status
     */
    inline void set_RSTSET_HIBWK() volatile
    {
        RSTSET |= 1u << 8u;
    }

    /**
     * Clear RSTSET's HIBWK bit.
     *
     * Set Hibernate Wake-up Reset Status
     */
    inline void clear_RSTSET_HIBWK() volatile
    {
        RSTSET &= ~(1u << 8u);
    }

    /**
     * Toggle RSTSET's HIBWK bit.
     *
     * Set Hibernate Wake-up Reset Status
     */
    inline void toggle_RSTSET_HIBWK() volatile
    {
        RSTSET ^= 1u << 8u;
    }

    /**
     * Set all of RSTSET's bit fields.
     *
     * (write-only) RCU Reset Set Register
     */
    inline void set_RSTSET(bool LCKEN, bool HIBRS, bool HIBWK) volatile
    {
        uint32_t curr = RSTSET;

        curr &= ~(0b1u << 10u);
        curr |= (LCKEN & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (HIBRS & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (HIBWK & 0b1u) << 8u;

        RSTSET = curr;
    }

    /**
     * Set RSTCLR's LCKEN bit.
     *
     * Enable Lockup Reset
     */
    inline void set_RSTCLR_LCKEN() volatile
    {
        RSTCLR |= 1u << 10u;
    }

    /**
     * Clear RSTCLR's LCKEN bit.
     *
     * Enable Lockup Reset
     */
    inline void clear_RSTCLR_LCKEN() volatile
    {
        RSTCLR &= ~(1u << 10u);
    }

    /**
     * Toggle RSTCLR's LCKEN bit.
     *
     * Enable Lockup Reset
     */
    inline void toggle_RSTCLR_LCKEN() volatile
    {
        RSTCLR ^= 1u << 10u;
    }

    /**
     * Set RSTCLR's HIBRS bit.
     *
     * Clear Hibernate Reset
     */
    inline void set_RSTCLR_HIBRS() volatile
    {
        RSTCLR |= 1u << 9u;
    }

    /**
     * Clear RSTCLR's HIBRS bit.
     *
     * Clear Hibernate Reset
     */
    inline void clear_RSTCLR_HIBRS() volatile
    {
        RSTCLR &= ~(1u << 9u);
    }

    /**
     * Toggle RSTCLR's HIBRS bit.
     *
     * Clear Hibernate Reset
     */
    inline void toggle_RSTCLR_HIBRS() volatile
    {
        RSTCLR ^= 1u << 9u;
    }

    /**
     * Set RSTCLR's HIBWK bit.
     *
     * Clear Hibernate Wake-up Reset Status
     */
    inline void set_RSTCLR_HIBWK() volatile
    {
        RSTCLR |= 1u << 8u;
    }

    /**
     * Clear RSTCLR's HIBWK bit.
     *
     * Clear Hibernate Wake-up Reset Status
     */
    inline void clear_RSTCLR_HIBWK() volatile
    {
        RSTCLR &= ~(1u << 8u);
    }

    /**
     * Toggle RSTCLR's HIBWK bit.
     *
     * Clear Hibernate Wake-up Reset Status
     */
    inline void toggle_RSTCLR_HIBWK() volatile
    {
        RSTCLR ^= 1u << 8u;
    }

    /**
     * Set RSTCLR's RSCLR bit.
     *
     * Clear Reset Status
     */
    inline void set_RSTCLR_RSCLR() volatile
    {
        RSTCLR |= 1u << 0u;
    }

    /**
     * Clear RSTCLR's RSCLR bit.
     *
     * Clear Reset Status
     */
    inline void clear_RSTCLR_RSCLR() volatile
    {
        RSTCLR &= ~(1u << 0u);
    }

    /**
     * Toggle RSTCLR's RSCLR bit.
     *
     * Clear Reset Status
     */
    inline void toggle_RSTCLR_RSCLR() volatile
    {
        RSTCLR ^= 1u << 0u;
    }

    /**
     * Set all of RSTCLR's bit fields.
     *
     * (write-only) RCU Reset Clear Register
     */
    inline void set_RSTCLR(bool LCKEN, bool HIBRS, bool HIBWK,
                           bool RSCLR) volatile
    {
        uint32_t curr = RSTCLR;

        curr &= ~(0b1u << 10u);
        curr |= (LCKEN & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (HIBRS & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (HIBWK & 0b1u) << 8u;
        curr &= ~(0b1u << 0u);
        curr |= (RSCLR & 0b1u) << 0u;

        RSTCLR = curr;
    }

    /**
     * Get PRSTAT0's ERU1RS bit.
     *
     * ERU1 Reset Status
     */
    inline bool get_PRSTAT0_ERU1RS() volatile
    {
        return PRSTAT0 & (1u << 16u);
    }

    /**
     * Get PRSTAT0's USIC0RS bit.
     *
     * USIC0 Reset Status
     */
    inline bool get_PRSTAT0_USIC0RS() volatile
    {
        return PRSTAT0 & (1u << 11u);
    }

    /**
     * Get PRSTAT0's POSIF1RS bit.
     *
     * POSIF1 Reset Status
     */
    inline bool get_PRSTAT0_POSIF1RS() volatile
    {
        return PRSTAT0 & (1u << 10u);
    }

    /**
     * Get PRSTAT0's POSIF0RS bit.
     *
     * POSIF0 Reset Status
     */
    inline bool get_PRSTAT0_POSIF0RS() volatile
    {
        return PRSTAT0 & (1u << 9u);
    }

    /**
     * Get PRSTAT0's CCU81RS bit.
     *
     * CCU81 Reset Status
     */
    inline bool get_PRSTAT0_CCU81RS() volatile
    {
        return PRSTAT0 & (1u << 8u);
    }

    /**
     * Get PRSTAT0's CCU80RS bit.
     *
     * CCU80 Reset Status
     */
    inline bool get_PRSTAT0_CCU80RS() volatile
    {
        return PRSTAT0 & (1u << 7u);
    }

    /**
     * Get PRSTAT0's CCU42RS bit.
     *
     * CCU42 Reset Status
     */
    inline bool get_PRSTAT0_CCU42RS() volatile
    {
        return PRSTAT0 & (1u << 4u);
    }

    /**
     * Get PRSTAT0's CCU41RS bit.
     *
     * CCU41 Reset Status
     */
    inline bool get_PRSTAT0_CCU41RS() volatile
    {
        return PRSTAT0 & (1u << 3u);
    }

    /**
     * Get PRSTAT0's CCU40RS bit.
     *
     * CCU40 Reset Status
     */
    inline bool get_PRSTAT0_CCU40RS() volatile
    {
        return PRSTAT0 & (1u << 2u);
    }

    /**
     * Get PRSTAT0's DSDRS bit.
     *
     * DSD Reset Status
     */
    inline bool get_PRSTAT0_DSDRS() volatile
    {
        return PRSTAT0 & (1u << 1u);
    }

    /**
     * Get PRSTAT0's VADCRS bit.
     *
     * VADC Reset Status
     */
    inline bool get_PRSTAT0_VADCRS() volatile
    {
        return PRSTAT0 & (1u << 0u);
    }

    /**
     * Get all of PRSTAT0's bit fields.
     *
     * (read-only) RCU Peripheral 0 Reset Status
     */
    inline void get_PRSTAT0(bool &ERU1RS, bool &USIC0RS, bool &POSIF1RS,
                            bool &POSIF0RS, bool &CCU81RS, bool &CCU80RS,
                            bool &CCU42RS, bool &CCU41RS, bool &CCU40RS,
                            bool &DSDRS, bool &VADCRS) volatile
    {
        uint32_t curr = PRSTAT0;

        ERU1RS = curr & (1u << 16u);
        USIC0RS = curr & (1u << 11u);
        POSIF1RS = curr & (1u << 10u);
        POSIF0RS = curr & (1u << 9u);
        CCU81RS = curr & (1u << 8u);
        CCU80RS = curr & (1u << 7u);
        CCU42RS = curr & (1u << 4u);
        CCU41RS = curr & (1u << 3u);
        CCU40RS = curr & (1u << 2u);
        DSDRS = curr & (1u << 1u);
        VADCRS = curr & (1u << 0u);
    }

    /**
     * Set PRSET0's ERU1RS bit.
     *
     * ERU1 Reset Assert
     */
    inline void set_PRSET0_ERU1RS() volatile
    {
        PRSET0 |= 1u << 16u;
    }

    /**
     * Clear PRSET0's ERU1RS bit.
     *
     * ERU1 Reset Assert
     */
    inline void clear_PRSET0_ERU1RS() volatile
    {
        PRSET0 &= ~(1u << 16u);
    }

    /**
     * Toggle PRSET0's ERU1RS bit.
     *
     * ERU1 Reset Assert
     */
    inline void toggle_PRSET0_ERU1RS() volatile
    {
        PRSET0 ^= 1u << 16u;
    }

    /**
     * Set PRSET0's USIC0RS bit.
     *
     * USIC0 Reset Assert
     */
    inline void set_PRSET0_USIC0RS() volatile
    {
        PRSET0 |= 1u << 11u;
    }

    /**
     * Clear PRSET0's USIC0RS bit.
     *
     * USIC0 Reset Assert
     */
    inline void clear_PRSET0_USIC0RS() volatile
    {
        PRSET0 &= ~(1u << 11u);
    }

    /**
     * Toggle PRSET0's USIC0RS bit.
     *
     * USIC0 Reset Assert
     */
    inline void toggle_PRSET0_USIC0RS() volatile
    {
        PRSET0 ^= 1u << 11u;
    }

    /**
     * Set PRSET0's POSIF1RS bit.
     *
     * POSIF1 Reset Assert
     */
    inline void set_PRSET0_POSIF1RS() volatile
    {
        PRSET0 |= 1u << 10u;
    }

    /**
     * Clear PRSET0's POSIF1RS bit.
     *
     * POSIF1 Reset Assert
     */
    inline void clear_PRSET0_POSIF1RS() volatile
    {
        PRSET0 &= ~(1u << 10u);
    }

    /**
     * Toggle PRSET0's POSIF1RS bit.
     *
     * POSIF1 Reset Assert
     */
    inline void toggle_PRSET0_POSIF1RS() volatile
    {
        PRSET0 ^= 1u << 10u;
    }

    /**
     * Set PRSET0's POSIF0RS bit.
     *
     * POSIF0 Reset Assert
     */
    inline void set_PRSET0_POSIF0RS() volatile
    {
        PRSET0 |= 1u << 9u;
    }

    /**
     * Clear PRSET0's POSIF0RS bit.
     *
     * POSIF0 Reset Assert
     */
    inline void clear_PRSET0_POSIF0RS() volatile
    {
        PRSET0 &= ~(1u << 9u);
    }

    /**
     * Toggle PRSET0's POSIF0RS bit.
     *
     * POSIF0 Reset Assert
     */
    inline void toggle_PRSET0_POSIF0RS() volatile
    {
        PRSET0 ^= 1u << 9u;
    }

    /**
     * Set PRSET0's CCU81RS bit.
     *
     * CCU81 Reset Assert
     */
    inline void set_PRSET0_CCU81RS() volatile
    {
        PRSET0 |= 1u << 8u;
    }

    /**
     * Clear PRSET0's CCU81RS bit.
     *
     * CCU81 Reset Assert
     */
    inline void clear_PRSET0_CCU81RS() volatile
    {
        PRSET0 &= ~(1u << 8u);
    }

    /**
     * Toggle PRSET0's CCU81RS bit.
     *
     * CCU81 Reset Assert
     */
    inline void toggle_PRSET0_CCU81RS() volatile
    {
        PRSET0 ^= 1u << 8u;
    }

    /**
     * Set PRSET0's CCU80RS bit.
     *
     * CCU80 Reset Assert
     */
    inline void set_PRSET0_CCU80RS() volatile
    {
        PRSET0 |= 1u << 7u;
    }

    /**
     * Clear PRSET0's CCU80RS bit.
     *
     * CCU80 Reset Assert
     */
    inline void clear_PRSET0_CCU80RS() volatile
    {
        PRSET0 &= ~(1u << 7u);
    }

    /**
     * Toggle PRSET0's CCU80RS bit.
     *
     * CCU80 Reset Assert
     */
    inline void toggle_PRSET0_CCU80RS() volatile
    {
        PRSET0 ^= 1u << 7u;
    }

    /**
     * Set PRSET0's CCU42RS bit.
     *
     * CCU42 Reset Assert
     */
    inline void set_PRSET0_CCU42RS() volatile
    {
        PRSET0 |= 1u << 4u;
    }

    /**
     * Clear PRSET0's CCU42RS bit.
     *
     * CCU42 Reset Assert
     */
    inline void clear_PRSET0_CCU42RS() volatile
    {
        PRSET0 &= ~(1u << 4u);
    }

    /**
     * Toggle PRSET0's CCU42RS bit.
     *
     * CCU42 Reset Assert
     */
    inline void toggle_PRSET0_CCU42RS() volatile
    {
        PRSET0 ^= 1u << 4u;
    }

    /**
     * Set PRSET0's CCU41RS bit.
     *
     * CCU41 Reset Assert
     */
    inline void set_PRSET0_CCU41RS() volatile
    {
        PRSET0 |= 1u << 3u;
    }

    /**
     * Clear PRSET0's CCU41RS bit.
     *
     * CCU41 Reset Assert
     */
    inline void clear_PRSET0_CCU41RS() volatile
    {
        PRSET0 &= ~(1u << 3u);
    }

    /**
     * Toggle PRSET0's CCU41RS bit.
     *
     * CCU41 Reset Assert
     */
    inline void toggle_PRSET0_CCU41RS() volatile
    {
        PRSET0 ^= 1u << 3u;
    }

    /**
     * Set PRSET0's CCU40RS bit.
     *
     * CCU40 Reset Assert
     */
    inline void set_PRSET0_CCU40RS() volatile
    {
        PRSET0 |= 1u << 2u;
    }

    /**
     * Clear PRSET0's CCU40RS bit.
     *
     * CCU40 Reset Assert
     */
    inline void clear_PRSET0_CCU40RS() volatile
    {
        PRSET0 &= ~(1u << 2u);
    }

    /**
     * Toggle PRSET0's CCU40RS bit.
     *
     * CCU40 Reset Assert
     */
    inline void toggle_PRSET0_CCU40RS() volatile
    {
        PRSET0 ^= 1u << 2u;
    }

    /**
     * Set PRSET0's DSDRS bit.
     *
     * DSD Reset Assert
     */
    inline void set_PRSET0_DSDRS() volatile
    {
        PRSET0 |= 1u << 1u;
    }

    /**
     * Clear PRSET0's DSDRS bit.
     *
     * DSD Reset Assert
     */
    inline void clear_PRSET0_DSDRS() volatile
    {
        PRSET0 &= ~(1u << 1u);
    }

    /**
     * Toggle PRSET0's DSDRS bit.
     *
     * DSD Reset Assert
     */
    inline void toggle_PRSET0_DSDRS() volatile
    {
        PRSET0 ^= 1u << 1u;
    }

    /**
     * Set PRSET0's VADCRS bit.
     *
     * VADC Reset Assert
     */
    inline void set_PRSET0_VADCRS() volatile
    {
        PRSET0 |= 1u << 0u;
    }

    /**
     * Clear PRSET0's VADCRS bit.
     *
     * VADC Reset Assert
     */
    inline void clear_PRSET0_VADCRS() volatile
    {
        PRSET0 &= ~(1u << 0u);
    }

    /**
     * Toggle PRSET0's VADCRS bit.
     *
     * VADC Reset Assert
     */
    inline void toggle_PRSET0_VADCRS() volatile
    {
        PRSET0 ^= 1u << 0u;
    }

    /**
     * Set all of PRSET0's bit fields.
     *
     * (write-only) RCU Peripheral 0 Reset Set
     */
    inline void set_PRSET0(bool ERU1RS, bool USIC0RS, bool POSIF1RS,
                           bool POSIF0RS, bool CCU81RS, bool CCU80RS,
                           bool CCU42RS, bool CCU41RS, bool CCU40RS,
                           bool DSDRS, bool VADCRS) volatile
    {
        uint32_t curr = PRSET0;

        curr &= ~(0b1u << 16u);
        curr |= (ERU1RS & 0b1u) << 16u;
        curr &= ~(0b1u << 11u);
        curr |= (USIC0RS & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (POSIF1RS & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (POSIF0RS & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (CCU81RS & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (CCU80RS & 0b1u) << 7u;
        curr &= ~(0b1u << 4u);
        curr |= (CCU42RS & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CCU41RS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CCU40RS & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSDRS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (VADCRS & 0b1u) << 0u;

        PRSET0 = curr;
    }

    /**
     * Set PRCLR0's ERU1RS bit.
     *
     * ERU1 Reset Clear
     */
    inline void set_PRCLR0_ERU1RS() volatile
    {
        PRCLR0 |= 1u << 16u;
    }

    /**
     * Clear PRCLR0's ERU1RS bit.
     *
     * ERU1 Reset Clear
     */
    inline void clear_PRCLR0_ERU1RS() volatile
    {
        PRCLR0 &= ~(1u << 16u);
    }

    /**
     * Toggle PRCLR0's ERU1RS bit.
     *
     * ERU1 Reset Clear
     */
    inline void toggle_PRCLR0_ERU1RS() volatile
    {
        PRCLR0 ^= 1u << 16u;
    }

    /**
     * Set PRCLR0's USIC0RS bit.
     *
     * USIC0 Reset Clear
     */
    inline void set_PRCLR0_USIC0RS() volatile
    {
        PRCLR0 |= 1u << 11u;
    }

    /**
     * Clear PRCLR0's USIC0RS bit.
     *
     * USIC0 Reset Clear
     */
    inline void clear_PRCLR0_USIC0RS() volatile
    {
        PRCLR0 &= ~(1u << 11u);
    }

    /**
     * Toggle PRCLR0's USIC0RS bit.
     *
     * USIC0 Reset Clear
     */
    inline void toggle_PRCLR0_USIC0RS() volatile
    {
        PRCLR0 ^= 1u << 11u;
    }

    /**
     * Set PRCLR0's POSIF1RS bit.
     *
     * POSIF1 Reset Clear
     */
    inline void set_PRCLR0_POSIF1RS() volatile
    {
        PRCLR0 |= 1u << 10u;
    }

    /**
     * Clear PRCLR0's POSIF1RS bit.
     *
     * POSIF1 Reset Clear
     */
    inline void clear_PRCLR0_POSIF1RS() volatile
    {
        PRCLR0 &= ~(1u << 10u);
    }

    /**
     * Toggle PRCLR0's POSIF1RS bit.
     *
     * POSIF1 Reset Clear
     */
    inline void toggle_PRCLR0_POSIF1RS() volatile
    {
        PRCLR0 ^= 1u << 10u;
    }

    /**
     * Set PRCLR0's POSIF0RS bit.
     *
     * POSIF0 Reset Clear
     */
    inline void set_PRCLR0_POSIF0RS() volatile
    {
        PRCLR0 |= 1u << 9u;
    }

    /**
     * Clear PRCLR0's POSIF0RS bit.
     *
     * POSIF0 Reset Clear
     */
    inline void clear_PRCLR0_POSIF0RS() volatile
    {
        PRCLR0 &= ~(1u << 9u);
    }

    /**
     * Toggle PRCLR0's POSIF0RS bit.
     *
     * POSIF0 Reset Clear
     */
    inline void toggle_PRCLR0_POSIF0RS() volatile
    {
        PRCLR0 ^= 1u << 9u;
    }

    /**
     * Set PRCLR0's CCU81RS bit.
     *
     * CCU81 Reset Clear
     */
    inline void set_PRCLR0_CCU81RS() volatile
    {
        PRCLR0 |= 1u << 8u;
    }

    /**
     * Clear PRCLR0's CCU81RS bit.
     *
     * CCU81 Reset Clear
     */
    inline void clear_PRCLR0_CCU81RS() volatile
    {
        PRCLR0 &= ~(1u << 8u);
    }

    /**
     * Toggle PRCLR0's CCU81RS bit.
     *
     * CCU81 Reset Clear
     */
    inline void toggle_PRCLR0_CCU81RS() volatile
    {
        PRCLR0 ^= 1u << 8u;
    }

    /**
     * Set PRCLR0's CCU80RS bit.
     *
     * CCU80 Reset Clear
     */
    inline void set_PRCLR0_CCU80RS() volatile
    {
        PRCLR0 |= 1u << 7u;
    }

    /**
     * Clear PRCLR0's CCU80RS bit.
     *
     * CCU80 Reset Clear
     */
    inline void clear_PRCLR0_CCU80RS() volatile
    {
        PRCLR0 &= ~(1u << 7u);
    }

    /**
     * Toggle PRCLR0's CCU80RS bit.
     *
     * CCU80 Reset Clear
     */
    inline void toggle_PRCLR0_CCU80RS() volatile
    {
        PRCLR0 ^= 1u << 7u;
    }

    /**
     * Set PRCLR0's CCU42RS bit.
     *
     * CCU42 Reset Clear
     */
    inline void set_PRCLR0_CCU42RS() volatile
    {
        PRCLR0 |= 1u << 4u;
    }

    /**
     * Clear PRCLR0's CCU42RS bit.
     *
     * CCU42 Reset Clear
     */
    inline void clear_PRCLR0_CCU42RS() volatile
    {
        PRCLR0 &= ~(1u << 4u);
    }

    /**
     * Toggle PRCLR0's CCU42RS bit.
     *
     * CCU42 Reset Clear
     */
    inline void toggle_PRCLR0_CCU42RS() volatile
    {
        PRCLR0 ^= 1u << 4u;
    }

    /**
     * Set PRCLR0's CCU41RS bit.
     *
     * CCU41 Reset Clear
     */
    inline void set_PRCLR0_CCU41RS() volatile
    {
        PRCLR0 |= 1u << 3u;
    }

    /**
     * Clear PRCLR0's CCU41RS bit.
     *
     * CCU41 Reset Clear
     */
    inline void clear_PRCLR0_CCU41RS() volatile
    {
        PRCLR0 &= ~(1u << 3u);
    }

    /**
     * Toggle PRCLR0's CCU41RS bit.
     *
     * CCU41 Reset Clear
     */
    inline void toggle_PRCLR0_CCU41RS() volatile
    {
        PRCLR0 ^= 1u << 3u;
    }

    /**
     * Set PRCLR0's CCU40RS bit.
     *
     * CCU40 Reset Clear
     */
    inline void set_PRCLR0_CCU40RS() volatile
    {
        PRCLR0 |= 1u << 2u;
    }

    /**
     * Clear PRCLR0's CCU40RS bit.
     *
     * CCU40 Reset Clear
     */
    inline void clear_PRCLR0_CCU40RS() volatile
    {
        PRCLR0 &= ~(1u << 2u);
    }

    /**
     * Toggle PRCLR0's CCU40RS bit.
     *
     * CCU40 Reset Clear
     */
    inline void toggle_PRCLR0_CCU40RS() volatile
    {
        PRCLR0 ^= 1u << 2u;
    }

    /**
     * Set PRCLR0's DSDRS bit.
     *
     * DSD Reset Clear
     */
    inline void set_PRCLR0_DSDRS() volatile
    {
        PRCLR0 |= 1u << 1u;
    }

    /**
     * Clear PRCLR0's DSDRS bit.
     *
     * DSD Reset Clear
     */
    inline void clear_PRCLR0_DSDRS() volatile
    {
        PRCLR0 &= ~(1u << 1u);
    }

    /**
     * Toggle PRCLR0's DSDRS bit.
     *
     * DSD Reset Clear
     */
    inline void toggle_PRCLR0_DSDRS() volatile
    {
        PRCLR0 ^= 1u << 1u;
    }

    /**
     * Set PRCLR0's VADCRS bit.
     *
     * VADC Reset Clear
     */
    inline void set_PRCLR0_VADCRS() volatile
    {
        PRCLR0 |= 1u << 0u;
    }

    /**
     * Clear PRCLR0's VADCRS bit.
     *
     * VADC Reset Clear
     */
    inline void clear_PRCLR0_VADCRS() volatile
    {
        PRCLR0 &= ~(1u << 0u);
    }

    /**
     * Toggle PRCLR0's VADCRS bit.
     *
     * VADC Reset Clear
     */
    inline void toggle_PRCLR0_VADCRS() volatile
    {
        PRCLR0 ^= 1u << 0u;
    }

    /**
     * Set all of PRCLR0's bit fields.
     *
     * (write-only) RCU Peripheral 0 Reset Clear
     */
    inline void set_PRCLR0(bool ERU1RS, bool USIC0RS, bool POSIF1RS,
                           bool POSIF0RS, bool CCU81RS, bool CCU80RS,
                           bool CCU42RS, bool CCU41RS, bool CCU40RS,
                           bool DSDRS, bool VADCRS) volatile
    {
        uint32_t curr = PRCLR0;

        curr &= ~(0b1u << 16u);
        curr |= (ERU1RS & 0b1u) << 16u;
        curr &= ~(0b1u << 11u);
        curr |= (USIC0RS & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (POSIF1RS & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (POSIF0RS & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (CCU81RS & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (CCU80RS & 0b1u) << 7u;
        curr &= ~(0b1u << 4u);
        curr |= (CCU42RS & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (CCU41RS & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (CCU40RS & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (DSDRS & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (VADCRS & 0b1u) << 0u;

        PRCLR0 = curr;
    }

    /**
     * Get PRSTAT1's PPORTSRS bit.
     *
     * PORTS Reset Status
     */
    inline bool get_PRSTAT1_PPORTSRS() volatile
    {
        return PRSTAT1 & (1u << 9u);
    }

    /**
     * Get PRSTAT1's USIC2RS bit.
     *
     * USIC2 Reset Status
     */
    inline bool get_PRSTAT1_USIC2RS() volatile
    {
        return PRSTAT1 & (1u << 8u);
    }

    /**
     * Get PRSTAT1's USIC1RS bit.
     *
     * USIC1 Reset Status
     */
    inline bool get_PRSTAT1_USIC1RS() volatile
    {
        return PRSTAT1 & (1u << 7u);
    }

    /**
     * Get PRSTAT1's MMCIRS bit.
     *
     * MMC Interface Reset Status
     */
    inline bool get_PRSTAT1_MMCIRS() volatile
    {
        return PRSTAT1 & (1u << 6u);
    }

    /**
     * Get PRSTAT1's DACRS bit.
     *
     * DAC Reset Status
     */
    inline bool get_PRSTAT1_DACRS() volatile
    {
        return PRSTAT1 & (1u << 5u);
    }

    /**
     * Get PRSTAT1's MCAN0RS bit.
     *
     * MultiCAN Reset Status
     */
    inline bool get_PRSTAT1_MCAN0RS() volatile
    {
        return PRSTAT1 & (1u << 4u);
    }

    /**
     * Get PRSTAT1's LEDTSCU0RS bit.
     *
     * LEDTS Reset Status
     */
    inline bool get_PRSTAT1_LEDTSCU0RS() volatile
    {
        return PRSTAT1 & (1u << 3u);
    }

    /**
     * Get PRSTAT1's CCU43RS bit.
     *
     * CCU43 Reset Status
     */
    inline bool get_PRSTAT1_CCU43RS() volatile
    {
        return PRSTAT1 & (1u << 0u);
    }

    /**
     * Get all of PRSTAT1's bit fields.
     *
     * (read-only) RCU Peripheral 1 Reset Status
     */
    inline void get_PRSTAT1(bool &PPORTSRS, bool &USIC2RS, bool &USIC1RS,
                            bool &MMCIRS, bool &DACRS, bool &MCAN0RS,
                            bool &LEDTSCU0RS, bool &CCU43RS) volatile
    {
        uint32_t curr = PRSTAT1;

        PPORTSRS = curr & (1u << 9u);
        USIC2RS = curr & (1u << 8u);
        USIC1RS = curr & (1u << 7u);
        MMCIRS = curr & (1u << 6u);
        DACRS = curr & (1u << 5u);
        MCAN0RS = curr & (1u << 4u);
        LEDTSCU0RS = curr & (1u << 3u);
        CCU43RS = curr & (1u << 0u);
    }

    /**
     * Set PRSET1's PPORTSRS bit.
     *
     * PORTS Reset Assert
     */
    inline void set_PRSET1_PPORTSRS() volatile
    {
        PRSET1 |= 1u << 9u;
    }

    /**
     * Clear PRSET1's PPORTSRS bit.
     *
     * PORTS Reset Assert
     */
    inline void clear_PRSET1_PPORTSRS() volatile
    {
        PRSET1 &= ~(1u << 9u);
    }

    /**
     * Toggle PRSET1's PPORTSRS bit.
     *
     * PORTS Reset Assert
     */
    inline void toggle_PRSET1_PPORTSRS() volatile
    {
        PRSET1 ^= 1u << 9u;
    }

    /**
     * Set PRSET1's USIC2RS bit.
     *
     * USIC2 Reset Assert
     */
    inline void set_PRSET1_USIC2RS() volatile
    {
        PRSET1 |= 1u << 8u;
    }

    /**
     * Clear PRSET1's USIC2RS bit.
     *
     * USIC2 Reset Assert
     */
    inline void clear_PRSET1_USIC2RS() volatile
    {
        PRSET1 &= ~(1u << 8u);
    }

    /**
     * Toggle PRSET1's USIC2RS bit.
     *
     * USIC2 Reset Assert
     */
    inline void toggle_PRSET1_USIC2RS() volatile
    {
        PRSET1 ^= 1u << 8u;
    }

    /**
     * Set PRSET1's USIC1RS bit.
     *
     * USIC1 Reset Assert
     */
    inline void set_PRSET1_USIC1RS() volatile
    {
        PRSET1 |= 1u << 7u;
    }

    /**
     * Clear PRSET1's USIC1RS bit.
     *
     * USIC1 Reset Assert
     */
    inline void clear_PRSET1_USIC1RS() volatile
    {
        PRSET1 &= ~(1u << 7u);
    }

    /**
     * Toggle PRSET1's USIC1RS bit.
     *
     * USIC1 Reset Assert
     */
    inline void toggle_PRSET1_USIC1RS() volatile
    {
        PRSET1 ^= 1u << 7u;
    }

    /**
     * Set PRSET1's MMCIRS bit.
     *
     * MMC Interface Reset Assert
     */
    inline void set_PRSET1_MMCIRS() volatile
    {
        PRSET1 |= 1u << 6u;
    }

    /**
     * Clear PRSET1's MMCIRS bit.
     *
     * MMC Interface Reset Assert
     */
    inline void clear_PRSET1_MMCIRS() volatile
    {
        PRSET1 &= ~(1u << 6u);
    }

    /**
     * Toggle PRSET1's MMCIRS bit.
     *
     * MMC Interface Reset Assert
     */
    inline void toggle_PRSET1_MMCIRS() volatile
    {
        PRSET1 ^= 1u << 6u;
    }

    /**
     * Set PRSET1's DACRS bit.
     *
     * DAC Reset Assert
     */
    inline void set_PRSET1_DACRS() volatile
    {
        PRSET1 |= 1u << 5u;
    }

    /**
     * Clear PRSET1's DACRS bit.
     *
     * DAC Reset Assert
     */
    inline void clear_PRSET1_DACRS() volatile
    {
        PRSET1 &= ~(1u << 5u);
    }

    /**
     * Toggle PRSET1's DACRS bit.
     *
     * DAC Reset Assert
     */
    inline void toggle_PRSET1_DACRS() volatile
    {
        PRSET1 ^= 1u << 5u;
    }

    /**
     * Set PRSET1's MCAN0RS bit.
     *
     * MultiCAN Reset Assert
     */
    inline void set_PRSET1_MCAN0RS() volatile
    {
        PRSET1 |= 1u << 4u;
    }

    /**
     * Clear PRSET1's MCAN0RS bit.
     *
     * MultiCAN Reset Assert
     */
    inline void clear_PRSET1_MCAN0RS() volatile
    {
        PRSET1 &= ~(1u << 4u);
    }

    /**
     * Toggle PRSET1's MCAN0RS bit.
     *
     * MultiCAN Reset Assert
     */
    inline void toggle_PRSET1_MCAN0RS() volatile
    {
        PRSET1 ^= 1u << 4u;
    }

    /**
     * Set PRSET1's LEDTSCU0RS bit.
     *
     * LEDTS Reset Assert
     */
    inline void set_PRSET1_LEDTSCU0RS() volatile
    {
        PRSET1 |= 1u << 3u;
    }

    /**
     * Clear PRSET1's LEDTSCU0RS bit.
     *
     * LEDTS Reset Assert
     */
    inline void clear_PRSET1_LEDTSCU0RS() volatile
    {
        PRSET1 &= ~(1u << 3u);
    }

    /**
     * Toggle PRSET1's LEDTSCU0RS bit.
     *
     * LEDTS Reset Assert
     */
    inline void toggle_PRSET1_LEDTSCU0RS() volatile
    {
        PRSET1 ^= 1u << 3u;
    }

    /**
     * Set PRSET1's CCU43RS bit.
     *
     * CCU43 Reset Assert
     */
    inline void set_PRSET1_CCU43RS() volatile
    {
        PRSET1 |= 1u << 0u;
    }

    /**
     * Clear PRSET1's CCU43RS bit.
     *
     * CCU43 Reset Assert
     */
    inline void clear_PRSET1_CCU43RS() volatile
    {
        PRSET1 &= ~(1u << 0u);
    }

    /**
     * Toggle PRSET1's CCU43RS bit.
     *
     * CCU43 Reset Assert
     */
    inline void toggle_PRSET1_CCU43RS() volatile
    {
        PRSET1 ^= 1u << 0u;
    }

    /**
     * Set all of PRSET1's bit fields.
     *
     * (write-only) RCU Peripheral 1 Reset Set
     */
    inline void set_PRSET1(bool PPORTSRS, bool USIC2RS, bool USIC1RS,
                           bool MMCIRS, bool DACRS, bool MCAN0RS,
                           bool LEDTSCU0RS, bool CCU43RS) volatile
    {
        uint32_t curr = PRSET1;

        curr &= ~(0b1u << 9u);
        curr |= (PPORTSRS & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (USIC2RS & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (USIC1RS & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (MMCIRS & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (DACRS & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (MCAN0RS & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (LEDTSCU0RS & 0b1u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (CCU43RS & 0b1u) << 0u;

        PRSET1 = curr;
    }

    /**
     * Set PRCLR1's PPORTSRS bit.
     *
     * PORTS Reset Clear
     */
    inline void set_PRCLR1_PPORTSRS() volatile
    {
        PRCLR1 |= 1u << 9u;
    }

    /**
     * Clear PRCLR1's PPORTSRS bit.
     *
     * PORTS Reset Clear
     */
    inline void clear_PRCLR1_PPORTSRS() volatile
    {
        PRCLR1 &= ~(1u << 9u);
    }

    /**
     * Toggle PRCLR1's PPORTSRS bit.
     *
     * PORTS Reset Clear
     */
    inline void toggle_PRCLR1_PPORTSRS() volatile
    {
        PRCLR1 ^= 1u << 9u;
    }

    /**
     * Set PRCLR1's USIC2RS bit.
     *
     * USIC2 Reset Clear
     */
    inline void set_PRCLR1_USIC2RS() volatile
    {
        PRCLR1 |= 1u << 8u;
    }

    /**
     * Clear PRCLR1's USIC2RS bit.
     *
     * USIC2 Reset Clear
     */
    inline void clear_PRCLR1_USIC2RS() volatile
    {
        PRCLR1 &= ~(1u << 8u);
    }

    /**
     * Toggle PRCLR1's USIC2RS bit.
     *
     * USIC2 Reset Clear
     */
    inline void toggle_PRCLR1_USIC2RS() volatile
    {
        PRCLR1 ^= 1u << 8u;
    }

    /**
     * Set PRCLR1's USIC1RS bit.
     *
     * USIC1 Reset Clear
     */
    inline void set_PRCLR1_USIC1RS() volatile
    {
        PRCLR1 |= 1u << 7u;
    }

    /**
     * Clear PRCLR1's USIC1RS bit.
     *
     * USIC1 Reset Clear
     */
    inline void clear_PRCLR1_USIC1RS() volatile
    {
        PRCLR1 &= ~(1u << 7u);
    }

    /**
     * Toggle PRCLR1's USIC1RS bit.
     *
     * USIC1 Reset Clear
     */
    inline void toggle_PRCLR1_USIC1RS() volatile
    {
        PRCLR1 ^= 1u << 7u;
    }

    /**
     * Set PRCLR1's MMCIRS bit.
     *
     * MMC Interface Reset Clear
     */
    inline void set_PRCLR1_MMCIRS() volatile
    {
        PRCLR1 |= 1u << 6u;
    }

    /**
     * Clear PRCLR1's MMCIRS bit.
     *
     * MMC Interface Reset Clear
     */
    inline void clear_PRCLR1_MMCIRS() volatile
    {
        PRCLR1 &= ~(1u << 6u);
    }

    /**
     * Toggle PRCLR1's MMCIRS bit.
     *
     * MMC Interface Reset Clear
     */
    inline void toggle_PRCLR1_MMCIRS() volatile
    {
        PRCLR1 ^= 1u << 6u;
    }

    /**
     * Set PRCLR1's DACRS bit.
     *
     * DAC Reset Clear
     */
    inline void set_PRCLR1_DACRS() volatile
    {
        PRCLR1 |= 1u << 5u;
    }

    /**
     * Clear PRCLR1's DACRS bit.
     *
     * DAC Reset Clear
     */
    inline void clear_PRCLR1_DACRS() volatile
    {
        PRCLR1 &= ~(1u << 5u);
    }

    /**
     * Toggle PRCLR1's DACRS bit.
     *
     * DAC Reset Clear
     */
    inline void toggle_PRCLR1_DACRS() volatile
    {
        PRCLR1 ^= 1u << 5u;
    }

    /**
     * Set PRCLR1's MCAN0RS bit.
     *
     * MultiCAN Reset Clear
     */
    inline void set_PRCLR1_MCAN0RS() volatile
    {
        PRCLR1 |= 1u << 4u;
    }

    /**
     * Clear PRCLR1's MCAN0RS bit.
     *
     * MultiCAN Reset Clear
     */
    inline void clear_PRCLR1_MCAN0RS() volatile
    {
        PRCLR1 &= ~(1u << 4u);
    }

    /**
     * Toggle PRCLR1's MCAN0RS bit.
     *
     * MultiCAN Reset Clear
     */
    inline void toggle_PRCLR1_MCAN0RS() volatile
    {
        PRCLR1 ^= 1u << 4u;
    }

    /**
     * Set PRCLR1's LEDTSCU0RS bit.
     *
     * LEDTS Reset Clear
     */
    inline void set_PRCLR1_LEDTSCU0RS() volatile
    {
        PRCLR1 |= 1u << 3u;
    }

    /**
     * Clear PRCLR1's LEDTSCU0RS bit.
     *
     * LEDTS Reset Clear
     */
    inline void clear_PRCLR1_LEDTSCU0RS() volatile
    {
        PRCLR1 &= ~(1u << 3u);
    }

    /**
     * Toggle PRCLR1's LEDTSCU0RS bit.
     *
     * LEDTS Reset Clear
     */
    inline void toggle_PRCLR1_LEDTSCU0RS() volatile
    {
        PRCLR1 ^= 1u << 3u;
    }

    /**
     * Set PRCLR1's CCU43RS bit.
     *
     * CCU43 Reset Clear
     */
    inline void set_PRCLR1_CCU43RS() volatile
    {
        PRCLR1 |= 1u << 0u;
    }

    /**
     * Clear PRCLR1's CCU43RS bit.
     *
     * CCU43 Reset Clear
     */
    inline void clear_PRCLR1_CCU43RS() volatile
    {
        PRCLR1 &= ~(1u << 0u);
    }

    /**
     * Toggle PRCLR1's CCU43RS bit.
     *
     * CCU43 Reset Clear
     */
    inline void toggle_PRCLR1_CCU43RS() volatile
    {
        PRCLR1 ^= 1u << 0u;
    }

    /**
     * Set all of PRCLR1's bit fields.
     *
     * (write-only) RCU Peripheral 1 Reset Clear
     */
    inline void set_PRCLR1(bool PPORTSRS, bool USIC2RS, bool USIC1RS,
                           bool MMCIRS, bool DACRS, bool MCAN0RS,
                           bool LEDTSCU0RS, bool CCU43RS) volatile
    {
        uint32_t curr = PRCLR1;

        curr &= ~(0b1u << 9u);
        curr |= (PPORTSRS & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (USIC2RS & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (USIC1RS & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (MMCIRS & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (DACRS & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (MCAN0RS & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (LEDTSCU0RS & 0b1u) << 3u;
        curr &= ~(0b1u << 0u);
        curr |= (CCU43RS & 0b1u) << 0u;

        PRCLR1 = curr;
    }

    /**
     * Get PRSTAT2's USBRS bit.
     *
     * USB Reset Status
     */
    inline bool get_PRSTAT2_USBRS() volatile
    {
        return PRSTAT2 & (1u << 7u);
    }

    /**
     * Get PRSTAT2's FCERS bit.
     *
     * FCE Reset Status
     */
    inline bool get_PRSTAT2_FCERS() volatile
    {
        return PRSTAT2 & (1u << 6u);
    }

    /**
     * Get PRSTAT2's DMA1RS bit.
     *
     * DMA1 Reset Status
     */
    inline bool get_PRSTAT2_DMA1RS() volatile
    {
        return PRSTAT2 & (1u << 5u);
    }

    /**
     * Get PRSTAT2's DMA0RS bit.
     *
     * DMA0 Reset Status
     */
    inline bool get_PRSTAT2_DMA0RS() volatile
    {
        return PRSTAT2 & (1u << 4u);
    }

    /**
     * Get PRSTAT2's ETH0RS bit.
     *
     * ETH0 Reset Status
     */
    inline bool get_PRSTAT2_ETH0RS() volatile
    {
        return PRSTAT2 & (1u << 2u);
    }

    /**
     * Get PRSTAT2's WDTRS bit.
     *
     * WDT Reset Status
     */
    inline bool get_PRSTAT2_WDTRS() volatile
    {
        return PRSTAT2 & (1u << 1u);
    }

    /**
     * Get all of PRSTAT2's bit fields.
     *
     * (read-only) RCU Peripheral 2 Reset Status
     */
    inline void get_PRSTAT2(bool &USBRS, bool &FCERS, bool &DMA1RS,
                            bool &DMA0RS, bool &ETH0RS, bool &WDTRS) volatile
    {
        uint32_t curr = PRSTAT2;

        USBRS = curr & (1u << 7u);
        FCERS = curr & (1u << 6u);
        DMA1RS = curr & (1u << 5u);
        DMA0RS = curr & (1u << 4u);
        ETH0RS = curr & (1u << 2u);
        WDTRS = curr & (1u << 1u);
    }

    /**
     * Set PRSET2's USBRS bit.
     *
     * USB Reset Assert
     */
    inline void set_PRSET2_USBRS() volatile
    {
        PRSET2 |= 1u << 7u;
    }

    /**
     * Clear PRSET2's USBRS bit.
     *
     * USB Reset Assert
     */
    inline void clear_PRSET2_USBRS() volatile
    {
        PRSET2 &= ~(1u << 7u);
    }

    /**
     * Toggle PRSET2's USBRS bit.
     *
     * USB Reset Assert
     */
    inline void toggle_PRSET2_USBRS() volatile
    {
        PRSET2 ^= 1u << 7u;
    }

    /**
     * Set PRSET2's FCERS bit.
     *
     * FCE Reset Assert
     */
    inline void set_PRSET2_FCERS() volatile
    {
        PRSET2 |= 1u << 6u;
    }

    /**
     * Clear PRSET2's FCERS bit.
     *
     * FCE Reset Assert
     */
    inline void clear_PRSET2_FCERS() volatile
    {
        PRSET2 &= ~(1u << 6u);
    }

    /**
     * Toggle PRSET2's FCERS bit.
     *
     * FCE Reset Assert
     */
    inline void toggle_PRSET2_FCERS() volatile
    {
        PRSET2 ^= 1u << 6u;
    }

    /**
     * Set PRSET2's DMA1RS bit.
     *
     * DMA1 Reset Assert
     */
    inline void set_PRSET2_DMA1RS() volatile
    {
        PRSET2 |= 1u << 5u;
    }

    /**
     * Clear PRSET2's DMA1RS bit.
     *
     * DMA1 Reset Assert
     */
    inline void clear_PRSET2_DMA1RS() volatile
    {
        PRSET2 &= ~(1u << 5u);
    }

    /**
     * Toggle PRSET2's DMA1RS bit.
     *
     * DMA1 Reset Assert
     */
    inline void toggle_PRSET2_DMA1RS() volatile
    {
        PRSET2 ^= 1u << 5u;
    }

    /**
     * Set PRSET2's DMA0RS bit.
     *
     * DMA0 Reset Assert
     */
    inline void set_PRSET2_DMA0RS() volatile
    {
        PRSET2 |= 1u << 4u;
    }

    /**
     * Clear PRSET2's DMA0RS bit.
     *
     * DMA0 Reset Assert
     */
    inline void clear_PRSET2_DMA0RS() volatile
    {
        PRSET2 &= ~(1u << 4u);
    }

    /**
     * Toggle PRSET2's DMA0RS bit.
     *
     * DMA0 Reset Assert
     */
    inline void toggle_PRSET2_DMA0RS() volatile
    {
        PRSET2 ^= 1u << 4u;
    }

    /**
     * Set PRSET2's ETH0RS bit.
     *
     * ETH0 Reset Assert
     */
    inline void set_PRSET2_ETH0RS() volatile
    {
        PRSET2 |= 1u << 2u;
    }

    /**
     * Clear PRSET2's ETH0RS bit.
     *
     * ETH0 Reset Assert
     */
    inline void clear_PRSET2_ETH0RS() volatile
    {
        PRSET2 &= ~(1u << 2u);
    }

    /**
     * Toggle PRSET2's ETH0RS bit.
     *
     * ETH0 Reset Assert
     */
    inline void toggle_PRSET2_ETH0RS() volatile
    {
        PRSET2 ^= 1u << 2u;
    }

    /**
     * Set PRSET2's WDTRS bit.
     *
     * WDT Reset Assert
     */
    inline void set_PRSET2_WDTRS() volatile
    {
        PRSET2 |= 1u << 1u;
    }

    /**
     * Clear PRSET2's WDTRS bit.
     *
     * WDT Reset Assert
     */
    inline void clear_PRSET2_WDTRS() volatile
    {
        PRSET2 &= ~(1u << 1u);
    }

    /**
     * Toggle PRSET2's WDTRS bit.
     *
     * WDT Reset Assert
     */
    inline void toggle_PRSET2_WDTRS() volatile
    {
        PRSET2 ^= 1u << 1u;
    }

    /**
     * Set all of PRSET2's bit fields.
     *
     * (write-only) RCU Peripheral 2 Reset Set
     */
    inline void set_PRSET2(bool USBRS, bool FCERS, bool DMA1RS, bool DMA0RS,
                           bool ETH0RS, bool WDTRS) volatile
    {
        uint32_t curr = PRSET2;

        curr &= ~(0b1u << 7u);
        curr |= (USBRS & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (FCERS & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (DMA1RS & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (DMA0RS & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (ETH0RS & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (WDTRS & 0b1u) << 1u;

        PRSET2 = curr;
    }

    /**
     * Set PRCLR2's USBRS bit.
     *
     * USB Reset Clear
     */
    inline void set_PRCLR2_USBRS() volatile
    {
        PRCLR2 |= 1u << 7u;
    }

    /**
     * Clear PRCLR2's USBRS bit.
     *
     * USB Reset Clear
     */
    inline void clear_PRCLR2_USBRS() volatile
    {
        PRCLR2 &= ~(1u << 7u);
    }

    /**
     * Toggle PRCLR2's USBRS bit.
     *
     * USB Reset Clear
     */
    inline void toggle_PRCLR2_USBRS() volatile
    {
        PRCLR2 ^= 1u << 7u;
    }

    /**
     * Set PRCLR2's FCERS bit.
     *
     * FCE Reset Clear
     */
    inline void set_PRCLR2_FCERS() volatile
    {
        PRCLR2 |= 1u << 6u;
    }

    /**
     * Clear PRCLR2's FCERS bit.
     *
     * FCE Reset Clear
     */
    inline void clear_PRCLR2_FCERS() volatile
    {
        PRCLR2 &= ~(1u << 6u);
    }

    /**
     * Toggle PRCLR2's FCERS bit.
     *
     * FCE Reset Clear
     */
    inline void toggle_PRCLR2_FCERS() volatile
    {
        PRCLR2 ^= 1u << 6u;
    }

    /**
     * Set PRCLR2's DMA1RS bit.
     *
     * DMA1 Reset Clear
     */
    inline void set_PRCLR2_DMA1RS() volatile
    {
        PRCLR2 |= 1u << 5u;
    }

    /**
     * Clear PRCLR2's DMA1RS bit.
     *
     * DMA1 Reset Clear
     */
    inline void clear_PRCLR2_DMA1RS() volatile
    {
        PRCLR2 &= ~(1u << 5u);
    }

    /**
     * Toggle PRCLR2's DMA1RS bit.
     *
     * DMA1 Reset Clear
     */
    inline void toggle_PRCLR2_DMA1RS() volatile
    {
        PRCLR2 ^= 1u << 5u;
    }

    /**
     * Set PRCLR2's DMA0RS bit.
     *
     * DMA0 Reset Clear
     */
    inline void set_PRCLR2_DMA0RS() volatile
    {
        PRCLR2 |= 1u << 4u;
    }

    /**
     * Clear PRCLR2's DMA0RS bit.
     *
     * DMA0 Reset Clear
     */
    inline void clear_PRCLR2_DMA0RS() volatile
    {
        PRCLR2 &= ~(1u << 4u);
    }

    /**
     * Toggle PRCLR2's DMA0RS bit.
     *
     * DMA0 Reset Clear
     */
    inline void toggle_PRCLR2_DMA0RS() volatile
    {
        PRCLR2 ^= 1u << 4u;
    }

    /**
     * Set PRCLR2's ETH0RS bit.
     *
     * ETH0 Reset Clear
     */
    inline void set_PRCLR2_ETH0RS() volatile
    {
        PRCLR2 |= 1u << 2u;
    }

    /**
     * Clear PRCLR2's ETH0RS bit.
     *
     * ETH0 Reset Clear
     */
    inline void clear_PRCLR2_ETH0RS() volatile
    {
        PRCLR2 &= ~(1u << 2u);
    }

    /**
     * Toggle PRCLR2's ETH0RS bit.
     *
     * ETH0 Reset Clear
     */
    inline void toggle_PRCLR2_ETH0RS() volatile
    {
        PRCLR2 ^= 1u << 2u;
    }

    /**
     * Set PRCLR2's WDTRS bit.
     *
     * WDT Reset Clear
     */
    inline void set_PRCLR2_WDTRS() volatile
    {
        PRCLR2 |= 1u << 1u;
    }

    /**
     * Clear PRCLR2's WDTRS bit.
     *
     * WDT Reset Clear
     */
    inline void clear_PRCLR2_WDTRS() volatile
    {
        PRCLR2 &= ~(1u << 1u);
    }

    /**
     * Toggle PRCLR2's WDTRS bit.
     *
     * WDT Reset Clear
     */
    inline void toggle_PRCLR2_WDTRS() volatile
    {
        PRCLR2 ^= 1u << 1u;
    }

    /**
     * Set all of PRCLR2's bit fields.
     *
     * (write-only) RCU Peripheral 2 Reset Clear
     */
    inline void set_PRCLR2(bool USBRS, bool FCERS, bool DMA1RS, bool DMA0RS,
                           bool ETH0RS, bool WDTRS) volatile
    {
        uint32_t curr = PRCLR2;

        curr &= ~(0b1u << 7u);
        curr |= (USBRS & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (FCERS & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (DMA1RS & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (DMA0RS & 0b1u) << 4u;
        curr &= ~(0b1u << 2u);
        curr |= (ETH0RS & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (WDTRS & 0b1u) << 1u;

        PRCLR2 = curr;
    }

    /**
     * Get PRSTAT3's EBURS bit.
     *
     * EBU Reset Status
     */
    inline bool get_PRSTAT3_EBURS() volatile
    {
        return PRSTAT3 & (1u << 2u);
    }

    /**
     * Set PRSET3's EBURS bit.
     *
     * EBU Reset Assert
     */
    inline void set_PRSET3_EBURS() volatile
    {
        PRSET3 |= 1u << 2u;
    }

    /**
     * Clear PRSET3's EBURS bit.
     *
     * EBU Reset Assert
     */
    inline void clear_PRSET3_EBURS() volatile
    {
        PRSET3 &= ~(1u << 2u);
    }

    /**
     * Toggle PRSET3's EBURS bit.
     *
     * EBU Reset Assert
     */
    inline void toggle_PRSET3_EBURS() volatile
    {
        PRSET3 ^= 1u << 2u;
    }

    /**
     * Set PRCLR3's EBURS bit.
     *
     * EBU Reset Assert
     */
    inline void set_PRCLR3_EBURS() volatile
    {
        PRCLR3 |= 1u << 2u;
    }

    /**
     * Clear PRCLR3's EBURS bit.
     *
     * EBU Reset Assert
     */
    inline void clear_PRCLR3_EBURS() volatile
    {
        PRCLR3 &= ~(1u << 2u);
    }

    /**
     * Toggle PRCLR3's EBURS bit.
     *
     * EBU Reset Assert
     */
    inline void toggle_PRCLR3_EBURS() volatile
    {
        PRCLR3 ^= 1u << 2u;
    }
};

static_assert(sizeof(scu_reset) == scu_reset::size);

static volatile scu_reset *const SCU_RESET =
    reinterpret_cast<scu_reset *>(0x50004400);

}; // namespace XMC4700
