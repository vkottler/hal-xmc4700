/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include "../enums/USB0_CH0_HCCHAR_ChEna.h"
#include "../enums/USB0_CH0_HCCHAR_EPDir.h"
#include "../enums/USB0_CH0_HCCHAR_EPType.h"
#include "../enums/USB0_CH0_HCCHAR_MC_EC.h"
#include "../enums/USB0_CH0_HCCHAR_OddFrm.h"
#include "../enums/USB0_CH0_HCDMA_SCATGATHER_CTD.h"
#include "../enums/USB0_CH0_HCTSIZ_BUFFERMODE_Pid.h"
#include "../enums/USB0_CH0_HCTSIZ_SCATGATHER_Pid.h"
#include "../ifgen/common.h"

namespace XMC4700
{

/**
 * Universal Serial Bus
 */
struct [[gnu::packed]] usb0_ch0
{
    /* Constant attributes. */
    static constexpr std::size_t size = 32; /*!< usb0_ch0's size in bytes. */

    /* Fields. */
    union {
        uint32_t HCTSIZ_BUFFERMODE; /* (read-write) Host Channel Transfer Size
                                       Register [BUFFERMODE] */
        uint32_t HCTSIZ_SCATGATHER; /* (read-write) Host Channel Transfer Size
                                       Register [SCATGATHER] */
    };
    union {
        uint32_t HCDMA_BUFFERMODE; /* (read-write) Host Channel DMA Address
                                      Register [BUFFERMODE] */
        uint32_t HCDMA_SCATGATHER; /* (read-write) Host Channel DMA Address
                                      Register [SCATGATHER] */
    };
    uint32_t HCCHAR; /*!< (read-write) Host Channel Characteristics Register */
    const uint32_t reserved_padding0 = {};
    uint32_t HCINT; /*!< (read-write) Host Channel Interrupt Register */
    uint32_t
        HCINTMSK; /*!< (read-write) Host Channel Interrupt Mask Register */
    const uint32_t reserved_padding1 = {};
    const uint32_t HCDMAB =
        {}; /*!< (read-only) Host Channel DMA Buffer Address Register */

    /* Methods. */

    /**
     * Get HCCHAR's ChEna bit.
     */
    inline USB0_CH0_HCCHAR_ChEna get_HCCHAR_ChEna() volatile
    {
        return USB0_CH0_HCCHAR_ChEna(HCCHAR & (1u << 31u));
    }

    /**
     * Set HCCHAR's ChEna bit.
     */
    inline void set_HCCHAR_ChEna() volatile
    {
        HCCHAR |= 1u << 31u;
    }

    /**
     * Clear HCCHAR's ChEna bit.
     */
    inline void clear_HCCHAR_ChEna() volatile
    {
        HCCHAR &= ~(1u << 31u);
    }

    /**
     * Toggle HCCHAR's ChEna bit.
     */
    inline void toggle_HCCHAR_ChEna() volatile
    {
        HCCHAR ^= 1u << 31u;
    }

    /**
     * Get HCCHAR's ChDis bit.
     */
    inline bool get_HCCHAR_ChDis() volatile
    {
        return HCCHAR & (1u << 30u);
    }

    /**
     * Set HCCHAR's ChDis bit.
     */
    inline void set_HCCHAR_ChDis() volatile
    {
        HCCHAR |= 1u << 30u;
    }

    /**
     * Clear HCCHAR's ChDis bit.
     */
    inline void clear_HCCHAR_ChDis() volatile
    {
        HCCHAR &= ~(1u << 30u);
    }

    /**
     * Toggle HCCHAR's ChDis bit.
     */
    inline void toggle_HCCHAR_ChDis() volatile
    {
        HCCHAR ^= 1u << 30u;
    }

    /**
     * Get HCCHAR's OddFrm bit.
     */
    inline USB0_CH0_HCCHAR_OddFrm get_HCCHAR_OddFrm() volatile
    {
        return USB0_CH0_HCCHAR_OddFrm(HCCHAR & (1u << 29u));
    }

    /**
     * Set HCCHAR's OddFrm bit.
     */
    inline void set_HCCHAR_OddFrm() volatile
    {
        HCCHAR |= 1u << 29u;
    }

    /**
     * Clear HCCHAR's OddFrm bit.
     */
    inline void clear_HCCHAR_OddFrm() volatile
    {
        HCCHAR &= ~(1u << 29u);
    }

    /**
     * Toggle HCCHAR's OddFrm bit.
     */
    inline void toggle_HCCHAR_OddFrm() volatile
    {
        HCCHAR ^= 1u << 29u;
    }

    /**
     * Get HCCHAR's DevAddr field.
     */
    inline uint8_t get_HCCHAR_DevAddr() volatile
    {
        return (HCCHAR >> 22u) & 0b1111111u;
    }

    /**
     * Set HCCHAR's DevAddr field.
     */
    inline void set_HCCHAR_DevAddr(uint8_t value) volatile
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b1111111u << 22u);
        curr |= (value & 0b1111111u) << 22u;

        HCCHAR = curr;
    }

    /**
     * Get HCCHAR's MC_EC field.
     */
    inline USB0_CH0_HCCHAR_MC_EC get_HCCHAR_MC_EC() volatile
    {
        return USB0_CH0_HCCHAR_MC_EC((HCCHAR >> 20u) & 0b11u);
    }

    /**
     * Set HCCHAR's MC_EC field.
     */
    inline void set_HCCHAR_MC_EC(USB0_CH0_HCCHAR_MC_EC value) volatile
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(value) & 0b11u) << 20u;

        HCCHAR = curr;
    }

    /**
     * Get HCCHAR's EPType field.
     */
    inline USB0_CH0_HCCHAR_EPType get_HCCHAR_EPType() volatile
    {
        return USB0_CH0_HCCHAR_EPType((HCCHAR >> 18u) & 0b11u);
    }

    /**
     * Set HCCHAR's EPType field.
     */
    inline void set_HCCHAR_EPType(USB0_CH0_HCCHAR_EPType value) volatile
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(value) & 0b11u) << 18u;

        HCCHAR = curr;
    }

    /**
     * Get HCCHAR's EPDir bit.
     */
    inline USB0_CH0_HCCHAR_EPDir get_HCCHAR_EPDir() volatile
    {
        return USB0_CH0_HCCHAR_EPDir(HCCHAR & (1u << 15u));
    }

    /**
     * Set HCCHAR's EPDir bit.
     */
    inline void set_HCCHAR_EPDir() volatile
    {
        HCCHAR |= 1u << 15u;
    }

    /**
     * Clear HCCHAR's EPDir bit.
     */
    inline void clear_HCCHAR_EPDir() volatile
    {
        HCCHAR &= ~(1u << 15u);
    }

    /**
     * Toggle HCCHAR's EPDir bit.
     */
    inline void toggle_HCCHAR_EPDir() volatile
    {
        HCCHAR ^= 1u << 15u;
    }

    /**
     * Get HCCHAR's EPNum field.
     */
    inline uint8_t get_HCCHAR_EPNum() volatile
    {
        return (HCCHAR >> 11u) & 0b1111u;
    }

    /**
     * Set HCCHAR's EPNum field.
     */
    inline void set_HCCHAR_EPNum(uint8_t value) volatile
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b1111u << 11u);
        curr |= (value & 0b1111u) << 11u;

        HCCHAR = curr;
    }

    /**
     * Get HCCHAR's MPS field.
     */
    inline uint16_t get_HCCHAR_MPS() volatile
    {
        return (HCCHAR >> 0u) & 0b11111111111u;
    }

    /**
     * Set HCCHAR's MPS field.
     */
    inline void set_HCCHAR_MPS(uint16_t value) volatile
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        HCCHAR = curr;
    }

    /**
     * Get all of HCCHAR's bit fields.
     */
    inline void get_HCCHAR(USB0_CH0_HCCHAR_ChEna &ChEna, bool &ChDis,
                           USB0_CH0_HCCHAR_OddFrm &OddFrm, uint8_t &DevAddr,
                           USB0_CH0_HCCHAR_MC_EC &MC_EC,
                           USB0_CH0_HCCHAR_EPType &EPType,
                           USB0_CH0_HCCHAR_EPDir &EPDir, uint8_t &EPNum,
                           uint16_t &MPS) volatile
    {
        uint32_t curr = HCCHAR;

        ChEna = USB0_CH0_HCCHAR_ChEna(curr & (1u << 31u));
        ChDis = curr & (1u << 30u);
        OddFrm = USB0_CH0_HCCHAR_OddFrm(curr & (1u << 29u));
        DevAddr = (curr >> 22u) & 0b1111111u;
        MC_EC = USB0_CH0_HCCHAR_MC_EC((curr >> 20u) & 0b11u);
        EPType = USB0_CH0_HCCHAR_EPType((curr >> 18u) & 0b11u);
        EPDir = USB0_CH0_HCCHAR_EPDir(curr & (1u << 15u));
        EPNum = (curr >> 11u) & 0b1111u;
        MPS = (curr >> 0u) & 0b11111111111u;
    }

    /**
     * Set all of HCCHAR's bit fields.
     */
    inline void set_HCCHAR(USB0_CH0_HCCHAR_ChEna ChEna, bool ChDis,
                           USB0_CH0_HCCHAR_OddFrm OddFrm, uint8_t DevAddr,
                           USB0_CH0_HCCHAR_MC_EC MC_EC,
                           USB0_CH0_HCCHAR_EPType EPType,
                           USB0_CH0_HCCHAR_EPDir EPDir, uint8_t EPNum,
                           uint16_t MPS) volatile
    {
        uint32_t curr = HCCHAR;

        curr &= ~(0b1u << 31u);
        curr |= (std::to_underlying(ChEna) & 0b1u) << 31u;
        curr &= ~(0b1u << 30u);
        curr |= (ChDis & 0b1u) << 30u;
        curr &= ~(0b1u << 29u);
        curr |= (std::to_underlying(OddFrm) & 0b1u) << 29u;
        curr &= ~(0b1111111u << 22u);
        curr |= (DevAddr & 0b1111111u) << 22u;
        curr &= ~(0b11u << 20u);
        curr |= (std::to_underlying(MC_EC) & 0b11u) << 20u;
        curr &= ~(0b11u << 18u);
        curr |= (std::to_underlying(EPType) & 0b11u) << 18u;
        curr &= ~(0b1u << 15u);
        curr |= (std::to_underlying(EPDir) & 0b1u) << 15u;
        curr &= ~(0b1111u << 11u);
        curr |= (EPNum & 0b1111u) << 11u;
        curr &= ~(0b11111111111u << 0u);
        curr |= (MPS & 0b11111111111u) << 0u;

        HCCHAR = curr;
    }

    /**
     * Get HCINT's DESC_LST_ROLLIntr bit.
     */
    inline bool get_HCINT_DESC_LST_ROLLIntr() volatile
    {
        return HCINT & (1u << 13u);
    }

    /**
     * Set HCINT's DESC_LST_ROLLIntr bit.
     */
    inline void set_HCINT_DESC_LST_ROLLIntr() volatile
    {
        HCINT |= 1u << 13u;
    }

    /**
     * Clear HCINT's DESC_LST_ROLLIntr bit.
     */
    inline void clear_HCINT_DESC_LST_ROLLIntr() volatile
    {
        HCINT &= ~(1u << 13u);
    }

    /**
     * Toggle HCINT's DESC_LST_ROLLIntr bit.
     */
    inline void toggle_HCINT_DESC_LST_ROLLIntr() volatile
    {
        HCINT ^= 1u << 13u;
    }

    /**
     * Get HCINT's XCS_XACT_ERR bit.
     */
    inline bool get_HCINT_XCS_XACT_ERR() volatile
    {
        return HCINT & (1u << 12u);
    }

    /**
     * Set HCINT's XCS_XACT_ERR bit.
     */
    inline void set_HCINT_XCS_XACT_ERR() volatile
    {
        HCINT |= 1u << 12u;
    }

    /**
     * Clear HCINT's XCS_XACT_ERR bit.
     */
    inline void clear_HCINT_XCS_XACT_ERR() volatile
    {
        HCINT &= ~(1u << 12u);
    }

    /**
     * Toggle HCINT's XCS_XACT_ERR bit.
     */
    inline void toggle_HCINT_XCS_XACT_ERR() volatile
    {
        HCINT ^= 1u << 12u;
    }

    /**
     * Get HCINT's BNAIntr bit.
     */
    inline bool get_HCINT_BNAIntr() volatile
    {
        return HCINT & (1u << 11u);
    }

    /**
     * Set HCINT's BNAIntr bit.
     */
    inline void set_HCINT_BNAIntr() volatile
    {
        HCINT |= 1u << 11u;
    }

    /**
     * Clear HCINT's BNAIntr bit.
     */
    inline void clear_HCINT_BNAIntr() volatile
    {
        HCINT &= ~(1u << 11u);
    }

    /**
     * Toggle HCINT's BNAIntr bit.
     */
    inline void toggle_HCINT_BNAIntr() volatile
    {
        HCINT ^= 1u << 11u;
    }

    /**
     * Get HCINT's DataTglErr bit.
     */
    inline bool get_HCINT_DataTglErr() volatile
    {
        return HCINT & (1u << 10u);
    }

    /**
     * Set HCINT's DataTglErr bit.
     */
    inline void set_HCINT_DataTglErr() volatile
    {
        HCINT |= 1u << 10u;
    }

    /**
     * Clear HCINT's DataTglErr bit.
     */
    inline void clear_HCINT_DataTglErr() volatile
    {
        HCINT &= ~(1u << 10u);
    }

    /**
     * Toggle HCINT's DataTglErr bit.
     */
    inline void toggle_HCINT_DataTglErr() volatile
    {
        HCINT ^= 1u << 10u;
    }

    /**
     * Get HCINT's FrmOvrun bit.
     */
    inline bool get_HCINT_FrmOvrun() volatile
    {
        return HCINT & (1u << 9u);
    }

    /**
     * Set HCINT's FrmOvrun bit.
     */
    inline void set_HCINT_FrmOvrun() volatile
    {
        HCINT |= 1u << 9u;
    }

    /**
     * Clear HCINT's FrmOvrun bit.
     */
    inline void clear_HCINT_FrmOvrun() volatile
    {
        HCINT &= ~(1u << 9u);
    }

    /**
     * Toggle HCINT's FrmOvrun bit.
     */
    inline void toggle_HCINT_FrmOvrun() volatile
    {
        HCINT ^= 1u << 9u;
    }

    /**
     * Get HCINT's BblErr bit.
     */
    inline bool get_HCINT_BblErr() volatile
    {
        return HCINT & (1u << 8u);
    }

    /**
     * Set HCINT's BblErr bit.
     */
    inline void set_HCINT_BblErr() volatile
    {
        HCINT |= 1u << 8u;
    }

    /**
     * Clear HCINT's BblErr bit.
     */
    inline void clear_HCINT_BblErr() volatile
    {
        HCINT &= ~(1u << 8u);
    }

    /**
     * Toggle HCINT's BblErr bit.
     */
    inline void toggle_HCINT_BblErr() volatile
    {
        HCINT ^= 1u << 8u;
    }

    /**
     * Get HCINT's XactErr bit.
     */
    inline bool get_HCINT_XactErr() volatile
    {
        return HCINT & (1u << 7u);
    }

    /**
     * Set HCINT's XactErr bit.
     */
    inline void set_HCINT_XactErr() volatile
    {
        HCINT |= 1u << 7u;
    }

    /**
     * Clear HCINT's XactErr bit.
     */
    inline void clear_HCINT_XactErr() volatile
    {
        HCINT &= ~(1u << 7u);
    }

    /**
     * Toggle HCINT's XactErr bit.
     */
    inline void toggle_HCINT_XactErr() volatile
    {
        HCINT ^= 1u << 7u;
    }

    /**
     * Get HCINT's NYET bit.
     */
    inline bool get_HCINT_NYET() volatile
    {
        return HCINT & (1u << 6u);
    }

    /**
     * Set HCINT's NYET bit.
     */
    inline void set_HCINT_NYET() volatile
    {
        HCINT |= 1u << 6u;
    }

    /**
     * Clear HCINT's NYET bit.
     */
    inline void clear_HCINT_NYET() volatile
    {
        HCINT &= ~(1u << 6u);
    }

    /**
     * Toggle HCINT's NYET bit.
     */
    inline void toggle_HCINT_NYET() volatile
    {
        HCINT ^= 1u << 6u;
    }

    /**
     * Get HCINT's ACK bit.
     */
    inline bool get_HCINT_ACK() volatile
    {
        return HCINT & (1u << 5u);
    }

    /**
     * Set HCINT's ACK bit.
     */
    inline void set_HCINT_ACK() volatile
    {
        HCINT |= 1u << 5u;
    }

    /**
     * Clear HCINT's ACK bit.
     */
    inline void clear_HCINT_ACK() volatile
    {
        HCINT &= ~(1u << 5u);
    }

    /**
     * Toggle HCINT's ACK bit.
     */
    inline void toggle_HCINT_ACK() volatile
    {
        HCINT ^= 1u << 5u;
    }

    /**
     * Get HCINT's NAK bit.
     */
    inline bool get_HCINT_NAK() volatile
    {
        return HCINT & (1u << 4u);
    }

    /**
     * Set HCINT's NAK bit.
     */
    inline void set_HCINT_NAK() volatile
    {
        HCINT |= 1u << 4u;
    }

    /**
     * Clear HCINT's NAK bit.
     */
    inline void clear_HCINT_NAK() volatile
    {
        HCINT &= ~(1u << 4u);
    }

    /**
     * Toggle HCINT's NAK bit.
     */
    inline void toggle_HCINT_NAK() volatile
    {
        HCINT ^= 1u << 4u;
    }

    /**
     * Get HCINT's STALL bit.
     */
    inline bool get_HCINT_STALL() volatile
    {
        return HCINT & (1u << 3u);
    }

    /**
     * Set HCINT's STALL bit.
     */
    inline void set_HCINT_STALL() volatile
    {
        HCINT |= 1u << 3u;
    }

    /**
     * Clear HCINT's STALL bit.
     */
    inline void clear_HCINT_STALL() volatile
    {
        HCINT &= ~(1u << 3u);
    }

    /**
     * Toggle HCINT's STALL bit.
     */
    inline void toggle_HCINT_STALL() volatile
    {
        HCINT ^= 1u << 3u;
    }

    /**
     * Get HCINT's AHBErr bit.
     */
    inline bool get_HCINT_AHBErr() volatile
    {
        return HCINT & (1u << 2u);
    }

    /**
     * Set HCINT's AHBErr bit.
     */
    inline void set_HCINT_AHBErr() volatile
    {
        HCINT |= 1u << 2u;
    }

    /**
     * Clear HCINT's AHBErr bit.
     */
    inline void clear_HCINT_AHBErr() volatile
    {
        HCINT &= ~(1u << 2u);
    }

    /**
     * Toggle HCINT's AHBErr bit.
     */
    inline void toggle_HCINT_AHBErr() volatile
    {
        HCINT ^= 1u << 2u;
    }

    /**
     * Get HCINT's ChHltd bit.
     */
    inline bool get_HCINT_ChHltd() volatile
    {
        return HCINT & (1u << 1u);
    }

    /**
     * Set HCINT's ChHltd bit.
     */
    inline void set_HCINT_ChHltd() volatile
    {
        HCINT |= 1u << 1u;
    }

    /**
     * Clear HCINT's ChHltd bit.
     */
    inline void clear_HCINT_ChHltd() volatile
    {
        HCINT &= ~(1u << 1u);
    }

    /**
     * Toggle HCINT's ChHltd bit.
     */
    inline void toggle_HCINT_ChHltd() volatile
    {
        HCINT ^= 1u << 1u;
    }

    /**
     * Get HCINT's XferCompl bit.
     */
    inline bool get_HCINT_XferCompl() volatile
    {
        return HCINT & (1u << 0u);
    }

    /**
     * Set HCINT's XferCompl bit.
     */
    inline void set_HCINT_XferCompl() volatile
    {
        HCINT |= 1u << 0u;
    }

    /**
     * Clear HCINT's XferCompl bit.
     */
    inline void clear_HCINT_XferCompl() volatile
    {
        HCINT &= ~(1u << 0u);
    }

    /**
     * Toggle HCINT's XferCompl bit.
     */
    inline void toggle_HCINT_XferCompl() volatile
    {
        HCINT ^= 1u << 0u;
    }

    /**
     * Get all of HCINT's bit fields.
     */
    inline void get_HCINT(bool &DESC_LST_ROLLIntr, bool &XCS_XACT_ERR,
                          bool &BNAIntr, bool &DataTglErr, bool &FrmOvrun,
                          bool &BblErr, bool &XactErr, bool &NYET, bool &ACK,
                          bool &NAK, bool &STALL, bool &AHBErr, bool &ChHltd,
                          bool &XferCompl) volatile
    {
        uint32_t curr = HCINT;

        DESC_LST_ROLLIntr = curr & (1u << 13u);
        XCS_XACT_ERR = curr & (1u << 12u);
        BNAIntr = curr & (1u << 11u);
        DataTglErr = curr & (1u << 10u);
        FrmOvrun = curr & (1u << 9u);
        BblErr = curr & (1u << 8u);
        XactErr = curr & (1u << 7u);
        NYET = curr & (1u << 6u);
        ACK = curr & (1u << 5u);
        NAK = curr & (1u << 4u);
        STALL = curr & (1u << 3u);
        AHBErr = curr & (1u << 2u);
        ChHltd = curr & (1u << 1u);
        XferCompl = curr & (1u << 0u);
    }

    /**
     * Set all of HCINT's bit fields.
     */
    inline void set_HCINT(bool DESC_LST_ROLLIntr, bool XCS_XACT_ERR,
                          bool BNAIntr, bool DataTglErr, bool FrmOvrun,
                          bool BblErr, bool XactErr, bool NYET, bool ACK,
                          bool NAK, bool STALL, bool AHBErr, bool ChHltd,
                          bool XferCompl) volatile
    {
        uint32_t curr = HCINT;

        curr &= ~(0b1u << 13u);
        curr |= (DESC_LST_ROLLIntr & 0b1u) << 13u;
        curr &= ~(0b1u << 12u);
        curr |= (XCS_XACT_ERR & 0b1u) << 12u;
        curr &= ~(0b1u << 11u);
        curr |= (BNAIntr & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (DataTglErr & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (FrmOvrun & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (BblErr & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (XactErr & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (NYET & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (ACK & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (NAK & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (STALL & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (AHBErr & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ChHltd & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (XferCompl & 0b1u) << 0u;

        HCINT = curr;
    }

    /**
     * Get HCINTMSK's DESC_LST_ROLLIntrMsk bit.
     */
    inline bool get_HCINTMSK_DESC_LST_ROLLIntrMsk() volatile
    {
        return HCINTMSK & (1u << 13u);
    }

    /**
     * Set HCINTMSK's DESC_LST_ROLLIntrMsk bit.
     */
    inline void set_HCINTMSK_DESC_LST_ROLLIntrMsk() volatile
    {
        HCINTMSK |= 1u << 13u;
    }

    /**
     * Clear HCINTMSK's DESC_LST_ROLLIntrMsk bit.
     */
    inline void clear_HCINTMSK_DESC_LST_ROLLIntrMsk() volatile
    {
        HCINTMSK &= ~(1u << 13u);
    }

    /**
     * Toggle HCINTMSK's DESC_LST_ROLLIntrMsk bit.
     */
    inline void toggle_HCINTMSK_DESC_LST_ROLLIntrMsk() volatile
    {
        HCINTMSK ^= 1u << 13u;
    }

    /**
     * Get HCINTMSK's BNAIntrMsk bit.
     */
    inline bool get_HCINTMSK_BNAIntrMsk() volatile
    {
        return HCINTMSK & (1u << 11u);
    }

    /**
     * Set HCINTMSK's BNAIntrMsk bit.
     */
    inline void set_HCINTMSK_BNAIntrMsk() volatile
    {
        HCINTMSK |= 1u << 11u;
    }

    /**
     * Clear HCINTMSK's BNAIntrMsk bit.
     */
    inline void clear_HCINTMSK_BNAIntrMsk() volatile
    {
        HCINTMSK &= ~(1u << 11u);
    }

    /**
     * Toggle HCINTMSK's BNAIntrMsk bit.
     */
    inline void toggle_HCINTMSK_BNAIntrMsk() volatile
    {
        HCINTMSK ^= 1u << 11u;
    }

    /**
     * Get HCINTMSK's DataTglErrMsk bit.
     */
    inline bool get_HCINTMSK_DataTglErrMsk() volatile
    {
        return HCINTMSK & (1u << 10u);
    }

    /**
     * Set HCINTMSK's DataTglErrMsk bit.
     */
    inline void set_HCINTMSK_DataTglErrMsk() volatile
    {
        HCINTMSK |= 1u << 10u;
    }

    /**
     * Clear HCINTMSK's DataTglErrMsk bit.
     */
    inline void clear_HCINTMSK_DataTglErrMsk() volatile
    {
        HCINTMSK &= ~(1u << 10u);
    }

    /**
     * Toggle HCINTMSK's DataTglErrMsk bit.
     */
    inline void toggle_HCINTMSK_DataTglErrMsk() volatile
    {
        HCINTMSK ^= 1u << 10u;
    }

    /**
     * Get HCINTMSK's FrmOvrunMsk bit.
     */
    inline bool get_HCINTMSK_FrmOvrunMsk() volatile
    {
        return HCINTMSK & (1u << 9u);
    }

    /**
     * Set HCINTMSK's FrmOvrunMsk bit.
     */
    inline void set_HCINTMSK_FrmOvrunMsk() volatile
    {
        HCINTMSK |= 1u << 9u;
    }

    /**
     * Clear HCINTMSK's FrmOvrunMsk bit.
     */
    inline void clear_HCINTMSK_FrmOvrunMsk() volatile
    {
        HCINTMSK &= ~(1u << 9u);
    }

    /**
     * Toggle HCINTMSK's FrmOvrunMsk bit.
     */
    inline void toggle_HCINTMSK_FrmOvrunMsk() volatile
    {
        HCINTMSK ^= 1u << 9u;
    }

    /**
     * Get HCINTMSK's BblErrMsk bit.
     */
    inline bool get_HCINTMSK_BblErrMsk() volatile
    {
        return HCINTMSK & (1u << 8u);
    }

    /**
     * Set HCINTMSK's BblErrMsk bit.
     */
    inline void set_HCINTMSK_BblErrMsk() volatile
    {
        HCINTMSK |= 1u << 8u;
    }

    /**
     * Clear HCINTMSK's BblErrMsk bit.
     */
    inline void clear_HCINTMSK_BblErrMsk() volatile
    {
        HCINTMSK &= ~(1u << 8u);
    }

    /**
     * Toggle HCINTMSK's BblErrMsk bit.
     */
    inline void toggle_HCINTMSK_BblErrMsk() volatile
    {
        HCINTMSK ^= 1u << 8u;
    }

    /**
     * Get HCINTMSK's XactErrMsk bit.
     */
    inline bool get_HCINTMSK_XactErrMsk() volatile
    {
        return HCINTMSK & (1u << 7u);
    }

    /**
     * Set HCINTMSK's XactErrMsk bit.
     */
    inline void set_HCINTMSK_XactErrMsk() volatile
    {
        HCINTMSK |= 1u << 7u;
    }

    /**
     * Clear HCINTMSK's XactErrMsk bit.
     */
    inline void clear_HCINTMSK_XactErrMsk() volatile
    {
        HCINTMSK &= ~(1u << 7u);
    }

    /**
     * Toggle HCINTMSK's XactErrMsk bit.
     */
    inline void toggle_HCINTMSK_XactErrMsk() volatile
    {
        HCINTMSK ^= 1u << 7u;
    }

    /**
     * Get HCINTMSK's NyetMsk bit.
     */
    inline bool get_HCINTMSK_NyetMsk() volatile
    {
        return HCINTMSK & (1u << 6u);
    }

    /**
     * Set HCINTMSK's NyetMsk bit.
     */
    inline void set_HCINTMSK_NyetMsk() volatile
    {
        HCINTMSK |= 1u << 6u;
    }

    /**
     * Clear HCINTMSK's NyetMsk bit.
     */
    inline void clear_HCINTMSK_NyetMsk() volatile
    {
        HCINTMSK &= ~(1u << 6u);
    }

    /**
     * Toggle HCINTMSK's NyetMsk bit.
     */
    inline void toggle_HCINTMSK_NyetMsk() volatile
    {
        HCINTMSK ^= 1u << 6u;
    }

    /**
     * Get HCINTMSK's AckMsk bit.
     */
    inline bool get_HCINTMSK_AckMsk() volatile
    {
        return HCINTMSK & (1u << 5u);
    }

    /**
     * Set HCINTMSK's AckMsk bit.
     */
    inline void set_HCINTMSK_AckMsk() volatile
    {
        HCINTMSK |= 1u << 5u;
    }

    /**
     * Clear HCINTMSK's AckMsk bit.
     */
    inline void clear_HCINTMSK_AckMsk() volatile
    {
        HCINTMSK &= ~(1u << 5u);
    }

    /**
     * Toggle HCINTMSK's AckMsk bit.
     */
    inline void toggle_HCINTMSK_AckMsk() volatile
    {
        HCINTMSK ^= 1u << 5u;
    }

    /**
     * Get HCINTMSK's NakMsk bit.
     */
    inline bool get_HCINTMSK_NakMsk() volatile
    {
        return HCINTMSK & (1u << 4u);
    }

    /**
     * Set HCINTMSK's NakMsk bit.
     */
    inline void set_HCINTMSK_NakMsk() volatile
    {
        HCINTMSK |= 1u << 4u;
    }

    /**
     * Clear HCINTMSK's NakMsk bit.
     */
    inline void clear_HCINTMSK_NakMsk() volatile
    {
        HCINTMSK &= ~(1u << 4u);
    }

    /**
     * Toggle HCINTMSK's NakMsk bit.
     */
    inline void toggle_HCINTMSK_NakMsk() volatile
    {
        HCINTMSK ^= 1u << 4u;
    }

    /**
     * Get HCINTMSK's StallMsk bit.
     */
    inline bool get_HCINTMSK_StallMsk() volatile
    {
        return HCINTMSK & (1u << 3u);
    }

    /**
     * Set HCINTMSK's StallMsk bit.
     */
    inline void set_HCINTMSK_StallMsk() volatile
    {
        HCINTMSK |= 1u << 3u;
    }

    /**
     * Clear HCINTMSK's StallMsk bit.
     */
    inline void clear_HCINTMSK_StallMsk() volatile
    {
        HCINTMSK &= ~(1u << 3u);
    }

    /**
     * Toggle HCINTMSK's StallMsk bit.
     */
    inline void toggle_HCINTMSK_StallMsk() volatile
    {
        HCINTMSK ^= 1u << 3u;
    }

    /**
     * Get HCINTMSK's AHBErrMsk bit.
     */
    inline bool get_HCINTMSK_AHBErrMsk() volatile
    {
        return HCINTMSK & (1u << 2u);
    }

    /**
     * Set HCINTMSK's AHBErrMsk bit.
     */
    inline void set_HCINTMSK_AHBErrMsk() volatile
    {
        HCINTMSK |= 1u << 2u;
    }

    /**
     * Clear HCINTMSK's AHBErrMsk bit.
     */
    inline void clear_HCINTMSK_AHBErrMsk() volatile
    {
        HCINTMSK &= ~(1u << 2u);
    }

    /**
     * Toggle HCINTMSK's AHBErrMsk bit.
     */
    inline void toggle_HCINTMSK_AHBErrMsk() volatile
    {
        HCINTMSK ^= 1u << 2u;
    }

    /**
     * Get HCINTMSK's ChHltdMsk bit.
     */
    inline bool get_HCINTMSK_ChHltdMsk() volatile
    {
        return HCINTMSK & (1u << 1u);
    }

    /**
     * Set HCINTMSK's ChHltdMsk bit.
     */
    inline void set_HCINTMSK_ChHltdMsk() volatile
    {
        HCINTMSK |= 1u << 1u;
    }

    /**
     * Clear HCINTMSK's ChHltdMsk bit.
     */
    inline void clear_HCINTMSK_ChHltdMsk() volatile
    {
        HCINTMSK &= ~(1u << 1u);
    }

    /**
     * Toggle HCINTMSK's ChHltdMsk bit.
     */
    inline void toggle_HCINTMSK_ChHltdMsk() volatile
    {
        HCINTMSK ^= 1u << 1u;
    }

    /**
     * Get HCINTMSK's XferComplMsk bit.
     */
    inline bool get_HCINTMSK_XferComplMsk() volatile
    {
        return HCINTMSK & (1u << 0u);
    }

    /**
     * Set HCINTMSK's XferComplMsk bit.
     */
    inline void set_HCINTMSK_XferComplMsk() volatile
    {
        HCINTMSK |= 1u << 0u;
    }

    /**
     * Clear HCINTMSK's XferComplMsk bit.
     */
    inline void clear_HCINTMSK_XferComplMsk() volatile
    {
        HCINTMSK &= ~(1u << 0u);
    }

    /**
     * Toggle HCINTMSK's XferComplMsk bit.
     */
    inline void toggle_HCINTMSK_XferComplMsk() volatile
    {
        HCINTMSK ^= 1u << 0u;
    }

    /**
     * Get all of HCINTMSK's bit fields.
     */
    inline void get_HCINTMSK(bool &DESC_LST_ROLLIntrMsk, bool &BNAIntrMsk,
                             bool &DataTglErrMsk, bool &FrmOvrunMsk,
                             bool &BblErrMsk, bool &XactErrMsk, bool &NyetMsk,
                             bool &AckMsk, bool &NakMsk, bool &StallMsk,
                             bool &AHBErrMsk, bool &ChHltdMsk,
                             bool &XferComplMsk) volatile
    {
        uint32_t curr = HCINTMSK;

        DESC_LST_ROLLIntrMsk = curr & (1u << 13u);
        BNAIntrMsk = curr & (1u << 11u);
        DataTglErrMsk = curr & (1u << 10u);
        FrmOvrunMsk = curr & (1u << 9u);
        BblErrMsk = curr & (1u << 8u);
        XactErrMsk = curr & (1u << 7u);
        NyetMsk = curr & (1u << 6u);
        AckMsk = curr & (1u << 5u);
        NakMsk = curr & (1u << 4u);
        StallMsk = curr & (1u << 3u);
        AHBErrMsk = curr & (1u << 2u);
        ChHltdMsk = curr & (1u << 1u);
        XferComplMsk = curr & (1u << 0u);
    }

    /**
     * Set all of HCINTMSK's bit fields.
     */
    inline void set_HCINTMSK(bool DESC_LST_ROLLIntrMsk, bool BNAIntrMsk,
                             bool DataTglErrMsk, bool FrmOvrunMsk,
                             bool BblErrMsk, bool XactErrMsk, bool NyetMsk,
                             bool AckMsk, bool NakMsk, bool StallMsk,
                             bool AHBErrMsk, bool ChHltdMsk,
                             bool XferComplMsk) volatile
    {
        uint32_t curr = HCINTMSK;

        curr &= ~(0b1u << 13u);
        curr |= (DESC_LST_ROLLIntrMsk & 0b1u) << 13u;
        curr &= ~(0b1u << 11u);
        curr |= (BNAIntrMsk & 0b1u) << 11u;
        curr &= ~(0b1u << 10u);
        curr |= (DataTglErrMsk & 0b1u) << 10u;
        curr &= ~(0b1u << 9u);
        curr |= (FrmOvrunMsk & 0b1u) << 9u;
        curr &= ~(0b1u << 8u);
        curr |= (BblErrMsk & 0b1u) << 8u;
        curr &= ~(0b1u << 7u);
        curr |= (XactErrMsk & 0b1u) << 7u;
        curr &= ~(0b1u << 6u);
        curr |= (NyetMsk & 0b1u) << 6u;
        curr &= ~(0b1u << 5u);
        curr |= (AckMsk & 0b1u) << 5u;
        curr &= ~(0b1u << 4u);
        curr |= (NakMsk & 0b1u) << 4u;
        curr &= ~(0b1u << 3u);
        curr |= (StallMsk & 0b1u) << 3u;
        curr &= ~(0b1u << 2u);
        curr |= (AHBErrMsk & 0b1u) << 2u;
        curr &= ~(0b1u << 1u);
        curr |= (ChHltdMsk & 0b1u) << 1u;
        curr &= ~(0b1u << 0u);
        curr |= (XferComplMsk & 0b1u) << 0u;

        HCINTMSK = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's Pid field.
     */
    inline USB0_CH0_HCTSIZ_BUFFERMODE_Pid get_HCTSIZ_BUFFERMODE_Pid() volatile
    {
        return USB0_CH0_HCTSIZ_BUFFERMODE_Pid((HCTSIZ_BUFFERMODE >> 29u) &
                                              0b11u);
    }

    /**
     * Set HCTSIZ_BUFFERMODE's Pid field.
     */
    inline void set_HCTSIZ_BUFFERMODE_Pid(
        USB0_CH0_HCTSIZ_BUFFERMODE_Pid value) volatile
    {
        uint32_t curr = HCTSIZ_BUFFERMODE;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        HCTSIZ_BUFFERMODE = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's PktCnt field.
     */
    inline uint16_t get_HCTSIZ_BUFFERMODE_PktCnt() volatile
    {
        return (HCTSIZ_BUFFERMODE >> 19u) & 0b1111111111u;
    }

    /**
     * Set HCTSIZ_BUFFERMODE's PktCnt field.
     */
    inline void set_HCTSIZ_BUFFERMODE_PktCnt(uint16_t value) volatile
    {
        uint32_t curr = HCTSIZ_BUFFERMODE;

        curr &= ~(0b1111111111u << 19u);
        curr |= (value & 0b1111111111u) << 19u;

        HCTSIZ_BUFFERMODE = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's XferSize field.
     */
    inline uint32_t get_HCTSIZ_BUFFERMODE_XferSize() volatile
    {
        return (HCTSIZ_BUFFERMODE >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set HCTSIZ_BUFFERMODE's XferSize field.
     */
    inline void set_HCTSIZ_BUFFERMODE_XferSize(uint32_t value) volatile
    {
        uint32_t curr = HCTSIZ_BUFFERMODE;

        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (value & 0b1111111111111111111u) << 0u;

        HCTSIZ_BUFFERMODE = curr;
    }

    /**
     * Get all of HCTSIZ_BUFFERMODE's bit fields.
     */
    inline void get_HCTSIZ_BUFFERMODE(USB0_CH0_HCTSIZ_BUFFERMODE_Pid &Pid,
                                      uint16_t &PktCnt,
                                      uint32_t &XferSize) volatile
    {
        uint32_t curr = HCTSIZ_BUFFERMODE;

        Pid = USB0_CH0_HCTSIZ_BUFFERMODE_Pid((curr >> 29u) & 0b11u);
        PktCnt = (curr >> 19u) & 0b1111111111u;
        XferSize = (curr >> 0u) & 0b1111111111111111111u;
    }

    /**
     * Set all of HCTSIZ_BUFFERMODE's bit fields.
     */
    inline void set_HCTSIZ_BUFFERMODE(USB0_CH0_HCTSIZ_BUFFERMODE_Pid Pid,
                                      uint16_t PktCnt,
                                      uint32_t XferSize) volatile
    {
        uint32_t curr = HCTSIZ_BUFFERMODE;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(Pid) & 0b11u) << 29u;
        curr &= ~(0b1111111111u << 19u);
        curr |= (PktCnt & 0b1111111111u) << 19u;
        curr &= ~(0b1111111111111111111u << 0u);
        curr |= (XferSize & 0b1111111111111111111u) << 0u;

        HCTSIZ_BUFFERMODE = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's Pid field.
     */
    inline USB0_CH0_HCTSIZ_SCATGATHER_Pid get_HCTSIZ_SCATGATHER_Pid() volatile
    {
        return USB0_CH0_HCTSIZ_SCATGATHER_Pid((HCTSIZ_SCATGATHER >> 29u) &
                                              0b11u);
    }

    /**
     * Set HCTSIZ_BUFFERMODE's Pid field.
     */
    inline void set_HCTSIZ_SCATGATHER_Pid(
        USB0_CH0_HCTSIZ_SCATGATHER_Pid value) volatile
    {
        uint32_t curr = HCTSIZ_SCATGATHER;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(value) & 0b11u) << 29u;

        HCTSIZ_SCATGATHER = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's NTD field.
     */
    inline uint8_t get_HCTSIZ_SCATGATHER_NTD() volatile
    {
        return (HCTSIZ_SCATGATHER >> 8u) & 0b11111111u;
    }

    /**
     * Set HCTSIZ_BUFFERMODE's NTD field.
     */
    inline void set_HCTSIZ_SCATGATHER_NTD(uint8_t value) volatile
    {
        uint32_t curr = HCTSIZ_SCATGATHER;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        HCTSIZ_SCATGATHER = curr;
    }

    /**
     * Get HCTSIZ_BUFFERMODE's SCHED_INFO field.
     */
    inline uint8_t get_HCTSIZ_SCATGATHER_SCHED_INFO() volatile
    {
        return (HCTSIZ_SCATGATHER >> 0u) & 0b11111111u;
    }

    /**
     * Set HCTSIZ_BUFFERMODE's SCHED_INFO field.
     */
    inline void set_HCTSIZ_SCATGATHER_SCHED_INFO(uint8_t value) volatile
    {
        uint32_t curr = HCTSIZ_SCATGATHER;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        HCTSIZ_SCATGATHER = curr;
    }

    /**
     * Get all of HCTSIZ_SCATGATHER's bit fields.
     */
    inline void get_HCTSIZ_SCATGATHER(USB0_CH0_HCTSIZ_SCATGATHER_Pid &Pid,
                                      uint8_t &NTD,
                                      uint8_t &SCHED_INFO) volatile
    {
        uint32_t curr = HCTSIZ_SCATGATHER;

        Pid = USB0_CH0_HCTSIZ_SCATGATHER_Pid((curr >> 29u) & 0b11u);
        NTD = (curr >> 8u) & 0b11111111u;
        SCHED_INFO = (curr >> 0u) & 0b11111111u;
    }

    /**
     * Set all of HCTSIZ_SCATGATHER's bit fields.
     */
    inline void set_HCTSIZ_SCATGATHER(USB0_CH0_HCTSIZ_SCATGATHER_Pid Pid,
                                      uint8_t NTD, uint8_t SCHED_INFO) volatile
    {
        uint32_t curr = HCTSIZ_SCATGATHER;

        curr &= ~(0b11u << 29u);
        curr |= (std::to_underlying(Pid) & 0b11u) << 29u;
        curr &= ~(0b11111111u << 8u);
        curr |= (NTD & 0b11111111u) << 8u;
        curr &= ~(0b11111111u << 0u);
        curr |= (SCHED_INFO & 0b11111111u) << 0u;

        HCTSIZ_SCATGATHER = curr;
    }

    /**
     * Get HCDMA_BUFFERMODE's DMAAddr field.
     */
    inline uint32_t get_HCDMA_BUFFERMODE_DMAAddr() volatile
    {
        return (HCDMA_BUFFERMODE >> 0u) & 0b11111111111111111111111111111111u;
    }

    /**
     * Set HCDMA_BUFFERMODE's DMAAddr field.
     */
    inline void set_HCDMA_BUFFERMODE_DMAAddr(uint32_t value) volatile
    {
        uint32_t curr = HCDMA_BUFFERMODE;

        curr &= ~(0b11111111111111111111111111111111u << 0u);
        curr |= (value & 0b11111111111111111111111111111111u) << 0u;

        HCDMA_BUFFERMODE = curr;
    }

    /**
     * Get HCDMA_BUFFERMODE's DMAAddr field.
     */
    inline uint32_t get_HCDMA_SCATGATHER_DMAAddr() volatile
    {
        return (HCDMA_SCATGATHER >> 9u) & 0b11111111111111111111111u;
    }

    /**
     * Set HCDMA_BUFFERMODE's DMAAddr field.
     */
    inline void set_HCDMA_SCATGATHER_DMAAddr(uint32_t value) volatile
    {
        uint32_t curr = HCDMA_SCATGATHER;

        curr &= ~(0b11111111111111111111111u << 9u);
        curr |= (value & 0b11111111111111111111111u) << 9u;

        HCDMA_SCATGATHER = curr;
    }

    /**
     * Get HCDMA_BUFFERMODE's CTD field.
     */
    inline USB0_CH0_HCDMA_SCATGATHER_CTD get_HCDMA_SCATGATHER_CTD() volatile
    {
        return USB0_CH0_HCDMA_SCATGATHER_CTD((HCDMA_SCATGATHER >> 3u) &
                                             0b111111u);
    }

    /**
     * Set HCDMA_BUFFERMODE's CTD field.
     */
    inline void set_HCDMA_SCATGATHER_CTD(
        USB0_CH0_HCDMA_SCATGATHER_CTD value) volatile
    {
        uint32_t curr = HCDMA_SCATGATHER;

        curr &= ~(0b111111u << 3u);
        curr |= (std::to_underlying(value) & 0b111111u) << 3u;

        HCDMA_SCATGATHER = curr;
    }

    /**
     * Get all of HCDMA_SCATGATHER's bit fields.
     */
    inline void get_HCDMA_SCATGATHER(
        uint32_t &DMAAddr, USB0_CH0_HCDMA_SCATGATHER_CTD &CTD) volatile
    {
        uint32_t curr = HCDMA_SCATGATHER;

        DMAAddr = (curr >> 9u) & 0b11111111111111111111111u;
        CTD = USB0_CH0_HCDMA_SCATGATHER_CTD((curr >> 3u) & 0b111111u);
    }

    /**
     * Set all of HCDMA_SCATGATHER's bit fields.
     */
    inline void set_HCDMA_SCATGATHER(
        uint32_t DMAAddr, USB0_CH0_HCDMA_SCATGATHER_CTD CTD) volatile
    {
        uint32_t curr = HCDMA_SCATGATHER;

        curr &= ~(0b11111111111111111111111u << 9u);
        curr |= (DMAAddr & 0b11111111111111111111111u) << 9u;
        curr &= ~(0b111111u << 3u);
        curr |= (std::to_underlying(CTD) & 0b111111u) << 3u;

        HCDMA_SCATGATHER = curr;
    }

    /**
     * Get HCDMAB's Buffer_Address field.
     */
    inline uint32_t get_HCDMAB_Buffer_Address() volatile
    {
        return (HCDMAB >> 0u) & 0b11111111111111111111111111111111u;
    }
};

static_assert(sizeof(usb0_ch0) == usb0_ch0::size);

static volatile usb0_ch0 *const USB0_CH0 =
    reinterpret_cast<usb0_ch0 *>(0x50040500);

static volatile usb0_ch0 *const USB0_CH1 =
    reinterpret_cast<usb0_ch0 *>(0x50040520);

static volatile usb0_ch0 *const USB0_CH10 =
    reinterpret_cast<usb0_ch0 *>(0x50040640);

static volatile usb0_ch0 *const USB0_CH11 =
    reinterpret_cast<usb0_ch0 *>(0x50040660);

static volatile usb0_ch0 *const USB0_CH12 =
    reinterpret_cast<usb0_ch0 *>(0x50040680);

static volatile usb0_ch0 *const USB0_CH13 =
    reinterpret_cast<usb0_ch0 *>(0x500406A0);

static volatile usb0_ch0 *const USB0_CH2 =
    reinterpret_cast<usb0_ch0 *>(0x50040540);

static volatile usb0_ch0 *const USB0_CH3 =
    reinterpret_cast<usb0_ch0 *>(0x50040560);

static volatile usb0_ch0 *const USB0_CH4 =
    reinterpret_cast<usb0_ch0 *>(0x50040580);

static volatile usb0_ch0 *const USB0_CH5 =
    reinterpret_cast<usb0_ch0 *>(0x500405A0);

static volatile usb0_ch0 *const USB0_CH6 =
    reinterpret_cast<usb0_ch0 *>(0x500405C0);

static volatile usb0_ch0 *const USB0_CH7 =
    reinterpret_cast<usb0_ch0 *>(0x500405E0);

static volatile usb0_ch0 *const USB0_CH8 =
    reinterpret_cast<usb0_ch0 *>(0x50040600);

static volatile usb0_ch0 *const USB0_CH9 =
    reinterpret_cast<usb0_ch0 *>(0x50040620);

}; // namespace XMC4700
