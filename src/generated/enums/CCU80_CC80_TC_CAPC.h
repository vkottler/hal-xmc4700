/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU80_CC80_TC_CAPC : uint8_t
{
    never_cleared_capture_event /*!< Timer is never cleared on a capture event
                                 */
        ,
    cleared_capture_event_into_capture_regi_cont =
        1 /*!< Timer is cleared on a capture event into capture registers 2
             and 3. (When SCE = 1#, Timer is always cleared in a capture event)
           */
        ,
    cleared_capture_event_into_capture_regi_cont_ =
        2 /*!< Timer is cleared on a capture event into capture registers 0
             and 1. (When SCE = 1#, Timer is always cleared in a capture event)
           */
        ,
    always_cleared_capture_event =
        3 /*!< Timer is always cleared in a capture event. */
};
static_assert(sizeof(CCU80_CC80_TC_CAPC) == 1);

/**
 * Converts CCU80_CC80_TC_CAPC to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU80_CC80_TC_CAPC instance)
{
    const char *result = "UNKNOWN CCU80_CC80_TC_CAPC";

    switch (instance)
    {
    case CCU80_CC80_TC_CAPC::never_cleared_capture_event:
        result = "never_cleared_capture_event";
        break;
    case CCU80_CC80_TC_CAPC::cleared_capture_event_into_capture_regi_cont:
        result = "cleared_capture_event_into_capture_regi_cont";
        break;
    case CCU80_CC80_TC_CAPC::cleared_capture_event_into_capture_regi_cont_:
        result = "cleared_capture_event_into_capture_regi_cont_";
        break;
    case CCU80_CC80_TC_CAPC::always_cleared_capture_event:
        result = "always_cleared_capture_event";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU80_CC80_TC_CAPC.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU80_CC80_TC_CAPC &output)
{
    bool result = false;

    if ((result = !strncmp(data, "never_cleared_capture_event", 27)))
    {
        output = CCU80_CC80_TC_CAPC::never_cleared_capture_event;
    }
    else if ((result = !strncmp(
                  data, "cleared_capture_event_into_capture_regi_cont", 44)))
    {
        output =
            CCU80_CC80_TC_CAPC::cleared_capture_event_into_capture_regi_cont;
    }
    else if ((result = !strncmp(
                  data, "cleared_capture_event_into_capture_regi_cont_", 45)))
    {
        output =
            CCU80_CC80_TC_CAPC::cleared_capture_event_into_capture_regi_cont_;
    }
    else if ((result = !strncmp(data, "always_cleared_capture_event", 28)))
    {
        output = CCU80_CC80_TC_CAPC::always_cleared_capture_event;
    }

    return result;
}

}; // namespace XMC4700
