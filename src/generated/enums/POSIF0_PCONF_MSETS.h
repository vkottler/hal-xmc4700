/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class POSIF0_PCONF_MSETS : uint8_t
{
    a /*!< POSIFx.MSETA */,
    b = 1 /*!< POSIFx.MSETB */,
    c = 2 /*!< POSIFx.MSETC */,
    d = 3 /*!< POSIFx.MSETD */,
    e = 4 /*!< POSIFx.MSETE */,
    f = 5 /*!< POSIFx.MSETF */,
    g = 6 /*!< POSIFx.MSETG */,
    h = 7 /*!< POSIFx.MSETH */
};
static_assert(sizeof(POSIF0_PCONF_MSETS) == 1);

/**
 * Converts POSIF0_PCONF_MSETS to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(POSIF0_PCONF_MSETS instance)
{
    const char *result = "UNKNOWN POSIF0_PCONF_MSETS";

    switch (instance)
    {
    case POSIF0_PCONF_MSETS::a:
        result = "a";
        break;
    case POSIF0_PCONF_MSETS::b:
        result = "b";
        break;
    case POSIF0_PCONF_MSETS::c:
        result = "c";
        break;
    case POSIF0_PCONF_MSETS::d:
        result = "d";
        break;
    case POSIF0_PCONF_MSETS::e:
        result = "e";
        break;
    case POSIF0_PCONF_MSETS::f:
        result = "f";
        break;
    case POSIF0_PCONF_MSETS::g:
        result = "g";
        break;
    case POSIF0_PCONF_MSETS::h:
        result = "h";
        break;
    }

    return result;
}

/**
 * Converts a C string to POSIF0_PCONF_MSETS.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, POSIF0_PCONF_MSETS &output)
{
    bool result = false;

    if ((result = !strncmp(data, "a", 1)))
    {
        output = POSIF0_PCONF_MSETS::a;
    }
    else if ((result = !strncmp(data, "b", 1)))
    {
        output = POSIF0_PCONF_MSETS::b;
    }
    else if ((result = !strncmp(data, "c", 1)))
    {
        output = POSIF0_PCONF_MSETS::c;
    }
    else if ((result = !strncmp(data, "d", 1)))
    {
        output = POSIF0_PCONF_MSETS::d;
    }
    else if ((result = !strncmp(data, "e", 1)))
    {
        output = POSIF0_PCONF_MSETS::e;
    }
    else if ((result = !strncmp(data, "f", 1)))
    {
        output = POSIF0_PCONF_MSETS::f;
    }
    else if ((result = !strncmp(data, "g", 1)))
    {
        output = POSIF0_PCONF_MSETS::g;
    }
    else if ((result = !strncmp(data, "h", 1)))
    {
        output = POSIF0_PCONF_MSETS::h;
    }

    return result;
}

}; // namespace XMC4700
