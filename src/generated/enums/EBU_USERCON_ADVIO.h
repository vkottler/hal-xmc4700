/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class EBU_USERCON_ADVIO : uint8_t
{
    required_controlling_memory /*!< ADV pin is required for controlling memory
                                 */
        ,
    available_gpio_function = 1 /*!< ADV pin is available for GPIO function */
};
static_assert(sizeof(EBU_USERCON_ADVIO) == 1);

/**
 * Converts EBU_USERCON_ADVIO to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(EBU_USERCON_ADVIO instance)
{
    const char *result = "UNKNOWN EBU_USERCON_ADVIO";

    switch (instance)
    {
    case EBU_USERCON_ADVIO::required_controlling_memory:
        result = "required_controlling_memory";
        break;
    case EBU_USERCON_ADVIO::available_gpio_function:
        result = "available_gpio_function";
        break;
    }

    return result;
}

/**
 * Converts a C string to EBU_USERCON_ADVIO.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, EBU_USERCON_ADVIO &output)
{
    bool result = false;

    if ((result = !strncmp(data, "required_controlling_memory", 27)))
    {
        output = EBU_USERCON_ADVIO::required_controlling_memory;
    }
    else if ((result = !strncmp(data, "available_gpio_function", 23)))
    {
        output = EBU_USERCON_ADVIO::available_gpio_function;
    }

    return result;
}

}; // namespace XMC4700
