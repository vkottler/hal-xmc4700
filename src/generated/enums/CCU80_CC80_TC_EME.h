/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU80_CC80_TC_EME : uint8_t
{
    functionality_doesnt_affect_any_channel /*!< External Modulation
                                               functionality doesn't affect any
                                               channel */
        ,
    only_applied_channel_1 =
        1 /*!< External Modulation only applied on channel 1 */,
    only_applied_channel_2 =
        2 /*!< External Modulation only applied on channel 2 */,
    applied_both_channels =
        3 /*!< External Modulation applied on both channels */
};
static_assert(sizeof(CCU80_CC80_TC_EME) == 1);

/**
 * Converts CCU80_CC80_TC_EME to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU80_CC80_TC_EME instance)
{
    const char *result = "UNKNOWN CCU80_CC80_TC_EME";

    switch (instance)
    {
    case CCU80_CC80_TC_EME::functionality_doesnt_affect_any_channel:
        result = "functionality_doesnt_affect_any_channel";
        break;
    case CCU80_CC80_TC_EME::only_applied_channel_1:
        result = "only_applied_channel_1";
        break;
    case CCU80_CC80_TC_EME::only_applied_channel_2:
        result = "only_applied_channel_2";
        break;
    case CCU80_CC80_TC_EME::applied_both_channels:
        result = "applied_both_channels";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU80_CC80_TC_EME.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU80_CC80_TC_EME &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "functionality_doesnt_affect_any_channel", 39)))
    {
        output = CCU80_CC80_TC_EME::functionality_doesnt_affect_any_channel;
    }
    else if ((result = !strncmp(data, "only_applied_channel_1", 22)))
    {
        output = CCU80_CC80_TC_EME::only_applied_channel_1;
    }
    else if ((result = !strncmp(data, "only_applied_channel_2", 22)))
    {
        output = CCU80_CC80_TC_EME::only_applied_channel_2;
    }
    else if ((result = !strncmp(data, "applied_both_channels", 21)))
    {
        output = CCU80_CC80_TC_EME::applied_both_channels;
    }

    return result;
}

}; // namespace XMC4700
