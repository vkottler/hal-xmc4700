/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_AIRCR_SYSRESETREQ : uint8_t
{
    no_system_reset_request /*!< no system reset request */,
    asserts_signal_outer_system_requests_reset =
        1 /*!< asserts a signal to the outer system that requests a reset. */
};
static_assert(sizeof(PPB_AIRCR_SYSRESETREQ) == 1);

/**
 * Converts PPB_AIRCR_SYSRESETREQ to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_AIRCR_SYSRESETREQ instance)
{
    const char *result = "UNKNOWN PPB_AIRCR_SYSRESETREQ";

    switch (instance)
    {
    case PPB_AIRCR_SYSRESETREQ::no_system_reset_request:
        result = "no_system_reset_request";
        break;
    case PPB_AIRCR_SYSRESETREQ::asserts_signal_outer_system_requests_reset:
        result = "asserts_signal_outer_system_requests_reset";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_AIRCR_SYSRESETREQ.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_AIRCR_SYSRESETREQ &output)
{
    bool result = false;

    if ((result = !strncmp(data, "no_system_reset_request", 23)))
    {
        output = PPB_AIRCR_SYSRESETREQ::no_system_reset_request;
    }
    else if ((result = !strncmp(
                  data, "asserts_signal_outer_system_requests_reset", 42)))
    {
        output =
            PPB_AIRCR_SYSRESETREQ::asserts_signal_outer_system_requests_reset;
    }

    return result;
}

}; // namespace XMC4700
