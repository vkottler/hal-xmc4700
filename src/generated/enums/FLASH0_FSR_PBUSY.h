/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class FLASH0_FSR_PBUSY : uint8_t
{
    ready_not_busy_pflash_read_mode /*!< PFLASH ready, not busy; PFLASH in read
                                       mode. */
        ,
    busy_pflash_not_read_mode = 1 /*!< PFLASH busy; PFLASH not in read mode. */
};
static_assert(sizeof(FLASH0_FSR_PBUSY) == 1);

/**
 * Converts FLASH0_FSR_PBUSY to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(FLASH0_FSR_PBUSY instance)
{
    const char *result = "UNKNOWN FLASH0_FSR_PBUSY";

    switch (instance)
    {
    case FLASH0_FSR_PBUSY::ready_not_busy_pflash_read_mode:
        result = "ready_not_busy_pflash_read_mode";
        break;
    case FLASH0_FSR_PBUSY::busy_pflash_not_read_mode:
        result = "busy_pflash_not_read_mode";
        break;
    }

    return result;
}

/**
 * Converts a C string to FLASH0_FSR_PBUSY.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, FLASH0_FSR_PBUSY &output)
{
    bool result = false;

    if ((result = !strncmp(data, "ready_not_busy_pflash_read_mode", 31)))
    {
        output = FLASH0_FSR_PBUSY::ready_not_busy_pflash_read_mode;
    }
    else if ((result = !strncmp(data, "busy_pflash_not_read_mode", 25)))
    {
        output = FLASH0_FSR_PBUSY::busy_pflash_not_read_mode;
    }

    return result;
}

}; // namespace XMC4700
