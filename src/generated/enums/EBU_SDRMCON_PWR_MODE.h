/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class EBU_SDRMCON_PWR_MODE : uint8_t
{
    precharge_before_clock_stop_default_after_reset /*!< precharge before clock
                                                       stop (default after
                                                       reset) */
        ,
    auto_precharge_before_clock_stop =
        1 /*!< auto-precharge before clock stop */,
    active_power_down_stop_clock_without_precharge =
        2 /*!< active power down (stop clock without precharge) */,
    clock_stop_power_down = 3 /*!< clock stop power down */
};
static_assert(sizeof(EBU_SDRMCON_PWR_MODE) == 1);

/**
 * Converts EBU_SDRMCON_PWR_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(EBU_SDRMCON_PWR_MODE instance)
{
    const char *result = "UNKNOWN EBU_SDRMCON_PWR_MODE";

    switch (instance)
    {
    case EBU_SDRMCON_PWR_MODE::precharge_before_clock_stop_default_after_reset:
        result = "precharge_before_clock_stop_default_after_reset";
        break;
    case EBU_SDRMCON_PWR_MODE::auto_precharge_before_clock_stop:
        result = "auto_precharge_before_clock_stop";
        break;
    case EBU_SDRMCON_PWR_MODE::active_power_down_stop_clock_without_precharge:
        result = "active_power_down_stop_clock_without_precharge";
        break;
    case EBU_SDRMCON_PWR_MODE::clock_stop_power_down:
        result = "clock_stop_power_down";
        break;
    }

    return result;
}

/**
 * Converts a C string to EBU_SDRMCON_PWR_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, EBU_SDRMCON_PWR_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "precharge_before_clock_stop_default_after_reset", 47)))
    {
        output = EBU_SDRMCON_PWR_MODE::
            precharge_before_clock_stop_default_after_reset;
    }
    else if ((result = !strncmp(data, "auto_precharge_before_clock_stop", 32)))
    {
        output = EBU_SDRMCON_PWR_MODE::auto_precharge_before_clock_stop;
    }
    else if ((result = !strncmp(
                  data, "active_power_down_stop_clock_without_precharge", 46)))
    {
        output = EBU_SDRMCON_PWR_MODE::
            active_power_down_stop_clock_without_precharge;
    }
    else if ((result = !strncmp(data, "clock_stop_power_down", 21)))
    {
        output = EBU_SDRMCON_PWR_MODE::clock_stop_power_down;
    }

    return result;
}

}; // namespace XMC4700
