/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_FPCCR_HFRDY : uint8_t
{
    did_not_permit_setting_hardfault_handler_pend_cont /*!< Priority did not
                                                          permit setting the
                                                          HardFault handler to
                                                          the pending state
                                                          when the
                                                          floating-point stack
                                                          frame was allocated.
                                                        */
        ,
    permitted_setting_hardfault_handler_pending_s_cont =
        1 /*!< Priority permitted setting the HardFault handler to the pending
             state when the floating-point stack frame was allocated. */
};
static_assert(sizeof(PPB_FPCCR_HFRDY) == 1);

/**
 * Converts PPB_FPCCR_HFRDY to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_FPCCR_HFRDY instance)
{
    const char *result = "UNKNOWN PPB_FPCCR_HFRDY";

    switch (instance)
    {
    case PPB_FPCCR_HFRDY::did_not_permit_setting_hardfault_handler_pend_cont:
        result = "did_not_permit_setting_hardfault_handler_pend_cont";
        break;
    case PPB_FPCCR_HFRDY::permitted_setting_hardfault_handler_pending_s_cont:
        result = "permitted_setting_hardfault_handler_pending_s_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_FPCCR_HFRDY.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_FPCCR_HFRDY &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "did_not_permit_setting_hardfault_handler_pend_cont", 50)))
    {
        output = PPB_FPCCR_HFRDY::
            did_not_permit_setting_hardfault_handler_pend_cont;
    }
    else if ((result = !strncmp(
                  data, "permitted_setting_hardfault_handler_pending_s_cont",
                  50)))
    {
        output = PPB_FPCCR_HFRDY::
            permitted_setting_hardfault_handler_pending_s_cont;
    }

    return result;
}

}; // namespace XMC4700
