/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_CFSR_DACCVIOL : uint8_t
{
    no_data_access_violation_fault /*!< no data access violation fault */,
    processor_attempted_load_or_store_at_location_cont =
        1 /*!< the processor attempted a load or store at a location that does
             not permit the operation. */
};
static_assert(sizeof(PPB_CFSR_DACCVIOL) == 1);

/**
 * Converts PPB_CFSR_DACCVIOL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_CFSR_DACCVIOL instance)
{
    const char *result = "UNKNOWN PPB_CFSR_DACCVIOL";

    switch (instance)
    {
    case PPB_CFSR_DACCVIOL::no_data_access_violation_fault:
        result = "no_data_access_violation_fault";
        break;
    case PPB_CFSR_DACCVIOL::processor_attempted_load_or_store_at_location_cont:
        result = "processor_attempted_load_or_store_at_location_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_CFSR_DACCVIOL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_CFSR_DACCVIOL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "no_data_access_violation_fault", 30)))
    {
        output = PPB_CFSR_DACCVIOL::no_data_access_violation_fault;
    }
    else if ((result = !strncmp(
                  data, "processor_attempted_load_or_store_at_location_cont",
                  50)))
    {
        output = PPB_CFSR_DACCVIOL::
            processor_attempted_load_or_store_at_location_cont;
    }

    return result;
}

}; // namespace XMC4700
