/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_TBCTR_SIZE : uint8_t
{
    mechanism_disabled_buffer_does_not_accept_any_cont /*!< The FIFO mechanism
                                                          is disabled. The
                                                          buffer does not
                                                          accept any request
                                                          for data. */
        ,
    buffer_contains_2_entries = 1 /*!< The FIFO buffer contains 2 entries. */,
    buffer_contains_4_entries = 2 /*!< The FIFO buffer contains 4 entries. */,
    buffer_contains_8_entries = 3 /*!< The FIFO buffer contains 8 entries. */,
    buffer_contains_16_entries =
        4 /*!< The FIFO buffer contains 16 entries. */,
    buffer_contains_32_entries =
        5 /*!< The FIFO buffer contains 32 entries. */,
    buffer_contains_64_entries = 6 /*!< The FIFO buffer contains 64 entries. */
};
static_assert(sizeof(USIC0_CH0_TBCTR_SIZE) == 1);

/**
 * Converts USIC0_CH0_TBCTR_SIZE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_TBCTR_SIZE instance)
{
    const char *result = "UNKNOWN USIC0_CH0_TBCTR_SIZE";

    switch (instance)
    {
    case USIC0_CH0_TBCTR_SIZE::
        mechanism_disabled_buffer_does_not_accept_any_cont:
        result = "mechanism_disabled_buffer_does_not_accept_any_cont";
        break;
    case USIC0_CH0_TBCTR_SIZE::buffer_contains_2_entries:
        result = "buffer_contains_2_entries";
        break;
    case USIC0_CH0_TBCTR_SIZE::buffer_contains_4_entries:
        result = "buffer_contains_4_entries";
        break;
    case USIC0_CH0_TBCTR_SIZE::buffer_contains_8_entries:
        result = "buffer_contains_8_entries";
        break;
    case USIC0_CH0_TBCTR_SIZE::buffer_contains_16_entries:
        result = "buffer_contains_16_entries";
        break;
    case USIC0_CH0_TBCTR_SIZE::buffer_contains_32_entries:
        result = "buffer_contains_32_entries";
        break;
    case USIC0_CH0_TBCTR_SIZE::buffer_contains_64_entries:
        result = "buffer_contains_64_entries";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_TBCTR_SIZE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_TBCTR_SIZE &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "mechanism_disabled_buffer_does_not_accept_any_cont", 50)))
    {
        output = USIC0_CH0_TBCTR_SIZE::
            mechanism_disabled_buffer_does_not_accept_any_cont;
    }
    else if ((result = !strncmp(data, "buffer_contains_2_entries", 25)))
    {
        output = USIC0_CH0_TBCTR_SIZE::buffer_contains_2_entries;
    }
    else if ((result = !strncmp(data, "buffer_contains_4_entries", 25)))
    {
        output = USIC0_CH0_TBCTR_SIZE::buffer_contains_4_entries;
    }
    else if ((result = !strncmp(data, "buffer_contains_8_entries", 25)))
    {
        output = USIC0_CH0_TBCTR_SIZE::buffer_contains_8_entries;
    }
    else if ((result = !strncmp(data, "buffer_contains_16_entries", 26)))
    {
        output = USIC0_CH0_TBCTR_SIZE::buffer_contains_16_entries;
    }
    else if ((result = !strncmp(data, "buffer_contains_32_entries", 26)))
    {
        output = USIC0_CH0_TBCTR_SIZE::buffer_contains_32_entries;
    }
    else if ((result = !strncmp(data, "buffer_contains_64_entries", 26)))
    {
        output = USIC0_CH0_TBCTR_SIZE::buffer_contains_64_entries;
    }

    return result;
}

}; // namespace XMC4700
