/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_HPTXSTS_PTxFSpcAvail : uint16_t
{
    periodic_txfifo_full /*!< Periodic TxFIFO is full */,
    1_word_available = 1 /*!< 1 word available */,
    2_words_available = 2 /*!< 2 words available */
};
static_assert(sizeof(USB0_HPTXSTS_PTxFSpcAvail) == 2);

/**
 * Converts USB0_HPTXSTS_PTxFSpcAvail to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_HPTXSTS_PTxFSpcAvail instance)
{
    const char *result = "UNKNOWN USB0_HPTXSTS_PTxFSpcAvail";

    switch (instance)
    {
    case USB0_HPTXSTS_PTxFSpcAvail::periodic_txfifo_full:
        result = "periodic_txfifo_full";
        break;
    case USB0_HPTXSTS_PTxFSpcAvail::1_word_available:
        result = "1_word_available";
        break;
    case USB0_HPTXSTS_PTxFSpcAvail::2_words_available:
        result = "2_words_available";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_HPTXSTS_PTxFSpcAvail.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_HPTXSTS_PTxFSpcAvail &output)
{
    bool result = false;

    if ((result = !strncmp(data, "periodic_txfifo_full", 20)))
    {
        output = USB0_HPTXSTS_PTxFSpcAvail::periodic_txfifo_full;
    }
    else if ((result = !strncmp(data, "1_word_available", 16)))
    {
        output = USB0_HPTXSTS_PTxFSpcAvail::1_word_available;
    }
    else if ((result = !strncmp(data, "2_words_available", 17)))
    {
        output = USB0_HPTXSTS_PTxFSpcAvail::2_words_available;
    }

    return result;
}

}; // namespace XMC4700
