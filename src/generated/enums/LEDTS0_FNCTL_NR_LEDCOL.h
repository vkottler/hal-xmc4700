/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class LEDTS0_FNCTL_NR_LEDCOL : uint8_t
{
    1_led_column /*!< 1 LED column */,
    2_led_columns = 1 /*!< 2 LED columns */,
    3_led_columns = 2 /*!< 3 LED columns */,
    4_led_columns = 3 /*!< 4 LED columns */,
    5_led_columns = 4 /*!< 5 LED columns */,
    6_led_columns = 5 /*!< 6 LED columns */,
    7_led_columns = 6 /*!< 7 LED columns */,
    8_led_columns_max_led_columns_7_if_bit_ts_en_1 =
        7 /*!< 8 LED columns (max. LED columns = 7 if bit TS_EN = 1) */
};
static_assert(sizeof(LEDTS0_FNCTL_NR_LEDCOL) == 1);

/**
 * Converts LEDTS0_FNCTL_NR_LEDCOL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LEDTS0_FNCTL_NR_LEDCOL instance)
{
    const char *result = "UNKNOWN LEDTS0_FNCTL_NR_LEDCOL";

    switch (instance)
    {
    case LEDTS0_FNCTL_NR_LEDCOL::1_led_column:
        result = "1_led_column";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::2_led_columns:
        result = "2_led_columns";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::3_led_columns:
        result = "3_led_columns";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::4_led_columns:
        result = "4_led_columns";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::5_led_columns:
        result = "5_led_columns";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::6_led_columns:
        result = "6_led_columns";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::7_led_columns:
        result = "7_led_columns";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::
        8_led_columns_max_led_columns_7_if_bit_ts_en_1:
        result = "8_led_columns_max_led_columns_7_if_bit_ts_en_1";
        break;
    }

    return result;
}

/**
 * Converts a C string to LEDTS0_FNCTL_NR_LEDCOL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LEDTS0_FNCTL_NR_LEDCOL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "1_led_column", 12)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::1_led_column;
    }
    else if ((result = !strncmp(data, "2_led_columns", 13)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::2_led_columns;
    }
    else if ((result = !strncmp(data, "3_led_columns", 13)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::3_led_columns;
    }
    else if ((result = !strncmp(data, "4_led_columns", 13)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::4_led_columns;
    }
    else if ((result = !strncmp(data, "5_led_columns", 13)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::5_led_columns;
    }
    else if ((result = !strncmp(data, "6_led_columns", 13)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::6_led_columns;
    }
    else if ((result = !strncmp(data, "7_led_columns", 13)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::7_led_columns;
    }
    else if ((result = !strncmp(
                  data, "8_led_columns_max_led_columns_7_if_bit_ts_en_1", 46)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::
            8_led_columns_max_led_columns_7_if_bit_ts_en_1;
    }

    return result;
}

}; // namespace XMC4700
