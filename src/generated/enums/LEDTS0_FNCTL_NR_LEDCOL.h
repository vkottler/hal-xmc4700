/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class LEDTS0_FNCTL_NR_LEDCOL : uint8_t
{
    value1 /*!< 1 LED column */,
    value2 = 1 /*!< 2 LED columns */,
    value3 = 2 /*!< 3 LED columns */,
    value4 = 3 /*!< 4 LED columns */,
    value5 = 4 /*!< 5 LED columns */,
    value6 = 5 /*!< 6 LED columns */,
    value7 = 6 /*!< 7 LED columns */,
    value8 = 7 /*!< 8 LED columns (max. LED columns = 7 if bit TS_EN = 1) */
};
static_assert(sizeof(LEDTS0_FNCTL_NR_LEDCOL) == 1);

static constexpr uint16_t LEDTS0_FNCTL_NR_LEDCOL_id = 871;

/**
 * Converts LEDTS0_FNCTL_NR_LEDCOL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LEDTS0_FNCTL_NR_LEDCOL instance)
{
    const char *result = "UNKNOWN LEDTS0_FNCTL_NR_LEDCOL";

    switch (instance)
    {
    case LEDTS0_FNCTL_NR_LEDCOL::value1:
        result = "value1";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::value2:
        result = "value2";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::value3:
        result = "value3";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::value4:
        result = "value4";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::value5:
        result = "value5";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::value6:
        result = "value6";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::value7:
        result = "value7";
        break;
    case LEDTS0_FNCTL_NR_LEDCOL::value8:
        result = "value8";
        break;
    }

    return result;
}

/**
 * Converts a C string to LEDTS0_FNCTL_NR_LEDCOL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LEDTS0_FNCTL_NR_LEDCOL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::value1;
    }
    else if ((result = !strncmp(data, "value2", 6)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::value2;
    }
    else if ((result = !strncmp(data, "value3", 6)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::value3;
    }
    else if ((result = !strncmp(data, "value4", 6)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::value4;
    }
    else if ((result = !strncmp(data, "value5", 6)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::value5;
    }
    else if ((result = !strncmp(data, "value6", 6)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::value6;
    }
    else if ((result = !strncmp(data, "value7", 6)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::value7;
    }
    else if ((result = !strncmp(data, "value8", 6)))
    {
        output = LEDTS0_FNCTL_NR_LEDCOL::value8;
    }

    return result;
}

}; // namespace XMC4700
