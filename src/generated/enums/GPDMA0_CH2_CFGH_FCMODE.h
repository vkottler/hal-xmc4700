/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class GPDMA0_CH2_CFGH_FCMODE : uint8_t
{
    serviced_when_they_occur_data_pre_fetching_enabled /*!< Source transaction
                                                          requests are serviced
                                                          when they occur. Data
                                                          pre-fetching is
                                                          enabled. */
        ,
    not_serviced_until_destination_transaction_re_cont =
        1 /*!< Source transaction requests are not serviced until a destination
             transaction request occurs. In this mode, the amount of data
             transferred from the source is limited so that it is guaranteed to
             be transferred to the destination prior to block termination by
             the destination. Data pre-fetching is disabled. */
};
static_assert(sizeof(GPDMA0_CH2_CFGH_FCMODE) == 1);

/**
 * Converts GPDMA0_CH2_CFGH_FCMODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(GPDMA0_CH2_CFGH_FCMODE instance)
{
    const char *result = "UNKNOWN GPDMA0_CH2_CFGH_FCMODE";

    switch (instance)
    {
    case GPDMA0_CH2_CFGH_FCMODE::
        serviced_when_they_occur_data_pre_fetching_enabled:
        result = "serviced_when_they_occur_data_pre_fetching_enabled";
        break;
    case GPDMA0_CH2_CFGH_FCMODE::
        not_serviced_until_destination_transaction_re_cont:
        result = "not_serviced_until_destination_transaction_re_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to GPDMA0_CH2_CFGH_FCMODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, GPDMA0_CH2_CFGH_FCMODE &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "serviced_when_they_occur_data_pre_fetching_enabled", 50)))
    {
        output = GPDMA0_CH2_CFGH_FCMODE::
            serviced_when_they_occur_data_pre_fetching_enabled;
    }
    else if ((result = !strncmp(
                  data, "not_serviced_until_destination_transaction_re_cont",
                  50)))
    {
        output = GPDMA0_CH2_CFGH_FCMODE::
            not_serviced_until_destination_transaction_re_cont;
    }

    return result;
}

}; // namespace XMC4700
