/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_FMR_CRDV0 : uint8_t
{
    no_action /*!< No action. */,
    bits_rbuf01srrdv00_rbuf01srrdv10_cleared =
        1 /*!< Bits RBUF01SR.RDV00 and RBUF01SR.RDV10 are cleared. */
};
static_assert(sizeof(USIC0_CH0_FMR_CRDV0) == 1);

/**
 * Converts USIC0_CH0_FMR_CRDV0 to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_FMR_CRDV0 instance)
{
    const char *result = "UNKNOWN USIC0_CH0_FMR_CRDV0";

    switch (instance)
    {
    case USIC0_CH0_FMR_CRDV0::no_action:
        result = "no_action";
        break;
    case USIC0_CH0_FMR_CRDV0::bits_rbuf01srrdv00_rbuf01srrdv10_cleared:
        result = "bits_rbuf01srrdv00_rbuf01srrdv10_cleared";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_FMR_CRDV0.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_FMR_CRDV0 &output)
{
    bool result = false;

    if ((result = !strncmp(data, "no_action", 9)))
    {
        output = USIC0_CH0_FMR_CRDV0::no_action;
    }
    else if ((result = !strncmp(
                  data, "bits_rbuf01srrdv00_rbuf01srrdv10_cleared", 40)))
    {
        output = USIC0_CH0_FMR_CRDV0::bits_rbuf01srrdv00_rbuf01srrdv10_cleared;
    }

    return result;
}

}; // namespace XMC4700
