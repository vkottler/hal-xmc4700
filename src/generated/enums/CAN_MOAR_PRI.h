/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CAN_MOAR_PRI : uint8_t
{
    value2 = 1 /*!< Transmit acceptance filtering is based on the list order.
                  This means that message object n is considered for
                  transmission only if there is no other message object with
                  valid transmit request (MSGVAL & TXEN0 & TXEN1 = 1) somewhere
                  before this object in the list. */
        ,
    value3 = 2 /*!< Transmit acceptance filtering is based on the CAN
                  identifier. This means, message object n is considered for
                  transmission only if there is no other message object with
                  higher priority identifier + IDE + DIR (with respect to CAN
                  arbitration rules) somewhere in the list (see ). */
        ,
    value4 = 3 /*!< Transmit acceptance filtering is based on the list order
                  (as PRI = 01B). */
};
static_assert(sizeof(CAN_MOAR_PRI) == 1);

static constexpr uint16_t CAN_MOAR_PRI_id = 16;

/**
 * Converts CAN_MOAR_PRI to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN_MOAR_PRI instance)
{
    const char *result = "UNKNOWN CAN_MOAR_PRI";

    switch (instance)
    {
    case CAN_MOAR_PRI::value2:
        result = "value2";
        break;
    case CAN_MOAR_PRI::value3:
        result = "value3";
        break;
    case CAN_MOAR_PRI::value4:
        result = "value4";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN_MOAR_PRI.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN_MOAR_PRI &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value2", 6)))
    {
        output = CAN_MOAR_PRI::value2;
    }
    else if ((result = !strncmp(data, "value3", 6)))
    {
        output = CAN_MOAR_PRI::value3;
    }
    else if ((result = !strncmp(data, "value4", 6)))
    {
        output = CAN_MOAR_PRI::value4;
    }

    return result;
}

}; // namespace XMC4700
