/**
 * \file
 * \brief Generated by ifgen (3.2.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_GRSTCTL_TxFNum : uint8_t
{
    non_periodic_txfifo_flush_host_mode_or_tx_fif_cont /*!< Non-periodic TxFIFO
                                                          flush in Host mode or
                                                          Tx FIFO 0 flush in
                                                          device mode */
        ,
    periodic_txfifo_flush_host_mode_or_tx_fifo_1__cont =
        1 /*!< Periodic TxFIFO flush in Host mode or Tx FIFO 1 flush in device
             mode */
        ,
    tx_fifo_2_flush_device_mode = 2 /*!< Tx FIFO 2 flush in device mode */,
    tx_fifo_15_flush_device_mode = 15 /*!< Tx FIFO 15 flush in device mode */,
    flush_all_transmit_fifos_device_or_host_mode =
        16 /*!< Flush all the transmit FIFOs in device or host mode. */
};
static_assert(sizeof(USB0_GRSTCTL_TxFNum) == 1);

/**
 * Converts USB0_GRSTCTL_TxFNum to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_GRSTCTL_TxFNum instance)
{
    const char *result = "UNKNOWN USB0_GRSTCTL_TxFNum";

    switch (instance)
    {
    case USB0_GRSTCTL_TxFNum::
        non_periodic_txfifo_flush_host_mode_or_tx_fif_cont:
        result = "non_periodic_txfifo_flush_host_mode_or_tx_fif_cont";
        break;
    case USB0_GRSTCTL_TxFNum::
        periodic_txfifo_flush_host_mode_or_tx_fifo_1__cont:
        result = "periodic_txfifo_flush_host_mode_or_tx_fifo_1__cont";
        break;
    case USB0_GRSTCTL_TxFNum::tx_fifo_2_flush_device_mode:
        result = "tx_fifo_2_flush_device_mode";
        break;
    case USB0_GRSTCTL_TxFNum::tx_fifo_15_flush_device_mode:
        result = "tx_fifo_15_flush_device_mode";
        break;
    case USB0_GRSTCTL_TxFNum::flush_all_transmit_fifos_device_or_host_mode:
        result = "flush_all_transmit_fifos_device_or_host_mode";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_GRSTCTL_TxFNum.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_GRSTCTL_TxFNum &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "non_periodic_txfifo_flush_host_mode_or_tx_fif_cont", 50)))
    {
        output = USB0_GRSTCTL_TxFNum::
            non_periodic_txfifo_flush_host_mode_or_tx_fif_cont;
    }
    else if ((result = !strncmp(
                  data, "periodic_txfifo_flush_host_mode_or_tx_fifo_1__cont",
                  50)))
    {
        output = USB0_GRSTCTL_TxFNum::
            periodic_txfifo_flush_host_mode_or_tx_fifo_1__cont;
    }
    else if ((result = !strncmp(data, "tx_fifo_2_flush_device_mode", 27)))
    {
        output = USB0_GRSTCTL_TxFNum::tx_fifo_2_flush_device_mode;
    }
    else if ((result = !strncmp(data, "tx_fifo_15_flush_device_mode", 28)))
    {
        output = USB0_GRSTCTL_TxFNum::tx_fifo_15_flush_device_mode;
    }
    else if ((result = !strncmp(
                  data, "flush_all_transmit_fifos_device_or_host_mode", 44)))
    {
        output =
            USB0_GRSTCTL_TxFNum::flush_all_transmit_fifos_device_or_host_mode;
    }

    return result;
}

}; // namespace XMC4700
