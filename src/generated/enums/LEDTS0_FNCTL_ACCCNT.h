/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class LEDTS0_FNCTL_ACCCNT : uint8_t
{
    1_time /*!< 1 time */,
    2_times = 1 /*!< 2 times */,
    16_times = 15 /*!< 16 times */
};
static_assert(sizeof(LEDTS0_FNCTL_ACCCNT) == 1);

/**
 * Converts LEDTS0_FNCTL_ACCCNT to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(LEDTS0_FNCTL_ACCCNT instance)
{
    const char *result = "UNKNOWN LEDTS0_FNCTL_ACCCNT";

    switch (instance)
    {
    case LEDTS0_FNCTL_ACCCNT::1_time:
        result = "1_time";
        break;
    case LEDTS0_FNCTL_ACCCNT::2_times:
        result = "2_times";
        break;
    case LEDTS0_FNCTL_ACCCNT::16_times:
        result = "16_times";
        break;
    }

    return result;
}

/**
 * Converts a C string to LEDTS0_FNCTL_ACCCNT.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, LEDTS0_FNCTL_ACCCNT &output)
{
    bool result = false;

    if ((result = !strncmp(data, "1_time", 6)))
    {
        output = LEDTS0_FNCTL_ACCCNT::1_time;
    }
    else if ((result = !strncmp(data, "2_times", 7)))
    {
        output = LEDTS0_FNCTL_ACCCNT::2_times;
    }
    else if ((result = !strncmp(data, "16_times", 8)))
    {
        output = LEDTS0_FNCTL_ACCCNT::16_times;
    }

    return result;
}

}; // namespace XMC4700
