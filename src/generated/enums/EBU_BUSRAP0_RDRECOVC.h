/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class EBU_BUSRAP0_RDRECOVC : uint8_t
{
    no_recovery_phase_clock_cycles_available /*!< No Recovery Phase clock
                                                cycles available. */
        ,
    _1_clock_cycle_selected = 1 /*!< 1 clock cycle selected. */,
    _6_clock_cycles_selected = 6 /*!< 6 clock cycles selected. */,
    _7_clock_cycles_selected = 7 /*!< 7 clock cycles selected. */
};
static_assert(sizeof(EBU_BUSRAP0_RDRECOVC) == 1);

/**
 * Converts EBU_BUSRAP0_RDRECOVC to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(EBU_BUSRAP0_RDRECOVC instance)
{
    const char *result = "UNKNOWN EBU_BUSRAP0_RDRECOVC";

    switch (instance)
    {
    case EBU_BUSRAP0_RDRECOVC::no_recovery_phase_clock_cycles_available:
        result = "no_recovery_phase_clock_cycles_available";
        break;
    case EBU_BUSRAP0_RDRECOVC::_1_clock_cycle_selected:
        result = "_1_clock_cycle_selected";
        break;
    case EBU_BUSRAP0_RDRECOVC::_6_clock_cycles_selected:
        result = "_6_clock_cycles_selected";
        break;
    case EBU_BUSRAP0_RDRECOVC::_7_clock_cycles_selected:
        result = "_7_clock_cycles_selected";
        break;
    }

    return result;
}

/**
 * Converts a C string to EBU_BUSRAP0_RDRECOVC.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, EBU_BUSRAP0_RDRECOVC &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "no_recovery_phase_clock_cycles_available", 40)))
    {
        output =
            EBU_BUSRAP0_RDRECOVC::no_recovery_phase_clock_cycles_available;
    }
    else if ((result = !strncmp(data, "_1_clock_cycle_selected", 23)))
    {
        output = EBU_BUSRAP0_RDRECOVC::_1_clock_cycle_selected;
    }
    else if ((result = !strncmp(data, "_6_clock_cycles_selected", 24)))
    {
        output = EBU_BUSRAP0_RDRECOVC::_6_clock_cycles_selected;
    }
    else if ((result = !strncmp(data, "_7_clock_cycles_selected", 24)))
    {
        output = EBU_BUSRAP0_RDRECOVC::_7_clock_cycles_selected;
    }

    return result;
}

}; // namespace XMC4700
