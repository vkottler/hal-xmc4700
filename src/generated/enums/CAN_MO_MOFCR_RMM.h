/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CAN_MO_MOFCR_RMM : uint8_t
{
    disabled_identifier_ide_bit_cont /*!< Remote monitoring is disabled:
                                        Identifier, IDE bit, and DLC of message
                                        object n remain unchanged upon the
                                        reception of a matching Remote Frame.
                                      */
        ,
    enabled_identifier_ide_bit__cont =
        1 /*!< Remote monitoring is enabled: Identifier, IDE bit, and DLC of a
             matching Remote Frame are copied to transmit object n in order to
             monitor incoming Remote Frames. */
};
static_assert(sizeof(CAN_MO_MOFCR_RMM) == 1);

/**
 * Converts CAN_MO_MOFCR_RMM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN_MO_MOFCR_RMM instance)
{
    const char *result = "UNKNOWN CAN_MO_MOFCR_RMM";

    switch (instance)
    {
    case CAN_MO_MOFCR_RMM::disabled_identifier_ide_bit_cont:
        result = "disabled_identifier_ide_bit_cont";
        break;
    case CAN_MO_MOFCR_RMM::enabled_identifier_ide_bit__cont:
        result = "enabled_identifier_ide_bit__cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN_MO_MOFCR_RMM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN_MO_MOFCR_RMM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "disabled_identifier_ide_bit_cont", 32)))
    {
        output = CAN_MO_MOFCR_RMM::disabled_identifier_ide_bit_cont;
    }
    else if ((result = !strncmp(data, "enabled_identifier_ide_bit__cont", 32)))
    {
        output = CAN_MO_MOFCR_RMM::enabled_identifier_ide_bit__cont;
    }

    return result;
}

}; // namespace XMC4700
