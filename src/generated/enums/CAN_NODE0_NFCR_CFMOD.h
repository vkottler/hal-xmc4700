/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CAN_NODE0_NFCR_CFMOD : uint8_t
{
    value1 /*!< Frame Count Mode: The frame counter is incremented upon the
              reception and transmission of frames. */
        ,
    value2 = 1 /*!< Time Stamp Mode: The frame counter is used to count bit
                  times. */
        ,
    value3 = 2 /*!< Bit Timing Mode: The frame counter is used for analysis of
                  the bit timing. */
        ,
    value4 =
        3 /*!< Error Count Mode: The frame counter is used for counting when an
             error frame is received or an error is detected by the node. */
};
static_assert(sizeof(CAN_NODE0_NFCR_CFMOD) == 1);

static constexpr uint16_t CAN_NODE0_NFCR_CFMOD_id = 862;

/**
 * Converts CAN_NODE0_NFCR_CFMOD to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN_NODE0_NFCR_CFMOD instance)
{
    const char *result = "UNKNOWN CAN_NODE0_NFCR_CFMOD";

    switch (instance)
    {
    case CAN_NODE0_NFCR_CFMOD::value1:
        result = "value1";
        break;
    case CAN_NODE0_NFCR_CFMOD::value2:
        result = "value2";
        break;
    case CAN_NODE0_NFCR_CFMOD::value3:
        result = "value3";
        break;
    case CAN_NODE0_NFCR_CFMOD::value4:
        result = "value4";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN_NODE0_NFCR_CFMOD.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN_NODE0_NFCR_CFMOD &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = CAN_NODE0_NFCR_CFMOD::value1;
    }
    else if ((result = !strncmp(data, "value2", 6)))
    {
        output = CAN_NODE0_NFCR_CFMOD::value2;
    }
    else if ((result = !strncmp(data, "value3", 6)))
    {
        output = CAN_NODE0_NFCR_CFMOD::value3;
    }
    else if ((result = !strncmp(data, "value4", 6)))
    {
        output = CAN_NODE0_NFCR_CFMOD::value4;
    }

    return result;
}

}; // namespace XMC4700
