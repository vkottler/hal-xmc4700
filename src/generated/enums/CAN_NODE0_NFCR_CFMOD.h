/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CAN_NODE0_NFCR_CFMOD : uint8_t
{
    frame_count_mode_frame_counter_incremented_up_cont /*!< Frame Count Mode:
                                                          The frame counter is
                                                          incremented upon the
                                                          reception and
                                                          transmission of
                                                          frames. */
        ,
    time_stamp_mode_frame_counter_used_count_bit_times =
        1 /*!< Time Stamp Mode: The frame counter is used to count bit times.
           */
        ,
    bit_timing_mode_frame_counter_used_analysis_b_cont =
        2 /*!< Bit Timing Mode: The frame counter is used for analysis of the
             bit timing. */
        ,
    error_count_mode_frame_counter_used_counting__cont =
        3 /*!< Error Count Mode: The frame counter is used for counting when an
             error frame is received or an error is detected by the node. */
};
static_assert(sizeof(CAN_NODE0_NFCR_CFMOD) == 1);

/**
 * Converts CAN_NODE0_NFCR_CFMOD to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN_NODE0_NFCR_CFMOD instance)
{
    const char *result = "UNKNOWN CAN_NODE0_NFCR_CFMOD";

    switch (instance)
    {
    case CAN_NODE0_NFCR_CFMOD::
        frame_count_mode_frame_counter_incremented_up_cont:
        result = "frame_count_mode_frame_counter_incremented_up_cont";
        break;
    case CAN_NODE0_NFCR_CFMOD::
        time_stamp_mode_frame_counter_used_count_bit_times:
        result = "time_stamp_mode_frame_counter_used_count_bit_times";
        break;
    case CAN_NODE0_NFCR_CFMOD::
        bit_timing_mode_frame_counter_used_analysis_b_cont:
        result = "bit_timing_mode_frame_counter_used_analysis_b_cont";
        break;
    case CAN_NODE0_NFCR_CFMOD::
        error_count_mode_frame_counter_used_counting__cont:
        result = "error_count_mode_frame_counter_used_counting__cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN_NODE0_NFCR_CFMOD.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN_NODE0_NFCR_CFMOD &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "frame_count_mode_frame_counter_incremented_up_cont", 50)))
    {
        output = CAN_NODE0_NFCR_CFMOD::
            frame_count_mode_frame_counter_incremented_up_cont;
    }
    else if ((result = !strncmp(
                  data, "time_stamp_mode_frame_counter_used_count_bit_times",
                  50)))
    {
        output = CAN_NODE0_NFCR_CFMOD::
            time_stamp_mode_frame_counter_used_count_bit_times;
    }
    else if ((result = !strncmp(
                  data, "bit_timing_mode_frame_counter_used_analysis_b_cont",
                  50)))
    {
        output = CAN_NODE0_NFCR_CFMOD::
            bit_timing_mode_frame_counter_used_analysis_b_cont;
    }
    else if ((result = !strncmp(
                  data, "error_count_mode_frame_counter_used_counting__cont",
                  50)))
    {
        output = CAN_NODE0_NFCR_CFMOD::
            error_count_mode_frame_counter_used_counting__cont;
    }

    return result;
}

}; // namespace XMC4700
