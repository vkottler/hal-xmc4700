/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_PCR_IICMode_STIM : uint8_t
{
    _10_time_quanta_timing_adapted_standard_mode_1_cont /*!< A symbol contains
                                                           10 time quanta. The
                                                           timing is adapted
                                                           for standard mode
                                                           (100 kBaud). */
        ,
    _25_time_quanta_timing_adapted_fast_mode_400_kbaud =
        1 /*!< A symbol contains 25 time quanta. The timing is adapted for fast
             mode (400 kBaud). */
};
static_assert(sizeof(USIC0_CH0_PCR_IICMode_STIM) == 1);

/**
 * Converts USIC0_CH0_PCR_IICMode_STIM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_PCR_IICMode_STIM instance)
{
    const char *result = "UNKNOWN USIC0_CH0_PCR_IICMode_STIM";

    switch (instance)
    {
    case USIC0_CH0_PCR_IICMode_STIM::
        _10_time_quanta_timing_adapted_standard_mode_1_cont:
        result = "_10_time_quanta_timing_adapted_standard_mode_1_cont";
        break;
    case USIC0_CH0_PCR_IICMode_STIM::
        _25_time_quanta_timing_adapted_fast_mode_400_kbaud:
        result = "_25_time_quanta_timing_adapted_fast_mode_400_kbaud";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_PCR_IICMode_STIM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_PCR_IICMode_STIM &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "_10_time_quanta_timing_adapted_standard_mode_1_cont", 51)))
    {
        output = USIC0_CH0_PCR_IICMode_STIM::
            _10_time_quanta_timing_adapted_standard_mode_1_cont;
    }
    else if ((result = !strncmp(
                  data, "_25_time_quanta_timing_adapted_fast_mode_400_kbaud",
                  50)))
    {
        output = USIC0_CH0_PCR_IICMode_STIM::
            _25_time_quanta_timing_adapted_fast_mode_400_kbaud;
    }

    return result;
}

}; // namespace XMC4700
