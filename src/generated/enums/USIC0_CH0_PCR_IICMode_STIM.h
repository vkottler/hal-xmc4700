/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_PCR_IICMode_STIM : uint8_t
{
    10_time_quanta_timing_adapted_cont /*!< A symbol contains 10 time quanta.
                                          The timing is adapted for standard
                                          mode (100 kBaud). */
        ,
    25_time_quanta_timing_adapted_cont =
        1 /*!< A symbol contains 25 time quanta. The timing is adapted for fast
             mode (400 kBaud). */
};
static_assert(sizeof(USIC0_CH0_PCR_IICMode_STIM) == 1);

/**
 * Converts USIC0_CH0_PCR_IICMode_STIM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_PCR_IICMode_STIM instance)
{
    const char *result = "UNKNOWN USIC0_CH0_PCR_IICMode_STIM";

    switch (instance)
    {
    case USIC0_CH0_PCR_IICMode_STIM::10_time_quanta_timing_adapted_cont:
        result = "10_time_quanta_timing_adapted_cont";
        break;
    case USIC0_CH0_PCR_IICMode_STIM::25_time_quanta_timing_adapted_cont:
        result = "25_time_quanta_timing_adapted_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_PCR_IICMode_STIM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_PCR_IICMode_STIM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "10_time_quanta_timing_adapted_cont", 34)))
    {
        output =
            USIC0_CH0_PCR_IICMode_STIM::10_time_quanta_timing_adapted_cont;
    }
    else if ((result =
                  !strncmp(data, "25_time_quanta_timing_adapted_cont", 34)))
    {
        output =
            USIC0_CH0_PCR_IICMode_STIM::25_time_quanta_timing_adapted_cont;
    }

    return result;
}

}; // namespace XMC4700
