/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_RBCTR_SRBTM : uint8_t
{
    0_while_trbsrsrbt1_standard_rece_cont /*!< Trigger mode 0: While
                                             TRBSR.SRBT=1, a standard receive
                                             buffer event will be generated
                                             whenever there is a new data
                                             received or data read out
                                             (depending on RBCTR.LOF setting).
                                             SRBT is cleared when
                                             TRBSR.RBFLVL=RBCTR.LIMIT. */
        ,
    1_while_trbsrsrbt1_standard_rece_cont =
        1 /*!< Trigger mode 1: While TRBSR.SRBT=1, a standard receive buffer
             event will be generated whenever there is a new data received or
             data read out (depending on RBCTR.LOF setting). SRBT is cleared
             when TRBSR.RBFLVL=0. */
};
static_assert(sizeof(USIC0_CH0_RBCTR_SRBTM) == 1);

/**
 * Converts USIC0_CH0_RBCTR_SRBTM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_RBCTR_SRBTM instance)
{
    const char *result = "UNKNOWN USIC0_CH0_RBCTR_SRBTM";

    switch (instance)
    {
    case USIC0_CH0_RBCTR_SRBTM::0_while_trbsrsrbt1_standard_rece_cont:
        result = "0_while_trbsrsrbt1_standard_rece_cont";
        break;
    case USIC0_CH0_RBCTR_SRBTM::1_while_trbsrsrbt1_standard_rece_cont:
        result = "1_while_trbsrsrbt1_standard_rece_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_RBCTR_SRBTM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_RBCTR_SRBTM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "0_while_trbsrsrbt1_standard_rece_cont", 37)))
    {
        output = USIC0_CH0_RBCTR_SRBTM::0_while_trbsrsrbt1_standard_rece_cont;
    }
    else if ((result =
                  !strncmp(data, "1_while_trbsrsrbt1_standard_rece_cont", 37)))
    {
        output = USIC0_CH0_RBCTR_SRBTM::1_while_trbsrsrbt1_standard_rece_cont;
    }

    return result;
}

}; // namespace XMC4700
