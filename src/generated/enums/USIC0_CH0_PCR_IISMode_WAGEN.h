/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_PCR_IISMode_WAGEN : uint8_t
{
    slave_generation_word_address_cont /*!< The IIS can be used as slave. The
                                          generation of the word address signal
                                          is disabled. The output signal WA is
                                          0. The MCLKO signal generation
                                          depends on PCR.MCLK. */
        ,
    master_generation_word_addres_cont =
        1 /*!< The IIS can be used as master. The generation of the word
             address signal is enabled. The signal starts with a 0 after being
             enabled. The generation of MCLK is enabled, independent of
             PCR.MCLK. After clearing WAGEN, the USIC module stops the
             generation of the WA signal within the next 4 WA periods. */
};
static_assert(sizeof(USIC0_CH0_PCR_IISMode_WAGEN) == 1);

/**
 * Converts USIC0_CH0_PCR_IISMode_WAGEN to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_PCR_IISMode_WAGEN instance)
{
    const char *result = "UNKNOWN USIC0_CH0_PCR_IISMode_WAGEN";

    switch (instance)
    {
    case USIC0_CH0_PCR_IISMode_WAGEN::slave_generation_word_address_cont:
        result = "slave_generation_word_address_cont";
        break;
    case USIC0_CH0_PCR_IISMode_WAGEN::master_generation_word_addres_cont:
        result = "master_generation_word_addres_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_PCR_IISMode_WAGEN.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_PCR_IISMode_WAGEN &output)
{
    bool result = false;

    if ((result = !strncmp(data, "slave_generation_word_address_cont", 34)))
    {
        output =
            USIC0_CH0_PCR_IISMode_WAGEN::slave_generation_word_address_cont;
    }
    else if ((result =
                  !strncmp(data, "master_generation_word_addres_cont", 34)))
    {
        output =
            USIC0_CH0_PCR_IISMode_WAGEN::master_generation_word_addres_cont;
    }

    return result;
}

}; // namespace XMC4700
