/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class DAC_DAC0CFG1_TRIGMOD : uint8_t
{
    internal_trigger_integer_divided_clock_see_fr_cont /*!< internal Trigger
                                                          (integer divided
                                                          clock - see FREQ
                                                          parameter) */
        ,
    external_trigger_preselected_trigger_by_trigs_cont =
        1 /*!< external Trigger (preselected trigger by TRIGSEL parameter) */,
    software_trigger_see_swtrig_parameter =
        2 /*!< software Trigger (see SWTRIG parameter) */
};
static_assert(sizeof(DAC_DAC0CFG1_TRIGMOD) == 1);

/**
 * Converts DAC_DAC0CFG1_TRIGMOD to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(DAC_DAC0CFG1_TRIGMOD instance)
{
    const char *result = "UNKNOWN DAC_DAC0CFG1_TRIGMOD";

    switch (instance)
    {
    case DAC_DAC0CFG1_TRIGMOD::
        internal_trigger_integer_divided_clock_see_fr_cont:
        result = "internal_trigger_integer_divided_clock_see_fr_cont";
        break;
    case DAC_DAC0CFG1_TRIGMOD::
        external_trigger_preselected_trigger_by_trigs_cont:
        result = "external_trigger_preselected_trigger_by_trigs_cont";
        break;
    case DAC_DAC0CFG1_TRIGMOD::software_trigger_see_swtrig_parameter:
        result = "software_trigger_see_swtrig_parameter";
        break;
    }

    return result;
}

/**
 * Converts a C string to DAC_DAC0CFG1_TRIGMOD.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, DAC_DAC0CFG1_TRIGMOD &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "internal_trigger_integer_divided_clock_see_fr_cont", 50)))
    {
        output = DAC_DAC0CFG1_TRIGMOD::
            internal_trigger_integer_divided_clock_see_fr_cont;
    }
    else if ((result = !strncmp(
                  data, "external_trigger_preselected_trigger_by_trigs_cont",
                  50)))
    {
        output = DAC_DAC0CFG1_TRIGMOD::
            external_trigger_preselected_trigger_by_trigs_cont;
    }
    else if ((result =
                  !strncmp(data, "software_trigger_see_swtrig_parameter", 37)))
    {
        output = DAC_DAC0CFG1_TRIGMOD::software_trigger_see_swtrig_parameter;
    }

    return result;
}

}; // namespace XMC4700
