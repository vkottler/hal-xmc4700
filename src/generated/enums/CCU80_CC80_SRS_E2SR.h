/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU80_CC80_SRS_E2SR : uint8_t
{
    8ysr0 /*!< Forward to CC8ySR0 */,
    vysr1 = 1 /*!< Forward to CCvySR1 */,
    8ysr2 = 2 /*!< Forward to CC8ySR2 */,
    8ysr3 = 3 /*!< Forward to CC8ySR3 */
};
static_assert(sizeof(CCU80_CC80_SRS_E2SR) == 1);

/**
 * Converts CCU80_CC80_SRS_E2SR to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU80_CC80_SRS_E2SR instance)
{
    const char *result = "UNKNOWN CCU80_CC80_SRS_E2SR";

    switch (instance)
    {
    case CCU80_CC80_SRS_E2SR::8ysr0:
        result = "8ysr0";
        break;
    case CCU80_CC80_SRS_E2SR::vysr1:
        result = "vysr1";
        break;
    case CCU80_CC80_SRS_E2SR::8ysr2:
        result = "8ysr2";
        break;
    case CCU80_CC80_SRS_E2SR::8ysr3:
        result = "8ysr3";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU80_CC80_SRS_E2SR.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU80_CC80_SRS_E2SR &output)
{
    bool result = false;

    if ((result = !strncmp(data, "8ysr0", 5)))
    {
        output = CCU80_CC80_SRS_E2SR::8ysr0;
    }
    else if ((result = !strncmp(data, "vysr1", 5)))
    {
        output = CCU80_CC80_SRS_E2SR::vysr1;
    }
    else if ((result = !strncmp(data, "8ysr2", 5)))
    {
        output = CCU80_CC80_SRS_E2SR::8ysr2;
    }
    else if ((result = !strncmp(data, "8ysr3", 5)))
    {
        output = CCU80_CC80_SRS_E2SR::8ysr3;
    }

    return result;
}

}; // namespace XMC4700
