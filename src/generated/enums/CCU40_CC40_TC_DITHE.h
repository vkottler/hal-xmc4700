/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU40_CC40_TC_DITHE : uint8_t
{
    disabled /*!< Dither is disabled */,
    applied_period = 1 /*!< Dither is applied to the Period */,
    applied_compare = 2 /*!< Dither is applied to the Compare */,
    applied_period_compare =
        3 /*!< Dither is applied to the Period and Compare */
};
static_assert(sizeof(CCU40_CC40_TC_DITHE) == 1);

/**
 * Converts CCU40_CC40_TC_DITHE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU40_CC40_TC_DITHE instance)
{
    const char *result = "UNKNOWN CCU40_CC40_TC_DITHE";

    switch (instance)
    {
    case CCU40_CC40_TC_DITHE::disabled:
        result = "disabled";
        break;
    case CCU40_CC40_TC_DITHE::applied_period:
        result = "applied_period";
        break;
    case CCU40_CC40_TC_DITHE::applied_compare:
        result = "applied_compare";
        break;
    case CCU40_CC40_TC_DITHE::applied_period_compare:
        result = "applied_period_compare";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU40_CC40_TC_DITHE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU40_CC40_TC_DITHE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "disabled", 8)))
    {
        output = CCU40_CC40_TC_DITHE::disabled;
    }
    else if ((result = !strncmp(data, "applied_period", 14)))
    {
        output = CCU40_CC40_TC_DITHE::applied_period;
    }
    else if ((result = !strncmp(data, "applied_compare", 15)))
    {
        output = CCU40_CC40_TC_DITHE::applied_compare;
    }
    else if ((result = !strncmp(data, "applied_period_compare", 22)))
    {
        output = CCU40_CC40_TC_DITHE::applied_period_compare;
    }

    return result;
}

}; // namespace XMC4700
