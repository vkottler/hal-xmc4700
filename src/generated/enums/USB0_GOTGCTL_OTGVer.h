/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_GOTGCTL_OTGVer : uint8_t
{
    13_this_version_core_supports_dat_cont /*!< OTG Version 1.3. In this
                                              version the core supports Data
                                              line pulsing and VBus pulsing for
                                              SRP. */
        ,
    20_this_version_core_supports_onl_cont =
        1 /*!< OTG Version 2.0. In this version the core supports only Data
             line pulsing for SRP. */
};
static_assert(sizeof(USB0_GOTGCTL_OTGVer) == 1);

/**
 * Converts USB0_GOTGCTL_OTGVer to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_GOTGCTL_OTGVer instance)
{
    const char *result = "UNKNOWN USB0_GOTGCTL_OTGVer";

    switch (instance)
    {
    case USB0_GOTGCTL_OTGVer::13_this_version_core_supports_dat_cont:
        result = "13_this_version_core_supports_dat_cont";
        break;
    case USB0_GOTGCTL_OTGVer::20_this_version_core_supports_onl_cont:
        result = "20_this_version_core_supports_onl_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_GOTGCTL_OTGVer.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_GOTGCTL_OTGVer &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "13_this_version_core_supports_dat_cont", 38)))
    {
        output = USB0_GOTGCTL_OTGVer::13_this_version_core_supports_dat_cont;
    }
    else if ((result = !strncmp(data, "20_this_version_core_supports_onl_cont",
                                38)))
    {
        output = USB0_GOTGCTL_OTGVer::20_this_version_core_supports_onl_cont;
    }

    return result;
}

}; // namespace XMC4700
