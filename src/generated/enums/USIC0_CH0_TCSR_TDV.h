/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_TCSR_TDV : uint8_t
{
    not_valid_transmission /*!< The data word in TBUF is not valid for
                              transmission. */
        ,
    valid_transmission_transmission_start_possibl_cont =
        1 /*!< The data word in TBUF is valid for transmission and a
             transmission start is possible. New data should not be written to
             a TBUFx input location while TDV = 1. */
};
static_assert(sizeof(USIC0_CH0_TCSR_TDV) == 1);

/**
 * Converts USIC0_CH0_TCSR_TDV to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_TCSR_TDV instance)
{
    const char *result = "UNKNOWN USIC0_CH0_TCSR_TDV";

    switch (instance)
    {
    case USIC0_CH0_TCSR_TDV::not_valid_transmission:
        result = "not_valid_transmission";
        break;
    case USIC0_CH0_TCSR_TDV::
        valid_transmission_transmission_start_possibl_cont:
        result = "valid_transmission_transmission_start_possibl_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_TCSR_TDV.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_TCSR_TDV &output)
{
    bool result = false;

    if ((result = !strncmp(data, "not_valid_transmission", 22)))
    {
        output = USIC0_CH0_TCSR_TDV::not_valid_transmission;
    }
    else if ((result = !strncmp(
                  data, "valid_transmission_transmission_start_possibl_cont",
                  50)))
    {
        output = USIC0_CH0_TCSR_TDV::
            valid_transmission_transmission_start_possibl_cont;
    }

    return result;
}

}; // namespace XMC4700
