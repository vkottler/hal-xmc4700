/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum : uint8_t
{
    even_frame /*!< Even frame */,
    odd_rame = 1 /*!< Odd rame */
};
static_assert(sizeof(USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum) == 1);

/**
 * Converts USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum instance)
{
    const char *result = "UNKNOWN USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum";

    switch (instance)
    {
    case USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum::even_frame:
        result = "even_frame";
        break;
    case USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum::odd_rame:
        result = "odd_rame";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum &output)
{
    bool result = false;

    if ((result = !strncmp(data, "even_frame", 10)))
    {
        output = USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum::even_frame;
    }
    else if ((result = !strncmp(data, "odd_rame", 8)))
    {
        output = USB0_EP1_DIEPCTL_ISOCONT_EO_FrNum::odd_rame;
    }

    return result;
}

}; // namespace XMC4700
