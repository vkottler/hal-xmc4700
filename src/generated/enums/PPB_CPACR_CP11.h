/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_CPACR_CP11 : uint8_t
{
    access_denied_any_attempted_access_generates__cont /*!< Access denied. Any
                                                          attempted access
                                                          generates a NOCP
                                                          UsageFault. */
        ,
    privileged_access_only_an_unprivileged_access_cont =
        1 /*!< Privileged access only. An unprivileged access generates a NOCP
             fault. */
        ,
    full_access = 3 /*!< Full access. */
};
static_assert(sizeof(PPB_CPACR_CP11) == 1);

/**
 * Converts PPB_CPACR_CP11 to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_CPACR_CP11 instance)
{
    const char *result = "UNKNOWN PPB_CPACR_CP11";

    switch (instance)
    {
    case PPB_CPACR_CP11::access_denied_any_attempted_access_generates__cont:
        result = "access_denied_any_attempted_access_generates__cont";
        break;
    case PPB_CPACR_CP11::privileged_access_only_an_unprivileged_access_cont:
        result = "privileged_access_only_an_unprivileged_access_cont";
        break;
    case PPB_CPACR_CP11::full_access:
        result = "full_access";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_CPACR_CP11.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_CPACR_CP11 &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "access_denied_any_attempted_access_generates__cont", 50)))
    {
        output =
            PPB_CPACR_CP11::access_denied_any_attempted_access_generates__cont;
    }
    else if ((result = !strncmp(
                  data, "privileged_access_only_an_unprivileged_access_cont",
                  50)))
    {
        output =
            PPB_CPACR_CP11::privileged_access_only_an_unprivileged_access_cont;
    }
    else if ((result = !strncmp(data, "full_access", 11)))
    {
        output = PPB_CPACR_CP11::full_access;
    }

    return result;
}

}; // namespace XMC4700
