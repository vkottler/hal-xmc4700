/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU80_GCTRL_PRBC : uint8_t
{
    sw_only /*!< SW only */,
    gstatthe_register_contains_status_prescaler_e_cont =
        1 /*!< GSTATThe register contains the status of the prescaler and each
             timer slice (idle mode or running)..PRB and prescaler registers
             are cleared when the Run Bit of CC80 is cleared. */
        ,
    gstatthe_register_contains_status_prescaler_e_cont_ =
        2 /*!< GSTATThe register contains the status of the prescaler and each
             timer slice (idle mode or running)..PRB and prescaler registers
             are cleared when the Run Bit of CC81 is cleared. */
        ,
    gstatthe_register_contains_status_prescaler_e_cont__ =
        3 /*!< GSTATThe register contains the status of the prescaler and each
             timer slice (idle mode or running)..PRB and prescaler registers
             are cleared when the Run Bit of CC82 is cleared. */
        ,
    gstatthe_register_contains_status_prescaler_e_cont___ =
        4 /*!< GSTATThe register contains the status of the prescaler and each
             timer slice (idle mode or running)..PRB and prescaler registers
             are cleared when the Run Bit of CC83 is cleared. */
};
static_assert(sizeof(CCU80_GCTRL_PRBC) == 1);

/**
 * Converts CCU80_GCTRL_PRBC to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU80_GCTRL_PRBC instance)
{
    const char *result = "UNKNOWN CCU80_GCTRL_PRBC";

    switch (instance)
    {
    case CCU80_GCTRL_PRBC::sw_only:
        result = "sw_only";
        break;
    case CCU80_GCTRL_PRBC::gstatthe_register_contains_status_prescaler_e_cont:
        result = "gstatthe_register_contains_status_prescaler_e_cont";
        break;
    case CCU80_GCTRL_PRBC::gstatthe_register_contains_status_prescaler_e_cont_:
        result = "gstatthe_register_contains_status_prescaler_e_cont_";
        break;
    case CCU80_GCTRL_PRBC::
        gstatthe_register_contains_status_prescaler_e_cont__:
        result = "gstatthe_register_contains_status_prescaler_e_cont__";
        break;
    case CCU80_GCTRL_PRBC::
        gstatthe_register_contains_status_prescaler_e_cont___:
        result = "gstatthe_register_contains_status_prescaler_e_cont___";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU80_GCTRL_PRBC.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU80_GCTRL_PRBC &output)
{
    bool result = false;

    if ((result = !strncmp(data, "sw_only", 7)))
    {
        output = CCU80_GCTRL_PRBC::sw_only;
    }
    else if ((result = !strncmp(
                  data, "gstatthe_register_contains_status_prescaler_e_cont",
                  50)))
    {
        output = CCU80_GCTRL_PRBC::
            gstatthe_register_contains_status_prescaler_e_cont;
    }
    else if ((result = !strncmp(
                  data, "gstatthe_register_contains_status_prescaler_e_cont_",
                  51)))
    {
        output = CCU80_GCTRL_PRBC::
            gstatthe_register_contains_status_prescaler_e_cont_;
    }
    else if ((result = !strncmp(
                  data, "gstatthe_register_contains_status_prescaler_e_cont__",
                  52)))
    {
        output = CCU80_GCTRL_PRBC::
            gstatthe_register_contains_status_prescaler_e_cont__;
    }
    else if ((result = !strncmp(
                  data,
                  "gstatthe_register_contains_status_prescaler_e_cont___",
                  53)))
    {
        output = CCU80_GCTRL_PRBC::
            gstatthe_register_contains_status_prescaler_e_cont___;
    }

    return result;
}

}; // namespace XMC4700
