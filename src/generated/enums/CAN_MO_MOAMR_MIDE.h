/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CAN_MO_MOAMR_MIDE : uint8_t
{
    accepts_reception_both_stand_cont /*!< Message object n accepts the
                                         reception of both, standard and
                                         extended frames. */
        ,
    receives_frames_only_with_ma_cont =
        1 /*!< Message object n receives frames only with matching IDE bit. */
};
static_assert(sizeof(CAN_MO_MOAMR_MIDE) == 1);

/**
 * Converts CAN_MO_MOAMR_MIDE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN_MO_MOAMR_MIDE instance)
{
    const char *result = "UNKNOWN CAN_MO_MOAMR_MIDE";

    switch (instance)
    {
    case CAN_MO_MOAMR_MIDE::accepts_reception_both_stand_cont:
        result = "accepts_reception_both_stand_cont";
        break;
    case CAN_MO_MOAMR_MIDE::receives_frames_only_with_ma_cont:
        result = "receives_frames_only_with_ma_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN_MO_MOAMR_MIDE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN_MO_MOAMR_MIDE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "accepts_reception_both_stand_cont", 33)))
    {
        output = CAN_MO_MOAMR_MIDE::accepts_reception_both_stand_cont;
    }
    else if ((result =
                  !strncmp(data, "receives_frames_only_with_ma_cont", 33)))
    {
        output = CAN_MO_MOAMR_MIDE::receives_frames_only_with_ma_cont;
    }

    return result;
}

}; // namespace XMC4700
