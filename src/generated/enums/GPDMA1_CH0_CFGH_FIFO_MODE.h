/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class GPDMA1_CH0_CFGH_FIFO_MODE : uint8_t
{
    spacedata_available_single_ahb_transfer_speci_cont /*!< Space/data
                                                          available for single
                                                          AHB transfer of the
                                                          specified transfer
                                                          width. */
        ,
    data_available_greater_than_or_equal_half_fif_cont =
        1 /*!< Data available is greater than or equal to half the FIFO depth
             for destination transfers and space available is greater than half
             the fifo depth for source transfers. The exceptions are at the end
             of a burst transaction request or at the end of a block transfer.
           */
};
static_assert(sizeof(GPDMA1_CH0_CFGH_FIFO_MODE) == 1);

/**
 * Converts GPDMA1_CH0_CFGH_FIFO_MODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(GPDMA1_CH0_CFGH_FIFO_MODE instance)
{
    const char *result = "UNKNOWN GPDMA1_CH0_CFGH_FIFO_MODE";

    switch (instance)
    {
    case GPDMA1_CH0_CFGH_FIFO_MODE::
        spacedata_available_single_ahb_transfer_speci_cont:
        result = "spacedata_available_single_ahb_transfer_speci_cont";
        break;
    case GPDMA1_CH0_CFGH_FIFO_MODE::
        data_available_greater_than_or_equal_half_fif_cont:
        result = "data_available_greater_than_or_equal_half_fif_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to GPDMA1_CH0_CFGH_FIFO_MODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, GPDMA1_CH0_CFGH_FIFO_MODE &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "spacedata_available_single_ahb_transfer_speci_cont", 50)))
    {
        output = GPDMA1_CH0_CFGH_FIFO_MODE::
            spacedata_available_single_ahb_transfer_speci_cont;
    }
    else if ((result = !strncmp(
                  data, "data_available_greater_than_or_equal_half_fif_cont",
                  50)))
    {
        output = GPDMA1_CH0_CFGH_FIFO_MODE::
            data_available_greater_than_or_equal_half_fif_cont;
    }

    return result;
}

}; // namespace XMC4700
