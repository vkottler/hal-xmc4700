/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU80_CC80_TC_TRPSE : uint8_t
{
    isnt_synchronized_with_pwm_signal /*!< Exiting from TRAP state isn't
                                         synchronized with the PWM signal */
        ,
    synchronized_with_pwm_signal =
        1 /*!< Exiting from TRAP state is synchronized with the PWM signal */
};
static_assert(sizeof(CCU80_CC80_TC_TRPSE) == 1);

/**
 * Converts CCU80_CC80_TC_TRPSE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU80_CC80_TC_TRPSE instance)
{
    const char *result = "UNKNOWN CCU80_CC80_TC_TRPSE";

    switch (instance)
    {
    case CCU80_CC80_TC_TRPSE::isnt_synchronized_with_pwm_signal:
        result = "isnt_synchronized_with_pwm_signal";
        break;
    case CCU80_CC80_TC_TRPSE::synchronized_with_pwm_signal:
        result = "synchronized_with_pwm_signal";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU80_CC80_TC_TRPSE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU80_CC80_TC_TRPSE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "isnt_synchronized_with_pwm_signal", 33)))
    {
        output = CCU80_CC80_TC_TRPSE::isnt_synchronized_with_pwm_signal;
    }
    else if ((result = !strncmp(data, "synchronized_with_pwm_signal", 28)))
    {
        output = CCU80_CC80_TC_TRPSE::synchronized_with_pwm_signal;
    }

    return result;
}

}; // namespace XMC4700
