/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_FPCCR_MMRDY : uint8_t
{
    disabled_or_priority_did_not_permit_cont /*!< MemManage is disabled or
                                                priority did not permit setting
                                                the MemManage handler to the
                                                pending state when the
                                                floating-point stack frame was
                                                allocated. */
        ,
    enabled_priority_permitted_setting__cont =
        1 /*!< MemManage is enabled and priority permitted setting the
             MemManage handler to the pending state when the floating-point
             stack frame was allocated. */
};
static_assert(sizeof(PPB_FPCCR_MMRDY) == 1);

/**
 * Converts PPB_FPCCR_MMRDY to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_FPCCR_MMRDY instance)
{
    const char *result = "UNKNOWN PPB_FPCCR_MMRDY";

    switch (instance)
    {
    case PPB_FPCCR_MMRDY::disabled_or_priority_did_not_permit_cont:
        result = "disabled_or_priority_did_not_permit_cont";
        break;
    case PPB_FPCCR_MMRDY::enabled_priority_permitted_setting__cont:
        result = "enabled_priority_permitted_setting__cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_FPCCR_MMRDY.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_FPCCR_MMRDY &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "disabled_or_priority_did_not_permit_cont", 40)))
    {
        output = PPB_FPCCR_MMRDY::disabled_or_priority_did_not_permit_cont;
    }
    else if ((result = !strncmp(
                  data, "enabled_priority_permitted_setting__cont", 40)))
    {
        output = PPB_FPCCR_MMRDY::enabled_priority_permitted_setting__cont;
    }

    return result;
}

}; // namespace XMC4700
