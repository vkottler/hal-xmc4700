/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_CH0_HCCHAR_EPType : uint8_t
{
    control /*!< Control */,
    isochronous = 1 /*!< Isochronous */,
    bulk = 2 /*!< Bulk */,
    interrupt = 3 /*!< Interrupt */
};
static_assert(sizeof(USB0_CH0_HCCHAR_EPType) == 1);

/**
 * Converts USB0_CH0_HCCHAR_EPType to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_CH0_HCCHAR_EPType instance)
{
    const char *result = "UNKNOWN USB0_CH0_HCCHAR_EPType";

    switch (instance)
    {
    case USB0_CH0_HCCHAR_EPType::control:
        result = "control";
        break;
    case USB0_CH0_HCCHAR_EPType::isochronous:
        result = "isochronous";
        break;
    case USB0_CH0_HCCHAR_EPType::bulk:
        result = "bulk";
        break;
    case USB0_CH0_HCCHAR_EPType::interrupt:
        result = "interrupt";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_CH0_HCCHAR_EPType.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_CH0_HCCHAR_EPType &output)
{
    bool result = false;

    if ((result = !strncmp(data, "control", 7)))
    {
        output = USB0_CH0_HCCHAR_EPType::control;
    }
    else if ((result = !strncmp(data, "isochronous", 11)))
    {
        output = USB0_CH0_HCCHAR_EPType::isochronous;
    }
    else if ((result = !strncmp(data, "bulk", 4)))
    {
        output = USB0_CH0_HCCHAR_EPType::bulk;
    }
    else if ((result = !strncmp(data, "interrupt", 9)))
    {
        output = USB0_CH0_HCCHAR_EPType::interrupt;
    }

    return result;
}

}; // namespace XMC4700
