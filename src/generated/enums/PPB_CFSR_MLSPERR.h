/**
 * \file
 * \brief Generated by ifgen (2.6.2).
 * {
 *   "enum": {
 *     "value1": {
 *       "description": "No MemManage fault occurred during floating-point lazy state preservation",
 *       "value": 0
 *     },
 *     "value2": {
 *       "description": "A MemManage fault occurred during floating-point lazy state preservation",
 *       "value": 1
 *     }
 *   },
 *   "unit_test": false,
 *   "json": false,
 *   "use_map": false,
 *   "underlying": "uint8_t",
 *   "namespace": [],
 *   "json_indent": null
 * }
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_CFSR_MLSPERR : uint8_t
{
    value1 /*!< No MemManage fault occurred during floating-point lazy state preservation */,
    value2 = 1 /*!< A MemManage fault occurred during floating-point lazy state preservation */
};
static_assert(sizeof(PPB_CFSR_MLSPERR) == 1);

static constexpr uint16_t PPB_CFSR_MLSPERR_id = 2588;

/**
 * Converts PPB_CFSR_MLSPERR to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_CFSR_MLSPERR instance)
{
    const char *result = "UNKNOWN PPB_CFSR_MLSPERR";

    switch (instance)
    {
    case PPB_CFSR_MLSPERR::value1:
        result = "value1";
        break;
    case PPB_CFSR_MLSPERR::value2:
        result = "value2";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_CFSR_MLSPERR.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_CFSR_MLSPERR &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = PPB_CFSR_MLSPERR::value1;
    }
    else if ((result = !strncmp(data, "value2", 6)))
    {
        output = PPB_CFSR_MLSPERR::value2;
    }

    return result;
}

}; // namespace XMC4700
