/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class ERU_EXOCON_GP : uint8_t
{
    value1 /*!< ERU_GOUTy is always disabled and ERU_IOUTy can not be activated
            */
        ,
    value2 = 1 /*!< ERU_GOUTy is always enabled and ERU_IOUTy becomes activated
                  with each activation of ERU_TOUTy */
        ,
    value3 = 2 /*!< ERU_GOUTy is equal to ERU_PDOUTy and ERU_IOUTy becomes
                  activated with an activation of ERU_TOUTy while the desired
                  pattern is detected (pattern match PDR = 1) */
        ,
    value4 = 3 /*!< ERU_GOUTy is inverted to ERU_PDOUTy and ERU_IOUTy becomes
                  activated with an activation of ERU_TOUTy while the desired
                  pattern is not detected (pattern miss PDR = 0) */
};
static_assert(sizeof(ERU_EXOCON_GP) == 1);

static constexpr uint16_t ERU_EXOCON_GP_id = 473;

/**
 * Converts ERU_EXOCON_GP to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(ERU_EXOCON_GP instance)
{
    const char *result = "UNKNOWN ERU_EXOCON_GP";

    switch (instance)
    {
    case ERU_EXOCON_GP::value1:
        result = "value1";
        break;
    case ERU_EXOCON_GP::value2:
        result = "value2";
        break;
    case ERU_EXOCON_GP::value3:
        result = "value3";
        break;
    case ERU_EXOCON_GP::value4:
        result = "value4";
        break;
    }

    return result;
}

/**
 * Converts a C string to ERU_EXOCON_GP.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, ERU_EXOCON_GP &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = ERU_EXOCON_GP::value1;
    }
    else if ((result = !strncmp(data, "value2", 6)))
    {
        output = ERU_EXOCON_GP::value2;
    }
    else if ((result = !strncmp(data, "value3", 6)))
    {
        output = ERU_EXOCON_GP::value3;
    }
    else if ((result = !strncmp(data, "value4", 6)))
    {
        output = ERU_EXOCON_GP::value4;
    }

    return result;
}

}; // namespace XMC4700
