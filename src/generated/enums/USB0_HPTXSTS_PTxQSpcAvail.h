/**
 * \file
 * \brief Generated by ifgen (3.2.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_HPTXSTS_PTxQSpcAvail : uint8_t
{
    periodic_transmit_request_queue_full /*!< Periodic Transmit Request Queue
                                            is full */
        ,
    _1_location_available = 1 /*!< 1 location available */,
    _2_locations_available = 2 /*!< 2 locations available */
};
static_assert(sizeof(USB0_HPTXSTS_PTxQSpcAvail) == 1);

/**
 * Converts USB0_HPTXSTS_PTxQSpcAvail to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_HPTXSTS_PTxQSpcAvail instance)
{
    const char *result = "UNKNOWN USB0_HPTXSTS_PTxQSpcAvail";

    switch (instance)
    {
    case USB0_HPTXSTS_PTxQSpcAvail::periodic_transmit_request_queue_full:
        result = "periodic_transmit_request_queue_full";
        break;
    case USB0_HPTXSTS_PTxQSpcAvail::_1_location_available:
        result = "_1_location_available";
        break;
    case USB0_HPTXSTS_PTxQSpcAvail::_2_locations_available:
        result = "_2_locations_available";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_HPTXSTS_PTxQSpcAvail.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_HPTXSTS_PTxQSpcAvail &output)
{
    bool result = false;

    if ((result = !strncmp(data, "periodic_transmit_request_queue_full", 36)))
    {
        output =
            USB0_HPTXSTS_PTxQSpcAvail::periodic_transmit_request_queue_full;
    }
    else if ((result = !strncmp(data, "_1_location_available", 21)))
    {
        output = USB0_HPTXSTS_PTxQSpcAvail::_1_location_available;
    }
    else if ((result = !strncmp(data, "_2_locations_available", 22)))
    {
        output = USB0_HPTXSTS_PTxQSpcAvail::_2_locations_available;
    }

    return result;
}

}; // namespace XMC4700
