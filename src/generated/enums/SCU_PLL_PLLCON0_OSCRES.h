/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class SCU_PLL_PLLCON0_OSCRES : uint8_t
{
    not_cleared_remains_active /*!< The Oscillator Watchdog of the PLL is not
                                  cleared and remains active */
        ,
    cleared_restarted =
        1 /*!< The Oscillator Watchdog of the PLL is cleared and restarted */
};
static_assert(sizeof(SCU_PLL_PLLCON0_OSCRES) == 1);

/**
 * Converts SCU_PLL_PLLCON0_OSCRES to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SCU_PLL_PLLCON0_OSCRES instance)
{
    const char *result = "UNKNOWN SCU_PLL_PLLCON0_OSCRES";

    switch (instance)
    {
    case SCU_PLL_PLLCON0_OSCRES::not_cleared_remains_active:
        result = "not_cleared_remains_active";
        break;
    case SCU_PLL_PLLCON0_OSCRES::cleared_restarted:
        result = "cleared_restarted";
        break;
    }

    return result;
}

/**
 * Converts a C string to SCU_PLL_PLLCON0_OSCRES.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, SCU_PLL_PLLCON0_OSCRES &output)
{
    bool result = false;

    if ((result = !strncmp(data, "not_cleared_remains_active", 26)))
    {
        output = SCU_PLL_PLLCON0_OSCRES::not_cleared_remains_active;
    }
    else if ((result = !strncmp(data, "cleared_restarted", 17)))
    {
        output = SCU_PLL_PLLCON0_OSCRES::cleared_restarted;
    }

    return result;
}

}; // namespace XMC4700
