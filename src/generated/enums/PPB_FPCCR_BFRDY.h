/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_FPCCR_BFRDY : uint8_t
{
    disabled_or_priority_did_not_permit_setting_b_cont /*!< BusFault is
                                                          disabled or priority
                                                          did not permit
                                                          setting the BusFault
                                                          handler to the
                                                          pending state when
                                                          the floating-point
                                                          stack frame was
                                                          allocated. */
        ,
    enabled_priority_permitted_setting_busfault_h_cont =
        1 /*!< BusFault is enabled and priority permitted setting the BusFault
             handler to the pending state when the floating-point stack frame
             was allocated. */
};
static_assert(sizeof(PPB_FPCCR_BFRDY) == 1);

/**
 * Converts PPB_FPCCR_BFRDY to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_FPCCR_BFRDY instance)
{
    const char *result = "UNKNOWN PPB_FPCCR_BFRDY";

    switch (instance)
    {
    case PPB_FPCCR_BFRDY::disabled_or_priority_did_not_permit_setting_b_cont:
        result = "disabled_or_priority_did_not_permit_setting_b_cont";
        break;
    case PPB_FPCCR_BFRDY::enabled_priority_permitted_setting_busfault_h_cont:
        result = "enabled_priority_permitted_setting_busfault_h_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_FPCCR_BFRDY.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_FPCCR_BFRDY &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "disabled_or_priority_did_not_permit_setting_b_cont", 50)))
    {
        output = PPB_FPCCR_BFRDY::
            disabled_or_priority_did_not_permit_setting_b_cont;
    }
    else if ((result = !strncmp(
                  data, "enabled_priority_permitted_setting_busfault_h_cont",
                  50)))
    {
        output = PPB_FPCCR_BFRDY::
            enabled_priority_permitted_setting_busfault_h_cont;
    }

    return result;
}

}; // namespace XMC4700
