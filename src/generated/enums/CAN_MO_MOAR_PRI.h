/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CAN_MO_MOAR_PRI : uint8_t
{
    list_order_this_means_message_object_n_consid_cont =
        1 /*!< Transmit acceptance filtering is based on the list order. This
             means that message object n is considered for transmission only if
             there is no other message object with valid transmit request
             (MSGVAL & TXEN0 & TXEN1 = 1) somewhere before this object in the
             list. */
        ,
    can_identifier_this_means_message_object_n_co_cont =
        2 /*!< Transmit acceptance filtering is based on the CAN identifier.
             This means, message object n is considered for transmission only
             if there is no other message object with higher priority
             identifier + IDE + DIR (with respect to CAN arbitration rules)
             somewhere in the list (see ). */
        ,
    list_order_pri_01b = 3 /*!< Transmit acceptance filtering is based on the
                              list order (as PRI = 01B). */
};
static_assert(sizeof(CAN_MO_MOAR_PRI) == 1);

/**
 * Converts CAN_MO_MOAR_PRI to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN_MO_MOAR_PRI instance)
{
    const char *result = "UNKNOWN CAN_MO_MOAR_PRI";

    switch (instance)
    {
    case CAN_MO_MOAR_PRI::list_order_this_means_message_object_n_consid_cont:
        result = "list_order_this_means_message_object_n_consid_cont";
        break;
    case CAN_MO_MOAR_PRI::can_identifier_this_means_message_object_n_co_cont:
        result = "can_identifier_this_means_message_object_n_co_cont";
        break;
    case CAN_MO_MOAR_PRI::list_order_pri_01b:
        result = "list_order_pri_01b";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN_MO_MOAR_PRI.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN_MO_MOAR_PRI &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "list_order_this_means_message_object_n_consid_cont", 50)))
    {
        output = CAN_MO_MOAR_PRI::
            list_order_this_means_message_object_n_consid_cont;
    }
    else if ((result = !strncmp(
                  data, "can_identifier_this_means_message_object_n_co_cont",
                  50)))
    {
        output = CAN_MO_MOAR_PRI::
            can_identifier_this_means_message_object_n_co_cont;
    }
    else if ((result = !strncmp(data, "list_order_pri_01b", 18)))
    {
        output = CAN_MO_MOAR_PRI::list_order_pri_01b;
    }

    return result;
}

}; // namespace XMC4700
