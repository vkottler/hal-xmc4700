/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL : uint8_t
{
    10mhz_63mhz /*!< base clock(10MHz-63MHz) */,
    _divided_by_2 = 1 /*!< base clock divided by 2 */,
    _divided_by_32 = 16 /*!< base clock divided by 32 */,
    _divided_by_4 = 2 /*!< base clock divided by 4 */,
    _divided_by_8 = 4 /*!< base clock divided by 8 */,
    _divided_by_16 = 8 /*!< base clock divided by 16 */,
    _divided_by_64 = 32 /*!< base clock divided by 64 */,
    _divided_by_128 = 64 /*!< base clock divided by 128 */,
    _divided_by_256 = 128 /*!< base clock divided by 256 */
};
static_assert(sizeof(SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL) == 1);

/**
 * Converts SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL instance)
{
    const char *result = "UNKNOWN SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL";

    switch (instance)
    {
    case SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::10mhz_63mhz:
        result = "10mhz_63mhz";
        break;
    case SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_2:
        result = "_divided_by_2";
        break;
    case SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_32:
        result = "_divided_by_32";
        break;
    case SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_4:
        result = "_divided_by_4";
        break;
    case SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_8:
        result = "_divided_by_8";
        break;
    case SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_16:
        result = "_divided_by_16";
        break;
    case SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_64:
        result = "_divided_by_64";
        break;
    case SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_128:
        result = "_divided_by_128";
        break;
    case SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_256:
        result = "_divided_by_256";
        break;
    }

    return result;
}

/**
 * Converts a C string to SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "10mhz_63mhz", 11)))
    {
        output = SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::10mhz_63mhz;
    }
    else if ((result = !strncmp(data, "_divided_by_2", 13)))
    {
        output = SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_2;
    }
    else if ((result = !strncmp(data, "_divided_by_32", 14)))
    {
        output = SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_32;
    }
    else if ((result = !strncmp(data, "_divided_by_4", 13)))
    {
        output = SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_4;
    }
    else if ((result = !strncmp(data, "_divided_by_8", 13)))
    {
        output = SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_8;
    }
    else if ((result = !strncmp(data, "_divided_by_16", 14)))
    {
        output = SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_16;
    }
    else if ((result = !strncmp(data, "_divided_by_64", 14)))
    {
        output = SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_64;
    }
    else if ((result = !strncmp(data, "_divided_by_128", 15)))
    {
        output = SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_128;
    }
    else if ((result = !strncmp(data, "_divided_by_256", 15)))
    {
        output = SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL::_divided_by_256;
    }

    return result;
}

}; // namespace XMC4700
