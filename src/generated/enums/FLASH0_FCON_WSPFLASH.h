/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class FLASH0_FCON_WSPFLASH : uint8_t
{
    one_clock_cycle /*!< PFLASH access in one clock cycle */,
    one_clock_cycle_x = 1 /*!< PFLASH access in one clock cycle */,
    two_clock_cycles = 2 /*!< PFLASH access in two clock cycles */,
    three_clock_cycles = 3 /*!< PFLASH access in three clock cycles */,
    fifteen_clock_cycles = 15 /*!< PFLASH access in fifteen clock cycles. */
};
static_assert(sizeof(FLASH0_FCON_WSPFLASH) == 1);

/**
 * Converts FLASH0_FCON_WSPFLASH to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(FLASH0_FCON_WSPFLASH instance)
{
    const char *result = "UNKNOWN FLASH0_FCON_WSPFLASH";

    switch (instance)
    {
    case FLASH0_FCON_WSPFLASH::one_clock_cycle:
        result = "one_clock_cycle";
        break;
    case FLASH0_FCON_WSPFLASH::one_clock_cycle_x:
        result = "one_clock_cycle_x";
        break;
    case FLASH0_FCON_WSPFLASH::two_clock_cycles:
        result = "two_clock_cycles";
        break;
    case FLASH0_FCON_WSPFLASH::three_clock_cycles:
        result = "three_clock_cycles";
        break;
    case FLASH0_FCON_WSPFLASH::fifteen_clock_cycles:
        result = "fifteen_clock_cycles";
        break;
    }

    return result;
}

/**
 * Converts a C string to FLASH0_FCON_WSPFLASH.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, FLASH0_FCON_WSPFLASH &output)
{
    bool result = false;

    if ((result = !strncmp(data, "one_clock_cycle", 15)))
    {
        output = FLASH0_FCON_WSPFLASH::one_clock_cycle;
    }
    else if ((result = !strncmp(data, "one_clock_cycle_x", 17)))
    {
        output = FLASH0_FCON_WSPFLASH::one_clock_cycle_x;
    }
    else if ((result = !strncmp(data, "two_clock_cycles", 16)))
    {
        output = FLASH0_FCON_WSPFLASH::two_clock_cycles;
    }
    else if ((result = !strncmp(data, "three_clock_cycles", 18)))
    {
        output = FLASH0_FCON_WSPFLASH::three_clock_cycles;
    }
    else if ((result = !strncmp(data, "fifteen_clock_cycles", 20)))
    {
        output = FLASH0_FCON_WSPFLASH::fifteen_clock_cycles;
    }

    return result;
}

}; // namespace XMC4700
