/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_FPCCR_USER : uint8_t
{
    not_user_when_floating_po_cont /*!< Privilege level was not user when the
                                      floating-point stack frame was allocated.
                                    */
        ,
    user_when_floating_point__cont =
        1 /*!< Privilege level was user when the floating-point stack frame was
             allocated. */
};
static_assert(sizeof(PPB_FPCCR_USER) == 1);

/**
 * Converts PPB_FPCCR_USER to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_FPCCR_USER instance)
{
    const char *result = "UNKNOWN PPB_FPCCR_USER";

    switch (instance)
    {
    case PPB_FPCCR_USER::not_user_when_floating_po_cont:
        result = "not_user_when_floating_po_cont";
        break;
    case PPB_FPCCR_USER::user_when_floating_point__cont:
        result = "user_when_floating_point__cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_FPCCR_USER.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_FPCCR_USER &output)
{
    bool result = false;

    if ((result = !strncmp(data, "not_user_when_floating_po_cont", 30)))
    {
        output = PPB_FPCCR_USER::not_user_when_floating_po_cont;
    }
    else if ((result = !strncmp(data, "user_when_floating_point__cont", 30)))
    {
        output = PPB_FPCCR_USER::user_when_floating_point__cont;
    }

    return result;
}

}; // namespace XMC4700
