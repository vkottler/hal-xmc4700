/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_CCR_DIV_0_TRP : uint8_t
{
    do_not_trap_divide_by_0 /*!< do not trap divide by 0 */,
    trap_divide_by_0 = 1 /*!< trap divide by 0. */
};
static_assert(sizeof(PPB_CCR_DIV_0_TRP) == 1);

/**
 * Converts PPB_CCR_DIV_0_TRP to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_CCR_DIV_0_TRP instance)
{
    const char *result = "UNKNOWN PPB_CCR_DIV_0_TRP";

    switch (instance)
    {
    case PPB_CCR_DIV_0_TRP::do_not_trap_divide_by_0:
        result = "do_not_trap_divide_by_0";
        break;
    case PPB_CCR_DIV_0_TRP::trap_divide_by_0:
        result = "trap_divide_by_0";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_CCR_DIV_0_TRP.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_CCR_DIV_0_TRP &output)
{
    bool result = false;

    if ((result = !strncmp(data, "do_not_trap_divide_by_0", 23)))
    {
        output = PPB_CCR_DIV_0_TRP::do_not_trap_divide_by_0;
    }
    else if ((result = !strncmp(data, "trap_divide_by_0", 16)))
    {
        output = PPB_CCR_DIV_0_TRP::trap_divide_by_0;
    }

    return result;
}

}; // namespace XMC4700
