/**
 * \file
 * \brief Generated by ifgen (3.0.1).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class EBU_SDRMCON_ROWM : uint8_t
{
    value2 = 1 /*!< Address bit 26 to 9 */,
    value3 = 2 /*!< Address bit 26 to 10 */,
    value4 = 3 /*!< Address bit 26 to 11 */,
    value5 = 4 /*!< Address bit 26 to 12 */,
    value6 = 5 /*!< Address bit 26 to 13 */
};
static_assert(sizeof(EBU_SDRMCON_ROWM) == 1);

static constexpr uint16_t EBU_SDRMCON_ROWM_id = 556;

/**
 * Converts EBU_SDRMCON_ROWM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(EBU_SDRMCON_ROWM instance)
{
    const char *result = "UNKNOWN EBU_SDRMCON_ROWM";

    switch (instance)
    {
    case EBU_SDRMCON_ROWM::value2:
        result = "value2";
        break;
    case EBU_SDRMCON_ROWM::value3:
        result = "value3";
        break;
    case EBU_SDRMCON_ROWM::value4:
        result = "value4";
        break;
    case EBU_SDRMCON_ROWM::value5:
        result = "value5";
        break;
    case EBU_SDRMCON_ROWM::value6:
        result = "value6";
        break;
    }

    return result;
}

/**
 * Converts a C string to EBU_SDRMCON_ROWM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, EBU_SDRMCON_ROWM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value2", 6)))
    {
        output = EBU_SDRMCON_ROWM::value2;
    }
    else if ((result = !strncmp(data, "value3", 6)))
    {
        output = EBU_SDRMCON_ROWM::value3;
    }
    else if ((result = !strncmp(data, "value4", 6)))
    {
        output = EBU_SDRMCON_ROWM::value4;
    }
    else if ((result = !strncmp(data, "value5", 6)))
    {
        output = EBU_SDRMCON_ROWM::value5;
    }
    else if ((result = !strncmp(data, "value6", 6)))
    {
        output = EBU_SDRMCON_ROWM::value6;
    }

    return result;
}

}; // namespace XMC4700
