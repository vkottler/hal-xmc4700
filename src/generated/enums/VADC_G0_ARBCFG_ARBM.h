/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class VADC_G0_ARBCFG_ARBM : uint8_t
{
    runs_permanently_this_setting_require_cont /*!< The arbiter runs
                                                  permanently. This setting is
                                                  required for a
                                                  synchronization slave (see )
                                                  and for equidistant sampling
                                                  using the signal ARBCNT (see
                                                  ). */
        ,
    only_runs_if_at_least_one_conversion__cont =
        1 /*!< The arbiter only runs if at least one conversion request of an
             enabled request source is pending. This setting ensures a
             reproducible latency from an incoming request to the conversion
             start, if the converter is idle. Synchronized conversions are not
             supported. */
};
static_assert(sizeof(VADC_G0_ARBCFG_ARBM) == 1);

/**
 * Converts VADC_G0_ARBCFG_ARBM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(VADC_G0_ARBCFG_ARBM instance)
{
    const char *result = "UNKNOWN VADC_G0_ARBCFG_ARBM";

    switch (instance)
    {
    case VADC_G0_ARBCFG_ARBM::runs_permanently_this_setting_require_cont:
        result = "runs_permanently_this_setting_require_cont";
        break;
    case VADC_G0_ARBCFG_ARBM::only_runs_if_at_least_one_conversion__cont:
        result = "only_runs_if_at_least_one_conversion__cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to VADC_G0_ARBCFG_ARBM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, VADC_G0_ARBCFG_ARBM &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "runs_permanently_this_setting_require_cont", 42)))
    {
        output =
            VADC_G0_ARBCFG_ARBM::runs_permanently_this_setting_require_cont;
    }
    else if ((result = !strncmp(
                  data, "only_runs_if_at_least_one_conversion__cont", 42)))
    {
        output =
            VADC_G0_ARBCFG_ARBM::only_runs_if_at_least_one_conversion__cont;
    }

    return result;
}

}; // namespace XMC4700
