/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ : uint8_t
{
    ignored /*!< Ignored */,
    restart = 1 /*!< Restart */
};
static_assert(sizeof(SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ) == 1);

/**
 * Converts SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ instance)
{
    const char *result = "UNKNOWN SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ";

    switch (instance)
    {
    case SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ::ignored:
        result = "ignored";
        break;
    case SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ::restart:
        result = "restart";
        break;
    }

    return result;
}

/**
 * Converts a C string to SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ &output)
{
    bool result = false;

    if ((result = !strncmp(data, "ignored", 7)))
    {
        output = SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ::ignored;
    }
    else if ((result = !strncmp(data, "restart", 7)))
    {
        output = SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ::restart;
    }

    return result;
}

}; // namespace XMC4700
