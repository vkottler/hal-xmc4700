/**
 * \file
 * \brief Generated by ifgen (3.0.1).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_CCR_PM : uint8_t
{
    value1 /*!< The parity generation is disabled. */,
    value3 = 2 /*!< Even parity is selected (parity bit = 1 on odd number of 1s in data, parity bit = 0 on even number of 1s in data). */,
    value4 = 3 /*!< Odd parity is selected (parity bit = 0 on odd number of 1s in data, parity bit = 1 on even number of 1s in data). */
};
static_assert(sizeof(USIC0_CH0_CCR_PM) == 1);

static constexpr uint16_t USIC0_CH0_CCR_PM_id = 3335;

/**
 * Converts USIC0_CH0_CCR_PM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_CCR_PM instance)
{
    const char *result = "UNKNOWN USIC0_CH0_CCR_PM";

    switch (instance)
    {
    case USIC0_CH0_CCR_PM::value1:
        result = "value1";
        break;
    case USIC0_CH0_CCR_PM::value3:
        result = "value3";
        break;
    case USIC0_CH0_CCR_PM::value4:
        result = "value4";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_CCR_PM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_CCR_PM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = USIC0_CH0_CCR_PM::value1;
    }
    else if ((result = !strncmp(data, "value3", 6)))
    {
        output = USIC0_CH0_CCR_PM::value3;
    }
    else if ((result = !strncmp(data, "value4", 6)))
    {
        output = USIC0_CH0_CCR_PM::value4;
    }

    return result;
}

}; // namespace XMC4700
