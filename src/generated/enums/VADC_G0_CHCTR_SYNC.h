/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class VADC_G0_CHCTR_SYNC : uint8_t
{
    no_synchroniz_request_standalone_operation /*!< No synchroniz. request,
                                                  standalone operation */
        ,
    request_synchronized_conversion_this_channel__cont =
        1 /*!< Request a synchronized conversion of this channel (only taken
             into account for a master) */
};
static_assert(sizeof(VADC_G0_CHCTR_SYNC) == 1);

/**
 * Converts VADC_G0_CHCTR_SYNC to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(VADC_G0_CHCTR_SYNC instance)
{
    const char *result = "UNKNOWN VADC_G0_CHCTR_SYNC";

    switch (instance)
    {
    case VADC_G0_CHCTR_SYNC::no_synchroniz_request_standalone_operation:
        result = "no_synchroniz_request_standalone_operation";
        break;
    case VADC_G0_CHCTR_SYNC::
        request_synchronized_conversion_this_channel__cont:
        result = "request_synchronized_conversion_this_channel__cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to VADC_G0_CHCTR_SYNC.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, VADC_G0_CHCTR_SYNC &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "no_synchroniz_request_standalone_operation", 42)))
    {
        output =
            VADC_G0_CHCTR_SYNC::no_synchroniz_request_standalone_operation;
    }
    else if ((result = !strncmp(
                  data, "request_synchronized_conversion_this_channel__cont",
                  50)))
    {
        output = VADC_G0_CHCTR_SYNC::
            request_synchronized_conversion_this_channel__cont;
    }

    return result;
}

}; // namespace XMC4700
