/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class POSIF0_PCONF_LPC : uint8_t
{
    filter_disabled /*!< Low pass filter disabled */,
    _1_clock_cycle = 1 /*!< Low pass of 1 clock cycle */,
    _2_clock_cycles = 2 /*!< Low pass of 2 clock cycles */,
    _4_clock_cycles = 3 /*!< Low pass of 4 clock cycles */,
    _8_clock_cycles = 4 /*!< Low pass of 8 clock cycles */,
    _16_clock_cycles = 5 /*!< Low pass of 16 clock cycles */,
    _32_clock_cycles = 6 /*!< Low pass of 32 clock cycles */,
    _64_clock_cycles = 7 /*!< Low pass of 64 clock cycles */
};
static_assert(sizeof(POSIF0_PCONF_LPC) == 1);

/**
 * Converts POSIF0_PCONF_LPC to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(POSIF0_PCONF_LPC instance)
{
    const char *result = "UNKNOWN POSIF0_PCONF_LPC";

    switch (instance)
    {
    case POSIF0_PCONF_LPC::filter_disabled:
        result = "filter_disabled";
        break;
    case POSIF0_PCONF_LPC::_1_clock_cycle:
        result = "_1_clock_cycle";
        break;
    case POSIF0_PCONF_LPC::_2_clock_cycles:
        result = "_2_clock_cycles";
        break;
    case POSIF0_PCONF_LPC::_4_clock_cycles:
        result = "_4_clock_cycles";
        break;
    case POSIF0_PCONF_LPC::_8_clock_cycles:
        result = "_8_clock_cycles";
        break;
    case POSIF0_PCONF_LPC::_16_clock_cycles:
        result = "_16_clock_cycles";
        break;
    case POSIF0_PCONF_LPC::_32_clock_cycles:
        result = "_32_clock_cycles";
        break;
    case POSIF0_PCONF_LPC::_64_clock_cycles:
        result = "_64_clock_cycles";
        break;
    }

    return result;
}

/**
 * Converts a C string to POSIF0_PCONF_LPC.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, POSIF0_PCONF_LPC &output)
{
    bool result = false;

    if ((result = !strncmp(data, "filter_disabled", 15)))
    {
        output = POSIF0_PCONF_LPC::filter_disabled;
    }
    else if ((result = !strncmp(data, "_1_clock_cycle", 14)))
    {
        output = POSIF0_PCONF_LPC::_1_clock_cycle;
    }
    else if ((result = !strncmp(data, "_2_clock_cycles", 15)))
    {
        output = POSIF0_PCONF_LPC::_2_clock_cycles;
    }
    else if ((result = !strncmp(data, "_4_clock_cycles", 15)))
    {
        output = POSIF0_PCONF_LPC::_4_clock_cycles;
    }
    else if ((result = !strncmp(data, "_8_clock_cycles", 15)))
    {
        output = POSIF0_PCONF_LPC::_8_clock_cycles;
    }
    else if ((result = !strncmp(data, "_16_clock_cycles", 16)))
    {
        output = POSIF0_PCONF_LPC::_16_clock_cycles;
    }
    else if ((result = !strncmp(data, "_32_clock_cycles", 16)))
    {
        output = POSIF0_PCONF_LPC::_32_clock_cycles;
    }
    else if ((result = !strncmp(data, "_64_clock_cycles", 16)))
    {
        output = POSIF0_PCONF_LPC::_64_clock_cycles;
    }

    return result;
}

}; // namespace XMC4700
