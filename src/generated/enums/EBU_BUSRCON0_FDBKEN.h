/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class EBU_BUSRCON0_FDBKEN : uint8_t
{
    bfclk_feedback_not_used /*!< BFCLK feedback not used. */,
    incoming_data_control_signals_burst_flash_dev_cont =
        1 /*!< Incoming data and control signals (from the Burst FLASH device)
             are re-synchronized to the BFCLKI input. */
};
static_assert(sizeof(EBU_BUSRCON0_FDBKEN) == 1);

/**
 * Converts EBU_BUSRCON0_FDBKEN to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(EBU_BUSRCON0_FDBKEN instance)
{
    const char *result = "UNKNOWN EBU_BUSRCON0_FDBKEN";

    switch (instance)
    {
    case EBU_BUSRCON0_FDBKEN::bfclk_feedback_not_used:
        result = "bfclk_feedback_not_used";
        break;
    case EBU_BUSRCON0_FDBKEN::
        incoming_data_control_signals_burst_flash_dev_cont:
        result = "incoming_data_control_signals_burst_flash_dev_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to EBU_BUSRCON0_FDBKEN.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, EBU_BUSRCON0_FDBKEN &output)
{
    bool result = false;

    if ((result = !strncmp(data, "bfclk_feedback_not_used", 23)))
    {
        output = EBU_BUSRCON0_FDBKEN::bfclk_feedback_not_used;
    }
    else if ((result = !strncmp(
                  data, "incoming_data_control_signals_burst_flash_dev_cont",
                  50)))
    {
        output = EBU_BUSRCON0_FDBKEN::
            incoming_data_control_signals_burst_flash_dev_cont;
    }

    return result;
}

}; // namespace XMC4700
