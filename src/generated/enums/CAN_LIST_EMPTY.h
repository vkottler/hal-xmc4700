/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CAN_LIST_EMPTY : uint8_t
{
    at_least_one_message_object_allocated_list_i /*!< At least one message
                                                    object is allocated to list
                                                    i. */
        ,
    no_message_object_allocated_list_i_list_i_empty =
        1 /*!< No message object is allocated to the list i. List i is empty.
           */
};
static_assert(sizeof(CAN_LIST_EMPTY) == 1);

/**
 * Converts CAN_LIST_EMPTY to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN_LIST_EMPTY instance)
{
    const char *result = "UNKNOWN CAN_LIST_EMPTY";

    switch (instance)
    {
    case CAN_LIST_EMPTY::at_least_one_message_object_allocated_list_i:
        result = "at_least_one_message_object_allocated_list_i";
        break;
    case CAN_LIST_EMPTY::no_message_object_allocated_list_i_list_i_empty:
        result = "no_message_object_allocated_list_i_list_i_empty";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN_LIST_EMPTY.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN_LIST_EMPTY &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "at_least_one_message_object_allocated_list_i", 44)))
    {
        output = CAN_LIST_EMPTY::at_least_one_message_object_allocated_list_i;
    }
    else if ((result = !strncmp(
                  data, "no_message_object_allocated_list_i_list_i_empty",
                  47)))
    {
        output =
            CAN_LIST_EMPTY::no_message_object_allocated_list_i_list_i_empty;
    }

    return result;
}

}; // namespace XMC4700
