/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_DX0CR_DSEL : uint8_t
{
    dxna_selected /*!< The data input DXnA is selected. */,
    dxnb_selected = 1 /*!< The data input DXnB is selected. */,
    dxnc_selected = 2 /*!< The data input DXnC is selected. */,
    dxnd_selected = 3 /*!< The data input DXnD is selected. */,
    dxne_selected = 4 /*!< The data input DXnE is selected. */,
    dxnf_selected = 5 /*!< The data input DXnF is selected. */,
    dxng_selected = 6 /*!< The data input DXnG is selected. */,
    always_1 = 7 /*!< The data input is always 1. */
};
static_assert(sizeof(USIC0_CH0_DX0CR_DSEL) == 1);

/**
 * Converts USIC0_CH0_DX0CR_DSEL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_DX0CR_DSEL instance)
{
    const char *result = "UNKNOWN USIC0_CH0_DX0CR_DSEL";

    switch (instance)
    {
    case USIC0_CH0_DX0CR_DSEL::dxna_selected:
        result = "dxna_selected";
        break;
    case USIC0_CH0_DX0CR_DSEL::dxnb_selected:
        result = "dxnb_selected";
        break;
    case USIC0_CH0_DX0CR_DSEL::dxnc_selected:
        result = "dxnc_selected";
        break;
    case USIC0_CH0_DX0CR_DSEL::dxnd_selected:
        result = "dxnd_selected";
        break;
    case USIC0_CH0_DX0CR_DSEL::dxne_selected:
        result = "dxne_selected";
        break;
    case USIC0_CH0_DX0CR_DSEL::dxnf_selected:
        result = "dxnf_selected";
        break;
    case USIC0_CH0_DX0CR_DSEL::dxng_selected:
        result = "dxng_selected";
        break;
    case USIC0_CH0_DX0CR_DSEL::always_1:
        result = "always_1";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_DX0CR_DSEL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_DX0CR_DSEL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "dxna_selected", 13)))
    {
        output = USIC0_CH0_DX0CR_DSEL::dxna_selected;
    }
    else if ((result = !strncmp(data, "dxnb_selected", 13)))
    {
        output = USIC0_CH0_DX0CR_DSEL::dxnb_selected;
    }
    else if ((result = !strncmp(data, "dxnc_selected", 13)))
    {
        output = USIC0_CH0_DX0CR_DSEL::dxnc_selected;
    }
    else if ((result = !strncmp(data, "dxnd_selected", 13)))
    {
        output = USIC0_CH0_DX0CR_DSEL::dxnd_selected;
    }
    else if ((result = !strncmp(data, "dxne_selected", 13)))
    {
        output = USIC0_CH0_DX0CR_DSEL::dxne_selected;
    }
    else if ((result = !strncmp(data, "dxnf_selected", 13)))
    {
        output = USIC0_CH0_DX0CR_DSEL::dxnf_selected;
    }
    else if ((result = !strncmp(data, "dxng_selected", 13)))
    {
        output = USIC0_CH0_DX0CR_DSEL::dxng_selected;
    }
    else if ((result = !strncmp(data, "always_1", 8)))
    {
        output = USIC0_CH0_DX0CR_DSEL::always_1;
    }

    return result;
}

}; // namespace XMC4700
