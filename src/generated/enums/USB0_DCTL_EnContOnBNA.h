/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_DCTL_EnContOnBNA : uint8_t
{
    value1 /*!< After receiving BNA interrupt, the core disables the endpoint.
              When the endpoint is re-enabled by the application, the core
              starts processing from the DOEPDMA descriptor. */
        ,
    value2 = 1 /*!< After receiving BNA interrupt, the core disables the
                  endpoint. When the endpoint is re-enabled by the application,
                  the core starts processing from the descriptor that received
                  the BNA interrupt. */
};
static_assert(sizeof(USB0_DCTL_EnContOnBNA) == 1);

static constexpr uint16_t USB0_DCTL_EnContOnBNA_id = 364;

/**
 * Converts USB0_DCTL_EnContOnBNA to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_DCTL_EnContOnBNA instance)
{
    const char *result = "UNKNOWN USB0_DCTL_EnContOnBNA";

    switch (instance)
    {
    case USB0_DCTL_EnContOnBNA::value1:
        result = "value1";
        break;
    case USB0_DCTL_EnContOnBNA::value2:
        result = "value2";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_DCTL_EnContOnBNA.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_DCTL_EnContOnBNA &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = USB0_DCTL_EnContOnBNA::value1;
    }
    else if ((result = !strncmp(data, "value2", 6)))
    {
        output = USB0_DCTL_EnContOnBNA::value2;
    }

    return result;
}

}; // namespace XMC4700
