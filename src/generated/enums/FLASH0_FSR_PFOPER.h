/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class FLASH0_FSR_PFOPER : uint8_t
{
    no_operation_error_reported_by_program_flash /*!< No operation error
                                                    reported by Program Flash
                                                  */
        ,
    flash_array_operation_aborted_because_flash_a_cont =
        1 /*!< Flash array operation aborted, because of a Flash array failure,
             e.g. an ECC error in microcode. */
};
static_assert(sizeof(FLASH0_FSR_PFOPER) == 1);

/**
 * Converts FLASH0_FSR_PFOPER to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(FLASH0_FSR_PFOPER instance)
{
    const char *result = "UNKNOWN FLASH0_FSR_PFOPER";

    switch (instance)
    {
    case FLASH0_FSR_PFOPER::no_operation_error_reported_by_program_flash:
        result = "no_operation_error_reported_by_program_flash";
        break;
    case FLASH0_FSR_PFOPER::flash_array_operation_aborted_because_flash_a_cont:
        result = "flash_array_operation_aborted_because_flash_a_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to FLASH0_FSR_PFOPER.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, FLASH0_FSR_PFOPER &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "no_operation_error_reported_by_program_flash", 44)))
    {
        output =
            FLASH0_FSR_PFOPER::no_operation_error_reported_by_program_flash;
    }
    else if ((result = !strncmp(
                  data, "flash_array_operation_aborted_because_flash_a_cont",
                  50)))
    {
        output = FLASH0_FSR_PFOPER::
            flash_array_operation_aborted_because_flash_a_cont;
    }

    return result;
}

}; // namespace XMC4700
