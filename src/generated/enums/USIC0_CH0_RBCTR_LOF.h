/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_RBCTR_LOF : uint8_t
{
    lower_due_read_access_outr /*!< A standard receive buffer event occurs when
                                  the filling level equals the limit value and
                                  gets lower due to a read access from OUTR. */
        ,
    bigger_due_reception_new_data_word =
        1 /*!< A standard receive buffer event occurs when the filling level
             equals the limit value and gets bigger due to the reception of a
             new data word. */
};
static_assert(sizeof(USIC0_CH0_RBCTR_LOF) == 1);

/**
 * Converts USIC0_CH0_RBCTR_LOF to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_RBCTR_LOF instance)
{
    const char *result = "UNKNOWN USIC0_CH0_RBCTR_LOF";

    switch (instance)
    {
    case USIC0_CH0_RBCTR_LOF::lower_due_read_access_outr:
        result = "lower_due_read_access_outr";
        break;
    case USIC0_CH0_RBCTR_LOF::bigger_due_reception_new_data_word:
        result = "bigger_due_reception_new_data_word";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_RBCTR_LOF.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_RBCTR_LOF &output)
{
    bool result = false;

    if ((result = !strncmp(data, "lower_due_read_access_outr", 26)))
    {
        output = USIC0_CH0_RBCTR_LOF::lower_due_read_access_outr;
    }
    else if ((result =
                  !strncmp(data, "bigger_due_reception_new_data_word", 34)))
    {
        output = USIC0_CH0_RBCTR_LOF::bigger_due_reception_new_data_word;
    }

    return result;
}

}; // namespace XMC4700
