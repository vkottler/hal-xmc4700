/**
 * \file
 * \brief Generated by ifgen (2.6.2).
 * {
 *   "enum": {
 *     "value1": {
 *       "description": "CCU8x.INyA",
 *       "value": 0
 *     },
 *     "value2": {
 *       "description": "CCU8x.INyB",
 *       "value": 1
 *     },
 *     "value3": {
 *       "description": "CCU8x.INyC",
 *       "value": 2
 *     },
 *     "value4": {
 *       "description": "CCU8x.INyD",
 *       "value": 3
 *     },
 *     "value5": {
 *       "description": "CCU8x.INyE",
 *       "value": 4
 *     },
 *     "value6": {
 *       "description": "CCU8x.INyF",
 *       "value": 5
 *     },
 *     "value7": {
 *       "description": "CCU8x.INyG",
 *       "value": 6
 *     },
 *     "value8": {
 *       "description": "CCU8x.INyH",
 *       "value": 7
 *     },
 *     "value9": {
 *       "description": "CCU8x.INyI",
 *       "value": 8
 *     },
 *     "value10": {
 *       "description": "CCU8x.INyJ",
 *       "value": 9
 *     },
 *     "value11": {
 *       "description": "CCU8x.INyK",
 *       "value": 10
 *     },
 *     "value12": {
 *       "description": "CCU8x.INyL",
 *       "value": 11
 *     },
 *     "value13": {
 *       "description": "CCU8x.INyM",
 *       "value": 12
 *     },
 *     "value14": {
 *       "description": "CCU8x.INyN",
 *       "value": 13
 *     },
 *     "value15": {
 *       "description": "CCU8x.INyO",
 *       "value": 14
 *     },
 *     "value16": {
 *       "description": "CCU8x.INyP",
 *       "value": 15
 *     }
 *   },
 *   "unit_test": false,
 *   "json": false,
 *   "use_map": false,
 *   "underlying": "uint8_t",
 *   "namespace": [],
 *   "json_indent": null
 * }
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU80_CC80_INS_EV0IS : uint8_t
{
    value1 /*!< CCU8x.INyA */,
    value2 = 1 /*!< CCU8x.INyB */,
    value3 = 2 /*!< CCU8x.INyC */,
    value4 = 3 /*!< CCU8x.INyD */,
    value5 = 4 /*!< CCU8x.INyE */,
    value6 = 5 /*!< CCU8x.INyF */,
    value7 = 6 /*!< CCU8x.INyG */,
    value8 = 7 /*!< CCU8x.INyH */,
    value9 = 8 /*!< CCU8x.INyI */,
    value10 = 9 /*!< CCU8x.INyJ */,
    value11 = 10 /*!< CCU8x.INyK */,
    value12 = 11 /*!< CCU8x.INyL */,
    value13 = 12 /*!< CCU8x.INyM */,
    value14 = 13 /*!< CCU8x.INyN */,
    value15 = 14 /*!< CCU8x.INyO */,
    value16 = 15 /*!< CCU8x.INyP */
};
static_assert(sizeof(CCU80_CC80_INS_EV0IS) == 1);

static constexpr uint16_t CCU80_CC80_INS_EV0IS_id = 1830;

/**
 * Converts CCU80_CC80_INS_EV0IS to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU80_CC80_INS_EV0IS instance)
{
    const char *result = "UNKNOWN CCU80_CC80_INS_EV0IS";

    switch (instance)
    {
    case CCU80_CC80_INS_EV0IS::value1:
        result = "value1";
        break;
    case CCU80_CC80_INS_EV0IS::value2:
        result = "value2";
        break;
    case CCU80_CC80_INS_EV0IS::value3:
        result = "value3";
        break;
    case CCU80_CC80_INS_EV0IS::value4:
        result = "value4";
        break;
    case CCU80_CC80_INS_EV0IS::value5:
        result = "value5";
        break;
    case CCU80_CC80_INS_EV0IS::value6:
        result = "value6";
        break;
    case CCU80_CC80_INS_EV0IS::value7:
        result = "value7";
        break;
    case CCU80_CC80_INS_EV0IS::value8:
        result = "value8";
        break;
    case CCU80_CC80_INS_EV0IS::value9:
        result = "value9";
        break;
    case CCU80_CC80_INS_EV0IS::value10:
        result = "value10";
        break;
    case CCU80_CC80_INS_EV0IS::value11:
        result = "value11";
        break;
    case CCU80_CC80_INS_EV0IS::value12:
        result = "value12";
        break;
    case CCU80_CC80_INS_EV0IS::value13:
        result = "value13";
        break;
    case CCU80_CC80_INS_EV0IS::value14:
        result = "value14";
        break;
    case CCU80_CC80_INS_EV0IS::value15:
        result = "value15";
        break;
    case CCU80_CC80_INS_EV0IS::value16:
        result = "value16";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU80_CC80_INS_EV0IS.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU80_CC80_INS_EV0IS &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = CCU80_CC80_INS_EV0IS::value1;
    }
    else if ((result = !strncmp(data, "value2", 6)))
    {
        output = CCU80_CC80_INS_EV0IS::value2;
    }
    else if ((result = !strncmp(data, "value3", 6)))
    {
        output = CCU80_CC80_INS_EV0IS::value3;
    }
    else if ((result = !strncmp(data, "value4", 6)))
    {
        output = CCU80_CC80_INS_EV0IS::value4;
    }
    else if ((result = !strncmp(data, "value5", 6)))
    {
        output = CCU80_CC80_INS_EV0IS::value5;
    }
    else if ((result = !strncmp(data, "value6", 6)))
    {
        output = CCU80_CC80_INS_EV0IS::value6;
    }
    else if ((result = !strncmp(data, "value7", 6)))
    {
        output = CCU80_CC80_INS_EV0IS::value7;
    }
    else if ((result = !strncmp(data, "value8", 6)))
    {
        output = CCU80_CC80_INS_EV0IS::value8;
    }
    else if ((result = !strncmp(data, "value9", 6)))
    {
        output = CCU80_CC80_INS_EV0IS::value9;
    }
    else if ((result = !strncmp(data, "value10", 7)))
    {
        output = CCU80_CC80_INS_EV0IS::value10;
    }
    else if ((result = !strncmp(data, "value11", 7)))
    {
        output = CCU80_CC80_INS_EV0IS::value11;
    }
    else if ((result = !strncmp(data, "value12", 7)))
    {
        output = CCU80_CC80_INS_EV0IS::value12;
    }
    else if ((result = !strncmp(data, "value13", 7)))
    {
        output = CCU80_CC80_INS_EV0IS::value13;
    }
    else if ((result = !strncmp(data, "value14", 7)))
    {
        output = CCU80_CC80_INS_EV0IS::value14;
    }
    else if ((result = !strncmp(data, "value15", 7)))
    {
        output = CCU80_CC80_INS_EV0IS::value15;
    }
    else if ((result = !strncmp(data, "value16", 7)))
    {
        output = CCU80_CC80_INS_EV0IS::value16;
    }

    return result;
}

}; // namespace XMC4700
