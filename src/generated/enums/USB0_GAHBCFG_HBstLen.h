/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_GAHBCFG_HBstLen : uint8_t
{
    single /*!< Single */,
    incr = 1 /*!< INCR */,
    incr4 = 3 /*!< INCR4 */,
    incr8 = 5 /*!< INCR8 */,
    incr16 = 7 /*!< INCR16 */
};
static_assert(sizeof(USB0_GAHBCFG_HBstLen) == 1);

/**
 * Converts USB0_GAHBCFG_HBstLen to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_GAHBCFG_HBstLen instance)
{
    const char *result = "UNKNOWN USB0_GAHBCFG_HBstLen";

    switch (instance)
    {
    case USB0_GAHBCFG_HBstLen::single:
        result = "single";
        break;
    case USB0_GAHBCFG_HBstLen::incr:
        result = "incr";
        break;
    case USB0_GAHBCFG_HBstLen::incr4:
        result = "incr4";
        break;
    case USB0_GAHBCFG_HBstLen::incr8:
        result = "incr8";
        break;
    case USB0_GAHBCFG_HBstLen::incr16:
        result = "incr16";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_GAHBCFG_HBstLen.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_GAHBCFG_HBstLen &output)
{
    bool result = false;

    if ((result = !strncmp(data, "single", 6)))
    {
        output = USB0_GAHBCFG_HBstLen::single;
    }
    else if ((result = !strncmp(data, "incr", 4)))
    {
        output = USB0_GAHBCFG_HBstLen::incr;
    }
    else if ((result = !strncmp(data, "incr4", 5)))
    {
        output = USB0_GAHBCFG_HBstLen::incr4;
    }
    else if ((result = !strncmp(data, "incr8", 5)))
    {
        output = USB0_GAHBCFG_HBstLen::incr8;
    }
    else if ((result = !strncmp(data, "incr16", 6)))
    {
        output = USB0_GAHBCFG_HBstLen::incr16;
    }

    return result;
}

}; // namespace XMC4700
