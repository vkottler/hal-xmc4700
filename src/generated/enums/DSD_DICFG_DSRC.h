/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class DSD_DICFG_DSRC : uint8_t
{
    value1 = 1 /*!< Disconnected */,
    value2 = 2 /*!< External, from input A, direct */,
    value3 = 3 /*!< External, from input A, inverted */,
    value4 = 4 /*!< External, from input B, direct */,
    value5 = 5 /*!< External, from input B, inverted */
};
static_assert(sizeof(DSD_DICFG_DSRC) == 1);

static constexpr uint16_t DSD_DICFG_DSRC_id = 252;

/**
 * Converts DSD_DICFG_DSRC to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(DSD_DICFG_DSRC instance)
{
    const char *result = "UNKNOWN DSD_DICFG_DSRC";

    switch (instance)
    {
    case DSD_DICFG_DSRC::value1:
        result = "value1";
        break;
    case DSD_DICFG_DSRC::value2:
        result = "value2";
        break;
    case DSD_DICFG_DSRC::value3:
        result = "value3";
        break;
    case DSD_DICFG_DSRC::value4:
        result = "value4";
        break;
    case DSD_DICFG_DSRC::value5:
        result = "value5";
        break;
    }

    return result;
}

/**
 * Converts a C string to DSD_DICFG_DSRC.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, DSD_DICFG_DSRC &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = DSD_DICFG_DSRC::value1;
    }
    else if ((result = !strncmp(data, "value2", 6)))
    {
        output = DSD_DICFG_DSRC::value2;
    }
    else if ((result = !strncmp(data, "value3", 6)))
    {
        output = DSD_DICFG_DSRC::value3;
    }
    else if ((result = !strncmp(data, "value4", 6)))
    {
        output = DSD_DICFG_DSRC::value4;
    }
    else if ((result = !strncmp(data, "value5", 6)))
    {
        output = DSD_DICFG_DSRC::value5;
    }

    return result;
}

}; // namespace XMC4700
