/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_CFSR_MMARVALID : uint8_t
{
    value_mmar_not_valid_fault_address /*!< value in MMAR is not a valid fault
                                          address */
        ,
    mmar_holds_valid_fault_address =
        1 /*!< MMAR holds a valid fault address. */
};
static_assert(sizeof(PPB_CFSR_MMARVALID) == 1);

/**
 * Converts PPB_CFSR_MMARVALID to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_CFSR_MMARVALID instance)
{
    const char *result = "UNKNOWN PPB_CFSR_MMARVALID";

    switch (instance)
    {
    case PPB_CFSR_MMARVALID::value_mmar_not_valid_fault_address:
        result = "value_mmar_not_valid_fault_address";
        break;
    case PPB_CFSR_MMARVALID::mmar_holds_valid_fault_address:
        result = "mmar_holds_valid_fault_address";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_CFSR_MMARVALID.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_CFSR_MMARVALID &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value_mmar_not_valid_fault_address", 34)))
    {
        output = PPB_CFSR_MMARVALID::value_mmar_not_valid_fault_address;
    }
    else if ((result = !strncmp(data, "mmar_holds_valid_fault_address", 30)))
    {
        output = PPB_CFSR_MMARVALID::mmar_holds_valid_fault_address;
    }

    return result;
}

}; // namespace XMC4700
