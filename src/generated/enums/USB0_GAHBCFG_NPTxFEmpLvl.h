/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_GAHBCFG_NPTxFEmpLvl : uint8_t
{
    diepintxtxfemp_interrupt_indicates_endpoint_t_cont /*!< DIEPINTx.TxFEmp
                                                          interrupt indicates
                                                          that the IN Endpoint
                                                          TxFIFO is half empty
                                                        */
        ,
    _ = 1 /*!< DIEPINTx.TxFEmp interrupt indicates that the IN Endpoint TxFIFO
             is completely empty */
};
static_assert(sizeof(USB0_GAHBCFG_NPTxFEmpLvl) == 1);

/**
 * Converts USB0_GAHBCFG_NPTxFEmpLvl to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_GAHBCFG_NPTxFEmpLvl instance)
{
    const char *result = "UNKNOWN USB0_GAHBCFG_NPTxFEmpLvl";

    switch (instance)
    {
    case USB0_GAHBCFG_NPTxFEmpLvl::
        diepintxtxfemp_interrupt_indicates_endpoint_t_cont:
        result = "diepintxtxfemp_interrupt_indicates_endpoint_t_cont";
        break;
    case USB0_GAHBCFG_NPTxFEmpLvl::_:
        result = "_";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_GAHBCFG_NPTxFEmpLvl.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_GAHBCFG_NPTxFEmpLvl &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "diepintxtxfemp_interrupt_indicates_endpoint_t_cont", 50)))
    {
        output = USB0_GAHBCFG_NPTxFEmpLvl::
            diepintxtxfemp_interrupt_indicates_endpoint_t_cont;
    }
    else if ((result = !strncmp(data, "_", 1)))
    {
        output = USB0_GAHBCFG_NPTxFEmpLvl::_;
    }

    return result;
}

}; // namespace XMC4700
