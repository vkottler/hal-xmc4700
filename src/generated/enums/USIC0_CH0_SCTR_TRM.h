/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_SCTR_TRM : uint8_t
{
    inactive_data_frame_transfers_not_possible /*!< The shift control signal is
                                                  considered as inactive and
                                                  data frame transfers are not
                                                  possible. */
        ,
    active_if_at_1_level_this_setting_be_programm_cont =
        1 /*!< The shift control signal is considered active if it is at
             1-level. This is the setting to be programmed to allow data
             transfers. */
        ,
    active_if_at_0_level_recommended_avoid_this_s_cont =
        2 /*!< The shift control signal is considered active if it is at
             0-level. It is recommended to avoid this setting and to use the
             inversion in the DX2 stage in case of a low-active signal. */
        ,
    active_without_referring_actual_signal_level__cont =
        3 /*!< The shift control signal is considered active without referring
             to the actual signal level. Data frame transfer is possible after
             each edge of the signal. */
};
static_assert(sizeof(USIC0_CH0_SCTR_TRM) == 1);

/**
 * Converts USIC0_CH0_SCTR_TRM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_SCTR_TRM instance)
{
    const char *result = "UNKNOWN USIC0_CH0_SCTR_TRM";

    switch (instance)
    {
    case USIC0_CH0_SCTR_TRM::inactive_data_frame_transfers_not_possible:
        result = "inactive_data_frame_transfers_not_possible";
        break;
    case USIC0_CH0_SCTR_TRM::
        active_if_at_1_level_this_setting_be_programm_cont:
        result = "active_if_at_1_level_this_setting_be_programm_cont";
        break;
    case USIC0_CH0_SCTR_TRM::
        active_if_at_0_level_recommended_avoid_this_s_cont:
        result = "active_if_at_0_level_recommended_avoid_this_s_cont";
        break;
    case USIC0_CH0_SCTR_TRM::
        active_without_referring_actual_signal_level__cont:
        result = "active_without_referring_actual_signal_level__cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_SCTR_TRM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_SCTR_TRM &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "inactive_data_frame_transfers_not_possible", 42)))
    {
        output =
            USIC0_CH0_SCTR_TRM::inactive_data_frame_transfers_not_possible;
    }
    else if ((result = !strncmp(
                  data, "active_if_at_1_level_this_setting_be_programm_cont",
                  50)))
    {
        output = USIC0_CH0_SCTR_TRM::
            active_if_at_1_level_this_setting_be_programm_cont;
    }
    else if ((result = !strncmp(
                  data, "active_if_at_0_level_recommended_avoid_this_s_cont",
                  50)))
    {
        output = USIC0_CH0_SCTR_TRM::
            active_if_at_0_level_recommended_avoid_this_s_cont;
    }
    else if ((result = !strncmp(
                  data, "active_without_referring_actual_signal_level__cont",
                  50)))
    {
        output = USIC0_CH0_SCTR_TRM::
            active_without_referring_actual_signal_level__cont;
    }

    return result;
}

}; // namespace XMC4700
