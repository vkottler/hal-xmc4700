/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU80_CC80_CHC_OCS3 : uint8_t
{
    cc8yst2_signal_path_connected_ccu8xouty2 /*!< CC8yST2 signal path is
                                                connected to the CCU8x.OUTy2 */
        ,
    inverted_ccst2_signal_path_connected_ccu8xouty2 =
        1 /*!< Inverted CCST2 signal path is connected to the CCU8x.OUTy2 */
};
static_assert(sizeof(CCU80_CC80_CHC_OCS3) == 1);

/**
 * Converts CCU80_CC80_CHC_OCS3 to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU80_CC80_CHC_OCS3 instance)
{
    const char *result = "UNKNOWN CCU80_CC80_CHC_OCS3";

    switch (instance)
    {
    case CCU80_CC80_CHC_OCS3::cc8yst2_signal_path_connected_ccu8xouty2:
        result = "cc8yst2_signal_path_connected_ccu8xouty2";
        break;
    case CCU80_CC80_CHC_OCS3::inverted_ccst2_signal_path_connected_ccu8xouty2:
        result = "inverted_ccst2_signal_path_connected_ccu8xouty2";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU80_CC80_CHC_OCS3.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU80_CC80_CHC_OCS3 &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "cc8yst2_signal_path_connected_ccu8xouty2", 40)))
    {
        output = CCU80_CC80_CHC_OCS3::cc8yst2_signal_path_connected_ccu8xouty2;
    }
    else if ((result = !strncmp(
                  data, "inverted_ccst2_signal_path_connected_ccu8xouty2",
                  47)))
    {
        output = CCU80_CC80_CHC_OCS3::
            inverted_ccst2_signal_path_connected_ccu8xouty2;
    }

    return result;
}

}; // namespace XMC4700
