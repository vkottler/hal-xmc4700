/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_GNPTXSTS_NPTxQTop : uint8_t
{
    inout_token /*!< IN/OUT token */,
    zero_length_transmit_packet_device_inhost_out =
        1 /*!< Zero-length transmit packet (device IN/host OUT) */,
    channel_halt_command = 3 /*!< Channel halt command */
};
static_assert(sizeof(USB0_GNPTXSTS_NPTxQTop) == 1);

/**
 * Converts USB0_GNPTXSTS_NPTxQTop to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_GNPTXSTS_NPTxQTop instance)
{
    const char *result = "UNKNOWN USB0_GNPTXSTS_NPTxQTop";

    switch (instance)
    {
    case USB0_GNPTXSTS_NPTxQTop::inout_token:
        result = "inout_token";
        break;
    case USB0_GNPTXSTS_NPTxQTop::zero_length_transmit_packet_device_inhost_out:
        result = "zero_length_transmit_packet_device_inhost_out";
        break;
    case USB0_GNPTXSTS_NPTxQTop::channel_halt_command:
        result = "channel_halt_command";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_GNPTXSTS_NPTxQTop.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_GNPTXSTS_NPTxQTop &output)
{
    bool result = false;

    if ((result = !strncmp(data, "inout_token", 11)))
    {
        output = USB0_GNPTXSTS_NPTxQTop::inout_token;
    }
    else if ((result = !strncmp(
                  data, "zero_length_transmit_packet_device_inhost_out", 45)))
    {
        output = USB0_GNPTXSTS_NPTxQTop::
            zero_length_transmit_packet_device_inhost_out;
    }
    else if ((result = !strncmp(data, "channel_halt_command", 20)))
    {
        output = USB0_GNPTXSTS_NPTxQTop::channel_halt_command;
    }

    return result;
}

}; // namespace XMC4700
