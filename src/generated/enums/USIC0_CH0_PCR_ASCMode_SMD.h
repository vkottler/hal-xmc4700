/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_PCR_ASCMode_SMD : uint8_t
{
    only_one_sample_taken_per_bit_time_current_in_cont /*!< Only one sample is
                                                          taken per bit time.
                                                          The current input
                                                          value is sampled. */
        ,
    three_samples_taken_per_bit_time_majority_dec_cont =
        1 /*!< Three samples are taken per bit time and a majority decision is
             made. */
};
static_assert(sizeof(USIC0_CH0_PCR_ASCMode_SMD) == 1);

/**
 * Converts USIC0_CH0_PCR_ASCMode_SMD to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_PCR_ASCMode_SMD instance)
{
    const char *result = "UNKNOWN USIC0_CH0_PCR_ASCMode_SMD";

    switch (instance)
    {
    case USIC0_CH0_PCR_ASCMode_SMD::
        only_one_sample_taken_per_bit_time_current_in_cont:
        result = "only_one_sample_taken_per_bit_time_current_in_cont";
        break;
    case USIC0_CH0_PCR_ASCMode_SMD::
        three_samples_taken_per_bit_time_majority_dec_cont:
        result = "three_samples_taken_per_bit_time_majority_dec_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_PCR_ASCMode_SMD.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_PCR_ASCMode_SMD &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "only_one_sample_taken_per_bit_time_current_in_cont", 50)))
    {
        output = USIC0_CH0_PCR_ASCMode_SMD::
            only_one_sample_taken_per_bit_time_current_in_cont;
    }
    else if ((result = !strncmp(
                  data, "three_samples_taken_per_bit_time_majority_dec_cont",
                  50)))
    {
        output = USIC0_CH0_PCR_ASCMode_SMD::
            three_samples_taken_per_bit_time_majority_dec_cont;
    }

    return result;
}

}; // namespace XMC4700
