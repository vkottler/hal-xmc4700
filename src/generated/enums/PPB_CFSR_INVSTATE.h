/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_CFSR_INVSTATE : uint8_t
{
    no_invalid_state_usagefault /*!< no invalid state UsageFault */,
    processor_has_attempted_execute_an_instructio_cont =
        1 /*!< the processor has attempted to execute an instruction that makes
             illegal use of the EPSR. */
};
static_assert(sizeof(PPB_CFSR_INVSTATE) == 1);

/**
 * Converts PPB_CFSR_INVSTATE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_CFSR_INVSTATE instance)
{
    const char *result = "UNKNOWN PPB_CFSR_INVSTATE";

    switch (instance)
    {
    case PPB_CFSR_INVSTATE::no_invalid_state_usagefault:
        result = "no_invalid_state_usagefault";
        break;
    case PPB_CFSR_INVSTATE::processor_has_attempted_execute_an_instructio_cont:
        result = "processor_has_attempted_execute_an_instructio_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_CFSR_INVSTATE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_CFSR_INVSTATE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "no_invalid_state_usagefault", 27)))
    {
        output = PPB_CFSR_INVSTATE::no_invalid_state_usagefault;
    }
    else if ((result = !strncmp(
                  data, "processor_has_attempted_execute_an_instructio_cont",
                  50)))
    {
        output = PPB_CFSR_INVSTATE::
            processor_has_attempted_execute_an_instructio_cont;
    }

    return result;
}

}; // namespace XMC4700
