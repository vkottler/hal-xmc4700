/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU40_CC40_INS_EV2IS : uint8_t
{
    a /*!< CCU4x.INyA */,
    b = 1 /*!< CCU4x.INyB */,
    c = 2 /*!< CCU4x.INyC */,
    d = 3 /*!< CCU4x.INyD */,
    e = 4 /*!< CCU4x.INyE */,
    f = 5 /*!< CCU4x.INyF */,
    g = 6 /*!< CCU4x.INyG */,
    h = 7 /*!< CCU4x.INyH */,
    i = 8 /*!< CCU4x.INyI */,
    j = 9 /*!< CCU4x.INyJ */,
    k = 10 /*!< CCU4x.INyK */,
    l = 11 /*!< CCU4x.INyL */,
    m = 12 /*!< CCU4x.INyM */,
    n = 13 /*!< CCU4x.INyN */,
    o = 14 /*!< CCU4x.INyO */,
    p = 15 /*!< CCU4x.INyP */
};
static_assert(sizeof(CCU40_CC40_INS_EV2IS) == 1);

/**
 * Converts CCU40_CC40_INS_EV2IS to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU40_CC40_INS_EV2IS instance)
{
    const char *result = "UNKNOWN CCU40_CC40_INS_EV2IS";

    switch (instance)
    {
    case CCU40_CC40_INS_EV2IS::a:
        result = "a";
        break;
    case CCU40_CC40_INS_EV2IS::b:
        result = "b";
        break;
    case CCU40_CC40_INS_EV2IS::c:
        result = "c";
        break;
    case CCU40_CC40_INS_EV2IS::d:
        result = "d";
        break;
    case CCU40_CC40_INS_EV2IS::e:
        result = "e";
        break;
    case CCU40_CC40_INS_EV2IS::f:
        result = "f";
        break;
    case CCU40_CC40_INS_EV2IS::g:
        result = "g";
        break;
    case CCU40_CC40_INS_EV2IS::h:
        result = "h";
        break;
    case CCU40_CC40_INS_EV2IS::i:
        result = "i";
        break;
    case CCU40_CC40_INS_EV2IS::j:
        result = "j";
        break;
    case CCU40_CC40_INS_EV2IS::k:
        result = "k";
        break;
    case CCU40_CC40_INS_EV2IS::l:
        result = "l";
        break;
    case CCU40_CC40_INS_EV2IS::m:
        result = "m";
        break;
    case CCU40_CC40_INS_EV2IS::n:
        result = "n";
        break;
    case CCU40_CC40_INS_EV2IS::o:
        result = "o";
        break;
    case CCU40_CC40_INS_EV2IS::p:
        result = "p";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU40_CC40_INS_EV2IS.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU40_CC40_INS_EV2IS &output)
{
    bool result = false;

    if ((result = !strncmp(data, "a", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::a;
    }
    else if ((result = !strncmp(data, "b", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::b;
    }
    else if ((result = !strncmp(data, "c", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::c;
    }
    else if ((result = !strncmp(data, "d", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::d;
    }
    else if ((result = !strncmp(data, "e", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::e;
    }
    else if ((result = !strncmp(data, "f", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::f;
    }
    else if ((result = !strncmp(data, "g", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::g;
    }
    else if ((result = !strncmp(data, "h", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::h;
    }
    else if ((result = !strncmp(data, "i", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::i;
    }
    else if ((result = !strncmp(data, "j", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::j;
    }
    else if ((result = !strncmp(data, "k", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::k;
    }
    else if ((result = !strncmp(data, "l", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::l;
    }
    else if ((result = !strncmp(data, "m", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::m;
    }
    else if ((result = !strncmp(data, "n", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::n;
    }
    else if ((result = !strncmp(data, "o", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::o;
    }
    else if ((result = !strncmp(data, "p", 1)))
    {
        output = CCU40_CC40_INS_EV2IS::p;
    }

    return result;
}

}; // namespace XMC4700
