/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class VADC_G0_RCR_DMM : uint8_t
{
    standard_data_reduction_accumulation /*!< Standard data reduction
                                            (accumulation) */
        ,
    result_filtering_mode = 1 /*!< Result filtering mode */,
    difference_mode = 2 /*!< Difference mode */
};
static_assert(sizeof(VADC_G0_RCR_DMM) == 1);

/**
 * Converts VADC_G0_RCR_DMM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(VADC_G0_RCR_DMM instance)
{
    const char *result = "UNKNOWN VADC_G0_RCR_DMM";

    switch (instance)
    {
    case VADC_G0_RCR_DMM::standard_data_reduction_accumulation:
        result = "standard_data_reduction_accumulation";
        break;
    case VADC_G0_RCR_DMM::result_filtering_mode:
        result = "result_filtering_mode";
        break;
    case VADC_G0_RCR_DMM::difference_mode:
        result = "difference_mode";
        break;
    }

    return result;
}

/**
 * Converts a C string to VADC_G0_RCR_DMM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, VADC_G0_RCR_DMM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "standard_data_reduction_accumulation", 36)))
    {
        output = VADC_G0_RCR_DMM::standard_data_reduction_accumulation;
    }
    else if ((result = !strncmp(data, "result_filtering_mode", 21)))
    {
        output = VADC_G0_RCR_DMM::result_filtering_mode;
    }
    else if ((result = !strncmp(data, "difference_mode", 15)))
    {
        output = VADC_G0_RCR_DMM::difference_mode;
    }

    return result;
}

}; // namespace XMC4700
