/**
 * \file
 * \brief Generated by ifgen (3.1.1).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class VADC_OCS_SUS : uint8_t
{
    value1 /*!< Will not suspend */,
    value2 = 1 /*!< Hard suspend: Clock is switched off immediately. */,
    value3 = 2 /*!< Soft suspend mode 0: Stop conversions after the currently running one is completed and its result has been stored. No change for the arbiter. */,
    value4 = 3 /*!< Soft suspend mode 1: Stop conversions after the currently running one is completed and its result has been stored. Stop arbiter after the current arbitration round. */
};
static_assert(sizeof(VADC_OCS_SUS) == 1);

/**
 * Converts VADC_OCS_SUS to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(VADC_OCS_SUS instance)
{
    const char *result = "UNKNOWN VADC_OCS_SUS";

    switch (instance)
    {
    case VADC_OCS_SUS::value1:
        result = "value1";
        break;
    case VADC_OCS_SUS::value2:
        result = "value2";
        break;
    case VADC_OCS_SUS::value3:
        result = "value3";
        break;
    case VADC_OCS_SUS::value4:
        result = "value4";
        break;
    }

    return result;
}

/**
 * Converts a C string to VADC_OCS_SUS.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, VADC_OCS_SUS &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = VADC_OCS_SUS::value1;
    }
    else if ((result = !strncmp(data, "value2", 6)))
    {
        output = VADC_OCS_SUS::value2;
    }
    else if ((result = !strncmp(data, "value3", 6)))
    {
        output = VADC_OCS_SUS::value3;
    }
    else if ((result = !strncmp(data, "value4", 6)))
    {
        output = VADC_OCS_SUS::value4;
    }

    return result;
}

}; // namespace XMC4700
