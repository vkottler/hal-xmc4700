/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_BRG_CLKSEL : uint8_t
{
    fractional_divider_frequency_ffd_selected /*!< The fractional divider
                                                 frequency fFD is selected. */
        ,
    trigger_signal_dx1t_defines_fpin_signal_mclk__cont =
        2 /*!< The trigger signal DX1T defines fPIN. Signal MCLK toggles with
             fPIN. */
        ,
    signal_mclk_corresponds_dx1s_signal_frequency_cont =
        3 /*!< Signal MCLK corresponds to the DX1S signal and the frequency
             fPIN is derived from the rising edges of DX1S. */
};
static_assert(sizeof(USIC0_CH0_BRG_CLKSEL) == 1);

/**
 * Converts USIC0_CH0_BRG_CLKSEL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_BRG_CLKSEL instance)
{
    const char *result = "UNKNOWN USIC0_CH0_BRG_CLKSEL";

    switch (instance)
    {
    case USIC0_CH0_BRG_CLKSEL::fractional_divider_frequency_ffd_selected:
        result = "fractional_divider_frequency_ffd_selected";
        break;
    case USIC0_CH0_BRG_CLKSEL::
        trigger_signal_dx1t_defines_fpin_signal_mclk__cont:
        result = "trigger_signal_dx1t_defines_fpin_signal_mclk__cont";
        break;
    case USIC0_CH0_BRG_CLKSEL::
        signal_mclk_corresponds_dx1s_signal_frequency_cont:
        result = "signal_mclk_corresponds_dx1s_signal_frequency_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_BRG_CLKSEL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_BRG_CLKSEL &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "fractional_divider_frequency_ffd_selected", 41)))
    {
        output =
            USIC0_CH0_BRG_CLKSEL::fractional_divider_frequency_ffd_selected;
    }
    else if ((result = !strncmp(
                  data, "trigger_signal_dx1t_defines_fpin_signal_mclk__cont",
                  50)))
    {
        output = USIC0_CH0_BRG_CLKSEL::
            trigger_signal_dx1t_defines_fpin_signal_mclk__cont;
    }
    else if ((result = !strncmp(
                  data, "signal_mclk_corresponds_dx1s_signal_frequency_cont",
                  50)))
    {
        output = USIC0_CH0_BRG_CLKSEL::
            signal_mclk_corresponds_dx1s_signal_frequency_cont;
    }

    return result;
}

}; // namespace XMC4700
