/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY : uint8_t
{
    not_ready_write_buffer /*!< Not Ready to Write Buffer. */,
    ready_write_buffer = 1 /*!< Ready to Write Buffer. */
};
static_assert(sizeof(SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY) == 1);

/**
 * Converts SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY instance)
{
    const char *result = "UNKNOWN SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY";

    switch (instance)
    {
    case SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY::not_ready_write_buffer:
        result = "not_ready_write_buffer";
        break;
    case SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY::ready_write_buffer:
        result = "ready_write_buffer";
        break;
    }

    return result;
}

/**
 * Converts a C string to SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY &output)
{
    bool result = false;

    if ((result = !strncmp(data, "not_ready_write_buffer", 22)))
    {
        output =
            SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY::not_ready_write_buffer;
    }
    else if ((result = !strncmp(data, "ready_write_buffer", 18)))
    {
        output = SDMMC_INT_STATUS_NORM_BUFF_WRITE_READY::ready_write_buffer;
    }

    return result;
}

}; // namespace XMC4700
