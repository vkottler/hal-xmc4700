/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU80_CC80_STC_STM : uint8_t
{
    period_match_one_match /*!< Shadow transfer is done in Period Match and One
                              match. */
        ,
    only_period_match =
        1 /*!< Shadow transfer is done only in Period Match. */,
    only_one_match = 2 /*!< Shadow transfer is done only in One Match. */
};
static_assert(sizeof(CCU80_CC80_STC_STM) == 1);

/**
 * Converts CCU80_CC80_STC_STM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU80_CC80_STC_STM instance)
{
    const char *result = "UNKNOWN CCU80_CC80_STC_STM";

    switch (instance)
    {
    case CCU80_CC80_STC_STM::period_match_one_match:
        result = "period_match_one_match";
        break;
    case CCU80_CC80_STC_STM::only_period_match:
        result = "only_period_match";
        break;
    case CCU80_CC80_STC_STM::only_one_match:
        result = "only_one_match";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU80_CC80_STC_STM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU80_CC80_STC_STM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "period_match_one_match", 22)))
    {
        output = CCU80_CC80_STC_STM::period_match_one_match;
    }
    else if ((result = !strncmp(data, "only_period_match", 17)))
    {
        output = CCU80_CC80_STC_STM::only_period_match;
    }
    else if ((result = !strncmp(data, "only_one_match", 14)))
    {
        output = CCU80_CC80_STC_STM::only_one_match;
    }

    return result;
}

}; // namespace XMC4700
