/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CAN_MCR_CLKSEL : uint8_t
{
    no_clock_supplied /*!< No clock supplied */,
    fperiph = 1 /*!< fPERIPH */,
    fohp = 2 /*!< fOHP */,
    hard_wired_0 = 4 /*!< hard wired to 0 */,
    hard_wired_0_x = 8 /*!< hard wired to 0 */
};
static_assert(sizeof(CAN_MCR_CLKSEL) == 1);

/**
 * Converts CAN_MCR_CLKSEL to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN_MCR_CLKSEL instance)
{
    const char *result = "UNKNOWN CAN_MCR_CLKSEL";

    switch (instance)
    {
    case CAN_MCR_CLKSEL::no_clock_supplied:
        result = "no_clock_supplied";
        break;
    case CAN_MCR_CLKSEL::fperiph:
        result = "fperiph";
        break;
    case CAN_MCR_CLKSEL::fohp:
        result = "fohp";
        break;
    case CAN_MCR_CLKSEL::hard_wired_0:
        result = "hard_wired_0";
        break;
    case CAN_MCR_CLKSEL::hard_wired_0_x:
        result = "hard_wired_0_x";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN_MCR_CLKSEL.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN_MCR_CLKSEL &output)
{
    bool result = false;

    if ((result = !strncmp(data, "no_clock_supplied", 17)))
    {
        output = CAN_MCR_CLKSEL::no_clock_supplied;
    }
    else if ((result = !strncmp(data, "fperiph", 7)))
    {
        output = CAN_MCR_CLKSEL::fperiph;
    }
    else if ((result = !strncmp(data, "fohp", 4)))
    {
        output = CAN_MCR_CLKSEL::fohp;
    }
    else if ((result = !strncmp(data, "hard_wired_0", 12)))
    {
        output = CAN_MCR_CLKSEL::hard_wired_0;
    }
    else if ((result = !strncmp(data, "hard_wired_0_x", 14)))
    {
        output = CAN_MCR_CLKSEL::hard_wired_0_x;
    }

    return result;
}

}; // namespace XMC4700
