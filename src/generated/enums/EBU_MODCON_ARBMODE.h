/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class EBU_MODCON_ARBMODE : uint8_t
{
    no_bus_arbitration_mode_selected /*!< No Bus arbitration mode selected */,
    arbiter_mode_arbitration_mode_selected =
        1 /*!< Arbiter Mode arbitration mode selected */,
    participant_arbitration_mode_selected =
        2 /*!< Participant arbitration mode selected */,
    sole_master_arbitration_mode_selected =
        3 /*!< Sole Master arbitration mode selected */
};
static_assert(sizeof(EBU_MODCON_ARBMODE) == 1);

/**
 * Converts EBU_MODCON_ARBMODE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(EBU_MODCON_ARBMODE instance)
{
    const char *result = "UNKNOWN EBU_MODCON_ARBMODE";

    switch (instance)
    {
    case EBU_MODCON_ARBMODE::no_bus_arbitration_mode_selected:
        result = "no_bus_arbitration_mode_selected";
        break;
    case EBU_MODCON_ARBMODE::arbiter_mode_arbitration_mode_selected:
        result = "arbiter_mode_arbitration_mode_selected";
        break;
    case EBU_MODCON_ARBMODE::participant_arbitration_mode_selected:
        result = "participant_arbitration_mode_selected";
        break;
    case EBU_MODCON_ARBMODE::sole_master_arbitration_mode_selected:
        result = "sole_master_arbitration_mode_selected";
        break;
    }

    return result;
}

/**
 * Converts a C string to EBU_MODCON_ARBMODE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, EBU_MODCON_ARBMODE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "no_bus_arbitration_mode_selected", 32)))
    {
        output = EBU_MODCON_ARBMODE::no_bus_arbitration_mode_selected;
    }
    else if ((result = !strncmp(data, "arbiter_mode_arbitration_mode_selected",
                                38)))
    {
        output = EBU_MODCON_ARBMODE::arbiter_mode_arbitration_mode_selected;
    }
    else if ((result =
                  !strncmp(data, "participant_arbitration_mode_selected", 37)))
    {
        output = EBU_MODCON_ARBMODE::participant_arbitration_mode_selected;
    }
    else if ((result =
                  !strncmp(data, "sole_master_arbitration_mode_selected", 37)))
    {
        output = EBU_MODCON_ARBMODE::sole_master_arbitration_mode_selected;
    }

    return result;
}

}; // namespace XMC4700
