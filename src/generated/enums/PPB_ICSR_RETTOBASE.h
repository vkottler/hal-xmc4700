/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_ICSR_RETTOBASE : uint8_t
{
    preempted_active_exceptions_execute /*!< there are preempted active
                                           exceptions to execute */
        ,
    no_active_exceptions_or_currently_executing_e_cont =
        1 /*!< there are no active exceptions, or the currently-executing
             exception is the only active exception. */
};
static_assert(sizeof(PPB_ICSR_RETTOBASE) == 1);

/**
 * Converts PPB_ICSR_RETTOBASE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_ICSR_RETTOBASE instance)
{
    const char *result = "UNKNOWN PPB_ICSR_RETTOBASE";

    switch (instance)
    {
    case PPB_ICSR_RETTOBASE::preempted_active_exceptions_execute:
        result = "preempted_active_exceptions_execute";
        break;
    case PPB_ICSR_RETTOBASE::
        no_active_exceptions_or_currently_executing_e_cont:
        result = "no_active_exceptions_or_currently_executing_e_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_ICSR_RETTOBASE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_ICSR_RETTOBASE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "preempted_active_exceptions_execute", 35)))
    {
        output = PPB_ICSR_RETTOBASE::preempted_active_exceptions_execute;
    }
    else if ((result = !strncmp(
                  data, "no_active_exceptions_or_currently_executing_e_cont",
                  50)))
    {
        output = PPB_ICSR_RETTOBASE::
            no_active_exceptions_or_currently_executing_e_cont;
    }

    return result;
}

}; // namespace XMC4700
