/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_CFSR_DIVBYZERO : uint8_t
{
    no_divide_by_zero_fault_or_divide_by_zero_tra_cont /*!< no divide by zero
                                                          fault, or divide by
                                                          zero trapping not
                                                          enabled */
        ,
    processor_has_executed_an_sdiv_or_udiv_instru_cont =
        1 /*!< the processor has executed an SDIV or UDIV instruction with a
             divisor of 0 */
};
static_assert(sizeof(PPB_CFSR_DIVBYZERO) == 1);

/**
 * Converts PPB_CFSR_DIVBYZERO to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_CFSR_DIVBYZERO instance)
{
    const char *result = "UNKNOWN PPB_CFSR_DIVBYZERO";

    switch (instance)
    {
    case PPB_CFSR_DIVBYZERO::
        no_divide_by_zero_fault_or_divide_by_zero_tra_cont:
        result = "no_divide_by_zero_fault_or_divide_by_zero_tra_cont";
        break;
    case PPB_CFSR_DIVBYZERO::
        processor_has_executed_an_sdiv_or_udiv_instru_cont:
        result = "processor_has_executed_an_sdiv_or_udiv_instru_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_CFSR_DIVBYZERO.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_CFSR_DIVBYZERO &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "no_divide_by_zero_fault_or_divide_by_zero_tra_cont", 50)))
    {
        output = PPB_CFSR_DIVBYZERO::
            no_divide_by_zero_fault_or_divide_by_zero_tra_cont;
    }
    else if ((result = !strncmp(
                  data, "processor_has_executed_an_sdiv_or_udiv_instru_cont",
                  50)))
    {
        output = PPB_CFSR_DIVBYZERO::
            processor_has_executed_an_sdiv_or_udiv_instru_cont;
    }

    return result;
}

}; // namespace XMC4700
