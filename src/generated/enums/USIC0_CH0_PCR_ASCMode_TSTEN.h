/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USIC0_CH0_PCR_ASCMode_TSTEN : uint8_t
{
    not_modified_depending_transmitter_status /*!< Flag PSR[9] is not modified
                                                 depending on the transmitter
                                                 status. */
        ,
    set_during_complete_transmission_frame =
        1 /*!< Flag PSR[9] is set during the complete transmission of a frame.
           */
};
static_assert(sizeof(USIC0_CH0_PCR_ASCMode_TSTEN) == 1);

/**
 * Converts USIC0_CH0_PCR_ASCMode_TSTEN to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USIC0_CH0_PCR_ASCMode_TSTEN instance)
{
    const char *result = "UNKNOWN USIC0_CH0_PCR_ASCMode_TSTEN";

    switch (instance)
    {
    case USIC0_CH0_PCR_ASCMode_TSTEN::
        not_modified_depending_transmitter_status:
        result = "not_modified_depending_transmitter_status";
        break;
    case USIC0_CH0_PCR_ASCMode_TSTEN::set_during_complete_transmission_frame:
        result = "set_during_complete_transmission_frame";
        break;
    }

    return result;
}

/**
 * Converts a C string to USIC0_CH0_PCR_ASCMode_TSTEN.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USIC0_CH0_PCR_ASCMode_TSTEN &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "not_modified_depending_transmitter_status", 41)))
    {
        output = USIC0_CH0_PCR_ASCMode_TSTEN::
            not_modified_depending_transmitter_status;
    }
    else if ((result = !strncmp(data, "set_during_complete_transmission_frame",
                                38)))
    {
        output = USIC0_CH0_PCR_ASCMode_TSTEN::
            set_during_complete_transmission_frame;
    }

    return result;
}

}; // namespace XMC4700
