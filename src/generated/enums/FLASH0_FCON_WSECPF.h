/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class FLASH0_FCON_WSECPF : uint8_t
{
    no_additional_wait_state_error_correction /*!< No additional wait state for
                                                 error correction */
        ,
    one_additional_wait_state_error_correction_du_cont =
        1 /*!< One additional wait state for error correction during read
             access to Program Flash. If enabled, this wait state is only used
             for the first transfer of a burst transfer. */
};
static_assert(sizeof(FLASH0_FCON_WSECPF) == 1);

/**
 * Converts FLASH0_FCON_WSECPF to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(FLASH0_FCON_WSECPF instance)
{
    const char *result = "UNKNOWN FLASH0_FCON_WSECPF";

    switch (instance)
    {
    case FLASH0_FCON_WSECPF::no_additional_wait_state_error_correction:
        result = "no_additional_wait_state_error_correction";
        break;
    case FLASH0_FCON_WSECPF::
        one_additional_wait_state_error_correction_du_cont:
        result = "one_additional_wait_state_error_correction_du_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to FLASH0_FCON_WSECPF.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, FLASH0_FCON_WSECPF &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "no_additional_wait_state_error_correction", 41)))
    {
        output = FLASH0_FCON_WSECPF::no_additional_wait_state_error_correction;
    }
    else if ((result = !strncmp(
                  data, "one_additional_wait_state_error_correction_du_cont",
                  50)))
    {
        output = FLASH0_FCON_WSECPF::
            one_additional_wait_state_error_correction_du_cont;
    }

    return result;
}

}; // namespace XMC4700
