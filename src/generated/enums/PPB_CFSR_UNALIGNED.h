/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class PPB_CFSR_UNALIGNED : uint8_t
{
    no_unaligned_access_fault_or_unaligned_access_cont /*!< no unaligned access
                                                          fault, or unaligned
                                                          access trapping not
                                                          enabled */
        ,
    processor_has_made_an_unaligned_memory_access =
        1 /*!< the processor has made an unaligned memory access. */
};
static_assert(sizeof(PPB_CFSR_UNALIGNED) == 1);

/**
 * Converts PPB_CFSR_UNALIGNED to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(PPB_CFSR_UNALIGNED instance)
{
    const char *result = "UNKNOWN PPB_CFSR_UNALIGNED";

    switch (instance)
    {
    case PPB_CFSR_UNALIGNED::
        no_unaligned_access_fault_or_unaligned_access_cont:
        result = "no_unaligned_access_fault_or_unaligned_access_cont";
        break;
    case PPB_CFSR_UNALIGNED::processor_has_made_an_unaligned_memory_access:
        result = "processor_has_made_an_unaligned_memory_access";
        break;
    }

    return result;
}

/**
 * Converts a C string to PPB_CFSR_UNALIGNED.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, PPB_CFSR_UNALIGNED &output)
{
    bool result = false;

    if ((result = !strncmp(
             data, "no_unaligned_access_fault_or_unaligned_access_cont", 50)))
    {
        output = PPB_CFSR_UNALIGNED::
            no_unaligned_access_fault_or_unaligned_access_cont;
    }
    else if ((result = !strncmp(
                  data, "processor_has_made_an_unaligned_memory_access", 45)))
    {
        output =
            PPB_CFSR_UNALIGNED::processor_has_made_an_unaligned_memory_access;
    }

    return result;
}

}; // namespace XMC4700
