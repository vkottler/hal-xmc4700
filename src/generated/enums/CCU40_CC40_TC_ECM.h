/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CCU40_CC40_TC_ECM : uint8_t
{
    value1 /*!< Normal Capture Mode. Clear of the Full Flag of each capture register is done by accessing the registers individually only. */,
    value2 = 1 /*!< Extended Capture Mode. Clear of the Full Flag of each capture register is done not only by accessing the individual registers but also by accessing the ECRD register. When reading the ECRD register, only the capture register register full flag pointed by the ECRD.VPTR is cleared. */
};
static_assert(sizeof(CCU40_CC40_TC_ECM) == 1);

/**
 * Converts CCU40_CC40_TC_ECM to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CCU40_CC40_TC_ECM instance)
{
    const char *result = "UNKNOWN CCU40_CC40_TC_ECM";

    switch (instance)
    {
    case CCU40_CC40_TC_ECM::value1:
        result = "value1";
        break;
    case CCU40_CC40_TC_ECM::value2:
        result = "value2";
        break;
    }

    return result;
}

/**
 * Converts a C string to CCU40_CC40_TC_ECM.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CCU40_CC40_TC_ECM &output)
{
    bool result = false;

    if ((result = !strncmp(data, "value1", 6)))
    {
        output = CCU40_CC40_TC_ECM::value1;
    }
    else if ((result = !strncmp(data, "value2", 6)))
    {
        output = CCU40_CC40_TC_ECM::value2;
    }

    return result;
}

}; // namespace XMC4700
