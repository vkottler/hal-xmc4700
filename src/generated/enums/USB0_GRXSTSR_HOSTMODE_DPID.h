/**
 * \file
 * \brief Generated by ifgen (3.1.7).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class USB0_GRXSTSR_HOSTMODE_DPID : uint8_t
{
    data0 /*!< DATA0 */,
    data1 = 2 /*!< DATA1 */,
    data2 = 1 /*!< DATA2 */,
    mdata = 3 /*!< MDATA */
};
static_assert(sizeof(USB0_GRXSTSR_HOSTMODE_DPID) == 1);

/**
 * Converts USB0_GRXSTSR_HOSTMODE_DPID to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(USB0_GRXSTSR_HOSTMODE_DPID instance)
{
    const char *result = "UNKNOWN USB0_GRXSTSR_HOSTMODE_DPID";

    switch (instance)
    {
    case USB0_GRXSTSR_HOSTMODE_DPID::data0:
        result = "data0";
        break;
    case USB0_GRXSTSR_HOSTMODE_DPID::data1:
        result = "data1";
        break;
    case USB0_GRXSTSR_HOSTMODE_DPID::data2:
        result = "data2";
        break;
    case USB0_GRXSTSR_HOSTMODE_DPID::mdata:
        result = "mdata";
        break;
    }

    return result;
}

/**
 * Converts a C string to USB0_GRXSTSR_HOSTMODE_DPID.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, USB0_GRXSTSR_HOSTMODE_DPID &output)
{
    bool result = false;

    if ((result = !strncmp(data, "data0", 5)))
    {
        output = USB0_GRXSTSR_HOSTMODE_DPID::data0;
    }
    else if ((result = !strncmp(data, "data1", 5)))
    {
        output = USB0_GRXSTSR_HOSTMODE_DPID::data1;
    }
    else if ((result = !strncmp(data, "data2", 5)))
    {
        output = USB0_GRXSTSR_HOSTMODE_DPID::data2;
    }
    else if ((result = !strncmp(data, "mdata", 5)))
    {
        output = USB0_GRXSTSR_HOSTMODE_DPID::mdata;
    }

    return result;
}

}; // namespace XMC4700
