/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class CAN_NODE0_NBTR_DIV8 : uint8_t
{
    brp1_clock_cycles /*!< A time quantum lasts (BRP+1) clock cycles. */,
    _8_brp1_clock_cycles =
        1 /*!< A time quantum lasts 8 (BRP+1) clock cycles. */
};
static_assert(sizeof(CAN_NODE0_NBTR_DIV8) == 1);

/**
 * Converts CAN_NODE0_NBTR_DIV8 to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(CAN_NODE0_NBTR_DIV8 instance)
{
    const char *result = "UNKNOWN CAN_NODE0_NBTR_DIV8";

    switch (instance)
    {
    case CAN_NODE0_NBTR_DIV8::brp1_clock_cycles:
        result = "brp1_clock_cycles";
        break;
    case CAN_NODE0_NBTR_DIV8::_8_brp1_clock_cycles:
        result = "_8_brp1_clock_cycles";
        break;
    }

    return result;
}

/**
 * Converts a C string to CAN_NODE0_NBTR_DIV8.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, CAN_NODE0_NBTR_DIV8 &output)
{
    bool result = false;

    if ((result = !strncmp(data, "brp1_clock_cycles", 17)))
    {
        output = CAN_NODE0_NBTR_DIV8::brp1_clock_cycles;
    }
    else if ((result = !strncmp(data, "_8_brp1_clock_cycles", 20)))
    {
        output = CAN_NODE0_NBTR_DIV8::_8_brp1_clock_cycles;
    }

    return result;
}

}; // namespace XMC4700
