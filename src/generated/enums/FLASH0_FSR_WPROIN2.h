/**
 * \file
 * \brief Generated by ifgen (3.1.4).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class FLASH0_FSR_WPROIN2 : uint8_t
{
    no_otp_write_protection_installed_user_2 /*!< No OTP write protection
                                                installed for user 2 */
        ,
    sector_otp_write_protection_with_rom_function_cont =
        1 /*!< Sector OTP write protection with ROM functionality is configured
             and correctly confirmed in the UCB2. The protection is locked for
             ever. */
};
static_assert(sizeof(FLASH0_FSR_WPROIN2) == 1);

/**
 * Converts FLASH0_FSR_WPROIN2 to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(FLASH0_FSR_WPROIN2 instance)
{
    const char *result = "UNKNOWN FLASH0_FSR_WPROIN2";

    switch (instance)
    {
    case FLASH0_FSR_WPROIN2::no_otp_write_protection_installed_user_2:
        result = "no_otp_write_protection_installed_user_2";
        break;
    case FLASH0_FSR_WPROIN2::
        sector_otp_write_protection_with_rom_function_cont:
        result = "sector_otp_write_protection_with_rom_function_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to FLASH0_FSR_WPROIN2.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, FLASH0_FSR_WPROIN2 &output)
{
    bool result = false;

    if ((result =
             !strncmp(data, "no_otp_write_protection_installed_user_2", 40)))
    {
        output = FLASH0_FSR_WPROIN2::no_otp_write_protection_installed_user_2;
    }
    else if ((result = !strncmp(
                  data, "sector_otp_write_protection_with_rom_function_cont",
                  50)))
    {
        output = FLASH0_FSR_WPROIN2::
            sector_otp_write_protection_with_rom_function_cont;
    }

    return result;
}

}; // namespace XMC4700
