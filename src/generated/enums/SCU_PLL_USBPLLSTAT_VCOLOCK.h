/**
 * \file
 * \brief Generated by ifgen (3.1.2).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace XMC4700
{

enum class SCU_PLL_USBPLLSTAT_VCOLOCK : uint8_t
{
    greater_than_a_cont /*!< The frequency difference of fREF and fDIV is
                           greater than allowed. The VCO part of the PLL can
                           not lock on a target frequency. */
        ,
    small_enough_e_cont = 1 /*!< The frequency difference of fREF and fDIV is
                               small enough to enable a stable VCO operation */
};
static_assert(sizeof(SCU_PLL_USBPLLSTAT_VCOLOCK) == 1);

/**
 * Converts SCU_PLL_USBPLLSTAT_VCOLOCK to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(SCU_PLL_USBPLLSTAT_VCOLOCK instance)
{
    const char *result = "UNKNOWN SCU_PLL_USBPLLSTAT_VCOLOCK";

    switch (instance)
    {
    case SCU_PLL_USBPLLSTAT_VCOLOCK::greater_than_a_cont:
        result = "greater_than_a_cont";
        break;
    case SCU_PLL_USBPLLSTAT_VCOLOCK::small_enough_e_cont:
        result = "small_enough_e_cont";
        break;
    }

    return result;
}

/**
 * Converts a C string to SCU_PLL_USBPLLSTAT_VCOLOCK.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, SCU_PLL_USBPLLSTAT_VCOLOCK &output)
{
    bool result = false;

    if ((result = !strncmp(data, "greater_than_a_cont", 19)))
    {
        output = SCU_PLL_USBPLLSTAT_VCOLOCK::greater_than_a_cont;
    }
    else if ((result = !strncmp(data, "small_enough_e_cont", 19)))
    {
        output = SCU_PLL_USBPLLSTAT_VCOLOCK::small_enough_e_cont;
    }

    return result;
}

}; // namespace XMC4700
